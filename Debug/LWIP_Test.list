
LWIP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019bd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000417c  08019d60  08019d60  00029d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dedc  0801dedc  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801dedc  0801dedc  0002dedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dee4  0801dee4  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801dee4  0801dee4  0002dee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dee8  0801dee8  0002dee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801deec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bc58  20000080  0801df6c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000bcd8  0801df6c  0003bcd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049f2f  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000895d  00000000  00000000  00079fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020e8  00000000  00000000  00082940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002000  00000000  00000000  00084a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001182c  00000000  00000000  00086a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036167  00000000  00000000  00098254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6601  00000000  00000000  000ce3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c49bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e74  00000000  00000000  001c4a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019d48 	.word	0x08019d48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08019d48 	.word	0x08019d48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <DAS_Init>:
pulse_channel pulse_channels[2];
//--------------------------------------------------
int32_t max_requests;
//--------------------------------------------------
void DAS_Init(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
	channels[0].id = 0;
 800057c:	4b24      	ldr	r3, [pc, #144]	; (8000610 <DAS_Init+0x98>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	channels[0].mode = DAS_ANALOG_MODE_CURR; // DAS_ANALOG_MODE_OFF
 8000582:	4b23      	ldr	r3, [pc, #140]	; (8000610 <DAS_Init+0x98>)
 8000584:	2202      	movs	r2, #2
 8000586:	705a      	strb	r2, [r3, #1]
	channels[0].value.value = 0.0;
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <DAS_Init+0x98>)
 800058a:	f04f 0200 	mov.w	r2, #0
 800058e:	605a      	str	r2, [r3, #4]
	channels[1].id = 1;
 8000590:	4b1f      	ldr	r3, [pc, #124]	; (8000610 <DAS_Init+0x98>)
 8000592:	2201      	movs	r2, #1
 8000594:	721a      	strb	r2, [r3, #8]
	channels[1].mode = DAS_ANALOG_MODE_CURR; // DAS_ANALOG_MODE_OFF
 8000596:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <DAS_Init+0x98>)
 8000598:	2202      	movs	r2, #2
 800059a:	725a      	strb	r2, [r3, #9]
	channels[1].value.value = 0.0;
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <DAS_Init+0x98>)
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
	channels[2].id = 2;
 80005a4:	4b1a      	ldr	r3, [pc, #104]	; (8000610 <DAS_Init+0x98>)
 80005a6:	2202      	movs	r2, #2
 80005a8:	741a      	strb	r2, [r3, #16]
	channels[2].mode = DAS_ANALOG_MODE_CURR; // DAS_ANALOG_MODE_OFF
 80005aa:	4b19      	ldr	r3, [pc, #100]	; (8000610 <DAS_Init+0x98>)
 80005ac:	2202      	movs	r2, #2
 80005ae:	745a      	strb	r2, [r3, #17]
	channels[2].value.value = 0.0;
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <DAS_Init+0x98>)
 80005b2:	f04f 0200 	mov.w	r2, #0
 80005b6:	615a      	str	r2, [r3, #20]
	channels[3].id = 3;
 80005b8:	4b15      	ldr	r3, [pc, #84]	; (8000610 <DAS_Init+0x98>)
 80005ba:	2203      	movs	r2, #3
 80005bc:	761a      	strb	r2, [r3, #24]
	channels[3].mode = DAS_ANALOG_MODE_CURR; // DAS_ANALOG_MODE_OFF
 80005be:	4b14      	ldr	r3, [pc, #80]	; (8000610 <DAS_Init+0x98>)
 80005c0:	2202      	movs	r2, #2
 80005c2:	765a      	strb	r2, [r3, #25]
	channels[3].value.value = 0.0;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <DAS_Init+0x98>)
 80005c6:	f04f 0200 	mov.w	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]

	pulse_channels[0].id = 0;
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <DAS_Init+0x9c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	pulse_channels[0].mode = DAS_PULSE_MODE_COUNTER; // DAS_PULSE_MODE_OFF
 80005d2:	4b10      	ldr	r3, [pc, #64]	; (8000614 <DAS_Init+0x9c>)
 80005d4:	2201      	movs	r2, #1
 80005d6:	705a      	strb	r2, [r3, #1]
	pulse_channels[0].frequency = 0.0f;
 80005d8:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <DAS_Init+0x9c>)
 80005da:	f04f 0200 	mov.w	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
	pulse_channels[0].count = 0;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <DAS_Init+0x9c>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	605a      	str	r2, [r3, #4]

	pulse_channels[1].id = 1;
 80005e6:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <DAS_Init+0x9c>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	731a      	strb	r2, [r3, #12]
	pulse_channels[1].mode = DAS_PULSE_MODE_COUNTER; // DAS_PULSE_MODE_OFF
 80005ec:	4b09      	ldr	r3, [pc, #36]	; (8000614 <DAS_Init+0x9c>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	735a      	strb	r2, [r3, #13]
	pulse_channels[1].frequency = 0.0f;
 80005f2:	4b08      	ldr	r3, [pc, #32]	; (8000614 <DAS_Init+0x9c>)
 80005f4:	f04f 0200 	mov.w	r2, #0
 80005f8:	615a      	str	r2, [r3, #20]
	pulse_channels[1].count = 0;
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <DAS_Init+0x9c>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]

	max_requests = 5;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <DAS_Init+0xa0>)
 8000602:	2205      	movs	r2, #5
 8000604:	601a      	str	r2, [r3, #0]
}
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr
 8000610:	20005184 	.word	0x20005184
 8000614:	200051a4 	.word	0x200051a4
 8000618:	20005020 	.word	0x20005020

0800061c <DAS_AnalogChannelExists>:

uint8_t DAS_AnalogChannelExists(uint8_t ch_id)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
	return ch_id > 3 ? 0 : 1;
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b03      	cmp	r3, #3
 800062a:	bf94      	ite	ls
 800062c:	2301      	movls	r3, #1
 800062e:	2300      	movhi	r3, #0
 8000630:	b2db      	uxtb	r3, r3
}
 8000632:	4618      	mov	r0, r3
 8000634:	370c      	adds	r7, #12
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr

0800063e <DAS_PulseChannelExists>:

uint8_t DAS_PulseChannelExists(uint8_t ch_id)
{
 800063e:	b480      	push	{r7}
 8000640:	b083      	sub	sp, #12
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	71fb      	strb	r3, [r7, #7]
	return ch_id > 1 ? 0 : 1;
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b01      	cmp	r3, #1
 800064c:	bf94      	ite	ls
 800064e:	2301      	movls	r3, #1
 8000650:	2300      	movhi	r3, #0
 8000652:	b2db      	uxtb	r3, r3
}
 8000654:	4618      	mov	r0, r3
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <DAS_IsPulseChannelModeExists>:

uint8_t DAS_IsPulseChannelModeExists(uint8_t ch_mode)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	return ch_mode > 2 ? 0 : 1;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b02      	cmp	r3, #2
 800066e:	bf94      	ite	ls
 8000670:	2301      	movls	r3, #1
 8000672:	2300      	movhi	r3, #0
 8000674:	b2db      	uxtb	r3, r3
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
	...

08000684 <DAS_SetChannelMode>:

uint8_t DAS_SetChannelMode(uint8_t ch_id, uint8_t ch_mode)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
	if(!DAS_AnalogChannelExists(ch_id))
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffc0 	bl	800061c <DAS_AnalogChannelExists>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d101      	bne.n	80006a6 <DAS_SetChannelMode+0x22>
	{
		return DAS_ERROR_CHANNEL;
 80006a2:	2302      	movs	r3, #2
 80006a4:	e00b      	b.n	80006be <DAS_SetChannelMode+0x3a>
	}

	if(ch_mode > 2)
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d901      	bls.n	80006b0 <DAS_SetChannelMode+0x2c>
	{
		return DAS_ERROR_MODE;
 80006ac:	2303      	movs	r3, #3
 80006ae:	e006      	b.n	80006be <DAS_SetChannelMode+0x3a>
	}

	channels[ch_id].mode = ch_mode;
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <DAS_SetChannelMode+0x44>)
 80006b4:	00db      	lsls	r3, r3, #3
 80006b6:	4413      	add	r3, r2
 80006b8:	79ba      	ldrb	r2, [r7, #6]
 80006ba:	705a      	strb	r2, [r3, #1]

	return DAS_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20005184 	.word	0x20005184

080006cc <DAS_SetAnalogChannelValue>:
uint8_t DAS_SetAnalogChannelValue(uint8_t ch_id, float ch_value)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	ed87 0a00 	vstr	s0, [r7]
 80006d8:	71fb      	strb	r3, [r7, #7]
	if(!DAS_AnalogChannelExists(ch_id))
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff9d 	bl	800061c <DAS_AnalogChannelExists>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d101      	bne.n	80006ec <DAS_SetAnalogChannelValue+0x20>
	{
		return DAS_ERROR_CHANNEL;
 80006e8:	2302      	movs	r3, #2
 80006ea:	e010      	b.n	800070e <DAS_SetAnalogChannelValue+0x42>
	}

	if(channels[ch_id].mode == DAS_ANALOG_MODE_OFF)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	4a0a      	ldr	r2, [pc, #40]	; (8000718 <DAS_SetAnalogChannelValue+0x4c>)
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	4413      	add	r3, r2
 80006f4:	785b      	ldrb	r3, [r3, #1]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d101      	bne.n	80006fe <DAS_SetAnalogChannelValue+0x32>
	{
		return DAS_ERROR_MODE;
 80006fa:	2303      	movs	r3, #3
 80006fc:	e007      	b.n	800070e <DAS_SetAnalogChannelValue+0x42>
	}

	channels[ch_id].value.value = ch_value;
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4a05      	ldr	r2, [pc, #20]	; (8000718 <DAS_SetAnalogChannelValue+0x4c>)
 8000702:	00db      	lsls	r3, r3, #3
 8000704:	4413      	add	r3, r2
 8000706:	3304      	adds	r3, #4
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	601a      	str	r2, [r3, #0]

	return DAS_OK;
 800070c:	2300      	movs	r3, #0
}
 800070e:	4618      	mov	r0, r3
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20005184 	.word	0x20005184

0800071c <DAS_SetPulseChannelMode>:
	ch_value = channels[ch_id].value.data;

	return DAS_OK;
}
uint8_t DAS_SetPulseChannelMode(uint8_t ch_id, uint8_t ch_mode)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	460a      	mov	r2, r1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	4613      	mov	r3, r2
 800072a:	71bb      	strb	r3, [r7, #6]
	if(!DAS_PulseChannelExists(ch_id))
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ff85 	bl	800063e <DAS_PulseChannelExists>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d101      	bne.n	800073e <DAS_SetPulseChannelMode+0x22>
	{
		return DAS_ERROR_CHANNEL;
 800073a:	2302      	movs	r3, #2
 800073c:	e013      	b.n	8000766 <DAS_SetPulseChannelMode+0x4a>
	}

	if(!DAS_IsPulseChannelModeExists(ch_mode))
 800073e:	79bb      	ldrb	r3, [r7, #6]
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff ff8d 	bl	8000660 <DAS_IsPulseChannelModeExists>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d101      	bne.n	8000750 <DAS_SetPulseChannelMode+0x34>
	{
		return DAS_ERROR_MODE;
 800074c:	2303      	movs	r3, #3
 800074e:	e00a      	b.n	8000766 <DAS_SetPulseChannelMode+0x4a>
	}

	pulse_channels[ch_id].mode = ch_mode;
 8000750:	79fa      	ldrb	r2, [r7, #7]
 8000752:	4907      	ldr	r1, [pc, #28]	; (8000770 <DAS_SetPulseChannelMode+0x54>)
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	440b      	add	r3, r1
 800075e:	3301      	adds	r3, #1
 8000760:	79ba      	ldrb	r2, [r7, #6]
 8000762:	701a      	strb	r2, [r3, #0]

	return DAS_OK;
 8000764:	2300      	movs	r3, #0
}
 8000766:	4618      	mov	r0, r3
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	200051a4 	.word	0x200051a4

08000774 <das_read>:
static void das_print(uint8_t* buf, uint16_t start, uint16_t buf_len, char *pref){}

uint8_t counter = 0;

uint16_t das_read(uint8_t* data, uint16_t len_data)
{
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b089      	sub	sp, #36	; 0x24
 8000778:	af02      	add	r7, sp, #8
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
	uint16_t txPointer = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	82fb      	strh	r3, [r7, #22]

	if(len_data > 0)
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d079      	beq.n	800087e <das_read+0x10a>
	{
		uint16_t i;
		uint16_t len = 0;
 800078a:	2300      	movs	r3, #0
 800078c:	827b      	strh	r3, [r7, #18]
		uint16_t das_len = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	823b      	strh	r3, [r7, #16]

		for(i = 0; i < len_data; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	82bb      	strh	r3, [r7, #20]
 8000796:	e06e      	b.n	8000876 <das_read+0x102>
		{
			if(i + 1 == len_data || data[i + 1] == SLIP_END)
 8000798:	8abb      	ldrh	r3, [r7, #20]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	887b      	ldrh	r3, [r7, #2]
 800079e:	429a      	cmp	r2, r3
 80007a0:	d006      	beq.n	80007b0 <das_read+0x3c>
 80007a2:	8abb      	ldrh	r3, [r7, #20]
 80007a4:	3301      	adds	r3, #1
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2bc0      	cmp	r3, #192	; 0xc0
 80007ae:	d15f      	bne.n	8000870 <das_read+0xfc>
			{
				das_len = byte_deserialize(data, das_data, len + 1, i - len);
 80007b0:	8a7b      	ldrh	r3, [r7, #18]
 80007b2:	3301      	adds	r3, #1
 80007b4:	b299      	uxth	r1, r3
 80007b6:	8aba      	ldrh	r2, [r7, #20]
 80007b8:	8a7b      	ldrh	r3, [r7, #18]
 80007ba:	1ad3      	subs	r3, r2, r3
 80007bc:	b29b      	uxth	r3, r3
 80007be:	460a      	mov	r2, r1
 80007c0:	4938      	ldr	r1, [pc, #224]	; (80008a4 <das_read+0x130>)
 80007c2:	6878      	ldr	r0, [r7, #4]
 80007c4:	f000 fadc 	bl	8000d80 <byte_deserialize>
 80007c8:	4603      	mov	r3, r0
 80007ca:	823b      	strh	r3, [r7, #16]

				if(das_len >= (sizeof(das_protocol_ptr) + 4))
 80007cc:	8a3b      	ldrh	r3, [r7, #16]
 80007ce:	2b0b      	cmp	r3, #11
 80007d0:	d94b      	bls.n	800086a <das_read+0xf6>
				{

					// das_len = slip_das(data, len + 1, len_data - len - 1);

					// Checksum verify
					das_crc32_ptr *res_cs = (void*)(das_data + das_len - 4);
 80007d2:	8a3b      	ldrh	r3, [r7, #16]
 80007d4:	3b04      	subs	r3, #4
 80007d6:	4a33      	ldr	r2, [pc, #204]	; (80008a4 <das_read+0x130>)
 80007d8:	4413      	add	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
					uint32_t crc = be32todword(crc32(das_data, das_len - 4, 0));
 80007dc:	8a3b      	ldrh	r3, [r7, #16]
 80007de:	3b04      	subs	r3, #4
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	482f      	ldr	r0, [pc, #188]	; (80008a4 <das_read+0x130>)
 80007e6:	f000 fe27 	bl	8001438 <crc32>
 80007ea:	4603      	mov	r3, r0
 80007ec:	0e1b      	lsrs	r3, r3, #24
 80007ee:	b2dc      	uxtb	r4, r3
 80007f0:	8a3b      	ldrh	r3, [r7, #16]
 80007f2:	3b04      	subs	r3, #4
 80007f4:	2200      	movs	r2, #0
 80007f6:	4619      	mov	r1, r3
 80007f8:	482a      	ldr	r0, [pc, #168]	; (80008a4 <das_read+0x130>)
 80007fa:	f000 fe1d 	bl	8001438 <crc32>
 80007fe:	4603      	mov	r3, r0
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8000806:	431c      	orrs	r4, r3
 8000808:	8a3b      	ldrh	r3, [r7, #16]
 800080a:	3b04      	subs	r3, #4
 800080c:	2200      	movs	r2, #0
 800080e:	4619      	mov	r1, r3
 8000810:	4824      	ldr	r0, [pc, #144]	; (80008a4 <das_read+0x130>)
 8000812:	f000 fe11 	bl	8001438 <crc32>
 8000816:	4603      	mov	r3, r0
 8000818:	021b      	lsls	r3, r3, #8
 800081a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800081e:	431c      	orrs	r4, r3
 8000820:	8a3b      	ldrh	r3, [r7, #16]
 8000822:	3b04      	subs	r3, #4
 8000824:	2200      	movs	r2, #0
 8000826:	4619      	mov	r1, r3
 8000828:	481e      	ldr	r0, [pc, #120]	; (80008a4 <das_read+0x130>)
 800082a:	f000 fe05 	bl	8001438 <crc32>
 800082e:	4603      	mov	r3, r0
 8000830:	061b      	lsls	r3, r3, #24
 8000832:	4323      	orrs	r3, r4
 8000834:	60bb      	str	r3, [r7, #8]
					if(res_cs->crc32 == crc)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	429a      	cmp	r2, r3
 800083e:	d114      	bne.n	800086a <das_read+0xf6>
					{
						// Print stuff
						// das_print(das_data, 0, das_len, "SER: ");

						// Process DAS message
						das_len = das_makePacket(das_data, 0);
 8000840:	2100      	movs	r1, #0
 8000842:	4818      	ldr	r0, [pc, #96]	; (80008a4 <das_read+0x130>)
 8000844:	f000 f832 	bl	80008ac <das_makePacket>
 8000848:	4603      	mov	r3, r0
 800084a:	823b      	strh	r3, [r7, #16]

						// Print stuff
						// das_print(das_data, 0, das_len, "PCC: ");

						// DAS Message deserialize
						das_len = byte_serialize(das_data, 0, das_data_req, txPointer, das_len);
 800084c:	8afa      	ldrh	r2, [r7, #22]
 800084e:	8a3b      	ldrh	r3, [r7, #16]
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	4613      	mov	r3, r2
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <das_read+0x134>)
 8000856:	2100      	movs	r1, #0
 8000858:	4812      	ldr	r0, [pc, #72]	; (80008a4 <das_read+0x130>)
 800085a:	f000 fa2b 	bl	8000cb4 <byte_serialize>
 800085e:	4603      	mov	r3, r0
 8000860:	823b      	strh	r3, [r7, #16]

						// Print stuff
						// das_print(das_data_req, txPointer, das_len, "DES: ");

						// Increase TX pointer
						txPointer += das_len;
 8000862:	8afa      	ldrh	r2, [r7, #22]
 8000864:	8a3b      	ldrh	r3, [r7, #16]
 8000866:	4413      	add	r3, r2
 8000868:	82fb      	strh	r3, [r7, #22]
					}
				}

				len = i + 1;
 800086a:	8abb      	ldrh	r3, [r7, #20]
 800086c:	3301      	adds	r3, #1
 800086e:	827b      	strh	r3, [r7, #18]
		for(i = 0; i < len_data; i++)
 8000870:	8abb      	ldrh	r3, [r7, #20]
 8000872:	3301      	adds	r3, #1
 8000874:	82bb      	strh	r3, [r7, #20]
 8000876:	8aba      	ldrh	r2, [r7, #20]
 8000878:	887b      	ldrh	r3, [r7, #2]
 800087a:	429a      	cmp	r2, r3
 800087c:	d38c      	bcc.n	8000798 <das_read+0x24>
			}
		}
	}

	if(txPointer > 0)
 800087e:	8afb      	ldrh	r3, [r7, #22]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d00a      	beq.n	800089a <das_read+0x126>
	{
		// Send data
		realloc(data, txPointer);
 8000884:	8afb      	ldrh	r3, [r7, #22]
 8000886:	4619      	mov	r1, r3
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f018 fb17 	bl	8018ebc <realloc>
		memcpy(data, das_data_req, txPointer);
 800088e:	8afb      	ldrh	r3, [r7, #22]
 8000890:	461a      	mov	r2, r3
 8000892:	4905      	ldr	r1, [pc, #20]	; (80008a8 <das_read+0x134>)
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f018 f9f9 	bl	8018c8c <memcpy>
		// das_print(data, 0, txPointer, "->");
	}

	return txPointer;
 800089a:	8afb      	ldrh	r3, [r7, #22]
}
 800089c:	4618      	mov	r0, r3
 800089e:	371c      	adds	r7, #28
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	20005024 	.word	0x20005024
 80008a8:	20005044 	.word	0x20005044

080008ac <das_makePacket>:

uint16_t das_makePacket(uint8_t* data, uint16_t start)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b088      	sub	sp, #32
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	807b      	strh	r3, [r7, #2]
	// DAS protocol; LITTLE ENDIAN
	das_protocol_ptr *protocol = (void*)(das_data + 1);
 80008b8:	4b9e      	ldr	r3, [pc, #632]	; (8000b34 <das_makePacket+0x288>)
 80008ba:	61bb      	str	r3, [r7, #24]

	// Global variables
	uint8_t i;
	uint32Data u32_data;
	floatData f_data;
	uint16_t len = be16toword(protocol->data_l);
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	88db      	ldrh	r3, [r3, #6]
 80008c0:	0a1b      	lsrs	r3, r3, #8
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	88db      	ldrh	r3, [r3, #6]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	b21b      	sxth	r3, r3
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b21b      	sxth	r3, r3
 80008d2:	83bb      	strh	r3, [r7, #28]

	switch(protocol->app_fn_num)
 80008d4:	69bb      	ldr	r3, [r7, #24]
 80008d6:	889b      	ldrh	r3, [r3, #4]
 80008d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008dc:	f000 8180 	beq.w	8000be0 <das_makePacket+0x334>
 80008e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008e4:	f300 81ac 	bgt.w	8000c40 <das_makePacket+0x394>
 80008e8:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80008ec:	f000 80f6 	beq.w	8000adc <das_makePacket+0x230>
 80008f0:	f5b3 5f60 	cmp.w	r3, #14336	; 0x3800
 80008f4:	f300 81a4 	bgt.w	8000c40 <das_makePacket+0x394>
 80008f8:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 80008fc:	f000 80bc 	beq.w	8000a78 <das_makePacket+0x1cc>
 8000900:	f5b3 5f58 	cmp.w	r3, #13824	; 0x3600
 8000904:	f300 819c 	bgt.w	8000c40 <das_makePacket+0x394>
 8000908:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 800090c:	d00f      	beq.n	800092e <das_makePacket+0x82>
 800090e:	f5b3 5fd0 	cmp.w	r3, #6656	; 0x1a00
 8000912:	f300 8195 	bgt.w	8000c40 <das_makePacket+0x394>
 8000916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800091a:	d003      	beq.n	8000924 <das_makePacket+0x78>
 800091c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000920:	d037      	beq.n	8000992 <das_makePacket+0xe6>
 8000922:	e18d      	b.n	8000c40 <das_makePacket+0x394>
	{
		case DAS_APP_FUNC_ECHO:
			protocol->app_fn_num = DAS_APP_FUNC_ECHO_RESP;
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 800092a:	809a      	strh	r2, [r3, #4]
			break;
 800092c:	e188      	b.n	8000c40 <das_makePacket+0x394>
		case DAS_APP_FUNC_ANALOG_CFG:

			// Validate data length
			if(len != 2)
 800092e:	8bbb      	ldrh	r3, [r7, #28]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d005      	beq.n	8000940 <das_makePacket+0x94>
			{
				protocol->app_fn_num = DAS_APP_FUNC_ERROR_INV_NUM_OF_ARGS;
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2200      	movs	r2, #0
 8000938:	809a      	strh	r2, [r3, #4]
				len = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	83bb      	strh	r3, [r7, #28]
						len = 0;
						break;
				}
			}

			break;
 800093e:	e17a      	b.n	8000c36 <das_makePacket+0x38a>
				switch(DAS_SetChannelMode(protocol->data[0], protocol->data[1]))
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	7a1a      	ldrb	r2, [r3, #8]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	7a5b      	ldrb	r3, [r3, #9]
 8000948:	4619      	mov	r1, r3
 800094a:	4610      	mov	r0, r2
 800094c:	f7ff fe9a 	bl	8000684 <DAS_SetChannelMode>
 8000950:	4603      	mov	r3, r0
 8000952:	2b03      	cmp	r3, #3
 8000954:	d007      	beq.n	8000966 <das_makePacket+0xba>
 8000956:	2b03      	cmp	r3, #3
 8000958:	f300 816d 	bgt.w	8000c36 <das_makePacket+0x38a>
 800095c:	2b00      	cmp	r3, #0
 800095e:	d010      	beq.n	8000982 <das_makePacket+0xd6>
 8000960:	2b02      	cmp	r3, #2
 8000962:	d007      	beq.n	8000974 <das_makePacket+0xc8>
			break;
 8000964:	e167      	b.n	8000c36 <das_makePacket+0x38a>
						protocol->app_fn_num = DAS_APP_FUNC_ERROR_ARG;
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	f44f 7240 	mov.w	r2, #768	; 0x300
 800096c:	809a      	strh	r2, [r3, #4]
						len = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	83bb      	strh	r3, [r7, #28]
						break;
 8000972:	e00d      	b.n	8000990 <das_makePacket+0xe4>
						protocol->app_fn_num = DAS_APP_FUNC_ERROR_INV_LN_ID;
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800097a:	809a      	strh	r2, [r3, #4]
						len = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	83bb      	strh	r3, [r7, #28]
						break;
 8000980:	e006      	b.n	8000990 <das_makePacket+0xe4>
						protocol->app_fn_num = DAS_APP_FUNC_ANALOG_CFG_RESP;
 8000982:	69bb      	ldr	r3, [r7, #24]
 8000984:	f44f 52d8 	mov.w	r2, #6912	; 0x1b00
 8000988:	809a      	strh	r2, [r3, #4]
						len = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	83bb      	strh	r3, [r7, #28]
						break;
 800098e:	bf00      	nop
			break;
 8000990:	e151      	b.n	8000c36 <das_makePacket+0x38a>
		case DAS_APP_FUNC_READ_ANALOG:
			// Validate data length
			if(len > 1)
 8000992:	8bbb      	ldrh	r3, [r7, #28]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d905      	bls.n	80009a4 <das_makePacket+0xf8>
			{
				protocol->app_fn_num = DAS_APP_FUNC_ERROR_INV_NUM_OF_ARGS;
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	2200      	movs	r2, #0
 800099c:	809a      	strh	r2, [r3, #4]
				len = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	83bb      	strh	r3, [r7, #28]

				len++;
				protocol->app_fn_num = DAS_APP_FUNC_READ_ANALOG_RESP;
			}

			break;
 80009a2:	e14d      	b.n	8000c40 <das_makePacket+0x394>
			else if(len == 1)
 80009a4:	8bbb      	ldrh	r3, [r7, #28]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d132      	bne.n	8000a10 <das_makePacket+0x164>
				if(!DAS_AnalogChannelExists(protocol->data[0]))
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	7a1b      	ldrb	r3, [r3, #8]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff fe34 	bl	800061c <DAS_AnalogChannelExists>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d106      	bne.n	80009c8 <das_makePacket+0x11c>
					protocol->app_fn_num = DAS_APP_FUNC_ERROR_INV_LN_ID;
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c0:	809a      	strh	r2, [r3, #4]
					len = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	83bb      	strh	r3, [r7, #28]
			break;
 80009c6:	e13b      	b.n	8000c40 <das_makePacket+0x394>
				else if(channels[protocol->data[0]].mode == DAS_ANALOG_MODE_OFF)
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	7a1b      	ldrb	r3, [r3, #8]
 80009cc:	4a5a      	ldr	r2, [pc, #360]	; (8000b38 <das_makePacket+0x28c>)
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	4413      	add	r3, r2
 80009d2:	785b      	ldrb	r3, [r3, #1]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d106      	bne.n	80009e6 <das_makePacket+0x13a>
					protocol->app_fn_num = DAS_APP_FUNC_ERROR_ARG;
 80009d8:	69bb      	ldr	r3, [r7, #24]
 80009da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009de:	809a      	strh	r2, [r3, #4]
					len = 0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	83bb      	strh	r3, [r7, #28]
			break;
 80009e4:	e12c      	b.n	8000c40 <das_makePacket+0x394>
					protocol->app_fn_num = DAS_APP_FUNC_READ_ANALOG_RESP;
 80009e6:	69bb      	ldr	r3, [r7, #24]
 80009e8:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80009ec:	809a      	strh	r2, [r3, #4]
					rmemcpy(protocol->data + 1, channels[protocol->data[0]].value.data, 4);
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	3308      	adds	r3, #8
 80009f2:	1c58      	adds	r0, r3, #1
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	7a1b      	ldrb	r3, [r3, #8]
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	4a4f      	ldr	r2, [pc, #316]	; (8000b38 <das_makePacket+0x28c>)
 80009fc:	4413      	add	r3, r2
 80009fe:	3304      	adds	r3, #4
 8000a00:	2204      	movs	r2, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	f000 fd42 	bl	800148c <rmemcpy>
					len += 4;
 8000a08:	8bbb      	ldrh	r3, [r7, #28]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	83bb      	strh	r3, [r7, #28]
			break;
 8000a0e:	e117      	b.n	8000c40 <das_makePacket+0x394>
				*(protocol->data) = 0;
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	2200      	movs	r2, #0
 8000a14:	721a      	strb	r2, [r3, #8]
				for(i = 0; i < 4; i++)
 8000a16:	2300      	movs	r3, #0
 8000a18:	77fb      	strb	r3, [r7, #31]
 8000a1a:	e022      	b.n	8000a62 <das_makePacket+0x1b6>
					if(channels[i].mode != DAS_ANALOG_MODE_OFF)
 8000a1c:	7ffb      	ldrb	r3, [r7, #31]
 8000a1e:	4a46      	ldr	r2, [pc, #280]	; (8000b38 <das_makePacket+0x28c>)
 8000a20:	00db      	lsls	r3, r3, #3
 8000a22:	4413      	add	r3, r2
 8000a24:	785b      	ldrb	r3, [r3, #1]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d018      	beq.n	8000a5c <das_makePacket+0x1b0>
						*(protocol->data) = *(protocol->data) + 1;
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	7a1b      	ldrb	r3, [r3, #8]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	b2da      	uxtb	r2, r3
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	721a      	strb	r2, [r3, #8]
						rmemcpy(protocol->data + 1 + 4 * i, channels[i].value.data, 4);
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	f103 0208 	add.w	r2, r3, #8
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	3301      	adds	r3, #1
 8000a42:	18d0      	adds	r0, r2, r3
 8000a44:	7ffb      	ldrb	r3, [r7, #31]
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	4a3b      	ldr	r2, [pc, #236]	; (8000b38 <das_makePacket+0x28c>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	2204      	movs	r2, #4
 8000a50:	4619      	mov	r1, r3
 8000a52:	f000 fd1b 	bl	800148c <rmemcpy>
						len += 4;
 8000a56:	8bbb      	ldrh	r3, [r7, #28]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	83bb      	strh	r3, [r7, #28]
				for(i = 0; i < 4; i++)
 8000a5c:	7ffb      	ldrb	r3, [r7, #31]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	77fb      	strb	r3, [r7, #31]
 8000a62:	7ffb      	ldrb	r3, [r7, #31]
 8000a64:	2b03      	cmp	r3, #3
 8000a66:	d9d9      	bls.n	8000a1c <das_makePacket+0x170>
				len++;
 8000a68:	8bbb      	ldrh	r3, [r7, #28]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	83bb      	strh	r3, [r7, #28]
				protocol->app_fn_num = DAS_APP_FUNC_READ_ANALOG_RESP;
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8000a74:	809a      	strh	r2, [r3, #4]
			break;
 8000a76:	e0e3      	b.n	8000c40 <das_makePacket+0x394>
		case DAS_APP_FUNC_PULSE_CFG:
			if(len != 2)
 8000a78:	8bbb      	ldrh	r3, [r7, #28]
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d005      	beq.n	8000a8a <das_makePacket+0x1de>
			{
				protocol->app_fn_num = DAS_APP_FUNC_ERROR_INV_NUM_OF_ARGS;
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	2200      	movs	r2, #0
 8000a82:	809a      	strh	r2, [r3, #4]
				len = 0;
 8000a84:	2300      	movs	r3, #0
 8000a86:	83bb      	strh	r3, [r7, #28]
						protocol->app_fn_num = DAS_APP_FUNC_PULSE_CFG_RESP;
						len = 0;
						break;
				}
			}
			break;
 8000a88:	e0d7      	b.n	8000c3a <das_makePacket+0x38e>
				switch(DAS_SetPulseChannelMode(protocol->data[0], protocol->data[1]))
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	7a1a      	ldrb	r2, [r3, #8]
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	7a5b      	ldrb	r3, [r3, #9]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4610      	mov	r0, r2
 8000a96:	f7ff fe41 	bl	800071c <DAS_SetPulseChannelMode>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d007      	beq.n	8000ab0 <das_makePacket+0x204>
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	f300 80ca 	bgt.w	8000c3a <das_makePacket+0x38e>
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d010      	beq.n	8000acc <das_makePacket+0x220>
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d007      	beq.n	8000abe <das_makePacket+0x212>
			break;
 8000aae:	e0c4      	b.n	8000c3a <das_makePacket+0x38e>
						protocol->app_fn_num = DAS_APP_FUNC_ERROR_ARG;
 8000ab0:	69bb      	ldr	r3, [r7, #24]
 8000ab2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ab6:	809a      	strh	r2, [r3, #4]
						len = 0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	83bb      	strh	r3, [r7, #28]
						break;
 8000abc:	e00d      	b.n	8000ada <das_makePacket+0x22e>
						protocol->app_fn_num = DAS_APP_FUNC_ERROR_INV_LN_ID;
 8000abe:	69bb      	ldr	r3, [r7, #24]
 8000ac0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac4:	809a      	strh	r2, [r3, #4]
						len = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	83bb      	strh	r3, [r7, #28]
						break;
 8000aca:	e006      	b.n	8000ada <das_makePacket+0x22e>
						protocol->app_fn_num = DAS_APP_FUNC_PULSE_CFG_RESP;
 8000acc:	69bb      	ldr	r3, [r7, #24]
 8000ace:	f44f 525c 	mov.w	r2, #14080	; 0x3700
 8000ad2:	809a      	strh	r2, [r3, #4]
						len = 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	83bb      	strh	r3, [r7, #28]
						break;
 8000ad8:	bf00      	nop
			break;
 8000ada:	e0ae      	b.n	8000c3a <das_makePacket+0x38e>
		case DAS_APP_FUNC_PULSE_READ:
			if(len != 1)
 8000adc:	8bbb      	ldrh	r3, [r7, #28]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d005      	beq.n	8000aee <das_makePacket+0x242>
			{
				protocol->app_fn_num = DAS_APP_FUNC_ERROR_INV_NUM_OF_ARGS;
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	809a      	strh	r2, [r3, #4]
				len = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	83bb      	strh	r3, [r7, #28]
						rmemcpy(protocol->data + 1, f_data.data, 4);
						len += 4;
					}
				}
			}
			break;
 8000aec:	e0a7      	b.n	8000c3e <das_makePacket+0x392>
				if(!DAS_PulseChannelExists(protocol->data[0]))
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	7a1b      	ldrb	r3, [r3, #8]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fda3 	bl	800063e <DAS_PulseChannelExists>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d106      	bne.n	8000b0c <das_makePacket+0x260>
					protocol->app_fn_num = DAS_APP_FUNC_ERROR_PLS_LN;
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000b04:	809a      	strh	r2, [r3, #4]
					len = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	83bb      	strh	r3, [r7, #28]
			break;
 8000b0a:	e098      	b.n	8000c3e <das_makePacket+0x392>
				else if(pulse_channels[protocol->data[0]].mode == DAS_PULSE_MODE_OFF)
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	7a1b      	ldrb	r3, [r3, #8]
 8000b10:	4619      	mov	r1, r3
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <das_makePacket+0x290>)
 8000b14:	460b      	mov	r3, r1
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	440b      	add	r3, r1
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	4413      	add	r3, r2
 8000b1e:	3301      	adds	r3, #1
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10c      	bne.n	8000b40 <das_makePacket+0x294>
					protocol->app_fn_num = DAS_APP_FUNC_ERROR_INV_LN_ID;
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b2c:	809a      	strh	r2, [r3, #4]
					len = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	83bb      	strh	r3, [r7, #28]
			break;
 8000b32:	e084      	b.n	8000c3e <das_makePacket+0x392>
 8000b34:	20005025 	.word	0x20005025
 8000b38:	20005184 	.word	0x20005184
 8000b3c:	200051a4 	.word	0x200051a4
					protocol->app_fn_num = DAS_APP_FUNC_PULSE_READ_RESP;
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	f44f 5264 	mov.w	r2, #14592	; 0x3900
 8000b46:	809a      	strh	r2, [r3, #4]
					if(pulse_channels[protocol->data[0]].mode == DAS_PULSE_MODE_COUNTER)
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	7a1b      	ldrb	r3, [r3, #8]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4a57      	ldr	r2, [pc, #348]	; (8000cac <das_makePacket+0x400>)
 8000b50:	460b      	mov	r3, r1
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	440b      	add	r3, r1
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	4413      	add	r3, r2
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d118      	bne.n	8000b94 <das_makePacket+0x2e8>
						u32_data.value = pulse_channels[protocol->data[0]].count;
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	7a1b      	ldrb	r3, [r3, #8]
 8000b66:	4619      	mov	r1, r3
 8000b68:	4a50      	ldr	r2, [pc, #320]	; (8000cac <das_makePacket+0x400>)
 8000b6a:	460b      	mov	r3, r1
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	440b      	add	r3, r1
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	4413      	add	r3, r2
 8000b74:	3304      	adds	r3, #4
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	613b      	str	r3, [r7, #16]
						rmemcpy(protocol->data + 1, u32_data.data, 4);
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	3301      	adds	r3, #1
 8000b80:	f107 0110 	add.w	r1, r7, #16
 8000b84:	2204      	movs	r2, #4
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 fc80 	bl	800148c <rmemcpy>
						len += 4;
 8000b8c:	8bbb      	ldrh	r3, [r7, #28]
 8000b8e:	3304      	adds	r3, #4
 8000b90:	83bb      	strh	r3, [r7, #28]
			break;
 8000b92:	e054      	b.n	8000c3e <das_makePacket+0x392>
					else if(pulse_channels[protocol->data[0]].mode == DAS_PULSE_MODE_FREQUENCY)
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	7a1b      	ldrb	r3, [r3, #8]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4a44      	ldr	r2, [pc, #272]	; (8000cac <das_makePacket+0x400>)
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	440b      	add	r3, r1
 8000ba2:	009b      	lsls	r3, r3, #2
 8000ba4:	4413      	add	r3, r2
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d147      	bne.n	8000c3e <das_makePacket+0x392>
						f_data.value = pulse_channels[protocol->data[0]].frequency;
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	7a1b      	ldrb	r3, [r3, #8]
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4a3d      	ldr	r2, [pc, #244]	; (8000cac <das_makePacket+0x400>)
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	440b      	add	r3, r1
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	4413      	add	r3, r2
 8000bc0:	3308      	adds	r3, #8
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
						rmemcpy(protocol->data + 1, f_data.data, 4);
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	3308      	adds	r3, #8
 8000bca:	3301      	adds	r3, #1
 8000bcc:	f107 010c 	add.w	r1, r7, #12
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 fc5a 	bl	800148c <rmemcpy>
						len += 4;
 8000bd8:	8bbb      	ldrh	r3, [r7, #28]
 8000bda:	3304      	adds	r3, #4
 8000bdc:	83bb      	strh	r3, [r7, #28]
			break;
 8000bde:	e02e      	b.n	8000c3e <das_makePacket+0x392>
		case DAS_APP_FUNC_PULSE_CLEAR:
			if(len != 1)
 8000be0:	8bbb      	ldrh	r3, [r7, #28]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d005      	beq.n	8000bf2 <das_makePacket+0x346>
			{
				protocol->app_fn_num = DAS_APP_FUNC_ERROR_INV_NUM_OF_ARGS;
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	2200      	movs	r2, #0
 8000bea:	809a      	strh	r2, [r3, #4]
				len = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	83bb      	strh	r3, [r7, #28]
					// TODO: call function
					pulse_channels[protocol->data[0]].count = 0;
					len = 0;
				}
			}
			break;
 8000bf0:	e026      	b.n	8000c40 <das_makePacket+0x394>
				if(!DAS_PulseChannelExists(protocol->data[0]))
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	7a1b      	ldrb	r3, [r3, #8]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fd21 	bl	800063e <DAS_PulseChannelExists>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d106      	bne.n	8000c10 <das_makePacket+0x364>
					protocol->app_fn_num = DAS_APP_FUNC_ERROR_PLS_LN;
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000c08:	809a      	strh	r2, [r3, #4]
					len = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	83bb      	strh	r3, [r7, #28]
			break;
 8000c0e:	e017      	b.n	8000c40 <das_makePacket+0x394>
					protocol->app_fn_num = DAS_APP_FUNC_PULSE_CLEAR_RESP;
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	f44f 4282 	mov.w	r2, #16640	; 0x4100
 8000c16:	809a      	strh	r2, [r3, #4]
					pulse_channels[protocol->data[0]].count = 0;
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	7a1b      	ldrb	r3, [r3, #8]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4a23      	ldr	r2, [pc, #140]	; (8000cac <das_makePacket+0x400>)
 8000c20:	460b      	mov	r3, r1
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	440b      	add	r3, r1
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	3304      	adds	r3, #4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
					len = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	83bb      	strh	r3, [r7, #28]
			break;
 8000c34:	e004      	b.n	8000c40 <das_makePacket+0x394>
			break;
 8000c36:	bf00      	nop
 8000c38:	e002      	b.n	8000c40 <das_makePacket+0x394>
			break;
 8000c3a:	bf00      	nop
 8000c3c:	e000      	b.n	8000c40 <das_makePacket+0x394>
			break;
 8000c3e:	bf00      	nop
	}

	// set header
	// set data length
	protocol->data_l = be16toword(len);
 8000c40:	8bbb      	ldrh	r3, [r7, #28]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	8bbb      	ldrh	r3, [r7, #28]
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	b29a      	uxth	r2, r3
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	80da      	strh	r2, [r3, #6]

	// calc crc32
	uint32_t crc = crc32(das_data, len + 9, 0);
 8000c58:	8bbb      	ldrh	r3, [r7, #28]
 8000c5a:	3309      	adds	r3, #9
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4813      	ldr	r0, [pc, #76]	; (8000cb0 <das_makePacket+0x404>)
 8000c62:	f000 fbe9 	bl	8001438 <crc32>
 8000c66:	6178      	str	r0, [r7, #20]
	das_data[len + 9] = crc >> 24 & 0xFF;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	0e1a      	lsrs	r2, r3, #24
 8000c6c:	8bbb      	ldrh	r3, [r7, #28]
 8000c6e:	3309      	adds	r3, #9
 8000c70:	b2d1      	uxtb	r1, r2
 8000c72:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <das_makePacket+0x404>)
 8000c74:	54d1      	strb	r1, [r2, r3]
	das_data[len + 10] = crc >> 16 & 0xFF;
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	0c1a      	lsrs	r2, r3, #16
 8000c7a:	8bbb      	ldrh	r3, [r7, #28]
 8000c7c:	330a      	adds	r3, #10
 8000c7e:	b2d1      	uxtb	r1, r2
 8000c80:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <das_makePacket+0x404>)
 8000c82:	54d1      	strb	r1, [r2, r3]
	das_data[len + 11] = crc >> 8 & 0xFF;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	0a1a      	lsrs	r2, r3, #8
 8000c88:	8bbb      	ldrh	r3, [r7, #28]
 8000c8a:	330b      	adds	r3, #11
 8000c8c:	b2d1      	uxtb	r1, r2
 8000c8e:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <das_makePacket+0x404>)
 8000c90:	54d1      	strb	r1, [r2, r3]
	das_data[len + 12] = crc & 0xFF;
 8000c92:	8bbb      	ldrh	r3, [r7, #28]
 8000c94:	330c      	adds	r3, #12
 8000c96:	697a      	ldr	r2, [r7, #20]
 8000c98:	b2d1      	uxtb	r1, r2
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <das_makePacket+0x404>)
 8000c9c:	54d1      	strb	r1, [r2, r3]

	return len + 13;
 8000c9e:	8bbb      	ldrh	r3, [r7, #28]
 8000ca0:	330d      	adds	r3, #13
 8000ca2:	b29b      	uxth	r3, r3
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3720      	adds	r7, #32
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200051a4 	.word	0x200051a4
 8000cb0:	20005024 	.word	0x20005024

08000cb4 <byte_serialize>:

uint16_t byte_serialize(uint8_t* data_buf, uint16_t data_start, uint8_t* dest_buf, uint16_t dest_start, uint16_t len_data)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b087      	sub	sp, #28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	607a      	str	r2, [r7, #4]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	817b      	strh	r3, [r7, #10]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	813b      	strh	r3, [r7, #8]
	// das_data_req

	uint16_t i = 0;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	82fb      	strh	r3, [r7, #22]
	uint16_t ptr = dest_start;
 8000ccc:	893b      	ldrh	r3, [r7, #8]
 8000cce:	82bb      	strh	r3, [r7, #20]

	das_data_req[ptr++] = SLIP_END;
 8000cd0:	8abb      	ldrh	r3, [r7, #20]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	82ba      	strh	r2, [r7, #20]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	4b28      	ldr	r3, [pc, #160]	; (8000d7c <byte_serialize+0xc8>)
 8000cda:	21c0      	movs	r1, #192	; 0xc0
 8000cdc:	5499      	strb	r1, [r3, r2]

	for(i = data_start; i < data_start + len_data; i++)
 8000cde:	897b      	ldrh	r3, [r7, #10]
 8000ce0:	82fb      	strh	r3, [r7, #22]
 8000ce2:	e03b      	b.n	8000d5c <byte_serialize+0xa8>
	{
		if(data_buf[i] == SLIP_END)
 8000ce4:	8afb      	ldrh	r3, [r7, #22]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	4413      	add	r3, r2
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2bc0      	cmp	r3, #192	; 0xc0
 8000cee:	d110      	bne.n	8000d12 <byte_serialize+0x5e>
		{
			dest_buf[ptr++] = SLIP_ESC;
 8000cf0:	8abb      	ldrh	r3, [r7, #20]
 8000cf2:	1c5a      	adds	r2, r3, #1
 8000cf4:	82ba      	strh	r2, [r7, #20]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	22db      	movs	r2, #219	; 0xdb
 8000cfe:	701a      	strb	r2, [r3, #0]
			dest_buf[ptr++] = SLIP_ESC_END;
 8000d00:	8abb      	ldrh	r3, [r7, #20]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	82ba      	strh	r2, [r7, #20]
 8000d06:	461a      	mov	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	22dc      	movs	r2, #220	; 0xdc
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e021      	b.n	8000d56 <byte_serialize+0xa2>
		}
		else if(data_buf[i] == SLIP_ESC)
 8000d12:	8afb      	ldrh	r3, [r7, #22]
 8000d14:	68fa      	ldr	r2, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2bdb      	cmp	r3, #219	; 0xdb
 8000d1c:	d110      	bne.n	8000d40 <byte_serialize+0x8c>
		{
			dest_buf[ptr++] = SLIP_ESC;
 8000d1e:	8abb      	ldrh	r3, [r7, #20]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	82ba      	strh	r2, [r7, #20]
 8000d24:	461a      	mov	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4413      	add	r3, r2
 8000d2a:	22db      	movs	r2, #219	; 0xdb
 8000d2c:	701a      	strb	r2, [r3, #0]
			dest_buf[ptr++] = SLIP_ESC_ESC;
 8000d2e:	8abb      	ldrh	r3, [r7, #20]
 8000d30:	1c5a      	adds	r2, r3, #1
 8000d32:	82ba      	strh	r2, [r7, #20]
 8000d34:	461a      	mov	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	22dd      	movs	r2, #221	; 0xdd
 8000d3c:	701a      	strb	r2, [r3, #0]
 8000d3e:	e00a      	b.n	8000d56 <byte_serialize+0xa2>
		}
		else
		{
			dest_buf[ptr++] = data_buf[i];
 8000d40:	8afb      	ldrh	r3, [r7, #22]
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	441a      	add	r2, r3
 8000d46:	8abb      	ldrh	r3, [r7, #20]
 8000d48:	1c59      	adds	r1, r3, #1
 8000d4a:	82b9      	strh	r1, [r7, #20]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	440b      	add	r3, r1
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	701a      	strb	r2, [r3, #0]
	for(i = data_start; i < data_start + len_data; i++)
 8000d56:	8afb      	ldrh	r3, [r7, #22]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	82fb      	strh	r3, [r7, #22]
 8000d5c:	8afa      	ldrh	r2, [r7, #22]
 8000d5e:	8979      	ldrh	r1, [r7, #10]
 8000d60:	8c3b      	ldrh	r3, [r7, #32]
 8000d62:	440b      	add	r3, r1
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbbd      	blt.n	8000ce4 <byte_serialize+0x30>
		}
	}

	return ptr - dest_start;
 8000d68:	8aba      	ldrh	r2, [r7, #20]
 8000d6a:	893b      	ldrh	r3, [r7, #8]
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	b29b      	uxth	r3, r3
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	20005044 	.word	0x20005044

08000d80 <byte_deserialize>:

uint16_t byte_deserialize(uint8_t* data_buf, uint8_t* dest_buf, uint16_t start, uint16_t data_len)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b087      	sub	sp, #28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	460b      	mov	r3, r1
 8000d90:	80fb      	strh	r3, [r7, #6]
 8000d92:	4613      	mov	r3, r2
 8000d94:	80bb      	strh	r3, [r7, #4]
	uint8_t i = 0;
 8000d96:	2300      	movs	r3, #0
 8000d98:	75fb      	strb	r3, [r7, #23]
	uint16_t len = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	82bb      	strh	r3, [r7, #20]

	for(i = start; i < start + data_len; i++)
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	75fb      	strb	r3, [r7, #23]
 8000da2:	e03f      	b.n	8000e24 <byte_deserialize+0xa4>
	{
		if(data_buf[i] == SLIP_ESC && data_buf[i + 1] == SLIP_ESC_END)
 8000da4:	7dfb      	ldrb	r3, [r7, #23]
 8000da6:	68fa      	ldr	r2, [r7, #12]
 8000da8:	4413      	add	r3, r2
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2bdb      	cmp	r3, #219	; 0xdb
 8000dae:	d112      	bne.n	8000dd6 <byte_deserialize+0x56>
 8000db0:	7dfb      	ldrb	r3, [r7, #23]
 8000db2:	3301      	adds	r3, #1
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2bdc      	cmp	r3, #220	; 0xdc
 8000dbc:	d10b      	bne.n	8000dd6 <byte_deserialize+0x56>
		{
			dest_buf[len++] = SLIP_END;
 8000dbe:	8abb      	ldrh	r3, [r7, #20]
 8000dc0:	1c5a      	adds	r2, r3, #1
 8000dc2:	82ba      	strh	r2, [r7, #20]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	4413      	add	r3, r2
 8000dca:	22c0      	movs	r2, #192	; 0xc0
 8000dcc:	701a      	strb	r2, [r3, #0]
			i += 1;
 8000dce:	7dfb      	ldrb	r3, [r7, #23]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	75fb      	strb	r3, [r7, #23]
 8000dd4:	e023      	b.n	8000e1e <byte_deserialize+0x9e>
		}
		else if(data_buf[i] == SLIP_ESC && data_buf[i + 1] == SLIP_ESC_ESC)
 8000dd6:	7dfb      	ldrb	r3, [r7, #23]
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2bdb      	cmp	r3, #219	; 0xdb
 8000de0:	d112      	bne.n	8000e08 <byte_deserialize+0x88>
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	3301      	adds	r3, #1
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	4413      	add	r3, r2
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2bdd      	cmp	r3, #221	; 0xdd
 8000dee:	d10b      	bne.n	8000e08 <byte_deserialize+0x88>
		{
			dest_buf[len++] = SLIP_ESC;
 8000df0:	8abb      	ldrh	r3, [r7, #20]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	82ba      	strh	r2, [r7, #20]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	22db      	movs	r2, #219	; 0xdb
 8000dfe:	701a      	strb	r2, [r3, #0]
			i += 1;
 8000e00:	7dfb      	ldrb	r3, [r7, #23]
 8000e02:	3301      	adds	r3, #1
 8000e04:	75fb      	strb	r3, [r7, #23]
 8000e06:	e00a      	b.n	8000e1e <byte_deserialize+0x9e>
		}
		else
		{
			dest_buf[len++] = data_buf[i];
 8000e08:	7dfb      	ldrb	r3, [r7, #23]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	441a      	add	r2, r3
 8000e0e:	8abb      	ldrh	r3, [r7, #20]
 8000e10:	1c59      	adds	r1, r3, #1
 8000e12:	82b9      	strh	r1, [r7, #20]
 8000e14:	4619      	mov	r1, r3
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	440b      	add	r3, r1
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	701a      	strb	r2, [r3, #0]
	for(i = start; i < start + data_len; i++)
 8000e1e:	7dfb      	ldrb	r3, [r7, #23]
 8000e20:	3301      	adds	r3, #1
 8000e22:	75fb      	strb	r3, [r7, #23]
 8000e24:	7dfa      	ldrb	r2, [r7, #23]
 8000e26:	88f9      	ldrh	r1, [r7, #6]
 8000e28:	88bb      	ldrh	r3, [r7, #4]
 8000e2a:	440b      	add	r3, r1
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	dbb9      	blt.n	8000da4 <byte_deserialize+0x24>
		}
	}

	return len;
 8000e30:	8abb      	ldrh	r3, [r7, #20]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	371c      	adds	r7, #28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e44:	f000 fd46 	bl	80018d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e48:	f000 f81a 	bl	8000e80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e4c:	f000 f91e 	bl	800108c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e50:	f000 f8fc 	bl	800104c <MX_DMA_Init>
  MX_ADC1_Init();
 8000e54:	f000 f87e 	bl	8000f54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e58:	f004 fb9e 	bl	8005598 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <main+0x34>)
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <main+0x38>)
 8000e62:	f004 fbf8 	bl	8005656 <osThreadNew>
 8000e66:	4603      	mov	r3, r0
 8000e68:	4a04      	ldr	r2, [pc, #16]	; (8000e7c <main+0x3c>)
 8000e6a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e6c:	f004 fbb8 	bl	80055e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <main+0x30>
 8000e72:	bf00      	nop
 8000e74:	0801d7d0 	.word	0x0801d7d0
 8000e78:	0800134d 	.word	0x0800134d
 8000e7c:	200051bc 	.word	0x200051bc

08000e80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b094      	sub	sp, #80	; 0x50
 8000e84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e86:	f107 0320 	add.w	r3, r7, #32
 8000e8a:	2230      	movs	r2, #48	; 0x30
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f017 ff0a 	bl	8018ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <SystemClock_Config+0xcc>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <SystemClock_Config+0xcc>)
 8000eae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb2:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <SystemClock_Config+0xcc>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <SystemClock_Config+0xd0>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <SystemClock_Config+0xd0>)
 8000eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <SystemClock_Config+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000edc:	2301      	movs	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ee0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ef4:	23a8      	movs	r3, #168	; 0xa8
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 f985 	bl	8004214 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f10:	f000 fa8c 	bl	800142c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f14:	230f      	movs	r3, #15
 8000f16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f2c:	f107 030c 	add.w	r3, r7, #12
 8000f30:	2105      	movs	r1, #5
 8000f32:	4618      	mov	r0, r3
 8000f34:	f003 fbe6 	bl	8004704 <HAL_RCC_ClockConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f3e:	f000 fa75 	bl	800142c <Error_Handler>
  }
}
 8000f42:	bf00      	nop
 8000f44:	3750      	adds	r7, #80	; 0x50
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40007000 	.word	0x40007000

08000f54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <MX_ADC1_Init+0xec>)
 8000f68:	4a36      	ldr	r2, [pc, #216]	; (8001044 <MX_ADC1_Init+0xf0>)
 8000f6a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f6c:	4b34      	ldr	r3, [pc, #208]	; (8001040 <MX_ADC1_Init+0xec>)
 8000f6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f72:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f74:	4b32      	ldr	r3, [pc, #200]	; (8001040 <MX_ADC1_Init+0xec>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f7a:	4b31      	ldr	r3, [pc, #196]	; (8001040 <MX_ADC1_Init+0xec>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f80:	4b2f      	ldr	r3, [pc, #188]	; (8001040 <MX_ADC1_Init+0xec>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f86:	4b2e      	ldr	r3, [pc, #184]	; (8001040 <MX_ADC1_Init+0xec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <MX_ADC1_Init+0xec>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <MX_ADC1_Init+0xec>)
 8000f96:	4a2c      	ldr	r2, [pc, #176]	; (8001048 <MX_ADC1_Init+0xf4>)
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f9a:	4b29      	ldr	r3, [pc, #164]	; (8001040 <MX_ADC1_Init+0xec>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <MX_ADC1_Init+0xec>)
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fa6:	4b26      	ldr	r3, [pc, #152]	; (8001040 <MX_ADC1_Init+0xec>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fae:	4b24      	ldr	r3, [pc, #144]	; (8001040 <MX_ADC1_Init+0xec>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fb4:	4822      	ldr	r0, [pc, #136]	; (8001040 <MX_ADC1_Init+0xec>)
 8000fb6:	f000 fd23 	bl	8001a00 <HAL_ADC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fc0:	f000 fa34 	bl	800142c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	481a      	ldr	r0, [pc, #104]	; (8001040 <MX_ADC1_Init+0xec>)
 8000fd6:	f000 fe85 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fe0:	f000 fa24 	bl	800142c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fe4:	230c      	movs	r3, #12
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	463b      	mov	r3, r7
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4813      	ldr	r0, [pc, #76]	; (8001040 <MX_ADC1_Init+0xec>)
 8000ff2:	f000 fe77 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ffc:	f000 fa16 	bl	800142c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001000:	230d      	movs	r3, #13
 8001002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001004:	2303      	movs	r3, #3
 8001006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_ADC1_Init+0xec>)
 800100e:	f000 fe69 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001018:	f000 fa08 	bl	800142c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800101c:	2300      	movs	r3, #0
 800101e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001020:	2304      	movs	r3, #4
 8001022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001024:	463b      	mov	r3, r7
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_ADC1_Init+0xec>)
 800102a:	f000 fe5b 	bl	8001ce4 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001034:	f000 f9fa 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	200051c4 	.word	0x200051c4
 8001044:	40012000 	.word	0x40012000
 8001048:	0f000001 	.word	0x0f000001

0800104c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_DMA_Init+0x3c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a0b      	ldr	r2, [pc, #44]	; (8001088 <MX_DMA_Init+0x3c>)
 800105c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <MX_DMA_Init+0x3c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2105      	movs	r1, #5
 8001072:	2038      	movs	r0, #56	; 0x38
 8001074:	f001 f9b1 	bl	80023da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001078:	2038      	movs	r0, #56	; 0x38
 800107a:	f001 f9ca 	bl	8002412 <HAL_NVIC_EnableIRQ>

}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08a      	sub	sp, #40	; 0x28
 8001090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <MX_GPIO_Init+0xe0>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a30      	ldr	r2, [pc, #192]	; (800116c <MX_GPIO_Init+0xe0>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <MX_GPIO_Init+0xe0>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_GPIO_Init+0xe0>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a29      	ldr	r2, [pc, #164]	; (800116c <MX_GPIO_Init+0xe0>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <MX_GPIO_Init+0xe0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <MX_GPIO_Init+0xe0>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a22      	ldr	r2, [pc, #136]	; (800116c <MX_GPIO_Init+0xe0>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <MX_GPIO_Init+0xe0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <MX_GPIO_Init+0xe0>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a1b      	ldr	r2, [pc, #108]	; (800116c <MX_GPIO_Init+0xe0>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <MX_GPIO_Init+0xe0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedRed_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001118:	4815      	ldr	r0, [pc, #84]	; (8001170 <MX_GPIO_Init+0xe4>)
 800111a:	f003 f847 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LedGreen_Pin|LedBlue_Pin, GPIO_PIN_RESET);
 800111e:	2200      	movs	r2, #0
 8001120:	2103      	movs	r1, #3
 8001122:	4814      	ldr	r0, [pc, #80]	; (8001174 <MX_GPIO_Init+0xe8>)
 8001124:	f003 f842 	bl	80041ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LedRed_Pin PA10 */
  GPIO_InitStruct.Pin = LedRed_Pin|GPIO_PIN_10;
 8001128:	f44f 6388 	mov.w	r3, #1088	; 0x440
 800112c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112e:	2301      	movs	r3, #1
 8001130:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001136:	2300      	movs	r3, #0
 8001138:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	480b      	ldr	r0, [pc, #44]	; (8001170 <MX_GPIO_Init+0xe4>)
 8001142:	f002 fe97 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LedGreen_Pin LedBlue_Pin */
  GPIO_InitStruct.Pin = LedGreen_Pin|LedBlue_Pin;
 8001146:	2303      	movs	r3, #3
 8001148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <MX_GPIO_Init+0xe8>)
 800115e:	f002 fe89 	bl	8003e74 <HAL_GPIO_Init>

}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400

08001178 <client_socket_thread>:
}

unsigned char *out_buffer;

static void client_socket_thread(void *arg)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b091      	sub	sp, #68	; 0x44
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
	int buflen = 150;
 8001180:	2396      	movs	r3, #150	; 0x96
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t buffer [buflen];
 8001184:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8001186:	1e63      	subs	r3, r4, #1
 8001188:	633b      	str	r3, [r7, #48]	; 0x30
 800118a:	4623      	mov	r3, r4
 800118c:	4618      	mov	r0, r3
 800118e:	f04f 0100 	mov.w	r1, #0
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	00cb      	lsls	r3, r1, #3
 800119c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011a0:	00c2      	lsls	r2, r0, #3
 80011a2:	4623      	mov	r3, r4
 80011a4:	4618      	mov	r0, r3
 80011a6:	f04f 0100 	mov.w	r1, #0
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	f04f 0300 	mov.w	r3, #0
 80011b2:	00cb      	lsls	r3, r1, #3
 80011b4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011b8:	00c2      	lsls	r2, r0, #3
 80011ba:	4623      	mov	r3, r4
 80011bc:	3307      	adds	r3, #7
 80011be:	08db      	lsrs	r3, r3, #3
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	ebad 0d03 	sub.w	sp, sp, r3
 80011c6:	ab02      	add	r3, sp, #8
 80011c8:	3300      	adds	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ret, accept_sock;
	struct sockaddr_in remotehost;
	socklen_t sockaddrsize;
	struct_client_socket  *arg_client_socket;
	arg_client_socket = (struct_client_socket *) arg;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t das_len;

	remotehost = arg_client_socket->remotehost;
 80011d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d2:	f107 040c 	add.w	r4, r7, #12
 80011d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sockaddrsize = arg_client_socket->sockaddrsize;
 80011dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	60bb      	str	r3, [r7, #8]
	accept_sock = arg_client_socket->accept_sock;
 80011e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	627b      	str	r3, [r7, #36]	; 0x24

	for(;;)
	{
		ret = recvfrom(accept_sock, buffer, buflen, 0, (struct sockaddr *)&remotehost, &sockaddrsize);
 80011e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	9301      	str	r3, [sp, #4]
 80011f2:	f107 030c 	add.w	r3, r7, #12
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	2300      	movs	r3, #0
 80011fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011fc:	f00b f9c6 	bl	800c58c <lwip_recvfrom>
 8001200:	6238      	str	r0, [r7, #32]
		if(ret > 0)
 8001202:	6a3b      	ldr	r3, [r7, #32]
 8001204:	2b00      	cmp	r3, #0
 8001206:	dd23      	ble.n	8001250 <client_socket_thread+0xd8>
//			das_len = sprintf(buffer, "Hello, world!%d", xPortGetMinimumEverFreeHeapSize());
//			sendto(accept_sock, buffer, das_len, 0, (struct sockaddr *)&remotehost, sockaddrsize);

			// sendto(accept_sock, buffer, ret, 0, (struct sockaddr *)&remotehost, sockaddrsize);
//
			das_len = das_read(buffer, ret);
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	6a3a      	ldr	r2, [r7, #32]
 800120c:	b292      	uxth	r2, r2
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff faaf 	bl	8000774 <das_read>
 8001216:	4603      	mov	r3, r0
 8001218:	83fb      	strh	r3, [r7, #30]
//
//			HAL_GPIO_WritePin(GPIOB, LedBlue_Pin, GPIO_PIN_SET);
//
			if(das_len > 0)
 800121a:	8bfb      	ldrh	r3, [r7, #30]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00b      	beq.n	8001238 <client_socket_thread+0xc0>
			{
			  //HAL_GPIO_WritePin(GPIOB, LedBlue_Pin, GPIO_PIN_SET);
			  sendto(accept_sock, buffer, das_len, 0, (struct sockaddr *)&remotehost, sockaddrsize);
 8001220:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001222:	8bfa      	ldrh	r2, [r7, #30]
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2300      	movs	r3, #0
 8001230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001232:	f00b fa9b 	bl	800c76c <lwip_sendto>
 8001236:	e7d7      	b.n	80011e8 <client_socket_thread+0x70>
			}
			else
			{
			  //HAL_GPIO_WritePin(GPIOA, LedRed_Pin, GPIO_PIN_SET);
			  sendto(accept_sock, buffer, ret, 0, (struct sockaddr *)&remotehost, sockaddrsize);
 8001238:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800123a:	6a3a      	ldr	r2, [r7, #32]
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	9300      	str	r3, [sp, #0]
 8001246:	2300      	movs	r3, #0
 8001248:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800124a:	f00b fa8f 	bl	800c76c <lwip_sendto>
 800124e:	e7cb      	b.n	80011e8 <client_socket_thread+0x70>
//			osThreadTerminate(NULL);
//
//			HAL_GPIO_WritePin(GPIOB, LedBlue_Pin, GPIO_PIN_RESET);
//			HAL_GPIO_WritePin(GPIOA, LedRed_Pin, GPIO_PIN_RESET);
		} else {
			close(accept_sock);
 8001250:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001252:	f00a fe6d 	bl	800bf30 <lwip_close>
			osThreadTerminate(NULL);
 8001256:	2000      	movs	r0, #0
 8001258:	f004 fa8f 	bl	800577a <osThreadTerminate>
		ret = recvfrom(accept_sock, buffer, buflen, 0, (struct sockaddr *)&remotehost, &sockaddrsize);
 800125c:	e7c4      	b.n	80011e8 <client_socket_thread+0x70>
	...

08001260 <tcp_thread>:

	}
}

static void tcp_thread(void *arg)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b091      	sub	sp, #68	; 0x44
 8001264:	af02      	add	r7, sp, #8
 8001266:	6078      	str	r0, [r7, #4]
	MX_LWIP_Init();
 8001268:	f003 fbf4 	bl	8004a54 <MX_LWIP_Init>

	struct_sock *arg_sock;
	int sock, accept_sock;
	struct sockaddr_in address, remotehost;
	socklen_t sockaddrsize;
	arg_sock = (struct_sock*) arg;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	637b      	str	r3, [r7, #52]	; 0x34

	if((sock = socket(AF_INET, SOCK_STREAM, 0)) >= 0)
 8001270:	2200      	movs	r2, #0
 8001272:	2101      	movs	r1, #1
 8001274:	2002      	movs	r0, #2
 8001276:	f00b fb2b 	bl	800c8d0 <lwip_socket>
 800127a:	6338      	str	r0, [r7, #48]	; 0x30
 800127c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800127e:	2b00      	cmp	r3, #0
 8001280:	db44      	blt.n	800130c <tcp_thread+0xac>
	{
		address.sin_family = AF_INET;
 8001282:	2302      	movs	r3, #2
 8001284:	777b      	strb	r3, [r7, #29]
		address.sin_port = htons(8082);
 8001286:	f641 7092 	movw	r0, #8082	; 0x1f92
 800128a:	f00b febd 	bl	800d008 <lwip_htons>
 800128e:	4603      	mov	r3, r0
 8001290:	83fb      	strh	r3, [r7, #30]
		address.sin_addr.s_addr = INADDR_ANY;
 8001292:	2300      	movs	r3, #0
 8001294:	623b      	str	r3, [r7, #32]

		if(bind(sock, (struct sockaddr *)&address, sizeof(address)) == 0)
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2210      	movs	r2, #16
 800129c:	4619      	mov	r1, r3
 800129e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012a0:	f00a fdd8 	bl	800be54 <lwip_bind>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d12a      	bne.n	8001300 <tcp_thread+0xa0>
		{
			// HAL_GPIO_WritePin(GPIOB, LedGreen_Pin, GPIO_PIN_SET);
			listen(sock, 5);
 80012aa:	2105      	movs	r1, #5
 80012ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012ae:	f00a fe95 	bl	800bfdc <lwip_listen>
			for(;;)
			{
				accept_sock = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&sockaddrsize);
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	4619      	mov	r1, r3
 80012bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80012be:	f00a fcab 	bl	800bc18 <lwip_accept>
 80012c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				if(accept_sock >= 0)
 80012c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	dbf3      	blt.n	80012b2 <tcp_thread+0x52>
				{
					client_socket01.accept_sock = accept_sock;
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <tcp_thread+0xb4>)
 80012cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ce:	6153      	str	r3, [r2, #20]
					client_socket01.remotehost = remotehost;
 80012d0:	4b10      	ldr	r3, [pc, #64]	; (8001314 <tcp_thread+0xb4>)
 80012d2:	461c      	mov	r4, r3
 80012d4:	f107 030c 	add.w	r3, r7, #12
 80012d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					client_socket01.sockaddrsize = sockaddrsize;
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	4a0c      	ldr	r2, [pc, #48]	; (8001314 <tcp_thread+0xb4>)
 80012e2:	6113      	str	r3, [r2, #16]
					client_socket01.y_pos = arg_sock->y_pos;
 80012e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e6:	881a      	ldrh	r2, [r3, #0]
 80012e8:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <tcp_thread+0xb4>)
 80012ea:	831a      	strh	r2, [r3, #24]
					sys_thread_new("client_socket_thread", client_socket_thread, (void*)&client_socket01, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 80012ec:	2318      	movs	r3, #24
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	4a07      	ldr	r2, [pc, #28]	; (8001314 <tcp_thread+0xb4>)
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <tcp_thread+0xb8>)
 80012f8:	4808      	ldr	r0, [pc, #32]	; (800131c <tcp_thread+0xbc>)
 80012fa:	f017 fc4f 	bl	8018b9c <sys_thread_new>
				accept_sock = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&sockaddrsize);
 80012fe:	e7d8      	b.n	80012b2 <tcp_thread+0x52>
				}
			}
		}
		else
		{
			close(sock);
 8001300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001302:	f00a fe15 	bl	800bf30 <lwip_close>
			osThreadTerminate(NULL);
 8001306:	2000      	movs	r0, #0
 8001308:	f004 fa37 	bl	800577a <osThreadTerminate>
		}
	}
}
 800130c:	bf00      	nop
 800130e:	373c      	adds	r7, #60	; 0x3c
 8001310:	46bd      	mov	sp, r7
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	20005274 	.word	0x20005274
 8001318:	08001179 	.word	0x08001179
 800131c:	08019d6c 	.word	0x08019d6c

08001320 <myrg>:

static void myrg() {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	osDelay(300);
 8001324:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001328:	f004 fa54 	bl	80057d4 <osDelay>
	HAL_GPIO_WritePin(GPIOB, LedGreen_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2101      	movs	r1, #1
 8001330:	4805      	ldr	r0, [pc, #20]	; (8001348 <myrg+0x28>)
 8001332:	f002 ff3b 	bl	80041ac <HAL_GPIO_WritePin>

	for(;;) {
		osDelay(1000);
 8001336:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800133a:	f004 fa4b 	bl	80057d4 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, LedGreen_Pin);
 800133e:	2101      	movs	r1, #1
 8001340:	4801      	ldr	r0, [pc, #4]	; (8001348 <myrg+0x28>)
 8001342:	f002 ff4c 	bl	80041de <HAL_GPIO_TogglePin>
		osDelay(1000);
 8001346:	e7f6      	b.n	8001336 <myrg+0x16>
 8001348:	40020400 	.word	0x40020400

0800134c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af02      	add	r7, sp, #8
 8001352:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  // MX_LWIP_Init();
  /* USER CODE BEGIN 5 */

  	HAL_GPIO_WritePin(GPIOB, LedGreen_Pin, GPIO_PIN_SET);
 8001354:	2201      	movs	r2, #1
 8001356:	2101      	movs	r1, #1
 8001358:	482c      	ldr	r0, [pc, #176]	; (800140c <StartDefaultTask+0xc0>)
 800135a:	f002 ff27 	bl	80041ac <HAL_GPIO_WritePin>

	// Init DAS
	DAS_Init();
 800135e:	f7ff f90b 	bl	8000578 <DAS_Init>

	sock01.port = 8082;
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <StartDefaultTask+0xc4>)
 8001364:	f641 7292 	movw	r2, #8082	; 0x1f92
 8001368:	805a      	strh	r2, [r3, #2]
	sock01.y_pos = 60;
 800136a:	4b29      	ldr	r3, [pc, #164]	; (8001410 <StartDefaultTask+0xc4>)
 800136c:	223c      	movs	r2, #60	; 0x3c
 800136e:	801a      	strh	r2, [r3, #0]
	sys_thread_new("tcp_thread", tcp_thread, (void*)&sock01, DEFAULT_THREAD_STACKSIZE * 2, osPriorityNormal);
 8001370:	2318      	movs	r3, #24
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001378:	4a25      	ldr	r2, [pc, #148]	; (8001410 <StartDefaultTask+0xc4>)
 800137a:	4926      	ldr	r1, [pc, #152]	; (8001414 <StartDefaultTask+0xc8>)
 800137c:	4826      	ldr	r0, [pc, #152]	; (8001418 <StartDefaultTask+0xcc>)
 800137e:	f017 fc0d 	bl	8018b9c <sys_thread_new>

	sys_thread_new("myrg", myrg, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityRealtime7);
 8001382:	2337      	movs	r3, #55	; 0x37
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138a:	2200      	movs	r2, #0
 800138c:	4923      	ldr	r1, [pc, #140]	; (800141c <StartDefaultTask+0xd0>)
 800138e:	4824      	ldr	r0, [pc, #144]	; (8001420 <StartDefaultTask+0xd4>)
 8001390:	f017 fc04 	bl	8018b9c <sys_thread_new>

    // prepare ADC to read data
    HAL_ADC_Start_DMA(&hadc1, value, 4);
 8001394:	2204      	movs	r2, #4
 8001396:	4923      	ldr	r1, [pc, #140]	; (8001424 <StartDefaultTask+0xd8>)
 8001398:	4823      	ldr	r0, [pc, #140]	; (8001428 <StartDefaultTask+0xdc>)
 800139a:	f000 fb75 	bl	8001a88 <HAL_ADC_Start_DMA>

  /* Infinite loop */
	for(;;)
	{
		// osThreadTerminate(NULL);
		HAL_ADC_Start_DMA(&hadc1, value, 4);
 800139e:	2204      	movs	r2, #4
 80013a0:	4920      	ldr	r1, [pc, #128]	; (8001424 <StartDefaultTask+0xd8>)
 80013a2:	4821      	ldr	r0, [pc, #132]	; (8001428 <StartDefaultTask+0xdc>)
 80013a4:	f000 fb70 	bl	8001a88 <HAL_ADC_Start_DMA>
		DAS_SetAnalogChannelValue(0, value[0]);
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <StartDefaultTask+0xd8>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013b4:	eeb0 0a67 	vmov.f32	s0, s15
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff f987 	bl	80006cc <DAS_SetAnalogChannelValue>
		DAS_SetAnalogChannelValue(1, value[1]);
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <StartDefaultTask+0xd8>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ca:	eeb0 0a67 	vmov.f32	s0, s15
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff f97c 	bl	80006cc <DAS_SetAnalogChannelValue>
		DAS_SetAnalogChannelValue(2, value[2]);
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <StartDefaultTask+0xd8>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e0:	eeb0 0a67 	vmov.f32	s0, s15
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff f971 	bl	80006cc <DAS_SetAnalogChannelValue>
		DAS_SetAnalogChannelValue(3, value[3]);
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <StartDefaultTask+0xd8>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013f6:	eeb0 0a67 	vmov.f32	s0, s15
 80013fa:	2003      	movs	r0, #3
 80013fc:	f7ff f966 	bl	80006cc <DAS_SetAnalogChannelValue>

		sys_check_timeouts();
 8001400:	f014 fa38 	bl	8015874 <sys_check_timeouts>

		osDelay(100);
 8001404:	2064      	movs	r0, #100	; 0x64
 8001406:	f004 f9e5 	bl	80057d4 <osDelay>
		HAL_ADC_Start_DMA(&hadc1, value, 4);
 800140a:	e7c8      	b.n	800139e <StartDefaultTask+0x52>
 800140c:	40020400 	.word	0x40020400
 8001410:	2000526c 	.word	0x2000526c
 8001414:	08001261 	.word	0x08001261
 8001418:	08019d84 	.word	0x08019d84
 800141c:	08001321 	.word	0x08001321
 8001420:	08019d90 	.word	0x08019d90
 8001424:	20005294 	.word	0x20005294
 8001428:	200051c4 	.word	0x200051c4

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <crc32>:
	0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,
	0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
};

uint32_t crc32 (const unsigned char *buf, int len, unsigned int init)
{
 8001438:	b480      	push	{r7}
 800143a:	b087      	sub	sp, #28
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
	unsigned int crc = 0xFFFFFFFF;
 8001444:	f04f 33ff 	mov.w	r3, #4294967295
 8001448:	617b      	str	r3, [r7, #20]
	while (len--)
 800144a:	e00f      	b.n	800146c <crc32+0x34>
	{
		crc = (crc >> 8 & 0xFFFFFF) ^ crc32_table[(crc ^ *buf) & 0xFF];
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	0a1a      	lsrs	r2, r3, #8
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	404b      	eors	r3, r1
 800145a:	b2db      	uxtb	r3, r3
 800145c:	490a      	ldr	r1, [pc, #40]	; (8001488 <crc32+0x50>)
 800145e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001462:	4053      	eors	r3, r2
 8001464:	617b      	str	r3, [r7, #20]
		buf++;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	3301      	adds	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
	while (len--)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	1e5a      	subs	r2, r3, #1
 8001470:	60ba      	str	r2, [r7, #8]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ea      	bne.n	800144c <crc32+0x14>
	}

	return ~crc;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	43db      	mvns	r3, r3
}
 800147a:	4618      	mov	r0, r3
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	0801d7f4 	.word	0x0801d7f4

0800148c <rmemcpy>:
		dst[i] = src[size - 1 - i];
	}
}

void rmemcpy(uint8_t *restrict dst, const uint8_t *restrict src, uint8_t size)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	4613      	mov	r3, r2
 8001498:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]

	for(i = 0; i < size; i++)
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
 80014a2:	e00e      	b.n	80014c2 <rmemcpy+0x36>
	{
		dst[i] = src[size - 1 - i];
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	1e5a      	subs	r2, r3, #1
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	461a      	mov	r2, r3
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	441a      	add	r2, r3
 80014b2:	7dfb      	ldrb	r3, [r7, #23]
 80014b4:	68f9      	ldr	r1, [r7, #12]
 80014b6:	440b      	add	r3, r1
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < size; i++)
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	3301      	adds	r3, #1
 80014c0:	75fb      	strb	r3, [r7, #23]
 80014c2:	7dfa      	ldrb	r2, [r7, #23]
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d3ec      	bcc.n	80014a4 <rmemcpy+0x18>
	}
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_MspInit+0x54>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_MspInit+0x54>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_MspInit+0x54>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_MspInit+0x54>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_MspInit+0x54>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_MspInit+0x54>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	210f      	movs	r1, #15
 800151a:	f06f 0001 	mvn.w	r0, #1
 800151e:	f000 ff5c 	bl	80023da <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a3c      	ldr	r2, [pc, #240]	; (8001640 <HAL_ADC_MspInit+0x110>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d171      	bne.n	8001636 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <HAL_ADC_MspInit+0x114>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a3a      	ldr	r2, [pc, #232]	; (8001644 <HAL_ADC_MspInit+0x114>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b38      	ldr	r3, [pc, #224]	; (8001644 <HAL_ADC_MspInit+0x114>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <HAL_ADC_MspInit+0x114>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a33      	ldr	r2, [pc, #204]	; (8001644 <HAL_ADC_MspInit+0x114>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b31      	ldr	r3, [pc, #196]	; (8001644 <HAL_ADC_MspInit+0x114>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b2d      	ldr	r3, [pc, #180]	; (8001644 <HAL_ADC_MspInit+0x114>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a2c      	ldr	r2, [pc, #176]	; (8001644 <HAL_ADC_MspInit+0x114>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <HAL_ADC_MspInit+0x114>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC3_Pin;
 80015a6:	230d      	movs	r3, #13
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015aa:	2303      	movs	r3, #3
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4619      	mov	r1, r3
 80015b8:	4823      	ldr	r0, [pc, #140]	; (8001648 <HAL_ADC_MspInit+0x118>)
 80015ba:	f002 fc5b 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin;
 80015be:	2301      	movs	r3, #1
 80015c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c2:	2303      	movs	r3, #3
 80015c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC4_GPIO_Port, &GPIO_InitStruct);
 80015ca:	f107 0314 	add.w	r3, r7, #20
 80015ce:	4619      	mov	r1, r3
 80015d0:	481e      	ldr	r0, [pc, #120]	; (800164c <HAL_ADC_MspInit+0x11c>)
 80015d2:	f002 fc4f 	bl	8003e74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_ADC_MspInit+0x120>)
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <HAL_ADC_MspInit+0x124>)
 80015da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <HAL_ADC_MspInit+0x120>)
 80015de:	2200      	movs	r2, #0
 80015e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_ADC_MspInit+0x120>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e8:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_ADC_MspInit+0x120>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_ADC_MspInit+0x120>)
 80015f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_ADC_MspInit+0x120>)
 80015f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_ADC_MspInit+0x120>)
 8001600:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001604:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001606:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_ADC_MspInit+0x120>)
 8001608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_ADC_MspInit+0x120>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_ADC_MspInit+0x120>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800161a:	480d      	ldr	r0, [pc, #52]	; (8001650 <HAL_ADC_MspInit+0x120>)
 800161c:	f000 ff14 	bl	8002448 <HAL_DMA_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001626:	f7ff ff01 	bl	800142c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a08      	ldr	r2, [pc, #32]	; (8001650 <HAL_ADC_MspInit+0x120>)
 800162e:	639a      	str	r2, [r3, #56]	; 0x38
 8001630:	4a07      	ldr	r2, [pc, #28]	; (8001650 <HAL_ADC_MspInit+0x120>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001636:	bf00      	nop
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40012000 	.word	0x40012000
 8001644:	40023800 	.word	0x40023800
 8001648:	40020800 	.word	0x40020800
 800164c:	40020000 	.word	0x40020000
 8001650:	2000520c 	.word	0x2000520c
 8001654:	40026410 	.word	0x40026410

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
	// osThreadTerminate(NULL);
	// store_to_flash_the datetime();
	// some_user_message_when_the_hardfault_has_occurred();
	//NVIC_SystemReset();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001688:	f000 f976 	bl	8001978 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800168c:	f006 fd84 	bl	8008198 <xTaskGetSchedulerState>
 8001690:	4603      	mov	r3, r0
 8001692:	2b01      	cmp	r3, #1
 8001694:	d001      	beq.n	800169a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001696:	f007 fc67 	bl	8008f68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA2_Stream0_IRQHandler+0x10>)
 80016a6:	f000 ffd5 	bl	8002654 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	2000520c 	.word	0x2000520c

080016b4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <ETH_IRQHandler+0x10>)
 80016ba:	f001 fe19 	bl	80032f0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20006bf0 	.word	0x20006bf0

080016c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
	return 1;
 80016cc:	2301      	movs	r3, #1
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <_kill>:

int _kill(int pid, int sig)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <_kill+0x20>)
 80016e4:	2216      	movs	r2, #22
 80016e6:	601a      	str	r2, [r3, #0]
	return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	2000bcc4 	.word	0x2000bcc4

080016fc <_exit>:

void _exit (int status)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ffe5 	bl	80016d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800170e:	e7fe      	b.n	800170e <_exit+0x12>

08001710 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	e00a      	b.n	8001738 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001722:	f3af 8000 	nop.w
 8001726:	4601      	mov	r1, r0
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	60ba      	str	r2, [r7, #8]
 800172e:	b2ca      	uxtb	r2, r1
 8001730:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	dbf0      	blt.n	8001722 <_read+0x12>
	}

return len;
 8001740:	687b      	ldr	r3, [r7, #4]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	60f8      	str	r0, [r7, #12]
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	e009      	b.n	8001770 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	60ba      	str	r2, [r7, #8]
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf1      	blt.n	800175c <_write+0x12>
	}
	return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_close>:

int _close(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
	return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017aa:	605a      	str	r2, [r3, #4]
	return 0;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_isatty>:

int _isatty(int file)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
	return 1;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
	return 0;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
	...

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d205      	bcs.n	8001828 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800181c:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <_sbrk+0x6c>)
 800181e:	220c      	movs	r2, #12
 8001820:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001822:	f04f 33ff 	mov.w	r3, #4294967295
 8001826:	e009      	b.n	800183c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001828:	4b09      	ldr	r3, [pc, #36]	; (8001850 <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182e:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4413      	add	r3, r2
 8001836:	4a06      	ldr	r2, [pc, #24]	; (8001850 <_sbrk+0x64>)
 8001838:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183a:	68fb      	ldr	r3, [r7, #12]
}
 800183c:	4618      	mov	r0, r3
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	20020000 	.word	0x20020000
 800184c:	00000400 	.word	0x00000400
 8001850:	2000009c 	.word	0x2000009c
 8001854:	2000bcd8 	.word	0x2000bcd8
 8001858:	2000bcc4 	.word	0x2000bcc4

0800185c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <SystemInit+0x20>)
 8001862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001866:	4a05      	ldr	r2, [pc, #20]	; (800187c <SystemInit+0x20>)
 8001868:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800186c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001884:	480d      	ldr	r0, [pc, #52]	; (80018bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001886:	490e      	ldr	r1, [pc, #56]	; (80018c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800189c:	4c0b      	ldr	r4, [pc, #44]	; (80018cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018aa:	f7ff ffd7 	bl	800185c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ae:	f017 f9b3 	bl	8018c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018b2:	f7ff fac5 	bl	8000e40 <main>
  bx  lr    
 80018b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80018c4:	0801deec 	.word	0x0801deec
  ldr r2, =_sbss
 80018c8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80018cc:	2000bcd8 	.word	0x2000bcd8

080018d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0d      	ldr	r2, [pc, #52]	; (8001914 <HAL_Init+0x40>)
 80018de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_Init+0x40>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_Init+0x40>)
 80018ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <HAL_Init+0x40>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a07      	ldr	r2, [pc, #28]	; (8001914 <HAL_Init+0x40>)
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fc:	2003      	movs	r0, #3
 80018fe:	f000 fd61 	bl	80023c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001902:	200f      	movs	r0, #15
 8001904:	f000 f808 	bl	8001918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001908:	f7ff fde6 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190c:	2300      	movs	r3, #0
}
 800190e:	4618      	mov	r0, r3
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023c00 	.word	0x40023c00

08001918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_InitTick+0x54>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_InitTick+0x58>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	4619      	mov	r1, r3
 800192a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fd79 	bl	800242e <HAL_SYSTICK_Config>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e00e      	b.n	8001964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2b0f      	cmp	r3, #15
 800194a:	d80a      	bhi.n	8001962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800194c:	2200      	movs	r2, #0
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f000 fd41 	bl	80023da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001958:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_InitTick+0x5c>)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	e000      	b.n	8001964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
}
 8001964:	4618      	mov	r0, r3
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000000 	.word	0x20000000
 8001970:	20000008 	.word	0x20000008
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x20>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_IncTick+0x24>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000008 	.word	0x20000008
 800199c:	200052a4 	.word	0x200052a4

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	200052a4 	.word	0x200052a4

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff ffee 	bl	80019a0 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_Delay+0x44>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000008 	.word	0x20000008

08001a00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e033      	b.n	8001a7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d109      	bne.n	8001a32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff fd86 	bl	8001530 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d118      	bne.n	8001a70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a46:	f023 0302 	bic.w	r3, r3, #2
 8001a4a:	f043 0202 	orr.w	r2, r3, #2
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fa68 	bl	8001f28 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f023 0303 	bic.w	r3, r3, #3
 8001a66:	f043 0201 	orr.w	r2, r3, #1
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8001a6e:	e001      	b.n	8001a74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d101      	bne.n	8001aa6 <HAL_ADC_Start_DMA+0x1e>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e0e9      	b.n	8001c7a <HAL_ADC_Start_DMA+0x1f2>
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d018      	beq.n	8001aee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001acc:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <HAL_ADC_Start_DMA+0x1fc>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a6d      	ldr	r2, [pc, #436]	; (8001c88 <HAL_ADC_Start_DMA+0x200>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0c9a      	lsrs	r2, r3, #18
 8001ad8:	4613      	mov	r3, r2
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4413      	add	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ae0:	e002      	b.n	8001ae8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f9      	bne.n	8001ae2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001afc:	d107      	bne.n	8001b0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	f040 80a1 	bne.w	8001c60 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b5c:	d106      	bne.n	8001b6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f023 0206 	bic.w	r2, r3, #6
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	645a      	str	r2, [r3, #68]	; 0x44
 8001b6a:	e002      	b.n	8001b72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b7a:	4b44      	ldr	r3, [pc, #272]	; (8001c8c <HAL_ADC_Start_DMA+0x204>)
 8001b7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b82:	4a43      	ldr	r2, [pc, #268]	; (8001c90 <HAL_ADC_Start_DMA+0x208>)
 8001b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	4a42      	ldr	r2, [pc, #264]	; (8001c94 <HAL_ADC_Start_DMA+0x20c>)
 8001b8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b92:	4a41      	ldr	r2, [pc, #260]	; (8001c98 <HAL_ADC_Start_DMA+0x210>)
 8001b94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	685a      	ldr	r2, [r3, #4]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bbe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	334c      	adds	r3, #76	; 0x4c
 8001bca:	4619      	mov	r1, r3
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f000 fce8 	bl	80025a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d12a      	bne.n	8001c36 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <HAL_ADC_Start_DMA+0x214>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d015      	beq.n	8001c16 <HAL_ADC_Start_DMA+0x18e>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <HAL_ADC_Start_DMA+0x218>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d105      	bne.n	8001c00 <HAL_ADC_Start_DMA+0x178>
 8001bf4:	4b25      	ldr	r3, [pc, #148]	; (8001c8c <HAL_ADC_Start_DMA+0x204>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00a      	beq.n	8001c16 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a27      	ldr	r2, [pc, #156]	; (8001ca4 <HAL_ADC_Start_DMA+0x21c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d136      	bne.n	8001c78 <HAL_ADC_Start_DMA+0x1f0>
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_ADC_Start_DMA+0x204>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f003 0310 	and.w	r3, r3, #16
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d130      	bne.n	8001c78 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d129      	bne.n	8001c78 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	e020      	b.n	8001c78 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a18      	ldr	r2, [pc, #96]	; (8001c9c <HAL_ADC_Start_DMA+0x214>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d11b      	bne.n	8001c78 <HAL_ADC_Start_DMA+0x1f0>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d114      	bne.n	8001c78 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c5c:	609a      	str	r2, [r3, #8]
 8001c5e:	e00b      	b.n	8001c78 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	f043 0210 	orr.w	r2, r3, #16
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c70:	f043 0201 	orr.w	r2, r3, #1
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	20000000 	.word	0x20000000
 8001c88:	431bde83 	.word	0x431bde83
 8001c8c:	40012300 	.word	0x40012300
 8001c90:	08002121 	.word	0x08002121
 8001c94:	080021db 	.word	0x080021db
 8001c98:	080021f7 	.word	0x080021f7
 8001c9c:	40012000 	.word	0x40012000
 8001ca0:	40012100 	.word	0x40012100
 8001ca4:	40012200 	.word	0x40012200

08001ca8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cd8:	bf00      	nop
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1c>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e105      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x228>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d925      	bls.n	8001d5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68d9      	ldr	r1, [r3, #12]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4613      	mov	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	4413      	add	r3, r2
 8001d24:	3b1e      	subs	r3, #30
 8001d26:	2207      	movs	r2, #7
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	400a      	ands	r2, r1
 8001d34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68d9      	ldr	r1, [r3, #12]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	4618      	mov	r0, r3
 8001d48:	4603      	mov	r3, r0
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4403      	add	r3, r0
 8001d4e:	3b1e      	subs	r3, #30
 8001d50:	409a      	lsls	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	e022      	b.n	8001da2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6919      	ldr	r1, [r3, #16]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	2207      	movs	r2, #7
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	400a      	ands	r2, r1
 8001d7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6919      	ldr	r1, [r3, #16]
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	689a      	ldr	r2, [r3, #8]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4403      	add	r3, r0
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b06      	cmp	r3, #6
 8001da8:	d824      	bhi.n	8001df4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4413      	add	r3, r2
 8001dba:	3b05      	subs	r3, #5
 8001dbc:	221f      	movs	r2, #31
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	400a      	ands	r2, r1
 8001dca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	3b05      	subs	r3, #5
 8001de6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34
 8001df2:	e04c      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b0c      	cmp	r3, #12
 8001dfa:	d824      	bhi.n	8001e46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	3b23      	subs	r3, #35	; 0x23
 8001e0e:	221f      	movs	r2, #31
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43da      	mvns	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	400a      	ands	r2, r1
 8001e1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	3b23      	subs	r3, #35	; 0x23
 8001e38:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
 8001e44:	e023      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	4613      	mov	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	3b41      	subs	r3, #65	; 0x41
 8001e58:	221f      	movs	r2, #31
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	43da      	mvns	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	400a      	ands	r2, r1
 8001e66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	4413      	add	r3, r2
 8001e80:	3b41      	subs	r3, #65	; 0x41
 8001e82:	fa00 f203 	lsl.w	r2, r0, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e8e:	4b22      	ldr	r3, [pc, #136]	; (8001f18 <HAL_ADC_ConfigChannel+0x234>)
 8001e90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a21      	ldr	r2, [pc, #132]	; (8001f1c <HAL_ADC_ConfigChannel+0x238>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d109      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1cc>
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b12      	cmp	r3, #18
 8001ea2:	d105      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a19      	ldr	r2, [pc, #100]	; (8001f1c <HAL_ADC_ConfigChannel+0x238>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d123      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x21e>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2b10      	cmp	r3, #16
 8001ec0:	d003      	beq.n	8001eca <HAL_ADC_ConfigChannel+0x1e6>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b11      	cmp	r3, #17
 8001ec8:	d11b      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b10      	cmp	r3, #16
 8001edc:	d111      	bne.n	8001f02 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_ADC_ConfigChannel+0x23c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_ADC_ConfigChannel+0x240>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	0c9a      	lsrs	r2, r3, #18
 8001eea:	4613      	mov	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f9      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3714      	adds	r7, #20
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	40012300 	.word	0x40012300
 8001f1c:	40012000 	.word	0x40012000
 8001f20:	20000000 	.word	0x20000000
 8001f24:	431bde83 	.word	0x431bde83

08001f28 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f30:	4b79      	ldr	r3, [pc, #484]	; (8002118 <ADC_Init+0x1f0>)
 8001f32:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	021a      	lsls	r2, r3, #8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6859      	ldr	r1, [r3, #4]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6899      	ldr	r1, [r3, #8]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	4a58      	ldr	r2, [pc, #352]	; (800211c <ADC_Init+0x1f4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6899      	ldr	r1, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	430a      	orrs	r2, r1
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	e00f      	b.n	8002026 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002014:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002024:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0202 	bic.w	r2, r2, #2
 8002034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	6899      	ldr	r1, [r3, #8]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	7e1b      	ldrb	r3, [r3, #24]
 8002040:	005a      	lsls	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d01b      	beq.n	800208c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002062:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002072:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6859      	ldr	r1, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	3b01      	subs	r3, #1
 8002080:	035a      	lsls	r2, r3, #13
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	e007      	b.n	800209c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800209a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	051a      	lsls	r2, r3, #20
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6899      	ldr	r1, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020de:	025a      	lsls	r2, r3, #9
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6899      	ldr	r1, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	029a      	lsls	r2, r3, #10
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40012300 	.word	0x40012300
 800211c:	0f000001 	.word	0x0f000001

08002120 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002136:	2b00      	cmp	r3, #0
 8002138:	d13c      	bne.n	80021b4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d12b      	bne.n	80021ac <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002158:	2b00      	cmp	r3, #0
 800215a:	d127      	bne.n	80021ac <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002174:	2b00      	cmp	r3, #0
 8002176:	d119      	bne.n	80021ac <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0220 	bic.w	r2, r2, #32
 8002186:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f043 0201 	orr.w	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff fd7b 	bl	8001ca8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021b2:	e00e      	b.n	80021d2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b8:	f003 0310 	and.w	r3, r3, #16
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021c0:	68f8      	ldr	r0, [r7, #12]
 80021c2:	f7ff fd85 	bl	8001cd0 <HAL_ADC_ErrorCallback>
}
 80021c6:	e004      	b.n	80021d2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	4798      	blx	r3
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b084      	sub	sp, #16
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f7ff fd67 	bl	8001cbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002202:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	f043 0204 	orr.w	r2, r3, #4
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f7ff fd5a 	bl	8001cd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002240:	4013      	ands	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800224c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002254:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002256:	4a04      	ldr	r2, [pc, #16]	; (8002268 <__NVIC_SetPriorityGrouping+0x44>)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	60d3      	str	r3, [r2, #12]
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002270:	4b04      	ldr	r3, [pc, #16]	; (8002284 <__NVIC_GetPriorityGrouping+0x18>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	f003 0307 	and.w	r3, r3, #7
}
 800227a:	4618      	mov	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	2b00      	cmp	r3, #0
 8002298:	db0b      	blt.n	80022b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	4907      	ldr	r1, [pc, #28]	; (80022c0 <__NVIC_EnableIRQ+0x38>)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	095b      	lsrs	r3, r3, #5
 80022a8:	2001      	movs	r0, #1
 80022aa:	fa00 f202 	lsl.w	r2, r0, r2
 80022ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	e000e100 	.word	0xe000e100

080022c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	6039      	str	r1, [r7, #0]
 80022ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db0a      	blt.n	80022ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	490c      	ldr	r1, [pc, #48]	; (8002310 <__NVIC_SetPriority+0x4c>)
 80022de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e2:	0112      	lsls	r2, r2, #4
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	440b      	add	r3, r1
 80022e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022ec:	e00a      	b.n	8002304 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4908      	ldr	r1, [pc, #32]	; (8002314 <__NVIC_SetPriority+0x50>)
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	f003 030f 	and.w	r3, r3, #15
 80022fa:	3b04      	subs	r3, #4
 80022fc:	0112      	lsls	r2, r2, #4
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	440b      	add	r3, r1
 8002302:	761a      	strb	r2, [r3, #24]
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000e100 	.word	0xe000e100
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002318:	b480      	push	{r7}
 800231a:	b089      	sub	sp, #36	; 0x24
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f1c3 0307 	rsb	r3, r3, #7
 8002332:	2b04      	cmp	r3, #4
 8002334:	bf28      	it	cs
 8002336:	2304      	movcs	r3, #4
 8002338:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3304      	adds	r3, #4
 800233e:	2b06      	cmp	r3, #6
 8002340:	d902      	bls.n	8002348 <NVIC_EncodePriority+0x30>
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3b03      	subs	r3, #3
 8002346:	e000      	b.n	800234a <NVIC_EncodePriority+0x32>
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	f04f 32ff 	mov.w	r2, #4294967295
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	fa02 f303 	lsl.w	r3, r2, r3
 8002356:	43da      	mvns	r2, r3
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	401a      	ands	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002360:	f04f 31ff 	mov.w	r1, #4294967295
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	fa01 f303 	lsl.w	r3, r1, r3
 800236a:	43d9      	mvns	r1, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002370:	4313      	orrs	r3, r2
         );
}
 8002372:	4618      	mov	r0, r3
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002390:	d301      	bcc.n	8002396 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002392:	2301      	movs	r3, #1
 8002394:	e00f      	b.n	80023b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002396:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <SysTick_Config+0x40>)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800239e:	210f      	movs	r1, #15
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	f7ff ff8e 	bl	80022c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <SysTick_Config+0x40>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <SysTick_Config+0x40>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	e000e010 	.word	0xe000e010

080023c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ff29 	bl	8002224 <__NVIC_SetPriorityGrouping>
}
 80023d2:	bf00      	nop
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023da:	b580      	push	{r7, lr}
 80023dc:	b086      	sub	sp, #24
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
 80023e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023ec:	f7ff ff3e 	bl	800226c <__NVIC_GetPriorityGrouping>
 80023f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	6978      	ldr	r0, [r7, #20]
 80023f8:	f7ff ff8e 	bl	8002318 <NVIC_EncodePriority>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002402:	4611      	mov	r1, r2
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff5d 	bl	80022c4 <__NVIC_SetPriority>
}
 800240a:	bf00      	nop
 800240c:	3718      	adds	r7, #24
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800241c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff31 	bl	8002288 <__NVIC_EnableIRQ>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b082      	sub	sp, #8
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ffa2 	bl	8002380 <SysTick_Config>
 800243c:	4603      	mov	r3, r0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff faa4 	bl	80019a0 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e099      	b.n	8002598 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002484:	e00f      	b.n	80024a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002486:	f7ff fa8b 	bl	80019a0 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b05      	cmp	r3, #5
 8002492:	d908      	bls.n	80024a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2220      	movs	r2, #32
 8002498:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2203      	movs	r2, #3
 800249e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e078      	b.n	8002598 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e8      	bne.n	8002486 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <HAL_DMA_Init+0x158>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d107      	bne.n	8002510 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	4313      	orrs	r3, r2
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f023 0307 	bic.w	r3, r3, #7
 8002526:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	2b04      	cmp	r3, #4
 8002538:	d117      	bne.n	800256a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00e      	beq.n	800256a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fa6f 	bl	8002a30 <DMA_CheckFifoParam>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2240      	movs	r2, #64	; 0x40
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002566:	2301      	movs	r3, #1
 8002568:	e016      	b.n	8002598 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 fa26 	bl	80029c4 <DMA_CalcBaseAndBitshift>
 8002578:	4603      	mov	r3, r0
 800257a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	223f      	movs	r2, #63	; 0x3f
 8002582:	409a      	lsls	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	f010803f 	.word	0xf010803f

080025a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
 80025b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_DMA_Start_IT+0x26>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e040      	b.n	800264c <HAL_DMA_Start_IT+0xa8>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d12f      	bne.n	800263e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f9b8 	bl	8002968 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fc:	223f      	movs	r2, #63	; 0x3f
 80025fe:	409a      	lsls	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0216 	orr.w	r2, r2, #22
 8002612:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	2b00      	cmp	r3, #0
 800261a:	d007      	beq.n	800262c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f042 0208 	orr.w	r2, r2, #8
 800262a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e005      	b.n	800264a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002646:	2302      	movs	r3, #2
 8002648:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800264a:	7dfb      	ldrb	r3, [r7, #23]
}
 800264c:	4618      	mov	r0, r3
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002660:	4b92      	ldr	r3, [pc, #584]	; (80028ac <HAL_DMA_IRQHandler+0x258>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a92      	ldr	r2, [pc, #584]	; (80028b0 <HAL_DMA_IRQHandler+0x25c>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0a9b      	lsrs	r3, r3, #10
 800266c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2208      	movs	r2, #8
 8002680:	409a      	lsls	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	4013      	ands	r3, r2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d01a      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0304 	and.w	r3, r3, #4
 8002694:	2b00      	cmp	r3, #0
 8002696:	d013      	beq.n	80026c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0204 	bic.w	r2, r2, #4
 80026a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	2208      	movs	r2, #8
 80026ae:	409a      	lsls	r2, r3
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b8:	f043 0201 	orr.w	r2, r3, #1
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	2201      	movs	r2, #1
 80026c6:	409a      	lsls	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d012      	beq.n	80026f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00b      	beq.n	80026f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e2:	2201      	movs	r2, #1
 80026e4:	409a      	lsls	r2, r3
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f043 0202 	orr.w	r2, r3, #2
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	2204      	movs	r2, #4
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d012      	beq.n	800272c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00b      	beq.n	800272c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	2204      	movs	r2, #4
 800271a:	409a      	lsls	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	f043 0204 	orr.w	r2, r3, #4
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	2210      	movs	r2, #16
 8002732:	409a      	lsls	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4013      	ands	r3, r2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d043      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d03c      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	2210      	movs	r2, #16
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d018      	beq.n	8002796 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d108      	bne.n	8002784 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b00      	cmp	r3, #0
 8002778:	d024      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	4798      	blx	r3
 8002782:	e01f      	b.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002788:	2b00      	cmp	r3, #0
 800278a:	d01b      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
 8002794:	e016      	b.n	80027c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d107      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0208 	bic.w	r2, r2, #8
 80027b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	2220      	movs	r2, #32
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 808e 	beq.w	80028f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8086 	beq.w	80028f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ea:	2220      	movs	r2, #32
 80027ec:	409a      	lsls	r2, r3
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b05      	cmp	r3, #5
 80027fc:	d136      	bne.n	800286c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0216 	bic.w	r2, r2, #22
 800280c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800281c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <HAL_DMA_IRQHandler+0x1da>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0208 	bic.w	r2, r2, #8
 800283c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002842:	223f      	movs	r2, #63	; 0x3f
 8002844:	409a      	lsls	r2, r3
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800285e:	2b00      	cmp	r3, #0
 8002860:	d07d      	beq.n	800295e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	4798      	blx	r3
        }
        return;
 800286a:	e078      	b.n	800295e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d01c      	beq.n	80028b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d108      	bne.n	800289a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288c:	2b00      	cmp	r3, #0
 800288e:	d030      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
 8002898:	e02b      	b.n	80028f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d027      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
 80028aa:	e022      	b.n	80028f2 <HAL_DMA_IRQHandler+0x29e>
 80028ac:	20000000 	.word	0x20000000
 80028b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10f      	bne.n	80028e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0210 	bic.w	r2, r2, #16
 80028d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d032      	beq.n	8002960 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b00      	cmp	r3, #0
 8002904:	d022      	beq.n	800294c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2205      	movs	r2, #5
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3301      	adds	r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	429a      	cmp	r2, r3
 8002928:	d307      	bcc.n	800293a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f2      	bne.n	800291e <HAL_DMA_IRQHandler+0x2ca>
 8002938:	e000      	b.n	800293c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800293a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	4798      	blx	r3
 800295c:	e000      	b.n	8002960 <HAL_DMA_IRQHandler+0x30c>
        return;
 800295e:	bf00      	nop
    }
  }
}
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop

08002968 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002984:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b40      	cmp	r3, #64	; 0x40
 8002994:	d108      	bne.n	80029a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029a6:	e007      	b.n	80029b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	60da      	str	r2, [r3, #12]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	3b10      	subs	r3, #16
 80029d4:	4a14      	ldr	r2, [pc, #80]	; (8002a28 <DMA_CalcBaseAndBitshift+0x64>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029de:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <DMA_CalcBaseAndBitshift+0x68>)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4413      	add	r3, r2
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d909      	bls.n	8002a06 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	1d1a      	adds	r2, r3, #4
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	659a      	str	r2, [r3, #88]	; 0x58
 8002a04:	e007      	b.n	8002a16 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	aaaaaaab 	.word	0xaaaaaaab
 8002a2c:	0801dc04 	.word	0x0801dc04

08002a30 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d11f      	bne.n	8002a8a <DMA_CheckFifoParam+0x5a>
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d856      	bhi.n	8002afe <DMA_CheckFifoParam+0xce>
 8002a50:	a201      	add	r2, pc, #4	; (adr r2, 8002a58 <DMA_CheckFifoParam+0x28>)
 8002a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a56:	bf00      	nop
 8002a58:	08002a69 	.word	0x08002a69
 8002a5c:	08002a7b 	.word	0x08002a7b
 8002a60:	08002a69 	.word	0x08002a69
 8002a64:	08002aff 	.word	0x08002aff
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d046      	beq.n	8002b02 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a78:	e043      	b.n	8002b02 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a82:	d140      	bne.n	8002b06 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a88:	e03d      	b.n	8002b06 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	699b      	ldr	r3, [r3, #24]
 8002a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a92:	d121      	bne.n	8002ad8 <DMA_CheckFifoParam+0xa8>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b03      	cmp	r3, #3
 8002a98:	d837      	bhi.n	8002b0a <DMA_CheckFifoParam+0xda>
 8002a9a:	a201      	add	r2, pc, #4	; (adr r2, 8002aa0 <DMA_CheckFifoParam+0x70>)
 8002a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa0:	08002ab1 	.word	0x08002ab1
 8002aa4:	08002ab7 	.word	0x08002ab7
 8002aa8:	08002ab1 	.word	0x08002ab1
 8002aac:	08002ac9 	.word	0x08002ac9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab4:	e030      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d025      	beq.n	8002b0e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ac6:	e022      	b.n	8002b0e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ad0:	d11f      	bne.n	8002b12 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ad6:	e01c      	b.n	8002b12 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d903      	bls.n	8002ae6 <DMA_CheckFifoParam+0xb6>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d003      	beq.n	8002aec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ae4:	e018      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8002aea:	e015      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00e      	beq.n	8002b16 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	73fb      	strb	r3, [r7, #15]
      break;
 8002afc:	e00b      	b.n	8002b16 <DMA_CheckFifoParam+0xe6>
      break;
 8002afe:	bf00      	nop
 8002b00:	e00a      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
 8002b04:	e008      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b06:	bf00      	nop
 8002b08:	e006      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0a:	bf00      	nop
 8002b0c:	e004      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e002      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;   
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <DMA_CheckFifoParam+0xe8>
      break;
 8002b16:	bf00      	nop
    }
  } 
  
  return status; 
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop

08002b28 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002b38:	4baa      	ldr	r3, [pc, #680]	; (8002de4 <HAL_ETH_Init+0x2bc>)
 8002b3a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e183      	b.n	8002e56 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f002 f8d8 	bl	8004d18 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	4b9e      	ldr	r3, [pc, #632]	; (8002de8 <HAL_ETH_Init+0x2c0>)
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	4a9d      	ldr	r2, [pc, #628]	; (8002de8 <HAL_ETH_Init+0x2c0>)
 8002b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b76:	6453      	str	r3, [r2, #68]	; 0x44
 8002b78:	4b9b      	ldr	r3, [pc, #620]	; (8002de8 <HAL_ETH_Init+0x2c0>)
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b84:	4b99      	ldr	r3, [pc, #612]	; (8002dec <HAL_ETH_Init+0x2c4>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	4a98      	ldr	r2, [pc, #608]	; (8002dec <HAL_ETH_Init+0x2c4>)
 8002b8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b8e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b90:	4b96      	ldr	r3, [pc, #600]	; (8002dec <HAL_ETH_Init+0x2c4>)
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4994      	ldr	r1, [pc, #592]	; (8002dec <HAL_ETH_Init+0x2c4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0201 	orr.w	r2, r2, #1
 8002bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bb4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002bb6:	f7fe fef3 	bl	80019a0 <HAL_GetTick>
 8002bba:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002bbc:	e011      	b.n	8002be2 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002bbe:	f7fe feef 	bl	80019a0 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bcc:	d909      	bls.n	8002be2 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e139      	b.n	8002e56 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d1e4      	bne.n	8002bbe <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f023 031c 	bic.w	r3, r3, #28
 8002c02:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c04:	f001 ff1a 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8002c08:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4a78      	ldr	r2, [pc, #480]	; (8002df0 <HAL_ETH_Init+0x2c8>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d908      	bls.n	8002c24 <HAL_ETH_Init+0xfc>
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4a77      	ldr	r2, [pc, #476]	; (8002df4 <HAL_ETH_Init+0x2cc>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d804      	bhi.n	8002c24 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	f043 0308 	orr.w	r3, r3, #8
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	e027      	b.n	8002c74 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	4a73      	ldr	r2, [pc, #460]	; (8002df4 <HAL_ETH_Init+0x2cc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d908      	bls.n	8002c3e <HAL_ETH_Init+0x116>
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	4a6d      	ldr	r2, [pc, #436]	; (8002de4 <HAL_ETH_Init+0x2bc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d204      	bcs.n	8002c3e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f043 030c 	orr.w	r3, r3, #12
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e01a      	b.n	8002c74 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	4a68      	ldr	r2, [pc, #416]	; (8002de4 <HAL_ETH_Init+0x2bc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d303      	bcc.n	8002c4e <HAL_ETH_Init+0x126>
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4a6b      	ldr	r2, [pc, #428]	; (8002df8 <HAL_ETH_Init+0x2d0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d911      	bls.n	8002c72 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	4a69      	ldr	r2, [pc, #420]	; (8002df8 <HAL_ETH_Init+0x2d0>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d908      	bls.n	8002c68 <HAL_ETH_Init+0x140>
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	4a68      	ldr	r2, [pc, #416]	; (8002dfc <HAL_ETH_Init+0x2d4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d804      	bhi.n	8002c68 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	f043 0304 	orr.w	r3, r3, #4
 8002c64:	61fb      	str	r3, [r7, #28]
 8002c66:	e005      	b.n	8002c74 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f043 0310 	orr.w	r3, r3, #16
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	e000      	b.n	8002c74 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002c72:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002c7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c80:	2100      	movs	r1, #0
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fc17 	bl	80034b6 <HAL_ETH_WritePHYRegister>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002c92:	6939      	ldr	r1, [r7, #16]
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 fdcd 	bl	8003834 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0d7      	b.n	8002e56 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002ca6:	20ff      	movs	r0, #255	; 0xff
 8002ca8:	f7fe fe86 	bl	80019b8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a5 	beq.w	8002e00 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cb6:	f7fe fe73 	bl	80019a0 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 fb8e 	bl	80033e6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002cca:	f7fe fe69 	bl	80019a0 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d90f      	bls.n	8002cfc <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002ce0:	6939      	ldr	r1, [r7, #16]
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fda6 	bl	8003834 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e0ac      	b.n	8002e56 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0da      	beq.n	8002cbc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002d06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 fbd2 	bl	80034b6 <HAL_ETH_WritePHYRegister>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002d1c:	6939      	ldr	r1, [r7, #16]
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 fd88 	bl	8003834 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e092      	b.n	8002e56 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d30:	f7fe fe36 	bl	80019a0 <HAL_GetTick>
 8002d34:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002d36:	f107 030c 	add.w	r3, r7, #12
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fb51 	bl	80033e6 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002d44:	f7fe fe2c 	bl	80019a0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d90f      	bls.n	8002d76 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002d5a:	6939      	ldr	r1, [r7, #16]
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 fd69 	bl	8003834 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e06f      	b.n	8002e56 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0da      	beq.n	8002d36 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002d80:	f107 030c 	add.w	r3, r7, #12
 8002d84:	461a      	mov	r2, r3
 8002d86:	2110      	movs	r1, #16
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 fb2c 	bl	80033e6 <HAL_ETH_ReadPHYRegister>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00b      	beq.n	8002dac <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002d98:	6939      	ldr	r1, [r7, #16]
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fd4a 	bl	8003834 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002da8:	2301      	movs	r3, #1
 8002daa:	e054      	b.n	8002e56 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dbc:	60da      	str	r2, [r3, #12]
 8002dbe:	e002      	b.n	8002dc6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	e035      	b.n	8002e44 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	e030      	b.n	8002e44 <HAL_ETH_Init+0x31c>
 8002de2:	bf00      	nop
 8002de4:	03938700 	.word	0x03938700
 8002de8:	40023800 	.word	0x40023800
 8002dec:	40013800 	.word	0x40013800
 8002df0:	01312cff 	.word	0x01312cff
 8002df4:	02160ebf 	.word	0x02160ebf
 8002df8:	05f5e0ff 	.word	0x05f5e0ff
 8002dfc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	085b      	lsrs	r3, r3, #1
 8002e0e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	2100      	movs	r1, #0
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fb4c 	bl	80034b6 <HAL_ETH_WritePHYRegister>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00b      	beq.n	8002e3c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002e28:	6939      	ldr	r1, [r7, #16]
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fd02 	bl	8003834 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e00c      	b.n	8002e56 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002e3c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002e40:	f7fe fdba 	bl	80019b8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002e44:	6939      	ldr	r1, [r7, #16]
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fcf4 	bl	8003834 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop

08002e60 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b087      	sub	sp, #28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_ETH_DMATxDescListInit+0x20>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e052      	b.n	8002f26 <HAL_ETH_DMATxDescListInit+0xc6>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e030      	b.n	8002efe <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	015b      	lsls	r3, r3, #5
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002eac:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002eb4:	fb02 f303 	mul.w	r3, r2, r3
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d208      	bcs.n	8002ef2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	015b      	lsls	r3, r3, #5
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	4413      	add	r3, r2
 8002eea:	461a      	mov	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	e002      	b.n	8002ef8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3301      	adds	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d3ca      	bcc.n	8002e9c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68ba      	ldr	r2, [r7, #8]
 8002f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f10:	3310      	adds	r3, #16
 8002f12:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	371c      	adds	r7, #28
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002f32:	b480      	push	{r7}
 8002f34:	b087      	sub	sp, #28
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	607a      	str	r2, [r7, #4]
 8002f3e:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <HAL_ETH_DMARxDescListInit+0x20>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e056      	b.n	8003000 <HAL_ETH_DMARxDescListInit+0xce>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2201      	movs	r2, #1
 8002f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	e034      	b.n	8002fd8 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	015b      	lsls	r3, r3, #5
 8002f72:	68ba      	ldr	r2, [r7, #8]
 8002f74:	4413      	add	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f7e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f86:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4413      	add	r3, r2
 8002f96:	461a      	mov	r2, r3
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d208      	bcs.n	8002fcc <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	015b      	lsls	r3, r3, #5
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	e002      	b.n	8002fd2 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d3c6      	bcc.n	8002f6e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fea:	330c      	adds	r3, #12
 8002fec:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	2300      	movs	r3, #0
 8003020:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_ETH_TransmitFrame+0x24>
 800302c:	2302      	movs	r3, #2
 800302e:	e0cd      	b.n	80031cc <HAL_ETH_TransmitFrame+0x1c0>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003056:	2301      	movs	r3, #1
 8003058:	e0b8      	b.n	80031cc <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	da09      	bge.n	8003078 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2212      	movs	r2, #18
 8003068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0a9      	b.n	80031cc <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800307e:	4293      	cmp	r3, r2
 8003080:	d915      	bls.n	80030ae <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	4a54      	ldr	r2, [pc, #336]	; (80031d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0a9b      	lsrs	r3, r3, #10
 800308c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	4b51      	ldr	r3, [pc, #324]	; (80031d8 <HAL_ETH_TransmitFrame+0x1cc>)
 8003092:	fba3 1302 	umull	r1, r3, r3, r2
 8003096:	0a9b      	lsrs	r3, r3, #10
 8003098:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d005      	beq.n	80030b2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	3301      	adds	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	e001      	b.n	80030b2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80030ae:	2301      	movs	r3, #1
 80030b0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d11c      	bne.n	80030f2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80030c6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80030d2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030e2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	461a      	mov	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80030f0:	e04b      	b.n	800318a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	e044      	b.n	8003182 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003106:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d107      	bne.n	800311e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800311c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003126:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3b01      	subs	r3, #1
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	429a      	cmp	r2, r3
 8003130:	d116      	bne.n	8003160 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003140:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	4a25      	ldr	r2, [pc, #148]	; (80031dc <HAL_ETH_TransmitFrame+0x1d0>)
 8003146:	fb02 f203 	mul.w	r2, r2, r3
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	4413      	add	r3, r2
 800314e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003152:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800315e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800316e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	461a      	mov	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	3301      	adds	r3, #1
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	429a      	cmp	r2, r3
 8003188:	d3b6      	bcc.n	80030f8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003192:	3314      	adds	r3, #20
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0304 	and.w	r3, r3, #4
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a6:	3314      	adds	r3, #20
 80031a8:	2204      	movs	r2, #4
 80031aa:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b4:	3304      	adds	r3, #4
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	371c      	adds	r7, #28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	ac02b00b 	.word	0xac02b00b
 80031dc:	fffffa0c 	.word	0xfffffa0c

080031e0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d101      	bne.n	80031fa <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80031f6:	2302      	movs	r3, #2
 80031f8:	e074      	b.n	80032e4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800320a:	e05a      	b.n	80032c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800321c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003220:	d10d      	bne.n	800323e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	461a      	mov	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	629a      	str	r2, [r3, #40]	; 0x28
 800323c:	e041      	b.n	80032c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	461a      	mov	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	629a      	str	r2, [r3, #40]	; 0x28
 8003262:	e02e      	b.n	80032c2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	2b01      	cmp	r3, #1
 800327c:	d103      	bne.n	8003286 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003292:	1f1a      	subs	r2, r3, #4
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	461a      	mov	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e010      	b.n	80032e4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	db02      	blt.n	80032d2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d99c      	bls.n	800320c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003300:	3314      	adds	r3, #20
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d112      	bne.n	8003332 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f001 fdb1 	bl	8004e74 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800331a:	3314      	adds	r3, #20
 800331c:	2240      	movs	r2, #64	; 0x40
 800331e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003330:	e01b      	b.n	800336a <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800333a:	3314      	adds	r3, #20
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d111      	bne.n	800336a <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f839 	bl	80033be <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003354:	3314      	adds	r3, #20
 8003356:	2201      	movs	r2, #1
 8003358:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003372:	3314      	adds	r3, #20
 8003374:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003378:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003382:	3314      	adds	r3, #20
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800338a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800338e:	d112      	bne.n	80033b6 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f81e 	bl	80033d2 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800339e:	3314      	adds	r3, #20
 80033a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80033a4:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	460b      	mov	r3, r1
 80033f0:	607a      	str	r2, [r7, #4]
 80033f2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b82      	cmp	r3, #130	; 0x82
 8003406:	d101      	bne.n	800340c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
 800340a:	e050      	b.n	80034ae <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2282      	movs	r2, #130	; 0x82
 8003410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 031c 	and.w	r3, r3, #28
 8003422:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8a1b      	ldrh	r3, [r3, #16]
 8003428:	02db      	lsls	r3, r3, #11
 800342a:	b29b      	uxth	r3, r3
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003432:	897b      	ldrh	r3, [r7, #10]
 8003434:	019b      	lsls	r3, r3, #6
 8003436:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4313      	orrs	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f023 0302 	bic.w	r3, r3, #2
 8003446:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003458:	f7fe faa2 	bl	80019a0 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800345e:	e015      	b.n	800348c <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003460:	f7fe fa9e 	bl	80019a0 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346e:	d309      	bcc.n	8003484 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e014      	b.n	80034ae <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e4      	bne.n	8003460 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3718      	adds	r7, #24
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	460b      	mov	r3, r1
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b42      	cmp	r3, #66	; 0x42
 80034d6:	d101      	bne.n	80034dc <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
 80034da:	e04e      	b.n	800357a <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2242      	movs	r2, #66	; 0x42
 80034e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 031c 	and.w	r3, r3, #28
 80034f2:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	8a1b      	ldrh	r3, [r3, #16]
 80034f8:	02db      	lsls	r3, r3, #11
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003502:	897b      	ldrh	r3, [r7, #10]
 8003504:	019b      	lsls	r3, r3, #6
 8003506:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	4313      	orrs	r3, r2
 800350e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f043 0302 	orr.w	r3, r3, #2
 8003516:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003532:	f7fe fa35 	bl	80019a0 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003538:	e015      	b.n	8003566 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800353a:	f7fe fa31 	bl	80019a0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003548:	d309      	bcc.n	800355e <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2201      	movs	r2, #1
 800354e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e00d      	b.n	800357a <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e4      	bne.n	800353a <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003590:	2b01      	cmp	r3, #1
 8003592:	d101      	bne.n	8003598 <HAL_ETH_Start+0x16>
 8003594:	2302      	movs	r3, #2
 8003596:	e01f      	b.n	80035d8 <HAL_ETH_Start+0x56>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 fb45 	bl	8003c38 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fb7c 	bl	8003cac <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fc13 	bl	8003de0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f000 fbb0 	bl	8003d20 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fbdd 	bl	8003d80 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ETH_Stop+0x16>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e01f      	b.n	8003636 <HAL_ETH_Stop+0x56>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 fba2 	bl	8003d50 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fbcf 	bl	8003db0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fb67 	bl	8003ce6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fbe1 	bl	8003de0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 fb27 	bl	8003c72 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_ETH_ConfigMAC+0x1c>
 8003658:	2302      	movs	r3, #2
 800365a:	e0e4      	b.n	8003826 <HAL_ETH_ConfigMAC+0x1e6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 80b1 	beq.w	80037d6 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4b6c      	ldr	r3, [pc, #432]	; (8003830 <HAL_ETH_ConfigMAC+0x1f0>)
 8003680:	4013      	ands	r3, r2
 8003682:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 800368c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003692:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003698:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800369e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80036a4:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80036aa:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80036b0:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80036b6:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80036bc:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80036c2:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80036c8:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80036ce:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80036e6:	2001      	movs	r0, #1
 80036e8:	f7fe f966 	bl	80019b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80036fc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003702:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003708:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800370e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003714:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800371a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003726:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003728:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003732:	2001      	movs	r0, #1
 8003734:	f7fe f940 	bl	80019b8 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003748:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003752:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800375c:	68fa      	ldr	r2, [r7, #12]
 800375e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003762:	4013      	ands	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003770:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003776:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 800377c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003782:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003788:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	4313      	orrs	r3, r2
 800378e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80037a0:	2001      	movs	r0, #1
 80037a2:	f7fe f909 	bl	80019b8 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80037c6:	2001      	movs	r0, #1
 80037c8:	f7fe f8f6 	bl	80019b8 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	61da      	str	r2, [r3, #28]
 80037d4:	e01e      	b.n	8003814 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80037e4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003806:	2001      	movs	r0, #1
 8003808:	f7fe f8d6 	bl	80019b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	ff20810f 	.word	0xff20810f

08003834 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b0b0      	sub	sp, #192	; 0xc0
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d007      	beq.n	800385a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003850:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003858:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800385a:	2300      	movs	r3, #0
 800385c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800385e:	2300      	movs	r3, #0
 8003860:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003862:	2300      	movs	r3, #0
 8003864:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003866:	2300      	movs	r3, #0
 8003868:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800386a:	2300      	movs	r3, #0
 800386c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800386e:	2300      	movs	r3, #0
 8003870:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d103      	bne.n	8003882 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800387a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800387e:	663b      	str	r3, [r7, #96]	; 0x60
 8003880:	e001      	b.n	8003886 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003886:	f44f 7300 	mov.w	r3, #512	; 0x200
 800388a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 800388c:	2300      	movs	r3, #0
 800388e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003890:	2300      	movs	r3, #0
 8003892:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003894:	2300      	movs	r3, #0
 8003896:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003898:	2300      	movs	r3, #0
 800389a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 800389c:	2300      	movs	r3, #0
 800389e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80038a0:	2340      	movs	r3, #64	; 0x40
 80038a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80038a4:	2300      	movs	r3, #0
 80038a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80038ce:	2300      	movs	r3, #0
 80038d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80038da:	2300      	movs	r3, #0
 80038dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80038e0:	2300      	movs	r3, #0
 80038e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80038f2:	2300      	movs	r3, #0
 80038f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003908:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800390c:	4bac      	ldr	r3, [pc, #688]	; (8003bc0 <ETH_MACDMAConfig+0x38c>)
 800390e:	4013      	ands	r3, r2
 8003910:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003914:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003918:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800391a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800391c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800391e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003920:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003926:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800392a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800392c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800392e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003934:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003936:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003938:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800393a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800393c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800393e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003940:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003944:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003948:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800394a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800395c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003968:	2001      	movs	r0, #1
 800396a:	f7fe f825 	bl	80019b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003976:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003978:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800397a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800397c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800397e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003980:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003982:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003986:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003988:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 800398c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800398e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003992:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003998:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 800399c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80039a4:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80039a6:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f7fe f800 	bl	80019b8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039c0:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039ca:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80039d4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80039e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80039e4:	f64f 7341 	movw	r3, #65345	; 0xff41
 80039e8:	4013      	ands	r3, r2
 80039ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80039ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80039f2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80039f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80039f8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80039fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80039fe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003a00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003a04:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003a06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003a0a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003a0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003a10:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003a12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a24:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a30:	2001      	movs	r0, #1
 8003a32:	f7fd ffc1 	bl	80019b8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a3e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003a40:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003a44:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f7fd ffac 	bl	80019b8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003a68:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003a6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a72:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003a78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a7c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003a86:	2300      	movs	r3, #0
 8003a88:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003a8e:	2304      	movs	r3, #4
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003a92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003a98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a9c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003a9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003aa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aa8:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003aaa:	2380      	movs	r3, #128	; 0x80
 8003aac:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003abe:	3318      	adds	r3, #24
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003ac6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003aca:	4b3e      	ldr	r3, [pc, #248]	; (8003bc4 <ETH_MACDMAConfig+0x390>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003ad2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003ad4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003ad6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003ad8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003ada:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003adc:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003ade:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003ae0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003ae2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003ae4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003ae6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003aea:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003aee:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003af2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003af4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b06:	3318      	adds	r3, #24
 8003b08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b0c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b16:	3318      	adds	r3, #24
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f7fd ff4a 	bl	80019b8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b2c:	3318      	adds	r3, #24
 8003b2e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b32:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003b38:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003b3c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003b40:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003b44:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b48:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003b4a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003b4e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b5c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f7fd ff23 	bl	80019b8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b7a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b7e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	699b      	ldr	r3, [r3, #24]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d10f      	bne.n	8003ba8 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b90:	331c      	adds	r3, #28
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ba4:	331c      	adds	r3, #28
 8003ba6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	461a      	mov	r2, r3
 8003bae:	2100      	movs	r1, #0
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f809 	bl	8003bc8 <ETH_MACAddressConfig>
}
 8003bb6:	bf00      	nop
 8003bb8:	37c0      	adds	r7, #192	; 0xc0
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	ff20810f 	.word	0xff20810f
 8003bc4:	f8de3f23 	.word	0xf8de3f23

08003bc8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3305      	adds	r3, #5
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	3204      	adds	r2, #4
 8003be0:	7812      	ldrb	r2, [r2, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <ETH_MACAddressConfig+0x68>)
 8003bea:	4413      	add	r3, r2
 8003bec:	461a      	mov	r2, r3
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3303      	adds	r3, #3
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	061a      	lsls	r2, r3, #24
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	431a      	orrs	r2, r3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3301      	adds	r3, #1
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	7812      	ldrb	r2, [r2, #0]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <ETH_MACAddressConfig+0x6c>)
 8003c1a:	4413      	add	r3, r2
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	6013      	str	r3, [r2, #0]
}
 8003c22:	bf00      	nop
 8003c24:	371c      	adds	r7, #28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40028040 	.word	0x40028040
 8003c34:	40028044 	.word	0x40028044

08003c38 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f000 f8e9 	bl	8003e34 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	601a      	str	r2, [r3, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0208 	bic.w	r2, r2, #8
 8003c8c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003c96:	2001      	movs	r0, #1
 8003c98:	f000 f8cc 	bl	8003e34 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]
}
 8003ca4:	bf00      	nop
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0204 	orr.w	r2, r2, #4
 8003cc6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	f000 f8af 	bl	8003e34 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	601a      	str	r2, [r3, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0204 	bic.w	r2, r2, #4
 8003d00:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	f000 f892 	bl	8003e34 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	601a      	str	r2, [r3, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d30:	3318      	adds	r3, #24
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d40:	3318      	adds	r3, #24
 8003d42:	601a      	str	r2, [r3, #0]
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d60:	3318      	adds	r3, #24
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d70:	3318      	adds	r3, #24
 8003d72:	601a      	str	r2, [r3, #0]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d90:	3318      	adds	r3, #24
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0202 	orr.w	r2, r2, #2
 8003d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003da0:	3318      	adds	r3, #24
 8003da2:	601a      	str	r2, [r3, #0]
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc0:	3318      	adds	r3, #24
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0202 	bic.w	r2, r2, #2
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd0:	3318      	adds	r3, #24
 8003dd2:	601a      	str	r2, [r3, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	3318      	adds	r3, #24
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e04:	3318      	adds	r3, #24
 8003e06:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e10:	3318      	adds	r3, #24
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003e16:	2001      	movs	r0, #1
 8003e18:	f000 f80c 	bl	8003e34 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e26:	3318      	adds	r3, #24
 8003e28:	601a      	str	r2, [r3, #0]
}
 8003e2a:	bf00      	nop
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <ETH_Delay+0x38>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a0b      	ldr	r2, [pc, #44]	; (8003e70 <ETH_Delay+0x3c>)
 8003e42:	fba2 2303 	umull	r2, r3, r2, r3
 8003e46:	0a5b      	lsrs	r3, r3, #9
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003e50:	bf00      	nop
  } 
  while (Delay --);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1e5a      	subs	r2, r3, #1
 8003e56:	60fa      	str	r2, [r7, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1f9      	bne.n	8003e50 <ETH_Delay+0x1c>
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	20000000 	.word	0x20000000
 8003e70:	10624dd3 	.word	0x10624dd3

08003e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b089      	sub	sp, #36	; 0x24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	61fb      	str	r3, [r7, #28]
 8003e8e:	e16b      	b.n	8004168 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	f040 815a 	bne.w	8004162 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d005      	beq.n	8003ec6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d130      	bne.n	8003f28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003efc:	2201      	movs	r2, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 0201 	and.w	r2, r3, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	2b03      	cmp	r3, #3
 8003f32:	d017      	beq.n	8003f64 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	2203      	movs	r2, #3
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d123      	bne.n	8003fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	08da      	lsrs	r2, r3, #3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3208      	adds	r2, #8
 8003f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	220f      	movs	r2, #15
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	691a      	ldr	r2, [r3, #16]
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	08da      	lsrs	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	3208      	adds	r2, #8
 8003fb2:	69b9      	ldr	r1, [r7, #24]
 8003fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f003 0203 	and.w	r2, r3, #3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80b4 	beq.w	8004162 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b60      	ldr	r3, [pc, #384]	; (8004180 <HAL_GPIO_Init+0x30c>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	4a5f      	ldr	r2, [pc, #380]	; (8004180 <HAL_GPIO_Init+0x30c>)
 8004004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004008:	6453      	str	r3, [r2, #68]	; 0x44
 800400a:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <HAL_GPIO_Init+0x30c>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004016:	4a5b      	ldr	r2, [pc, #364]	; (8004184 <HAL_GPIO_Init+0x310>)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	089b      	lsrs	r3, r3, #2
 800401c:	3302      	adds	r3, #2
 800401e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	220f      	movs	r2, #15
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43db      	mvns	r3, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4013      	ands	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a52      	ldr	r2, [pc, #328]	; (8004188 <HAL_GPIO_Init+0x314>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d02b      	beq.n	800409a <HAL_GPIO_Init+0x226>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a51      	ldr	r2, [pc, #324]	; (800418c <HAL_GPIO_Init+0x318>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d025      	beq.n	8004096 <HAL_GPIO_Init+0x222>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a50      	ldr	r2, [pc, #320]	; (8004190 <HAL_GPIO_Init+0x31c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d01f      	beq.n	8004092 <HAL_GPIO_Init+0x21e>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4f      	ldr	r2, [pc, #316]	; (8004194 <HAL_GPIO_Init+0x320>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d019      	beq.n	800408e <HAL_GPIO_Init+0x21a>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4e      	ldr	r2, [pc, #312]	; (8004198 <HAL_GPIO_Init+0x324>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d013      	beq.n	800408a <HAL_GPIO_Init+0x216>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4d      	ldr	r2, [pc, #308]	; (800419c <HAL_GPIO_Init+0x328>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00d      	beq.n	8004086 <HAL_GPIO_Init+0x212>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4c      	ldr	r2, [pc, #304]	; (80041a0 <HAL_GPIO_Init+0x32c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d007      	beq.n	8004082 <HAL_GPIO_Init+0x20e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4b      	ldr	r2, [pc, #300]	; (80041a4 <HAL_GPIO_Init+0x330>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d101      	bne.n	800407e <HAL_GPIO_Init+0x20a>
 800407a:	2307      	movs	r3, #7
 800407c:	e00e      	b.n	800409c <HAL_GPIO_Init+0x228>
 800407e:	2308      	movs	r3, #8
 8004080:	e00c      	b.n	800409c <HAL_GPIO_Init+0x228>
 8004082:	2306      	movs	r3, #6
 8004084:	e00a      	b.n	800409c <HAL_GPIO_Init+0x228>
 8004086:	2305      	movs	r3, #5
 8004088:	e008      	b.n	800409c <HAL_GPIO_Init+0x228>
 800408a:	2304      	movs	r3, #4
 800408c:	e006      	b.n	800409c <HAL_GPIO_Init+0x228>
 800408e:	2303      	movs	r3, #3
 8004090:	e004      	b.n	800409c <HAL_GPIO_Init+0x228>
 8004092:	2302      	movs	r3, #2
 8004094:	e002      	b.n	800409c <HAL_GPIO_Init+0x228>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_GPIO_Init+0x228>
 800409a:	2300      	movs	r3, #0
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	f002 0203 	and.w	r2, r2, #3
 80040a2:	0092      	lsls	r2, r2, #2
 80040a4:	4093      	lsls	r3, r2
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ac:	4935      	ldr	r1, [pc, #212]	; (8004184 <HAL_GPIO_Init+0x310>)
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	089b      	lsrs	r3, r3, #2
 80040b2:	3302      	adds	r3, #2
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_GPIO_Init+0x334>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80040de:	4a32      	ldr	r2, [pc, #200]	; (80041a8 <HAL_GPIO_Init+0x334>)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80040e4:	4b30      	ldr	r3, [pc, #192]	; (80041a8 <HAL_GPIO_Init+0x334>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004108:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <HAL_GPIO_Init+0x334>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800410e:	4b26      	ldr	r3, [pc, #152]	; (80041a8 <HAL_GPIO_Init+0x334>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	43db      	mvns	r3, r3
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	4013      	ands	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4313      	orrs	r3, r2
 8004130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004132:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <HAL_GPIO_Init+0x334>)
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_GPIO_Init+0x334>)
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	43db      	mvns	r3, r3
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4013      	ands	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800415c:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <HAL_GPIO_Init+0x334>)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3301      	adds	r3, #1
 8004166:	61fb      	str	r3, [r7, #28]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b0f      	cmp	r3, #15
 800416c:	f67f ae90 	bls.w	8003e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004170:	bf00      	nop
 8004172:	bf00      	nop
 8004174:	3724      	adds	r7, #36	; 0x24
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	40023800 	.word	0x40023800
 8004184:	40013800 	.word	0x40013800
 8004188:	40020000 	.word	0x40020000
 800418c:	40020400 	.word	0x40020400
 8004190:	40020800 	.word	0x40020800
 8004194:	40020c00 	.word	0x40020c00
 8004198:	40021000 	.word	0x40021000
 800419c:	40021400 	.word	0x40021400
 80041a0:	40021800 	.word	0x40021800
 80041a4:	40021c00 	.word	0x40021c00
 80041a8:	40013c00 	.word	0x40013c00

080041ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	460b      	mov	r3, r1
 80041b6:	807b      	strh	r3, [r7, #2]
 80041b8:	4613      	mov	r3, r2
 80041ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041bc:	787b      	ldrb	r3, [r7, #1]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041c2:	887a      	ldrh	r2, [r7, #2]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041c8:	e003      	b.n	80041d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	041a      	lsls	r2, r3, #16
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	619a      	str	r2, [r3, #24]
}
 80041d2:	bf00      	nop
 80041d4:	370c      	adds	r7, #12
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041f0:	887a      	ldrh	r2, [r7, #2]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	4013      	ands	r3, r2
 80041f6:	041a      	lsls	r2, r3, #16
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	43d9      	mvns	r1, r3
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	400b      	ands	r3, r1
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	619a      	str	r2, [r3, #24]
}
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
	...

08004214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e264      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d075      	beq.n	800431e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004232:	4ba3      	ldr	r3, [pc, #652]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f003 030c 	and.w	r3, r3, #12
 800423a:	2b04      	cmp	r3, #4
 800423c:	d00c      	beq.n	8004258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800423e:	4ba0      	ldr	r3, [pc, #640]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004246:	2b08      	cmp	r3, #8
 8004248:	d112      	bne.n	8004270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800424a:	4b9d      	ldr	r3, [pc, #628]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004256:	d10b      	bne.n	8004270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004258:	4b99      	ldr	r3, [pc, #612]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d05b      	beq.n	800431c <HAL_RCC_OscConfig+0x108>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d157      	bne.n	800431c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e23f      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004278:	d106      	bne.n	8004288 <HAL_RCC_OscConfig+0x74>
 800427a:	4b91      	ldr	r3, [pc, #580]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a90      	ldr	r2, [pc, #576]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e01d      	b.n	80042c4 <HAL_RCC_OscConfig+0xb0>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x98>
 8004292:	4b8b      	ldr	r3, [pc, #556]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a8a      	ldr	r2, [pc, #552]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4b88      	ldr	r3, [pc, #544]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a87      	ldr	r2, [pc, #540]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0xb0>
 80042ac:	4b84      	ldr	r3, [pc, #528]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a83      	ldr	r2, [pc, #524]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80042b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b6:	6013      	str	r3, [r2, #0]
 80042b8:	4b81      	ldr	r3, [pc, #516]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a80      	ldr	r2, [pc, #512]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80042be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d013      	beq.n	80042f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fd fb68 	bl	80019a0 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d4:	f7fd fb64 	bl	80019a0 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	; 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e204      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e6:	4b76      	ldr	r3, [pc, #472]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0xc0>
 80042f2:	e014      	b.n	800431e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f4:	f7fd fb54 	bl	80019a0 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042fc:	f7fd fb50 	bl	80019a0 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	; 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e1f0      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800430e:	4b6c      	ldr	r3, [pc, #432]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0xe8>
 800431a:	e000      	b.n	800431e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d063      	beq.n	80043f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800432a:	4b65      	ldr	r3, [pc, #404]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f003 030c 	and.w	r3, r3, #12
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004336:	4b62      	ldr	r3, [pc, #392]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800433e:	2b08      	cmp	r3, #8
 8004340:	d11c      	bne.n	800437c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004342:	4b5f      	ldr	r3, [pc, #380]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d116      	bne.n	800437c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800434e:	4b5c      	ldr	r3, [pc, #368]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d005      	beq.n	8004366 <HAL_RCC_OscConfig+0x152>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d001      	beq.n	8004366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e1c4      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004366:	4b56      	ldr	r3, [pc, #344]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4952      	ldr	r1, [pc, #328]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437a:	e03a      	b.n	80043f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d020      	beq.n	80043c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004384:	4b4f      	ldr	r3, [pc, #316]	; (80044c4 <HAL_RCC_OscConfig+0x2b0>)
 8004386:	2201      	movs	r2, #1
 8004388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800438a:	f7fd fb09 	bl	80019a0 <HAL_GetTick>
 800438e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004390:	e008      	b.n	80043a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004392:	f7fd fb05 	bl	80019a0 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e1a5      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043a4:	4b46      	ldr	r3, [pc, #280]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0302 	and.w	r3, r3, #2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043b0:	4b43      	ldr	r3, [pc, #268]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	00db      	lsls	r3, r3, #3
 80043be:	4940      	ldr	r1, [pc, #256]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	600b      	str	r3, [r1, #0]
 80043c4:	e015      	b.n	80043f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043c6:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <HAL_RCC_OscConfig+0x2b0>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fd fae8 	bl	80019a0 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043d4:	f7fd fae4 	bl	80019a0 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e184      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043e6:	4b36      	ldr	r3, [pc, #216]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d030      	beq.n	8004460 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d016      	beq.n	8004434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004406:	4b30      	ldr	r3, [pc, #192]	; (80044c8 <HAL_RCC_OscConfig+0x2b4>)
 8004408:	2201      	movs	r2, #1
 800440a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440c:	f7fd fac8 	bl	80019a0 <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004414:	f7fd fac4 	bl	80019a0 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e164      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004426:	4b26      	ldr	r3, [pc, #152]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442a:	f003 0302 	and.w	r3, r3, #2
 800442e:	2b00      	cmp	r3, #0
 8004430:	d0f0      	beq.n	8004414 <HAL_RCC_OscConfig+0x200>
 8004432:	e015      	b.n	8004460 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004434:	4b24      	ldr	r3, [pc, #144]	; (80044c8 <HAL_RCC_OscConfig+0x2b4>)
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443a:	f7fd fab1 	bl	80019a0 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004442:	f7fd faad 	bl	80019a0 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e14d      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004454:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1f0      	bne.n	8004442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80a0 	beq.w	80045ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004472:	4b13      	ldr	r3, [pc, #76]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	60bb      	str	r3, [r7, #8]
 8004482:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004486:	4a0e      	ldr	r2, [pc, #56]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800448c:	6413      	str	r3, [r2, #64]	; 0x40
 800448e:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <HAL_RCC_OscConfig+0x2ac>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800449a:	2301      	movs	r3, #1
 800449c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800449e:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <HAL_RCC_OscConfig+0x2b8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d121      	bne.n	80044ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <HAL_RCC_OscConfig+0x2b8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a07      	ldr	r2, [pc, #28]	; (80044cc <HAL_RCC_OscConfig+0x2b8>)
 80044b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b6:	f7fd fa73 	bl	80019a0 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	e011      	b.n	80044e2 <HAL_RCC_OscConfig+0x2ce>
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800
 80044c4:	42470000 	.word	0x42470000
 80044c8:	42470e80 	.word	0x42470e80
 80044cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d0:	f7fd fa66 	bl	80019a0 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e106      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e2:	4b85      	ldr	r3, [pc, #532]	; (80046f8 <HAL_RCC_OscConfig+0x4e4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d0f0      	beq.n	80044d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d106      	bne.n	8004504 <HAL_RCC_OscConfig+0x2f0>
 80044f6:	4b81      	ldr	r3, [pc, #516]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	4a80      	ldr	r2, [pc, #512]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 80044fc:	f043 0301 	orr.w	r3, r3, #1
 8004500:	6713      	str	r3, [r2, #112]	; 0x70
 8004502:	e01c      	b.n	800453e <HAL_RCC_OscConfig+0x32a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b05      	cmp	r3, #5
 800450a:	d10c      	bne.n	8004526 <HAL_RCC_OscConfig+0x312>
 800450c:	4b7b      	ldr	r3, [pc, #492]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 800450e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004510:	4a7a      	ldr	r2, [pc, #488]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 8004512:	f043 0304 	orr.w	r3, r3, #4
 8004516:	6713      	str	r3, [r2, #112]	; 0x70
 8004518:	4b78      	ldr	r3, [pc, #480]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 800451a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451c:	4a77      	ldr	r2, [pc, #476]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6713      	str	r3, [r2, #112]	; 0x70
 8004524:	e00b      	b.n	800453e <HAL_RCC_OscConfig+0x32a>
 8004526:	4b75      	ldr	r3, [pc, #468]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	4a74      	ldr	r2, [pc, #464]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	6713      	str	r3, [r2, #112]	; 0x70
 8004532:	4b72      	ldr	r3, [pc, #456]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 8004534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004536:	4a71      	ldr	r2, [pc, #452]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 8004538:	f023 0304 	bic.w	r3, r3, #4
 800453c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d015      	beq.n	8004572 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004546:	f7fd fa2b 	bl	80019a0 <HAL_GetTick>
 800454a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800454c:	e00a      	b.n	8004564 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454e:	f7fd fa27 	bl	80019a0 <HAL_GetTick>
 8004552:	4602      	mov	r2, r0
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	f241 3288 	movw	r2, #5000	; 0x1388
 800455c:	4293      	cmp	r3, r2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e0c5      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004564:	4b65      	ldr	r3, [pc, #404]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 8004566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ee      	beq.n	800454e <HAL_RCC_OscConfig+0x33a>
 8004570:	e014      	b.n	800459c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004572:	f7fd fa15 	bl	80019a0 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004578:	e00a      	b.n	8004590 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7fd fa11 	bl	80019a0 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	; 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0af      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004590:	4b5a      	ldr	r3, [pc, #360]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	2b00      	cmp	r3, #0
 800459a:	d1ee      	bne.n	800457a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d105      	bne.n	80045ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045a2:	4b56      	ldr	r3, [pc, #344]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	4a55      	ldr	r2, [pc, #340]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 80045a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 809b 	beq.w	80046ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045b8:	4b50      	ldr	r3, [pc, #320]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 030c 	and.w	r3, r3, #12
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d05c      	beq.n	800467e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d141      	bne.n	8004650 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045cc:	4b4c      	ldr	r3, [pc, #304]	; (8004700 <HAL_RCC_OscConfig+0x4ec>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d2:	f7fd f9e5 	bl	80019a0 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045da:	f7fd f9e1 	bl	80019a0 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e081      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ec:	4b43      	ldr	r3, [pc, #268]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1f0      	bne.n	80045da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69da      	ldr	r2, [r3, #28]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	431a      	orrs	r2, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	019b      	lsls	r3, r3, #6
 8004608:	431a      	orrs	r2, r3
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	3b01      	subs	r3, #1
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	431a      	orrs	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	061b      	lsls	r3, r3, #24
 800461c:	4937      	ldr	r1, [pc, #220]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 800461e:	4313      	orrs	r3, r2
 8004620:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004622:	4b37      	ldr	r3, [pc, #220]	; (8004700 <HAL_RCC_OscConfig+0x4ec>)
 8004624:	2201      	movs	r2, #1
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fd f9ba 	bl	80019a0 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004630:	f7fd f9b6 	bl	80019a0 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e056      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004642:	4b2e      	ldr	r3, [pc, #184]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x41c>
 800464e:	e04e      	b.n	80046ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004650:	4b2b      	ldr	r3, [pc, #172]	; (8004700 <HAL_RCC_OscConfig+0x4ec>)
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fd f9a3 	bl	80019a0 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800465e:	f7fd f99f 	bl	80019a0 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e03f      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004670:	4b22      	ldr	r3, [pc, #136]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1f0      	bne.n	800465e <HAL_RCC_OscConfig+0x44a>
 800467c:	e037      	b.n	80046ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e032      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800468a:	4b1c      	ldr	r3, [pc, #112]	; (80046fc <HAL_RCC_OscConfig+0x4e8>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d028      	beq.n	80046ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d121      	bne.n	80046ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d11a      	bne.n	80046ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046ba:	4013      	ands	r3, r2
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d111      	bne.n	80046ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	085b      	lsrs	r3, r3, #1
 80046d2:	3b01      	subs	r3, #1
 80046d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d107      	bne.n	80046ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d001      	beq.n	80046ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e000      	b.n	80046f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3718      	adds	r7, #24
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	40007000 	.word	0x40007000
 80046fc:	40023800 	.word	0x40023800
 8004700:	42470060 	.word	0x42470060

08004704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0cc      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004718:	4b68      	ldr	r3, [pc, #416]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0307 	and.w	r3, r3, #7
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	429a      	cmp	r2, r3
 8004724:	d90c      	bls.n	8004740 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004726:	4b65      	ldr	r3, [pc, #404]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	b2d2      	uxtb	r2, r2
 800472c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472e:	4b63      	ldr	r3, [pc, #396]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d001      	beq.n	8004740 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0b8      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d020      	beq.n	800478e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d005      	beq.n	8004764 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004758:	4b59      	ldr	r3, [pc, #356]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	4a58      	ldr	r2, [pc, #352]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 800475e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004762:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b00      	cmp	r3, #0
 800476e:	d005      	beq.n	800477c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004770:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	4a52      	ldr	r2, [pc, #328]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800477a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800477c:	4b50      	ldr	r3, [pc, #320]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	494d      	ldr	r1, [pc, #308]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	4313      	orrs	r3, r2
 800478c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0301 	and.w	r3, r3, #1
 8004796:	2b00      	cmp	r3, #0
 8004798:	d044      	beq.n	8004824 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d107      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a2:	4b47      	ldr	r3, [pc, #284]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d119      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e07f      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d003      	beq.n	80047c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d107      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c2:	4b3f      	ldr	r3, [pc, #252]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e06f      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047d2:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e067      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047e2:	4b37      	ldr	r3, [pc, #220]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f023 0203 	bic.w	r2, r3, #3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	4934      	ldr	r1, [pc, #208]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f4:	f7fd f8d4 	bl	80019a0 <HAL_GetTick>
 80047f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047fa:	e00a      	b.n	8004812 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047fc:	f7fd f8d0 	bl	80019a0 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e04f      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004812:	4b2b      	ldr	r3, [pc, #172]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 020c 	and.w	r2, r3, #12
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	429a      	cmp	r2, r3
 8004822:	d1eb      	bne.n	80047fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004824:	4b25      	ldr	r3, [pc, #148]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	683a      	ldr	r2, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d20c      	bcs.n	800484c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004832:	4b22      	ldr	r3, [pc, #136]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	b2d2      	uxtb	r2, r2
 8004838:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483a:	4b20      	ldr	r3, [pc, #128]	; (80048bc <HAL_RCC_ClockConfig+0x1b8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0307 	and.w	r3, r3, #7
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	429a      	cmp	r2, r3
 8004846:	d001      	beq.n	800484c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e032      	b.n	80048b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0304 	and.w	r3, r3, #4
 8004854:	2b00      	cmp	r3, #0
 8004856:	d008      	beq.n	800486a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004858:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4916      	ldr	r1, [pc, #88]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	4313      	orrs	r3, r2
 8004868:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0308 	and.w	r3, r3, #8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004876:	4b12      	ldr	r3, [pc, #72]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	490e      	ldr	r1, [pc, #56]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800488a:	f000 f821 	bl	80048d0 <HAL_RCC_GetSysClockFreq>
 800488e:	4602      	mov	r2, r0
 8004890:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	091b      	lsrs	r3, r3, #4
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	490a      	ldr	r1, [pc, #40]	; (80048c4 <HAL_RCC_ClockConfig+0x1c0>)
 800489c:	5ccb      	ldrb	r3, [r1, r3]
 800489e:	fa22 f303 	lsr.w	r3, r2, r3
 80048a2:	4a09      	ldr	r2, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1c4>)
 80048a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <HAL_RCC_ClockConfig+0x1c8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd f834 	bl	8001918 <HAL_InitTick>

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40023c00 	.word	0x40023c00
 80048c0:	40023800 	.word	0x40023800
 80048c4:	0801dbf4 	.word	0x0801dbf4
 80048c8:	20000000 	.word	0x20000000
 80048cc:	20000004 	.word	0x20000004

080048d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048d0:	b5b0      	push	{r4, r5, r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048d6:	2100      	movs	r1, #0
 80048d8:	6079      	str	r1, [r7, #4]
 80048da:	2100      	movs	r1, #0
 80048dc:	60f9      	str	r1, [r7, #12]
 80048de:	2100      	movs	r1, #0
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048e2:	2100      	movs	r1, #0
 80048e4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048e6:	4952      	ldr	r1, [pc, #328]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x160>)
 80048e8:	6889      	ldr	r1, [r1, #8]
 80048ea:	f001 010c 	and.w	r1, r1, #12
 80048ee:	2908      	cmp	r1, #8
 80048f0:	d00d      	beq.n	800490e <HAL_RCC_GetSysClockFreq+0x3e>
 80048f2:	2908      	cmp	r1, #8
 80048f4:	f200 8094 	bhi.w	8004a20 <HAL_RCC_GetSysClockFreq+0x150>
 80048f8:	2900      	cmp	r1, #0
 80048fa:	d002      	beq.n	8004902 <HAL_RCC_GetSysClockFreq+0x32>
 80048fc:	2904      	cmp	r1, #4
 80048fe:	d003      	beq.n	8004908 <HAL_RCC_GetSysClockFreq+0x38>
 8004900:	e08e      	b.n	8004a20 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004902:	4b4c      	ldr	r3, [pc, #304]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x164>)
 8004904:	60bb      	str	r3, [r7, #8]
       break;
 8004906:	e08e      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004908:	4b4b      	ldr	r3, [pc, #300]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x168>)
 800490a:	60bb      	str	r3, [r7, #8]
      break;
 800490c:	e08b      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800490e:	4948      	ldr	r1, [pc, #288]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8004910:	6849      	ldr	r1, [r1, #4]
 8004912:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004916:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004918:	4945      	ldr	r1, [pc, #276]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x160>)
 800491a:	6849      	ldr	r1, [r1, #4]
 800491c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004920:	2900      	cmp	r1, #0
 8004922:	d024      	beq.n	800496e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004924:	4942      	ldr	r1, [pc, #264]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8004926:	6849      	ldr	r1, [r1, #4]
 8004928:	0989      	lsrs	r1, r1, #6
 800492a:	4608      	mov	r0, r1
 800492c:	f04f 0100 	mov.w	r1, #0
 8004930:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004934:	f04f 0500 	mov.w	r5, #0
 8004938:	ea00 0204 	and.w	r2, r0, r4
 800493c:	ea01 0305 	and.w	r3, r1, r5
 8004940:	493d      	ldr	r1, [pc, #244]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x168>)
 8004942:	fb01 f003 	mul.w	r0, r1, r3
 8004946:	2100      	movs	r1, #0
 8004948:	fb01 f102 	mul.w	r1, r1, r2
 800494c:	1844      	adds	r4, r0, r1
 800494e:	493a      	ldr	r1, [pc, #232]	; (8004a38 <HAL_RCC_GetSysClockFreq+0x168>)
 8004950:	fba2 0101 	umull	r0, r1, r2, r1
 8004954:	1863      	adds	r3, r4, r1
 8004956:	4619      	mov	r1, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	461a      	mov	r2, r3
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	f7fb fc8e 	bl	8000280 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4613      	mov	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e04a      	b.n	8004a04 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800496e:	4b30      	ldr	r3, [pc, #192]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	099b      	lsrs	r3, r3, #6
 8004974:	461a      	mov	r2, r3
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	ea02 0400 	and.w	r4, r2, r0
 8004986:	ea03 0501 	and.w	r5, r3, r1
 800498a:	4620      	mov	r0, r4
 800498c:	4629      	mov	r1, r5
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	014b      	lsls	r3, r1, #5
 8004998:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800499c:	0142      	lsls	r2, r0, #5
 800499e:	4610      	mov	r0, r2
 80049a0:	4619      	mov	r1, r3
 80049a2:	1b00      	subs	r0, r0, r4
 80049a4:	eb61 0105 	sbc.w	r1, r1, r5
 80049a8:	f04f 0200 	mov.w	r2, #0
 80049ac:	f04f 0300 	mov.w	r3, #0
 80049b0:	018b      	lsls	r3, r1, #6
 80049b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80049b6:	0182      	lsls	r2, r0, #6
 80049b8:	1a12      	subs	r2, r2, r0
 80049ba:	eb63 0301 	sbc.w	r3, r3, r1
 80049be:	f04f 0000 	mov.w	r0, #0
 80049c2:	f04f 0100 	mov.w	r1, #0
 80049c6:	00d9      	lsls	r1, r3, #3
 80049c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049cc:	00d0      	lsls	r0, r2, #3
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	1912      	adds	r2, r2, r4
 80049d4:	eb45 0303 	adc.w	r3, r5, r3
 80049d8:	f04f 0000 	mov.w	r0, #0
 80049dc:	f04f 0100 	mov.w	r1, #0
 80049e0:	0299      	lsls	r1, r3, #10
 80049e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80049e6:	0290      	lsls	r0, r2, #10
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4610      	mov	r0, r2
 80049ee:	4619      	mov	r1, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f04f 0300 	mov.w	r3, #0
 80049f8:	f7fb fc42 	bl	8000280 <__aeabi_uldivmod>
 80049fc:	4602      	mov	r2, r0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4613      	mov	r3, r2
 8004a02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a04:	4b0a      	ldr	r3, [pc, #40]	; (8004a30 <HAL_RCC_GetSysClockFreq+0x160>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	005b      	lsls	r3, r3, #1
 8004a12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	60bb      	str	r3, [r7, #8]
      break;
 8004a1e:	e002      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a20:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <HAL_RCC_GetSysClockFreq+0x164>)
 8004a22:	60bb      	str	r3, [r7, #8]
      break;
 8004a24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a26:	68bb      	ldr	r3, [r7, #8]
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8004a30:	40023800 	.word	0x40023800
 8004a34:	00f42400 	.word	0x00f42400
 8004a38:	00b71b00 	.word	0x00b71b00

08004a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000000 	.word	0x20000000

08004a54 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004a5a:	4ba0      	ldr	r3, [pc, #640]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004a5c:	22c0      	movs	r2, #192	; 0xc0
 8004a5e:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004a60:	4b9e      	ldr	r3, [pc, #632]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004a62:	22a8      	movs	r2, #168	; 0xa8
 8004a64:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004a66:	4b9d      	ldr	r3, [pc, #628]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 8004a6c:	4b9b      	ldr	r3, [pc, #620]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004a6e:	220a      	movs	r2, #10
 8004a70:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004a72:	4b9b      	ldr	r3, [pc, #620]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004a74:	22ff      	movs	r2, #255	; 0xff
 8004a76:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004a78:	4b99      	ldr	r3, [pc, #612]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004a7a:	22ff      	movs	r2, #255	; 0xff
 8004a7c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004a7e:	4b98      	ldr	r3, [pc, #608]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004a80:	22ff      	movs	r2, #255	; 0xff
 8004a82:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004a84:	4b96      	ldr	r3, [pc, #600]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004a8a:	4b96      	ldr	r3, [pc, #600]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004a8c:	22c0      	movs	r2, #192	; 0xc0
 8004a8e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004a90:	4b94      	ldr	r3, [pc, #592]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004a92:	22a8      	movs	r2, #168	; 0xa8
 8004a94:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004a96:	4b93      	ldr	r3, [pc, #588]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004a9c:	4b91      	ldr	r3, [pc, #580]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	f008 fa65 	bl	800cf74 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004aaa:	4b8c      	ldr	r3, [pc, #560]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	061a      	lsls	r2, r3, #24
 8004ab0:	4b8a      	ldr	r3, [pc, #552]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004ab2:	785b      	ldrb	r3, [r3, #1]
 8004ab4:	041b      	lsls	r3, r3, #16
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	4b88      	ldr	r3, [pc, #544]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004aba:	789b      	ldrb	r3, [r3, #2]
 8004abc:	021b      	lsls	r3, r3, #8
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	4a86      	ldr	r2, [pc, #536]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004ac2:	78d2      	ldrb	r2, [r2, #3]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	061a      	lsls	r2, r3, #24
 8004ac8:	4b84      	ldr	r3, [pc, #528]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	0619      	lsls	r1, r3, #24
 8004ace:	4b83      	ldr	r3, [pc, #524]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004ad0:	785b      	ldrb	r3, [r3, #1]
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	4319      	orrs	r1, r3
 8004ad6:	4b81      	ldr	r3, [pc, #516]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004ad8:	789b      	ldrb	r3, [r3, #2]
 8004ada:	021b      	lsls	r3, r3, #8
 8004adc:	430b      	orrs	r3, r1
 8004ade:	497f      	ldr	r1, [pc, #508]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004ae0:	78c9      	ldrb	r1, [r1, #3]
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	021b      	lsls	r3, r3, #8
 8004ae6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004aea:	431a      	orrs	r2, r3
 8004aec:	4b7b      	ldr	r3, [pc, #492]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	0619      	lsls	r1, r3, #24
 8004af2:	4b7a      	ldr	r3, [pc, #488]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004af4:	785b      	ldrb	r3, [r3, #1]
 8004af6:	041b      	lsls	r3, r3, #16
 8004af8:	4319      	orrs	r1, r3
 8004afa:	4b78      	ldr	r3, [pc, #480]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004afc:	789b      	ldrb	r3, [r3, #2]
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	430b      	orrs	r3, r1
 8004b02:	4976      	ldr	r1, [pc, #472]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004b04:	78c9      	ldrb	r1, [r1, #3]
 8004b06:	430b      	orrs	r3, r1
 8004b08:	0a1b      	lsrs	r3, r3, #8
 8004b0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b0e:	431a      	orrs	r2, r3
 8004b10:	4b72      	ldr	r3, [pc, #456]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	0619      	lsls	r1, r3, #24
 8004b16:	4b71      	ldr	r3, [pc, #452]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004b18:	785b      	ldrb	r3, [r3, #1]
 8004b1a:	041b      	lsls	r3, r3, #16
 8004b1c:	4319      	orrs	r1, r3
 8004b1e:	4b6f      	ldr	r3, [pc, #444]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004b20:	789b      	ldrb	r3, [r3, #2]
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	430b      	orrs	r3, r1
 8004b26:	496d      	ldr	r1, [pc, #436]	; (8004cdc <MX_LWIP_Init+0x288>)
 8004b28:	78c9      	ldrb	r1, [r1, #3]
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	0e1b      	lsrs	r3, r3, #24
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	4a6d      	ldr	r2, [pc, #436]	; (8004ce8 <MX_LWIP_Init+0x294>)
 8004b32:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004b34:	4b6a      	ldr	r3, [pc, #424]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	061a      	lsls	r2, r3, #24
 8004b3a:	4b69      	ldr	r3, [pc, #420]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b3c:	785b      	ldrb	r3, [r3, #1]
 8004b3e:	041b      	lsls	r3, r3, #16
 8004b40:	431a      	orrs	r2, r3
 8004b42:	4b67      	ldr	r3, [pc, #412]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b44:	789b      	ldrb	r3, [r3, #2]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	4a65      	ldr	r2, [pc, #404]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b4c:	78d2      	ldrb	r2, [r2, #3]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	061a      	lsls	r2, r3, #24
 8004b52:	4b63      	ldr	r3, [pc, #396]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	0619      	lsls	r1, r3, #24
 8004b58:	4b61      	ldr	r3, [pc, #388]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b5a:	785b      	ldrb	r3, [r3, #1]
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	4319      	orrs	r1, r3
 8004b60:	4b5f      	ldr	r3, [pc, #380]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b62:	789b      	ldrb	r3, [r3, #2]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	430b      	orrs	r3, r1
 8004b68:	495d      	ldr	r1, [pc, #372]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b6a:	78c9      	ldrb	r1, [r1, #3]
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b74:	431a      	orrs	r2, r3
 8004b76:	4b5a      	ldr	r3, [pc, #360]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	0619      	lsls	r1, r3, #24
 8004b7c:	4b58      	ldr	r3, [pc, #352]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b7e:	785b      	ldrb	r3, [r3, #1]
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	4319      	orrs	r1, r3
 8004b84:	4b56      	ldr	r3, [pc, #344]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b86:	789b      	ldrb	r3, [r3, #2]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	430b      	orrs	r3, r1
 8004b8c:	4954      	ldr	r1, [pc, #336]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b8e:	78c9      	ldrb	r1, [r1, #3]
 8004b90:	430b      	orrs	r3, r1
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	4b51      	ldr	r3, [pc, #324]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	0619      	lsls	r1, r3, #24
 8004ba0:	4b4f      	ldr	r3, [pc, #316]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004ba2:	785b      	ldrb	r3, [r3, #1]
 8004ba4:	041b      	lsls	r3, r3, #16
 8004ba6:	4319      	orrs	r1, r3
 8004ba8:	4b4d      	ldr	r3, [pc, #308]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004baa:	789b      	ldrb	r3, [r3, #2]
 8004bac:	021b      	lsls	r3, r3, #8
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	494b      	ldr	r1, [pc, #300]	; (8004ce0 <MX_LWIP_Init+0x28c>)
 8004bb2:	78c9      	ldrb	r1, [r1, #3]
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	0e1b      	lsrs	r3, r3, #24
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	4a4c      	ldr	r2, [pc, #304]	; (8004cec <MX_LWIP_Init+0x298>)
 8004bbc:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004bbe:	4b49      	ldr	r3, [pc, #292]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	061a      	lsls	r2, r3, #24
 8004bc4:	4b47      	ldr	r3, [pc, #284]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004bc6:	785b      	ldrb	r3, [r3, #1]
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	4b45      	ldr	r3, [pc, #276]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004bce:	789b      	ldrb	r3, [r3, #2]
 8004bd0:	021b      	lsls	r3, r3, #8
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	4a43      	ldr	r2, [pc, #268]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004bd6:	78d2      	ldrb	r2, [r2, #3]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	061a      	lsls	r2, r3, #24
 8004bdc:	4b41      	ldr	r3, [pc, #260]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	0619      	lsls	r1, r3, #24
 8004be2:	4b40      	ldr	r3, [pc, #256]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004be4:	785b      	ldrb	r3, [r3, #1]
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	4319      	orrs	r1, r3
 8004bea:	4b3e      	ldr	r3, [pc, #248]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004bec:	789b      	ldrb	r3, [r3, #2]
 8004bee:	021b      	lsls	r3, r3, #8
 8004bf0:	430b      	orrs	r3, r1
 8004bf2:	493c      	ldr	r1, [pc, #240]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004bf4:	78c9      	ldrb	r1, [r1, #3]
 8004bf6:	430b      	orrs	r3, r1
 8004bf8:	021b      	lsls	r3, r3, #8
 8004bfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	0619      	lsls	r1, r3, #24
 8004c06:	4b37      	ldr	r3, [pc, #220]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004c08:	785b      	ldrb	r3, [r3, #1]
 8004c0a:	041b      	lsls	r3, r3, #16
 8004c0c:	4319      	orrs	r1, r3
 8004c0e:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004c10:	789b      	ldrb	r3, [r3, #2]
 8004c12:	021b      	lsls	r3, r3, #8
 8004c14:	430b      	orrs	r3, r1
 8004c16:	4933      	ldr	r1, [pc, #204]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004c18:	78c9      	ldrb	r1, [r1, #3]
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	0a1b      	lsrs	r3, r3, #8
 8004c1e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004c22:	431a      	orrs	r2, r3
 8004c24:	4b2f      	ldr	r3, [pc, #188]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	0619      	lsls	r1, r3, #24
 8004c2a:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	041b      	lsls	r3, r3, #16
 8004c30:	4319      	orrs	r1, r3
 8004c32:	4b2c      	ldr	r3, [pc, #176]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004c34:	789b      	ldrb	r3, [r3, #2]
 8004c36:	021b      	lsls	r3, r3, #8
 8004c38:	430b      	orrs	r3, r1
 8004c3a:	492a      	ldr	r1, [pc, #168]	; (8004ce4 <MX_LWIP_Init+0x290>)
 8004c3c:	78c9      	ldrb	r1, [r1, #3]
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	0e1b      	lsrs	r3, r3, #24
 8004c42:	4313      	orrs	r3, r2
 8004c44:	4a2a      	ldr	r2, [pc, #168]	; (8004cf0 <MX_LWIP_Init+0x29c>)
 8004c46:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004c48:	4b2a      	ldr	r3, [pc, #168]	; (8004cf4 <MX_LWIP_Init+0x2a0>)
 8004c4a:	9302      	str	r3, [sp, #8]
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <MX_LWIP_Init+0x2a4>)
 8004c4e:	9301      	str	r3, [sp, #4]
 8004c50:	2300      	movs	r3, #0
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	4b26      	ldr	r3, [pc, #152]	; (8004cf0 <MX_LWIP_Init+0x29c>)
 8004c56:	4a25      	ldr	r2, [pc, #148]	; (8004cec <MX_LWIP_Init+0x298>)
 8004c58:	4923      	ldr	r1, [pc, #140]	; (8004ce8 <MX_LWIP_Init+0x294>)
 8004c5a:	4828      	ldr	r0, [pc, #160]	; (8004cfc <MX_LWIP_Init+0x2a8>)
 8004c5c:	f009 f9d8 	bl	800e010 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004c60:	4826      	ldr	r0, [pc, #152]	; (8004cfc <MX_LWIP_Init+0x2a8>)
 8004c62:	f009 fb87 	bl	800e374 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004c66:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <MX_LWIP_Init+0x2a8>)
 8004c68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c6c:	089b      	lsrs	r3, r3, #2
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004c78:	4820      	ldr	r0, [pc, #128]	; (8004cfc <MX_LWIP_Init+0x2a8>)
 8004c7a:	f009 fb8b 	bl	800e394 <netif_set_up>
 8004c7e:	e002      	b.n	8004c86 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004c80:	481e      	ldr	r0, [pc, #120]	; (8004cfc <MX_LWIP_Init+0x2a8>)
 8004c82:	f009 fbf3 	bl	800e46c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004c86:	491e      	ldr	r1, [pc, #120]	; (8004d00 <MX_LWIP_Init+0x2ac>)
 8004c88:	481c      	ldr	r0, [pc, #112]	; (8004cfc <MX_LWIP_Init+0x2a8>)
 8004c8a:	f009 fc85 	bl	800e598 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2101      	movs	r1, #1
 8004c92:	2001      	movs	r0, #1
 8004c94:	f000 fec7 	bl	8005a26 <osSemaphoreNew>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4a1a      	ldr	r2, [pc, #104]	; (8004d04 <MX_LWIP_Init+0x2b0>)
 8004c9c:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <MX_LWIP_Init+0x2b4>)
 8004ca0:	4a16      	ldr	r2, [pc, #88]	; (8004cfc <MX_LWIP_Init+0x2a8>)
 8004ca2:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004ca4:	4b17      	ldr	r3, [pc, #92]	; (8004d04 <MX_LWIP_Init+0x2b0>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a17      	ldr	r2, [pc, #92]	; (8004d08 <MX_LWIP_Init+0x2b4>)
 8004caa:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004cac:	2224      	movs	r2, #36	; 0x24
 8004cae:	2100      	movs	r1, #0
 8004cb0:	4816      	ldr	r0, [pc, #88]	; (8004d0c <MX_LWIP_Init+0x2b8>)
 8004cb2:	f013 fff9 	bl	8018ca8 <memset>
  attributes.name = "LinkThr";
 8004cb6:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <MX_LWIP_Init+0x2b8>)
 8004cb8:	4a15      	ldr	r2, [pc, #84]	; (8004d10 <MX_LWIP_Init+0x2bc>)
 8004cba:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004cbc:	4b13      	ldr	r3, [pc, #76]	; (8004d0c <MX_LWIP_Init+0x2b8>)
 8004cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cc2:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <MX_LWIP_Init+0x2b8>)
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8004cca:	4a10      	ldr	r2, [pc, #64]	; (8004d0c <MX_LWIP_Init+0x2b8>)
 8004ccc:	490e      	ldr	r1, [pc, #56]	; (8004d08 <MX_LWIP_Init+0x2b4>)
 8004cce:	4811      	ldr	r0, [pc, #68]	; (8004d14 <MX_LWIP_Init+0x2c0>)
 8004cd0:	f000 fcc1 	bl	8005656 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004cd4:	bf00      	nop
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20005314 	.word	0x20005314
 8004ce0:	20005310 	.word	0x20005310
 8004ce4:	200052b0 	.word	0x200052b0
 8004ce8:	2000530c 	.word	0x2000530c
 8004cec:	20005318 	.word	0x20005318
 8004cf0:	2000531c 	.word	0x2000531c
 8004cf4:	0800ce85 	.word	0x0800ce85
 8004cf8:	08005341 	.word	0x08005341
 8004cfc:	200052d8 	.word	0x200052d8
 8004d00:	08005425 	.word	0x08005425
 8004d04:	200000a0 	.word	0x200000a0
 8004d08:	200052a8 	.word	0x200052a8
 8004d0c:	200052b4 	.word	0x200052b4
 8004d10:	08019d98 	.word	0x08019d98
 8004d14:	080053ad 	.word	0x080053ad

08004d18 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b08e      	sub	sp, #56	; 0x38
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d24:	2200      	movs	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
 8004d28:	605a      	str	r2, [r3, #4]
 8004d2a:	609a      	str	r2, [r3, #8]
 8004d2c:	60da      	str	r2, [r3, #12]
 8004d2e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a4a      	ldr	r2, [pc, #296]	; (8004e60 <HAL_ETH_MspInit+0x148>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	f040 808d 	bne.w	8004e56 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	623b      	str	r3, [r7, #32]
 8004d40:	4b48      	ldr	r3, [pc, #288]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	4a47      	ldr	r2, [pc, #284]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4c:	4b45      	ldr	r3, [pc, #276]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d54:	623b      	str	r3, [r7, #32]
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61fb      	str	r3, [r7, #28]
 8004d5c:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d60:	4a40      	ldr	r2, [pc, #256]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d66:	6313      	str	r3, [r2, #48]	; 0x30
 8004d68:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d70:	61fb      	str	r3, [r7, #28]
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	2300      	movs	r3, #0
 8004d76:	61bb      	str	r3, [r7, #24]
 8004d78:	4b3a      	ldr	r3, [pc, #232]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7c:	4a39      	ldr	r2, [pc, #228]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d82:	6313      	str	r3, [r2, #48]	; 0x30
 8004d84:	4b37      	ldr	r3, [pc, #220]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	4b33      	ldr	r3, [pc, #204]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d98:	4a32      	ldr	r2, [pc, #200]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004d9a:	f043 0304 	orr.w	r3, r3, #4
 8004d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004da0:	4b30      	ldr	r3, [pc, #192]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dac:	2300      	movs	r3, #0
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db4:	4a2b      	ldr	r2, [pc, #172]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	6313      	str	r3, [r2, #48]	; 0x30
 8004dbc:	4b29      	ldr	r3, [pc, #164]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	4b25      	ldr	r3, [pc, #148]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	4a24      	ldr	r2, [pc, #144]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004dd2:	f043 0302 	orr.w	r3, r3, #2
 8004dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8004dd8:	4b22      	ldr	r3, [pc, #136]	; (8004e64 <HAL_ETH_MspInit+0x14c>)
 8004dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8004de4:	2332      	movs	r3, #50	; 0x32
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de8:	2302      	movs	r3, #2
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dec:	2301      	movs	r3, #1
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004df0:	2303      	movs	r3, #3
 8004df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004df4:	230b      	movs	r3, #11
 8004df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	481a      	ldr	r0, [pc, #104]	; (8004e68 <HAL_ETH_MspInit+0x150>)
 8004e00:	f7ff f838 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8004e04:	2386      	movs	r3, #134	; 0x86
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e10:	2303      	movs	r3, #3
 8004e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e14:	230b      	movs	r3, #11
 8004e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	4813      	ldr	r0, [pc, #76]	; (8004e6c <HAL_ETH_MspInit+0x154>)
 8004e20:	f7ff f828 	bl	8003e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8004e24:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e32:	2303      	movs	r3, #3
 8004e34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004e36:	230b      	movs	r3, #11
 8004e38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e3e:	4619      	mov	r1, r3
 8004e40:	480b      	ldr	r0, [pc, #44]	; (8004e70 <HAL_ETH_MspInit+0x158>)
 8004e42:	f7ff f817 	bl	8003e74 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004e46:	2200      	movs	r2, #0
 8004e48:	2105      	movs	r1, #5
 8004e4a:	203d      	movs	r0, #61	; 0x3d
 8004e4c:	f7fd fac5 	bl	80023da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8004e50:	203d      	movs	r0, #61	; 0x3d
 8004e52:	f7fd fade 	bl	8002412 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004e56:	bf00      	nop
 8004e58:	3738      	adds	r7, #56	; 0x38
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	40028000 	.word	0x40028000
 8004e64:	40023800 	.word	0x40023800
 8004e68:	40020800 	.word	0x40020800
 8004e6c:	40020000 	.word	0x40020000
 8004e70:	40020400 	.word	0x40020400

08004e74 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004e7c:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <HAL_ETH_RxCpltCallback+0x1c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 feab 	bl	8005bdc <osSemaphoreRelease>
}
 8004e86:	bf00      	nop
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	200000a4 	.word	0x200000a4

08004e94 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b090      	sub	sp, #64	; 0x40
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004ea0:	4b5d      	ldr	r3, [pc, #372]	; (8005018 <low_level_init+0x184>)
 8004ea2:	4a5e      	ldr	r2, [pc, #376]	; (800501c <low_level_init+0x188>)
 8004ea4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004ea6:	4b5c      	ldr	r3, [pc, #368]	; (8005018 <low_level_init+0x184>)
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004eac:	4b5a      	ldr	r3, [pc, #360]	; (8005018 <low_level_init+0x184>)
 8004eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004eb2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004eb4:	4b58      	ldr	r3, [pc, #352]	; (8005018 <low_level_init+0x184>)
 8004eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004eba:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004ebc:	4b56      	ldr	r3, [pc, #344]	; (8005018 <low_level_init+0x184>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004eca:	23e1      	movs	r3, #225	; 0xe1
 8004ecc:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004eda:	4a4f      	ldr	r2, [pc, #316]	; (8005018 <low_level_init+0x184>)
 8004edc:	f107 030c 	add.w	r3, r7, #12
 8004ee0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004ee2:	4b4d      	ldr	r3, [pc, #308]	; (8005018 <low_level_init+0x184>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004ee8:	4b4b      	ldr	r3, [pc, #300]	; (8005018 <low_level_init+0x184>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004eee:	4b4a      	ldr	r3, [pc, #296]	; (8005018 <low_level_init+0x184>)
 8004ef0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ef4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004ef6:	4848      	ldr	r0, [pc, #288]	; (8005018 <low_level_init+0x184>)
 8004ef8:	f7fd fe16 	bl	8002b28 <HAL_ETH_Init>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8004f02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d108      	bne.n	8004f1c <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f10:	f043 0304 	orr.w	r3, r3, #4
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004f1c:	2304      	movs	r3, #4
 8004f1e:	4a40      	ldr	r2, [pc, #256]	; (8005020 <low_level_init+0x18c>)
 8004f20:	4940      	ldr	r1, [pc, #256]	; (8005024 <low_level_init+0x190>)
 8004f22:	483d      	ldr	r0, [pc, #244]	; (8005018 <low_level_init+0x184>)
 8004f24:	f7fd ff9c 	bl	8002e60 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004f28:	2304      	movs	r3, #4
 8004f2a:	4a3f      	ldr	r2, [pc, #252]	; (8005028 <low_level_init+0x194>)
 8004f2c:	493f      	ldr	r1, [pc, #252]	; (800502c <low_level_init+0x198>)
 8004f2e:	483a      	ldr	r0, [pc, #232]	; (8005018 <low_level_init+0x184>)
 8004f30:	f7fd ffff 	bl	8002f32 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2206      	movs	r2, #6
 8004f38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004f3c:	4b36      	ldr	r3, [pc, #216]	; (8005018 <low_level_init+0x184>)
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	781a      	ldrb	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004f48:	4b33      	ldr	r3, [pc, #204]	; (8005018 <low_level_init+0x184>)
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	785a      	ldrb	r2, [r3, #1]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004f54:	4b30      	ldr	r3, [pc, #192]	; (8005018 <low_level_init+0x184>)
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	789a      	ldrb	r2, [r3, #2]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004f60:	4b2d      	ldr	r3, [pc, #180]	; (8005018 <low_level_init+0x184>)
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	78da      	ldrb	r2, [r3, #3]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004f6c:	4b2a      	ldr	r3, [pc, #168]	; (8005018 <low_level_init+0x184>)
 8004f6e:	695b      	ldr	r3, [r3, #20]
 8004f70:	791a      	ldrb	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004f78:	4b27      	ldr	r3, [pc, #156]	; (8005018 <low_level_init+0x184>)
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	795a      	ldrb	r2, [r3, #5]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004f8a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f92:	f043 030a 	orr.w	r3, r3, #10
 8004f96:	b2da      	uxtb	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	2001      	movs	r0, #1
 8004fa4:	f000 fd3f 	bl	8005a26 <osSemaphoreNew>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	4a21      	ldr	r2, [pc, #132]	; (8005030 <low_level_init+0x19c>)
 8004fac:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004fae:	f107 0314 	add.w	r3, r7, #20
 8004fb2:	2224      	movs	r2, #36	; 0x24
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f013 fe76 	bl	8018ca8 <memset>
  attributes.name = "EthIf";
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <low_level_init+0x1a0>)
 8004fbe:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004fc0:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8004fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8004fc6:	2330      	movs	r3, #48	; 0x30
 8004fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004fca:	f107 0314 	add.w	r3, r7, #20
 8004fce:	461a      	mov	r2, r3
 8004fd0:	6879      	ldr	r1, [r7, #4]
 8004fd2:	4819      	ldr	r0, [pc, #100]	; (8005038 <low_level_init+0x1a4>)
 8004fd4:	f000 fb3f 	bl	8005656 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004fd8:	480f      	ldr	r0, [pc, #60]	; (8005018 <low_level_init+0x184>)
 8004fda:	f7fe fad2 	bl	8003582 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004fde:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	211d      	movs	r1, #29
 8004fe6:	480c      	ldr	r0, [pc, #48]	; (8005018 <low_level_init+0x184>)
 8004fe8:	f7fe f9fd 	bl	80033e6 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	f043 030b 	orr.w	r3, r3, #11
 8004ff2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8004ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	211d      	movs	r1, #29
 8004ffa:	4807      	ldr	r0, [pc, #28]	; (8005018 <low_level_init+0x184>)
 8004ffc:	f7fe fa5b 	bl	80034b6 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8005000:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005004:	461a      	mov	r2, r3
 8005006:	211d      	movs	r1, #29
 8005008:	4803      	ldr	r0, [pc, #12]	; (8005018 <low_level_init+0x184>)
 800500a:	f7fe f9ec 	bl	80033e6 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800500e:	bf00      	nop
 8005010:	3740      	adds	r7, #64	; 0x40
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20006bf0 	.word	0x20006bf0
 800501c:	40028000 	.word	0x40028000
 8005020:	20006c38 	.word	0x20006c38
 8005024:	20005320 	.word	0x20005320
 8005028:	200053a0 	.word	0x200053a0
 800502c:	20006b70 	.word	0x20006b70
 8005030:	200000a4 	.word	0x200000a4
 8005034:	08019da0 	.word	0x08019da0
 8005038:	080052e1 	.word	0x080052e1

0800503c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8005046:	4b4b      	ldr	r3, [pc, #300]	; (8005174 <low_level_output+0x138>)
 8005048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800505a:	2300      	movs	r3, #0
 800505c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800505e:	4b45      	ldr	r3, [pc, #276]	; (8005174 <low_level_output+0x138>)
 8005060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005062:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8005064:	2300      	movs	r3, #0
 8005066:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	623b      	str	r3, [r7, #32]
 800506c:	e05a      	b.n	8005124 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	da03      	bge.n	800507e <low_level_output+0x42>
      {
        errval = ERR_USE;
 8005076:	23f8      	movs	r3, #248	; 0xf8
 8005078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800507c:	e05c      	b.n	8005138 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800507e:	6a3b      	ldr	r3, [r7, #32]
 8005080:	895b      	ldrh	r3, [r3, #10]
 8005082:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8005084:	2300      	movs	r3, #0
 8005086:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8005088:	e02f      	b.n	80050ea <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	18d0      	adds	r0, r2, r3
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	18d1      	adds	r1, r2, r3
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800509e:	3304      	adds	r3, #4
 80050a0:	461a      	mov	r2, r3
 80050a2:	f013 fdf3 	bl	8018c8c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	da03      	bge.n	80050bc <low_level_output+0x80>
        {
          errval = ERR_USE;
 80050b4:	23f8      	movs	r3, #248	; 0xf8
 80050b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80050ba:	e03d      	b.n	8005138 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4413      	add	r3, r2
 80050c8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80050cc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80050d8:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80050e4:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80050e6:	2300      	movs	r3, #0
 80050e8:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d8c8      	bhi.n	800508a <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	18d0      	adds	r0, r2, r3
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	4413      	add	r3, r2
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	4619      	mov	r1, r3
 800510a:	f013 fdbf 	bl	8018c8c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800510e:	693a      	ldr	r2, [r7, #16]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	4413      	add	r3, r2
 800511c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	623b      	str	r3, [r7, #32]
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1a1      	bne.n	800506e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800512a:	6979      	ldr	r1, [r7, #20]
 800512c:	4811      	ldr	r0, [pc, #68]	; (8005174 <low_level_output+0x138>)
 800512e:	f7fd ff6d 	bl	800300c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8005138:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <low_level_output+0x138>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005140:	3314      	adds	r3, #20
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 0320 	and.w	r3, r3, #32
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00d      	beq.n	8005168 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800514c:	4b09      	ldr	r3, [pc, #36]	; (8005174 <low_level_output+0x138>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005154:	3314      	adds	r3, #20
 8005156:	2220      	movs	r2, #32
 8005158:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800515a:	4b06      	ldr	r3, [pc, #24]	; (8005174 <low_level_output+0x138>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005162:	3304      	adds	r3, #4
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8005168:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800516c:	4618      	mov	r0, r3
 800516e:	3728      	adds	r7, #40	; 0x28
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	20006bf0 	.word	0x20006bf0

08005178 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08c      	sub	sp, #48	; 0x30
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005180:	2300      	movs	r3, #0
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8005184:	2300      	movs	r3, #0
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8005198:	2300      	movs	r3, #0
 800519a:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800519c:	484f      	ldr	r0, [pc, #316]	; (80052dc <low_level_input+0x164>)
 800519e:	f7fe f81f 	bl	80031e0 <HAL_ETH_GetReceivedFrame_IT>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <low_level_input+0x34>

    return NULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	e092      	b.n	80052d2 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80051ac:	4b4b      	ldr	r3, [pc, #300]	; (80052dc <low_level_input+0x164>)
 80051ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80051b2:	4b4a      	ldr	r3, [pc, #296]	; (80052dc <low_level_input+0x164>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80051b8:	89fb      	ldrh	r3, [r7, #14]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d007      	beq.n	80051ce <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80051be:	89fb      	ldrh	r3, [r7, #14]
 80051c0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80051c4:	4619      	mov	r1, r3
 80051c6:	2000      	movs	r0, #0
 80051c8:	f009 fab0 	bl	800e72c <pbuf_alloc>
 80051cc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d04b      	beq.n	800526c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80051d4:	4b41      	ldr	r3, [pc, #260]	; (80052dc <low_level_input+0x164>)
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80051de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80051e2:	e040      	b.n	8005266 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	895b      	ldrh	r3, [r3, #10]
 80051e8:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80051ee:	e021      	b.n	8005234 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	18d0      	adds	r0, r2, r3
 80051f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	18d1      	adds	r1, r2, r3
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8005204:	3304      	adds	r3, #4
 8005206:	461a      	mov	r2, r3
 8005208:	f013 fd40 	bl	8018c8c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	4413      	add	r3, r2
 800521e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8005222:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800522e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8005230:	2300      	movs	r3, #0
 8005232:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800523e:	4293      	cmp	r3, r2
 8005240:	d8d6      	bhi.n	80051f0 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	18d0      	adds	r0, r2, r3
 800524a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	4413      	add	r3, r2
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4619      	mov	r1, r3
 8005254:	f013 fd1a 	bl	8018c8c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	4413      	add	r3, r2
 800525e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	62bb      	str	r3, [r7, #40]	; 0x28
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1bb      	bne.n	80051e4 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <low_level_input+0x164>)
 800526e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005270:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e00b      	b.n	8005290 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	68db      	ldr	r3, [r3, #12]
 8005288:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	3301      	adds	r3, #1
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	4b12      	ldr	r3, [pc, #72]	; (80052dc <low_level_input+0x164>)
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	429a      	cmp	r2, r3
 8005298:	d3ee      	bcc.n	8005278 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800529a:	4b10      	ldr	r3, [pc, #64]	; (80052dc <low_level_input+0x164>)
 800529c:	2200      	movs	r2, #0
 800529e:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80052a0:	4b0e      	ldr	r3, [pc, #56]	; (80052dc <low_level_input+0x164>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052a8:	3314      	adds	r3, #20
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80052b4:	4b09      	ldr	r3, [pc, #36]	; (80052dc <low_level_input+0x164>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052bc:	3314      	adds	r3, #20
 80052be:	2280      	movs	r2, #128	; 0x80
 80052c0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80052c2:	4b06      	ldr	r3, [pc, #24]	; (80052dc <low_level_input+0x164>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052ca:	3308      	adds	r3, #8
 80052cc:	2200      	movs	r2, #0
 80052ce:	601a      	str	r2, [r3, #0]
  }
  return p;
 80052d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3730      	adds	r7, #48	; 0x30
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20006bf0 	.word	0x20006bf0

080052e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80052ec:	4b12      	ldr	r3, [pc, #72]	; (8005338 <ethernetif_input+0x58>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f04f 31ff 	mov.w	r1, #4294967295
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fc1f 	bl	8005b38 <osSemaphoreAcquire>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f5      	bne.n	80052ec <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8005300:	480e      	ldr	r0, [pc, #56]	; (800533c <ethernetif_input+0x5c>)
 8005302:	f013 fc2f 	bl	8018b64 <sys_mutex_lock>
        p = low_level_input( netif );
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7ff ff36 	bl	8005178 <low_level_input>
 800530c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	68f9      	ldr	r1, [r7, #12]
 800531a:	68b8      	ldr	r0, [r7, #8]
 800531c:	4798      	blx	r3
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8005324:	68b8      	ldr	r0, [r7, #8]
 8005326:	f009 fd17 	bl	800ed58 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800532a:	4804      	ldr	r0, [pc, #16]	; (800533c <ethernetif_input+0x5c>)
 800532c:	f013 fc29 	bl	8018b82 <sys_mutex_unlock>
      } while(p!=NULL);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e4      	bne.n	8005300 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005336:	e7d9      	b.n	80052ec <ethernetif_input+0xc>
 8005338:	200000a4 	.word	0x200000a4
 800533c:	20008448 	.word	0x20008448

08005340 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <ethernetif_init+0x1c>
 800534e:	4b0e      	ldr	r3, [pc, #56]	; (8005388 <ethernetif_init+0x48>)
 8005350:	f44f 720c 	mov.w	r2, #560	; 0x230
 8005354:	490d      	ldr	r1, [pc, #52]	; (800538c <ethernetif_init+0x4c>)
 8005356:	480e      	ldr	r0, [pc, #56]	; (8005390 <ethernetif_init+0x50>)
 8005358:	f013 fd58 	bl	8018e0c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2273      	movs	r2, #115	; 0x73
 8005360:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2274      	movs	r2, #116	; 0x74
 8005368:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a09      	ldr	r2, [pc, #36]	; (8005394 <ethernetif_init+0x54>)
 8005370:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a08      	ldr	r2, [pc, #32]	; (8005398 <ethernetif_init+0x58>)
 8005376:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fd8b 	bl	8004e94 <low_level_init>

  return ERR_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	08019da8 	.word	0x08019da8
 800538c:	08019dc4 	.word	0x08019dc4
 8005390:	08019dd4 	.word	0x08019dd4
 8005394:	08016bc5 	.word	0x08016bc5
 8005398:	0800503d 	.word	0x0800503d

0800539c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80053a0:	f7fc fafe 	bl	80019a0 <HAL_GetTick>
 80053a4:	4603      	mov	r3, r0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80053bc:	f107 0308 	add.w	r3, r7, #8
 80053c0:	461a      	mov	r2, r3
 80053c2:	2101      	movs	r1, #1
 80053c4:	4816      	ldr	r0, [pc, #88]	; (8005420 <ethernetif_set_link+0x74>)
 80053c6:	f7fe f80e 	bl	80033e6 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d108      	bne.n	80053f4 <ethernetif_set_link+0x48>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4618      	mov	r0, r3
 80053ee:	f009 f86f 	bl	800e4d0 <netif_set_link_up>
 80053f2:	e011      	b.n	8005418 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80053fc:	089b      	lsrs	r3, r3, #2
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <ethernetif_set_link+0x6c>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f009 f890 	bl	800e538 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8005418:	20c8      	movs	r0, #200	; 0xc8
 800541a:	f000 f9db 	bl	80057d4 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800541e:	e7cd      	b.n	80053bc <ethernetif_set_link+0x10>
 8005420:	20006bf0 	.word	0x20006bf0

08005424 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8005430:	2300      	movs	r3, #0
 8005432:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800543a:	089b      	lsrs	r3, r3, #2
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d05d      	beq.n	8005502 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8005446:	4b34      	ldr	r3, [pc, #208]	; (8005518 <ethernetif_update_config+0xf4>)
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d03f      	beq.n	80054ce <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800544e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005452:	2100      	movs	r1, #0
 8005454:	4830      	ldr	r0, [pc, #192]	; (8005518 <ethernetif_update_config+0xf4>)
 8005456:	f7fe f82e 	bl	80034b6 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800545a:	f7fc faa1 	bl	80019a0 <HAL_GetTick>
 800545e:	4603      	mov	r3, r0
 8005460:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8005462:	f107 0308 	add.w	r3, r7, #8
 8005466:	461a      	mov	r2, r3
 8005468:	2101      	movs	r1, #1
 800546a:	482b      	ldr	r0, [pc, #172]	; (8005518 <ethernetif_update_config+0xf4>)
 800546c:	f7fd ffbb 	bl	80033e6 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8005470:	f7fc fa96 	bl	80019a0 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800547e:	d828      	bhi.n	80054d2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0eb      	beq.n	8005462 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800548a:	f107 0308 	add.w	r3, r7, #8
 800548e:	461a      	mov	r2, r3
 8005490:	2110      	movs	r1, #16
 8005492:	4821      	ldr	r0, [pc, #132]	; (8005518 <ethernetif_update_config+0xf4>)
 8005494:	f7fd ffa7 	bl	80033e6 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0304 	and.w	r3, r3, #4
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80054a2:	4b1d      	ldr	r3, [pc, #116]	; (8005518 <ethernetif_update_config+0xf4>)
 80054a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054a8:	60da      	str	r2, [r3, #12]
 80054aa:	e002      	b.n	80054b2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80054ac:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <ethernetif_update_config+0xf4>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80054bc:	4b16      	ldr	r3, [pc, #88]	; (8005518 <ethernetif_update_config+0xf4>)
 80054be:	2200      	movs	r2, #0
 80054c0:	609a      	str	r2, [r3, #8]
 80054c2:	e016      	b.n	80054f2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80054c4:	4b14      	ldr	r3, [pc, #80]	; (8005518 <ethernetif_update_config+0xf4>)
 80054c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	e011      	b.n	80054f2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80054ce:	bf00      	nop
 80054d0:	e000      	b.n	80054d4 <ethernetif_update_config+0xb0>
          goto error;
 80054d2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80054d4:	4b10      	ldr	r3, [pc, #64]	; (8005518 <ethernetif_update_config+0xf4>)
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	08db      	lsrs	r3, r3, #3
 80054da:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80054dc:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <ethernetif_update_config+0xf4>)
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80054e4:	4313      	orrs	r3, r2
 80054e6:	b29b      	uxth	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	2100      	movs	r1, #0
 80054ec:	480a      	ldr	r0, [pc, #40]	; (8005518 <ethernetif_update_config+0xf4>)
 80054ee:	f7fd ffe2 	bl	80034b6 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80054f2:	2100      	movs	r1, #0
 80054f4:	4808      	ldr	r0, [pc, #32]	; (8005518 <ethernetif_update_config+0xf4>)
 80054f6:	f7fe f8a3 	bl	8003640 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80054fa:	4807      	ldr	r0, [pc, #28]	; (8005518 <ethernetif_update_config+0xf4>)
 80054fc:	f7fe f841 	bl	8003582 <HAL_ETH_Start>
 8005500:	e002      	b.n	8005508 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8005502:	4805      	ldr	r0, [pc, #20]	; (8005518 <ethernetif_update_config+0xf4>)
 8005504:	f7fe f86c 	bl	80035e0 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f807 	bl	800551c <ethernetif_notify_conn_changed>
}
 800550e:	bf00      	nop
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20006bf0 	.word	0x20006bf0

0800551c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <__NVIC_SetPriority>:
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	6039      	str	r1, [r7, #0]
 800553a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800553c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005540:	2b00      	cmp	r3, #0
 8005542:	db0a      	blt.n	800555a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	b2da      	uxtb	r2, r3
 8005548:	490c      	ldr	r1, [pc, #48]	; (800557c <__NVIC_SetPriority+0x4c>)
 800554a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800554e:	0112      	lsls	r2, r2, #4
 8005550:	b2d2      	uxtb	r2, r2
 8005552:	440b      	add	r3, r1
 8005554:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005558:	e00a      	b.n	8005570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	b2da      	uxtb	r2, r3
 800555e:	4908      	ldr	r1, [pc, #32]	; (8005580 <__NVIC_SetPriority+0x50>)
 8005560:	79fb      	ldrb	r3, [r7, #7]
 8005562:	f003 030f 	and.w	r3, r3, #15
 8005566:	3b04      	subs	r3, #4
 8005568:	0112      	lsls	r2, r2, #4
 800556a:	b2d2      	uxtb	r2, r2
 800556c:	440b      	add	r3, r1
 800556e:	761a      	strb	r2, [r3, #24]
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	e000e100 	.word	0xe000e100
 8005580:	e000ed00 	.word	0xe000ed00

08005584 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005584:	b580      	push	{r7, lr}
 8005586:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005588:	2100      	movs	r1, #0
 800558a:	f06f 0004 	mvn.w	r0, #4
 800558e:	f7ff ffcf 	bl	8005530 <__NVIC_SetPriority>
#endif
}
 8005592:	bf00      	nop
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800559e:	f3ef 8305 	mrs	r3, IPSR
 80055a2:	603b      	str	r3, [r7, #0]
  return(result);
 80055a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d003      	beq.n	80055b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80055aa:	f06f 0305 	mvn.w	r3, #5
 80055ae:	607b      	str	r3, [r7, #4]
 80055b0:	e00c      	b.n	80055cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80055b2:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <osKernelInitialize+0x44>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80055ba:	4b08      	ldr	r3, [pc, #32]	; (80055dc <osKernelInitialize+0x44>)
 80055bc:	2201      	movs	r2, #1
 80055be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	607b      	str	r3, [r7, #4]
 80055c4:	e002      	b.n	80055cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055c6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055cc:	687b      	ldr	r3, [r7, #4]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	200000a8 	.word	0x200000a8

080055e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b082      	sub	sp, #8
 80055e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e6:	f3ef 8305 	mrs	r3, IPSR
 80055ea:	603b      	str	r3, [r7, #0]
  return(result);
 80055ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80055f2:	f06f 0305 	mvn.w	r3, #5
 80055f6:	607b      	str	r3, [r7, #4]
 80055f8:	e010      	b.n	800561c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80055fa:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <osKernelStart+0x48>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d109      	bne.n	8005616 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005602:	f7ff ffbf 	bl	8005584 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005606:	4b08      	ldr	r3, [pc, #32]	; (8005628 <osKernelStart+0x48>)
 8005608:	2202      	movs	r2, #2
 800560a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800560c:	f002 f95a 	bl	80078c4 <vTaskStartScheduler>
      stat = osOK;
 8005610:	2300      	movs	r3, #0
 8005612:	607b      	str	r3, [r7, #4]
 8005614:	e002      	b.n	800561c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005616:	f04f 33ff 	mov.w	r3, #4294967295
 800561a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800561c:	687b      	ldr	r3, [r7, #4]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	200000a8 	.word	0x200000a8

0800562c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005632:	f3ef 8305 	mrs	r3, IPSR
 8005636:	603b      	str	r3, [r7, #0]
  return(result);
 8005638:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800563e:	f002 fa63 	bl	8007b08 <xTaskGetTickCountFromISR>
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	e002      	b.n	800564c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8005646:	f002 fa4f 	bl	8007ae8 <xTaskGetTickCount>
 800564a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800564c:	687b      	ldr	r3, [r7, #4]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005656:	b580      	push	{r7, lr}
 8005658:	b08e      	sub	sp, #56	; 0x38
 800565a:	af04      	add	r7, sp, #16
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005666:	f3ef 8305 	mrs	r3, IPSR
 800566a:	617b      	str	r3, [r7, #20]
  return(result);
 800566c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800566e:	2b00      	cmp	r3, #0
 8005670:	d17e      	bne.n	8005770 <osThreadNew+0x11a>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d07b      	beq.n	8005770 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005678:	2380      	movs	r3, #128	; 0x80
 800567a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800567c:	2318      	movs	r3, #24
 800567e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005680:	2300      	movs	r3, #0
 8005682:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005684:	f04f 33ff 	mov.w	r3, #4294967295
 8005688:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d045      	beq.n	800571c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <osThreadNew+0x48>
        name = attr->name;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d008      	beq.n	80056c4 <osThreadNew+0x6e>
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	2b38      	cmp	r3, #56	; 0x38
 80056b6:	d805      	bhi.n	80056c4 <osThreadNew+0x6e>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f003 0301 	and.w	r3, r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <osThreadNew+0x72>
        return (NULL);
 80056c4:	2300      	movs	r3, #0
 80056c6:	e054      	b.n	8005772 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	695b      	ldr	r3, [r3, #20]
 80056d4:	089b      	lsrs	r3, r3, #2
 80056d6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00e      	beq.n	80056fe <osThreadNew+0xa8>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	2b5b      	cmp	r3, #91	; 0x5b
 80056e6:	d90a      	bls.n	80056fe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d006      	beq.n	80056fe <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <osThreadNew+0xa8>
        mem = 1;
 80056f8:	2301      	movs	r3, #1
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e010      	b.n	8005720 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10c      	bne.n	8005720 <osThreadNew+0xca>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d108      	bne.n	8005720 <osThreadNew+0xca>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <osThreadNew+0xca>
          mem = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
 800571a:	e001      	b.n	8005720 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d110      	bne.n	8005748 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800572e:	9202      	str	r2, [sp, #8]
 8005730:	9301      	str	r3, [sp, #4]
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	6a3a      	ldr	r2, [r7, #32]
 800573a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f001 fe13 	bl	8007368 <xTaskCreateStatic>
 8005742:	4603      	mov	r3, r0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	e013      	b.n	8005770 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005748:	69bb      	ldr	r3, [r7, #24]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d110      	bne.n	8005770 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	b29a      	uxth	r2, r3
 8005752:	f107 0310 	add.w	r3, r7, #16
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f001 fe5e 	bl	8007422 <xTaskCreate>
 8005766:	4603      	mov	r3, r0
 8005768:	2b01      	cmp	r3, #1
 800576a:	d001      	beq.n	8005770 <osThreadNew+0x11a>
            hTask = NULL;
 800576c:	2300      	movs	r3, #0
 800576e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005770:	693b      	ldr	r3, [r7, #16]
}
 8005772:	4618      	mov	r0, r3
 8005774:	3728      	adds	r7, #40	; 0x28
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 800577a:	b580      	push	{r7, lr}
 800577c:	b086      	sub	sp, #24
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005786:	f3ef 8305 	mrs	r3, IPSR
 800578a:	60bb      	str	r3, [r7, #8]
  return(result);
 800578c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 800578e:	2b00      	cmp	r3, #0
 8005790:	d003      	beq.n	800579a <osThreadTerminate+0x20>
    stat = osErrorISR;
 8005792:	f06f 0305 	mvn.w	r3, #5
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	e017      	b.n	80057ca <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d103      	bne.n	80057a8 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 80057a0:	f06f 0303 	mvn.w	r3, #3
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e010      	b.n	80057ca <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 80057a8:	6938      	ldr	r0, [r7, #16]
 80057aa:	f002 f825 	bl	80077f8 <eTaskGetState>
 80057ae:	4603      	mov	r3, r0
 80057b0:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d005      	beq.n	80057c4 <osThreadTerminate+0x4a>
      stat = osOK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 80057bc:	6938      	ldr	r0, [r7, #16]
 80057be:	f001 ff75 	bl	80076ac <vTaskDelete>
 80057c2:	e002      	b.n	80057ca <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 80057c4:	f06f 0302 	mvn.w	r3, #2
 80057c8:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 80057ca:	697b      	ldr	r3, [r7, #20]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3718      	adds	r7, #24
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057dc:	f3ef 8305 	mrs	r3, IPSR
 80057e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80057e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <osDelay+0x1c>
    stat = osErrorISR;
 80057e8:	f06f 0305 	mvn.w	r3, #5
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	e007      	b.n	8005800 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d002      	beq.n	8005800 <osDelay+0x2c>
      vTaskDelay(ticks);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f001 ffc8 	bl	8007790 <vTaskDelay>
    }
  }

  return (stat);
 8005800:	68fb      	ldr	r3, [r7, #12]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800580a:	b580      	push	{r7, lr}
 800580c:	b088      	sub	sp, #32
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005816:	f3ef 8305 	mrs	r3, IPSR
 800581a:	60bb      	str	r3, [r7, #8]
  return(result);
 800581c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800581e:	2b00      	cmp	r3, #0
 8005820:	d174      	bne.n	800590c <osMutexNew+0x102>
    if (attr != NULL) {
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	e001      	b.n	8005834 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <osMutexNew+0x3a>
      rmtx = 1U;
 800583e:	2301      	movs	r3, #1
 8005840:	617b      	str	r3, [r7, #20]
 8005842:	e001      	b.n	8005848 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005844:	2300      	movs	r3, #0
 8005846:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d15c      	bne.n	800590c <osMutexNew+0x102>
      mem = -1;
 8005852:	f04f 33ff 	mov.w	r3, #4294967295
 8005856:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d015      	beq.n	800588a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d006      	beq.n	8005874 <osMutexNew+0x6a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	2b4f      	cmp	r3, #79	; 0x4f
 800586c:	d902      	bls.n	8005874 <osMutexNew+0x6a>
          mem = 1;
 800586e:	2301      	movs	r3, #1
 8005870:	613b      	str	r3, [r7, #16]
 8005872:	e00c      	b.n	800588e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d108      	bne.n	800588e <osMutexNew+0x84>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <osMutexNew+0x84>
            mem = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	e001      	b.n	800588e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d112      	bne.n	80058ba <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d007      	beq.n	80058aa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	4619      	mov	r1, r3
 80058a0:	2004      	movs	r0, #4
 80058a2:	f000 fdd0 	bl	8006446 <xQueueCreateMutexStatic>
 80058a6:	61f8      	str	r0, [r7, #28]
 80058a8:	e016      	b.n	80058d8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	4619      	mov	r1, r3
 80058b0:	2001      	movs	r0, #1
 80058b2:	f000 fdc8 	bl	8006446 <xQueueCreateMutexStatic>
 80058b6:	61f8      	str	r0, [r7, #28]
 80058b8:	e00e      	b.n	80058d8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80058c6:	2004      	movs	r0, #4
 80058c8:	f000 fda5 	bl	8006416 <xQueueCreateMutex>
 80058cc:	61f8      	str	r0, [r7, #28]
 80058ce:	e003      	b.n	80058d8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80058d0:	2001      	movs	r0, #1
 80058d2:	f000 fda0 	bl	8006416 <xQueueCreateMutex>
 80058d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00c      	beq.n	80058f8 <osMutexNew+0xee>
        if (attr != NULL) {
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <osMutexNew+0xe2>
          name = attr->name;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	e001      	b.n	80058f0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80058f0:	68f9      	ldr	r1, [r7, #12]
 80058f2:	69f8      	ldr	r0, [r7, #28]
 80058f4:	f001 fcb0 	bl	8007258 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d006      	beq.n	800590c <osMutexNew+0x102>
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f043 0301 	orr.w	r3, r3, #1
 800590a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800590c:	69fb      	ldr	r3, [r7, #28]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005916:	b580      	push	{r7, lr}
 8005918:	b086      	sub	sp, #24
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005930:	2300      	movs	r3, #0
 8005932:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005934:	f3ef 8305 	mrs	r3, IPSR
 8005938:	60bb      	str	r3, [r7, #8]
  return(result);
 800593a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005940:	f06f 0305 	mvn.w	r3, #5
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e02c      	b.n	80059a2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d103      	bne.n	8005956 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800594e:	f06f 0303 	mvn.w	r3, #3
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	e025      	b.n	80059a2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d011      	beq.n	8005980 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800595c:	6839      	ldr	r1, [r7, #0]
 800595e:	6938      	ldr	r0, [r7, #16]
 8005960:	f000 fdc0 	bl	80064e4 <xQueueTakeMutexRecursive>
 8005964:	4603      	mov	r3, r0
 8005966:	2b01      	cmp	r3, #1
 8005968:	d01b      	beq.n	80059a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005970:	f06f 0301 	mvn.w	r3, #1
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	e014      	b.n	80059a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005978:	f06f 0302 	mvn.w	r3, #2
 800597c:	617b      	str	r3, [r7, #20]
 800597e:	e010      	b.n	80059a2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6938      	ldr	r0, [r7, #16]
 8005984:	f001 f954 	bl	8006c30 <xQueueSemaphoreTake>
 8005988:	4603      	mov	r3, r0
 800598a:	2b01      	cmp	r3, #1
 800598c:	d009      	beq.n	80059a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d003      	beq.n	800599c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005994:	f06f 0301 	mvn.w	r3, #1
 8005998:	617b      	str	r3, [r7, #20]
 800599a:	e002      	b.n	80059a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800599c:	f06f 0302 	mvn.w	r3, #2
 80059a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80059a2:	697b      	ldr	r3, [r7, #20]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3718      	adds	r7, #24
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b086      	sub	sp, #24
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f003 0301 	and.w	r3, r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c8:	f3ef 8305 	mrs	r3, IPSR
 80059cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80059ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <osMutexRelease+0x30>
    stat = osErrorISR;
 80059d4:	f06f 0305 	mvn.w	r3, #5
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	e01f      	b.n	8005a1c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80059e2:	f06f 0303 	mvn.w	r3, #3
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e018      	b.n	8005a1c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d009      	beq.n	8005a04 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80059f0:	6938      	ldr	r0, [r7, #16]
 80059f2:	f000 fd43 	bl	800647c <xQueueGiveMutexRecursive>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d00f      	beq.n	8005a1c <osMutexRelease+0x70>
        stat = osErrorResource;
 80059fc:	f06f 0302 	mvn.w	r3, #2
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	e00b      	b.n	8005a1c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005a04:	2300      	movs	r3, #0
 8005a06:	2200      	movs	r2, #0
 8005a08:	2100      	movs	r1, #0
 8005a0a:	6938      	ldr	r0, [r7, #16]
 8005a0c:	f000 fe0a 	bl	8006624 <xQueueGenericSend>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d002      	beq.n	8005a1c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005a16:	f06f 0302 	mvn.w	r3, #2
 8005a1a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005a1c:	697b      	ldr	r3, [r7, #20]
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3718      	adds	r7, #24
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b08a      	sub	sp, #40	; 0x28
 8005a2a:	af02      	add	r7, sp, #8
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a36:	f3ef 8305 	mrs	r3, IPSR
 8005a3a:	613b      	str	r3, [r7, #16]
  return(result);
 8005a3c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d175      	bne.n	8005b2e <osSemaphoreNew+0x108>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d072      	beq.n	8005b2e <osSemaphoreNew+0x108>
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d86e      	bhi.n	8005b2e <osSemaphoreNew+0x108>
    mem = -1;
 8005a50:	f04f 33ff 	mov.w	r3, #4294967295
 8005a54:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d015      	beq.n	8005a88 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <osSemaphoreNew+0x4c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b4f      	cmp	r3, #79	; 0x4f
 8005a6a:	d902      	bls.n	8005a72 <osSemaphoreNew+0x4c>
        mem = 1;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	61bb      	str	r3, [r7, #24]
 8005a70:	e00c      	b.n	8005a8c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d108      	bne.n	8005a8c <osSemaphoreNew+0x66>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d104      	bne.n	8005a8c <osSemaphoreNew+0x66>
          mem = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	61bb      	str	r3, [r7, #24]
 8005a86:	e001      	b.n	8005a8c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d04c      	beq.n	8005b2e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d128      	bne.n	8005aec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d10a      	bne.n	8005ab6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2203      	movs	r2, #3
 8005aa6:	9200      	str	r2, [sp, #0]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2100      	movs	r1, #0
 8005aac:	2001      	movs	r0, #1
 8005aae:	f000 fbc3 	bl	8006238 <xQueueGenericCreateStatic>
 8005ab2:	61f8      	str	r0, [r7, #28]
 8005ab4:	e005      	b.n	8005ac2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	2100      	movs	r1, #0
 8005aba:	2001      	movs	r0, #1
 8005abc:	f000 fc34 	bl	8006328 <xQueueGenericCreate>
 8005ac0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d022      	beq.n	8005b0e <osSemaphoreNew+0xe8>
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d01f      	beq.n	8005b0e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	69f8      	ldr	r0, [r7, #28]
 8005ad6:	f000 fda5 	bl	8006624 <xQueueGenericSend>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d016      	beq.n	8005b0e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005ae0:	69f8      	ldr	r0, [r7, #28]
 8005ae2:	f001 fa6d 	bl	8006fc0 <vQueueDelete>
            hSemaphore = NULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	e010      	b.n	8005b0e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d108      	bne.n	8005b04 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	461a      	mov	r2, r3
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 fd28 	bl	8006550 <xQueueCreateCountingSemaphoreStatic>
 8005b00:	61f8      	str	r0, [r7, #28]
 8005b02:	e004      	b.n	8005b0e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fd59 	bl	80065be <xQueueCreateCountingSemaphore>
 8005b0c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00c      	beq.n	8005b2e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	617b      	str	r3, [r7, #20]
 8005b20:	e001      	b.n	8005b26 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005b22:	2300      	movs	r3, #0
 8005b24:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005b26:	6979      	ldr	r1, [r7, #20]
 8005b28:	69f8      	ldr	r0, [r7, #28]
 8005b2a:	f001 fb95 	bl	8007258 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005b2e:	69fb      	ldr	r3, [r7, #28]
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3720      	adds	r7, #32
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d103      	bne.n	8005b58 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005b50:	f06f 0303 	mvn.w	r3, #3
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	e039      	b.n	8005bcc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b58:	f3ef 8305 	mrs	r3, IPSR
 8005b5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d022      	beq.n	8005baa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005b6a:	f06f 0303 	mvn.w	r3, #3
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e02c      	b.n	8005bcc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005b76:	f107 0308 	add.w	r3, r7, #8
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	6938      	ldr	r0, [r7, #16]
 8005b80:	f001 f962 	bl	8006e48 <xQueueReceiveFromISR>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d003      	beq.n	8005b92 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005b8a:	f06f 0302 	mvn.w	r3, #2
 8005b8e:	617b      	str	r3, [r7, #20]
 8005b90:	e01c      	b.n	8005bcc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d019      	beq.n	8005bcc <osSemaphoreAcquire+0x94>
 8005b98:	4b0f      	ldr	r3, [pc, #60]	; (8005bd8 <osSemaphoreAcquire+0xa0>)
 8005b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b9e:	601a      	str	r2, [r3, #0]
 8005ba0:	f3bf 8f4f 	dsb	sy
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	e010      	b.n	8005bcc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005baa:	6839      	ldr	r1, [r7, #0]
 8005bac:	6938      	ldr	r0, [r7, #16]
 8005bae:	f001 f83f 	bl	8006c30 <xQueueSemaphoreTake>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d009      	beq.n	8005bcc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005bbe:	f06f 0301 	mvn.w	r3, #1
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	e002      	b.n	8005bcc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005bc6:	f06f 0302 	mvn.w	r3, #2
 8005bca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005bcc:	697b      	ldr	r3, [r7, #20]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	e000ed04 	.word	0xe000ed04

08005bdc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b086      	sub	sp, #24
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005bf2:	f06f 0303 	mvn.w	r3, #3
 8005bf6:	617b      	str	r3, [r7, #20]
 8005bf8:	e02c      	b.n	8005c54 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bfa:	f3ef 8305 	mrs	r3, IPSR
 8005bfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c00:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d01a      	beq.n	8005c3c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005c0a:	f107 0308 	add.w	r3, r7, #8
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6938      	ldr	r0, [r7, #16]
 8005c12:	f000 fea0 	bl	8006956 <xQueueGiveFromISR>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d003      	beq.n	8005c24 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005c1c:	f06f 0302 	mvn.w	r3, #2
 8005c20:	617b      	str	r3, [r7, #20]
 8005c22:	e017      	b.n	8005c54 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d014      	beq.n	8005c54 <osSemaphoreRelease+0x78>
 8005c2a:	4b0d      	ldr	r3, [pc, #52]	; (8005c60 <osSemaphoreRelease+0x84>)
 8005c2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	e00b      	b.n	8005c54 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2200      	movs	r2, #0
 8005c40:	2100      	movs	r1, #0
 8005c42:	6938      	ldr	r0, [r7, #16]
 8005c44:	f000 fcee 	bl	8006624 <xQueueGenericSend>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d002      	beq.n	8005c54 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005c4e:	f06f 0302 	mvn.w	r3, #2
 8005c52:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005c54:	697b      	ldr	r3, [r7, #20]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	e000ed04 	.word	0xe000ed04

08005c64 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b086      	sub	sp, #24
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c70:	f3ef 8305 	mrs	r3, IPSR
 8005c74:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c76:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005c7c:	f06f 0305 	mvn.w	r3, #5
 8005c80:	617b      	str	r3, [r7, #20]
 8005c82:	e00e      	b.n	8005ca2 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005c8a:	f06f 0303 	mvn.w	r3, #3
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	e007      	b.n	8005ca2 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005c92:	6938      	ldr	r0, [r7, #16]
 8005c94:	f001 fb0a 	bl	80072ac <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005c9c:	6938      	ldr	r0, [r7, #16]
 8005c9e:	f001 f98f 	bl	8006fc0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005ca2:	697b      	ldr	r3, [r7, #20]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b08a      	sub	sp, #40	; 0x28
 8005cb0:	af02      	add	r7, sp, #8
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cbc:	f3ef 8305 	mrs	r3, IPSR
 8005cc0:	613b      	str	r3, [r7, #16]
  return(result);
 8005cc2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d15f      	bne.n	8005d88 <osMessageQueueNew+0xdc>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d05c      	beq.n	8005d88 <osMessageQueueNew+0xdc>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d059      	beq.n	8005d88 <osMessageQueueNew+0xdc>
    mem = -1;
 8005cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005cd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d029      	beq.n	8005d34 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d012      	beq.n	8005d0e <osMessageQueueNew+0x62>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	2b4f      	cmp	r3, #79	; 0x4f
 8005cee:	d90e      	bls.n	8005d0e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	695a      	ldr	r2, [r3, #20]
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	68b9      	ldr	r1, [r7, #8]
 8005d00:	fb01 f303 	mul.w	r3, r1, r3
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d302      	bcc.n	8005d0e <osMessageQueueNew+0x62>
        mem = 1;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	61bb      	str	r3, [r7, #24]
 8005d0c:	e014      	b.n	8005d38 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d110      	bne.n	8005d38 <osMessageQueueNew+0x8c>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10c      	bne.n	8005d38 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d108      	bne.n	8005d38 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d104      	bne.n	8005d38 <osMessageQueueNew+0x8c>
          mem = 0;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
 8005d32:	e001      	b.n	8005d38 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d10b      	bne.n	8005d56 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2100      	movs	r1, #0
 8005d48:	9100      	str	r1, [sp, #0]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f000 fa73 	bl	8006238 <xQueueGenericCreateStatic>
 8005d52:	61f8      	str	r0, [r7, #28]
 8005d54:	e008      	b.n	8005d68 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d105      	bne.n	8005d68 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 fae1 	bl	8006328 <xQueueGenericCreate>
 8005d66:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00c      	beq.n	8005d88 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d003      	beq.n	8005d7c <osMessageQueueNew+0xd0>
        name = attr->name;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	e001      	b.n	8005d80 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d80:	6979      	ldr	r1, [r7, #20]
 8005d82:	69f8      	ldr	r0, [r7, #28]
 8005d84:	f001 fa68 	bl	8007258 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005d88:	69fb      	ldr	r3, [r7, #28]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3720      	adds	r7, #32
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dac:	f3ef 8305 	mrs	r3, IPSR
 8005db0:	617b      	str	r3, [r7, #20]
  return(result);
 8005db2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d028      	beq.n	8005e0a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d005      	beq.n	8005dca <osMessageQueuePut+0x36>
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <osMessageQueuePut+0x36>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005dca:	f06f 0303 	mvn.w	r3, #3
 8005dce:	61fb      	str	r3, [r7, #28]
 8005dd0:	e038      	b.n	8005e44 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005dd6:	f107 0210 	add.w	r2, r7, #16
 8005dda:	2300      	movs	r3, #0
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	69b8      	ldr	r0, [r7, #24]
 8005de0:	f000 fd1e 	bl	8006820 <xQueueGenericSendFromISR>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d003      	beq.n	8005df2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005dea:	f06f 0302 	mvn.w	r3, #2
 8005dee:	61fb      	str	r3, [r7, #28]
 8005df0:	e028      	b.n	8005e44 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d025      	beq.n	8005e44 <osMessageQueuePut+0xb0>
 8005df8:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <osMessageQueuePut+0xbc>)
 8005dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	e01c      	b.n	8005e44 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d002      	beq.n	8005e16 <osMessageQueuePut+0x82>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d103      	bne.n	8005e1e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005e16:	f06f 0303 	mvn.w	r3, #3
 8005e1a:	61fb      	str	r3, [r7, #28]
 8005e1c:	e012      	b.n	8005e44 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e1e:	2300      	movs	r3, #0
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	69b8      	ldr	r0, [r7, #24]
 8005e26:	f000 fbfd 	bl	8006624 <xQueueGenericSend>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d009      	beq.n	8005e44 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d003      	beq.n	8005e3e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005e36:	f06f 0301 	mvn.w	r3, #1
 8005e3a:	61fb      	str	r3, [r7, #28]
 8005e3c:	e002      	b.n	8005e44 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005e3e:	f06f 0302 	mvn.w	r3, #2
 8005e42:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005e44:	69fb      	ldr	r3, [r7, #28]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3720      	adds	r7, #32
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	e000ed04 	.word	0xe000ed04

08005e54 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e6a:	f3ef 8305 	mrs	r3, IPSR
 8005e6e:	617b      	str	r3, [r7, #20]
  return(result);
 8005e70:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d028      	beq.n	8005ec8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <osMessageQueueGet+0x34>
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <osMessageQueueGet+0x34>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005e88:	f06f 0303 	mvn.w	r3, #3
 8005e8c:	61fb      	str	r3, [r7, #28]
 8005e8e:	e037      	b.n	8005f00 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005e94:	f107 0310 	add.w	r3, r7, #16
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68b9      	ldr	r1, [r7, #8]
 8005e9c:	69b8      	ldr	r0, [r7, #24]
 8005e9e:	f000 ffd3 	bl	8006e48 <xQueueReceiveFromISR>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d003      	beq.n	8005eb0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005ea8:	f06f 0302 	mvn.w	r3, #2
 8005eac:	61fb      	str	r3, [r7, #28]
 8005eae:	e027      	b.n	8005f00 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d024      	beq.n	8005f00 <osMessageQueueGet+0xac>
 8005eb6:	4b15      	ldr	r3, [pc, #84]	; (8005f0c <osMessageQueueGet+0xb8>)
 8005eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	e01b      	b.n	8005f00 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <osMessageQueueGet+0x80>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d103      	bne.n	8005edc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005ed4:	f06f 0303 	mvn.w	r3, #3
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	e011      	b.n	8005f00 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	68b9      	ldr	r1, [r7, #8]
 8005ee0:	69b8      	ldr	r0, [r7, #24]
 8005ee2:	f000 fdc5 	bl	8006a70 <xQueueReceive>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d009      	beq.n	8005f00 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005ef2:	f06f 0301 	mvn.w	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	e002      	b.n	8005f00 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005efa:	f06f 0302 	mvn.w	r3, #2
 8005efe:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005f00:	69fb      	ldr	r3, [r7, #28]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3720      	adds	r7, #32
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	e000ed04 	.word	0xe000ed04

08005f10 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b086      	sub	sp, #24
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d102      	bne.n	8005f28 <osMessageQueueGetCount+0x18>
    count = 0U;
 8005f22:	2300      	movs	r3, #0
 8005f24:	617b      	str	r3, [r7, #20]
 8005f26:	e00e      	b.n	8005f46 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f28:	f3ef 8305 	mrs	r3, IPSR
 8005f2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8005f34:	6938      	ldr	r0, [r7, #16]
 8005f36:	f001 f825 	bl	8006f84 <uxQueueMessagesWaitingFromISR>
 8005f3a:	6178      	str	r0, [r7, #20]
 8005f3c:	e003      	b.n	8005f46 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8005f3e:	6938      	ldr	r0, [r7, #16]
 8005f40:	f001 f802 	bl	8006f48 <uxQueueMessagesWaiting>
 8005f44:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8005f46:	697b      	ldr	r3, [r7, #20]
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3718      	adds	r7, #24
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f5c:	f3ef 8305 	mrs	r3, IPSR
 8005f60:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f62:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d003      	beq.n	8005f70 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8005f68:	f06f 0305 	mvn.w	r3, #5
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	e00e      	b.n	8005f8e <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d103      	bne.n	8005f7e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8005f76:	f06f 0303 	mvn.w	r3, #3
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e007      	b.n	8005f8e <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8005f7e:	6938      	ldr	r0, [r7, #16]
 8005f80:	f001 f994 	bl	80072ac <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005f88:	6938      	ldr	r0, [r7, #16]
 8005f8a:	f001 f819 	bl	8006fc0 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005f8e:	697b      	ldr	r3, [r7, #20]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f98:	b480      	push	{r7}
 8005f9a:	b085      	sub	sp, #20
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4a07      	ldr	r2, [pc, #28]	; (8005fc4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005fa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	4a06      	ldr	r2, [pc, #24]	; (8005fc8 <vApplicationGetIdleTaskMemory+0x30>)
 8005fae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2280      	movs	r2, #128	; 0x80
 8005fb4:	601a      	str	r2, [r3, #0]
}
 8005fb6:	bf00      	nop
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	200000ac 	.word	0x200000ac
 8005fc8:	20000108 	.word	0x20000108

08005fcc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fcc:	b480      	push	{r7}
 8005fce:	b085      	sub	sp, #20
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4a07      	ldr	r2, [pc, #28]	; (8005ff8 <vApplicationGetTimerTaskMemory+0x2c>)
 8005fdc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4a06      	ldr	r2, [pc, #24]	; (8005ffc <vApplicationGetTimerTaskMemory+0x30>)
 8005fe2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fea:	601a      	str	r2, [r3, #0]
}
 8005fec:	bf00      	nop
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	20000308 	.word	0x20000308
 8005ffc:	20000364 	.word	0x20000364

08006000 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f103 0208 	add.w	r2, r3, #8
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f04f 32ff 	mov.w	r2, #4294967295
 8006018:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f103 0208 	add.w	r2, r3, #8
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f103 0208 	add.w	r2, r3, #8
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800604e:	bf00      	nop
 8006050:	370c      	adds	r7, #12
 8006052:	46bd      	mov	sp, r7
 8006054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006058:	4770      	bx	lr

0800605a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800605a:	b480      	push	{r7}
 800605c:	b085      	sub	sp, #20
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
 8006062:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
}
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr

080060a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060a2:	b480      	push	{r7}
 80060a4:	b085      	sub	sp, #20
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b8:	d103      	bne.n	80060c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	60fb      	str	r3, [r7, #12]
 80060c0:	e00c      	b.n	80060dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	3308      	adds	r3, #8
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e002      	b.n	80060d0 <vListInsert+0x2e>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d2f6      	bcs.n	80060ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68fa      	ldr	r2, [r7, #12]
 80060f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	601a      	str	r2, [r3, #0]
}
 8006108:	bf00      	nop
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	6892      	ldr	r2, [r2, #8]
 800612a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	6852      	ldr	r2, [r2, #4]
 8006134:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	429a      	cmp	r2, r3
 800613e:	d103      	bne.n	8006148 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2200      	movs	r2, #0
 800614c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	1e5a      	subs	r2, r3, #1
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3714      	adds	r7, #20
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10a      	bne.n	8006192 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800618e:	bf00      	nop
 8006190:	e7fe      	b.n	8006190 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006192:	f002 fe57 	bl	8008e44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061a2:	fb01 f303 	mul.w	r3, r1, r3
 80061a6:	441a      	add	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c2:	3b01      	subs	r3, #1
 80061c4:	68f9      	ldr	r1, [r7, #12]
 80061c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80061c8:	fb01 f303 	mul.w	r3, r1, r3
 80061cc:	441a      	add	r2, r3
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	22ff      	movs	r2, #255	; 0xff
 80061d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	22ff      	movs	r2, #255	; 0xff
 80061de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d114      	bne.n	8006212 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d01a      	beq.n	8006226 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	3310      	adds	r3, #16
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 fe01 	bl	8007dfc <xTaskRemoveFromEventList>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d012      	beq.n	8006226 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <xQueueGenericReset+0xcc>)
 8006202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006206:	601a      	str	r2, [r3, #0]
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	e009      	b.n	8006226 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3310      	adds	r3, #16
 8006216:	4618      	mov	r0, r3
 8006218:	f7ff fef2 	bl	8006000 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3324      	adds	r3, #36	; 0x24
 8006220:	4618      	mov	r0, r3
 8006222:	f7ff feed 	bl	8006000 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006226:	f002 fe3d 	bl	8008ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800622a:	2301      	movs	r3, #1
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08e      	sub	sp, #56	; 0x38
 800623c:	af02      	add	r7, sp, #8
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d10a      	bne.n	800627e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
}
 800627a:	bf00      	nop
 800627c:	e7fe      	b.n	800627c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <xQueueGenericCreateStatic+0x52>
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <xQueueGenericCreateStatic+0x56>
 800628a:	2301      	movs	r3, #1
 800628c:	e000      	b.n	8006290 <xQueueGenericCreateStatic+0x58>
 800628e:	2300      	movs	r3, #0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10a      	bne.n	80062aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	f3bf 8f6f 	isb	sy
 80062a0:	f3bf 8f4f 	dsb	sy
 80062a4:	623b      	str	r3, [r7, #32]
}
 80062a6:	bf00      	nop
 80062a8:	e7fe      	b.n	80062a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d102      	bne.n	80062b6 <xQueueGenericCreateStatic+0x7e>
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <xQueueGenericCreateStatic+0x82>
 80062b6:	2301      	movs	r3, #1
 80062b8:	e000      	b.n	80062bc <xQueueGenericCreateStatic+0x84>
 80062ba:	2300      	movs	r3, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10a      	bne.n	80062d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	61fb      	str	r3, [r7, #28]
}
 80062d2:	bf00      	nop
 80062d4:	e7fe      	b.n	80062d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062d6:	2350      	movs	r3, #80	; 0x50
 80062d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b50      	cmp	r3, #80	; 0x50
 80062de:	d00a      	beq.n	80062f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	61bb      	str	r3, [r7, #24]
}
 80062f2:	bf00      	nop
 80062f4:	e7fe      	b.n	80062f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80062f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00d      	beq.n	800631e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800630a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800630e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4613      	mov	r3, r2
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f83f 	bl	800639c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006320:	4618      	mov	r0, r3
 8006322:	3730      	adds	r7, #48	; 0x30
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006328:	b580      	push	{r7, lr}
 800632a:	b08a      	sub	sp, #40	; 0x28
 800632c:	af02      	add	r7, sp, #8
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	4613      	mov	r3, r2
 8006334:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10a      	bne.n	8006352 <xQueueGenericCreate+0x2a>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	613b      	str	r3, [r7, #16]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	fb02 f303 	mul.w	r3, r2, r3
 800635a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	3350      	adds	r3, #80	; 0x50
 8006360:	4618      	mov	r0, r3
 8006362:	f002 fe91 	bl	8009088 <pvPortMalloc>
 8006366:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d011      	beq.n	8006392 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	3350      	adds	r3, #80	; 0x50
 8006376:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006380:	79fa      	ldrb	r2, [r7, #7]
 8006382:	69bb      	ldr	r3, [r7, #24]
 8006384:	9300      	str	r3, [sp, #0]
 8006386:	4613      	mov	r3, r2
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	68b9      	ldr	r1, [r7, #8]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f805 	bl	800639c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006392:	69bb      	ldr	r3, [r7, #24]
	}
 8006394:	4618      	mov	r0, r3
 8006396:	3720      	adds	r7, #32
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
 80063a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d103      	bne.n	80063b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	e002      	b.n	80063be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063ca:	2101      	movs	r1, #1
 80063cc:	69b8      	ldr	r0, [r7, #24]
 80063ce:	f7ff fecb 	bl	8006168 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	78fa      	ldrb	r2, [r7, #3]
 80063d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063da:	bf00      	nop
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00e      	beq.n	800640e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2200      	movs	r2, #0
 8006400:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006402:	2300      	movs	r3, #0
 8006404:	2200      	movs	r2, #0
 8006406:	2100      	movs	r1, #0
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 f90b 	bl	8006624 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800640e:	bf00      	nop
 8006410:	3708      	adds	r7, #8
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006416:	b580      	push	{r7, lr}
 8006418:	b086      	sub	sp, #24
 800641a:	af00      	add	r7, sp, #0
 800641c:	4603      	mov	r3, r0
 800641e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006420:	2301      	movs	r3, #1
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	2300      	movs	r3, #0
 8006426:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	461a      	mov	r2, r3
 800642c:	6939      	ldr	r1, [r7, #16]
 800642e:	6978      	ldr	r0, [r7, #20]
 8006430:	f7ff ff7a 	bl	8006328 <xQueueGenericCreate>
 8006434:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f7ff ffd3 	bl	80063e2 <prvInitialiseMutex>

		return xNewQueue;
 800643c:	68fb      	ldr	r3, [r7, #12]
	}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006446:	b580      	push	{r7, lr}
 8006448:	b088      	sub	sp, #32
 800644a:	af02      	add	r7, sp, #8
 800644c:	4603      	mov	r3, r0
 800644e:	6039      	str	r1, [r7, #0]
 8006450:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006452:	2301      	movs	r3, #1
 8006454:	617b      	str	r3, [r7, #20]
 8006456:	2300      	movs	r3, #0
 8006458:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800645a:	79fb      	ldrb	r3, [r7, #7]
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	2200      	movs	r2, #0
 8006462:	6939      	ldr	r1, [r7, #16]
 8006464:	6978      	ldr	r0, [r7, #20]
 8006466:	f7ff fee7 	bl	8006238 <xQueueGenericCreateStatic>
 800646a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff ffb8 	bl	80063e2 <prvInitialiseMutex>

		return xNewQueue;
 8006472:	68fb      	ldr	r3, [r7, #12]
	}
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d10a      	bne.n	80064a4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	60fb      	str	r3, [r7, #12]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	689c      	ldr	r4, [r3, #8]
 80064a8:	f001 fe66 	bl	8008178 <xTaskGetCurrentTaskHandle>
 80064ac:	4603      	mov	r3, r0
 80064ae:	429c      	cmp	r4, r3
 80064b0:	d111      	bne.n	80064d6 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d105      	bne.n	80064d0 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80064c4:	2300      	movs	r3, #0
 80064c6:	2200      	movs	r2, #0
 80064c8:	2100      	movs	r1, #0
 80064ca:	6938      	ldr	r0, [r7, #16]
 80064cc:	f000 f8aa 	bl	8006624 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80064d0:	2301      	movs	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e001      	b.n	80064da <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80064da:	697b      	ldr	r3, [r7, #20]
	}
 80064dc:	4618      	mov	r0, r3
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd90      	pop	{r4, r7, pc}

080064e4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b087      	sub	sp, #28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d10a      	bne.n	800650e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	60fb      	str	r3, [r7, #12]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	689c      	ldr	r4, [r3, #8]
 8006512:	f001 fe31 	bl	8008178 <xTaskGetCurrentTaskHandle>
 8006516:	4603      	mov	r3, r0
 8006518:	429c      	cmp	r4, r3
 800651a:	d107      	bne.n	800652c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	1c5a      	adds	r2, r3, #1
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006526:	2301      	movs	r3, #1
 8006528:	617b      	str	r3, [r7, #20]
 800652a:	e00c      	b.n	8006546 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800652c:	6839      	ldr	r1, [r7, #0]
 800652e:	6938      	ldr	r0, [r7, #16]
 8006530:	f000 fb7e 	bl	8006c30 <xQueueSemaphoreTake>
 8006534:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d004      	beq.n	8006546 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006546:	697b      	ldr	r3, [r7, #20]
	}
 8006548:	4618      	mov	r0, r3
 800654a:	371c      	adds	r7, #28
 800654c:	46bd      	mov	sp, r7
 800654e:	bd90      	pop	{r4, r7, pc}

08006550 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08a      	sub	sp, #40	; 0x28
 8006554:	af02      	add	r7, sp, #8
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d10a      	bne.n	8006578 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	61bb      	str	r3, [r7, #24]
}
 8006574:	bf00      	nop
 8006576:	e7fe      	b.n	8006576 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	429a      	cmp	r2, r3
 800657e:	d90a      	bls.n	8006596 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	617b      	str	r3, [r7, #20]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006596:	2302      	movs	r3, #2
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	2100      	movs	r1, #0
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7ff fe49 	bl	8006238 <xQueueGenericCreateStatic>
 80065a6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80065b4:	69fb      	ldr	r3, [r7, #28]
	}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3720      	adds	r7, #32
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b086      	sub	sp, #24
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
 80065c6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10a      	bne.n	80065e4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	613b      	str	r3, [r7, #16]
}
 80065e0:	bf00      	nop
 80065e2:	e7fe      	b.n	80065e2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80065e4:	683a      	ldr	r2, [r7, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d90a      	bls.n	8006602 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	60fb      	str	r3, [r7, #12]
}
 80065fe:	bf00      	nop
 8006600:	e7fe      	b.n	8006600 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006602:	2202      	movs	r2, #2
 8006604:	2100      	movs	r1, #0
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f7ff fe8e 	bl	8006328 <xQueueGenericCreate>
 800660c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d002      	beq.n	800661a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800661a:	697b      	ldr	r3, [r7, #20]
	}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b08e      	sub	sp, #56	; 0x38
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
 8006630:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006632:	2300      	movs	r3, #0
 8006634:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10a      	bne.n	8006656 <xQueueGenericSend+0x32>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006652:	bf00      	nop
 8006654:	e7fe      	b.n	8006654 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d103      	bne.n	8006664 <xQueueGenericSend+0x40>
 800665c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <xQueueGenericSend+0x44>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <xQueueGenericSend+0x46>
 8006668:	2300      	movs	r3, #0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d10a      	bne.n	8006684 <xQueueGenericSend+0x60>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006680:	bf00      	nop
 8006682:	e7fe      	b.n	8006682 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2b02      	cmp	r3, #2
 8006688:	d103      	bne.n	8006692 <xQueueGenericSend+0x6e>
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668e:	2b01      	cmp	r3, #1
 8006690:	d101      	bne.n	8006696 <xQueueGenericSend+0x72>
 8006692:	2301      	movs	r3, #1
 8006694:	e000      	b.n	8006698 <xQueueGenericSend+0x74>
 8006696:	2300      	movs	r3, #0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10a      	bne.n	80066b2 <xQueueGenericSend+0x8e>
	__asm volatile
 800669c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	623b      	str	r3, [r7, #32]
}
 80066ae:	bf00      	nop
 80066b0:	e7fe      	b.n	80066b0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066b2:	f001 fd71 	bl	8008198 <xTaskGetSchedulerState>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <xQueueGenericSend+0x9e>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d101      	bne.n	80066c6 <xQueueGenericSend+0xa2>
 80066c2:	2301      	movs	r3, #1
 80066c4:	e000      	b.n	80066c8 <xQueueGenericSend+0xa4>
 80066c6:	2300      	movs	r3, #0
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d10a      	bne.n	80066e2 <xQueueGenericSend+0xbe>
	__asm volatile
 80066cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d0:	f383 8811 	msr	BASEPRI, r3
 80066d4:	f3bf 8f6f 	isb	sy
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	61fb      	str	r3, [r7, #28]
}
 80066de:	bf00      	nop
 80066e0:	e7fe      	b.n	80066e0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066e2:	f002 fbaf 	bl	8008e44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d302      	bcc.n	80066f8 <xQueueGenericSend+0xd4>
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d129      	bne.n	800674c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066fe:	f000 fc9a 	bl	8007036 <prvCopyDataToQueue>
 8006702:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	d010      	beq.n	800672e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	3324      	adds	r3, #36	; 0x24
 8006710:	4618      	mov	r0, r3
 8006712:	f001 fb73 	bl	8007dfc <xTaskRemoveFromEventList>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d013      	beq.n	8006744 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800671c:	4b3f      	ldr	r3, [pc, #252]	; (800681c <xQueueGenericSend+0x1f8>)
 800671e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006722:	601a      	str	r2, [r3, #0]
 8006724:	f3bf 8f4f 	dsb	sy
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	e00a      	b.n	8006744 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800672e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d007      	beq.n	8006744 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006734:	4b39      	ldr	r3, [pc, #228]	; (800681c <xQueueGenericSend+0x1f8>)
 8006736:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006744:	f002 fbae 	bl	8008ea4 <vPortExitCritical>
				return pdPASS;
 8006748:	2301      	movs	r3, #1
 800674a:	e063      	b.n	8006814 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d103      	bne.n	800675a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006752:	f002 fba7 	bl	8008ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006756:	2300      	movs	r3, #0
 8006758:	e05c      	b.n	8006814 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800675a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675c:	2b00      	cmp	r3, #0
 800675e:	d106      	bne.n	800676e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006760:	f107 0314 	add.w	r3, r7, #20
 8006764:	4618      	mov	r0, r3
 8006766:	f001 fbad 	bl	8007ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800676a:	2301      	movs	r3, #1
 800676c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800676e:	f002 fb99 	bl	8008ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006772:	f001 f90d 	bl	8007990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006776:	f002 fb65 	bl	8008e44 <vPortEnterCritical>
 800677a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006780:	b25b      	sxtb	r3, r3
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d103      	bne.n	8006790 <xQueueGenericSend+0x16c>
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	2200      	movs	r2, #0
 800678c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006792:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006796:	b25b      	sxtb	r3, r3
 8006798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679c:	d103      	bne.n	80067a6 <xQueueGenericSend+0x182>
 800679e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067a6:	f002 fb7d 	bl	8008ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067aa:	1d3a      	adds	r2, r7, #4
 80067ac:	f107 0314 	add.w	r3, r7, #20
 80067b0:	4611      	mov	r1, r2
 80067b2:	4618      	mov	r0, r3
 80067b4:	f001 fb9c 	bl	8007ef0 <xTaskCheckForTimeOut>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d124      	bne.n	8006808 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80067be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067c0:	f000 fd31 	bl	8007226 <prvIsQueueFull>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d018      	beq.n	80067fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80067ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067cc:	3310      	adds	r3, #16
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	4611      	mov	r1, r2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f001 fac2 	bl	8007d5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80067d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067da:	f000 fcbc 	bl	8007156 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80067de:	f001 f8e5 	bl	80079ac <xTaskResumeAll>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f47f af7c 	bne.w	80066e2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80067ea:	4b0c      	ldr	r3, [pc, #48]	; (800681c <xQueueGenericSend+0x1f8>)
 80067ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	f3bf 8f6f 	isb	sy
 80067fa:	e772      	b.n	80066e2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80067fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80067fe:	f000 fcaa 	bl	8007156 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006802:	f001 f8d3 	bl	80079ac <xTaskResumeAll>
 8006806:	e76c      	b.n	80066e2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800680a:	f000 fca4 	bl	8007156 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800680e:	f001 f8cd 	bl	80079ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006812:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006814:	4618      	mov	r0, r3
 8006816:	3738      	adds	r7, #56	; 0x38
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	e000ed04 	.word	0xe000ed04

08006820 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b090      	sub	sp, #64	; 0x40
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800684a:	bf00      	nop
 800684c:	e7fe      	b.n	800684c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d103      	bne.n	800685c <xQueueGenericSendFromISR+0x3c>
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <xQueueGenericSendFromISR+0x40>
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <xQueueGenericSendFromISR+0x42>
 8006860:	2300      	movs	r3, #0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006878:	bf00      	nop
 800687a:	e7fe      	b.n	800687a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d103      	bne.n	800688a <xQueueGenericSendFromISR+0x6a>
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <xQueueGenericSendFromISR+0x6e>
 800688a:	2301      	movs	r3, #1
 800688c:	e000      	b.n	8006890 <xQueueGenericSendFromISR+0x70>
 800688e:	2300      	movs	r3, #0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	623b      	str	r3, [r7, #32]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068aa:	f002 fbad 	bl	8009008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80068ae:	f3ef 8211 	mrs	r2, BASEPRI
 80068b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	61fa      	str	r2, [r7, #28]
 80068c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80068c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <xQueueGenericSendFromISR+0xbc>
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d12f      	bne.n	800693c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068f2:	f000 fba0 	bl	8007036 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80068f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80068fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fe:	d112      	bne.n	8006926 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	2b00      	cmp	r3, #0
 8006906:	d016      	beq.n	8006936 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800690a:	3324      	adds	r3, #36	; 0x24
 800690c:	4618      	mov	r0, r3
 800690e:	f001 fa75 	bl	8007dfc <xTaskRemoveFromEventList>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00e      	beq.n	8006936 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00b      	beq.n	8006936 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2201      	movs	r2, #1
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	e007      	b.n	8006936 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006926:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800692a:	3301      	adds	r3, #1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	b25a      	sxtb	r2, r3
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006936:	2301      	movs	r3, #1
 8006938:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800693a:	e001      	b.n	8006940 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800693c:	2300      	movs	r3, #0
 800693e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006942:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800694a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800694c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800694e:	4618      	mov	r0, r3
 8006950:	3740      	adds	r7, #64	; 0x40
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}

08006956 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006956:	b580      	push	{r7, lr}
 8006958:	b08e      	sub	sp, #56	; 0x38
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
 800695e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	2b00      	cmp	r3, #0
 8006968:	d10a      	bne.n	8006980 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	623b      	str	r3, [r7, #32]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	61fb      	str	r3, [r7, #28]
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800699e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d103      	bne.n	80069ae <xQueueGiveFromISR+0x58>
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <xQueueGiveFromISR+0x5c>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <xQueueGiveFromISR+0x5e>
 80069b2:	2300      	movs	r3, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <xQueueGiveFromISR+0x78>
	__asm volatile
 80069b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069bc:	f383 8811 	msr	BASEPRI, r3
 80069c0:	f3bf 8f6f 	isb	sy
 80069c4:	f3bf 8f4f 	dsb	sy
 80069c8:	61bb      	str	r3, [r7, #24]
}
 80069ca:	bf00      	nop
 80069cc:	e7fe      	b.n	80069cc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ce:	f002 fb1b 	bl	8009008 <vPortValidateInterruptPriority>
	__asm volatile
 80069d2:	f3ef 8211 	mrs	r2, BASEPRI
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	617a      	str	r2, [r7, #20]
 80069e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80069ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d22b      	bcs.n	8006a56 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a18:	d112      	bne.n	8006a40 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d016      	beq.n	8006a50 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	3324      	adds	r3, #36	; 0x24
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 f9e8 	bl	8007dfc <xTaskRemoveFromEventList>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00e      	beq.n	8006a50 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e007      	b.n	8006a50 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a44:	3301      	adds	r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	b25a      	sxtb	r2, r3
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a50:	2301      	movs	r3, #1
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
 8006a54:	e001      	b.n	8006a5a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f383 8811 	msr	BASEPRI, r3
}
 8006a64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3738      	adds	r7, #56	; 0x38
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08c      	sub	sp, #48	; 0x30
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <xQueueReceive+0x30>
	__asm volatile
 8006a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8e:	f383 8811 	msr	BASEPRI, r3
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	623b      	str	r3, [r7, #32]
}
 8006a9c:	bf00      	nop
 8006a9e:	e7fe      	b.n	8006a9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d103      	bne.n	8006aae <xQueueReceive+0x3e>
 8006aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <xQueueReceive+0x42>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e000      	b.n	8006ab4 <xQueueReceive+0x44>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <xQueueReceive+0x5e>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	61fb      	str	r3, [r7, #28]
}
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ace:	f001 fb63 	bl	8008198 <xTaskGetSchedulerState>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d102      	bne.n	8006ade <xQueueReceive+0x6e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <xQueueReceive+0x72>
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e000      	b.n	8006ae4 <xQueueReceive+0x74>
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <xQueueReceive+0x8e>
	__asm volatile
 8006ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aec:	f383 8811 	msr	BASEPRI, r3
 8006af0:	f3bf 8f6f 	isb	sy
 8006af4:	f3bf 8f4f 	dsb	sy
 8006af8:	61bb      	str	r3, [r7, #24]
}
 8006afa:	bf00      	nop
 8006afc:	e7fe      	b.n	8006afc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006afe:	f002 f9a1 	bl	8008e44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d01f      	beq.n	8006b4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b0e:	68b9      	ldr	r1, [r7, #8]
 8006b10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b12:	f000 fafa 	bl	800710a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b18:	1e5a      	subs	r2, r3, #1
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00f      	beq.n	8006b46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b28:	3310      	adds	r3, #16
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f001 f966 	bl	8007dfc <xTaskRemoveFromEventList>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d007      	beq.n	8006b46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b36:	4b3d      	ldr	r3, [pc, #244]	; (8006c2c <xQueueReceive+0x1bc>)
 8006b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b3c:	601a      	str	r2, [r3, #0]
 8006b3e:	f3bf 8f4f 	dsb	sy
 8006b42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b46:	f002 f9ad 	bl	8008ea4 <vPortExitCritical>
				return pdPASS;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e069      	b.n	8006c22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d103      	bne.n	8006b5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b54:	f002 f9a6 	bl	8008ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	e062      	b.n	8006c22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b62:	f107 0310 	add.w	r3, r7, #16
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 f9ac 	bl	8007ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b70:	f002 f998 	bl	8008ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b74:	f000 ff0c 	bl	8007990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b78:	f002 f964 	bl	8008e44 <vPortEnterCritical>
 8006b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b82:	b25b      	sxtb	r3, r3
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d103      	bne.n	8006b92 <xQueueReceive+0x122>
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b98:	b25b      	sxtb	r3, r3
 8006b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9e:	d103      	bne.n	8006ba8 <xQueueReceive+0x138>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ba8:	f002 f97c 	bl	8008ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006bac:	1d3a      	adds	r2, r7, #4
 8006bae:	f107 0310 	add.w	r3, r7, #16
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 f99b 	bl	8007ef0 <xTaskCheckForTimeOut>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d123      	bne.n	8006c08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bc2:	f000 fb1a 	bl	80071fa <prvIsQueueEmpty>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d017      	beq.n	8006bfc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bce:	3324      	adds	r3, #36	; 0x24
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f001 f8c1 	bl	8007d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bdc:	f000 fabb 	bl	8007156 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006be0:	f000 fee4 	bl	80079ac <xTaskResumeAll>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d189      	bne.n	8006afe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006bea:	4b10      	ldr	r3, [pc, #64]	; (8006c2c <xQueueReceive+0x1bc>)
 8006bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	e780      	b.n	8006afe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006bfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfe:	f000 faaa 	bl	8007156 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c02:	f000 fed3 	bl	80079ac <xTaskResumeAll>
 8006c06:	e77a      	b.n	8006afe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c0a:	f000 faa4 	bl	8007156 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c0e:	f000 fecd 	bl	80079ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c14:	f000 faf1 	bl	80071fa <prvIsQueueEmpty>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f43f af6f 	beq.w	8006afe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3730      	adds	r7, #48	; 0x30
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	e000ed04 	.word	0xe000ed04

08006c30 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08e      	sub	sp, #56	; 0x38
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10a      	bne.n	8006c62 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	623b      	str	r3, [r7, #32]
}
 8006c5e:	bf00      	nop
 8006c60:	e7fe      	b.n	8006c60 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	61fb      	str	r3, [r7, #28]
}
 8006c7c:	bf00      	nop
 8006c7e:	e7fe      	b.n	8006c7e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c80:	f001 fa8a 	bl	8008198 <xTaskGetSchedulerState>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d102      	bne.n	8006c90 <xQueueSemaphoreTake+0x60>
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d101      	bne.n	8006c94 <xQueueSemaphoreTake+0x64>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <xQueueSemaphoreTake+0x66>
 8006c94:	2300      	movs	r3, #0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	61bb      	str	r3, [r7, #24]
}
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006cb0:	f002 f8c8 	bl	8008e44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d024      	beq.n	8006d0a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc2:	1e5a      	subs	r2, r3, #1
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d104      	bne.n	8006cda <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006cd0:	f001 fbd8 	bl	8008484 <pvTaskIncrementMutexHeldCount>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00f      	beq.n	8006d02 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	3310      	adds	r3, #16
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 f888 	bl	8007dfc <xTaskRemoveFromEventList>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006cf2:	4b54      	ldr	r3, [pc, #336]	; (8006e44 <xQueueSemaphoreTake+0x214>)
 8006cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d02:	f002 f8cf 	bl	8008ea4 <vPortExitCritical>
				return pdPASS;
 8006d06:	2301      	movs	r3, #1
 8006d08:	e097      	b.n	8006e3a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d111      	bne.n	8006d34 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d00a      	beq.n	8006d2c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1a:	f383 8811 	msr	BASEPRI, r3
 8006d1e:	f3bf 8f6f 	isb	sy
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	617b      	str	r3, [r7, #20]
}
 8006d28:	bf00      	nop
 8006d2a:	e7fe      	b.n	8006d2a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d2c:	f002 f8ba 	bl	8008ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d30:	2300      	movs	r3, #0
 8006d32:	e082      	b.n	8006e3a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d3a:	f107 030c 	add.w	r3, r7, #12
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f001 f8c0 	bl	8007ec4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d44:	2301      	movs	r3, #1
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d48:	f002 f8ac 	bl	8008ea4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d4c:	f000 fe20 	bl	8007990 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d50:	f002 f878 	bl	8008e44 <vPortEnterCritical>
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d5a:	b25b      	sxtb	r3, r3
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d103      	bne.n	8006d6a <xQueueSemaphoreTake+0x13a>
 8006d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d70:	b25b      	sxtb	r3, r3
 8006d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d76:	d103      	bne.n	8006d80 <xQueueSemaphoreTake+0x150>
 8006d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d80:	f002 f890 	bl	8008ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d84:	463a      	mov	r2, r7
 8006d86:	f107 030c 	add.w	r3, r7, #12
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f001 f8af 	bl	8007ef0 <xTaskCheckForTimeOut>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d132      	bne.n	8006dfe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006d9a:	f000 fa2e 	bl	80071fa <prvIsQueueEmpty>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d026      	beq.n	8006df2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d109      	bne.n	8006dc0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006dac:	f002 f84a 	bl	8008e44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 fa0d 	bl	80081d4 <xTaskPriorityInherit>
 8006dba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006dbc:	f002 f872 	bl	8008ea4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc2:	3324      	adds	r3, #36	; 0x24
 8006dc4:	683a      	ldr	r2, [r7, #0]
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 ffc7 	bl	8007d5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006dce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dd0:	f000 f9c1 	bl	8007156 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006dd4:	f000 fdea 	bl	80079ac <xTaskResumeAll>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f47f af68 	bne.w	8006cb0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006de0:	4b18      	ldr	r3, [pc, #96]	; (8006e44 <xQueueSemaphoreTake+0x214>)
 8006de2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	e75e      	b.n	8006cb0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006df2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006df4:	f000 f9af 	bl	8007156 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006df8:	f000 fdd8 	bl	80079ac <xTaskResumeAll>
 8006dfc:	e758      	b.n	8006cb0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006dfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e00:	f000 f9a9 	bl	8007156 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e04:	f000 fdd2 	bl	80079ac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e0a:	f000 f9f6 	bl	80071fa <prvIsQueueEmpty>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f43f af4d 	beq.w	8006cb0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00d      	beq.n	8006e38 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006e1c:	f002 f812 	bl	8008e44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e22:	f000 f8f0 	bl	8007006 <prvGetDisinheritPriorityAfterTimeout>
 8006e26:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e2e:	4618      	mov	r0, r3
 8006e30:	f001 faa6 	bl	8008380 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e34:	f002 f836 	bl	8008ea4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3738      	adds	r7, #56	; 0x38
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b08e      	sub	sp, #56	; 0x38
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d10a      	bne.n	8006e74 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	623b      	str	r3, [r7, #32]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d103      	bne.n	8006e82 <xQueueReceiveFromISR+0x3a>
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <xQueueReceiveFromISR+0x3e>
 8006e82:	2301      	movs	r3, #1
 8006e84:	e000      	b.n	8006e88 <xQueueReceiveFromISR+0x40>
 8006e86:	2300      	movs	r3, #0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10a      	bne.n	8006ea2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	61fb      	str	r3, [r7, #28]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ea2:	f002 f8b1 	bl	8009008 <vPortValidateInterruptPriority>
	__asm volatile
 8006ea6:	f3ef 8211 	mrs	r2, BASEPRI
 8006eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	61ba      	str	r2, [r7, #24]
 8006ebc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006ebe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d02f      	beq.n	8006f2e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ed4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ed8:	68b9      	ldr	r1, [r7, #8]
 8006eda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006edc:	f000 f915 	bl	800710a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	1e5a      	subs	r2, r3, #1
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ee8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef0:	d112      	bne.n	8006f18 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	691b      	ldr	r3, [r3, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d016      	beq.n	8006f28 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006efc:	3310      	adds	r3, #16
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 ff7c 	bl	8007dfc <xTaskRemoveFromEventList>
 8006f04:	4603      	mov	r3, r0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00e      	beq.n	8006f28 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e007      	b.n	8006f28 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006f18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	b25a      	sxtb	r2, r3
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2c:	e001      	b.n	8006f32 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	637b      	str	r3, [r7, #52]	; 0x34
 8006f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f383 8811 	msr	BASEPRI, r3
}
 8006f3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3738      	adds	r7, #56	; 0x38
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10a      	bne.n	8006f6c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5a:	f383 8811 	msr	BASEPRI, r3
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f3bf 8f4f 	dsb	sy
 8006f66:	60bb      	str	r3, [r7, #8]
}
 8006f68:	bf00      	nop
 8006f6a:	e7fe      	b.n	8006f6a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8006f6c:	f001 ff6a 	bl	8008e44 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f74:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006f76:	f001 ff95 	bl	8008ea4 <vPortExitCritical>

	return uxReturn;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3710      	adds	r7, #16
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10a      	bne.n	8006fac <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	60fb      	str	r3, [r7, #12]
}
 8006fa8:	bf00      	nop
 8006faa:	e7fe      	b.n	8006faa <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fb0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006fb2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	371c      	adds	r7, #28
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <vQueueDelete+0x28>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	60bb      	str	r3, [r7, #8]
}
 8006fe4:	bf00      	nop
 8006fe6:	e7fe      	b.n	8006fe6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f95f 	bl	80072ac <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f002 f911 	bl	8009220 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006ffe:	bf00      	nop
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007012:	2b00      	cmp	r3, #0
 8007014:	d006      	beq.n	8007024 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007020:	60fb      	str	r3, [r7, #12]
 8007022:	e001      	b.n	8007028 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007028:	68fb      	ldr	r3, [r7, #12]
	}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b086      	sub	sp, #24
 800703a:	af00      	add	r7, sp, #0
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007042:	2300      	movs	r3, #0
 8007044:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10d      	bne.n	8007070 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d14d      	bne.n	80070f8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4618      	mov	r0, r3
 8007062:	f001 f91f 	bl	80082a4 <xTaskPriorityDisinherit>
 8007066:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	609a      	str	r2, [r3, #8]
 800706e:	e043      	b.n	80070f8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d119      	bne.n	80070aa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6858      	ldr	r0, [r3, #4]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	461a      	mov	r2, r3
 8007080:	68b9      	ldr	r1, [r7, #8]
 8007082:	f011 fe03 	bl	8018c8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708e:	441a      	add	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	685a      	ldr	r2, [r3, #4]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	429a      	cmp	r2, r3
 800709e:	d32b      	bcc.n	80070f8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	605a      	str	r2, [r3, #4]
 80070a8:	e026      	b.n	80070f8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	68d8      	ldr	r0, [r3, #12]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	461a      	mov	r2, r3
 80070b4:	68b9      	ldr	r1, [r7, #8]
 80070b6:	f011 fde9 	bl	8018c8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	425b      	negs	r3, r3
 80070c4:	441a      	add	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	68da      	ldr	r2, [r3, #12]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d207      	bcs.n	80070e6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	689a      	ldr	r2, [r3, #8]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070de:	425b      	negs	r3, r3
 80070e0:	441a      	add	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d105      	bne.n	80070f8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d002      	beq.n	80070f8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007100:	697b      	ldr	r3, [r7, #20]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3718      	adds	r7, #24
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	2b00      	cmp	r3, #0
 800711a:	d018      	beq.n	800714e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007124:	441a      	add	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	429a      	cmp	r2, r3
 8007134:	d303      	bcc.n	800713e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68d9      	ldr	r1, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	461a      	mov	r2, r3
 8007148:	6838      	ldr	r0, [r7, #0]
 800714a:	f011 fd9f 	bl	8018c8c <memcpy>
	}
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800715e:	f001 fe71 	bl	8008e44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007168:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800716a:	e011      	b.n	8007190 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	2b00      	cmp	r3, #0
 8007172:	d012      	beq.n	800719a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3324      	adds	r3, #36	; 0x24
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fe3f 	bl	8007dfc <xTaskRemoveFromEventList>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007184:	f000 ff16 	bl	8007fb4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
 800718a:	3b01      	subs	r3, #1
 800718c:	b2db      	uxtb	r3, r3
 800718e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007194:	2b00      	cmp	r3, #0
 8007196:	dce9      	bgt.n	800716c <prvUnlockQueue+0x16>
 8007198:	e000      	b.n	800719c <prvUnlockQueue+0x46>
					break;
 800719a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	22ff      	movs	r2, #255	; 0xff
 80071a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80071a4:	f001 fe7e 	bl	8008ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80071a8:	f001 fe4c 	bl	8008e44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071b2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071b4:	e011      	b.n	80071da <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d012      	beq.n	80071e4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	3310      	adds	r3, #16
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fe1a 	bl	8007dfc <xTaskRemoveFromEventList>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d001      	beq.n	80071d2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071ce:	f000 fef1 	bl	8007fb4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071d2:	7bbb      	ldrb	r3, [r7, #14]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	dce9      	bgt.n	80071b6 <prvUnlockQueue+0x60>
 80071e2:	e000      	b.n	80071e6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071e4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	22ff      	movs	r2, #255	; 0xff
 80071ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071ee:	f001 fe59 	bl	8008ea4 <vPortExitCritical>
}
 80071f2:	bf00      	nop
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007202:	f001 fe1f 	bl	8008e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720a:	2b00      	cmp	r3, #0
 800720c:	d102      	bne.n	8007214 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800720e:	2301      	movs	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	e001      	b.n	8007218 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007218:	f001 fe44 	bl	8008ea4 <vPortExitCritical>

	return xReturn;
 800721c:	68fb      	ldr	r3, [r7, #12]
}
 800721e:	4618      	mov	r0, r3
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}

08007226 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007226:	b580      	push	{r7, lr}
 8007228:	b084      	sub	sp, #16
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800722e:	f001 fe09 	bl	8008e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723a:	429a      	cmp	r2, r3
 800723c:	d102      	bne.n	8007244 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800723e:	2301      	movs	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]
 8007242:	e001      	b.n	8007248 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007244:	2300      	movs	r3, #0
 8007246:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007248:	f001 fe2c 	bl	8008ea4 <vPortExitCritical>

	return xReturn;
 800724c:	68fb      	ldr	r3, [r7, #12]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007258:	b480      	push	{r7}
 800725a:	b085      	sub	sp, #20
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
 8007260:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007262:	2300      	movs	r3, #0
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	e014      	b.n	8007292 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007268:	4a0f      	ldr	r2, [pc, #60]	; (80072a8 <vQueueAddToRegistry+0x50>)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10b      	bne.n	800728c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007274:	490c      	ldr	r1, [pc, #48]	; (80072a8 <vQueueAddToRegistry+0x50>)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	683a      	ldr	r2, [r7, #0]
 800727a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800727e:	4a0a      	ldr	r2, [pc, #40]	; (80072a8 <vQueueAddToRegistry+0x50>)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	4413      	add	r3, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800728a:	e006      	b.n	800729a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2b07      	cmp	r3, #7
 8007296:	d9e7      	bls.n	8007268 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007298:	bf00      	nop
 800729a:	bf00      	nop
 800729c:	3714      	adds	r7, #20
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr
 80072a6:	bf00      	nop
 80072a8:	20008408 	.word	0x20008408

080072ac <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	e016      	b.n	80072e8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80072ba:	4a10      	ldr	r2, [pc, #64]	; (80072fc <vQueueUnregisterQueue+0x50>)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	00db      	lsls	r3, r3, #3
 80072c0:	4413      	add	r3, r2
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d10b      	bne.n	80072e2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80072ca:	4a0c      	ldr	r2, [pc, #48]	; (80072fc <vQueueUnregisterQueue+0x50>)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2100      	movs	r1, #0
 80072d0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80072d4:	4a09      	ldr	r2, [pc, #36]	; (80072fc <vQueueUnregisterQueue+0x50>)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	4413      	add	r3, r2
 80072dc:	2200      	movs	r2, #0
 80072de:	605a      	str	r2, [r3, #4]
				break;
 80072e0:	e006      	b.n	80072f0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b07      	cmp	r3, #7
 80072ec:	d9e5      	bls.n	80072ba <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80072ee:	bf00      	nop
 80072f0:	bf00      	nop
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	20008408 	.word	0x20008408

08007300 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	60f8      	str	r0, [r7, #12]
 8007308:	60b9      	str	r1, [r7, #8]
 800730a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007310:	f001 fd98 	bl	8008e44 <vPortEnterCritical>
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800731a:	b25b      	sxtb	r3, r3
 800731c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007320:	d103      	bne.n	800732a <vQueueWaitForMessageRestricted+0x2a>
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007330:	b25b      	sxtb	r3, r3
 8007332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007336:	d103      	bne.n	8007340 <vQueueWaitForMessageRestricted+0x40>
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2200      	movs	r2, #0
 800733c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007340:	f001 fdb0 	bl	8008ea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	3324      	adds	r3, #36	; 0x24
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	68b9      	ldr	r1, [r7, #8]
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fd25 	bl	8007da4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800735a:	6978      	ldr	r0, [r7, #20]
 800735c:	f7ff fefb 	bl	8007156 <prvUnlockQueue>
	}
 8007360:	bf00      	nop
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08e      	sub	sp, #56	; 0x38
 800736c:	af04      	add	r7, sp, #16
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10a      	bne.n	8007392 <xTaskCreateStatic+0x2a>
	__asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	623b      	str	r3, [r7, #32]
}
 800738e:	bf00      	nop
 8007390:	e7fe      	b.n	8007390 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007394:	2b00      	cmp	r3, #0
 8007396:	d10a      	bne.n	80073ae <xTaskCreateStatic+0x46>
	__asm volatile
 8007398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739c:	f383 8811 	msr	BASEPRI, r3
 80073a0:	f3bf 8f6f 	isb	sy
 80073a4:	f3bf 8f4f 	dsb	sy
 80073a8:	61fb      	str	r3, [r7, #28]
}
 80073aa:	bf00      	nop
 80073ac:	e7fe      	b.n	80073ac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80073ae:	235c      	movs	r3, #92	; 0x5c
 80073b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	2b5c      	cmp	r3, #92	; 0x5c
 80073b6:	d00a      	beq.n	80073ce <xTaskCreateStatic+0x66>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	61bb      	str	r3, [r7, #24]
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80073ce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d01e      	beq.n	8007414 <xTaskCreateStatic+0xac>
 80073d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d01b      	beq.n	8007414 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80073dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073de:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	2202      	movs	r2, #2
 80073ea:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80073ee:	2300      	movs	r3, #0
 80073f0:	9303      	str	r3, [sp, #12]
 80073f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f4:	9302      	str	r3, [sp, #8]
 80073f6:	f107 0314 	add.w	r3, r7, #20
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	68b9      	ldr	r1, [r7, #8]
 8007406:	68f8      	ldr	r0, [r7, #12]
 8007408:	f000 f850 	bl	80074ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800740c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800740e:	f000 f8dd 	bl	80075cc <prvAddNewTaskToReadyList>
 8007412:	e001      	b.n	8007418 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007414:	2300      	movs	r3, #0
 8007416:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007418:	697b      	ldr	r3, [r7, #20]
	}
 800741a:	4618      	mov	r0, r3
 800741c:	3728      	adds	r7, #40	; 0x28
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007422:	b580      	push	{r7, lr}
 8007424:	b08c      	sub	sp, #48	; 0x30
 8007426:	af04      	add	r7, sp, #16
 8007428:	60f8      	str	r0, [r7, #12]
 800742a:	60b9      	str	r1, [r7, #8]
 800742c:	603b      	str	r3, [r7, #0]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007432:	88fb      	ldrh	r3, [r7, #6]
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	4618      	mov	r0, r3
 8007438:	f001 fe26 	bl	8009088 <pvPortMalloc>
 800743c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00e      	beq.n	8007462 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007444:	205c      	movs	r0, #92	; 0x5c
 8007446:	f001 fe1f 	bl	8009088 <pvPortMalloc>
 800744a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d003      	beq.n	800745a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	631a      	str	r2, [r3, #48]	; 0x30
 8007458:	e005      	b.n	8007466 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800745a:	6978      	ldr	r0, [r7, #20]
 800745c:	f001 fee0 	bl	8009220 <vPortFree>
 8007460:	e001      	b.n	8007466 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d017      	beq.n	800749c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007474:	88fa      	ldrh	r2, [r7, #6]
 8007476:	2300      	movs	r3, #0
 8007478:	9303      	str	r3, [sp, #12]
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	9302      	str	r3, [sp, #8]
 800747e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007480:	9301      	str	r3, [sp, #4]
 8007482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68b9      	ldr	r1, [r7, #8]
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f000 f80e 	bl	80074ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007490:	69f8      	ldr	r0, [r7, #28]
 8007492:	f000 f89b 	bl	80075cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007496:	2301      	movs	r3, #1
 8007498:	61bb      	str	r3, [r7, #24]
 800749a:	e002      	b.n	80074a2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800749c:	f04f 33ff 	mov.w	r3, #4294967295
 80074a0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80074a2:	69bb      	ldr	r3, [r7, #24]
	}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3720      	adds	r7, #32
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	607a      	str	r2, [r7, #4]
 80074b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	461a      	mov	r2, r3
 80074c4:	21a5      	movs	r1, #165	; 0xa5
 80074c6:	f011 fbef 	bl	8018ca8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80074d4:	3b01      	subs	r3, #1
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f023 0307 	bic.w	r3, r3, #7
 80074e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00a      	beq.n	8007504 <prvInitialiseNewTask+0x58>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	617b      	str	r3, [r7, #20]
}
 8007500:	bf00      	nop
 8007502:	e7fe      	b.n	8007502 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d01f      	beq.n	800754a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800750a:	2300      	movs	r3, #0
 800750c:	61fb      	str	r3, [r7, #28]
 800750e:	e012      	b.n	8007536 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	4413      	add	r3, r2
 8007516:	7819      	ldrb	r1, [r3, #0]
 8007518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	3334      	adds	r3, #52	; 0x34
 8007520:	460a      	mov	r2, r1
 8007522:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	3301      	adds	r3, #1
 8007534:	61fb      	str	r3, [r7, #28]
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	2b0f      	cmp	r3, #15
 800753a:	d9e9      	bls.n	8007510 <prvInitialiseNewTask+0x64>
 800753c:	e000      	b.n	8007540 <prvInitialiseNewTask+0x94>
			{
				break;
 800753e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007542:	2200      	movs	r2, #0
 8007544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007548:	e003      	b.n	8007552 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	2b37      	cmp	r3, #55	; 0x37
 8007556:	d901      	bls.n	800755c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007558:	2337      	movs	r3, #55	; 0x37
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007560:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007566:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	2200      	movs	r2, #0
 800756c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	3304      	adds	r3, #4
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fd64 	bl	8006040 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800757a:	3318      	adds	r3, #24
 800757c:	4618      	mov	r0, r3
 800757e:	f7fe fd5f 	bl	8006040 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007586:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007596:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	2200      	movs	r2, #0
 800759c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800759e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a0:	2200      	movs	r2, #0
 80075a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	68f9      	ldr	r1, [r7, #12]
 80075aa:	69b8      	ldr	r0, [r7, #24]
 80075ac:	f001 fb20 	bl	8008bf0 <pxPortInitialiseStack>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80075b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075c2:	bf00      	nop
 80075c4:	3720      	adds	r7, #32
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
	...

080075cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80075d4:	f001 fc36 	bl	8008e44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80075d8:	4b2d      	ldr	r3, [pc, #180]	; (8007690 <prvAddNewTaskToReadyList+0xc4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	3301      	adds	r3, #1
 80075de:	4a2c      	ldr	r2, [pc, #176]	; (8007690 <prvAddNewTaskToReadyList+0xc4>)
 80075e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80075e2:	4b2c      	ldr	r3, [pc, #176]	; (8007694 <prvAddNewTaskToReadyList+0xc8>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d109      	bne.n	80075fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80075ea:	4a2a      	ldr	r2, [pc, #168]	; (8007694 <prvAddNewTaskToReadyList+0xc8>)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80075f0:	4b27      	ldr	r3, [pc, #156]	; (8007690 <prvAddNewTaskToReadyList+0xc4>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d110      	bne.n	800761a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075f8:	f000 fd00 	bl	8007ffc <prvInitialiseTaskLists>
 80075fc:	e00d      	b.n	800761a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075fe:	4b26      	ldr	r3, [pc, #152]	; (8007698 <prvAddNewTaskToReadyList+0xcc>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007606:	4b23      	ldr	r3, [pc, #140]	; (8007694 <prvAddNewTaskToReadyList+0xc8>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	429a      	cmp	r2, r3
 8007612:	d802      	bhi.n	800761a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007614:	4a1f      	ldr	r2, [pc, #124]	; (8007694 <prvAddNewTaskToReadyList+0xc8>)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800761a:	4b20      	ldr	r3, [pc, #128]	; (800769c <prvAddNewTaskToReadyList+0xd0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	3301      	adds	r3, #1
 8007620:	4a1e      	ldr	r2, [pc, #120]	; (800769c <prvAddNewTaskToReadyList+0xd0>)
 8007622:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007624:	4b1d      	ldr	r3, [pc, #116]	; (800769c <prvAddNewTaskToReadyList+0xd0>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007630:	4b1b      	ldr	r3, [pc, #108]	; (80076a0 <prvAddNewTaskToReadyList+0xd4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d903      	bls.n	8007640 <prvAddNewTaskToReadyList+0x74>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	4a18      	ldr	r2, [pc, #96]	; (80076a0 <prvAddNewTaskToReadyList+0xd4>)
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007644:	4613      	mov	r3, r2
 8007646:	009b      	lsls	r3, r3, #2
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4a15      	ldr	r2, [pc, #84]	; (80076a4 <prvAddNewTaskToReadyList+0xd8>)
 800764e:	441a      	add	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	3304      	adds	r3, #4
 8007654:	4619      	mov	r1, r3
 8007656:	4610      	mov	r0, r2
 8007658:	f7fe fcff 	bl	800605a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800765c:	f001 fc22 	bl	8008ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007660:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <prvAddNewTaskToReadyList+0xcc>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00e      	beq.n	8007686 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007668:	4b0a      	ldr	r3, [pc, #40]	; (8007694 <prvAddNewTaskToReadyList+0xc8>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007672:	429a      	cmp	r2, r3
 8007674:	d207      	bcs.n	8007686 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <prvAddNewTaskToReadyList+0xdc>)
 8007678:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800767c:	601a      	str	r2, [r3, #0]
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000c38 	.word	0x20000c38
 8007694:	20000764 	.word	0x20000764
 8007698:	20000c44 	.word	0x20000c44
 800769c:	20000c54 	.word	0x20000c54
 80076a0:	20000c40 	.word	0x20000c40
 80076a4:	20000768 	.word	0x20000768
 80076a8:	e000ed04 	.word	0xe000ed04

080076ac <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80076b4:	f001 fbc6 	bl	8008e44 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d102      	bne.n	80076c4 <vTaskDelete+0x18>
 80076be:	4b2c      	ldr	r3, [pc, #176]	; (8007770 <vTaskDelete+0xc4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	e000      	b.n	80076c6 <vTaskDelete+0x1a>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3304      	adds	r3, #4
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fe fd21 	bl	8006114 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d004      	beq.n	80076e4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	3318      	adds	r3, #24
 80076de:	4618      	mov	r0, r3
 80076e0:	f7fe fd18 	bl	8006114 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80076e4:	4b23      	ldr	r3, [pc, #140]	; (8007774 <vTaskDelete+0xc8>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3301      	adds	r3, #1
 80076ea:	4a22      	ldr	r2, [pc, #136]	; (8007774 <vTaskDelete+0xc8>)
 80076ec:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80076ee:	4b20      	ldr	r3, [pc, #128]	; (8007770 <vTaskDelete+0xc4>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d10b      	bne.n	8007710 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3304      	adds	r3, #4
 80076fc:	4619      	mov	r1, r3
 80076fe:	481e      	ldr	r0, [pc, #120]	; (8007778 <vTaskDelete+0xcc>)
 8007700:	f7fe fcab 	bl	800605a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8007704:	4b1d      	ldr	r3, [pc, #116]	; (800777c <vTaskDelete+0xd0>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3301      	adds	r3, #1
 800770a:	4a1c      	ldr	r2, [pc, #112]	; (800777c <vTaskDelete+0xd0>)
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	e009      	b.n	8007724 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8007710:	4b1b      	ldr	r3, [pc, #108]	; (8007780 <vTaskDelete+0xd4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	3b01      	subs	r3, #1
 8007716:	4a1a      	ldr	r2, [pc, #104]	; (8007780 <vTaskDelete+0xd4>)
 8007718:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 fcdc 	bl	80080d8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8007720:	f000 fd0a 	bl	8008138 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8007724:	f001 fbbe 	bl	8008ea4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8007728:	4b16      	ldr	r3, [pc, #88]	; (8007784 <vTaskDelete+0xd8>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01b      	beq.n	8007768 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8007730:	4b0f      	ldr	r3, [pc, #60]	; (8007770 <vTaskDelete+0xc4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	429a      	cmp	r2, r3
 8007738:	d116      	bne.n	8007768 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800773a:	4b13      	ldr	r3, [pc, #76]	; (8007788 <vTaskDelete+0xdc>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <vTaskDelete+0xac>
	__asm volatile
 8007742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007746:	f383 8811 	msr	BASEPRI, r3
 800774a:	f3bf 8f6f 	isb	sy
 800774e:	f3bf 8f4f 	dsb	sy
 8007752:	60bb      	str	r3, [r7, #8]
}
 8007754:	bf00      	nop
 8007756:	e7fe      	b.n	8007756 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007758:	4b0c      	ldr	r3, [pc, #48]	; (800778c <vTaskDelete+0xe0>)
 800775a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000764 	.word	0x20000764
 8007774:	20000c54 	.word	0x20000c54
 8007778:	20000c0c 	.word	0x20000c0c
 800777c:	20000c20 	.word	0x20000c20
 8007780:	20000c38 	.word	0x20000c38
 8007784:	20000c44 	.word	0x20000c44
 8007788:	20000c60 	.word	0x20000c60
 800778c:	e000ed04 	.word	0xe000ed04

08007790 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007798:	2300      	movs	r3, #0
 800779a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d017      	beq.n	80077d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077a2:	4b13      	ldr	r3, [pc, #76]	; (80077f0 <vTaskDelay+0x60>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00a      	beq.n	80077c0 <vTaskDelay+0x30>
	__asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	60bb      	str	r3, [r7, #8]
}
 80077bc:	bf00      	nop
 80077be:	e7fe      	b.n	80077be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077c0:	f000 f8e6 	bl	8007990 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077c4:	2100      	movs	r1, #0
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fe70 	bl	80084ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077cc:	f000 f8ee 	bl	80079ac <xTaskResumeAll>
 80077d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d107      	bne.n	80077e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80077d8:	4b06      	ldr	r3, [pc, #24]	; (80077f4 <vTaskDelay+0x64>)
 80077da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80077de:	601a      	str	r2, [r3, #0]
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077e8:	bf00      	nop
 80077ea:	3710      	adds	r7, #16
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	20000c60 	.word	0x20000c60
 80077f4:	e000ed04 	.word	0xe000ed04

080077f8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b088      	sub	sp, #32
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8007804:	69bb      	ldr	r3, [r7, #24]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d10a      	bne.n	8007820 <eTaskGetState+0x28>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60bb      	str	r3, [r7, #8]
}
 800781c:	bf00      	nop
 800781e:	e7fe      	b.n	800781e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007820:	4b23      	ldr	r3, [pc, #140]	; (80078b0 <eTaskGetState+0xb8>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	429a      	cmp	r2, r3
 8007828:	d102      	bne.n	8007830 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 800782a:	2300      	movs	r3, #0
 800782c:	77fb      	strb	r3, [r7, #31]
 800782e:	e03a      	b.n	80078a6 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8007830:	f001 fb08 	bl	8008e44 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	695b      	ldr	r3, [r3, #20]
 8007838:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 800783a:	4b1e      	ldr	r3, [pc, #120]	; (80078b4 <eTaskGetState+0xbc>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8007840:	4b1d      	ldr	r3, [pc, #116]	; (80078b8 <eTaskGetState+0xc0>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8007846:	f001 fb2d 	bl	8008ea4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	429a      	cmp	r2, r3
 8007850:	d003      	beq.n	800785a <eTaskGetState+0x62>
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	429a      	cmp	r2, r3
 8007858:	d102      	bne.n	8007860 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 800785a:	2302      	movs	r3, #2
 800785c:	77fb      	strb	r3, [r7, #31]
 800785e:	e022      	b.n	80078a6 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	4a16      	ldr	r2, [pc, #88]	; (80078bc <eTaskGetState+0xc4>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d112      	bne.n	800788e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10b      	bne.n	8007888 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	d102      	bne.n	8007882 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 800787c:	2302      	movs	r3, #2
 800787e:	77fb      	strb	r3, [r7, #31]
 8007880:	e011      	b.n	80078a6 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8007882:	2303      	movs	r3, #3
 8007884:	77fb      	strb	r3, [r7, #31]
 8007886:	e00e      	b.n	80078a6 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8007888:	2302      	movs	r3, #2
 800788a:	77fb      	strb	r3, [r7, #31]
 800788c:	e00b      	b.n	80078a6 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4a0b      	ldr	r2, [pc, #44]	; (80078c0 <eTaskGetState+0xc8>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d002      	beq.n	800789c <eTaskGetState+0xa4>
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d102      	bne.n	80078a2 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800789c:	2304      	movs	r3, #4
 800789e:	77fb      	strb	r3, [r7, #31]
 80078a0:	e001      	b.n	80078a6 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80078a2:	2301      	movs	r3, #1
 80078a4:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80078a6:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80078a8:	4618      	mov	r0, r3
 80078aa:	3720      	adds	r7, #32
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	20000764 	.word	0x20000764
 80078b4:	20000bf0 	.word	0x20000bf0
 80078b8:	20000bf4 	.word	0x20000bf4
 80078bc:	20000c24 	.word	0x20000c24
 80078c0:	20000c0c 	.word	0x20000c0c

080078c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	; 0x28
 80078c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078ce:	2300      	movs	r3, #0
 80078d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078d2:	463a      	mov	r2, r7
 80078d4:	1d39      	adds	r1, r7, #4
 80078d6:	f107 0308 	add.w	r3, r7, #8
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fb5c 	bl	8005f98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	9202      	str	r2, [sp, #8]
 80078e8:	9301      	str	r3, [sp, #4]
 80078ea:	2300      	movs	r3, #0
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	2300      	movs	r3, #0
 80078f0:	460a      	mov	r2, r1
 80078f2:	4921      	ldr	r1, [pc, #132]	; (8007978 <vTaskStartScheduler+0xb4>)
 80078f4:	4821      	ldr	r0, [pc, #132]	; (800797c <vTaskStartScheduler+0xb8>)
 80078f6:	f7ff fd37 	bl	8007368 <xTaskCreateStatic>
 80078fa:	4603      	mov	r3, r0
 80078fc:	4a20      	ldr	r2, [pc, #128]	; (8007980 <vTaskStartScheduler+0xbc>)
 80078fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007900:	4b1f      	ldr	r3, [pc, #124]	; (8007980 <vTaskStartScheduler+0xbc>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007908:	2301      	movs	r3, #1
 800790a:	617b      	str	r3, [r7, #20]
 800790c:	e001      	b.n	8007912 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800790e:	2300      	movs	r3, #0
 8007910:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d102      	bne.n	800791e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007918:	f000 fe1c 	bl	8008554 <xTimerCreateTimerTask>
 800791c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d116      	bne.n	8007952 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	613b      	str	r3, [r7, #16]
}
 8007936:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <vTaskStartScheduler+0xc0>)
 800793a:	f04f 32ff 	mov.w	r2, #4294967295
 800793e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007940:	4b11      	ldr	r3, [pc, #68]	; (8007988 <vTaskStartScheduler+0xc4>)
 8007942:	2201      	movs	r2, #1
 8007944:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007946:	4b11      	ldr	r3, [pc, #68]	; (800798c <vTaskStartScheduler+0xc8>)
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800794c:	f001 f9d8 	bl	8008d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007950:	e00e      	b.n	8007970 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d10a      	bne.n	8007970 <vTaskStartScheduler+0xac>
	__asm volatile
 800795a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795e:	f383 8811 	msr	BASEPRI, r3
 8007962:	f3bf 8f6f 	isb	sy
 8007966:	f3bf 8f4f 	dsb	sy
 800796a:	60fb      	str	r3, [r7, #12]
}
 800796c:	bf00      	nop
 800796e:	e7fe      	b.n	800796e <vTaskStartScheduler+0xaa>
}
 8007970:	bf00      	nop
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	08019dfc 	.word	0x08019dfc
 800797c:	08007fcd 	.word	0x08007fcd
 8007980:	20000c5c 	.word	0x20000c5c
 8007984:	20000c58 	.word	0x20000c58
 8007988:	20000c44 	.word	0x20000c44
 800798c:	20000c3c 	.word	0x20000c3c

08007990 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007990:	b480      	push	{r7}
 8007992:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007994:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <vTaskSuspendAll+0x18>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3301      	adds	r3, #1
 800799a:	4a03      	ldr	r2, [pc, #12]	; (80079a8 <vTaskSuspendAll+0x18>)
 800799c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800799e:	bf00      	nop
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	20000c60 	.word	0x20000c60

080079ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079b2:	2300      	movs	r3, #0
 80079b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079b6:	2300      	movs	r3, #0
 80079b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079ba:	4b42      	ldr	r3, [pc, #264]	; (8007ac4 <xTaskResumeAll+0x118>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10a      	bne.n	80079d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	603b      	str	r3, [r7, #0]
}
 80079d4:	bf00      	nop
 80079d6:	e7fe      	b.n	80079d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079d8:	f001 fa34 	bl	8008e44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079dc:	4b39      	ldr	r3, [pc, #228]	; (8007ac4 <xTaskResumeAll+0x118>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	4a38      	ldr	r2, [pc, #224]	; (8007ac4 <xTaskResumeAll+0x118>)
 80079e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e6:	4b37      	ldr	r3, [pc, #220]	; (8007ac4 <xTaskResumeAll+0x118>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d162      	bne.n	8007ab4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079ee:	4b36      	ldr	r3, [pc, #216]	; (8007ac8 <xTaskResumeAll+0x11c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d05e      	beq.n	8007ab4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079f6:	e02f      	b.n	8007a58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f8:	4b34      	ldr	r3, [pc, #208]	; (8007acc <xTaskResumeAll+0x120>)
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3318      	adds	r3, #24
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe fb85 	bl	8006114 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f7fe fb80 	bl	8006114 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a18:	4b2d      	ldr	r3, [pc, #180]	; (8007ad0 <xTaskResumeAll+0x124>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d903      	bls.n	8007a28 <xTaskResumeAll+0x7c>
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a24:	4a2a      	ldr	r2, [pc, #168]	; (8007ad0 <xTaskResumeAll+0x124>)
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4a27      	ldr	r2, [pc, #156]	; (8007ad4 <xTaskResumeAll+0x128>)
 8007a36:	441a      	add	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3304      	adds	r3, #4
 8007a3c:	4619      	mov	r1, r3
 8007a3e:	4610      	mov	r0, r2
 8007a40:	f7fe fb0b 	bl	800605a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a48:	4b23      	ldr	r3, [pc, #140]	; (8007ad8 <xTaskResumeAll+0x12c>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d302      	bcc.n	8007a58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007a52:	4b22      	ldr	r3, [pc, #136]	; (8007adc <xTaskResumeAll+0x130>)
 8007a54:	2201      	movs	r2, #1
 8007a56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a58:	4b1c      	ldr	r3, [pc, #112]	; (8007acc <xTaskResumeAll+0x120>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1cb      	bne.n	80079f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a66:	f000 fb67 	bl	8008138 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <xTaskResumeAll+0x134>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d010      	beq.n	8007a98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a76:	f000 f859 	bl	8007b2c <xTaskIncrementTick>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d002      	beq.n	8007a86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007a80:	4b16      	ldr	r3, [pc, #88]	; (8007adc <xTaskResumeAll+0x130>)
 8007a82:	2201      	movs	r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1f1      	bne.n	8007a76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007a92:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <xTaskResumeAll+0x134>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a98:	4b10      	ldr	r3, [pc, #64]	; (8007adc <xTaskResumeAll+0x130>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d009      	beq.n	8007ab4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007aa4:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <xTaskResumeAll+0x138>)
 8007aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ab4:	f001 f9f6 	bl	8008ea4 <vPortExitCritical>

	return xAlreadyYielded;
 8007ab8:	68bb      	ldr	r3, [r7, #8]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000c60 	.word	0x20000c60
 8007ac8:	20000c38 	.word	0x20000c38
 8007acc:	20000bf8 	.word	0x20000bf8
 8007ad0:	20000c40 	.word	0x20000c40
 8007ad4:	20000768 	.word	0x20000768
 8007ad8:	20000764 	.word	0x20000764
 8007adc:	20000c4c 	.word	0x20000c4c
 8007ae0:	20000c48 	.word	0x20000c48
 8007ae4:	e000ed04 	.word	0xe000ed04

08007ae8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <xTaskGetTickCount+0x1c>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007af4:	687b      	ldr	r3, [r7, #4]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000c3c 	.word	0x20000c3c

08007b08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b0e:	f001 fa7b 	bl	8009008 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007b12:	2300      	movs	r3, #0
 8007b14:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007b16:	4b04      	ldr	r3, [pc, #16]	; (8007b28 <xTaskGetTickCountFromISR+0x20>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b1c:	683b      	ldr	r3, [r7, #0]
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20000c3c 	.word	0x20000c3c

08007b2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b086      	sub	sp, #24
 8007b30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b36:	4b4f      	ldr	r3, [pc, #316]	; (8007c74 <xTaskIncrementTick+0x148>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	f040 808f 	bne.w	8007c5e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007b40:	4b4d      	ldr	r3, [pc, #308]	; (8007c78 <xTaskIncrementTick+0x14c>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3301      	adds	r3, #1
 8007b46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007b48:	4a4b      	ldr	r2, [pc, #300]	; (8007c78 <xTaskIncrementTick+0x14c>)
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d120      	bne.n	8007b96 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b54:	4b49      	ldr	r3, [pc, #292]	; (8007c7c <xTaskIncrementTick+0x150>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00a      	beq.n	8007b74 <xTaskIncrementTick+0x48>
	__asm volatile
 8007b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b62:	f383 8811 	msr	BASEPRI, r3
 8007b66:	f3bf 8f6f 	isb	sy
 8007b6a:	f3bf 8f4f 	dsb	sy
 8007b6e:	603b      	str	r3, [r7, #0]
}
 8007b70:	bf00      	nop
 8007b72:	e7fe      	b.n	8007b72 <xTaskIncrementTick+0x46>
 8007b74:	4b41      	ldr	r3, [pc, #260]	; (8007c7c <xTaskIncrementTick+0x150>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	4b41      	ldr	r3, [pc, #260]	; (8007c80 <xTaskIncrementTick+0x154>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a3f      	ldr	r2, [pc, #252]	; (8007c7c <xTaskIncrementTick+0x150>)
 8007b80:	6013      	str	r3, [r2, #0]
 8007b82:	4a3f      	ldr	r2, [pc, #252]	; (8007c80 <xTaskIncrementTick+0x154>)
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	4b3e      	ldr	r3, [pc, #248]	; (8007c84 <xTaskIncrementTick+0x158>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	4a3d      	ldr	r2, [pc, #244]	; (8007c84 <xTaskIncrementTick+0x158>)
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	f000 fad1 	bl	8008138 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b96:	4b3c      	ldr	r3, [pc, #240]	; (8007c88 <xTaskIncrementTick+0x15c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	693a      	ldr	r2, [r7, #16]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d349      	bcc.n	8007c34 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ba0:	4b36      	ldr	r3, [pc, #216]	; (8007c7c <xTaskIncrementTick+0x150>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d104      	bne.n	8007bb4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007baa:	4b37      	ldr	r3, [pc, #220]	; (8007c88 <xTaskIncrementTick+0x15c>)
 8007bac:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb0:	601a      	str	r2, [r3, #0]
					break;
 8007bb2:	e03f      	b.n	8007c34 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bb4:	4b31      	ldr	r3, [pc, #196]	; (8007c7c <xTaskIncrementTick+0x150>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d203      	bcs.n	8007bd4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007bcc:	4a2e      	ldr	r2, [pc, #184]	; (8007c88 <xTaskIncrementTick+0x15c>)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007bd2:	e02f      	b.n	8007c34 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	3304      	adds	r3, #4
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7fe fa9b 	bl	8006114 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	3318      	adds	r3, #24
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fa92 	bl	8006114 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <xTaskIncrementTick+0x160>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d903      	bls.n	8007c04 <xTaskIncrementTick+0xd8>
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	4a22      	ldr	r2, [pc, #136]	; (8007c8c <xTaskIncrementTick+0x160>)
 8007c02:	6013      	str	r3, [r2, #0]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c08:	4613      	mov	r3, r2
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <xTaskIncrementTick+0x164>)
 8007c12:	441a      	add	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	3304      	adds	r3, #4
 8007c18:	4619      	mov	r1, r3
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	f7fe fa1d 	bl	800605a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c24:	4b1b      	ldr	r3, [pc, #108]	; (8007c94 <xTaskIncrementTick+0x168>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2a:	429a      	cmp	r2, r3
 8007c2c:	d3b8      	bcc.n	8007ba0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c32:	e7b5      	b.n	8007ba0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007c34:	4b17      	ldr	r3, [pc, #92]	; (8007c94 <xTaskIncrementTick+0x168>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c3a:	4915      	ldr	r1, [pc, #84]	; (8007c90 <xTaskIncrementTick+0x164>)
 8007c3c:	4613      	mov	r3, r2
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	4413      	add	r3, r2
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	440b      	add	r3, r1
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d901      	bls.n	8007c50 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007c50:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <xTaskIncrementTick+0x16c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	617b      	str	r3, [r7, #20]
 8007c5c:	e004      	b.n	8007c68 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007c5e:	4b0f      	ldr	r3, [pc, #60]	; (8007c9c <xTaskIncrementTick+0x170>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	3301      	adds	r3, #1
 8007c64:	4a0d      	ldr	r2, [pc, #52]	; (8007c9c <xTaskIncrementTick+0x170>)
 8007c66:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007c68:	697b      	ldr	r3, [r7, #20]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000c60 	.word	0x20000c60
 8007c78:	20000c3c 	.word	0x20000c3c
 8007c7c:	20000bf0 	.word	0x20000bf0
 8007c80:	20000bf4 	.word	0x20000bf4
 8007c84:	20000c50 	.word	0x20000c50
 8007c88:	20000c58 	.word	0x20000c58
 8007c8c:	20000c40 	.word	0x20000c40
 8007c90:	20000768 	.word	0x20000768
 8007c94:	20000764 	.word	0x20000764
 8007c98:	20000c4c 	.word	0x20000c4c
 8007c9c:	20000c48 	.word	0x20000c48

08007ca0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b085      	sub	sp, #20
 8007ca4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ca6:	4b28      	ldr	r3, [pc, #160]	; (8007d48 <vTaskSwitchContext+0xa8>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d003      	beq.n	8007cb6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007cae:	4b27      	ldr	r3, [pc, #156]	; (8007d4c <vTaskSwitchContext+0xac>)
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007cb4:	e041      	b.n	8007d3a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007cb6:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <vTaskSwitchContext+0xac>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cbc:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <vTaskSwitchContext+0xb0>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	60fb      	str	r3, [r7, #12]
 8007cc2:	e010      	b.n	8007ce6 <vTaskSwitchContext+0x46>
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d10a      	bne.n	8007ce0 <vTaskSwitchContext+0x40>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cce:	f383 8811 	msr	BASEPRI, r3
 8007cd2:	f3bf 8f6f 	isb	sy
 8007cd6:	f3bf 8f4f 	dsb	sy
 8007cda:	607b      	str	r3, [r7, #4]
}
 8007cdc:	bf00      	nop
 8007cde:	e7fe      	b.n	8007cde <vTaskSwitchContext+0x3e>
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	491b      	ldr	r1, [pc, #108]	; (8007d54 <vTaskSwitchContext+0xb4>)
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	4613      	mov	r3, r2
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	440b      	add	r3, r1
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0e4      	beq.n	8007cc4 <vTaskSwitchContext+0x24>
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	4a13      	ldr	r2, [pc, #76]	; (8007d54 <vTaskSwitchContext+0xb4>)
 8007d06:	4413      	add	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	605a      	str	r2, [r3, #4]
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	3308      	adds	r3, #8
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d104      	bne.n	8007d2a <vTaskSwitchContext+0x8a>
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	605a      	str	r2, [r3, #4]
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	4a09      	ldr	r2, [pc, #36]	; (8007d58 <vTaskSwitchContext+0xb8>)
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	4a06      	ldr	r2, [pc, #24]	; (8007d50 <vTaskSwitchContext+0xb0>)
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6013      	str	r3, [r2, #0]
}
 8007d3a:	bf00      	nop
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	20000c60 	.word	0x20000c60
 8007d4c:	20000c4c 	.word	0x20000c4c
 8007d50:	20000c40 	.word	0x20000c40
 8007d54:	20000768 	.word	0x20000768
 8007d58:	20000764 	.word	0x20000764

08007d5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b084      	sub	sp, #16
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10a      	bne.n	8007d82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	60fb      	str	r3, [r7, #12]
}
 8007d7e:	bf00      	nop
 8007d80:	e7fe      	b.n	8007d80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d82:	4b07      	ldr	r3, [pc, #28]	; (8007da0 <vTaskPlaceOnEventList+0x44>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3318      	adds	r3, #24
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7fe f989 	bl	80060a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d90:	2101      	movs	r1, #1
 8007d92:	6838      	ldr	r0, [r7, #0]
 8007d94:	f000 fb8a 	bl	80084ac <prvAddCurrentTaskToDelayedList>
}
 8007d98:	bf00      	nop
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000764 	.word	0x20000764

08007da4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10a      	bne.n	8007dcc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dba:	f383 8811 	msr	BASEPRI, r3
 8007dbe:	f3bf 8f6f 	isb	sy
 8007dc2:	f3bf 8f4f 	dsb	sy
 8007dc6:	617b      	str	r3, [r7, #20]
}
 8007dc8:	bf00      	nop
 8007dca:	e7fe      	b.n	8007dca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007dcc:	4b0a      	ldr	r3, [pc, #40]	; (8007df8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3318      	adds	r3, #24
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	68f8      	ldr	r0, [r7, #12]
 8007dd6:	f7fe f940 	bl	800605a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d002      	beq.n	8007de6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007de0:	f04f 33ff 	mov.w	r3, #4294967295
 8007de4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	68b8      	ldr	r0, [r7, #8]
 8007dea:	f000 fb5f 	bl	80084ac <prvAddCurrentTaskToDelayedList>
	}
 8007dee:	bf00      	nop
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	20000764 	.word	0x20000764

08007dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b086      	sub	sp, #24
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	60fb      	str	r3, [r7, #12]
}
 8007e24:	bf00      	nop
 8007e26:	e7fe      	b.n	8007e26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	3318      	adds	r3, #24
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f7fe f971 	bl	8006114 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e32:	4b1e      	ldr	r3, [pc, #120]	; (8007eac <xTaskRemoveFromEventList+0xb0>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d11d      	bne.n	8007e76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fe f968 	bl	8006114 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e48:	4b19      	ldr	r3, [pc, #100]	; (8007eb0 <xTaskRemoveFromEventList+0xb4>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d903      	bls.n	8007e58 <xTaskRemoveFromEventList+0x5c>
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	4a16      	ldr	r2, [pc, #88]	; (8007eb0 <xTaskRemoveFromEventList+0xb4>)
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4a13      	ldr	r2, [pc, #76]	; (8007eb4 <xTaskRemoveFromEventList+0xb8>)
 8007e66:	441a      	add	r2, r3
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	3304      	adds	r3, #4
 8007e6c:	4619      	mov	r1, r3
 8007e6e:	4610      	mov	r0, r2
 8007e70:	f7fe f8f3 	bl	800605a <vListInsertEnd>
 8007e74:	e005      	b.n	8007e82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	3318      	adds	r3, #24
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	480e      	ldr	r0, [pc, #56]	; (8007eb8 <xTaskRemoveFromEventList+0xbc>)
 8007e7e:	f7fe f8ec 	bl	800605a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e86:	4b0d      	ldr	r3, [pc, #52]	; (8007ebc <xTaskRemoveFromEventList+0xc0>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d905      	bls.n	8007e9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e90:	2301      	movs	r3, #1
 8007e92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e94:	4b0a      	ldr	r3, [pc, #40]	; (8007ec0 <xTaskRemoveFromEventList+0xc4>)
 8007e96:	2201      	movs	r2, #1
 8007e98:	601a      	str	r2, [r3, #0]
 8007e9a:	e001      	b.n	8007ea0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ea0:	697b      	ldr	r3, [r7, #20]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3718      	adds	r7, #24
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000c60 	.word	0x20000c60
 8007eb0:	20000c40 	.word	0x20000c40
 8007eb4:	20000768 	.word	0x20000768
 8007eb8:	20000bf8 	.word	0x20000bf8
 8007ebc:	20000764 	.word	0x20000764
 8007ec0:	20000c4c 	.word	0x20000c4c

08007ec4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ecc:	4b06      	ldr	r3, [pc, #24]	; (8007ee8 <vTaskInternalSetTimeOutState+0x24>)
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ed4:	4b05      	ldr	r3, [pc, #20]	; (8007eec <vTaskInternalSetTimeOutState+0x28>)
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	605a      	str	r2, [r3, #4]
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr
 8007ee8:	20000c50 	.word	0x20000c50
 8007eec:	20000c3c 	.word	0x20000c3c

08007ef0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10a      	bne.n	8007f16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f04:	f383 8811 	msr	BASEPRI, r3
 8007f08:	f3bf 8f6f 	isb	sy
 8007f0c:	f3bf 8f4f 	dsb	sy
 8007f10:	613b      	str	r3, [r7, #16]
}
 8007f12:	bf00      	nop
 8007f14:	e7fe      	b.n	8007f14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	60fb      	str	r3, [r7, #12]
}
 8007f2e:	bf00      	nop
 8007f30:	e7fe      	b.n	8007f30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007f32:	f000 ff87 	bl	8008e44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007f36:	4b1d      	ldr	r3, [pc, #116]	; (8007fac <xTaskCheckForTimeOut+0xbc>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	69ba      	ldr	r2, [r7, #24]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f4e:	d102      	bne.n	8007f56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61fb      	str	r3, [r7, #28]
 8007f54:	e023      	b.n	8007f9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	4b15      	ldr	r3, [pc, #84]	; (8007fb0 <xTaskCheckForTimeOut+0xc0>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d007      	beq.n	8007f72 <xTaskCheckForTimeOut+0x82>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	69ba      	ldr	r2, [r7, #24]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d302      	bcc.n	8007f72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	e015      	b.n	8007f9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d20b      	bcs.n	8007f94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	1ad2      	subs	r2, r2, r3
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f7ff ff9b 	bl	8007ec4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	61fb      	str	r3, [r7, #28]
 8007f92:	e004      	b.n	8007f9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2200      	movs	r2, #0
 8007f98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f9e:	f000 ff81 	bl	8008ea4 <vPortExitCritical>

	return xReturn;
 8007fa2:	69fb      	ldr	r3, [r7, #28]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3720      	adds	r7, #32
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	20000c3c 	.word	0x20000c3c
 8007fb0:	20000c50 	.word	0x20000c50

08007fb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007fb8:	4b03      	ldr	r3, [pc, #12]	; (8007fc8 <vTaskMissedYield+0x14>)
 8007fba:	2201      	movs	r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
}
 8007fbe:	bf00      	nop
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr
 8007fc8:	20000c4c 	.word	0x20000c4c

08007fcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007fd4:	f000 f852 	bl	800807c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007fd8:	4b06      	ldr	r3, [pc, #24]	; (8007ff4 <prvIdleTask+0x28>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d9f9      	bls.n	8007fd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007fe0:	4b05      	ldr	r3, [pc, #20]	; (8007ff8 <prvIdleTask+0x2c>)
 8007fe2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe6:	601a      	str	r2, [r3, #0]
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ff0:	e7f0      	b.n	8007fd4 <prvIdleTask+0x8>
 8007ff2:	bf00      	nop
 8007ff4:	20000768 	.word	0x20000768
 8007ff8:	e000ed04 	.word	0xe000ed04

08007ffc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008002:	2300      	movs	r3, #0
 8008004:	607b      	str	r3, [r7, #4]
 8008006:	e00c      	b.n	8008022 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	4a12      	ldr	r2, [pc, #72]	; (800805c <prvInitialiseTaskLists+0x60>)
 8008014:	4413      	add	r3, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f7fd fff2 	bl	8006000 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3301      	adds	r3, #1
 8008020:	607b      	str	r3, [r7, #4]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2b37      	cmp	r3, #55	; 0x37
 8008026:	d9ef      	bls.n	8008008 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008028:	480d      	ldr	r0, [pc, #52]	; (8008060 <prvInitialiseTaskLists+0x64>)
 800802a:	f7fd ffe9 	bl	8006000 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800802e:	480d      	ldr	r0, [pc, #52]	; (8008064 <prvInitialiseTaskLists+0x68>)
 8008030:	f7fd ffe6 	bl	8006000 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008034:	480c      	ldr	r0, [pc, #48]	; (8008068 <prvInitialiseTaskLists+0x6c>)
 8008036:	f7fd ffe3 	bl	8006000 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800803a:	480c      	ldr	r0, [pc, #48]	; (800806c <prvInitialiseTaskLists+0x70>)
 800803c:	f7fd ffe0 	bl	8006000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008040:	480b      	ldr	r0, [pc, #44]	; (8008070 <prvInitialiseTaskLists+0x74>)
 8008042:	f7fd ffdd 	bl	8006000 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008046:	4b0b      	ldr	r3, [pc, #44]	; (8008074 <prvInitialiseTaskLists+0x78>)
 8008048:	4a05      	ldr	r2, [pc, #20]	; (8008060 <prvInitialiseTaskLists+0x64>)
 800804a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800804c:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <prvInitialiseTaskLists+0x7c>)
 800804e:	4a05      	ldr	r2, [pc, #20]	; (8008064 <prvInitialiseTaskLists+0x68>)
 8008050:	601a      	str	r2, [r3, #0]
}
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000768 	.word	0x20000768
 8008060:	20000bc8 	.word	0x20000bc8
 8008064:	20000bdc 	.word	0x20000bdc
 8008068:	20000bf8 	.word	0x20000bf8
 800806c:	20000c0c 	.word	0x20000c0c
 8008070:	20000c24 	.word	0x20000c24
 8008074:	20000bf0 	.word	0x20000bf0
 8008078:	20000bf4 	.word	0x20000bf4

0800807c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008082:	e019      	b.n	80080b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008084:	f000 fede 	bl	8008e44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008088:	4b10      	ldr	r3, [pc, #64]	; (80080cc <prvCheckTasksWaitingTermination+0x50>)
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	3304      	adds	r3, #4
 8008094:	4618      	mov	r0, r3
 8008096:	f7fe f83d 	bl	8006114 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800809a:	4b0d      	ldr	r3, [pc, #52]	; (80080d0 <prvCheckTasksWaitingTermination+0x54>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	3b01      	subs	r3, #1
 80080a0:	4a0b      	ldr	r2, [pc, #44]	; (80080d0 <prvCheckTasksWaitingTermination+0x54>)
 80080a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80080a4:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <prvCheckTasksWaitingTermination+0x58>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3b01      	subs	r3, #1
 80080aa:	4a0a      	ldr	r2, [pc, #40]	; (80080d4 <prvCheckTasksWaitingTermination+0x58>)
 80080ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80080ae:	f000 fef9 	bl	8008ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f810 	bl	80080d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080b8:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <prvCheckTasksWaitingTermination+0x58>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e1      	bne.n	8008084 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	20000c0c 	.word	0x20000c0c
 80080d0:	20000c38 	.word	0x20000c38
 80080d4:	20000c20 	.word	0x20000c20

080080d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d108      	bne.n	80080fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 f896 	bl	8009220 <vPortFree>
				vPortFree( pxTCB );
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f001 f893 	bl	8009220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080fa:	e018      	b.n	800812e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008102:	2b01      	cmp	r3, #1
 8008104:	d103      	bne.n	800810e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 f88a 	bl	8009220 <vPortFree>
	}
 800810c:	e00f      	b.n	800812e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008114:	2b02      	cmp	r3, #2
 8008116:	d00a      	beq.n	800812e <prvDeleteTCB+0x56>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	60fb      	str	r3, [r7, #12]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <prvDeleteTCB+0x54>
	}
 800812e:	bf00      	nop
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
	...

08008138 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800813e:	4b0c      	ldr	r3, [pc, #48]	; (8008170 <prvResetNextTaskUnblockTime+0x38>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d104      	bne.n	8008152 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008148:	4b0a      	ldr	r3, [pc, #40]	; (8008174 <prvResetNextTaskUnblockTime+0x3c>)
 800814a:	f04f 32ff 	mov.w	r2, #4294967295
 800814e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008150:	e008      	b.n	8008164 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008152:	4b07      	ldr	r3, [pc, #28]	; (8008170 <prvResetNextTaskUnblockTime+0x38>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	4a04      	ldr	r2, [pc, #16]	; (8008174 <prvResetNextTaskUnblockTime+0x3c>)
 8008162:	6013      	str	r3, [r2, #0]
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	20000bf0 	.word	0x20000bf0
 8008174:	20000c58 	.word	0x20000c58

08008178 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800817e:	4b05      	ldr	r3, [pc, #20]	; (8008194 <xTaskGetCurrentTaskHandle+0x1c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008184:	687b      	ldr	r3, [r7, #4]
	}
 8008186:	4618      	mov	r0, r3
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	20000764 	.word	0x20000764

08008198 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800819e:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <xTaskGetSchedulerState+0x34>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d102      	bne.n	80081ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081a6:	2301      	movs	r3, #1
 80081a8:	607b      	str	r3, [r7, #4]
 80081aa:	e008      	b.n	80081be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081ac:	4b08      	ldr	r3, [pc, #32]	; (80081d0 <xTaskGetSchedulerState+0x38>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d102      	bne.n	80081ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80081b4:	2302      	movs	r3, #2
 80081b6:	607b      	str	r3, [r7, #4]
 80081b8:	e001      	b.n	80081be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80081ba:	2300      	movs	r3, #0
 80081bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80081be:	687b      	ldr	r3, [r7, #4]
	}
 80081c0:	4618      	mov	r0, r3
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	20000c44 	.word	0x20000c44
 80081d0:	20000c60 	.word	0x20000c60

080081d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b084      	sub	sp, #16
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d051      	beq.n	800828e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ee:	4b2a      	ldr	r3, [pc, #168]	; (8008298 <xTaskPriorityInherit+0xc4>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f4:	429a      	cmp	r2, r3
 80081f6:	d241      	bcs.n	800827c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	699b      	ldr	r3, [r3, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	db06      	blt.n	800820e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008200:	4b25      	ldr	r3, [pc, #148]	; (8008298 <xTaskPriorityInherit+0xc4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6959      	ldr	r1, [r3, #20]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008216:	4613      	mov	r3, r2
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4a1f      	ldr	r2, [pc, #124]	; (800829c <xTaskPriorityInherit+0xc8>)
 8008220:	4413      	add	r3, r2
 8008222:	4299      	cmp	r1, r3
 8008224:	d122      	bne.n	800826c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	3304      	adds	r3, #4
 800822a:	4618      	mov	r0, r3
 800822c:	f7fd ff72 	bl	8006114 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008230:	4b19      	ldr	r3, [pc, #100]	; (8008298 <xTaskPriorityInherit+0xc4>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800823e:	4b18      	ldr	r3, [pc, #96]	; (80082a0 <xTaskPriorityInherit+0xcc>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d903      	bls.n	800824e <xTaskPriorityInherit+0x7a>
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824a:	4a15      	ldr	r2, [pc, #84]	; (80082a0 <xTaskPriorityInherit+0xcc>)
 800824c:	6013      	str	r3, [r2, #0]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008252:	4613      	mov	r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4a10      	ldr	r2, [pc, #64]	; (800829c <xTaskPriorityInherit+0xc8>)
 800825c:	441a      	add	r2, r3
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	3304      	adds	r3, #4
 8008262:	4619      	mov	r1, r3
 8008264:	4610      	mov	r0, r2
 8008266:	f7fd fef8 	bl	800605a <vListInsertEnd>
 800826a:	e004      	b.n	8008276 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <xTaskPriorityInherit+0xc4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008276:	2301      	movs	r3, #1
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	e008      	b.n	800828e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008280:	4b05      	ldr	r3, [pc, #20]	; (8008298 <xTaskPriorityInherit+0xc4>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	429a      	cmp	r2, r3
 8008288:	d201      	bcs.n	800828e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800828a:	2301      	movs	r3, #1
 800828c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800828e:	68fb      	ldr	r3, [r7, #12]
	}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	20000764 	.word	0x20000764
 800829c:	20000768 	.word	0x20000768
 80082a0:	20000c40 	.word	0x20000c40

080082a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b086      	sub	sp, #24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d056      	beq.n	8008368 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082ba:	4b2e      	ldr	r3, [pc, #184]	; (8008374 <xTaskPriorityDisinherit+0xd0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	693a      	ldr	r2, [r7, #16]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d00a      	beq.n	80082da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80082c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c8:	f383 8811 	msr	BASEPRI, r3
 80082cc:	f3bf 8f6f 	isb	sy
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	60fb      	str	r3, [r7, #12]
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10a      	bne.n	80082f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	60bb      	str	r3, [r7, #8]
}
 80082f4:	bf00      	nop
 80082f6:	e7fe      	b.n	80082f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082fc:	1e5a      	subs	r2, r3, #1
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800830a:	429a      	cmp	r2, r3
 800830c:	d02c      	beq.n	8008368 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008312:	2b00      	cmp	r3, #0
 8008314:	d128      	bne.n	8008368 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	3304      	adds	r3, #4
 800831a:	4618      	mov	r0, r3
 800831c:	f7fd fefa 	bl	8006114 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800832c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <xTaskPriorityDisinherit+0xd4>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d903      	bls.n	8008348 <xTaskPriorityDisinherit+0xa4>
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	4a0c      	ldr	r2, [pc, #48]	; (8008378 <xTaskPriorityDisinherit+0xd4>)
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	4613      	mov	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	4a09      	ldr	r2, [pc, #36]	; (800837c <xTaskPriorityDisinherit+0xd8>)
 8008356:	441a      	add	r2, r3
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	3304      	adds	r3, #4
 800835c:	4619      	mov	r1, r3
 800835e:	4610      	mov	r0, r2
 8008360:	f7fd fe7b 	bl	800605a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008364:	2301      	movs	r3, #1
 8008366:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008368:	697b      	ldr	r3, [r7, #20]
	}
 800836a:	4618      	mov	r0, r3
 800836c:	3718      	adds	r7, #24
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	20000764 	.word	0x20000764
 8008378:	20000c40 	.word	0x20000c40
 800837c:	20000768 	.word	0x20000768

08008380 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800838e:	2301      	movs	r3, #1
 8008390:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d06a      	beq.n	800846e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10a      	bne.n	80083b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	60fb      	str	r3, [r7, #12]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d902      	bls.n	80083c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	61fb      	str	r3, [r7, #28]
 80083c4:	e002      	b.n	80083cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083d0:	69fa      	ldr	r2, [r7, #28]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d04b      	beq.n	800846e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80083d6:	69bb      	ldr	r3, [r7, #24]
 80083d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d146      	bne.n	800846e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80083e0:	4b25      	ldr	r3, [pc, #148]	; (8008478 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	69ba      	ldr	r2, [r7, #24]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d10a      	bne.n	8008400 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	60bb      	str	r3, [r7, #8]
}
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008404:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	69fa      	ldr	r2, [r7, #28]
 800840a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	699b      	ldr	r3, [r3, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	db04      	blt.n	800841e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800841e:	69bb      	ldr	r3, [r7, #24]
 8008420:	6959      	ldr	r1, [r3, #20]
 8008422:	693a      	ldr	r2, [r7, #16]
 8008424:	4613      	mov	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	4413      	add	r3, r2
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	4a13      	ldr	r2, [pc, #76]	; (800847c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800842e:	4413      	add	r3, r2
 8008430:	4299      	cmp	r1, r3
 8008432:	d11c      	bne.n	800846e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008434:	69bb      	ldr	r3, [r7, #24]
 8008436:	3304      	adds	r3, #4
 8008438:	4618      	mov	r0, r3
 800843a:	f7fd fe6b 	bl	8006114 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008442:	4b0f      	ldr	r3, [pc, #60]	; (8008480 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	429a      	cmp	r2, r3
 8008448:	d903      	bls.n	8008452 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844e:	4a0c      	ldr	r2, [pc, #48]	; (8008480 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008450:	6013      	str	r3, [r2, #0]
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008456:	4613      	mov	r3, r2
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4a07      	ldr	r2, [pc, #28]	; (800847c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008460:	441a      	add	r2, r3
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	3304      	adds	r3, #4
 8008466:	4619      	mov	r1, r3
 8008468:	4610      	mov	r0, r2
 800846a:	f7fd fdf6 	bl	800605a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800846e:	bf00      	nop
 8008470:	3720      	adds	r7, #32
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	20000764 	.word	0x20000764
 800847c:	20000768 	.word	0x20000768
 8008480:	20000c40 	.word	0x20000c40

08008484 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008484:	b480      	push	{r7}
 8008486:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008488:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008490:	4b05      	ldr	r3, [pc, #20]	; (80084a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008496:	3201      	adds	r2, #1
 8008498:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800849a:	4b03      	ldr	r3, [pc, #12]	; (80084a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800849c:	681b      	ldr	r3, [r3, #0]
	}
 800849e:	4618      	mov	r0, r3
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr
 80084a8:	20000764 	.word	0x20000764

080084ac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80084b6:	4b21      	ldr	r3, [pc, #132]	; (800853c <prvAddCurrentTaskToDelayedList+0x90>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084bc:	4b20      	ldr	r3, [pc, #128]	; (8008540 <prvAddCurrentTaskToDelayedList+0x94>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3304      	adds	r3, #4
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7fd fe26 	bl	8006114 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ce:	d10a      	bne.n	80084e6 <prvAddCurrentTaskToDelayedList+0x3a>
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084d6:	4b1a      	ldr	r3, [pc, #104]	; (8008540 <prvAddCurrentTaskToDelayedList+0x94>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	3304      	adds	r3, #4
 80084dc:	4619      	mov	r1, r3
 80084de:	4819      	ldr	r0, [pc, #100]	; (8008544 <prvAddCurrentTaskToDelayedList+0x98>)
 80084e0:	f7fd fdbb 	bl	800605a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80084e4:	e026      	b.n	8008534 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4413      	add	r3, r2
 80084ec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80084ee:	4b14      	ldr	r3, [pc, #80]	; (8008540 <prvAddCurrentTaskToDelayedList+0x94>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68ba      	ldr	r2, [r7, #8]
 80084f4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d209      	bcs.n	8008512 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084fe:	4b12      	ldr	r3, [pc, #72]	; (8008548 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	4b0f      	ldr	r3, [pc, #60]	; (8008540 <prvAddCurrentTaskToDelayedList+0x94>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	3304      	adds	r3, #4
 8008508:	4619      	mov	r1, r3
 800850a:	4610      	mov	r0, r2
 800850c:	f7fd fdc9 	bl	80060a2 <vListInsert>
}
 8008510:	e010      	b.n	8008534 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008512:	4b0e      	ldr	r3, [pc, #56]	; (800854c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	4b0a      	ldr	r3, [pc, #40]	; (8008540 <prvAddCurrentTaskToDelayedList+0x94>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3304      	adds	r3, #4
 800851c:	4619      	mov	r1, r3
 800851e:	4610      	mov	r0, r2
 8008520:	f7fd fdbf 	bl	80060a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008524:	4b0a      	ldr	r3, [pc, #40]	; (8008550 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68ba      	ldr	r2, [r7, #8]
 800852a:	429a      	cmp	r2, r3
 800852c:	d202      	bcs.n	8008534 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800852e:	4a08      	ldr	r2, [pc, #32]	; (8008550 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	6013      	str	r3, [r2, #0]
}
 8008534:	bf00      	nop
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000c3c 	.word	0x20000c3c
 8008540:	20000764 	.word	0x20000764
 8008544:	20000c24 	.word	0x20000c24
 8008548:	20000bf4 	.word	0x20000bf4
 800854c:	20000bf0 	.word	0x20000bf0
 8008550:	20000c58 	.word	0x20000c58

08008554 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	; 0x28
 8008558:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800855a:	2300      	movs	r3, #0
 800855c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800855e:	f000 fb07 	bl	8008b70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008562:	4b1c      	ldr	r3, [pc, #112]	; (80085d4 <xTimerCreateTimerTask+0x80>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d021      	beq.n	80085ae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800856e:	2300      	movs	r3, #0
 8008570:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008572:	1d3a      	adds	r2, r7, #4
 8008574:	f107 0108 	add.w	r1, r7, #8
 8008578:	f107 030c 	add.w	r3, r7, #12
 800857c:	4618      	mov	r0, r3
 800857e:	f7fd fd25 	bl	8005fcc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008582:	6879      	ldr	r1, [r7, #4]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	9202      	str	r2, [sp, #8]
 800858a:	9301      	str	r3, [sp, #4]
 800858c:	2302      	movs	r3, #2
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	2300      	movs	r3, #0
 8008592:	460a      	mov	r2, r1
 8008594:	4910      	ldr	r1, [pc, #64]	; (80085d8 <xTimerCreateTimerTask+0x84>)
 8008596:	4811      	ldr	r0, [pc, #68]	; (80085dc <xTimerCreateTimerTask+0x88>)
 8008598:	f7fe fee6 	bl	8007368 <xTaskCreateStatic>
 800859c:	4603      	mov	r3, r0
 800859e:	4a10      	ldr	r2, [pc, #64]	; (80085e0 <xTimerCreateTimerTask+0x8c>)
 80085a0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80085a2:	4b0f      	ldr	r3, [pc, #60]	; (80085e0 <xTimerCreateTimerTask+0x8c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d001      	beq.n	80085ae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80085aa:	2301      	movs	r3, #1
 80085ac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d10a      	bne.n	80085ca <xTimerCreateTimerTask+0x76>
	__asm volatile
 80085b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b8:	f383 8811 	msr	BASEPRI, r3
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f3bf 8f4f 	dsb	sy
 80085c4:	613b      	str	r3, [r7, #16]
}
 80085c6:	bf00      	nop
 80085c8:	e7fe      	b.n	80085c8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80085ca:	697b      	ldr	r3, [r7, #20]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000c94 	.word	0x20000c94
 80085d8:	08019e04 	.word	0x08019e04
 80085dc:	08008719 	.word	0x08008719
 80085e0:	20000c98 	.word	0x20000c98

080085e4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b08a      	sub	sp, #40	; 0x28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10a      	bne.n	8008612 <xTimerGenericCommand+0x2e>
	__asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	623b      	str	r3, [r7, #32]
}
 800860e:	bf00      	nop
 8008610:	e7fe      	b.n	8008610 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008612:	4b1a      	ldr	r3, [pc, #104]	; (800867c <xTimerGenericCommand+0x98>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d02a      	beq.n	8008670 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b05      	cmp	r3, #5
 800862a:	dc18      	bgt.n	800865e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800862c:	f7ff fdb4 	bl	8008198 <xTaskGetSchedulerState>
 8008630:	4603      	mov	r3, r0
 8008632:	2b02      	cmp	r3, #2
 8008634:	d109      	bne.n	800864a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008636:	4b11      	ldr	r3, [pc, #68]	; (800867c <xTimerGenericCommand+0x98>)
 8008638:	6818      	ldr	r0, [r3, #0]
 800863a:	f107 0110 	add.w	r1, r7, #16
 800863e:	2300      	movs	r3, #0
 8008640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008642:	f7fd ffef 	bl	8006624 <xQueueGenericSend>
 8008646:	6278      	str	r0, [r7, #36]	; 0x24
 8008648:	e012      	b.n	8008670 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800864a:	4b0c      	ldr	r3, [pc, #48]	; (800867c <xTimerGenericCommand+0x98>)
 800864c:	6818      	ldr	r0, [r3, #0]
 800864e:	f107 0110 	add.w	r1, r7, #16
 8008652:	2300      	movs	r3, #0
 8008654:	2200      	movs	r2, #0
 8008656:	f7fd ffe5 	bl	8006624 <xQueueGenericSend>
 800865a:	6278      	str	r0, [r7, #36]	; 0x24
 800865c:	e008      	b.n	8008670 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800865e:	4b07      	ldr	r3, [pc, #28]	; (800867c <xTimerGenericCommand+0x98>)
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f107 0110 	add.w	r1, r7, #16
 8008666:	2300      	movs	r3, #0
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	f7fe f8d9 	bl	8006820 <xQueueGenericSendFromISR>
 800866e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008672:	4618      	mov	r0, r3
 8008674:	3728      	adds	r7, #40	; 0x28
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20000c94 	.word	0x20000c94

08008680 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b088      	sub	sp, #32
 8008684:	af02      	add	r7, sp, #8
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800868a:	4b22      	ldr	r3, [pc, #136]	; (8008714 <prvProcessExpiredTimer+0x94>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	3304      	adds	r3, #4
 8008698:	4618      	mov	r0, r3
 800869a:	f7fd fd3b 	bl	8006114 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d022      	beq.n	80086f2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	18d1      	adds	r1, r2, r3
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	6978      	ldr	r0, [r7, #20]
 80086ba:	f000 f8d1 	bl	8008860 <prvInsertTimerInActiveList>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d01f      	beq.n	8008704 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086c4:	2300      	movs	r3, #0
 80086c6:	9300      	str	r3, [sp, #0]
 80086c8:	2300      	movs	r3, #0
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	2100      	movs	r1, #0
 80086ce:	6978      	ldr	r0, [r7, #20]
 80086d0:	f7ff ff88 	bl	80085e4 <xTimerGenericCommand>
 80086d4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d113      	bne.n	8008704 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	60fb      	str	r3, [r7, #12]
}
 80086ee:	bf00      	nop
 80086f0:	e7fe      	b.n	80086f0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086f8:	f023 0301 	bic.w	r3, r3, #1
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	6a1b      	ldr	r3, [r3, #32]
 8008708:	6978      	ldr	r0, [r7, #20]
 800870a:	4798      	blx	r3
}
 800870c:	bf00      	nop
 800870e:	3718      	adds	r7, #24
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	20000c8c 	.word	0x20000c8c

08008718 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008720:	f107 0308 	add.w	r3, r7, #8
 8008724:	4618      	mov	r0, r3
 8008726:	f000 f857 	bl	80087d8 <prvGetNextExpireTime>
 800872a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	4619      	mov	r1, r3
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 f803 	bl	800873c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008736:	f000 f8d5 	bl	80088e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800873a:	e7f1      	b.n	8008720 <prvTimerTask+0x8>

0800873c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008746:	f7ff f923 	bl	8007990 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800874a:	f107 0308 	add.w	r3, r7, #8
 800874e:	4618      	mov	r0, r3
 8008750:	f000 f866 	bl	8008820 <prvSampleTimeNow>
 8008754:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d130      	bne.n	80087be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <prvProcessTimerOrBlockTask+0x3c>
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	429a      	cmp	r2, r3
 8008768:	d806      	bhi.n	8008778 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800876a:	f7ff f91f 	bl	80079ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800876e:	68f9      	ldr	r1, [r7, #12]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f7ff ff85 	bl	8008680 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008776:	e024      	b.n	80087c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d008      	beq.n	8008790 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800877e:	4b13      	ldr	r3, [pc, #76]	; (80087cc <prvProcessTimerOrBlockTask+0x90>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <prvProcessTimerOrBlockTask+0x50>
 8008788:	2301      	movs	r3, #1
 800878a:	e000      	b.n	800878e <prvProcessTimerOrBlockTask+0x52>
 800878c:	2300      	movs	r3, #0
 800878e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008790:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <prvProcessTimerOrBlockTask+0x94>)
 8008792:	6818      	ldr	r0, [r3, #0]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	683a      	ldr	r2, [r7, #0]
 800879c:	4619      	mov	r1, r3
 800879e:	f7fe fdaf 	bl	8007300 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80087a2:	f7ff f903 	bl	80079ac <xTaskResumeAll>
 80087a6:	4603      	mov	r3, r0
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80087ac:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <prvProcessTimerOrBlockTask+0x98>)
 80087ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087b2:	601a      	str	r2, [r3, #0]
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	f3bf 8f6f 	isb	sy
}
 80087bc:	e001      	b.n	80087c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80087be:	f7ff f8f5 	bl	80079ac <xTaskResumeAll>
}
 80087c2:	bf00      	nop
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20000c90 	.word	0x20000c90
 80087d0:	20000c94 	.word	0x20000c94
 80087d4:	e000ed04 	.word	0xe000ed04

080087d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80087e0:	4b0e      	ldr	r3, [pc, #56]	; (800881c <prvGetNextExpireTime+0x44>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <prvGetNextExpireTime+0x16>
 80087ea:	2201      	movs	r2, #1
 80087ec:	e000      	b.n	80087f0 <prvGetNextExpireTime+0x18>
 80087ee:	2200      	movs	r2, #0
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d105      	bne.n	8008808 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087fc:	4b07      	ldr	r3, [pc, #28]	; (800881c <prvGetNextExpireTime+0x44>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	60fb      	str	r3, [r7, #12]
 8008806:	e001      	b.n	800880c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800880c:	68fb      	ldr	r3, [r7, #12]
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	20000c8c 	.word	0x20000c8c

08008820 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008828:	f7ff f95e 	bl	8007ae8 <xTaskGetTickCount>
 800882c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800882e:	4b0b      	ldr	r3, [pc, #44]	; (800885c <prvSampleTimeNow+0x3c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	429a      	cmp	r2, r3
 8008836:	d205      	bcs.n	8008844 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008838:	f000 f936 	bl	8008aa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	e002      	b.n	800884a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2200      	movs	r2, #0
 8008848:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800884a:	4a04      	ldr	r2, [pc, #16]	; (800885c <prvSampleTimeNow+0x3c>)
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008850:	68fb      	ldr	r3, [r7, #12]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
 800885a:	bf00      	nop
 800885c:	20000c9c 	.word	0x20000c9c

08008860 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b086      	sub	sp, #24
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
 800886c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800886e:	2300      	movs	r3, #0
 8008870:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	68ba      	ldr	r2, [r7, #8]
 8008876:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	429a      	cmp	r2, r3
 8008884:	d812      	bhi.n	80088ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	1ad2      	subs	r2, r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	429a      	cmp	r2, r3
 8008892:	d302      	bcc.n	800889a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008894:	2301      	movs	r3, #1
 8008896:	617b      	str	r3, [r7, #20]
 8008898:	e01b      	b.n	80088d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800889a:	4b10      	ldr	r3, [pc, #64]	; (80088dc <prvInsertTimerInActiveList+0x7c>)
 800889c:	681a      	ldr	r2, [r3, #0]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3304      	adds	r3, #4
 80088a2:	4619      	mov	r1, r3
 80088a4:	4610      	mov	r0, r2
 80088a6:	f7fd fbfc 	bl	80060a2 <vListInsert>
 80088aa:	e012      	b.n	80088d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	429a      	cmp	r2, r3
 80088b2:	d206      	bcs.n	80088c2 <prvInsertTimerInActiveList+0x62>
 80088b4:	68ba      	ldr	r2, [r7, #8]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d302      	bcc.n	80088c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80088bc:	2301      	movs	r3, #1
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	e007      	b.n	80088d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80088c2:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <prvInsertTimerInActiveList+0x80>)
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4619      	mov	r1, r3
 80088cc:	4610      	mov	r0, r2
 80088ce:	f7fd fbe8 	bl	80060a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80088d2:	697b      	ldr	r3, [r7, #20]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	20000c90 	.word	0x20000c90
 80088e0:	20000c8c 	.word	0x20000c8c

080088e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08e      	sub	sp, #56	; 0x38
 80088e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088ea:	e0ca      	b.n	8008a82 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da18      	bge.n	8008924 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80088f2:	1d3b      	adds	r3, r7, #4
 80088f4:	3304      	adds	r3, #4
 80088f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80088f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10a      	bne.n	8008914 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	61fb      	str	r3, [r7, #28]
}
 8008910:	bf00      	nop
 8008912:	e7fe      	b.n	8008912 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800891a:	6850      	ldr	r0, [r2, #4]
 800891c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800891e:	6892      	ldr	r2, [r2, #8]
 8008920:	4611      	mov	r1, r2
 8008922:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	f2c0 80aa 	blt.w	8008a80 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008932:	695b      	ldr	r3, [r3, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d004      	beq.n	8008942 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800893a:	3304      	adds	r3, #4
 800893c:	4618      	mov	r0, r3
 800893e:	f7fd fbe9 	bl	8006114 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008942:	463b      	mov	r3, r7
 8008944:	4618      	mov	r0, r3
 8008946:	f7ff ff6b 	bl	8008820 <prvSampleTimeNow>
 800894a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2b09      	cmp	r3, #9
 8008950:	f200 8097 	bhi.w	8008a82 <prvProcessReceivedCommands+0x19e>
 8008954:	a201      	add	r2, pc, #4	; (adr r2, 800895c <prvProcessReceivedCommands+0x78>)
 8008956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895a:	bf00      	nop
 800895c:	08008985 	.word	0x08008985
 8008960:	08008985 	.word	0x08008985
 8008964:	08008985 	.word	0x08008985
 8008968:	080089f9 	.word	0x080089f9
 800896c:	08008a0d 	.word	0x08008a0d
 8008970:	08008a57 	.word	0x08008a57
 8008974:	08008985 	.word	0x08008985
 8008978:	08008985 	.word	0x08008985
 800897c:	080089f9 	.word	0x080089f9
 8008980:	08008a0d 	.word	0x08008a0d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800898a:	f043 0301 	orr.w	r3, r3, #1
 800898e:	b2da      	uxtb	r2, r3
 8008990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	18d1      	adds	r1, r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089a4:	f7ff ff5c 	bl	8008860 <prvInsertTimerInActiveList>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d069      	beq.n	8008a82 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089bc:	f003 0304 	and.w	r3, r3, #4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d05e      	beq.n	8008a82 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80089c4:	68ba      	ldr	r2, [r7, #8]
 80089c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	441a      	add	r2, r3
 80089cc:	2300      	movs	r3, #0
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	2300      	movs	r3, #0
 80089d2:	2100      	movs	r1, #0
 80089d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089d6:	f7ff fe05 	bl	80085e4 <xTimerGenericCommand>
 80089da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80089dc:	6a3b      	ldr	r3, [r7, #32]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d14f      	bne.n	8008a82 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	61bb      	str	r3, [r7, #24]
}
 80089f4:	bf00      	nop
 80089f6:	e7fe      	b.n	80089f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80089fe:	f023 0301 	bic.w	r3, r3, #1
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008a0a:	e03a      	b.n	8008a82 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a12:	f043 0301 	orr.w	r3, r3, #1
 8008a16:	b2da      	uxtb	r2, r3
 8008a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a22:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a30:	f383 8811 	msr	BASEPRI, r3
 8008a34:	f3bf 8f6f 	isb	sy
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	617b      	str	r3, [r7, #20]
}
 8008a3e:	bf00      	nop
 8008a40:	e7fe      	b.n	8008a40 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	699a      	ldr	r2, [r3, #24]
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	18d1      	adds	r1, r2, r3
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a50:	f7ff ff06 	bl	8008860 <prvInsertTimerInActiveList>
					break;
 8008a54:	e015      	b.n	8008a82 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a5c:	f003 0302 	and.w	r3, r3, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d103      	bne.n	8008a6c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a66:	f000 fbdb 	bl	8009220 <vPortFree>
 8008a6a:	e00a      	b.n	8008a82 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a72:	f023 0301 	bic.w	r3, r3, #1
 8008a76:	b2da      	uxtb	r2, r3
 8008a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a7e:	e000      	b.n	8008a82 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008a80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a82:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <prvProcessReceivedCommands+0x1c0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	1d39      	adds	r1, r7, #4
 8008a88:	2200      	movs	r2, #0
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fd fff0 	bl	8006a70 <xQueueReceive>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	f47f af2a 	bne.w	80088ec <prvProcessReceivedCommands+0x8>
	}
}
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
 8008a9c:	3730      	adds	r7, #48	; 0x30
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000c94 	.word	0x20000c94

08008aa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008aae:	e048      	b.n	8008b42 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ab0:	4b2d      	ldr	r3, [pc, #180]	; (8008b68 <prvSwitchTimerLists+0xc0>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aba:	4b2b      	ldr	r3, [pc, #172]	; (8008b68 <prvSwitchTimerLists+0xc0>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fd fb23 	bl	8006114 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d02e      	beq.n	8008b42 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	693a      	ldr	r2, [r7, #16]
 8008aea:	4413      	add	r3, r2
 8008aec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008aee:	68ba      	ldr	r2, [r7, #8]
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	429a      	cmp	r2, r3
 8008af4:	d90e      	bls.n	8008b14 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68fa      	ldr	r2, [r7, #12]
 8008b00:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b02:	4b19      	ldr	r3, [pc, #100]	; (8008b68 <prvSwitchTimerLists+0xc0>)
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3304      	adds	r3, #4
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4610      	mov	r0, r2
 8008b0e:	f7fd fac8 	bl	80060a2 <vListInsert>
 8008b12:	e016      	b.n	8008b42 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b14:	2300      	movs	r3, #0
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	2300      	movs	r3, #0
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f7ff fd60 	bl	80085e4 <xTimerGenericCommand>
 8008b24:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10a      	bne.n	8008b42 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	603b      	str	r3, [r7, #0]
}
 8008b3e:	bf00      	nop
 8008b40:	e7fe      	b.n	8008b40 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b42:	4b09      	ldr	r3, [pc, #36]	; (8008b68 <prvSwitchTimerLists+0xc0>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d1b1      	bne.n	8008ab0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b4c:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <prvSwitchTimerLists+0xc0>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b52:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <prvSwitchTimerLists+0xc4>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a04      	ldr	r2, [pc, #16]	; (8008b68 <prvSwitchTimerLists+0xc0>)
 8008b58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b5a:	4a04      	ldr	r2, [pc, #16]	; (8008b6c <prvSwitchTimerLists+0xc4>)
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	6013      	str	r3, [r2, #0]
}
 8008b60:	bf00      	nop
 8008b62:	3718      	adds	r7, #24
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20000c8c 	.word	0x20000c8c
 8008b6c:	20000c90 	.word	0x20000c90

08008b70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b76:	f000 f965 	bl	8008e44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b7a:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <prvCheckForValidListAndQueue+0x60>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d120      	bne.n	8008bc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b82:	4814      	ldr	r0, [pc, #80]	; (8008bd4 <prvCheckForValidListAndQueue+0x64>)
 8008b84:	f7fd fa3c 	bl	8006000 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b88:	4813      	ldr	r0, [pc, #76]	; (8008bd8 <prvCheckForValidListAndQueue+0x68>)
 8008b8a:	f7fd fa39 	bl	8006000 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b8e:	4b13      	ldr	r3, [pc, #76]	; (8008bdc <prvCheckForValidListAndQueue+0x6c>)
 8008b90:	4a10      	ldr	r2, [pc, #64]	; (8008bd4 <prvCheckForValidListAndQueue+0x64>)
 8008b92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b94:	4b12      	ldr	r3, [pc, #72]	; (8008be0 <prvCheckForValidListAndQueue+0x70>)
 8008b96:	4a10      	ldr	r2, [pc, #64]	; (8008bd8 <prvCheckForValidListAndQueue+0x68>)
 8008b98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4b11      	ldr	r3, [pc, #68]	; (8008be4 <prvCheckForValidListAndQueue+0x74>)
 8008ba0:	4a11      	ldr	r2, [pc, #68]	; (8008be8 <prvCheckForValidListAndQueue+0x78>)
 8008ba2:	2110      	movs	r1, #16
 8008ba4:	200a      	movs	r0, #10
 8008ba6:	f7fd fb47 	bl	8006238 <xQueueGenericCreateStatic>
 8008baa:	4603      	mov	r3, r0
 8008bac:	4a08      	ldr	r2, [pc, #32]	; (8008bd0 <prvCheckForValidListAndQueue+0x60>)
 8008bae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008bb0:	4b07      	ldr	r3, [pc, #28]	; (8008bd0 <prvCheckForValidListAndQueue+0x60>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008bb8:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <prvCheckForValidListAndQueue+0x60>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	490b      	ldr	r1, [pc, #44]	; (8008bec <prvCheckForValidListAndQueue+0x7c>)
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fe fb4a 	bl	8007258 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008bc4:	f000 f96e 	bl	8008ea4 <vPortExitCritical>
}
 8008bc8:	bf00      	nop
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	20000c94 	.word	0x20000c94
 8008bd4:	20000c64 	.word	0x20000c64
 8008bd8:	20000c78 	.word	0x20000c78
 8008bdc:	20000c8c 	.word	0x20000c8c
 8008be0:	20000c90 	.word	0x20000c90
 8008be4:	20000d40 	.word	0x20000d40
 8008be8:	20000ca0 	.word	0x20000ca0
 8008bec:	08019e0c 	.word	0x08019e0c

08008bf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	3b04      	subs	r3, #4
 8008c00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	3b04      	subs	r3, #4
 8008c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	f023 0201 	bic.w	r2, r3, #1
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	3b04      	subs	r3, #4
 8008c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c20:	4a0c      	ldr	r2, [pc, #48]	; (8008c54 <pxPortInitialiseStack+0x64>)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3b14      	subs	r3, #20
 8008c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c2c:	687a      	ldr	r2, [r7, #4]
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3b04      	subs	r3, #4
 8008c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f06f 0202 	mvn.w	r2, #2
 8008c3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	3b20      	subs	r3, #32
 8008c44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c46:	68fb      	ldr	r3, [r7, #12]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr
 8008c54:	08008c59 	.word	0x08008c59

08008c58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c62:	4b12      	ldr	r3, [pc, #72]	; (8008cac <prvTaskExitError+0x54>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c6a:	d00a      	beq.n	8008c82 <prvTaskExitError+0x2a>
	__asm volatile
 8008c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c70:	f383 8811 	msr	BASEPRI, r3
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	60fb      	str	r3, [r7, #12]
}
 8008c7e:	bf00      	nop
 8008c80:	e7fe      	b.n	8008c80 <prvTaskExitError+0x28>
	__asm volatile
 8008c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c86:	f383 8811 	msr	BASEPRI, r3
 8008c8a:	f3bf 8f6f 	isb	sy
 8008c8e:	f3bf 8f4f 	dsb	sy
 8008c92:	60bb      	str	r3, [r7, #8]
}
 8008c94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c96:	bf00      	nop
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0fc      	beq.n	8008c98 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c9e:	bf00      	nop
 8008ca0:	bf00      	nop
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	2000000c 	.word	0x2000000c

08008cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008cb0:	4b07      	ldr	r3, [pc, #28]	; (8008cd0 <pxCurrentTCBConst2>)
 8008cb2:	6819      	ldr	r1, [r3, #0]
 8008cb4:	6808      	ldr	r0, [r1, #0]
 8008cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	f380 8809 	msr	PSP, r0
 8008cbe:	f3bf 8f6f 	isb	sy
 8008cc2:	f04f 0000 	mov.w	r0, #0
 8008cc6:	f380 8811 	msr	BASEPRI, r0
 8008cca:	4770      	bx	lr
 8008ccc:	f3af 8000 	nop.w

08008cd0 <pxCurrentTCBConst2>:
 8008cd0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008cd4:	bf00      	nop
 8008cd6:	bf00      	nop

08008cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008cd8:	4808      	ldr	r0, [pc, #32]	; (8008cfc <prvPortStartFirstTask+0x24>)
 8008cda:	6800      	ldr	r0, [r0, #0]
 8008cdc:	6800      	ldr	r0, [r0, #0]
 8008cde:	f380 8808 	msr	MSP, r0
 8008ce2:	f04f 0000 	mov.w	r0, #0
 8008ce6:	f380 8814 	msr	CONTROL, r0
 8008cea:	b662      	cpsie	i
 8008cec:	b661      	cpsie	f
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	df00      	svc	0
 8008cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cfa:	bf00      	nop
 8008cfc:	e000ed08 	.word	0xe000ed08

08008d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d06:	4b46      	ldr	r3, [pc, #280]	; (8008e20 <xPortStartScheduler+0x120>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a46      	ldr	r2, [pc, #280]	; (8008e24 <xPortStartScheduler+0x124>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d10a      	bne.n	8008d26 <xPortStartScheduler+0x26>
	__asm volatile
 8008d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d14:	f383 8811 	msr	BASEPRI, r3
 8008d18:	f3bf 8f6f 	isb	sy
 8008d1c:	f3bf 8f4f 	dsb	sy
 8008d20:	613b      	str	r3, [r7, #16]
}
 8008d22:	bf00      	nop
 8008d24:	e7fe      	b.n	8008d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d26:	4b3e      	ldr	r3, [pc, #248]	; (8008e20 <xPortStartScheduler+0x120>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a3f      	ldr	r2, [pc, #252]	; (8008e28 <xPortStartScheduler+0x128>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d10a      	bne.n	8008d46 <xPortStartScheduler+0x46>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	60fb      	str	r3, [r7, #12]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008d46:	4b39      	ldr	r3, [pc, #228]	; (8008e2c <xPortStartScheduler+0x12c>)
 8008d48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	22ff      	movs	r2, #255	; 0xff
 8008d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	b2db      	uxtb	r3, r3
 8008d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008d60:	78fb      	ldrb	r3, [r7, #3]
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d68:	b2da      	uxtb	r2, r3
 8008d6a:	4b31      	ldr	r3, [pc, #196]	; (8008e30 <xPortStartScheduler+0x130>)
 8008d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008d6e:	4b31      	ldr	r3, [pc, #196]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d70:	2207      	movs	r2, #7
 8008d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d74:	e009      	b.n	8008d8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008d76:	4b2f      	ldr	r3, [pc, #188]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	3b01      	subs	r3, #1
 8008d7c:	4a2d      	ldr	r2, [pc, #180]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d80:	78fb      	ldrb	r3, [r7, #3]
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	005b      	lsls	r3, r3, #1
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d8a:	78fb      	ldrb	r3, [r7, #3]
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d92:	2b80      	cmp	r3, #128	; 0x80
 8008d94:	d0ef      	beq.n	8008d76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d96:	4b27      	ldr	r3, [pc, #156]	; (8008e34 <xPortStartScheduler+0x134>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f1c3 0307 	rsb	r3, r3, #7
 8008d9e:	2b04      	cmp	r3, #4
 8008da0:	d00a      	beq.n	8008db8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60bb      	str	r3, [r7, #8]
}
 8008db4:	bf00      	nop
 8008db6:	e7fe      	b.n	8008db6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008db8:	4b1e      	ldr	r3, [pc, #120]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	021b      	lsls	r3, r3, #8
 8008dbe:	4a1d      	ldr	r2, [pc, #116]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008dc2:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008dca:	4a1a      	ldr	r2, [pc, #104]	; (8008e34 <xPortStartScheduler+0x134>)
 8008dcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008dd6:	4b18      	ldr	r3, [pc, #96]	; (8008e38 <xPortStartScheduler+0x138>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a17      	ldr	r2, [pc, #92]	; (8008e38 <xPortStartScheduler+0x138>)
 8008ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008de0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008de2:	4b15      	ldr	r3, [pc, #84]	; (8008e38 <xPortStartScheduler+0x138>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	4a14      	ldr	r2, [pc, #80]	; (8008e38 <xPortStartScheduler+0x138>)
 8008de8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008dec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008dee:	f000 f8dd 	bl	8008fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008df2:	4b12      	ldr	r3, [pc, #72]	; (8008e3c <xPortStartScheduler+0x13c>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008df8:	f000 f8fc 	bl	8008ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008dfc:	4b10      	ldr	r3, [pc, #64]	; (8008e40 <xPortStartScheduler+0x140>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a0f      	ldr	r2, [pc, #60]	; (8008e40 <xPortStartScheduler+0x140>)
 8008e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008e06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e08:	f7ff ff66 	bl	8008cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e0c:	f7fe ff48 	bl	8007ca0 <vTaskSwitchContext>
	prvTaskExitError();
 8008e10:	f7ff ff22 	bl	8008c58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	e000ed00 	.word	0xe000ed00
 8008e24:	410fc271 	.word	0x410fc271
 8008e28:	410fc270 	.word	0x410fc270
 8008e2c:	e000e400 	.word	0xe000e400
 8008e30:	20000d90 	.word	0x20000d90
 8008e34:	20000d94 	.word	0x20000d94
 8008e38:	e000ed20 	.word	0xe000ed20
 8008e3c:	2000000c 	.word	0x2000000c
 8008e40:	e000ef34 	.word	0xe000ef34

08008e44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008e44:	b480      	push	{r7}
 8008e46:	b083      	sub	sp, #12
 8008e48:	af00      	add	r7, sp, #0
	__asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	607b      	str	r3, [r7, #4]
}
 8008e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008e5e:	4b0f      	ldr	r3, [pc, #60]	; (8008e9c <vPortEnterCritical+0x58>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	3301      	adds	r3, #1
 8008e64:	4a0d      	ldr	r2, [pc, #52]	; (8008e9c <vPortEnterCritical+0x58>)
 8008e66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008e68:	4b0c      	ldr	r3, [pc, #48]	; (8008e9c <vPortEnterCritical+0x58>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d10f      	bne.n	8008e90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008e70:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <vPortEnterCritical+0x5c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00a      	beq.n	8008e90 <vPortEnterCritical+0x4c>
	__asm volatile
 8008e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7e:	f383 8811 	msr	BASEPRI, r3
 8008e82:	f3bf 8f6f 	isb	sy
 8008e86:	f3bf 8f4f 	dsb	sy
 8008e8a:	603b      	str	r3, [r7, #0]
}
 8008e8c:	bf00      	nop
 8008e8e:	e7fe      	b.n	8008e8e <vPortEnterCritical+0x4a>
	}
}
 8008e90:	bf00      	nop
 8008e92:	370c      	adds	r7, #12
 8008e94:	46bd      	mov	sp, r7
 8008e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9a:	4770      	bx	lr
 8008e9c:	2000000c 	.word	0x2000000c
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008eaa:	4b12      	ldr	r3, [pc, #72]	; (8008ef4 <vPortExitCritical+0x50>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d10a      	bne.n	8008ec8 <vPortExitCritical+0x24>
	__asm volatile
 8008eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb6:	f383 8811 	msr	BASEPRI, r3
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	607b      	str	r3, [r7, #4]
}
 8008ec4:	bf00      	nop
 8008ec6:	e7fe      	b.n	8008ec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ec8:	4b0a      	ldr	r3, [pc, #40]	; (8008ef4 <vPortExitCritical+0x50>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	4a09      	ldr	r2, [pc, #36]	; (8008ef4 <vPortExitCritical+0x50>)
 8008ed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ed2:	4b08      	ldr	r3, [pc, #32]	; (8008ef4 <vPortExitCritical+0x50>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d105      	bne.n	8008ee6 <vPortExitCritical+0x42>
 8008eda:	2300      	movs	r3, #0
 8008edc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	f383 8811 	msr	BASEPRI, r3
}
 8008ee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ee6:	bf00      	nop
 8008ee8:	370c      	adds	r7, #12
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	2000000c 	.word	0x2000000c
	...

08008f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f00:	f3ef 8009 	mrs	r0, PSP
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	4b15      	ldr	r3, [pc, #84]	; (8008f60 <pxCurrentTCBConst>)
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	f01e 0f10 	tst.w	lr, #16
 8008f10:	bf08      	it	eq
 8008f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f1a:	6010      	str	r0, [r2, #0]
 8008f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008f24:	f380 8811 	msr	BASEPRI, r0
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f7fe feb6 	bl	8007ca0 <vTaskSwitchContext>
 8008f34:	f04f 0000 	mov.w	r0, #0
 8008f38:	f380 8811 	msr	BASEPRI, r0
 8008f3c:	bc09      	pop	{r0, r3}
 8008f3e:	6819      	ldr	r1, [r3, #0]
 8008f40:	6808      	ldr	r0, [r1, #0]
 8008f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f46:	f01e 0f10 	tst.w	lr, #16
 8008f4a:	bf08      	it	eq
 8008f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008f50:	f380 8809 	msr	PSP, r0
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	4770      	bx	lr
 8008f5a:	bf00      	nop
 8008f5c:	f3af 8000 	nop.w

08008f60 <pxCurrentTCBConst>:
 8008f60:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008f64:	bf00      	nop
 8008f66:	bf00      	nop

08008f68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b082      	sub	sp, #8
 8008f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f72:	f383 8811 	msr	BASEPRI, r3
 8008f76:	f3bf 8f6f 	isb	sy
 8008f7a:	f3bf 8f4f 	dsb	sy
 8008f7e:	607b      	str	r3, [r7, #4]
}
 8008f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f82:	f7fe fdd3 	bl	8007b2c <xTaskIncrementTick>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f8c:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <xPortSysTickHandler+0x40>)
 8008f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f92:	601a      	str	r2, [r3, #0]
 8008f94:	2300      	movs	r3, #0
 8008f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	f383 8811 	msr	BASEPRI, r3
}
 8008f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008fa0:	bf00      	nop
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	e000ed04 	.word	0xe000ed04

08008fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <vPortSetupTimerInterrupt+0x34>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008fb6:	4b0b      	ldr	r3, [pc, #44]	; (8008fe4 <vPortSetupTimerInterrupt+0x38>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008fbc:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <vPortSetupTimerInterrupt+0x3c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <vPortSetupTimerInterrupt+0x40>)
 8008fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc6:	099b      	lsrs	r3, r3, #6
 8008fc8:	4a09      	ldr	r2, [pc, #36]	; (8008ff0 <vPortSetupTimerInterrupt+0x44>)
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008fce:	4b04      	ldr	r3, [pc, #16]	; (8008fe0 <vPortSetupTimerInterrupt+0x34>)
 8008fd0:	2207      	movs	r2, #7
 8008fd2:	601a      	str	r2, [r3, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	e000e010 	.word	0xe000e010
 8008fe4:	e000e018 	.word	0xe000e018
 8008fe8:	20000000 	.word	0x20000000
 8008fec:	10624dd3 	.word	0x10624dd3
 8008ff0:	e000e014 	.word	0xe000e014

08008ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009004 <vPortEnableVFP+0x10>
 8008ff8:	6801      	ldr	r1, [r0, #0]
 8008ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008ffe:	6001      	str	r1, [r0, #0]
 8009000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009002:	bf00      	nop
 8009004:	e000ed88 	.word	0xe000ed88

08009008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800900e:	f3ef 8305 	mrs	r3, IPSR
 8009012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2b0f      	cmp	r3, #15
 8009018:	d914      	bls.n	8009044 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800901a:	4a17      	ldr	r2, [pc, #92]	; (8009078 <vPortValidateInterruptPriority+0x70>)
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4413      	add	r3, r2
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009024:	4b15      	ldr	r3, [pc, #84]	; (800907c <vPortValidateInterruptPriority+0x74>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	7afa      	ldrb	r2, [r7, #11]
 800902a:	429a      	cmp	r2, r3
 800902c:	d20a      	bcs.n	8009044 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	607b      	str	r3, [r7, #4]
}
 8009040:	bf00      	nop
 8009042:	e7fe      	b.n	8009042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009044:	4b0e      	ldr	r3, [pc, #56]	; (8009080 <vPortValidateInterruptPriority+0x78>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800904c:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <vPortValidateInterruptPriority+0x7c>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	429a      	cmp	r2, r3
 8009052:	d90a      	bls.n	800906a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	603b      	str	r3, [r7, #0]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <vPortValidateInterruptPriority+0x60>
	}
 800906a:	bf00      	nop
 800906c:	3714      	adds	r7, #20
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	e000e3f0 	.word	0xe000e3f0
 800907c:	20000d90 	.word	0x20000d90
 8009080:	e000ed0c 	.word	0xe000ed0c
 8009084:	20000d94 	.word	0x20000d94

08009088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08a      	sub	sp, #40	; 0x28
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009090:	2300      	movs	r3, #0
 8009092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009094:	f7fe fc7c 	bl	8007990 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009098:	4b5b      	ldr	r3, [pc, #364]	; (8009208 <pvPortMalloc+0x180>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80090a0:	f000 f920 	bl	80092e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80090a4:	4b59      	ldr	r3, [pc, #356]	; (800920c <pvPortMalloc+0x184>)
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	4013      	ands	r3, r2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f040 8093 	bne.w	80091d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01d      	beq.n	80090f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80090b8:	2208      	movs	r2, #8
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4413      	add	r3, r2
 80090be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f003 0307 	and.w	r3, r3, #7
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d014      	beq.n	80090f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f023 0307 	bic.w	r3, r3, #7
 80090d0:	3308      	adds	r3, #8
 80090d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <pvPortMalloc+0x6c>
	__asm volatile
 80090de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e2:	f383 8811 	msr	BASEPRI, r3
 80090e6:	f3bf 8f6f 	isb	sy
 80090ea:	f3bf 8f4f 	dsb	sy
 80090ee:	617b      	str	r3, [r7, #20]
}
 80090f0:	bf00      	nop
 80090f2:	e7fe      	b.n	80090f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d06e      	beq.n	80091d8 <pvPortMalloc+0x150>
 80090fa:	4b45      	ldr	r3, [pc, #276]	; (8009210 <pvPortMalloc+0x188>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	429a      	cmp	r2, r3
 8009102:	d869      	bhi.n	80091d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009104:	4b43      	ldr	r3, [pc, #268]	; (8009214 <pvPortMalloc+0x18c>)
 8009106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009108:	4b42      	ldr	r3, [pc, #264]	; (8009214 <pvPortMalloc+0x18c>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800910e:	e004      	b.n	800911a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	429a      	cmp	r2, r3
 8009122:	d903      	bls.n	800912c <pvPortMalloc+0xa4>
 8009124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1f1      	bne.n	8009110 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800912c:	4b36      	ldr	r3, [pc, #216]	; (8009208 <pvPortMalloc+0x180>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009132:	429a      	cmp	r2, r3
 8009134:	d050      	beq.n	80091d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2208      	movs	r2, #8
 800913c:	4413      	add	r3, r2
 800913e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	1ad2      	subs	r2, r2, r3
 8009150:	2308      	movs	r3, #8
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	429a      	cmp	r2, r3
 8009156:	d91f      	bls.n	8009198 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009160:	69bb      	ldr	r3, [r7, #24]
 8009162:	f003 0307 	and.w	r3, r3, #7
 8009166:	2b00      	cmp	r3, #0
 8009168:	d00a      	beq.n	8009180 <pvPortMalloc+0xf8>
	__asm volatile
 800916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916e:	f383 8811 	msr	BASEPRI, r3
 8009172:	f3bf 8f6f 	isb	sy
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	613b      	str	r3, [r7, #16]
}
 800917c:	bf00      	nop
 800917e:	e7fe      	b.n	800917e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009182:	685a      	ldr	r2, [r3, #4]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	1ad2      	subs	r2, r2, r3
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800918c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009192:	69b8      	ldr	r0, [r7, #24]
 8009194:	f000 f908 	bl	80093a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009198:	4b1d      	ldr	r3, [pc, #116]	; (8009210 <pvPortMalloc+0x188>)
 800919a:	681a      	ldr	r2, [r3, #0]
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	4a1b      	ldr	r2, [pc, #108]	; (8009210 <pvPortMalloc+0x188>)
 80091a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80091a6:	4b1a      	ldr	r3, [pc, #104]	; (8009210 <pvPortMalloc+0x188>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b1b      	ldr	r3, [pc, #108]	; (8009218 <pvPortMalloc+0x190>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d203      	bcs.n	80091ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80091b2:	4b17      	ldr	r3, [pc, #92]	; (8009210 <pvPortMalloc+0x188>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a18      	ldr	r2, [pc, #96]	; (8009218 <pvPortMalloc+0x190>)
 80091b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80091ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091bc:	685a      	ldr	r2, [r3, #4]
 80091be:	4b13      	ldr	r3, [pc, #76]	; (800920c <pvPortMalloc+0x184>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	431a      	orrs	r2, r3
 80091c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	2200      	movs	r2, #0
 80091cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80091ce:	4b13      	ldr	r3, [pc, #76]	; (800921c <pvPortMalloc+0x194>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3301      	adds	r3, #1
 80091d4:	4a11      	ldr	r2, [pc, #68]	; (800921c <pvPortMalloc+0x194>)
 80091d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80091d8:	f7fe fbe8 	bl	80079ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80091dc:	69fb      	ldr	r3, [r7, #28]
 80091de:	f003 0307 	and.w	r3, r3, #7
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00a      	beq.n	80091fc <pvPortMalloc+0x174>
	__asm volatile
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	60fb      	str	r3, [r7, #12]
}
 80091f8:	bf00      	nop
 80091fa:	e7fe      	b.n	80091fa <pvPortMalloc+0x172>
	return pvReturn;
 80091fc:	69fb      	ldr	r3, [r7, #28]
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3728      	adds	r7, #40	; 0x28
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	200049a0 	.word	0x200049a0
 800920c:	200049b4 	.word	0x200049b4
 8009210:	200049a4 	.word	0x200049a4
 8009214:	20004998 	.word	0x20004998
 8009218:	200049a8 	.word	0x200049a8
 800921c:	200049ac 	.word	0x200049ac

08009220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d04d      	beq.n	80092ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009232:	2308      	movs	r3, #8
 8009234:	425b      	negs	r3, r3
 8009236:	697a      	ldr	r2, [r7, #20]
 8009238:	4413      	add	r3, r2
 800923a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	4b24      	ldr	r3, [pc, #144]	; (80092d8 <vPortFree+0xb8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4013      	ands	r3, r2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d10a      	bne.n	8009264 <vPortFree+0x44>
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	60fb      	str	r3, [r7, #12]
}
 8009260:	bf00      	nop
 8009262:	e7fe      	b.n	8009262 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00a      	beq.n	8009282 <vPortFree+0x62>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	60bb      	str	r3, [r7, #8]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	4b14      	ldr	r3, [pc, #80]	; (80092d8 <vPortFree+0xb8>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4013      	ands	r3, r2
 800928c:	2b00      	cmp	r3, #0
 800928e:	d01e      	beq.n	80092ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d11a      	bne.n	80092ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	4b0e      	ldr	r3, [pc, #56]	; (80092d8 <vPortFree+0xb8>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	43db      	mvns	r3, r3
 80092a2:	401a      	ands	r2, r3
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80092a8:	f7fe fb72 	bl	8007990 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	4b0a      	ldr	r3, [pc, #40]	; (80092dc <vPortFree+0xbc>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4413      	add	r3, r2
 80092b6:	4a09      	ldr	r2, [pc, #36]	; (80092dc <vPortFree+0xbc>)
 80092b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80092ba:	6938      	ldr	r0, [r7, #16]
 80092bc:	f000 f874 	bl	80093a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80092c0:	4b07      	ldr	r3, [pc, #28]	; (80092e0 <vPortFree+0xc0>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3301      	adds	r3, #1
 80092c6:	4a06      	ldr	r2, [pc, #24]	; (80092e0 <vPortFree+0xc0>)
 80092c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80092ca:	f7fe fb6f 	bl	80079ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80092ce:	bf00      	nop
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	200049b4 	.word	0x200049b4
 80092dc:	200049a4 	.word	0x200049a4
 80092e0:	200049b0 	.word	0x200049b0

080092e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80092ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80092ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80092f0:	4b27      	ldr	r3, [pc, #156]	; (8009390 <prvHeapInit+0xac>)
 80092f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f003 0307 	and.w	r3, r3, #7
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00c      	beq.n	8009318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	3307      	adds	r3, #7
 8009302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	f023 0307 	bic.w	r3, r3, #7
 800930a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	4a1f      	ldr	r2, [pc, #124]	; (8009390 <prvHeapInit+0xac>)
 8009314:	4413      	add	r3, r2
 8009316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800931c:	4a1d      	ldr	r2, [pc, #116]	; (8009394 <prvHeapInit+0xb0>)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009322:	4b1c      	ldr	r3, [pc, #112]	; (8009394 <prvHeapInit+0xb0>)
 8009324:	2200      	movs	r2, #0
 8009326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	4413      	add	r3, r2
 800932e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009330:	2208      	movs	r2, #8
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	1a9b      	subs	r3, r3, r2
 8009336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f023 0307 	bic.w	r3, r3, #7
 800933e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	4a15      	ldr	r2, [pc, #84]	; (8009398 <prvHeapInit+0xb4>)
 8009344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009346:	4b14      	ldr	r3, [pc, #80]	; (8009398 <prvHeapInit+0xb4>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2200      	movs	r2, #0
 800934c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800934e:	4b12      	ldr	r3, [pc, #72]	; (8009398 <prvHeapInit+0xb4>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2200      	movs	r2, #0
 8009354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	1ad2      	subs	r2, r2, r3
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009364:	4b0c      	ldr	r3, [pc, #48]	; (8009398 <prvHeapInit+0xb4>)
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	4a0a      	ldr	r2, [pc, #40]	; (800939c <prvHeapInit+0xb8>)
 8009372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4a09      	ldr	r2, [pc, #36]	; (80093a0 <prvHeapInit+0xbc>)
 800937a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800937c:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <prvHeapInit+0xc0>)
 800937e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009382:	601a      	str	r2, [r3, #0]
}
 8009384:	bf00      	nop
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	20000d98 	.word	0x20000d98
 8009394:	20004998 	.word	0x20004998
 8009398:	200049a0 	.word	0x200049a0
 800939c:	200049a8 	.word	0x200049a8
 80093a0:	200049a4 	.word	0x200049a4
 80093a4:	200049b4 	.word	0x200049b4

080093a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80093b0:	4b28      	ldr	r3, [pc, #160]	; (8009454 <prvInsertBlockIntoFreeList+0xac>)
 80093b2:	60fb      	str	r3, [r7, #12]
 80093b4:	e002      	b.n	80093bc <prvInsertBlockIntoFreeList+0x14>
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60fb      	str	r3, [r7, #12]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d8f7      	bhi.n	80093b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	4413      	add	r3, r2
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d108      	bne.n	80093ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	441a      	add	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	441a      	add	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d118      	bne.n	8009430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	4b15      	ldr	r3, [pc, #84]	; (8009458 <prvInsertBlockIntoFreeList+0xb0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d00d      	beq.n	8009426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	685a      	ldr	r2, [r3, #4]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	441a      	add	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	e008      	b.n	8009438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009426:	4b0c      	ldr	r3, [pc, #48]	; (8009458 <prvInsertBlockIntoFreeList+0xb0>)
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	e003      	b.n	8009438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009438:	68fa      	ldr	r2, [r7, #12]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	429a      	cmp	r2, r3
 800943e:	d002      	beq.n	8009446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009446:	bf00      	nop
 8009448:	3714      	adds	r7, #20
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	20004998 	.word	0x20004998
 8009458:	200049a0 	.word	0x200049a0

0800945c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	330c      	adds	r3, #12
 800946c:	461a      	mov	r2, r3
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f003 fd69 	bl	800cf48 <tcpip_send_msg_wait_sem>
 8009476:	4603      	mov	r3, r0
 8009478:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800947a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d103      	bne.n	800948a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009488:	e001      	b.n	800948e <netconn_apimsg+0x32>
  }
  return err;
 800948a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08c      	sub	sp, #48	; 0x30
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	603a      	str	r2, [r7, #0]
 80094a2:	71fb      	strb	r3, [r7, #7]
 80094a4:	460b      	mov	r3, r1
 80094a6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80094a8:	79fb      	ldrb	r3, [r7, #7]
 80094aa:	6839      	ldr	r1, [r7, #0]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f001 f9a3 	bl	800a7f8 <netconn_alloc>
 80094b2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80094b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d054      	beq.n	8009564 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80094ba:	79bb      	ldrb	r3, [r7, #6]
 80094bc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80094be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80094c2:	f107 0308 	add.w	r3, r7, #8
 80094c6:	4619      	mov	r1, r3
 80094c8:	4829      	ldr	r0, [pc, #164]	; (8009570 <netconn_new_with_proto_and_callback+0xd8>)
 80094ca:	f7ff ffc7 	bl	800945c <netconn_apimsg>
 80094ce:	4603      	mov	r3, r0
 80094d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80094d4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d043      	beq.n	8009564 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80094dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d005      	beq.n	80094f0 <netconn_new_with_proto_and_callback+0x58>
 80094e4:	4b23      	ldr	r3, [pc, #140]	; (8009574 <netconn_new_with_proto_and_callback+0xdc>)
 80094e6:	22a3      	movs	r2, #163	; 0xa3
 80094e8:	4923      	ldr	r1, [pc, #140]	; (8009578 <netconn_new_with_proto_and_callback+0xe0>)
 80094ea:	4824      	ldr	r0, [pc, #144]	; (800957c <netconn_new_with_proto_and_callback+0xe4>)
 80094ec:	f00f fc8e 	bl	8018e0c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80094f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f2:	3310      	adds	r3, #16
 80094f4:	4618      	mov	r0, r3
 80094f6:	f00f fa67 	bl	80189c8 <sys_mbox_valid>
 80094fa:	4603      	mov	r3, r0
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d105      	bne.n	800950c <netconn_new_with_proto_and_callback+0x74>
 8009500:	4b1c      	ldr	r3, [pc, #112]	; (8009574 <netconn_new_with_proto_and_callback+0xdc>)
 8009502:	22a4      	movs	r2, #164	; 0xa4
 8009504:	491e      	ldr	r1, [pc, #120]	; (8009580 <netconn_new_with_proto_and_callback+0xe8>)
 8009506:	481d      	ldr	r0, [pc, #116]	; (800957c <netconn_new_with_proto_and_callback+0xe4>)
 8009508:	f00f fc80 	bl	8018e0c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800950c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950e:	3314      	adds	r3, #20
 8009510:	4618      	mov	r0, r3
 8009512:	f00f fa59 	bl	80189c8 <sys_mbox_valid>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d005      	beq.n	8009528 <netconn_new_with_proto_and_callback+0x90>
 800951c:	4b15      	ldr	r3, [pc, #84]	; (8009574 <netconn_new_with_proto_and_callback+0xdc>)
 800951e:	22a6      	movs	r2, #166	; 0xa6
 8009520:	4918      	ldr	r1, [pc, #96]	; (8009584 <netconn_new_with_proto_and_callback+0xec>)
 8009522:	4816      	ldr	r0, [pc, #88]	; (800957c <netconn_new_with_proto_and_callback+0xe4>)
 8009524:	f00f fc72 	bl	8018e0c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800952a:	330c      	adds	r3, #12
 800952c:	4618      	mov	r0, r3
 800952e:	f00f fad9 	bl	8018ae4 <sys_sem_valid>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d105      	bne.n	8009544 <netconn_new_with_proto_and_callback+0xac>
 8009538:	4b0e      	ldr	r3, [pc, #56]	; (8009574 <netconn_new_with_proto_and_callback+0xdc>)
 800953a:	22a9      	movs	r2, #169	; 0xa9
 800953c:	4912      	ldr	r1, [pc, #72]	; (8009588 <netconn_new_with_proto_and_callback+0xf0>)
 800953e:	480f      	ldr	r0, [pc, #60]	; (800957c <netconn_new_with_proto_and_callback+0xe4>)
 8009540:	f00f fc64 	bl	8018e0c <iprintf>
      sys_sem_free(&conn->op_completed);
 8009544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009546:	330c      	adds	r3, #12
 8009548:	4618      	mov	r0, r3
 800954a:	f00f fabe 	bl	8018aca <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009550:	3310      	adds	r3, #16
 8009552:	4618      	mov	r0, r3
 8009554:	f00f f9c4 	bl	80188e0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009558:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800955a:	2007      	movs	r0, #7
 800955c:	f004 fd26 	bl	800dfac <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009560:	2300      	movs	r3, #0
 8009562:	e000      	b.n	8009566 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009566:	4618      	mov	r0, r3
 8009568:	3730      	adds	r7, #48	; 0x30
 800956a:	46bd      	mov	sp, r7
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	0800a7cd 	.word	0x0800a7cd
 8009574:	08019e14 	.word	0x08019e14
 8009578:	08019e48 	.word	0x08019e48
 800957c:	08019e6c 	.word	0x08019e6c
 8009580:	08019e94 	.word	0x08019e94
 8009584:	08019eac 	.word	0x08019eac
 8009588:	08019ed0 	.word	0x08019ed0

0800958c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08c      	sub	sp, #48	; 0x30
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800959a:	2300      	movs	r3, #0
 800959c:	e014      	b.n	80095c8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80095a2:	2329      	movs	r3, #41	; 0x29
 80095a4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80095a6:	f107 030c 	add.w	r3, r7, #12
 80095aa:	4619      	mov	r1, r3
 80095ac:	4808      	ldr	r0, [pc, #32]	; (80095d0 <netconn_prepare_delete+0x44>)
 80095ae:	f7ff ff55 	bl	800945c <netconn_apimsg>
 80095b2:	4603      	mov	r3, r0
 80095b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80095b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <netconn_prepare_delete+0x3a>
    return err;
 80095c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80095c4:	e000      	b.n	80095c8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3730      	adds	r7, #48	; 0x30
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	0800ad31 	.word	0x0800ad31

080095d4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d101      	bne.n	80095e6 <netconn_delete+0x12>
    return ERR_OK;
 80095e2:	2300      	movs	r3, #0
 80095e4:	e00d      	b.n	8009602 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7ff ffd0 	bl	800958c <netconn_prepare_delete>
 80095ec:	4603      	mov	r3, r0
 80095ee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80095f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d102      	bne.n	80095fe <netconn_delete+0x2a>
    netconn_free(conn);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f001 f96b 	bl	800a8d4 <netconn_free>
  }
  return err;
 80095fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009602:	4618      	mov	r0, r3
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
	...

0800960c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b08e      	sub	sp, #56	; 0x38
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	60b9      	str	r1, [r7, #8]
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d109      	bne.n	8009634 <netconn_getaddr+0x28>
 8009620:	4b1d      	ldr	r3, [pc, #116]	; (8009698 <netconn_getaddr+0x8c>)
 8009622:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009626:	491d      	ldr	r1, [pc, #116]	; (800969c <netconn_getaddr+0x90>)
 8009628:	481d      	ldr	r0, [pc, #116]	; (80096a0 <netconn_getaddr+0x94>)
 800962a:	f00f fbef 	bl	8018e0c <iprintf>
 800962e:	f06f 030f 	mvn.w	r3, #15
 8009632:	e02d      	b.n	8009690 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d109      	bne.n	800964e <netconn_getaddr+0x42>
 800963a:	4b17      	ldr	r3, [pc, #92]	; (8009698 <netconn_getaddr+0x8c>)
 800963c:	f240 1213 	movw	r2, #275	; 0x113
 8009640:	4918      	ldr	r1, [pc, #96]	; (80096a4 <netconn_getaddr+0x98>)
 8009642:	4817      	ldr	r0, [pc, #92]	; (80096a0 <netconn_getaddr+0x94>)
 8009644:	f00f fbe2 	bl	8018e0c <iprintf>
 8009648:	f06f 030f 	mvn.w	r3, #15
 800964c:	e020      	b.n	8009690 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d109      	bne.n	8009668 <netconn_getaddr+0x5c>
 8009654:	4b10      	ldr	r3, [pc, #64]	; (8009698 <netconn_getaddr+0x8c>)
 8009656:	f44f 728a 	mov.w	r2, #276	; 0x114
 800965a:	4913      	ldr	r1, [pc, #76]	; (80096a8 <netconn_getaddr+0x9c>)
 800965c:	4810      	ldr	r0, [pc, #64]	; (80096a0 <netconn_getaddr+0x94>)
 800965e:	f00f fbd5 	bl	8018e0c <iprintf>
 8009662:	f06f 030f 	mvn.w	r3, #15
 8009666:	e013      	b.n	8009690 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800967a:	f107 0314 	add.w	r3, r7, #20
 800967e:	4619      	mov	r1, r3
 8009680:	480a      	ldr	r0, [pc, #40]	; (80096ac <netconn_getaddr+0xa0>)
 8009682:	f7ff feeb 	bl	800945c <netconn_apimsg>
 8009686:	4603      	mov	r3, r0
 8009688:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800968c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009690:	4618      	mov	r0, r3
 8009692:	3738      	adds	r7, #56	; 0x38
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	08019e14 	.word	0x08019e14
 800969c:	08019eec 	.word	0x08019eec
 80096a0:	08019e6c 	.word	0x08019e6c
 80096a4:	08019f0c 	.word	0x08019f0c
 80096a8:	08019f2c 	.word	0x08019f2c
 80096ac:	0800b651 	.word	0x0800b651

080096b0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b08e      	sub	sp, #56	; 0x38
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	4613      	mov	r3, r2
 80096bc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d109      	bne.n	80096d8 <netconn_bind+0x28>
 80096c4:	4b11      	ldr	r3, [pc, #68]	; (800970c <netconn_bind+0x5c>)
 80096c6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80096ca:	4911      	ldr	r1, [pc, #68]	; (8009710 <netconn_bind+0x60>)
 80096cc:	4811      	ldr	r0, [pc, #68]	; (8009714 <netconn_bind+0x64>)
 80096ce:	f00f fb9d 	bl	8018e0c <iprintf>
 80096d2:	f06f 030f 	mvn.w	r3, #15
 80096d6:	e015      	b.n	8009704 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d101      	bne.n	80096e2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80096de:	4b0e      	ldr	r3, [pc, #56]	; (8009718 <netconn_bind+0x68>)
 80096e0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80096ea:	88fb      	ldrh	r3, [r7, #6]
 80096ec:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80096ee:	f107 0314 	add.w	r3, r7, #20
 80096f2:	4619      	mov	r1, r3
 80096f4:	4809      	ldr	r0, [pc, #36]	; (800971c <netconn_bind+0x6c>)
 80096f6:	f7ff feb1 	bl	800945c <netconn_apimsg>
 80096fa:	4603      	mov	r3, r0
 80096fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8009700:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009704:	4618      	mov	r0, r3
 8009706:	3738      	adds	r7, #56	; 0x38
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	08019e14 	.word	0x08019e14
 8009710:	08019f4c 	.word	0x08019f4c
 8009714:	08019e6c 	.word	0x08019e6c
 8009718:	0801dd7c 	.word	0x0801dd7c
 800971c:	0800aef9 	.word	0x0800aef9

08009720 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08c      	sub	sp, #48	; 0x30
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	460b      	mov	r3, r1
 800972a:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d109      	bne.n	8009746 <netconn_listen_with_backlog+0x26>
 8009732:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <netconn_listen_with_backlog+0x48>)
 8009734:	f240 12bb 	movw	r2, #443	; 0x1bb
 8009738:	490c      	ldr	r1, [pc, #48]	; (800976c <netconn_listen_with_backlog+0x4c>)
 800973a:	480d      	ldr	r0, [pc, #52]	; (8009770 <netconn_listen_with_backlog+0x50>)
 800973c:	f00f fb66 	bl	8018e0c <iprintf>
 8009740:	f06f 030f 	mvn.w	r3, #15
 8009744:	e00c      	b.n	8009760 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800974a:	f107 030c 	add.w	r3, r7, #12
 800974e:	4619      	mov	r1, r3
 8009750:	4808      	ldr	r0, [pc, #32]	; (8009774 <netconn_listen_with_backlog+0x54>)
 8009752:	f7ff fe83 	bl	800945c <netconn_apimsg>
 8009756:	4603      	mov	r3, r0
 8009758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800975c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009760:	4618      	mov	r0, r3
 8009762:	3730      	adds	r7, #48	; 0x30
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	08019e14 	.word	0x08019e14
 800976c:	08019fcc 	.word	0x08019fcc
 8009770:	08019e6c 	.word	0x08019e6c
 8009774:	0800af6d 	.word	0x0800af6d

08009778 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d109      	bne.n	800979c <netconn_accept+0x24>
 8009788:	4b3d      	ldr	r3, [pc, #244]	; (8009880 <netconn_accept+0x108>)
 800978a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800978e:	493d      	ldr	r1, [pc, #244]	; (8009884 <netconn_accept+0x10c>)
 8009790:	483d      	ldr	r0, [pc, #244]	; (8009888 <netconn_accept+0x110>)
 8009792:	f00f fb3b 	bl	8018e0c <iprintf>
 8009796:	f06f 030f 	mvn.w	r3, #15
 800979a:	e06c      	b.n	8009876 <netconn_accept+0xfe>
  *new_conn = NULL;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	2200      	movs	r2, #0
 80097a0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d109      	bne.n	80097bc <netconn_accept+0x44>
 80097a8:	4b35      	ldr	r3, [pc, #212]	; (8009880 <netconn_accept+0x108>)
 80097aa:	f240 12e3 	movw	r2, #483	; 0x1e3
 80097ae:	4937      	ldr	r1, [pc, #220]	; (800988c <netconn_accept+0x114>)
 80097b0:	4835      	ldr	r0, [pc, #212]	; (8009888 <netconn_accept+0x110>)
 80097b2:	f00f fb2b 	bl	8018e0c <iprintf>
 80097b6:	f06f 030f 	mvn.w	r3, #15
 80097ba:	e05c      	b.n	8009876 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 fb99 	bl	8009ef4 <netconn_err>
 80097c2:	4603      	mov	r3, r0
 80097c4:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 80097c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d002      	beq.n	80097d4 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 80097ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097d2:	e050      	b.n	8009876 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	3314      	adds	r3, #20
 80097d8:	4618      	mov	r0, r3
 80097da:	f00f f8f5 	bl	80189c8 <sys_mbox_valid>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d005      	beq.n	80097f0 <netconn_accept+0x78>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	7f1b      	ldrb	r3, [r3, #28]
 80097e8:	f003 0301 	and.w	r3, r3, #1
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80097f0:	f06f 030e 	mvn.w	r3, #14
 80097f4:	e03f      	b.n	8009876 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	7f1b      	ldrb	r3, [r3, #28]
 80097fa:	f003 0302 	and.w	r3, r3, #2
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d00e      	beq.n	8009820 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	3314      	adds	r3, #20
 8009806:	f107 020c 	add.w	r2, r7, #12
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f00f f8c4 	bl	801899a <sys_arch_mbox_tryfetch>
 8009812:	4603      	mov	r3, r0
 8009814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009818:	d10a      	bne.n	8009830 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800981a:	f06f 0306 	mvn.w	r3, #6
 800981e:	e02a      	b.n	8009876 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	3314      	adds	r3, #20
 8009824:	f107 010c 	add.w	r1, r7, #12
 8009828:	2200      	movs	r2, #0
 800982a:	4618      	mov	r0, r3
 800982c:	f00f f884 	bl	8018938 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009834:	2b00      	cmp	r3, #0
 8009836:	d005      	beq.n	8009844 <netconn_accept+0xcc>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983c:	2200      	movs	r2, #0
 800983e:	2101      	movs	r1, #1
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f107 0213 	add.w	r2, r7, #19
 800984a:	4611      	mov	r1, r2
 800984c:	4618      	mov	r0, r3
 800984e:	f000 fba3 	bl	8009f98 <lwip_netconn_is_err_msg>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d002      	beq.n	800985e <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8009858:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800985c:	e00b      	b.n	8009876 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d102      	bne.n	800986a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8009864:	f06f 030e 	mvn.w	r3, #14
 8009868:	e005      	b.n	8009876 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009874:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8009876:	4618      	mov	r0, r3
 8009878:	3718      	adds	r7, #24
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	08019e14 	.word	0x08019e14
 8009884:	08019fec 	.word	0x08019fec
 8009888:	08019e6c 	.word	0x08019e6c
 800988c:	0801a00c 	.word	0x0801a00c

08009890 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b088      	sub	sp, #32
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	4613      	mov	r3, r2
 800989c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d109      	bne.n	80098bc <netconn_recv_data+0x2c>
 80098a8:	4b58      	ldr	r3, [pc, #352]	; (8009a0c <netconn_recv_data+0x17c>)
 80098aa:	f44f 7212 	mov.w	r2, #584	; 0x248
 80098ae:	4958      	ldr	r1, [pc, #352]	; (8009a10 <netconn_recv_data+0x180>)
 80098b0:	4858      	ldr	r0, [pc, #352]	; (8009a14 <netconn_recv_data+0x184>)
 80098b2:	f00f faab 	bl	8018e0c <iprintf>
 80098b6:	f06f 030f 	mvn.w	r3, #15
 80098ba:	e0a2      	b.n	8009a02 <netconn_recv_data+0x172>
  *new_buf = NULL;
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	2200      	movs	r2, #0
 80098c0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d109      	bne.n	80098dc <netconn_recv_data+0x4c>
 80098c8:	4b50      	ldr	r3, [pc, #320]	; (8009a0c <netconn_recv_data+0x17c>)
 80098ca:	f240 224a 	movw	r2, #586	; 0x24a
 80098ce:	4952      	ldr	r1, [pc, #328]	; (8009a18 <netconn_recv_data+0x188>)
 80098d0:	4850      	ldr	r0, [pc, #320]	; (8009a14 <netconn_recv_data+0x184>)
 80098d2:	f00f fa9b 	bl	8018e0c <iprintf>
 80098d6:	f06f 030f 	mvn.w	r3, #15
 80098da:	e092      	b.n	8009a02 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	3310      	adds	r3, #16
 80098e0:	4618      	mov	r0, r3
 80098e2:	f00f f871 	bl	80189c8 <sys_mbox_valid>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10e      	bne.n	800990a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fb01 	bl	8009ef4 <netconn_err>
 80098f2:	4603      	mov	r3, r0
 80098f4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80098f6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d002      	beq.n	8009904 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80098fe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009902:	e07e      	b.n	8009a02 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009904:	f06f 030a 	mvn.w	r3, #10
 8009908:	e07b      	b.n	8009a02 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	7f1b      	ldrb	r3, [r3, #28]
 800990e:	f003 0302 	and.w	r3, r3, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10f      	bne.n	8009936 <netconn_recv_data+0xa6>
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	f003 0304 	and.w	r3, r3, #4
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10a      	bne.n	8009936 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	7f1b      	ldrb	r3, [r3, #28]
 8009924:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009928:	2b00      	cmp	r3, #0
 800992a:	d104      	bne.n	8009936 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d023      	beq.n	800997e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3310      	adds	r3, #16
 800993a:	f107 0218 	add.w	r2, r7, #24
 800993e:	4611      	mov	r1, r2
 8009940:	4618      	mov	r0, r3
 8009942:	f00f f82a 	bl	801899a <sys_arch_mbox_tryfetch>
 8009946:	4603      	mov	r3, r0
 8009948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800994c:	d11f      	bne.n	800998e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f000 fad0 	bl	8009ef4 <netconn_err>
 8009954:	4603      	mov	r3, r0
 8009956:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009958:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d002      	beq.n	8009966 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009960:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009964:	e04d      	b.n	8009a02 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	7f1b      	ldrb	r3, [r3, #28]
 800996a:	f003 0301 	and.w	r3, r3, #1
 800996e:	2b00      	cmp	r3, #0
 8009970:	d002      	beq.n	8009978 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8009972:	f06f 030a 	mvn.w	r3, #10
 8009976:	e044      	b.n	8009a02 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009978:	f06f 0306 	mvn.w	r3, #6
 800997c:	e041      	b.n	8009a02 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3310      	adds	r3, #16
 8009982:	f107 0118 	add.w	r1, r7, #24
 8009986:	2200      	movs	r2, #0
 8009988:	4618      	mov	r0, r3
 800998a:	f00e ffd5 	bl	8018938 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009996:	2b10      	cmp	r3, #16
 8009998:	d117      	bne.n	80099ca <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	f107 0217 	add.w	r2, r7, #23
 80099a0:	4611      	mov	r1, r2
 80099a2:	4618      	mov	r0, r3
 80099a4:	f000 faf8 	bl	8009f98 <lwip_netconn_is_err_msg>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d009      	beq.n	80099c2 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80099ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099b2:	f113 0f0f 	cmn.w	r3, #15
 80099b6:	d101      	bne.n	80099bc <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	e022      	b.n	8009a02 <netconn_recv_data+0x172>
      }
      return err;
 80099bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099c0:	e01f      	b.n	8009a02 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	891b      	ldrh	r3, [r3, #8]
 80099c6:	83fb      	strh	r3, [r7, #30]
 80099c8:	e00d      	b.n	80099e6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80099ca:	69bb      	ldr	r3, [r7, #24]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d106      	bne.n	80099de <netconn_recv_data+0x14e>
 80099d0:	4b0e      	ldr	r3, [pc, #56]	; (8009a0c <netconn_recv_data+0x17c>)
 80099d2:	f240 2291 	movw	r2, #657	; 0x291
 80099d6:	4911      	ldr	r1, [pc, #68]	; (8009a1c <netconn_recv_data+0x18c>)
 80099d8:	480e      	ldr	r0, [pc, #56]	; (8009a14 <netconn_recv_data+0x184>)
 80099da:	f00f fa17 	bl	8018e0c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	891b      	ldrh	r3, [r3, #8]
 80099e4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d005      	beq.n	80099fa <netconn_recv_data+0x16a>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f2:	8bfa      	ldrh	r2, [r7, #30]
 80099f4:	2101      	movs	r1, #1
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80099fa:	69ba      	ldr	r2, [r7, #24]
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009a00:	2300      	movs	r3, #0
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	08019e14 	.word	0x08019e14
 8009a10:	0801a02c 	.word	0x0801a02c
 8009a14:	08019e6c 	.word	0x08019e6c
 8009a18:	0801a04c 	.word	0x0801a04c
 8009a1c:	0801a068 	.word	0x0801a068

08009a20 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d005      	beq.n	8009a3e <netconn_tcp_recvd_msg+0x1e>
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a3a:	2b10      	cmp	r3, #16
 8009a3c:	d009      	beq.n	8009a52 <netconn_tcp_recvd_msg+0x32>
 8009a3e:	4b0c      	ldr	r3, [pc, #48]	; (8009a70 <netconn_tcp_recvd_msg+0x50>)
 8009a40:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009a44:	490b      	ldr	r1, [pc, #44]	; (8009a74 <netconn_tcp_recvd_msg+0x54>)
 8009a46:	480c      	ldr	r0, [pc, #48]	; (8009a78 <netconn_tcp_recvd_msg+0x58>)
 8009a48:	f00f f9e0 	bl	8018e0c <iprintf>
 8009a4c:	f06f 030f 	mvn.w	r3, #15
 8009a50:	e00a      	b.n	8009a68 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	4806      	ldr	r0, [pc, #24]	; (8009a7c <netconn_tcp_recvd_msg+0x5c>)
 8009a62:	f7ff fcfb 	bl	800945c <netconn_apimsg>
 8009a66:	4603      	mov	r3, r0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	08019e14 	.word	0x08019e14
 8009a74:	0801a074 	.word	0x0801a074
 8009a78:	08019e6c 	.word	0x08019e6c
 8009a7c:	0800b137 	.word	0x0800b137

08009a80 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08c      	sub	sp, #48	; 0x30
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d005      	beq.n	8009a9c <netconn_tcp_recvd+0x1c>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a98:	2b10      	cmp	r3, #16
 8009a9a:	d009      	beq.n	8009ab0 <netconn_tcp_recvd+0x30>
 8009a9c:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <netconn_tcp_recvd+0x50>)
 8009a9e:	f240 22b5 	movw	r2, #693	; 0x2b5
 8009aa2:	490c      	ldr	r1, [pc, #48]	; (8009ad4 <netconn_tcp_recvd+0x54>)
 8009aa4:	480c      	ldr	r0, [pc, #48]	; (8009ad8 <netconn_tcp_recvd+0x58>)
 8009aa6:	f00f f9b1 	bl	8018e0c <iprintf>
 8009aaa:	f06f 030f 	mvn.w	r3, #15
 8009aae:	e00b      	b.n	8009ac8 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8009ab0:	f107 030c 	add.w	r3, r7, #12
 8009ab4:	461a      	mov	r2, r3
 8009ab6:	6839      	ldr	r1, [r7, #0]
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff ffb1 	bl	8009a20 <netconn_tcp_recvd_msg>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8009ac4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3730      	adds	r7, #48	; 0x30
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	08019e14 	.word	0x08019e14
 8009ad4:	0801a074 	.word	0x0801a074
 8009ad8:	08019e6c 	.word	0x08019e6c

08009adc <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b090      	sub	sp, #64	; 0x40
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	4613      	mov	r3, r2
 8009ae8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3310      	adds	r3, #16
 8009aee:	4618      	mov	r0, r3
 8009af0:	f00e ff6a 	bl	80189c8 <sys_mbox_valid>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d102      	bne.n	8009b00 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009afa:	f06f 030a 	mvn.w	r3, #10
 8009afe:	e06d      	b.n	8009bdc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	7f1b      	ldrb	r3, [r3, #28]
 8009b04:	b25b      	sxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	da07      	bge.n	8009b1a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	7f1b      	ldrb	r3, [r3, #28]
 8009b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009b18:	e039      	b.n	8009b8e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	68b9      	ldr	r1, [r7, #8]
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f7ff feb5 	bl	8009890 <netconn_recv_data>
 8009b26:	4603      	mov	r3, r0
 8009b28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009b2c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d002      	beq.n	8009b3a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009b34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b38:	e050      	b.n	8009bdc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009b40:	79fb      	ldrb	r3, [r7, #7]
 8009b42:	f003 0308 	and.w	r3, r3, #8
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d10e      	bne.n	8009b68 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <netconn_recv_data_tcp+0x7a>
 8009b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b52:	891b      	ldrh	r3, [r3, #8]
 8009b54:	e000      	b.n	8009b58 <netconn_recv_data_tcp+0x7c>
 8009b56:	2301      	movs	r3, #1
 8009b58:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009b5a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b5c:	f107 0214 	add.w	r2, r7, #20
 8009b60:	4619      	mov	r1, r3
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f7ff ff5c 	bl	8009a20 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d134      	bne.n	8009bd8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009b6e:	79fb      	ldrb	r3, [r7, #7]
 8009b70:	f003 0310 	and.w	r3, r3, #16
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d009      	beq.n	8009b8c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	7f1b      	ldrb	r3, [r3, #28]
 8009b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009b86:	f06f 0306 	mvn.w	r3, #6
 8009b8a:	e027      	b.n	8009bdc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009b8c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d005      	beq.n	8009ba2 <netconn_recv_data_tcp+0xc6>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	68f8      	ldr	r0, [r7, #12]
 8009ba0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d10f      	bne.n	8009bca <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009baa:	68f8      	ldr	r0, [r7, #12]
 8009bac:	f000 f9a2 	bl	8009ef4 <netconn_err>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009bb6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <netconn_recv_data_tcp+0xe8>
          return err;
 8009bbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009bc2:	e00b      	b.n	8009bdc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009bc4:	f06f 030d 	mvn.w	r3, #13
 8009bc8:	e008      	b.n	8009bdc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009bca:	2101      	movs	r1, #1
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 f961 	bl	8009e94 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009bd2:	f06f 030e 	mvn.w	r3, #14
 8009bd6:	e001      	b.n	8009bdc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009bd8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3740      	adds	r7, #64	; 0x40
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	4613      	mov	r3, r2
 8009bf0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d005      	beq.n	8009c04 <netconn_recv_tcp_pbuf_flags+0x20>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c00:	2b10      	cmp	r3, #16
 8009c02:	d009      	beq.n	8009c18 <netconn_recv_tcp_pbuf_flags+0x34>
 8009c04:	4b0a      	ldr	r3, [pc, #40]	; (8009c30 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8009c06:	f240 3225 	movw	r2, #805	; 0x325
 8009c0a:	490a      	ldr	r1, [pc, #40]	; (8009c34 <netconn_recv_tcp_pbuf_flags+0x50>)
 8009c0c:	480a      	ldr	r0, [pc, #40]	; (8009c38 <netconn_recv_tcp_pbuf_flags+0x54>)
 8009c0e:	f00f f8fd 	bl	8018e0c <iprintf>
 8009c12:	f06f 030f 	mvn.w	r3, #15
 8009c16:	e006      	b.n	8009c26 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	68b9      	ldr	r1, [r7, #8]
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f7ff ff5c 	bl	8009adc <netconn_recv_data_tcp>
 8009c24:	4603      	mov	r3, r0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	08019e14 	.word	0x08019e14
 8009c34:	0801a074 	.word	0x0801a074
 8009c38:	08019e6c 	.word	0x08019e6c

08009c3c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	4613      	mov	r3, r2
 8009c48:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d005      	beq.n	8009c5c <netconn_recv_udp_raw_netbuf_flags+0x20>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c58:	2b10      	cmp	r3, #16
 8009c5a:	d109      	bne.n	8009c70 <netconn_recv_udp_raw_netbuf_flags+0x34>
 8009c5c:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 8009c5e:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8009c62:	490a      	ldr	r1, [pc, #40]	; (8009c8c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8009c64:	480a      	ldr	r0, [pc, #40]	; (8009c90 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8009c66:	f00f f8d1 	bl	8018e0c <iprintf>
 8009c6a:	f06f 030f 	mvn.w	r3, #15
 8009c6e:	e006      	b.n	8009c7e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	461a      	mov	r2, r3
 8009c74:	68b9      	ldr	r1, [r7, #8]
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7ff fe0a 	bl	8009890 <netconn_recv_data>
 8009c7c:	4603      	mov	r3, r0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	08019e14 	.word	0x08019e14
 8009c8c:	0801a098 	.word	0x0801a098
 8009c90:	08019e6c 	.word	0x08019e6c

08009c94 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08c      	sub	sp, #48	; 0x30
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d109      	bne.n	8009cb8 <netconn_send+0x24>
 8009ca4:	4b0e      	ldr	r3, [pc, #56]	; (8009ce0 <netconn_send+0x4c>)
 8009ca6:	f240 32b2 	movw	r2, #946	; 0x3b2
 8009caa:	490e      	ldr	r1, [pc, #56]	; (8009ce4 <netconn_send+0x50>)
 8009cac:	480e      	ldr	r0, [pc, #56]	; (8009ce8 <netconn_send+0x54>)
 8009cae:	f00f f8ad 	bl	8018e0c <iprintf>
 8009cb2:	f06f 030f 	mvn.w	r3, #15
 8009cb6:	e00e      	b.n	8009cd6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009cc0:	f107 030c 	add.w	r3, r7, #12
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4809      	ldr	r0, [pc, #36]	; (8009cec <netconn_send+0x58>)
 8009cc8:	f7ff fbc8 	bl	800945c <netconn_apimsg>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009cd2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3730      	adds	r7, #48	; 0x30
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	08019e14 	.word	0x08019e14
 8009ce4:	0801a0d0 	.word	0x0801a0d0
 8009ce8:	08019e6c 	.word	0x08019e6c
 8009cec:	0800b09d 	.word	0x0800b09d

08009cf0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af02      	add	r7, sp, #8
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
 8009cfc:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009d06:	78fa      	ldrb	r2, [r7, #3]
 8009d08:	f107 0110 	add.w	r1, r7, #16
 8009d0c:	6a3b      	ldr	r3, [r7, #32]
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	4613      	mov	r3, r2
 8009d12:	2201      	movs	r2, #1
 8009d14:	68f8      	ldr	r0, [r7, #12]
 8009d16:	f000 f805 	bl	8009d24 <netconn_write_vectors_partly>
 8009d1a:	4603      	mov	r3, r0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3718      	adds	r7, #24
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b092      	sub	sp, #72	; 0x48
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	4611      	mov	r1, r2
 8009d30:	461a      	mov	r2, r3
 8009d32:	460b      	mov	r3, r1
 8009d34:	80fb      	strh	r3, [r7, #6]
 8009d36:	4613      	mov	r3, r2
 8009d38:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d109      	bne.n	8009d54 <netconn_write_vectors_partly+0x30>
 8009d40:	4b4e      	ldr	r3, [pc, #312]	; (8009e7c <netconn_write_vectors_partly+0x158>)
 8009d42:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009d46:	494e      	ldr	r1, [pc, #312]	; (8009e80 <netconn_write_vectors_partly+0x15c>)
 8009d48:	484e      	ldr	r0, [pc, #312]	; (8009e84 <netconn_write_vectors_partly+0x160>)
 8009d4a:	f00f f85f 	bl	8018e0c <iprintf>
 8009d4e:	f06f 030f 	mvn.w	r3, #15
 8009d52:	e08e      	b.n	8009e72 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d5c:	2b10      	cmp	r3, #16
 8009d5e:	d009      	beq.n	8009d74 <netconn_write_vectors_partly+0x50>
 8009d60:	4b46      	ldr	r3, [pc, #280]	; (8009e7c <netconn_write_vectors_partly+0x158>)
 8009d62:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009d66:	4948      	ldr	r1, [pc, #288]	; (8009e88 <netconn_write_vectors_partly+0x164>)
 8009d68:	4846      	ldr	r0, [pc, #280]	; (8009e84 <netconn_write_vectors_partly+0x160>)
 8009d6a:	f00f f84f 	bl	8018e0c <iprintf>
 8009d6e:	f06f 0305 	mvn.w	r3, #5
 8009d72:	e07e      	b.n	8009e72 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	7f1b      	ldrb	r3, [r3, #28]
 8009d78:	f003 0302 	and.w	r3, r3, #2
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d104      	bne.n	8009d8a <netconn_write_vectors_partly+0x66>
 8009d80:	797b      	ldrb	r3, [r7, #5]
 8009d82:	f003 0304 	and.w	r3, r3, #4
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <netconn_write_vectors_partly+0x6a>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e000      	b.n	8009d90 <netconn_write_vectors_partly+0x6c>
 8009d8e:	2300      	movs	r3, #0
 8009d90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009d94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d005      	beq.n	8009da8 <netconn_write_vectors_partly+0x84>
 8009d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009da2:	f06f 0305 	mvn.w	r3, #5
 8009da6:	e064      	b.n	8009e72 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009da8:	2300      	movs	r3, #0
 8009daa:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009dac:	2300      	movs	r3, #0
 8009dae:	643b      	str	r3, [r7, #64]	; 0x40
 8009db0:	e015      	b.n	8009dde <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	68ba      	ldr	r2, [r7, #8]
 8009db8:	4413      	add	r3, r2
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dbe:	4413      	add	r3, r2
 8009dc0:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dc4:	00db      	lsls	r3, r3, #3
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	4413      	add	r3, r2
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d202      	bcs.n	8009dd8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009dd2:	f06f 0305 	mvn.w	r3, #5
 8009dd6:	e04c      	b.n	8009e72 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dda:	3301      	adds	r3, #1
 8009ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8009dde:	88fb      	ldrh	r3, [r7, #6]
 8009de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009de2:	429a      	cmp	r2, r3
 8009de4:	dbe5      	blt.n	8009db2 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d101      	bne.n	8009df0 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	e040      	b.n	8009e72 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	da0a      	bge.n	8009e0c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d102      	bne.n	8009e02 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009dfc:	f06f 0305 	mvn.w	r3, #5
 8009e00:	e037      	b.n	8009e72 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009e02:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009e06:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009e14:	88fb      	ldrh	r3, [r7, #6]
 8009e16:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009e1c:	797b      	ldrb	r3, [r7, #5]
 8009e1e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009e22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e24:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009e26:	2300      	movs	r3, #0
 8009e28:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009e2a:	f107 0314 	add.w	r3, r7, #20
 8009e2e:	4619      	mov	r1, r3
 8009e30:	4816      	ldr	r0, [pc, #88]	; (8009e8c <netconn_write_vectors_partly+0x168>)
 8009e32:	f7ff fb13 	bl	800945c <netconn_apimsg>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009e3c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d114      	bne.n	8009e6e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009e4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e4e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009e50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d10a      	bne.n	8009e6e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d006      	beq.n	8009e6e <netconn_write_vectors_partly+0x14a>
 8009e60:	4b06      	ldr	r3, [pc, #24]	; (8009e7c <netconn_write_vectors_partly+0x158>)
 8009e62:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009e66:	490a      	ldr	r1, [pc, #40]	; (8009e90 <netconn_write_vectors_partly+0x16c>)
 8009e68:	4806      	ldr	r0, [pc, #24]	; (8009e84 <netconn_write_vectors_partly+0x160>)
 8009e6a:	f00e ffcf 	bl	8018e0c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009e6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3748      	adds	r7, #72	; 0x48
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	08019e14 	.word	0x08019e14
 8009e80:	0801a0ec 	.word	0x0801a0ec
 8009e84:	08019e6c 	.word	0x08019e6c
 8009e88:	0801a108 	.word	0x0801a108
 8009e8c:	0800b539 	.word	0x0800b539
 8009e90:	0801a12c 	.word	0x0801a12c

08009e94 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08c      	sub	sp, #48	; 0x30
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d109      	bne.n	8009eba <netconn_close_shutdown+0x26>
 8009ea6:	4b0f      	ldr	r3, [pc, #60]	; (8009ee4 <netconn_close_shutdown+0x50>)
 8009ea8:	f240 4247 	movw	r2, #1095	; 0x447
 8009eac:	490e      	ldr	r1, [pc, #56]	; (8009ee8 <netconn_close_shutdown+0x54>)
 8009eae:	480f      	ldr	r0, [pc, #60]	; (8009eec <netconn_close_shutdown+0x58>)
 8009eb0:	f00e ffac 	bl	8018e0c <iprintf>
 8009eb4:	f06f 030f 	mvn.w	r3, #15
 8009eb8:	e010      	b.n	8009edc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009ebe:	78fb      	ldrb	r3, [r7, #3]
 8009ec0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009ec2:	2329      	movs	r3, #41	; 0x29
 8009ec4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009ec6:	f107 030c 	add.w	r3, r7, #12
 8009eca:	4619      	mov	r1, r3
 8009ecc:	4808      	ldr	r0, [pc, #32]	; (8009ef0 <netconn_close_shutdown+0x5c>)
 8009ece:	f7ff fac5 	bl	800945c <netconn_apimsg>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009ed8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	3730      	adds	r7, #48	; 0x30
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}
 8009ee4:	08019e14 	.word	0x08019e14
 8009ee8:	0801a150 	.word	0x0801a150
 8009eec:	08019e6c 	.word	0x08019e6c
 8009ef0:	0800b75d 	.word	0x0800b75d

08009ef4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <netconn_err+0x12>
    return ERR_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e00d      	b.n	8009f22 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009f06:	f00e fe69 	bl	8018bdc <sys_arch_protect>
 8009f0a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	7a1b      	ldrb	r3, [r3, #8]
 8009f10:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009f18:	68f8      	ldr	r0, [r7, #12]
 8009f1a:	f00e fe6d 	bl	8018bf8 <sys_arch_unprotect>
  return err;
 8009f1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
	...

08009f2c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	4603      	mov	r3, r0
 8009f34:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f3a:	f113 0f0d 	cmn.w	r3, #13
 8009f3e:	d009      	beq.n	8009f54 <lwip_netconn_err_to_msg+0x28>
 8009f40:	f113 0f0d 	cmn.w	r3, #13
 8009f44:	dc0c      	bgt.n	8009f60 <lwip_netconn_err_to_msg+0x34>
 8009f46:	f113 0f0f 	cmn.w	r3, #15
 8009f4a:	d007      	beq.n	8009f5c <lwip_netconn_err_to_msg+0x30>
 8009f4c:	f113 0f0e 	cmn.w	r3, #14
 8009f50:	d002      	beq.n	8009f58 <lwip_netconn_err_to_msg+0x2c>
 8009f52:	e005      	b.n	8009f60 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009f54:	4b0a      	ldr	r3, [pc, #40]	; (8009f80 <lwip_netconn_err_to_msg+0x54>)
 8009f56:	e00e      	b.n	8009f76 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009f58:	4b0a      	ldr	r3, [pc, #40]	; (8009f84 <lwip_netconn_err_to_msg+0x58>)
 8009f5a:	e00c      	b.n	8009f76 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009f5c:	4b0a      	ldr	r3, [pc, #40]	; (8009f88 <lwip_netconn_err_to_msg+0x5c>)
 8009f5e:	e00a      	b.n	8009f76 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d005      	beq.n	8009f74 <lwip_netconn_err_to_msg+0x48>
 8009f68:	4b08      	ldr	r3, [pc, #32]	; (8009f8c <lwip_netconn_err_to_msg+0x60>)
 8009f6a:	227d      	movs	r2, #125	; 0x7d
 8009f6c:	4908      	ldr	r1, [pc, #32]	; (8009f90 <lwip_netconn_err_to_msg+0x64>)
 8009f6e:	4809      	ldr	r0, [pc, #36]	; (8009f94 <lwip_netconn_err_to_msg+0x68>)
 8009f70:	f00e ff4c 	bl	8018e0c <iprintf>
      return NULL;
 8009f74:	2300      	movs	r3, #0
  }
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
 8009f7e:	bf00      	nop
 8009f80:	0801dc0c 	.word	0x0801dc0c
 8009f84:	0801dc0d 	.word	0x0801dc0d
 8009f88:	0801dc0e 	.word	0x0801dc0e
 8009f8c:	0801a1b4 	.word	0x0801a1b4
 8009f90:	0801a1e8 	.word	0x0801a1e8
 8009f94:	0801a1f8 	.word	0x0801a1f8

08009f98 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d105      	bne.n	8009fb4 <lwip_netconn_is_err_msg+0x1c>
 8009fa8:	4b12      	ldr	r3, [pc, #72]	; (8009ff4 <lwip_netconn_is_err_msg+0x5c>)
 8009faa:	2285      	movs	r2, #133	; 0x85
 8009fac:	4912      	ldr	r1, [pc, #72]	; (8009ff8 <lwip_netconn_is_err_msg+0x60>)
 8009fae:	4813      	ldr	r0, [pc, #76]	; (8009ffc <lwip_netconn_is_err_msg+0x64>)
 8009fb0:	f00e ff2c 	bl	8018e0c <iprintf>

  if (msg == &netconn_aborted) {
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	4a12      	ldr	r2, [pc, #72]	; (800a000 <lwip_netconn_is_err_msg+0x68>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d104      	bne.n	8009fc6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	22f3      	movs	r2, #243	; 0xf3
 8009fc0:	701a      	strb	r2, [r3, #0]
    return 1;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	e012      	b.n	8009fec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a0e      	ldr	r2, [pc, #56]	; (800a004 <lwip_netconn_is_err_msg+0x6c>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d104      	bne.n	8009fd8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	22f2      	movs	r2, #242	; 0xf2
 8009fd2:	701a      	strb	r2, [r3, #0]
    return 1;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e009      	b.n	8009fec <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a0b      	ldr	r2, [pc, #44]	; (800a008 <lwip_netconn_is_err_msg+0x70>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d104      	bne.n	8009fea <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	22f1      	movs	r2, #241	; 0xf1
 8009fe4:	701a      	strb	r2, [r3, #0]
    return 1;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e000      	b.n	8009fec <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	0801a1b4 	.word	0x0801a1b4
 8009ff8:	0801a220 	.word	0x0801a220
 8009ffc:	0801a1f8 	.word	0x0801a1f8
 800a000:	0801dc0c 	.word	0x0801dc0c
 800a004:	0801dc0d 	.word	0x0801dc0d
 800a008:	0801dc0e 	.word	0x0801dc0e

0800a00c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b088      	sub	sp, #32
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d105      	bne.n	800a02c <recv_udp+0x20>
 800a020:	4b34      	ldr	r3, [pc, #208]	; (800a0f4 <recv_udp+0xe8>)
 800a022:	22e5      	movs	r2, #229	; 0xe5
 800a024:	4934      	ldr	r1, [pc, #208]	; (800a0f8 <recv_udp+0xec>)
 800a026:	4835      	ldr	r0, [pc, #212]	; (800a0fc <recv_udp+0xf0>)
 800a028:	f00e fef0 	bl	8018e0c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d105      	bne.n	800a03e <recv_udp+0x32>
 800a032:	4b30      	ldr	r3, [pc, #192]	; (800a0f4 <recv_udp+0xe8>)
 800a034:	22e6      	movs	r2, #230	; 0xe6
 800a036:	4932      	ldr	r1, [pc, #200]	; (800a100 <recv_udp+0xf4>)
 800a038:	4830      	ldr	r0, [pc, #192]	; (800a0fc <recv_udp+0xf0>)
 800a03a:	f00e fee7 	bl	8018e0c <iprintf>
  conn = (struct netconn *)arg;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d103      	bne.n	800a050 <recv_udp+0x44>
    pbuf_free(p);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f004 fe85 	bl	800ed58 <pbuf_free>
    return;
 800a04e:	e04d      	b.n	800a0ec <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	429a      	cmp	r2, r3
 800a058:	d005      	beq.n	800a066 <recv_udp+0x5a>
 800a05a:	4b26      	ldr	r3, [pc, #152]	; (800a0f4 <recv_udp+0xe8>)
 800a05c:	22ee      	movs	r2, #238	; 0xee
 800a05e:	4929      	ldr	r1, [pc, #164]	; (800a104 <recv_udp+0xf8>)
 800a060:	4826      	ldr	r0, [pc, #152]	; (800a0fc <recv_udp+0xf0>)
 800a062:	f00e fed3 	bl	8018e0c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	3310      	adds	r3, #16
 800a06a:	4618      	mov	r0, r3
 800a06c:	f00e fcac 	bl	80189c8 <sys_mbox_valid>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d103      	bne.n	800a07e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f004 fe6e 	bl	800ed58 <pbuf_free>
    return;
 800a07c:	e036      	b.n	800a0ec <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a07e:	2006      	movs	r0, #6
 800a080:	f003 ff42 	bl	800df08 <memp_malloc>
 800a084:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d103      	bne.n	800a094 <recv_udp+0x88>
    pbuf_free(p);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f004 fe63 	bl	800ed58 <pbuf_free>
    return;
 800a092:	e02b      	b.n	800a0ec <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a094:	69bb      	ldr	r3, [r7, #24]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d002      	beq.n	800a0ac <recv_udp+0xa0>
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	e000      	b.n	800a0ae <recv_udp+0xa2>
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a0b6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	891b      	ldrh	r3, [r3, #8]
 800a0bc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a0be:	69fb      	ldr	r3, [r7, #28]
 800a0c0:	3310      	adds	r3, #16
 800a0c2:	69b9      	ldr	r1, [r7, #24]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f00e fc1d 	bl	8018904 <sys_mbox_trypost>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d003      	beq.n	800a0d8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a0d0:	69b8      	ldr	r0, [r7, #24]
 800a0d2:	f001 fbed 	bl	800b8b0 <netbuf_delete>
    return;
 800a0d6:	e009      	b.n	800a0ec <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d005      	beq.n	800a0ec <recv_udp+0xe0>
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e4:	8afa      	ldrh	r2, [r7, #22]
 800a0e6:	2100      	movs	r1, #0
 800a0e8:	69f8      	ldr	r0, [r7, #28]
 800a0ea:	4798      	blx	r3
  }
}
 800a0ec:	3720      	adds	r7, #32
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	0801a1b4 	.word	0x0801a1b4
 800a0f8:	0801a22c 	.word	0x0801a22c
 800a0fc:	0801a1f8 	.word	0x0801a1f8
 800a100:	0801a250 	.word	0x0801a250
 800a104:	0801a270 	.word	0x0801a270

0800a108 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d106      	bne.n	800a12a <recv_tcp+0x22>
 800a11c:	4b36      	ldr	r3, [pc, #216]	; (800a1f8 <recv_tcp+0xf0>)
 800a11e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a122:	4936      	ldr	r1, [pc, #216]	; (800a1fc <recv_tcp+0xf4>)
 800a124:	4836      	ldr	r0, [pc, #216]	; (800a200 <recv_tcp+0xf8>)
 800a126:	f00e fe71 	bl	8018e0c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d106      	bne.n	800a13e <recv_tcp+0x36>
 800a130:	4b31      	ldr	r3, [pc, #196]	; (800a1f8 <recv_tcp+0xf0>)
 800a132:	f240 122d 	movw	r2, #301	; 0x12d
 800a136:	4933      	ldr	r1, [pc, #204]	; (800a204 <recv_tcp+0xfc>)
 800a138:	4831      	ldr	r0, [pc, #196]	; (800a200 <recv_tcp+0xf8>)
 800a13a:	f00e fe67 	bl	8018e0c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a13e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d006      	beq.n	800a154 <recv_tcp+0x4c>
 800a146:	4b2c      	ldr	r3, [pc, #176]	; (800a1f8 <recv_tcp+0xf0>)
 800a148:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a14c:	492e      	ldr	r1, [pc, #184]	; (800a208 <recv_tcp+0x100>)
 800a14e:	482c      	ldr	r0, [pc, #176]	; (800a200 <recv_tcp+0xf8>)
 800a150:	f00e fe5c 	bl	8018e0c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d102      	bne.n	800a164 <recv_tcp+0x5c>
    return ERR_VAL;
 800a15e:	f06f 0305 	mvn.w	r3, #5
 800a162:	e045      	b.n	800a1f0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	429a      	cmp	r2, r3
 800a16c:	d006      	beq.n	800a17c <recv_tcp+0x74>
 800a16e:	4b22      	ldr	r3, [pc, #136]	; (800a1f8 <recv_tcp+0xf0>)
 800a170:	f240 1235 	movw	r2, #309	; 0x135
 800a174:	4925      	ldr	r1, [pc, #148]	; (800a20c <recv_tcp+0x104>)
 800a176:	4822      	ldr	r0, [pc, #136]	; (800a200 <recv_tcp+0xf8>)
 800a178:	f00e fe48 	bl	8018e0c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	3310      	adds	r3, #16
 800a180:	4618      	mov	r0, r3
 800a182:	f00e fc21 	bl	80189c8 <sys_mbox_valid>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d10d      	bne.n	800a1a8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d008      	beq.n	800a1a4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	891b      	ldrh	r3, [r3, #8]
 800a196:	4619      	mov	r1, r3
 800a198:	68b8      	ldr	r0, [r7, #8]
 800a19a:	f005 feff 	bl	800ff9c <tcp_recved>
      pbuf_free(p);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f004 fdda 	bl	800ed58 <pbuf_free>
    }
    return ERR_OK;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	e023      	b.n	800a1f0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d005      	beq.n	800a1ba <recv_tcp+0xb2>
    msg = p;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	891b      	ldrh	r3, [r3, #8]
 800a1b6:	83fb      	strh	r3, [r7, #30]
 800a1b8:	e003      	b.n	800a1c2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a1ba:	4b15      	ldr	r3, [pc, #84]	; (800a210 <recv_tcp+0x108>)
 800a1bc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a1c2:	697b      	ldr	r3, [r7, #20]
 800a1c4:	3310      	adds	r3, #16
 800a1c6:	69b9      	ldr	r1, [r7, #24]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f00e fb9b 	bl	8018904 <sys_mbox_trypost>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d002      	beq.n	800a1da <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a1d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1d8:	e00a      	b.n	800a1f0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d005      	beq.n	800a1ee <recv_tcp+0xe6>
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e6:	8bfa      	ldrh	r2, [r7, #30]
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	6978      	ldr	r0, [r7, #20]
 800a1ec:	4798      	blx	r3
  }

  return ERR_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3720      	adds	r7, #32
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}
 800a1f8:	0801a1b4 	.word	0x0801a1b4
 800a1fc:	0801a290 	.word	0x0801a290
 800a200:	0801a1f8 	.word	0x0801a1f8
 800a204:	0801a2b4 	.word	0x0801a2b4
 800a208:	0801a2d4 	.word	0x0801a2d4
 800a20c:	0801a2ec 	.word	0x0801a2ec
 800a210:	0801dc0e 	.word	0x0801dc0e

0800a214 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
 800a21c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d106      	bne.n	800a236 <poll_tcp+0x22>
 800a228:	4b29      	ldr	r3, [pc, #164]	; (800a2d0 <poll_tcp+0xbc>)
 800a22a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a22e:	4929      	ldr	r1, [pc, #164]	; (800a2d4 <poll_tcp+0xc0>)
 800a230:	4829      	ldr	r0, [pc, #164]	; (800a2d8 <poll_tcp+0xc4>)
 800a232:	f00e fdeb 	bl	8018e0c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d104      	bne.n	800a248 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a23e:	2101      	movs	r1, #1
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 ffad 	bl	800b1a0 <lwip_netconn_do_writemore>
 800a246:	e016      	b.n	800a276 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	785b      	ldrb	r3, [r3, #1]
 800a24c:	2b04      	cmp	r3, #4
 800a24e:	d112      	bne.n	800a276 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6a1b      	ldr	r3, [r3, #32]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00a      	beq.n	800a26e <poll_tcp+0x5a>
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6a1b      	ldr	r3, [r3, #32]
 800a25c:	7a5b      	ldrb	r3, [r3, #9]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d005      	beq.n	800a26e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	7a5a      	ldrb	r2, [r3, #9]
 800a268:	3a01      	subs	r2, #1
 800a26a:	b2d2      	uxtb	r2, r2
 800a26c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a26e:	2101      	movs	r1, #1
 800a270:	68f8      	ldr	r0, [r7, #12]
 800a272:	f000 fbf7 	bl	800aa64 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	7f1b      	ldrb	r3, [r3, #28]
 800a27a:	f003 0310 	and.w	r3, r3, #16
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d021      	beq.n	800a2c6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d01d      	beq.n	800a2c6 <poll_tcp+0xb2>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a292:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a296:	d316      	bcc.n	800a2c6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a2a0:	2b04      	cmp	r3, #4
 800a2a2:	d810      	bhi.n	800a2c6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	7f1b      	ldrb	r3, [r3, #28]
 800a2a8:	f023 0310 	bic.w	r3, r3, #16
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d005      	beq.n	800a2c6 <poll_tcp+0xb2>
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2102      	movs	r1, #2
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}
 800a2d0:	0801a1b4 	.word	0x0801a1b4
 800a2d4:	0801a30c 	.word	0x0801a30c
 800a2d8:	0801a1f8 	.word	0x0801a1f8

0800a2dc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b086      	sub	sp, #24
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	4613      	mov	r3, r2
 800a2e8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a2ee:	697b      	ldr	r3, [r7, #20]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d106      	bne.n	800a302 <sent_tcp+0x26>
 800a2f4:	4b20      	ldr	r3, [pc, #128]	; (800a378 <sent_tcp+0x9c>)
 800a2f6:	f240 1293 	movw	r2, #403	; 0x193
 800a2fa:	4920      	ldr	r1, [pc, #128]	; (800a37c <sent_tcp+0xa0>)
 800a2fc:	4820      	ldr	r0, [pc, #128]	; (800a380 <sent_tcp+0xa4>)
 800a2fe:	f00e fd85 	bl	8018e0c <iprintf>

  if (conn) {
 800a302:	697b      	ldr	r3, [r7, #20]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d032      	beq.n	800a36e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	785b      	ldrb	r3, [r3, #1]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d104      	bne.n	800a31a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a310:	2101      	movs	r1, #1
 800a312:	6978      	ldr	r0, [r7, #20]
 800a314:	f000 ff44 	bl	800b1a0 <lwip_netconn_do_writemore>
 800a318:	e007      	b.n	800a32a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	785b      	ldrb	r3, [r3, #1]
 800a31e:	2b04      	cmp	r3, #4
 800a320:	d103      	bne.n	800a32a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a322:	2101      	movs	r1, #1
 800a324:	6978      	ldr	r0, [r7, #20]
 800a326:	f000 fb9d 	bl	800aa64 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d01d      	beq.n	800a36e <sent_tcp+0x92>
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a33a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a33e:	d316      	bcc.n	800a36e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a348:	2b04      	cmp	r3, #4
 800a34a:	d810      	bhi.n	800a36e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	7f1b      	ldrb	r3, [r3, #28]
 800a350:	f023 0310 	bic.w	r3, r3, #16
 800a354:	b2da      	uxtb	r2, r3
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a35a:	697b      	ldr	r3, [r7, #20]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d005      	beq.n	800a36e <sent_tcp+0x92>
 800a362:	697b      	ldr	r3, [r7, #20]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	88fa      	ldrh	r2, [r7, #6]
 800a368:	2102      	movs	r1, #2
 800a36a:	6978      	ldr	r0, [r7, #20]
 800a36c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3718      	adds	r7, #24
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	0801a1b4 	.word	0x0801a1b4
 800a37c:	0801a30c 	.word	0x0801a30c
 800a380:	0801a1f8 	.word	0x0801a1f8

0800a384 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b088      	sub	sp, #32
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	460b      	mov	r3, r1
 800a38e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d106      	bne.n	800a3a8 <err_tcp+0x24>
 800a39a:	4b5f      	ldr	r3, [pc, #380]	; (800a518 <err_tcp+0x194>)
 800a39c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a3a0:	495e      	ldr	r1, [pc, #376]	; (800a51c <err_tcp+0x198>)
 800a3a2:	485f      	ldr	r0, [pc, #380]	; (800a520 <err_tcp+0x19c>)
 800a3a4:	f00e fd32 	bl	8018e0c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a3a8:	f00e fc18 	bl	8018bdc <sys_arch_protect>
 800a3ac:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a3b4:	69fb      	ldr	r3, [r7, #28]
 800a3b6:	78fa      	ldrb	r2, [r7, #3]
 800a3b8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	7f1b      	ldrb	r3, [r3, #28]
 800a3be:	f043 0301 	orr.w	r3, r3, #1
 800a3c2:	b2da      	uxtb	r2, r3
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	785b      	ldrb	r3, [r3, #1]
 800a3cc:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	2200      	movs	r2, #0
 800a3d2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a3d4:	69b8      	ldr	r0, [r7, #24]
 800a3d6:	f00e fc0f 	bl	8018bf8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d005      	beq.n	800a3ee <err_tcp+0x6a>
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	2104      	movs	r1, #4
 800a3ea:	69f8      	ldr	r0, [r7, #28]
 800a3ec:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d005      	beq.n	800a402 <err_tcp+0x7e>
 800a3f6:	69fb      	ldr	r3, [r7, #28]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	69f8      	ldr	r0, [r7, #28]
 800a400:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a402:	69fb      	ldr	r3, [r7, #28]
 800a404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a406:	2b00      	cmp	r3, #0
 800a408:	d005      	beq.n	800a416 <err_tcp+0x92>
 800a40a:	69fb      	ldr	r3, [r7, #28]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	2200      	movs	r2, #0
 800a410:	2102      	movs	r1, #2
 800a412:	69f8      	ldr	r0, [r7, #28]
 800a414:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a416:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff fd86 	bl	8009f2c <lwip_netconn_err_to_msg>
 800a420:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	3310      	adds	r3, #16
 800a426:	4618      	mov	r0, r3
 800a428:	f00e face 	bl	80189c8 <sys_mbox_valid>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d005      	beq.n	800a43e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	3310      	adds	r3, #16
 800a436:	6939      	ldr	r1, [r7, #16]
 800a438:	4618      	mov	r0, r3
 800a43a:	f00e fa63 	bl	8018904 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a43e:	69fb      	ldr	r3, [r7, #28]
 800a440:	3314      	adds	r3, #20
 800a442:	4618      	mov	r0, r3
 800a444:	f00e fac0 	bl	80189c8 <sys_mbox_valid>
 800a448:	4603      	mov	r3, r0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d005      	beq.n	800a45a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a44e:	69fb      	ldr	r3, [r7, #28]
 800a450:	3314      	adds	r3, #20
 800a452:	6939      	ldr	r1, [r7, #16]
 800a454:	4618      	mov	r0, r3
 800a456:	f00e fa55 	bl	8018904 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d005      	beq.n	800a46c <err_tcp+0xe8>
 800a460:	7dfb      	ldrb	r3, [r7, #23]
 800a462:	2b04      	cmp	r3, #4
 800a464:	d002      	beq.n	800a46c <err_tcp+0xe8>
 800a466:	7dfb      	ldrb	r3, [r7, #23]
 800a468:	2b03      	cmp	r3, #3
 800a46a:	d143      	bne.n	800a4f4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	7f1b      	ldrb	r3, [r3, #28]
 800a470:	f003 0304 	and.w	r3, r3, #4
 800a474:	2b00      	cmp	r3, #0
 800a476:	bf14      	ite	ne
 800a478:	2301      	movne	r3, #1
 800a47a:	2300      	moveq	r3, #0
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a480:	69fb      	ldr	r3, [r7, #28]
 800a482:	7f1b      	ldrb	r3, [r3, #28]
 800a484:	f023 0304 	bic.w	r3, r3, #4
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	69fb      	ldr	r3, [r7, #28]
 800a48c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d13b      	bne.n	800a50c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	6a1b      	ldr	r3, [r3, #32]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d106      	bne.n	800a4aa <err_tcp+0x126>
 800a49c:	4b1e      	ldr	r3, [pc, #120]	; (800a518 <err_tcp+0x194>)
 800a49e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a4a2:	4920      	ldr	r1, [pc, #128]	; (800a524 <err_tcp+0x1a0>)
 800a4a4:	481e      	ldr	r0, [pc, #120]	; (800a520 <err_tcp+0x19c>)
 800a4a6:	f00e fcb1 	bl	8018e0c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a4aa:	7dfb      	ldrb	r3, [r7, #23]
 800a4ac:	2b04      	cmp	r3, #4
 800a4ae:	d104      	bne.n	800a4ba <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	6a1b      	ldr	r3, [r3, #32]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	711a      	strb	r2, [r3, #4]
 800a4b8:	e003      	b.n	800a4c2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	6a1b      	ldr	r3, [r3, #32]
 800a4be:	78fa      	ldrb	r2, [r7, #3]
 800a4c0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	6a1b      	ldr	r3, [r3, #32]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	330c      	adds	r3, #12
 800a4ca:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a4cc:	68b8      	ldr	r0, [r7, #8]
 800a4ce:	f00e fb09 	bl	8018ae4 <sys_sem_valid>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d106      	bne.n	800a4e6 <err_tcp+0x162>
 800a4d8:	4b0f      	ldr	r3, [pc, #60]	; (800a518 <err_tcp+0x194>)
 800a4da:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a4de:	4912      	ldr	r1, [pc, #72]	; (800a528 <err_tcp+0x1a4>)
 800a4e0:	480f      	ldr	r0, [pc, #60]	; (800a520 <err_tcp+0x19c>)
 800a4e2:	f00e fc93 	bl	8018e0c <iprintf>
      conn->current_msg = NULL;
 800a4e6:	69fb      	ldr	r3, [r7, #28]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a4ec:	68b8      	ldr	r0, [r7, #8]
 800a4ee:	f00e fadf 	bl	8018ab0 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a4f2:	e00b      	b.n	800a50c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a4f4:	69fb      	ldr	r3, [r7, #28]
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d008      	beq.n	800a50e <err_tcp+0x18a>
 800a4fc:	4b06      	ldr	r3, [pc, #24]	; (800a518 <err_tcp+0x194>)
 800a4fe:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a502:	490a      	ldr	r1, [pc, #40]	; (800a52c <err_tcp+0x1a8>)
 800a504:	4806      	ldr	r0, [pc, #24]	; (800a520 <err_tcp+0x19c>)
 800a506:	f00e fc81 	bl	8018e0c <iprintf>
  }
}
 800a50a:	e000      	b.n	800a50e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a50c:	bf00      	nop
}
 800a50e:	bf00      	nop
 800a510:	3720      	adds	r7, #32
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	0801a1b4 	.word	0x0801a1b4
 800a51c:	0801a30c 	.word	0x0801a30c
 800a520:	0801a1f8 	.word	0x0801a1f8
 800a524:	0801a31c 	.word	0x0801a31c
 800a528:	0801a338 	.word	0x0801a338
 800a52c:	0801a354 	.word	0x0801a354

0800a530 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f006 fbf1 	bl	8010d28 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a546:	490a      	ldr	r1, [pc, #40]	; (800a570 <setup_tcp+0x40>)
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f006 fbff 	bl	8010d4c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a54e:	4909      	ldr	r1, [pc, #36]	; (800a574 <setup_tcp+0x44>)
 800a550:	68f8      	ldr	r0, [r7, #12]
 800a552:	f006 fc1d 	bl	8010d90 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a556:	2202      	movs	r2, #2
 800a558:	4907      	ldr	r1, [pc, #28]	; (800a578 <setup_tcp+0x48>)
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f006 fc74 	bl	8010e48 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a560:	4906      	ldr	r1, [pc, #24]	; (800a57c <setup_tcp+0x4c>)
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f006 fc36 	bl	8010dd4 <tcp_err>
}
 800a568:	bf00      	nop
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	0800a109 	.word	0x0800a109
 800a574:	0800a2dd 	.word	0x0800a2dd
 800a578:	0800a215 	.word	0x0800a215
 800a57c:	0800a385 	.word	0x0800a385

0800a580 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800a580:	b590      	push	{r4, r7, lr}
 800a582:	b089      	sub	sp, #36	; 0x24
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	4613      	mov	r3, r2
 800a58c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800a592:	69fb      	ldr	r3, [r7, #28]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d102      	bne.n	800a59e <accept_function+0x1e>
    return ERR_VAL;
 800a598:	f06f 0305 	mvn.w	r3, #5
 800a59c:	e0a1      	b.n	800a6e2 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	3314      	adds	r3, #20
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f00e fa10 	bl	80189c8 <sys_mbox_valid>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d102      	bne.n	800a5b4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800a5ae:	f06f 0305 	mvn.w	r3, #5
 800a5b2:	e096      	b.n	800a6e2 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d11b      	bne.n	800a5f2 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	f103 0414 	add.w	r4, r3, #20
 800a5c0:	f06f 000c 	mvn.w	r0, #12
 800a5c4:	f7ff fcb2 	bl	8009f2c <lwip_netconn_err_to_msg>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	4619      	mov	r1, r3
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f00e f999 	bl	8018904 <sys_mbox_trypost>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d109      	bne.n	800a5ec <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d005      	beq.n	800a5ec <accept_function+0x6c>
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	69f8      	ldr	r0, [r7, #28]
 800a5ea:	4798      	blx	r3
    }
    return ERR_VAL;
 800a5ec:	f06f 0305 	mvn.w	r3, #5
 800a5f0:	e077      	b.n	800a6e2 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 800a5f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d006      	beq.n	800a608 <accept_function+0x88>
 800a5fa:	4b3c      	ldr	r3, [pc, #240]	; (800a6ec <accept_function+0x16c>)
 800a5fc:	f240 222a 	movw	r2, #554	; 0x22a
 800a600:	493b      	ldr	r1, [pc, #236]	; (800a6f0 <accept_function+0x170>)
 800a602:	483c      	ldr	r0, [pc, #240]	; (800a6f4 <accept_function+0x174>)
 800a604:	f00e fc02 	bl	8018e0c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800a608:	69fb      	ldr	r3, [r7, #28]
 800a60a:	781a      	ldrb	r2, [r3, #0]
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a610:	4619      	mov	r1, r3
 800a612:	4610      	mov	r0, r2
 800a614:	f000 f8f0 	bl	800a7f8 <netconn_alloc>
 800a618:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d11b      	bne.n	800a658 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	f103 0414 	add.w	r4, r3, #20
 800a626:	f06f 000c 	mvn.w	r0, #12
 800a62a:	f7ff fc7f 	bl	8009f2c <lwip_netconn_err_to_msg>
 800a62e:	4603      	mov	r3, r0
 800a630:	4619      	mov	r1, r3
 800a632:	4620      	mov	r0, r4
 800a634:	f00e f966 	bl	8018904 <sys_mbox_trypost>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d109      	bne.n	800a652 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a63e:	69fb      	ldr	r3, [r7, #28]
 800a640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a642:	2b00      	cmp	r3, #0
 800a644:	d005      	beq.n	800a652 <accept_function+0xd2>
 800a646:	69fb      	ldr	r3, [r7, #28]
 800a648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64a:	2200      	movs	r2, #0
 800a64c:	2100      	movs	r1, #0
 800a64e:	69f8      	ldr	r0, [r7, #28]
 800a650:	4798      	blx	r3
    }
    return ERR_MEM;
 800a652:	f04f 33ff 	mov.w	r3, #4294967295
 800a656:	e044      	b.n	800a6e2 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	68ba      	ldr	r2, [r7, #8]
 800a65c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800a65e:	69b8      	ldr	r0, [r7, #24]
 800a660:	f7ff ff66 	bl	800a530 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	3314      	adds	r3, #20
 800a668:	69b9      	ldr	r1, [r7, #24]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f00e f94a 	bl	8018904 <sys_mbox_trypost>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d02a      	beq.n	800a6cc <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800a67c:	2100      	movs	r1, #0
 800a67e:	6978      	ldr	r0, [r7, #20]
 800a680:	f006 fb52 	bl	8010d28 <tcp_arg>
    tcp_recv(pcb, NULL);
 800a684:	2100      	movs	r1, #0
 800a686:	6978      	ldr	r0, [r7, #20]
 800a688:	f006 fb60 	bl	8010d4c <tcp_recv>
    tcp_sent(pcb, NULL);
 800a68c:	2100      	movs	r1, #0
 800a68e:	6978      	ldr	r0, [r7, #20]
 800a690:	f006 fb7e 	bl	8010d90 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800a694:	2200      	movs	r2, #0
 800a696:	2100      	movs	r1, #0
 800a698:	6978      	ldr	r0, [r7, #20]
 800a69a:	f006 fbd5 	bl	8010e48 <tcp_poll>
    tcp_err(pcb, NULL);
 800a69e:	2100      	movs	r1, #0
 800a6a0:	6978      	ldr	r0, [r7, #20]
 800a6a2:	f006 fb97 	bl	8010dd4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	3310      	adds	r3, #16
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f00e f915 	bl	80188e0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	3310      	adds	r3, #16
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f00e f995 	bl	80189ea <sys_mbox_set_invalid>
    netconn_free(newconn);
 800a6c0:	69b8      	ldr	r0, [r7, #24]
 800a6c2:	f000 f907 	bl	800a8d4 <netconn_free>
    return ERR_MEM;
 800a6c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6ca:	e00a      	b.n	800a6e2 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d005      	beq.n	800a6e0 <accept_function+0x160>
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2100      	movs	r1, #0
 800a6dc:	69f8      	ldr	r0, [r7, #28]
 800a6de:	4798      	blx	r3
  }

  return ERR_OK;
 800a6e0:	2300      	movs	r3, #0
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3724      	adds	r7, #36	; 0x24
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd90      	pop	{r4, r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	0801a1b4 	.word	0x0801a1b4
 800a6f0:	0801a370 	.word	0x0801a370
 800a6f4:	0801a1f8 	.word	0x0801a1f8

0800a6f8 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a6f8:	b590      	push	{r4, r7, lr}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685b      	ldr	r3, [r3, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d006      	beq.n	800a71c <pcb_new+0x24>
 800a70e:	4b2b      	ldr	r3, [pc, #172]	; (800a7bc <pcb_new+0xc4>)
 800a710:	f240 2265 	movw	r2, #613	; 0x265
 800a714:	492a      	ldr	r1, [pc, #168]	; (800a7c0 <pcb_new+0xc8>)
 800a716:	482b      	ldr	r0, [pc, #172]	; (800a7c4 <pcb_new+0xcc>)
 800a718:	f00e fb78 	bl	8018e0c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a726:	2b10      	cmp	r3, #16
 800a728:	d022      	beq.n	800a770 <pcb_new+0x78>
 800a72a:	2b20      	cmp	r3, #32
 800a72c:	d133      	bne.n	800a796 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681c      	ldr	r4, [r3, #0]
 800a732:	7bfb      	ldrb	r3, [r7, #15]
 800a734:	4618      	mov	r0, r3
 800a736:	f00b fdbc 	bl	80162b2 <udp_new_ip_type>
 800a73a:	4603      	mov	r3, r0
 800a73c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d02a      	beq.n	800a79e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	781b      	ldrb	r3, [r3, #0]
 800a74e:	2b22      	cmp	r3, #34	; 0x22
 800a750:	d104      	bne.n	800a75c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	2201      	movs	r2, #1
 800a75a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	6858      	ldr	r0, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	461a      	mov	r2, r3
 800a768:	4917      	ldr	r1, [pc, #92]	; (800a7c8 <pcb_new+0xd0>)
 800a76a:	f00b fd29 	bl	80161c0 <udp_recv>
      }
      break;
 800a76e:	e016      	b.n	800a79e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681c      	ldr	r4, [r3, #0]
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	4618      	mov	r0, r3
 800a778:	f006 fac8 	bl	8010d0c <tcp_new_ip_type>
 800a77c:	4603      	mov	r3, r0
 800a77e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00b      	beq.n	800a7a2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4618      	mov	r0, r3
 800a790:	f7ff fece 	bl	800a530 <setup_tcp>
      }
      break;
 800a794:	e005      	b.n	800a7a2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	22fa      	movs	r2, #250	; 0xfa
 800a79a:	711a      	strb	r2, [r3, #4]
      return;
 800a79c:	e00a      	b.n	800a7b4 <pcb_new+0xbc>
      break;
 800a79e:	bf00      	nop
 800a7a0:	e000      	b.n	800a7a4 <pcb_new+0xac>
      break;
 800a7a2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d102      	bne.n	800a7b4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	22ff      	movs	r2, #255	; 0xff
 800a7b2:	711a      	strb	r2, [r3, #4]
  }
}
 800a7b4:	3714      	adds	r7, #20
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd90      	pop	{r4, r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	0801a1b4 	.word	0x0801a1b4
 800a7c0:	0801a398 	.word	0x0801a398
 800a7c4:	0801a1f8 	.word	0x0801a1f8
 800a7c8:	0800a00d 	.word	0x0800a00d

0800a7cc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d102      	bne.n	800a7ee <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	f7ff ff85 	bl	800a6f8 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a7ee:	bf00      	nop
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
	...

0800a7f8 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	4603      	mov	r3, r0
 800a800:	6039      	str	r1, [r7, #0]
 800a802:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a808:	2007      	movs	r0, #7
 800a80a:	f003 fb7d 	bl	800df08 <memp_malloc>
 800a80e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <netconn_alloc+0x22>
    return NULL;
 800a816:	2300      	movs	r3, #0
 800a818:	e052      	b.n	800a8c0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2200      	movs	r2, #0
 800a81e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	79fa      	ldrb	r2, [r7, #7]
 800a824:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2200      	movs	r2, #0
 800a82a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a832:	2b10      	cmp	r3, #16
 800a834:	d004      	beq.n	800a840 <netconn_alloc+0x48>
 800a836:	2b20      	cmp	r3, #32
 800a838:	d105      	bne.n	800a846 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a83a:	2306      	movs	r3, #6
 800a83c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a83e:	e00a      	b.n	800a856 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a840:	2306      	movs	r3, #6
 800a842:	617b      	str	r3, [r7, #20]
      break;
 800a844:	e007      	b.n	800a856 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a846:	4b20      	ldr	r3, [pc, #128]	; (800a8c8 <netconn_alloc+0xd0>)
 800a848:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a84c:	491f      	ldr	r1, [pc, #124]	; (800a8cc <netconn_alloc+0xd4>)
 800a84e:	4820      	ldr	r0, [pc, #128]	; (800a8d0 <netconn_alloc+0xd8>)
 800a850:	f00e fadc 	bl	8018e0c <iprintf>
      goto free_and_return;
 800a854:	e02f      	b.n	800a8b6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3310      	adds	r3, #16
 800a85a:	6979      	ldr	r1, [r7, #20]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f00e f825 	bl	80188ac <sys_mbox_new>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d125      	bne.n	800a8b4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	330c      	adds	r3, #12
 800a86c:	2100      	movs	r1, #0
 800a86e:	4618      	mov	r0, r3
 800a870:	f00e f8c8 	bl	8018a04 <sys_sem_new>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d005      	beq.n	800a886 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	3310      	adds	r3, #16
 800a87e:	4618      	mov	r0, r3
 800a880:	f00e f82e 	bl	80188e0 <sys_mbox_free>
    goto free_and_return;
 800a884:	e017      	b.n	800a8b6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	3314      	adds	r3, #20
 800a88a:	4618      	mov	r0, r3
 800a88c:	f00e f8ad 	bl	80189ea <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2200      	movs	r2, #0
 800a894:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	f04f 32ff 	mov.w	r2, #4294967295
 800a89c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	7cfa      	ldrb	r2, [r7, #19]
 800a8ae:	771a      	strb	r2, [r3, #28]
  return conn;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	e005      	b.n	800a8c0 <netconn_alloc+0xc8>
    goto free_and_return;
 800a8b4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a8b6:	68f9      	ldr	r1, [r7, #12]
 800a8b8:	2007      	movs	r0, #7
 800a8ba:	f003 fb77 	bl	800dfac <memp_free>
  return NULL;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3718      	adds	r7, #24
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	0801a1b4 	.word	0x0801a1b4
 800a8cc:	0801a3b8 	.word	0x0801a3b8
 800a8d0:	0801a1f8 	.word	0x0801a1f8

0800a8d4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685b      	ldr	r3, [r3, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d006      	beq.n	800a8f2 <netconn_free+0x1e>
 800a8e4:	4b1b      	ldr	r3, [pc, #108]	; (800a954 <netconn_free+0x80>)
 800a8e6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a8ea:	491b      	ldr	r1, [pc, #108]	; (800a958 <netconn_free+0x84>)
 800a8ec:	481b      	ldr	r0, [pc, #108]	; (800a95c <netconn_free+0x88>)
 800a8ee:	f00e fa8d 	bl	8018e0c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3310      	adds	r3, #16
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f00e f866 	bl	80189c8 <sys_mbox_valid>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d006      	beq.n	800a910 <netconn_free+0x3c>
 800a902:	4b14      	ldr	r3, [pc, #80]	; (800a954 <netconn_free+0x80>)
 800a904:	f240 3223 	movw	r2, #803	; 0x323
 800a908:	4915      	ldr	r1, [pc, #84]	; (800a960 <netconn_free+0x8c>)
 800a90a:	4814      	ldr	r0, [pc, #80]	; (800a95c <netconn_free+0x88>)
 800a90c:	f00e fa7e 	bl	8018e0c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	3314      	adds	r3, #20
 800a914:	4618      	mov	r0, r3
 800a916:	f00e f857 	bl	80189c8 <sys_mbox_valid>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d006      	beq.n	800a92e <netconn_free+0x5a>
 800a920:	4b0c      	ldr	r3, [pc, #48]	; (800a954 <netconn_free+0x80>)
 800a922:	f240 3226 	movw	r2, #806	; 0x326
 800a926:	490f      	ldr	r1, [pc, #60]	; (800a964 <netconn_free+0x90>)
 800a928:	480c      	ldr	r0, [pc, #48]	; (800a95c <netconn_free+0x88>)
 800a92a:	f00e fa6f 	bl	8018e0c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	330c      	adds	r3, #12
 800a932:	4618      	mov	r0, r3
 800a934:	f00e f8c9 	bl	8018aca <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	330c      	adds	r3, #12
 800a93c:	4618      	mov	r0, r3
 800a93e:	f00e f8e2 	bl	8018b06 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a942:	6879      	ldr	r1, [r7, #4]
 800a944:	2007      	movs	r0, #7
 800a946:	f003 fb31 	bl	800dfac <memp_free>
}
 800a94a:	bf00      	nop
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	0801a1b4 	.word	0x0801a1b4
 800a958:	0801a3e0 	.word	0x0801a3e0
 800a95c:	0801a1f8 	.word	0x0801a1f8
 800a960:	0801a410 	.word	0x0801a410
 800a964:	0801a44c 	.word	0x0801a44c

0800a968 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b086      	sub	sp, #24
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	3310      	adds	r3, #16
 800a974:	4618      	mov	r0, r3
 800a976:	f00e f827 	bl	80189c8 <sys_mbox_valid>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d02f      	beq.n	800a9e0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a980:	e018      	b.n	800a9b4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a98a:	2b10      	cmp	r3, #16
 800a98c:	d10e      	bne.n	800a9ac <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	f107 020f 	add.w	r2, r7, #15
 800a994:	4611      	mov	r1, r2
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff fafe 	bl	8009f98 <lwip_netconn_is_err_msg>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d108      	bne.n	800a9b4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f004 f9d7 	bl	800ed58 <pbuf_free>
 800a9aa:	e003      	b.n	800a9b4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	f000 ff7e 	bl	800b8b0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3310      	adds	r3, #16
 800a9b8:	f107 0210 	add.w	r2, r7, #16
 800a9bc:	4611      	mov	r1, r2
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f00d ffeb 	bl	801899a <sys_arch_mbox_tryfetch>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ca:	d1da      	bne.n	800a982 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	3310      	adds	r3, #16
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f00d ff85 	bl	80188e0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	3310      	adds	r3, #16
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f00e f805 	bl	80189ea <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3314      	adds	r3, #20
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f00d ffef 	bl	80189c8 <sys_mbox_valid>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d034      	beq.n	800aa5a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a9f0:	e01d      	b.n	800aa2e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	f107 020e 	add.w	r2, r7, #14
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f7ff facc 	bl	8009f98 <lwip_netconn_is_err_msg>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d113      	bne.n	800aa2e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800aa0a:	6978      	ldr	r0, [r7, #20]
 800aa0c:	f7ff ffac 	bl	800a968 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d007      	beq.n	800aa28 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	685b      	ldr	r3, [r3, #4]
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f005 f8f5 	bl	800fc0c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2200      	movs	r2, #0
 800aa26:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800aa28:	6978      	ldr	r0, [r7, #20]
 800aa2a:	f7ff ff53 	bl	800a8d4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	3314      	adds	r3, #20
 800aa32:	f107 0210 	add.w	r2, r7, #16
 800aa36:	4611      	mov	r1, r2
 800aa38:	4618      	mov	r0, r3
 800aa3a:	f00d ffae 	bl	801899a <sys_arch_mbox_tryfetch>
 800aa3e:	4603      	mov	r3, r0
 800aa40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa44:	d1d5      	bne.n	800a9f2 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3314      	adds	r3, #20
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f00d ff48 	bl	80188e0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	3314      	adds	r3, #20
 800aa54:	4618      	mov	r0, r3
 800aa56:	f00d ffc8 	bl	80189ea <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800aa5a:	bf00      	nop
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}
	...

0800aa64 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800aa70:	2300      	movs	r3, #0
 800aa72:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d106      	bne.n	800aa88 <lwip_netconn_do_close_internal+0x24>
 800aa7a:	4ba1      	ldr	r3, [pc, #644]	; (800ad00 <lwip_netconn_do_close_internal+0x29c>)
 800aa7c:	f240 32a2 	movw	r2, #930	; 0x3a2
 800aa80:	49a0      	ldr	r1, [pc, #640]	; (800ad04 <lwip_netconn_do_close_internal+0x2a0>)
 800aa82:	48a1      	ldr	r0, [pc, #644]	; (800ad08 <lwip_netconn_do_close_internal+0x2a4>)
 800aa84:	f00e f9c2 	bl	8018e0c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa90:	2b10      	cmp	r3, #16
 800aa92:	d006      	beq.n	800aaa2 <lwip_netconn_do_close_internal+0x3e>
 800aa94:	4b9a      	ldr	r3, [pc, #616]	; (800ad00 <lwip_netconn_do_close_internal+0x29c>)
 800aa96:	f240 32a3 	movw	r2, #931	; 0x3a3
 800aa9a:	499c      	ldr	r1, [pc, #624]	; (800ad0c <lwip_netconn_do_close_internal+0x2a8>)
 800aa9c:	489a      	ldr	r0, [pc, #616]	; (800ad08 <lwip_netconn_do_close_internal+0x2a4>)
 800aa9e:	f00e f9b5 	bl	8018e0c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b04      	cmp	r3, #4
 800aaa8:	d006      	beq.n	800aab8 <lwip_netconn_do_close_internal+0x54>
 800aaaa:	4b95      	ldr	r3, [pc, #596]	; (800ad00 <lwip_netconn_do_close_internal+0x29c>)
 800aaac:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800aab0:	4997      	ldr	r1, [pc, #604]	; (800ad10 <lwip_netconn_do_close_internal+0x2ac>)
 800aab2:	4895      	ldr	r0, [pc, #596]	; (800ad08 <lwip_netconn_do_close_internal+0x2a4>)
 800aab4:	f00e f9aa 	bl	8018e0c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d106      	bne.n	800aace <lwip_netconn_do_close_internal+0x6a>
 800aac0:	4b8f      	ldr	r3, [pc, #572]	; (800ad00 <lwip_netconn_do_close_internal+0x29c>)
 800aac2:	f240 32a5 	movw	r2, #933	; 0x3a5
 800aac6:	4993      	ldr	r1, [pc, #588]	; (800ad14 <lwip_netconn_do_close_internal+0x2b0>)
 800aac8:	488f      	ldr	r0, [pc, #572]	; (800ad08 <lwip_netconn_do_close_internal+0x2a4>)
 800aaca:	f00e f99f 	bl	8018e0c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a1b      	ldr	r3, [r3, #32]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d106      	bne.n	800aae4 <lwip_netconn_do_close_internal+0x80>
 800aad6:	4b8a      	ldr	r3, [pc, #552]	; (800ad00 <lwip_netconn_do_close_internal+0x29c>)
 800aad8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800aadc:	498e      	ldr	r1, [pc, #568]	; (800ad18 <lwip_netconn_do_close_internal+0x2b4>)
 800aade:	488a      	ldr	r0, [pc, #552]	; (800ad08 <lwip_netconn_do_close_internal+0x2a4>)
 800aae0:	f00e f994 	bl	8018e0c <iprintf>

  tpcb = conn->pcb.tcp;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	7a1b      	ldrb	r3, [r3, #8]
 800aaf0:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800aafa:	7bfb      	ldrb	r3, [r7, #15]
 800aafc:	f003 0302 	and.w	r3, r3, #2
 800ab00:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	d102      	bne.n	800ab0e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800ab08:	2301      	movs	r3, #1
 800ab0a:	75bb      	strb	r3, [r7, #22]
 800ab0c:	e01f      	b.n	800ab4e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800ab0e:	7bbb      	ldrb	r3, [r7, #14]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00e      	beq.n	800ab32 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800ab14:	693b      	ldr	r3, [r7, #16]
 800ab16:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800ab18:	2b05      	cmp	r3, #5
 800ab1a:	d007      	beq.n	800ab2c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800ab20:	2b06      	cmp	r3, #6
 800ab22:	d003      	beq.n	800ab2c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800ab28:	2b08      	cmp	r3, #8
 800ab2a:	d102      	bne.n	800ab32 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	75bb      	strb	r3, [r7, #22]
 800ab30:	e00d      	b.n	800ab4e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800ab32:	7b7b      	ldrb	r3, [r7, #13]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d008      	beq.n	800ab4a <lwip_netconn_do_close_internal+0xe6>
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	8b5b      	ldrh	r3, [r3, #26]
 800ab3c:	f003 0310 	and.w	r3, r3, #16
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800ab44:	2301      	movs	r3, #1
 800ab46:	75bb      	strb	r3, [r7, #22]
 800ab48:	e001      	b.n	800ab4e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800ab4e:	7dbb      	ldrb	r3, [r7, #22]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d003      	beq.n	800ab5c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800ab54:	2100      	movs	r1, #0
 800ab56:	6938      	ldr	r0, [r7, #16]
 800ab58:	f006 f8e6 	bl	8010d28 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800ab5c:	693b      	ldr	r3, [r7, #16]
 800ab5e:	7d1b      	ldrb	r3, [r3, #20]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d104      	bne.n	800ab6e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800ab64:	2100      	movs	r1, #0
 800ab66:	6938      	ldr	r0, [r7, #16]
 800ab68:	f006 f956 	bl	8010e18 <tcp_accept>
 800ab6c:	e01d      	b.n	800abaa <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d007      	beq.n	800ab84 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800ab74:	2100      	movs	r1, #0
 800ab76:	6938      	ldr	r0, [r7, #16]
 800ab78:	f006 f8e8 	bl	8010d4c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	6938      	ldr	r0, [r7, #16]
 800ab80:	f006 f94a 	bl	8010e18 <tcp_accept>
    }
    if (shut_tx) {
 800ab84:	7b7b      	ldrb	r3, [r7, #13]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d003      	beq.n	800ab92 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	6938      	ldr	r0, [r7, #16]
 800ab8e:	f006 f8ff 	bl	8010d90 <tcp_sent>
    }
    if (shut_close) {
 800ab92:	7dbb      	ldrb	r3, [r7, #22]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d008      	beq.n	800abaa <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	6938      	ldr	r0, [r7, #16]
 800ab9e:	f006 f953 	bl	8010e48 <tcp_poll>
      tcp_err(tpcb, NULL);
 800aba2:	2100      	movs	r1, #0
 800aba4:	6938      	ldr	r0, [r7, #16]
 800aba6:	f006 f915 	bl	8010dd4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800abaa:	7dbb      	ldrb	r3, [r7, #22]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d005      	beq.n	800abbc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800abb0:	6938      	ldr	r0, [r7, #16]
 800abb2:	f004 fee5 	bl	800f980 <tcp_close>
 800abb6:	4603      	mov	r3, r0
 800abb8:	75fb      	strb	r3, [r7, #23]
 800abba:	e007      	b.n	800abcc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800abbc:	7bbb      	ldrb	r3, [r7, #14]
 800abbe:	7b7a      	ldrb	r2, [r7, #13]
 800abc0:	4619      	mov	r1, r3
 800abc2:	6938      	ldr	r0, [r7, #16]
 800abc4:	f004 ff08 	bl	800f9d8 <tcp_shutdown>
 800abc8:	4603      	mov	r3, r0
 800abca:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800abcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d102      	bne.n	800abda <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800abd4:	2301      	movs	r3, #1
 800abd6:	757b      	strb	r3, [r7, #21]
 800abd8:	e016      	b.n	800ac08 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800abda:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800abde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abe2:	d10f      	bne.n	800ac04 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6a1b      	ldr	r3, [r3, #32]
 800abe8:	7a5b      	ldrb	r3, [r3, #9]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d10c      	bne.n	800ac08 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800abee:	2301      	movs	r3, #1
 800abf0:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800abf2:	7dbb      	ldrb	r3, [r7, #22]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d007      	beq.n	800ac08 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800abf8:	6938      	ldr	r0, [r7, #16]
 800abfa:	f005 f807 	bl	800fc0c <tcp_abort>
          err = ERR_OK;
 800abfe:	2300      	movs	r3, #0
 800ac00:	75fb      	strb	r3, [r7, #23]
 800ac02:	e001      	b.n	800ac08 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800ac04:	2301      	movs	r3, #1
 800ac06:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800ac08:	7d7b      	ldrb	r3, [r7, #21]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d044      	beq.n	800ac98 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a1b      	ldr	r3, [r3, #32]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	330c      	adds	r3, #12
 800ac16:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	7dfa      	ldrb	r2, [r7, #23]
 800ac1e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2200      	movs	r2, #0
 800ac24:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ac2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d129      	bne.n	800ac88 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ac34:	7dbb      	ldrb	r3, [r7, #22]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d00c      	beq.n	800ac54 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d005      	beq.n	800ac54 <lwip_netconn_do_close_internal+0x1f0>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	2104      	movs	r1, #4
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3
      }
      if (shut_rx) {
 800ac54:	7bbb      	ldrb	r3, [r7, #14]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d009      	beq.n	800ac6e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d005      	beq.n	800ac6e <lwip_netconn_do_close_internal+0x20a>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac66:	2200      	movs	r2, #0
 800ac68:	2100      	movs	r1, #0
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	4798      	blx	r3
      }
      if (shut_tx) {
 800ac6e:	7b7b      	ldrb	r3, [r7, #13]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d009      	beq.n	800ac88 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d005      	beq.n	800ac88 <lwip_netconn_do_close_internal+0x224>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac80:	2200      	movs	r2, #0
 800ac82:	2102      	movs	r1, #2
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ac88:	78fb      	ldrb	r3, [r7, #3]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d002      	beq.n	800ac94 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800ac8e:	68b8      	ldr	r0, [r7, #8]
 800ac90:	f00d ff0e 	bl	8018ab0 <sys_sem_signal>
    }
    return ERR_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	e02e      	b.n	800acf6 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800ac98:	7d7b      	ldrb	r3, [r7, #21]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d11e      	bne.n	800acdc <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	7d1b      	ldrb	r3, [r3, #20]
 800aca2:	2b01      	cmp	r3, #1
 800aca4:	d106      	bne.n	800acb4 <lwip_netconn_do_close_internal+0x250>
 800aca6:	4b16      	ldr	r3, [pc, #88]	; (800ad00 <lwip_netconn_do_close_internal+0x29c>)
 800aca8:	f240 4241 	movw	r2, #1089	; 0x441
 800acac:	491b      	ldr	r1, [pc, #108]	; (800ad1c <lwip_netconn_do_close_internal+0x2b8>)
 800acae:	4816      	ldr	r0, [pc, #88]	; (800ad08 <lwip_netconn_do_close_internal+0x2a4>)
 800acb0:	f00e f8ac 	bl	8018e0c <iprintf>
    if (shut_tx) {
 800acb4:	7b7b      	ldrb	r3, [r7, #13]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800acba:	4919      	ldr	r1, [pc, #100]	; (800ad20 <lwip_netconn_do_close_internal+0x2bc>)
 800acbc:	6938      	ldr	r0, [r7, #16]
 800acbe:	f006 f867 	bl	8010d90 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800acc2:	2201      	movs	r2, #1
 800acc4:	4917      	ldr	r1, [pc, #92]	; (800ad24 <lwip_netconn_do_close_internal+0x2c0>)
 800acc6:	6938      	ldr	r0, [r7, #16]
 800acc8:	f006 f8be 	bl	8010e48 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800accc:	4916      	ldr	r1, [pc, #88]	; (800ad28 <lwip_netconn_do_close_internal+0x2c4>)
 800acce:	6938      	ldr	r0, [r7, #16]
 800acd0:	f006 f880 	bl	8010dd4 <tcp_err>
    tcp_arg(tpcb, conn);
 800acd4:	6879      	ldr	r1, [r7, #4]
 800acd6:	6938      	ldr	r0, [r7, #16]
 800acd8:	f006 f826 	bl	8010d28 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800acdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d106      	bne.n	800acf2 <lwip_netconn_do_close_internal+0x28e>
 800ace4:	4b06      	ldr	r3, [pc, #24]	; (800ad00 <lwip_netconn_do_close_internal+0x29c>)
 800ace6:	f240 424d 	movw	r2, #1101	; 0x44d
 800acea:	4910      	ldr	r1, [pc, #64]	; (800ad2c <lwip_netconn_do_close_internal+0x2c8>)
 800acec:	4806      	ldr	r0, [pc, #24]	; (800ad08 <lwip_netconn_do_close_internal+0x2a4>)
 800acee:	f00e f88d 	bl	8018e0c <iprintf>
  return err;
 800acf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3718      	adds	r7, #24
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	0801a1b4 	.word	0x0801a1b4
 800ad04:	0801a488 	.word	0x0801a488
 800ad08:	0801a1f8 	.word	0x0801a1f8
 800ad0c:	0801a498 	.word	0x0801a498
 800ad10:	0801a4b8 	.word	0x0801a4b8
 800ad14:	0801a4dc 	.word	0x0801a4dc
 800ad18:	0801a31c 	.word	0x0801a31c
 800ad1c:	0801a4f0 	.word	0x0801a4f0
 800ad20:	0800a2dd 	.word	0x0800a2dd
 800ad24:	0800a215 	.word	0x0800a215
 800ad28:	0800a385 	.word	0x0800a385
 800ad2c:	0801a514 	.word	0x0801a514

0800ad30 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	785b      	ldrb	r3, [r3, #1]
 800ad42:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ad44:	7afb      	ldrb	r3, [r7, #11]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00d      	beq.n	800ad66 <lwip_netconn_do_delconn+0x36>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad54:	2b10      	cmp	r3, #16
 800ad56:	d006      	beq.n	800ad66 <lwip_netconn_do_delconn+0x36>
 800ad58:	4b60      	ldr	r3, [pc, #384]	; (800aedc <lwip_netconn_do_delconn+0x1ac>)
 800ad5a:	f240 425e 	movw	r2, #1118	; 0x45e
 800ad5e:	4960      	ldr	r1, [pc, #384]	; (800aee0 <lwip_netconn_do_delconn+0x1b0>)
 800ad60:	4860      	ldr	r0, [pc, #384]	; (800aee4 <lwip_netconn_do_delconn+0x1b4>)
 800ad62:	f00e f853 	bl	8018e0c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800ad66:	7afb      	ldrb	r3, [r7, #11]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d005      	beq.n	800ad78 <lwip_netconn_do_delconn+0x48>
 800ad6c:	7afb      	ldrb	r3, [r7, #11]
 800ad6e:	2b02      	cmp	r3, #2
 800ad70:	d002      	beq.n	800ad78 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800ad72:	7afb      	ldrb	r3, [r7, #11]
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d109      	bne.n	800ad8c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800ad78:	7afb      	ldrb	r3, [r7, #11]
 800ad7a:	2b03      	cmp	r3, #3
 800ad7c:	d10a      	bne.n	800ad94 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	7f1b      	ldrb	r3, [r3, #28]
 800ad84:	f003 0304 	and.w	r3, r3, #4
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d103      	bne.n	800ad94 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	22fb      	movs	r2, #251	; 0xfb
 800ad90:	711a      	strb	r2, [r3, #4]
 800ad92:	e097      	b.n	800aec4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800ad94:	7afb      	ldrb	r3, [r7, #11]
 800ad96:	2b03      	cmp	r3, #3
 800ad98:	d10d      	bne.n	800adb6 <lwip_netconn_do_delconn+0x86>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	7f1b      	ldrb	r3, [r3, #28]
 800ada0:	f003 0304 	and.w	r3, r3, #4
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d106      	bne.n	800adb6 <lwip_netconn_do_delconn+0x86>
 800ada8:	4b4c      	ldr	r3, [pc, #304]	; (800aedc <lwip_netconn_do_delconn+0x1ac>)
 800adaa:	f240 427a 	movw	r2, #1146	; 0x47a
 800adae:	494e      	ldr	r1, [pc, #312]	; (800aee8 <lwip_netconn_do_delconn+0x1b8>)
 800adb0:	484c      	ldr	r0, [pc, #304]	; (800aee4 <lwip_netconn_do_delconn+0x1b4>)
 800adb2:	f00e f82b 	bl	8018e0c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4618      	mov	r0, r3
 800adc2:	f7ff fdd1 	bl	800a968 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d05f      	beq.n	800ae90 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800adda:	2b10      	cmp	r3, #16
 800addc:	d00d      	beq.n	800adfa <lwip_netconn_do_delconn+0xca>
 800adde:	2b20      	cmp	r3, #32
 800ade0:	d151      	bne.n	800ae86 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	685b      	ldr	r3, [r3, #4]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f00b fa04 	bl	8016200 <udp_remove>
          break;
 800adf8:	e046      	b.n	800ae88 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	6a1b      	ldr	r3, [r3, #32]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d006      	beq.n	800ae12 <lwip_netconn_do_delconn+0xe2>
 800ae04:	4b35      	ldr	r3, [pc, #212]	; (800aedc <lwip_netconn_do_delconn+0x1ac>)
 800ae06:	f240 4294 	movw	r2, #1172	; 0x494
 800ae0a:	4938      	ldr	r1, [pc, #224]	; (800aeec <lwip_netconn_do_delconn+0x1bc>)
 800ae0c:	4835      	ldr	r0, [pc, #212]	; (800aee4 <lwip_netconn_do_delconn+0x1b4>)
 800ae0e:	f00d fffd 	bl	8018e0c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	2204      	movs	r2, #4
 800ae18:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2203      	movs	r2, #3
 800ae1e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff fe18 	bl	800aa64 <lwip_netconn_do_close_internal>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d04b      	beq.n	800aed2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	785b      	ldrb	r3, [r3, #1]
 800ae40:	2b04      	cmp	r3, #4
 800ae42:	d006      	beq.n	800ae52 <lwip_netconn_do_delconn+0x122>
 800ae44:	4b25      	ldr	r3, [pc, #148]	; (800aedc <lwip_netconn_do_delconn+0x1ac>)
 800ae46:	f240 429a 	movw	r2, #1178	; 0x49a
 800ae4a:	4929      	ldr	r1, [pc, #164]	; (800aef0 <lwip_netconn_do_delconn+0x1c0>)
 800ae4c:	4825      	ldr	r0, [pc, #148]	; (800aee4 <lwip_netconn_do_delconn+0x1b4>)
 800ae4e:	f00d ffdd 	bl	8018e0c <iprintf>
            UNLOCK_TCPIP_CORE();
 800ae52:	4828      	ldr	r0, [pc, #160]	; (800aef4 <lwip_netconn_do_delconn+0x1c4>)
 800ae54:	f00d fe95 	bl	8018b82 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	330c      	adds	r3, #12
 800ae5e:	2100      	movs	r1, #0
 800ae60:	4618      	mov	r0, r3
 800ae62:	f00d fdf4 	bl	8018a4e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ae66:	4823      	ldr	r0, [pc, #140]	; (800aef4 <lwip_netconn_do_delconn+0x1c4>)
 800ae68:	f00d fe7c 	bl	8018b64 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	785b      	ldrb	r3, [r3, #1]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d02d      	beq.n	800aed2 <lwip_netconn_do_delconn+0x1a2>
 800ae76:	4b19      	ldr	r3, [pc, #100]	; (800aedc <lwip_netconn_do_delconn+0x1ac>)
 800ae78:	f240 429e 	movw	r2, #1182	; 0x49e
 800ae7c:	491c      	ldr	r1, [pc, #112]	; (800aef0 <lwip_netconn_do_delconn+0x1c0>)
 800ae7e:	4819      	ldr	r0, [pc, #100]	; (800aee4 <lwip_netconn_do_delconn+0x1b4>)
 800ae80:	f00d ffc4 	bl	8018e0c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ae84:	e025      	b.n	800aed2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800ae86:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d007      	beq.n	800aeaa <lwip_netconn_do_delconn+0x17a>
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	6810      	ldr	r0, [r2, #0]
 800aea4:	2200      	movs	r2, #0
 800aea6:	2100      	movs	r1, #0
 800aea8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d007      	beq.n	800aec4 <lwip_netconn_do_delconn+0x194>
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	6810      	ldr	r0, [r2, #0]
 800aebe:	2200      	movs	r2, #0
 800aec0:	2102      	movs	r1, #2
 800aec2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	330c      	adds	r3, #12
 800aeca:	4618      	mov	r0, r3
 800aecc:	f00d fe0a 	bl	8018ae4 <sys_sem_valid>
 800aed0:	e000      	b.n	800aed4 <lwip_netconn_do_delconn+0x1a4>
          return;
 800aed2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800aed4:	3710      	adds	r7, #16
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bd80      	pop	{r7, pc}
 800aeda:	bf00      	nop
 800aedc:	0801a1b4 	.word	0x0801a1b4
 800aee0:	0801a524 	.word	0x0801a524
 800aee4:	0801a1f8 	.word	0x0801a1f8
 800aee8:	0801a538 	.word	0x0801a538
 800aeec:	0801a558 	.word	0x0801a558
 800aef0:	0801a574 	.word	0x0801a574
 800aef4:	20008448 	.word	0x20008448

0800aef8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d025      	beq.n	800af5a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af18:	2b10      	cmp	r3, #16
 800af1a:	d00e      	beq.n	800af3a <lwip_netconn_do_bind+0x42>
 800af1c:	2b20      	cmp	r3, #32
 800af1e:	d119      	bne.n	800af54 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	6858      	ldr	r0, [r3, #4]
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	6899      	ldr	r1, [r3, #8]
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	899b      	ldrh	r3, [r3, #12]
 800af2e:	461a      	mov	r2, r3
 800af30:	f00b f8be 	bl	80160b0 <udp_bind>
 800af34:	4603      	mov	r3, r0
 800af36:	73fb      	strb	r3, [r7, #15]
        break;
 800af38:	e011      	b.n	800af5e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	6858      	ldr	r0, [r3, #4]
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	6899      	ldr	r1, [r3, #8]
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	899b      	ldrh	r3, [r3, #12]
 800af48:	461a      	mov	r2, r3
 800af4a:	f004 fe6b 	bl	800fc24 <tcp_bind>
 800af4e:	4603      	mov	r3, r0
 800af50:	73fb      	strb	r3, [r7, #15]
        break;
 800af52:	e004      	b.n	800af5e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800af54:	23fa      	movs	r3, #250	; 0xfa
 800af56:	73fb      	strb	r3, [r7, #15]
        break;
 800af58:	e001      	b.n	800af5e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800af5a:	23fa      	movs	r3, #250	; 0xfa
 800af5c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	7bfa      	ldrb	r2, [r7, #15]
 800af62:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800af64:	bf00      	nop
 800af66:	3710      	adds	r7, #16
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d07f      	beq.n	800b082 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af8c:	2b10      	cmp	r3, #16
 800af8e:	d175      	bne.n	800b07c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	785b      	ldrb	r3, [r3, #1]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d165      	bne.n	800b066 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	7d1b      	ldrb	r3, [r3, #20]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d002      	beq.n	800afac <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800afa6:	23fa      	movs	r3, #250	; 0xfa
 800afa8:	72fb      	strb	r3, [r7, #11]
 800afaa:	e06c      	b.n	800b086 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800afac:	23ff      	movs	r3, #255	; 0xff
 800afae:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	f107 020b 	add.w	r2, r7, #11
 800afba:	7cf9      	ldrb	r1, [r7, #19]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f004 fee9 	bl	800fd94 <tcp_listen_with_backlog_and_err>
 800afc2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d05d      	beq.n	800b086 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	3310      	adds	r3, #16
 800afd0:	4618      	mov	r0, r3
 800afd2:	f00d fcf9 	bl	80189c8 <sys_mbox_valid>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00b      	beq.n	800aff4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3310      	adds	r3, #16
 800afe2:	4618      	mov	r0, r3
 800afe4:	f00d fc7c 	bl	80188e0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3310      	adds	r3, #16
 800afee:	4618      	mov	r0, r3
 800aff0:	f00d fcfb 	bl	80189ea <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	3314      	adds	r3, #20
 800affe:	4618      	mov	r0, r3
 800b000:	f00d fce2 	bl	80189c8 <sys_mbox_valid>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d108      	bne.n	800b01c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	3314      	adds	r3, #20
 800b010:	2106      	movs	r1, #6
 800b012:	4618      	mov	r0, r3
 800b014:	f00d fc4a 	bl	80188ac <sys_mbox_new>
 800b018:	4603      	mov	r3, r0
 800b01a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800b01c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d118      	bne.n	800b056 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2202      	movs	r2, #2
 800b02a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4619      	mov	r1, r3
 800b040:	4610      	mov	r0, r2
 800b042:	f005 fe71 	bl	8010d28 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	4912      	ldr	r1, [pc, #72]	; (800b098 <lwip_netconn_do_listen+0x12c>)
 800b04e:	4618      	mov	r0, r3
 800b050:	f005 fee2 	bl	8010e18 <tcp_accept>
 800b054:	e017      	b.n	800b086 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800b056:	68f8      	ldr	r0, [r7, #12]
 800b058:	f004 fc92 	bl	800f980 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2200      	movs	r2, #0
 800b062:	605a      	str	r2, [r3, #4]
 800b064:	e00f      	b.n	800b086 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	785b      	ldrb	r3, [r3, #1]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d102      	bne.n	800b076 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800b070:	2300      	movs	r3, #0
 800b072:	72fb      	strb	r3, [r7, #11]
 800b074:	e007      	b.n	800b086 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800b076:	23f5      	movs	r3, #245	; 0xf5
 800b078:	72fb      	strb	r3, [r7, #11]
 800b07a:	e004      	b.n	800b086 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800b07c:	23f0      	movs	r3, #240	; 0xf0
 800b07e:	72fb      	strb	r3, [r7, #11]
 800b080:	e001      	b.n	800b086 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800b082:	23f5      	movs	r3, #245	; 0xf5
 800b084:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800b086:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b08e:	bf00      	nop
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	0800a581 	.word	0x0800a581

0800b09c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fe ff21 	bl	8009ef4 <netconn_err>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d134      	bne.n	800b128 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	685b      	ldr	r3, [r3, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d02d      	beq.n	800b124 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0d2:	2b20      	cmp	r3, #32
 800b0d4:	d123      	bne.n	800b11e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10c      	bne.n	800b0fa <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4619      	mov	r1, r3
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	f00a fdf4 	bl	8015cdc <udp_send>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800b0f8:	e016      	b.n	800b128 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6858      	ldr	r0, [r3, #4]
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	6819      	ldr	r1, [r3, #0]
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	689b      	ldr	r3, [r3, #8]
 800b10a:	f103 0208 	add.w	r2, r3, #8
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	899b      	ldrh	r3, [r3, #12]
 800b114:	f00a fe16 	bl	8015d44 <udp_sendto>
 800b118:	4603      	mov	r3, r0
 800b11a:	73fb      	strb	r3, [r7, #15]
          break;
 800b11c:	e004      	b.n	800b128 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800b11e:	23f5      	movs	r3, #245	; 0xf5
 800b120:	73fb      	strb	r3, [r7, #15]
          break;
 800b122:	e001      	b.n	800b128 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800b124:	23f5      	movs	r3, #245	; 0xf5
 800b126:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	7bfa      	ldrb	r2, [r7, #15]
 800b12c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800b12e:	bf00      	nop
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b086      	sub	sp, #24
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	2200      	movs	r2, #0
 800b146:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d022      	beq.n	800b198 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	781b      	ldrb	r3, [r3, #0]
 800b158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b15c:	2b10      	cmp	r3, #16
 800b15e:	d11b      	bne.n	800b198 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b16c:	d202      	bcs.n	800b174 <lwip_netconn_do_recv+0x3e>
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	b29b      	uxth	r3, r3
 800b172:	e001      	b.n	800b178 <lwip_netconn_do_recv+0x42>
 800b174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b178:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	89fa      	ldrh	r2, [r7, #14]
 800b182:	4611      	mov	r1, r2
 800b184:	4618      	mov	r0, r3
 800b186:	f004 ff09 	bl	800ff9c <tcp_recved>
        remaining -= recved;
 800b18a:	89fb      	ldrh	r3, [r7, #14]
 800b18c:	697a      	ldr	r2, [r7, #20]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d1e6      	bne.n	800b166 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b198:	bf00      	nop
 800b19a:	3718      	adds	r7, #24
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b088      	sub	sp, #32
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <lwip_netconn_do_writemore+0x24>
 800b1b6:	4b96      	ldr	r3, [pc, #600]	; (800b410 <lwip_netconn_do_writemore+0x270>)
 800b1b8:	f240 6273 	movw	r2, #1651	; 0x673
 800b1bc:	4995      	ldr	r1, [pc, #596]	; (800b414 <lwip_netconn_do_writemore+0x274>)
 800b1be:	4896      	ldr	r0, [pc, #600]	; (800b418 <lwip_netconn_do_writemore+0x278>)
 800b1c0:	f00d fe24 	bl	8018e0c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	785b      	ldrb	r3, [r3, #1]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d006      	beq.n	800b1da <lwip_netconn_do_writemore+0x3a>
 800b1cc:	4b90      	ldr	r3, [pc, #576]	; (800b410 <lwip_netconn_do_writemore+0x270>)
 800b1ce:	f240 6274 	movw	r2, #1652	; 0x674
 800b1d2:	4992      	ldr	r1, [pc, #584]	; (800b41c <lwip_netconn_do_writemore+0x27c>)
 800b1d4:	4890      	ldr	r0, [pc, #576]	; (800b418 <lwip_netconn_do_writemore+0x278>)
 800b1d6:	f00d fe19 	bl	8018e0c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d106      	bne.n	800b1f0 <lwip_netconn_do_writemore+0x50>
 800b1e2:	4b8b      	ldr	r3, [pc, #556]	; (800b410 <lwip_netconn_do_writemore+0x270>)
 800b1e4:	f240 6275 	movw	r2, #1653	; 0x675
 800b1e8:	498d      	ldr	r1, [pc, #564]	; (800b420 <lwip_netconn_do_writemore+0x280>)
 800b1ea:	488b      	ldr	r0, [pc, #556]	; (800b418 <lwip_netconn_do_writemore+0x278>)
 800b1ec:	f00d fe0e 	bl	8018e0c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d106      	bne.n	800b206 <lwip_netconn_do_writemore+0x66>
 800b1f8:	4b85      	ldr	r3, [pc, #532]	; (800b410 <lwip_netconn_do_writemore+0x270>)
 800b1fa:	f240 6276 	movw	r2, #1654	; 0x676
 800b1fe:	4989      	ldr	r1, [pc, #548]	; (800b424 <lwip_netconn_do_writemore+0x284>)
 800b200:	4885      	ldr	r0, [pc, #532]	; (800b418 <lwip_netconn_do_writemore+0x278>)
 800b202:	f00d fe03 	bl	8018e0c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a1b      	ldr	r3, [r3, #32]
 800b20a:	699a      	ldr	r2, [r3, #24]
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a1b      	ldr	r3, [r3, #32]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	429a      	cmp	r2, r3
 800b214:	d306      	bcc.n	800b224 <lwip_netconn_do_writemore+0x84>
 800b216:	4b7e      	ldr	r3, [pc, #504]	; (800b410 <lwip_netconn_do_writemore+0x270>)
 800b218:	f240 6277 	movw	r2, #1655	; 0x677
 800b21c:	4982      	ldr	r1, [pc, #520]	; (800b428 <lwip_netconn_do_writemore+0x288>)
 800b21e:	487e      	ldr	r0, [pc, #504]	; (800b418 <lwip_netconn_do_writemore+0x278>)
 800b220:	f00d fdf4 	bl	8018e0c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a1b      	ldr	r3, [r3, #32]
 800b228:	899b      	ldrh	r3, [r3, #12]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d106      	bne.n	800b23c <lwip_netconn_do_writemore+0x9c>
 800b22e:	4b78      	ldr	r3, [pc, #480]	; (800b410 <lwip_netconn_do_writemore+0x270>)
 800b230:	f240 6279 	movw	r2, #1657	; 0x679
 800b234:	497d      	ldr	r1, [pc, #500]	; (800b42c <lwip_netconn_do_writemore+0x28c>)
 800b236:	4878      	ldr	r0, [pc, #480]	; (800b418 <lwip_netconn_do_writemore+0x278>)
 800b238:	f00d fde8 	bl	8018e0c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	7f1b      	ldrb	r3, [r3, #28]
 800b242:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	7f1b      	ldrb	r3, [r3, #28]
 800b248:	f003 0302 	and.w	r3, r3, #2
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d104      	bne.n	800b25a <lwip_netconn_do_writemore+0xba>
 800b250:	7ebb      	ldrb	r3, [r7, #26]
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b00      	cmp	r3, #0
 800b258:	d001      	beq.n	800b25e <lwip_netconn_do_writemore+0xbe>
 800b25a:	2301      	movs	r3, #1
 800b25c:	e000      	b.n	800b260 <lwip_netconn_do_writemore+0xc0>
 800b25e:	2300      	movs	r3, #0
 800b260:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6a1b      	ldr	r3, [r3, #32]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	4413      	add	r3, r2
 800b272:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	685a      	ldr	r2, [r3, #4]
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a1b      	ldr	r3, [r3, #32]
 800b280:	691b      	ldr	r3, [r3, #16]
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b28c:	d307      	bcc.n	800b29e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b28e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b292:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b294:	7ebb      	ldrb	r3, [r7, #26]
 800b296:	f043 0302 	orr.w	r3, r3, #2
 800b29a:	76bb      	strb	r3, [r7, #26]
 800b29c:	e001      	b.n	800b2a2 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b2aa:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b2ac:	89fa      	ldrh	r2, [r7, #14]
 800b2ae:	8bbb      	ldrh	r3, [r7, #28]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d216      	bcs.n	800b2e2 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b2b4:	89fb      	ldrh	r3, [r7, #14]
 800b2b6:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b2b8:	7e3b      	ldrb	r3, [r7, #24]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00d      	beq.n	800b2da <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b2be:	8bbb      	ldrh	r3, [r7, #28]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10e      	bne.n	800b2e2 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a1b      	ldr	r3, [r3, #32]
 800b2c8:	699b      	ldr	r3, [r3, #24]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d102      	bne.n	800b2d4 <lwip_netconn_do_writemore+0x134>
 800b2ce:	f06f 0306 	mvn.w	r3, #6
 800b2d2:	e000      	b.n	800b2d6 <lwip_netconn_do_writemore+0x136>
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b2d8:	e07d      	b.n	800b3d6 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b2da:	7ebb      	ldrb	r3, [r7, #26]
 800b2dc:	f043 0302 	orr.w	r3, r3, #2
 800b2e0:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a1b      	ldr	r3, [r3, #32]
 800b2e6:	691a      	ldr	r2, [r3, #16]
 800b2e8:	8bbb      	ldrh	r3, [r7, #28]
 800b2ea:	441a      	add	r2, r3
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a1b      	ldr	r3, [r3, #32]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	685b      	ldr	r3, [r3, #4]
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d906      	bls.n	800b306 <lwip_netconn_do_writemore+0x166>
 800b2f8:	4b45      	ldr	r3, [pc, #276]	; (800b410 <lwip_netconn_do_writemore+0x270>)
 800b2fa:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b2fe:	494c      	ldr	r1, [pc, #304]	; (800b430 <lwip_netconn_do_writemore+0x290>)
 800b300:	4845      	ldr	r0, [pc, #276]	; (800b418 <lwip_netconn_do_writemore+0x278>)
 800b302:	f00d fd83 	bl	8018e0c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b306:	8bbb      	ldrh	r3, [r7, #28]
 800b308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d103      	bne.n	800b318 <lwip_netconn_do_writemore+0x178>
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b316:	d209      	bcs.n	800b32c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b31c:	8bba      	ldrh	r2, [r7, #28]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d10b      	bne.n	800b33a <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	899b      	ldrh	r3, [r3, #12]
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d906      	bls.n	800b33a <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b32c:	2301      	movs	r3, #1
 800b32e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b330:	7ebb      	ldrb	r3, [r7, #26]
 800b332:	f043 0302 	orr.w	r3, r3, #2
 800b336:	76bb      	strb	r3, [r7, #26]
 800b338:	e001      	b.n	800b33e <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6858      	ldr	r0, [r3, #4]
 800b342:	7ebb      	ldrb	r3, [r7, #26]
 800b344:	8bba      	ldrh	r2, [r7, #28]
 800b346:	6979      	ldr	r1, [r7, #20]
 800b348:	f008 fc2c 	bl	8013ba4 <tcp_write>
 800b34c:	4603      	mov	r3, r0
 800b34e:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b350:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d12c      	bne.n	800b3b2 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6a1b      	ldr	r3, [r3, #32]
 800b35c:	6999      	ldr	r1, [r3, #24]
 800b35e:	8bba      	ldrh	r2, [r7, #28]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6a1b      	ldr	r3, [r3, #32]
 800b364:	440a      	add	r2, r1
 800b366:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6a1b      	ldr	r3, [r3, #32]
 800b36c:	6919      	ldr	r1, [r3, #16]
 800b36e:	8bba      	ldrh	r2, [r7, #28]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6a1b      	ldr	r3, [r3, #32]
 800b374:	440a      	add	r2, r1
 800b376:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a1b      	ldr	r3, [r3, #32]
 800b37c:	691a      	ldr	r2, [r3, #16]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a1b      	ldr	r3, [r3, #32]
 800b382:	689b      	ldr	r3, [r3, #8]
 800b384:	685b      	ldr	r3, [r3, #4]
 800b386:	429a      	cmp	r2, r3
 800b388:	d113      	bne.n	800b3b2 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6a1b      	ldr	r3, [r3, #32]
 800b38e:	899a      	ldrh	r2, [r3, #12]
 800b390:	3a01      	subs	r2, #1
 800b392:	b292      	uxth	r2, r2
 800b394:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6a1b      	ldr	r3, [r3, #32]
 800b39a:	899b      	ldrh	r3, [r3, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d008      	beq.n	800b3b2 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6a1b      	ldr	r3, [r3, #32]
 800b3a4:	689a      	ldr	r2, [r3, #8]
 800b3a6:	3208      	adds	r2, #8
 800b3a8:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b3b2:	7e7b      	ldrb	r3, [r7, #25]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d004      	beq.n	800b3c2 <lwip_netconn_do_writemore+0x222>
 800b3b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f43f af50 	beq.w	800b262 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b3c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d004      	beq.n	800b3d4 <lwip_netconn_do_writemore+0x234>
 800b3ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b3ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3d2:	d146      	bne.n	800b462 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b3d4:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b3d6:	7e3b      	ldrb	r3, [r7, #24]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d02b      	beq.n	800b434 <lwip_netconn_do_writemore+0x294>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6a1b      	ldr	r3, [r3, #32]
 800b3e0:	699a      	ldr	r2, [r3, #24]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	695b      	ldr	r3, [r3, #20]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d223      	bcs.n	800b434 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <lwip_netconn_do_writemore+0x260>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	2103      	movs	r1, #3
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	7f1b      	ldrb	r3, [r3, #28]
 800b404:	f043 0310 	orr.w	r3, r3, #16
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	771a      	strb	r2, [r3, #28]
 800b40e:	e028      	b.n	800b462 <lwip_netconn_do_writemore+0x2c2>
 800b410:	0801a1b4 	.word	0x0801a1b4
 800b414:	0801a30c 	.word	0x0801a30c
 800b418:	0801a1f8 	.word	0x0801a1f8
 800b41c:	0801a614 	.word	0x0801a614
 800b420:	0801a31c 	.word	0x0801a31c
 800b424:	0801a634 	.word	0x0801a634
 800b428:	0801a64c 	.word	0x0801a64c
 800b42c:	0801a68c 	.word	0x0801a68c
 800b430:	0801a6b4 	.word	0x0801a6b4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	685b      	ldr	r3, [r3, #4]
 800b438:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b43c:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b440:	d305      	bcc.n	800b44e <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685b      	ldr	r3, [r3, #4]
 800b446:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d909      	bls.n	800b462 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b452:	2b00      	cmp	r3, #0
 800b454:	d005      	beq.n	800b462 <lwip_netconn_do_writemore+0x2c2>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45a:	2200      	movs	r2, #0
 800b45c:	2103      	movs	r1, #3
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b462:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d11d      	bne.n	800b4a6 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a1b      	ldr	r3, [r3, #32]
 800b46e:	699a      	ldr	r2, [r3, #24]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a1b      	ldr	r3, [r3, #32]
 800b474:	695b      	ldr	r3, [r3, #20]
 800b476:	429a      	cmp	r2, r3
 800b478:	d002      	beq.n	800b480 <lwip_netconn_do_writemore+0x2e0>
 800b47a:	7e3b      	ldrb	r3, [r7, #24]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b480:	2301      	movs	r3, #1
 800b482:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	4618      	mov	r0, r3
 800b48a:	f009 f975 	bl	8014778 <tcp_output>
 800b48e:	4603      	mov	r3, r0
 800b490:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b492:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b496:	f113 0f04 	cmn.w	r3, #4
 800b49a:	d12c      	bne.n	800b4f6 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b49c:	7b3b      	ldrb	r3, [r7, #12]
 800b49e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	76fb      	strb	r3, [r7, #27]
 800b4a4:	e027      	b.n	800b4f6 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b4a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ae:	d120      	bne.n	800b4f2 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f009 f95f 	bl	8014778 <tcp_output>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b4be:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b4c2:	f113 0f04 	cmn.w	r3, #4
 800b4c6:	d104      	bne.n	800b4d2 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b4c8:	7b7b      	ldrb	r3, [r7, #13]
 800b4ca:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	76fb      	strb	r3, [r7, #27]
 800b4d0:	e011      	b.n	800b4f6 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b4d2:	7e3b      	ldrb	r3, [r7, #24]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00e      	beq.n	800b4f6 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6a1b      	ldr	r3, [r3, #32]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d102      	bne.n	800b4e8 <lwip_netconn_do_writemore+0x348>
 800b4e2:	f06f 0306 	mvn.w	r3, #6
 800b4e6:	e000      	b.n	800b4ea <lwip_netconn_do_writemore+0x34a>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	76fb      	strb	r3, [r7, #27]
 800b4f0:	e001      	b.n	800b4f6 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b4f6:	7efb      	ldrb	r3, [r7, #27]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d015      	beq.n	800b528 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6a1b      	ldr	r3, [r3, #32]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	330c      	adds	r3, #12
 800b504:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a1b      	ldr	r3, [r3, #32]
 800b50a:	7ffa      	ldrb	r2, [r7, #31]
 800b50c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b51a:	78fb      	ldrb	r3, [r7, #3]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d006      	beq.n	800b52e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b520:	68b8      	ldr	r0, [r7, #8]
 800b522:	f00d fac5 	bl	8018ab0 <sys_sem_signal>
 800b526:	e002      	b.n	800b52e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b528:	f04f 33ff 	mov.w	r3, #4294967295
 800b52c:	e000      	b.n	800b530 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3720      	adds	r7, #32
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fe fcd3 	bl	8009ef4 <netconn_err>
 800b54e:	4603      	mov	r3, r0
 800b550:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d166      	bne.n	800b628 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b564:	2b10      	cmp	r3, #16
 800b566:	d15d      	bne.n	800b624 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	785b      	ldrb	r3, [r3, #1]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d002      	beq.n	800b578 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b572:	23fb      	movs	r3, #251	; 0xfb
 800b574:	73fb      	strb	r3, [r7, #15]
 800b576:	e057      	b.n	800b628 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d04d      	beq.n	800b61e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2201      	movs	r2, #1
 800b588:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6a1b      	ldr	r3, [r3, #32]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d006      	beq.n	800b5a2 <lwip_netconn_do_write+0x6a>
 800b594:	4b28      	ldr	r3, [pc, #160]	; (800b638 <lwip_netconn_do_write+0x100>)
 800b596:	f240 7223 	movw	r2, #1827	; 0x723
 800b59a:	4928      	ldr	r1, [pc, #160]	; (800b63c <lwip_netconn_do_write+0x104>)
 800b59c:	4828      	ldr	r0, [pc, #160]	; (800b640 <lwip_netconn_do_write+0x108>)
 800b59e:	f00d fc35 	bl	8018e0c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	695b      	ldr	r3, [r3, #20]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d106      	bne.n	800b5b8 <lwip_netconn_do_write+0x80>
 800b5aa:	4b23      	ldr	r3, [pc, #140]	; (800b638 <lwip_netconn_do_write+0x100>)
 800b5ac:	f240 7224 	movw	r2, #1828	; 0x724
 800b5b0:	4924      	ldr	r1, [pc, #144]	; (800b644 <lwip_netconn_do_write+0x10c>)
 800b5b2:	4823      	ldr	r0, [pc, #140]	; (800b640 <lwip_netconn_do_write+0x108>)
 800b5b4:	f00d fc2a 	bl	8018e0c <iprintf>
        msg->conn->current_msg = msg;
 800b5b8:	68bb      	ldr	r3, [r7, #8]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2100      	movs	r1, #0
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7ff fdea 	bl	800b1a0 <lwip_netconn_do_writemore>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d02e      	beq.n	800b630 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	785b      	ldrb	r3, [r3, #1]
 800b5d8:	2b01      	cmp	r3, #1
 800b5da:	d006      	beq.n	800b5ea <lwip_netconn_do_write+0xb2>
 800b5dc:	4b16      	ldr	r3, [pc, #88]	; (800b638 <lwip_netconn_do_write+0x100>)
 800b5de:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b5e2:	4919      	ldr	r1, [pc, #100]	; (800b648 <lwip_netconn_do_write+0x110>)
 800b5e4:	4816      	ldr	r0, [pc, #88]	; (800b640 <lwip_netconn_do_write+0x108>)
 800b5e6:	f00d fc11 	bl	8018e0c <iprintf>
          UNLOCK_TCPIP_CORE();
 800b5ea:	4818      	ldr	r0, [pc, #96]	; (800b64c <lwip_netconn_do_write+0x114>)
 800b5ec:	f00d fac9 	bl	8018b82 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	330c      	adds	r3, #12
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f00d fa28 	bl	8018a4e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b5fe:	4813      	ldr	r0, [pc, #76]	; (800b64c <lwip_netconn_do_write+0x114>)
 800b600:	f00d fab0 	bl	8018b64 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	785b      	ldrb	r3, [r3, #1]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d110      	bne.n	800b630 <lwip_netconn_do_write+0xf8>
 800b60e:	4b0a      	ldr	r3, [pc, #40]	; (800b638 <lwip_netconn_do_write+0x100>)
 800b610:	f240 722c 	movw	r2, #1836	; 0x72c
 800b614:	490c      	ldr	r1, [pc, #48]	; (800b648 <lwip_netconn_do_write+0x110>)
 800b616:	480a      	ldr	r0, [pc, #40]	; (800b640 <lwip_netconn_do_write+0x108>)
 800b618:	f00d fbf8 	bl	8018e0c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b61c:	e008      	b.n	800b630 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b61e:	23f5      	movs	r3, #245	; 0xf5
 800b620:	73fb      	strb	r3, [r7, #15]
 800b622:	e001      	b.n	800b628 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b624:	23fa      	movs	r3, #250	; 0xfa
 800b626:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	7bfa      	ldrb	r2, [r7, #15]
 800b62c:	711a      	strb	r2, [r3, #4]
 800b62e:	e000      	b.n	800b632 <lwip_netconn_do_write+0xfa>
        return;
 800b630:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}
 800b638:	0801a1b4 	.word	0x0801a1b4
 800b63c:	0801a558 	.word	0x0801a558
 800b640:	0801a1f8 	.word	0x0801a1f8
 800b644:	0801a6e0 	.word	0x0801a6e0
 800b648:	0801a574 	.word	0x0801a574
 800b64c:	20008448 	.word	0x20008448

0800b650 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	685b      	ldr	r3, [r3, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d06b      	beq.n	800b73e <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	7c1b      	ldrb	r3, [r3, #16]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d007      	beq.n	800b67e <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	685a      	ldr	r2, [r3, #4]
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	6812      	ldr	r2, [r2, #0]
 800b67a:	601a      	str	r2, [r3, #0]
 800b67c:	e006      	b.n	800b68c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	685a      	ldr	r2, [r3, #4]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	6852      	ldr	r2, [r2, #4]
 800b68a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	781b      	ldrb	r3, [r3, #0]
 800b698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b69c:	2b10      	cmp	r3, #16
 800b69e:	d021      	beq.n	800b6e4 <lwip_netconn_do_getaddr+0x94>
 800b6a0:	2b20      	cmp	r3, #32
 800b6a2:	d144      	bne.n	800b72e <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	7c1b      	ldrb	r3, [r3, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d007      	beq.n	800b6bc <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	685a      	ldr	r2, [r3, #4]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	8a52      	ldrh	r2, [r2, #18]
 800b6b8:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800b6ba:	e044      	b.n	800b746 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	7c1b      	ldrb	r3, [r3, #16]
 800b6c4:	f003 0304 	and.w	r3, r3, #4
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d103      	bne.n	800b6d4 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	22f5      	movs	r2, #245	; 0xf5
 800b6d0:	711a      	strb	r2, [r3, #4]
        break;
 800b6d2:	e038      	b.n	800b746 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	8a92      	ldrh	r2, [r2, #20]
 800b6e0:	801a      	strh	r2, [r3, #0]
        break;
 800b6e2:	e030      	b.n	800b746 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	7c1b      	ldrb	r3, [r3, #16]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10f      	bne.n	800b70c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d005      	beq.n	800b704 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	7d1b      	ldrb	r3, [r3, #20]
 800b700:	2b01      	cmp	r3, #1
 800b702:	d103      	bne.n	800b70c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	22f5      	movs	r2, #245	; 0xf5
 800b708:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800b70a:	e01c      	b.n	800b746 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	7c1b      	ldrb	r3, [r3, #16]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d004      	beq.n	800b71e <lwip_netconn_do_getaddr+0xce>
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	8adb      	ldrh	r3, [r3, #22]
 800b71c:	e003      	b.n	800b726 <lwip_netconn_do_getaddr+0xd6>
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	8b1b      	ldrh	r3, [r3, #24]
 800b726:	68fa      	ldr	r2, [r7, #12]
 800b728:	68d2      	ldr	r2, [r2, #12]
 800b72a:	8013      	strh	r3, [r2, #0]
        break;
 800b72c:	e00b      	b.n	800b746 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800b72e:	4b08      	ldr	r3, [pc, #32]	; (800b750 <lwip_netconn_do_getaddr+0x100>)
 800b730:	f240 727d 	movw	r2, #1917	; 0x77d
 800b734:	4907      	ldr	r1, [pc, #28]	; (800b754 <lwip_netconn_do_getaddr+0x104>)
 800b736:	4808      	ldr	r0, [pc, #32]	; (800b758 <lwip_netconn_do_getaddr+0x108>)
 800b738:	f00d fb68 	bl	8018e0c <iprintf>
        break;
 800b73c:	e003      	b.n	800b746 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	22f5      	movs	r2, #245	; 0xf5
 800b742:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b744:	bf00      	nop
 800b746:	bf00      	nop
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	0801a1b4 	.word	0x0801a1b4
 800b754:	0801a6f4 	.word	0x0801a6f4
 800b758:	0801a1f8 	.word	0x0801a1f8

0800b75c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	785b      	ldrb	r3, [r3, #1]
 800b76e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d069      	beq.n	800b84e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b784:	2b10      	cmp	r3, #16
 800b786:	d162      	bne.n	800b84e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b78c:	2b03      	cmp	r3, #3
 800b78e:	d002      	beq.n	800b796 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b790:	7afb      	ldrb	r3, [r7, #11]
 800b792:	2b02      	cmp	r3, #2
 800b794:	d05b      	beq.n	800b84e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b796:	7afb      	ldrb	r3, [r7, #11]
 800b798:	2b03      	cmp	r3, #3
 800b79a:	d103      	bne.n	800b7a4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	22f5      	movs	r2, #245	; 0xf5
 800b7a0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b7a2:	e059      	b.n	800b858 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b7a4:	7afb      	ldrb	r3, [r7, #11]
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d103      	bne.n	800b7b2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	22fb      	movs	r2, #251	; 0xfb
 800b7ae:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b7b0:	e052      	b.n	800b858 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	7a1b      	ldrb	r3, [r3, #8]
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d004      	beq.n	800b7c8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7ff f8d0 	bl	800a968 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6a1b      	ldr	r3, [r3, #32]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d006      	beq.n	800b7e0 <lwip_netconn_do_close+0x84>
 800b7d2:	4b23      	ldr	r3, [pc, #140]	; (800b860 <lwip_netconn_do_close+0x104>)
 800b7d4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b7d8:	4922      	ldr	r1, [pc, #136]	; (800b864 <lwip_netconn_do_close+0x108>)
 800b7da:	4823      	ldr	r0, [pc, #140]	; (800b868 <lwip_netconn_do_close+0x10c>)
 800b7dc:	f00d fb16 	bl	8018e0c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2204      	movs	r2, #4
 800b7e6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	68fa      	ldr	r2, [r7, #12]
 800b7ee:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff f934 	bl	800aa64 <lwip_netconn_do_close_internal>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d029      	beq.n	800b856 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	785b      	ldrb	r3, [r3, #1]
 800b808:	2b04      	cmp	r3, #4
 800b80a:	d006      	beq.n	800b81a <lwip_netconn_do_close+0xbe>
 800b80c:	4b14      	ldr	r3, [pc, #80]	; (800b860 <lwip_netconn_do_close+0x104>)
 800b80e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b812:	4916      	ldr	r1, [pc, #88]	; (800b86c <lwip_netconn_do_close+0x110>)
 800b814:	4814      	ldr	r0, [pc, #80]	; (800b868 <lwip_netconn_do_close+0x10c>)
 800b816:	f00d faf9 	bl	8018e0c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b81a:	4815      	ldr	r0, [pc, #84]	; (800b870 <lwip_netconn_do_close+0x114>)
 800b81c:	f00d f9b1 	bl	8018b82 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	330c      	adds	r3, #12
 800b826:	2100      	movs	r1, #0
 800b828:	4618      	mov	r0, r3
 800b82a:	f00d f910 	bl	8018a4e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b82e:	4810      	ldr	r0, [pc, #64]	; (800b870 <lwip_netconn_do_close+0x114>)
 800b830:	f00d f998 	bl	8018b64 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	785b      	ldrb	r3, [r3, #1]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00b      	beq.n	800b856 <lwip_netconn_do_close+0xfa>
 800b83e:	4b08      	ldr	r3, [pc, #32]	; (800b860 <lwip_netconn_do_close+0x104>)
 800b840:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b844:	4909      	ldr	r1, [pc, #36]	; (800b86c <lwip_netconn_do_close+0x110>)
 800b846:	4808      	ldr	r0, [pc, #32]	; (800b868 <lwip_netconn_do_close+0x10c>)
 800b848:	f00d fae0 	bl	8018e0c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b84c:	e003      	b.n	800b856 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	22f5      	movs	r2, #245	; 0xf5
 800b852:	711a      	strb	r2, [r3, #4]
 800b854:	e000      	b.n	800b858 <lwip_netconn_do_close+0xfc>
      return;
 800b856:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop
 800b860:	0801a1b4 	.word	0x0801a1b4
 800b864:	0801a558 	.word	0x0801a558
 800b868:	0801a1f8 	.word	0x0801a1f8
 800b86c:	0801a574 	.word	0x0801a574
 800b870:	20008448 	.word	0x20008448

0800b874 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4603      	mov	r3, r0
 800b87c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b87e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b882:	2b00      	cmp	r3, #0
 800b884:	dc04      	bgt.n	800b890 <err_to_errno+0x1c>
 800b886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b88a:	f113 0f10 	cmn.w	r3, #16
 800b88e:	da01      	bge.n	800b894 <err_to_errno+0x20>
    return EIO;
 800b890:	2305      	movs	r3, #5
 800b892:	e005      	b.n	800b8a0 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b898:	425b      	negs	r3, r3
 800b89a:	4a04      	ldr	r2, [pc, #16]	; (800b8ac <err_to_errno+0x38>)
 800b89c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	370c      	adds	r7, #12
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8aa:	4770      	bx	lr
 800b8ac:	0801dc10 	.word	0x0801dc10

0800b8b0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d013      	beq.n	800b8e6 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00b      	beq.n	800b8de <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f003 fa44 	bl	800ed58 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	605a      	str	r2, [r3, #4]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	685a      	ldr	r2, [r3, #4]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	2006      	movs	r0, #6
 800b8e2:	f002 fb63 	bl	800dfac <memp_free>
  }
}
 800b8e6:	bf00      	nop
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
	...

0800b8f0 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d106      	bne.n	800b90c <netbuf_free+0x1c>
 800b8fe:	4b0d      	ldr	r3, [pc, #52]	; (800b934 <netbuf_free+0x44>)
 800b900:	2281      	movs	r2, #129	; 0x81
 800b902:	490d      	ldr	r1, [pc, #52]	; (800b938 <netbuf_free+0x48>)
 800b904:	480d      	ldr	r0, [pc, #52]	; (800b93c <netbuf_free+0x4c>)
 800b906:	f00d fa81 	bl	8018e0c <iprintf>
 800b90a:	e00f      	b.n	800b92c <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d004      	beq.n	800b91e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4618      	mov	r0, r3
 800b91a:	f003 fa1d 	bl	800ed58 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	605a      	str	r2, [r3, #4]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685a      	ldr	r2, [r3, #4]
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800b92c:	3708      	adds	r7, #8
 800b92e:	46bd      	mov	sp, r7
 800b930:	bd80      	pop	{r7, pc}
 800b932:	bf00      	nop
 800b934:	0801a734 	.word	0x0801a734
 800b938:	0801a7d0 	.word	0x0801a7d0
 800b93c:	0801a784 	.word	0x0801a784

0800b940 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4613      	mov	r3, r2
 800b94c:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d108      	bne.n	800b966 <netbuf_ref+0x26>
 800b954:	4b1c      	ldr	r3, [pc, #112]	; (800b9c8 <netbuf_ref+0x88>)
 800b956:	2299      	movs	r2, #153	; 0x99
 800b958:	491c      	ldr	r1, [pc, #112]	; (800b9cc <netbuf_ref+0x8c>)
 800b95a:	481d      	ldr	r0, [pc, #116]	; (800b9d0 <netbuf_ref+0x90>)
 800b95c:	f00d fa56 	bl	8018e0c <iprintf>
 800b960:	f06f 030f 	mvn.w	r3, #15
 800b964:	e02b      	b.n	800b9be <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d004      	beq.n	800b978 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4618      	mov	r0, r3
 800b974:	f003 f9f0 	bl	800ed58 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b978:	2241      	movs	r2, #65	; 0x41
 800b97a:	2100      	movs	r1, #0
 800b97c:	2036      	movs	r0, #54	; 0x36
 800b97e:	f002 fed5 	bl	800e72c <pbuf_alloc>
 800b982:	4602      	mov	r2, r0
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d105      	bne.n	800b99c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2200      	movs	r2, #0
 800b994:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b996:	f04f 33ff 	mov.w	r3, #4294967295
 800b99a:	e010      	b.n	800b9be <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	88fa      	ldrh	r2, [r7, #6]
 800b9aa:	811a      	strh	r2, [r3, #8]
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	6812      	ldr	r2, [r2, #0]
 800b9b0:	891b      	ldrh	r3, [r3, #8]
 800b9b2:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3710      	adds	r7, #16
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	0801a734 	.word	0x0801a734
 800b9cc:	0801a7ec 	.word	0x0801a7ec
 800b9d0:	0801a784 	.word	0x0801a784

0800b9d4 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	db02      	blt.n	800b9ec <tryget_socket_unconn_nouse+0x18>
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	dd01      	ble.n	800b9f0 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	e003      	b.n	800b9f8 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	011b      	lsls	r3, r3, #4
 800b9f4:	4a03      	ldr	r2, [pc, #12]	; (800ba04 <tryget_socket_unconn_nouse+0x30>)
 800b9f6:	4413      	add	r3, r2
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	3714      	adds	r7, #20
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	200049b8 	.word	0x200049b8

0800ba08 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f7ff ffdf 	bl	800b9d4 <tryget_socket_unconn_nouse>
 800ba16:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800ba18:	68fb      	ldr	r3, [r7, #12]
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f7ff ffec 	bl	800ba08 <tryget_socket_unconn>
 800ba30:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d005      	beq.n	800ba44 <tryget_socket+0x22>
    if (sock->conn) {
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d001      	beq.n	800ba44 <tryget_socket+0x22>
      return sock;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	e000      	b.n	800ba46 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3710      	adds	r7, #16
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f7ff ffe2 	bl	800ba22 <tryget_socket>
 800ba5e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d104      	bne.n	800ba70 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800ba66:	4b05      	ldr	r3, [pc, #20]	; (800ba7c <get_socket+0x2c>)
 800ba68:	2209      	movs	r2, #9
 800ba6a:	601a      	str	r2, [r3, #0]
    return NULL;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	e000      	b.n	800ba72 <get_socket+0x22>
  }
  return sock;
 800ba70:	68fb      	ldr	r3, [r7, #12]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3710      	adds	r7, #16
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	2000bcc4 	.word	0x2000bcc4

0800ba80 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	60fb      	str	r3, [r7, #12]
 800ba8e:	e052      	b.n	800bb36 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800ba90:	f00d f8a4 	bl	8018bdc <sys_arch_protect>
 800ba94:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800ba96:	4a2c      	ldr	r2, [pc, #176]	; (800bb48 <alloc_socket+0xc8>)
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	011b      	lsls	r3, r3, #4
 800ba9c:	4413      	add	r3, r2
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d142      	bne.n	800bb2a <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800baa4:	4a28      	ldr	r2, [pc, #160]	; (800bb48 <alloc_socket+0xc8>)
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	011b      	lsls	r3, r3, #4
 800baaa:	4413      	add	r3, r2
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800bab0:	68b8      	ldr	r0, [r7, #8]
 800bab2:	f00d f8a1 	bl	8018bf8 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800bab6:	4a24      	ldr	r2, [pc, #144]	; (800bb48 <alloc_socket+0xc8>)
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	011b      	lsls	r3, r3, #4
 800babc:	4413      	add	r3, r2
 800babe:	3304      	adds	r3, #4
 800bac0:	2200      	movs	r2, #0
 800bac2:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800bac4:	4a20      	ldr	r2, [pc, #128]	; (800bb48 <alloc_socket+0xc8>)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	011b      	lsls	r3, r3, #4
 800baca:	4413      	add	r3, r2
 800bacc:	330e      	adds	r3, #14
 800bace:	781b      	ldrb	r3, [r3, #0]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d006      	beq.n	800bae2 <alloc_socket+0x62>
 800bad4:	4b1d      	ldr	r3, [pc, #116]	; (800bb4c <alloc_socket+0xcc>)
 800bad6:	f240 220e 	movw	r2, #526	; 0x20e
 800bada:	491d      	ldr	r1, [pc, #116]	; (800bb50 <alloc_socket+0xd0>)
 800badc:	481d      	ldr	r0, [pc, #116]	; (800bb54 <alloc_socket+0xd4>)
 800bade:	f00d f995 	bl	8018e0c <iprintf>
      sockets[i].rcvevent   = 0;
 800bae2:	4a19      	ldr	r2, [pc, #100]	; (800bb48 <alloc_socket+0xc8>)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	011b      	lsls	r3, r3, #4
 800bae8:	4413      	add	r3, r2
 800baea:	3308      	adds	r3, #8
 800baec:	2200      	movs	r2, #0
 800baee:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800baf8:	2b10      	cmp	r3, #16
 800bafa:	d102      	bne.n	800bb02 <alloc_socket+0x82>
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d001      	beq.n	800bb06 <alloc_socket+0x86>
 800bb02:	2301      	movs	r3, #1
 800bb04:	e000      	b.n	800bb08 <alloc_socket+0x88>
 800bb06:	2300      	movs	r3, #0
 800bb08:	b299      	uxth	r1, r3
 800bb0a:	4a0f      	ldr	r2, [pc, #60]	; (800bb48 <alloc_socket+0xc8>)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	011b      	lsls	r3, r3, #4
 800bb10:	4413      	add	r3, r2
 800bb12:	330a      	adds	r3, #10
 800bb14:	460a      	mov	r2, r1
 800bb16:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800bb18:	4a0b      	ldr	r2, [pc, #44]	; (800bb48 <alloc_socket+0xc8>)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	011b      	lsls	r3, r3, #4
 800bb1e:	4413      	add	r3, r2
 800bb20:	330c      	adds	r3, #12
 800bb22:	2200      	movs	r2, #0
 800bb24:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	e00a      	b.n	800bb40 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800bb2a:	68b8      	ldr	r0, [r7, #8]
 800bb2c:	f00d f864 	bl	8018bf8 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	3301      	adds	r3, #1
 800bb34:	60fb      	str	r3, [r7, #12]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	dda9      	ble.n	800ba90 <alloc_socket+0x10>
  }
  return -1;
 800bb3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	200049b8 	.word	0x200049b8
 800bb4c:	0801a8cc 	.word	0x0801a8cc
 800bb50:	0801a900 	.word	0x0801a900
 800bb54:	0801a920 	.word	0x0801a920

0800bb58 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b085      	sub	sp, #20
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	60f8      	str	r0, [r7, #12]
 800bb60:	60b9      	str	r1, [r7, #8]
 800bb62:	607a      	str	r2, [r7, #4]
 800bb64:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	68fa      	ldr	r2, [r7, #12]
 800bb6a:	6852      	ldr	r2, [r2, #4]
 800bb6c:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	601a      	str	r2, [r3, #0]
  return 1;
 800bb82:	2301      	movs	r3, #1
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00d      	beq.n	800bbc0 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d005      	beq.n	800bbb6 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f003 f8d2 	bl	800ed58 <pbuf_free>
 800bbb4:	e004      	b.n	800bbc0 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f7ff fe78 	bl	800b8b0 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d002      	beq.n	800bbcc <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800bbc6:	68b8      	ldr	r0, [r7, #8]
 800bbc8:	f7fd fd04 	bl	80095d4 <netconn_delete>
  }
}
 800bbcc:	bf00      	nop
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
 800bbdc:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800bbde:	f00c fffd 	bl	8018bdc <sys_arch_protect>
 800bbe2:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800bbe4:	f107 0308 	add.w	r3, r7, #8
 800bbe8:	f107 020c 	add.w	r2, r7, #12
 800bbec:	6839      	ldr	r1, [r7, #0]
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7ff ffb2 	bl	800bb58 <free_socket_locked>
 800bbf4:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800bbf6:	6978      	ldr	r0, [r7, #20]
 800bbf8:	f00c fffe 	bl	8018bf8 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d006      	beq.n	800bc10 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f107 0208 	add.w	r2, r7, #8
 800bc08:	4619      	mov	r1, r3
 800bc0a:	6838      	ldr	r0, [r7, #0]
 800bc0c:	f7ff ffc0 	bl	800bb90 <free_socket_free_elements>
  }
}
 800bc10:	bf00      	nop
 800bc12:	3718      	adds	r7, #24
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800bc18:	b590      	push	{r4, r7, lr}
 800bc1a:	b099      	sub	sp, #100	; 0x64
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800bc24:	2300      	movs	r3, #0
 800bc26:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800bc28:	68f8      	ldr	r0, [r7, #12]
 800bc2a:	f7ff ff11 	bl	800ba50 <get_socket>
 800bc2e:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800bc30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d102      	bne.n	800bc3c <lwip_accept+0x24>
    return -1;
 800bc36:	f04f 33ff 	mov.w	r3, #4294967295
 800bc3a:	e0f8      	b.n	800be2e <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800bc3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800bc44:	4611      	mov	r1, r2
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fd fd96 	bl	8009778 <netconn_accept>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800bc52:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d02c      	beq.n	800bcb4 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800bc5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc64:	2b10      	cmp	r3, #16
 800bc66:	d008      	beq.n	800bc7a <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800bc68:	235f      	movs	r3, #95	; 0x5f
 800bc6a:	633b      	str	r3, [r7, #48]	; 0x30
 800bc6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d01d      	beq.n	800bcae <lwip_accept+0x96>
 800bc72:	4a71      	ldr	r2, [pc, #452]	; (800be38 <lwip_accept+0x220>)
 800bc74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc76:	6013      	str	r3, [r2, #0]
 800bc78:	e019      	b.n	800bcae <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800bc7a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bc7e:	f113 0f0f 	cmn.w	r3, #15
 800bc82:	d108      	bne.n	800bc96 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800bc84:	2316      	movs	r3, #22
 800bc86:	637b      	str	r3, [r7, #52]	; 0x34
 800bc88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d00f      	beq.n	800bcae <lwip_accept+0x96>
 800bc8e:	4a6a      	ldr	r2, [pc, #424]	; (800be38 <lwip_accept+0x220>)
 800bc90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc92:	6013      	str	r3, [r2, #0]
 800bc94:	e00b      	b.n	800bcae <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800bc96:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f7ff fdea 	bl	800b874 <err_to_errno>
 800bca0:	63b8      	str	r0, [r7, #56]	; 0x38
 800bca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <lwip_accept+0x96>
 800bca8:	4a63      	ldr	r2, [pc, #396]	; (800be38 <lwip_accept+0x220>)
 800bcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcac:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800bcae:	f04f 33ff 	mov.w	r3, #4294967295
 800bcb2:	e0bc      	b.n	800be2e <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800bcb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d106      	bne.n	800bcc8 <lwip_accept+0xb0>
 800bcba:	4b60      	ldr	r3, [pc, #384]	; (800be3c <lwip_accept+0x224>)
 800bcbc:	f240 228b 	movw	r2, #651	; 0x28b
 800bcc0:	495f      	ldr	r1, [pc, #380]	; (800be40 <lwip_accept+0x228>)
 800bcc2:	4860      	ldr	r0, [pc, #384]	; (800be44 <lwip_accept+0x22c>)
 800bcc4:	f00d f8a2 	bl	8018e0c <iprintf>

  newsock = alloc_socket(newconn, 1);
 800bcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcca:	2101      	movs	r1, #1
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff fed7 	bl	800ba80 <alloc_socket>
 800bcd2:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800bcd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcda:	d10e      	bne.n	800bcfa <lwip_accept+0xe2>
    netconn_delete(newconn);
 800bcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fd fc78 	bl	80095d4 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800bce4:	2317      	movs	r3, #23
 800bce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <lwip_accept+0xdc>
 800bcee:	4a52      	ldr	r2, [pc, #328]	; (800be38 <lwip_accept+0x220>)
 800bcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcf2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800bcf8:	e099      	b.n	800be2e <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800bcfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	db02      	blt.n	800bd06 <lwip_accept+0xee>
 800bd00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd02:	2b03      	cmp	r3, #3
 800bd04:	dd06      	ble.n	800bd14 <lwip_accept+0xfc>
 800bd06:	4b4d      	ldr	r3, [pc, #308]	; (800be3c <lwip_accept+0x224>)
 800bd08:	f44f 7225 	mov.w	r2, #660	; 0x294
 800bd0c:	494e      	ldr	r1, [pc, #312]	; (800be48 <lwip_accept+0x230>)
 800bd0e:	484d      	ldr	r0, [pc, #308]	; (800be44 <lwip_accept+0x22c>)
 800bd10:	f00d f87c 	bl	8018e0c <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800bd14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd16:	011b      	lsls	r3, r3, #4
 800bd18:	4a4c      	ldr	r2, [pc, #304]	; (800be4c <lwip_accept+0x234>)
 800bd1a:	4413      	add	r3, r2
 800bd1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800bd1e:	f00c ff5d 	bl	8018bdc <sys_arch_protect>
 800bd22:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800bd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd26:	699b      	ldr	r3, [r3, #24]
 800bd28:	b21b      	sxth	r3, r3
 800bd2a:	43db      	mvns	r3, r3
 800bd2c:	b21b      	sxth	r3, r3
 800bd2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800bd30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bd34:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800bd36:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800bd38:	f00c ff5e 	bl	8018bf8 <sys_arch_unprotect>

  if (newconn->callback) {
 800bd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d012      	beq.n	800bd6a <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800bd44:	4842      	ldr	r0, [pc, #264]	; (800be50 <lwip_accept+0x238>)
 800bd46:	f00c ff0d 	bl	8018b64 <sys_mutex_lock>
    while (recvevent > 0) {
 800bd4a:	e008      	b.n	800bd5e <lwip_accept+0x146>
      recvevent--;
 800bd4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800bd52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd58:	2200      	movs	r2, #0
 800bd5a:	2100      	movs	r1, #0
 800bd5c:	4798      	blx	r3
    while (recvevent > 0) {
 800bd5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	dcf3      	bgt.n	800bd4c <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800bd64:	483a      	ldr	r0, [pc, #232]	; (800be50 <lwip_accept+0x238>)
 800bd66:	f00c ff0c 	bl	8018b82 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800bd6a:	68bb      	ldr	r3, [r7, #8]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d055      	beq.n	800be1c <lwip_accept+0x204>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d052      	beq.n	800be1c <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800bd76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bd78:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800bd7c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800bd80:	2300      	movs	r3, #0
 800bd82:	f7fd fc43 	bl	800960c <netconn_getaddr>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800bd8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d016      	beq.n	800bdc2 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800bd94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fd fc1c 	bl	80095d4 <netconn_delete>
      free_socket(nsock, 1);
 800bd9c:	2101      	movs	r1, #1
 800bd9e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bda0:	f7ff ff18 	bl	800bbd4 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800bda4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7ff fd63 	bl	800b874 <err_to_errno>
 800bdae:	6478      	str	r0, [r7, #68]	; 0x44
 800bdb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d002      	beq.n	800bdbc <lwip_accept+0x1a4>
 800bdb6:	4a20      	ldr	r2, [pc, #128]	; (800be38 <lwip_accept+0x220>)
 800bdb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdba:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800bdbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bdc0:	e035      	b.n	800be2e <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800bdc2:	f107 0314 	add.w	r3, r7, #20
 800bdc6:	2210      	movs	r2, #16
 800bdc8:	701a      	strb	r2, [r3, #0]
 800bdca:	f107 0314 	add.w	r3, r7, #20
 800bdce:	2202      	movs	r2, #2
 800bdd0:	705a      	strb	r2, [r3, #1]
 800bdd2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bdd4:	f107 0414 	add.w	r4, r7, #20
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f001 f915 	bl	800d008 <lwip_htons>
 800bdde:	4603      	mov	r3, r0
 800bde0:	8063      	strh	r3, [r4, #2]
 800bde2:	f107 0314 	add.w	r3, r7, #20
 800bde6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bde8:	605a      	str	r2, [r3, #4]
 800bdea:	f107 0314 	add.w	r3, r7, #20
 800bdee:	3308      	adds	r3, #8
 800bdf0:	2208      	movs	r2, #8
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f00c ff57 	bl	8018ca8 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	7d3a      	ldrb	r2, [r7, #20]
 800be00:	4293      	cmp	r3, r2
 800be02:	d903      	bls.n	800be0c <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800be04:	7d3b      	ldrb	r3, [r7, #20]
 800be06:	461a      	mov	r2, r3
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	f107 0314 	add.w	r3, r7, #20
 800be14:	4619      	mov	r1, r3
 800be16:	68b8      	ldr	r0, [r7, #8]
 800be18:	f00c ff38 	bl	8018c8c <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800be1c:	2300      	movs	r3, #0
 800be1e:	643b      	str	r3, [r7, #64]	; 0x40
 800be20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be22:	2b00      	cmp	r3, #0
 800be24:	d002      	beq.n	800be2c <lwip_accept+0x214>
 800be26:	4a04      	ldr	r2, [pc, #16]	; (800be38 <lwip_accept+0x220>)
 800be28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be2a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800be2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3764      	adds	r7, #100	; 0x64
 800be32:	46bd      	mov	sp, r7
 800be34:	bd90      	pop	{r4, r7, pc}
 800be36:	bf00      	nop
 800be38:	2000bcc4 	.word	0x2000bcc4
 800be3c:	0801a8cc 	.word	0x0801a8cc
 800be40:	0801a948 	.word	0x0801a948
 800be44:	0801a920 	.word	0x0801a920
 800be48:	0801a958 	.word	0x0801a958
 800be4c:	200049b8 	.word	0x200049b8
 800be50:	20008448 	.word	0x20008448

0800be54 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08a      	sub	sp, #40	; 0x28
 800be58:	af00      	add	r7, sp, #0
 800be5a:	60f8      	str	r0, [r7, #12]
 800be5c:	60b9      	str	r1, [r7, #8]
 800be5e:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f7ff fdf5 	bl	800ba50 <get_socket>
 800be66:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800be68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d102      	bne.n	800be74 <lwip_bind+0x20>
    return -1;
 800be6e:	f04f 33ff 	mov.w	r3, #4294967295
 800be72:	e051      	b.n	800bf18 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	2b10      	cmp	r3, #16
 800be78:	d108      	bne.n	800be8c <lwip_bind+0x38>
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	785b      	ldrb	r3, [r3, #1]
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d104      	bne.n	800be8c <lwip_bind+0x38>
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	f003 0303 	and.w	r3, r3, #3
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d014      	beq.n	800beb6 <lwip_bind+0x62>
 800be8c:	4b24      	ldr	r3, [pc, #144]	; (800bf20 <lwip_bind+0xcc>)
 800be8e:	f240 22e2 	movw	r2, #738	; 0x2e2
 800be92:	4924      	ldr	r1, [pc, #144]	; (800bf24 <lwip_bind+0xd0>)
 800be94:	4824      	ldr	r0, [pc, #144]	; (800bf28 <lwip_bind+0xd4>)
 800be96:	f00c ffb9 	bl	8018e0c <iprintf>
 800be9a:	f06f 000f 	mvn.w	r0, #15
 800be9e:	f7ff fce9 	bl	800b874 <err_to_errno>
 800bea2:	6178      	str	r0, [r7, #20]
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d002      	beq.n	800beb0 <lwip_bind+0x5c>
 800beaa:	4a20      	ldr	r2, [pc, #128]	; (800bf2c <lwip_bind+0xd8>)
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	6013      	str	r3, [r2, #0]
 800beb0:	f04f 33ff 	mov.w	r3, #4294967295
 800beb4:	e030      	b.n	800bf18 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	613b      	str	r3, [r7, #16]
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	885b      	ldrh	r3, [r3, #2]
 800bec0:	4618      	mov	r0, r3
 800bec2:	f001 f8a1 	bl	800d008 <lwip_htons>
 800bec6:	4603      	mov	r3, r0
 800bec8:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800beca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bed0:	f107 0110 	add.w	r1, r7, #16
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7fd fbeb 	bl	80096b0 <netconn_bind>
 800beda:	4603      	mov	r3, r0
 800bedc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800bee0:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00e      	beq.n	800bf06 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800bee8:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800beec:	4618      	mov	r0, r3
 800beee:	f7ff fcc1 	bl	800b874 <err_to_errno>
 800bef2:	61b8      	str	r0, [r7, #24]
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <lwip_bind+0xac>
 800befa:	4a0c      	ldr	r2, [pc, #48]	; (800bf2c <lwip_bind+0xd8>)
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bf00:	f04f 33ff 	mov.w	r3, #4294967295
 800bf04:	e008      	b.n	800bf18 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800bf06:	2300      	movs	r3, #0
 800bf08:	61fb      	str	r3, [r7, #28]
 800bf0a:	69fb      	ldr	r3, [r7, #28]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d002      	beq.n	800bf16 <lwip_bind+0xc2>
 800bf10:	4a06      	ldr	r2, [pc, #24]	; (800bf2c <lwip_bind+0xd8>)
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3728      	adds	r7, #40	; 0x28
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	0801a8cc 	.word	0x0801a8cc
 800bf24:	0801a970 	.word	0x0801a970
 800bf28:	0801a920 	.word	0x0801a920
 800bf2c:	2000bcc4 	.word	0x2000bcc4

0800bf30 <lwip_close>:

int
lwip_close(int s)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f7ff fd87 	bl	800ba50 <get_socket>
 800bf42:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d102      	bne.n	800bf50 <lwip_close+0x20>
    return -1;
 800bf4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bf4e:	e039      	b.n	800bfc4 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800bf50:	693b      	ldr	r3, [r7, #16]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d00b      	beq.n	800bf70 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf62:	2b10      	cmp	r3, #16
 800bf64:	bf0c      	ite	eq
 800bf66:	2301      	moveq	r3, #1
 800bf68:	2300      	movne	r3, #0
 800bf6a:	b2db      	uxtb	r3, r3
 800bf6c:	617b      	str	r3, [r7, #20]
 800bf6e:	e00a      	b.n	800bf86 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d006      	beq.n	800bf86 <lwip_close+0x56>
 800bf78:	4b14      	ldr	r3, [pc, #80]	; (800bfcc <lwip_close+0x9c>)
 800bf7a:	f44f 7245 	mov.w	r2, #788	; 0x314
 800bf7e:	4914      	ldr	r1, [pc, #80]	; (800bfd0 <lwip_close+0xa0>)
 800bf80:	4814      	ldr	r0, [pc, #80]	; (800bfd4 <lwip_close+0xa4>)
 800bf82:	f00c ff43 	bl	8018e0c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fd fafe 	bl	800958c <netconn_prepare_delete>
 800bf90:	4603      	mov	r3, r0
 800bf92:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800bf94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d00e      	beq.n	800bfba <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800bf9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff fc67 	bl	800b874 <err_to_errno>
 800bfa6:	60b8      	str	r0, [r7, #8]
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <lwip_close+0x84>
 800bfae:	4a0a      	ldr	r2, [pc, #40]	; (800bfd8 <lwip_close+0xa8>)
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800bfb4:	f04f 33ff 	mov.w	r3, #4294967295
 800bfb8:	e004      	b.n	800bfc4 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800bfba:	6979      	ldr	r1, [r7, #20]
 800bfbc:	6938      	ldr	r0, [r7, #16]
 800bfbe:	f7ff fe09 	bl	800bbd4 <free_socket>
  set_errno(0);
  return 0;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3718      	adds	r7, #24
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	0801a8cc 	.word	0x0801a8cc
 800bfd0:	0801a98c 	.word	0x0801a98c
 800bfd4:	0801a920 	.word	0x0801a920
 800bfd8:	2000bcc4 	.word	0x2000bcc4

0800bfdc <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b088      	sub	sp, #32
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff fd32 	bl	800ba50 <get_socket>
 800bfec:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d102      	bne.n	800bffa <lwip_listen+0x1e>
    return -1;
 800bff4:	f04f 33ff 	mov.w	r3, #4294967295
 800bff8:	e03e      	b.n	800c078 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	2bfe      	cmp	r3, #254	; 0xfe
 800bffe:	dc03      	bgt.n	800c008 <lwip_listen+0x2c>
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c006:	e000      	b.n	800c00a <lwip_listen+0x2e>
 800c008:	23ff      	movs	r3, #255	; 0xff
 800c00a:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	683a      	ldr	r2, [r7, #0]
 800c012:	b2d2      	uxtb	r2, r2
 800c014:	4611      	mov	r1, r2
 800c016:	4618      	mov	r0, r3
 800c018:	f7fd fb82 	bl	8009720 <netconn_listen_with_backlog>
 800c01c:	4603      	mov	r3, r0
 800c01e:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800c020:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d01e      	beq.n	800c066 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	781b      	ldrb	r3, [r3, #0]
 800c02e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c032:	2b10      	cmp	r3, #16
 800c034:	d008      	beq.n	800c048 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800c036:	235f      	movs	r3, #95	; 0x5f
 800c038:	60fb      	str	r3, [r7, #12]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d00f      	beq.n	800c060 <lwip_listen+0x84>
 800c040:	4a0f      	ldr	r2, [pc, #60]	; (800c080 <lwip_listen+0xa4>)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	6013      	str	r3, [r2, #0]
 800c046:	e00b      	b.n	800c060 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800c048:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7ff fc11 	bl	800b874 <err_to_errno>
 800c052:	6138      	str	r0, [r7, #16]
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d002      	beq.n	800c060 <lwip_listen+0x84>
 800c05a:	4a09      	ldr	r2, [pc, #36]	; (800c080 <lwip_listen+0xa4>)
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800c060:	f04f 33ff 	mov.w	r3, #4294967295
 800c064:	e008      	b.n	800c078 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800c066:	2300      	movs	r3, #0
 800c068:	617b      	str	r3, [r7, #20]
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d002      	beq.n	800c076 <lwip_listen+0x9a>
 800c070:	4a03      	ldr	r2, [pc, #12]	; (800c080 <lwip_listen+0xa4>)
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3720      	adds	r7, #32
 800c07c:	46bd      	mov	sp, r7
 800c07e:	bd80      	pop	{r7, pc}
 800c080:	2000bcc4 	.word	0x2000bcc4

0800c084 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b08c      	sub	sp, #48	; 0x30
 800c088:	af00      	add	r7, sp, #0
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	60b9      	str	r1, [r7, #8]
 800c08e:	607a      	str	r2, [r7, #4]
 800c090:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800c092:	2308      	movs	r3, #8
 800c094:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800c098:	2300      	movs	r3, #0
 800c09a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	db01      	blt.n	800c0a6 <lwip_recv_tcp+0x22>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	e001      	b.n	800c0aa <lwip_recv_tcp+0x26>
 800c0a6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c0aa:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d106      	bne.n	800c0c0 <lwip_recv_tcp+0x3c>
 800c0b2:	4b74      	ldr	r3, [pc, #464]	; (800c284 <lwip_recv_tcp+0x200>)
 800c0b4:	f240 329e 	movw	r2, #926	; 0x39e
 800c0b8:	4973      	ldr	r1, [pc, #460]	; (800c288 <lwip_recv_tcp+0x204>)
 800c0ba:	4874      	ldr	r0, [pc, #464]	; (800c28c <lwip_recv_tcp+0x208>)
 800c0bc:	f00c fea6 	bl	8018e0c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0ca:	2b10      	cmp	r3, #16
 800c0cc:	d006      	beq.n	800c0dc <lwip_recv_tcp+0x58>
 800c0ce:	4b6d      	ldr	r3, [pc, #436]	; (800c284 <lwip_recv_tcp+0x200>)
 800c0d0:	f240 329f 	movw	r2, #927	; 0x39f
 800c0d4:	496e      	ldr	r1, [pc, #440]	; (800c290 <lwip_recv_tcp+0x20c>)
 800c0d6:	486d      	ldr	r0, [pc, #436]	; (800c28c <lwip_recv_tcp+0x208>)
 800c0d8:	f00c fe98 	bl	8018e0c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	f003 0308 	and.w	r3, r3, #8
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d005      	beq.n	800c0f2 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800c0e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0ea:	f043 0304 	orr.w	r3, r3, #4
 800c0ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d003      	beq.n	800c102 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	617b      	str	r3, [r7, #20]
 800c100:	e036      	b.n	800c170 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c10a:	f107 0114 	add.w	r1, r7, #20
 800c10e:	4618      	mov	r0, r3
 800c110:	f7fd fd68 	bl	8009be4 <netconn_recv_tcp_pbuf_flags>
 800c114:	4603      	mov	r3, r0
 800c116:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800c11a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d019      	beq.n	800c156 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800c122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c124:	2b00      	cmp	r3, #0
 800c126:	f300 808d 	bgt.w	800c244 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800c12a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c12e:	4618      	mov	r0, r3
 800c130:	f7ff fba0 	bl	800b874 <err_to_errno>
 800c134:	61f8      	str	r0, [r7, #28]
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d002      	beq.n	800c142 <lwip_recv_tcp+0xbe>
 800c13c:	4a55      	ldr	r2, [pc, #340]	; (800c294 <lwip_recv_tcp+0x210>)
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800c142:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800c146:	f113 0f0f 	cmn.w	r3, #15
 800c14a:	d101      	bne.n	800c150 <lwip_recv_tcp+0xcc>
          return 0;
 800c14c:	2300      	movs	r3, #0
 800c14e:	e094      	b.n	800c27a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800c150:	f04f 33ff 	mov.w	r3, #4294967295
 800c154:	e091      	b.n	800c27a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d106      	bne.n	800c16a <lwip_recv_tcp+0xe6>
 800c15c:	4b49      	ldr	r3, [pc, #292]	; (800c284 <lwip_recv_tcp+0x200>)
 800c15e:	f240 32c5 	movw	r2, #965	; 0x3c5
 800c162:	494d      	ldr	r1, [pc, #308]	; (800c298 <lwip_recv_tcp+0x214>)
 800c164:	4849      	ldr	r0, [pc, #292]	; (800c28c <lwip_recv_tcp+0x208>)
 800c166:	f00c fe51 	bl	8018e0c <iprintf>
      sock->lastdata.pbuf = p;
 800c16a:	697a      	ldr	r2, [r7, #20]
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	891b      	ldrh	r3, [r3, #8]
 800c174:	461a      	mov	r2, r3
 800c176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c178:	4293      	cmp	r3, r2
 800c17a:	dd03      	ble.n	800c184 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	891b      	ldrh	r3, [r3, #8]
 800c180:	847b      	strh	r3, [r7, #34]	; 0x22
 800c182:	e001      	b.n	800c188 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800c184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c186:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800c188:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c18c:	4413      	add	r3, r2
 800c18e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c190:	429a      	cmp	r2, r3
 800c192:	dd03      	ble.n	800c19c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	b29b      	uxth	r3, r3
 800c198:	43db      	mvns	r3, r3
 800c19a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800c19c:	6978      	ldr	r0, [r7, #20]
 800c19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a0:	68ba      	ldr	r2, [r7, #8]
 800c1a2:	18d1      	adds	r1, r2, r3
 800c1a4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	f002 ffdc 	bl	800f164 <pbuf_copy_partial>

    recvd += copylen;
 800c1ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1b0:	4413      	add	r3, r2
 800c1b2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800c1b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	da06      	bge.n	800c1ca <lwip_recv_tcp+0x146>
 800c1bc:	4b31      	ldr	r3, [pc, #196]	; (800c284 <lwip_recv_tcp+0x200>)
 800c1be:	f240 32dd 	movw	r2, #989	; 0x3dd
 800c1c2:	4936      	ldr	r1, [pc, #216]	; (800c29c <lwip_recv_tcp+0x218>)
 800c1c4:	4831      	ldr	r0, [pc, #196]	; (800c28c <lwip_recv_tcp+0x208>)
 800c1c6:	f00c fe21 	bl	8018e0c <iprintf>
    recv_left -= copylen;
 800c1ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	f003 0301 	and.w	r3, r3, #1
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d123      	bne.n	800c224 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	891b      	ldrh	r3, [r3, #8]
 800c1e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	d906      	bls.n	800c1f4 <lwip_recv_tcp+0x170>
 800c1e6:	4b27      	ldr	r3, [pc, #156]	; (800c284 <lwip_recv_tcp+0x200>)
 800c1e8:	f240 32e3 	movw	r2, #995	; 0x3e3
 800c1ec:	492c      	ldr	r1, [pc, #176]	; (800c2a0 <lwip_recv_tcp+0x21c>)
 800c1ee:	4827      	ldr	r0, [pc, #156]	; (800c28c <lwip_recv_tcp+0x208>)
 800c1f0:	f00c fe0c 	bl	8018e0c <iprintf>
      if (p->tot_len - copylen > 0) {
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	891b      	ldrh	r3, [r3, #8]
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c1fc:	1ad3      	subs	r3, r2, r3
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	dd09      	ble.n	800c216 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c206:	4611      	mov	r1, r2
 800c208:	4618      	mov	r0, r3
 800c20a:	f002 fd72 	bl	800ecf2 <pbuf_free_header>
 800c20e:	4602      	mov	r2, r0
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	605a      	str	r2, [r3, #4]
 800c214:	e006      	b.n	800c224 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2200      	movs	r2, #0
 800c21a:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	4618      	mov	r0, r3
 800c220:	f002 fd9a 	bl	800ed58 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800c224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c228:	f043 0314 	orr.w	r3, r3, #20
 800c22c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800c230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c232:	2b00      	cmp	r3, #0
 800c234:	dd08      	ble.n	800c248 <lwip_recv_tcp+0x1c4>
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	f003 0301 	and.w	r3, r3, #1
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f43f af58 	beq.w	800c0f2 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800c242:	e001      	b.n	800c248 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800c244:	bf00      	nop
 800c246:	e000      	b.n	800c24a <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800c248:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800c24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	dd0b      	ble.n	800c268 <lwip_recv_tcp+0x1e4>
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	f003 0301 	and.w	r3, r3, #1
 800c256:	2b00      	cmp	r3, #0
 800c258:	d106      	bne.n	800c268 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c260:	4611      	mov	r1, r2
 800c262:	4618      	mov	r0, r3
 800c264:	f7fd fc0c 	bl	8009a80 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800c268:	2300      	movs	r3, #0
 800c26a:	61bb      	str	r3, [r7, #24]
 800c26c:	69bb      	ldr	r3, [r7, #24]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d002      	beq.n	800c278 <lwip_recv_tcp+0x1f4>
 800c272:	4a08      	ldr	r2, [pc, #32]	; (800c294 <lwip_recv_tcp+0x210>)
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	6013      	str	r3, [r2, #0]
  return recvd;
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3730      	adds	r7, #48	; 0x30
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	0801a8cc 	.word	0x0801a8cc
 800c288:	0801a9c4 	.word	0x0801a9c4
 800c28c:	0801a920 	.word	0x0801a920
 800c290:	0801a9d4 	.word	0x0801a9d4
 800c294:	2000bcc4 	.word	0x2000bcc4
 800c298:	0801a9f8 	.word	0x0801a9f8
 800c29c:	0801aa04 	.word	0x0801aa04
 800c2a0:	0801aa2c 	.word	0x0801aa2c

0800c2a4 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800c2a4:	b590      	push	{r4, r7, lr}
 800c2a6:	b08b      	sub	sp, #44	; 0x2c
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	60f8      	str	r0, [r7, #12]
 800c2ac:	60b9      	str	r1, [r7, #8]
 800c2ae:	603b      	str	r3, [r7, #0]
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d106      	bne.n	800c2cc <lwip_sock_make_addr+0x28>
 800c2be:	4b2b      	ldr	r3, [pc, #172]	; (800c36c <lwip_sock_make_addr+0xc8>)
 800c2c0:	f240 4207 	movw	r2, #1031	; 0x407
 800c2c4:	492a      	ldr	r1, [pc, #168]	; (800c370 <lwip_sock_make_addr+0xcc>)
 800c2c6:	482b      	ldr	r0, [pc, #172]	; (800c374 <lwip_sock_make_addr+0xd0>)
 800c2c8:	f00c fda0 	bl	8018e0c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d106      	bne.n	800c2e0 <lwip_sock_make_addr+0x3c>
 800c2d2:	4b26      	ldr	r3, [pc, #152]	; (800c36c <lwip_sock_make_addr+0xc8>)
 800c2d4:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c2d8:	4927      	ldr	r1, [pc, #156]	; (800c378 <lwip_sock_make_addr+0xd4>)
 800c2da:	4826      	ldr	r0, [pc, #152]	; (800c374 <lwip_sock_make_addr+0xd0>)
 800c2dc:	f00c fd96 	bl	8018e0c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800c2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d106      	bne.n	800c2f4 <lwip_sock_make_addr+0x50>
 800c2e6:	4b21      	ldr	r3, [pc, #132]	; (800c36c <lwip_sock_make_addr+0xc8>)
 800c2e8:	f240 4209 	movw	r2, #1033	; 0x409
 800c2ec:	4923      	ldr	r1, [pc, #140]	; (800c37c <lwip_sock_make_addr+0xd8>)
 800c2ee:	4821      	ldr	r0, [pc, #132]	; (800c374 <lwip_sock_make_addr+0xd0>)
 800c2f0:	f00c fd8c 	bl	8018e0c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800c2f4:	f107 0314 	add.w	r3, r7, #20
 800c2f8:	2210      	movs	r2, #16
 800c2fa:	701a      	strb	r2, [r3, #0]
 800c2fc:	f107 0314 	add.w	r3, r7, #20
 800c300:	2202      	movs	r2, #2
 800c302:	705a      	strb	r2, [r3, #1]
 800c304:	f107 0414 	add.w	r4, r7, #20
 800c308:	88fb      	ldrh	r3, [r7, #6]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 fe7c 	bl	800d008 <lwip_htons>
 800c310:	4603      	mov	r3, r0
 800c312:	8063      	strh	r3, [r4, #2]
 800c314:	f107 0314 	add.w	r3, r7, #20
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	6812      	ldr	r2, [r2, #0]
 800c31c:	605a      	str	r2, [r3, #4]
 800c31e:	f107 0314 	add.w	r3, r7, #20
 800c322:	3308      	adds	r3, #8
 800c324:	2208      	movs	r2, #8
 800c326:	2100      	movs	r1, #0
 800c328:	4618      	mov	r0, r3
 800c32a:	f00c fcbd 	bl	8018ca8 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	7d3a      	ldrb	r2, [r7, #20]
 800c334:	4293      	cmp	r3, r2
 800c336:	d202      	bcs.n	800c33e <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800c338:	2301      	movs	r3, #1
 800c33a:	627b      	str	r3, [r7, #36]	; 0x24
 800c33c:	e008      	b.n	800c350 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800c33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	7d3a      	ldrb	r2, [r7, #20]
 800c344:	4293      	cmp	r3, r2
 800c346:	d903      	bls.n	800c350 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800c348:	7d3b      	ldrb	r3, [r7, #20]
 800c34a:	461a      	mov	r2, r3
 800c34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34e:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800c350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	f107 0314 	add.w	r3, r7, #20
 800c358:	4619      	mov	r1, r3
 800c35a:	6838      	ldr	r0, [r7, #0]
 800c35c:	f00c fc96 	bl	8018c8c <memcpy>
  return truncated;
 800c360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c362:	4618      	mov	r0, r3
 800c364:	372c      	adds	r7, #44	; 0x2c
 800c366:	46bd      	mov	sp, r7
 800c368:	bd90      	pop	{r4, r7, pc}
 800c36a:	bf00      	nop
 800c36c:	0801a8cc 	.word	0x0801a8cc
 800c370:	0801aa3c 	.word	0x0801aa3c
 800c374:	0801a920 	.word	0x0801a920
 800c378:	0801aa50 	.word	0x0801aa50
 800c37c:	0801aa60 	.word	0x0801aa60

0800c380 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b088      	sub	sp, #32
 800c384:	af02      	add	r7, sp, #8
 800c386:	60f8      	str	r0, [r7, #12]
 800c388:	60b9      	str	r1, [r7, #8]
 800c38a:	607a      	str	r2, [r7, #4]
 800c38c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d101      	bne.n	800c398 <lwip_recv_tcp_from+0x18>
    return 0;
 800c394:	2300      	movs	r3, #0
 800c396:	e021      	b.n	800c3dc <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d01d      	beq.n	800c3da <lwip_recv_tcp_from+0x5a>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d01a      	beq.n	800c3da <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6818      	ldr	r0, [r3, #0]
 800c3a8:	f107 0216 	add.w	r2, r7, #22
 800c3ac:	f107 0110 	add.w	r1, r7, #16
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	f7fd f92b 	bl	800960c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00e      	beq.n	800c3da <lwip_recv_tcp_from+0x5a>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d00b      	beq.n	800c3da <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	6818      	ldr	r0, [r3, #0]
 800c3c6:	8afa      	ldrh	r2, [r7, #22]
 800c3c8:	f107 0110 	add.w	r1, r7, #16
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	9300      	str	r3, [sp, #0]
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	f7ff ff67 	bl	800c2a4 <lwip_sock_make_addr>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	e000      	b.n	800c3dc <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800c3da:	2300      	movs	r3, #0
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3718      	adds	r7, #24
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800c3e4:	b590      	push	{r4, r7, lr}
 800c3e6:	b08d      	sub	sp, #52	; 0x34
 800c3e8:	af02      	add	r7, sp, #8
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	607a      	str	r2, [r7, #4]
 800c3f0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	689b      	ldr	r3, [r3, #8]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d10d      	bne.n	800c416 <lwip_recvfrom_udp_raw+0x32>
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dd09      	ble.n	800c416 <lwip_recvfrom_udp_raw+0x32>
 800c402:	4b5e      	ldr	r3, [pc, #376]	; (800c57c <lwip_recvfrom_udp_raw+0x198>)
 800c404:	f240 4249 	movw	r2, #1097	; 0x449
 800c408:	495d      	ldr	r1, [pc, #372]	; (800c580 <lwip_recvfrom_udp_raw+0x19c>)
 800c40a:	485e      	ldr	r0, [pc, #376]	; (800c584 <lwip_recvfrom_udp_raw+0x1a0>)
 800c40c:	f00c fcfe 	bl	8018e0c <iprintf>
 800c410:	f06f 030f 	mvn.w	r3, #15
 800c414:	e0ad      	b.n	800c572 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	f003 0308 	and.w	r3, r3, #8
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d003      	beq.n	800c428 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800c420:	2304      	movs	r3, #4
 800c422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c426:	e002      	b.n	800c42e <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800c428:	2300      	movs	r3, #0
 800c42a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	685b      	ldr	r3, [r3, #4]
 800c432:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d11e      	bne.n	800c478 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c442:	f107 0110 	add.w	r1, r7, #16
 800c446:	4618      	mov	r0, r3
 800c448:	f7fd fbf8 	bl	8009c3c <netconn_recv_udp_raw_netbuf_flags>
 800c44c:	4603      	mov	r3, r0
 800c44e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800c450:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d002      	beq.n	800c45e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800c458:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c45c:	e089      	b.n	800c572 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d106      	bne.n	800c472 <lwip_recvfrom_udp_raw+0x8e>
 800c464:	4b45      	ldr	r3, [pc, #276]	; (800c57c <lwip_recvfrom_udp_raw+0x198>)
 800c466:	f240 425e 	movw	r2, #1118	; 0x45e
 800c46a:	4947      	ldr	r1, [pc, #284]	; (800c588 <lwip_recvfrom_udp_raw+0x1a4>)
 800c46c:	4845      	ldr	r0, [pc, #276]	; (800c584 <lwip_recvfrom_udp_raw+0x1a0>)
 800c46e:	f00c fccd 	bl	8018e0c <iprintf>
    sock->lastdata.netbuf = buf;
 800c472:	693a      	ldr	r2, [r7, #16]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	891b      	ldrh	r3, [r3, #8]
 800c47e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c484:	2300      	movs	r3, #0
 800c486:	61fb      	str	r3, [r7, #28]
 800c488:	e029      	b.n	800c4de <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800c48a:	8b3a      	ldrh	r2, [r7, #24]
 800c48c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c48e:	1ad3      	subs	r3, r2, r3
 800c490:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	689a      	ldr	r2, [r3, #8]
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	00db      	lsls	r3, r3, #3
 800c49a:	4413      	add	r3, r2
 800c49c:	685a      	ldr	r2, [r3, #4]
 800c49e:	8afb      	ldrh	r3, [r7, #22]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d902      	bls.n	800c4aa <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800c4a4:	8afb      	ldrh	r3, [r7, #22]
 800c4a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c4a8:	e006      	b.n	800c4b8 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	689a      	ldr	r2, [r3, #8]
 800c4ae:	69fb      	ldr	r3, [r7, #28]
 800c4b0:	00db      	lsls	r3, r3, #3
 800c4b2:	4413      	add	r3, r2
 800c4b4:	685b      	ldr	r3, [r3, #4]
 800c4b6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	6818      	ldr	r0, [r3, #0]
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	689a      	ldr	r2, [r3, #8]
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	00db      	lsls	r3, r3, #3
 800c4c4:	4413      	add	r3, r2
 800c4c6:	6819      	ldr	r1, [r3, #0]
 800c4c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c4ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4cc:	f002 fe4a 	bl	800f164 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800c4d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c4d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4d4:	4413      	add	r3, r2
 800c4d6:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800c4d8:	69fb      	ldr	r3, [r7, #28]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	61fb      	str	r3, [r7, #28]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	69fa      	ldr	r2, [r7, #28]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	da03      	bge.n	800c4f0 <lwip_recvfrom_udp_raw+0x10c>
 800c4e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c4ea:	8b3b      	ldrh	r3, [r7, #24]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d3cc      	bcc.n	800c48a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d01a      	beq.n	800c52e <lwip_recvfrom_udp_raw+0x14a>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d016      	beq.n	800c52e <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d012      	beq.n	800c52e <lwip_recvfrom_udp_raw+0x14a>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00e      	beq.n	800c52e <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	6818      	ldr	r0, [r3, #0]
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	f103 0108 	add.w	r1, r3, #8
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	3304      	adds	r3, #4
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	4623      	mov	r3, r4
 800c52a:	f7ff febb 	bl	800c2a4 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	691b      	ldr	r3, [r3, #16]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d007      	beq.n	800c54c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800c540:	7d7b      	ldrb	r3, [r7, #21]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d102      	bne.n	800c54c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800c54c:	68bb      	ldr	r3, [r7, #8]
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	2b00      	cmp	r3, #0
 800c554:	d106      	bne.n	800c564 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2200      	movs	r2, #0
 800c55a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800c55c:	693b      	ldr	r3, [r7, #16]
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff f9a6 	bl	800b8b0 <netbuf_delete>
  }
  if (datagram_len) {
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d002      	beq.n	800c570 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	8b3a      	ldrh	r2, [r7, #24]
 800c56e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800c570:	2300      	movs	r3, #0
}
 800c572:	4618      	mov	r0, r3
 800c574:	372c      	adds	r7, #44	; 0x2c
 800c576:	46bd      	mov	sp, r7
 800c578:	bd90      	pop	{r4, r7, pc}
 800c57a:	bf00      	nop
 800c57c:	0801a8cc 	.word	0x0801a8cc
 800c580:	0801aa70 	.word	0x0801aa70
 800c584:	0801a920 	.word	0x0801a920
 800c588:	0801aa9c 	.word	0x0801aa9c

0800c58c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b096      	sub	sp, #88	; 0x58
 800c590:	af02      	add	r7, sp, #8
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
 800c598:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800c59a:	68f8      	ldr	r0, [r7, #12]
 800c59c:	f7ff fa58 	bl	800ba50 <get_socket>
 800c5a0:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800c5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d102      	bne.n	800c5ae <lwip_recvfrom+0x22>
    return -1;
 800c5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ac:	e078      	b.n	800c6a0 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c5ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c5b8:	2b10      	cmp	r3, #16
 800c5ba:	d112      	bne.n	800c5e2 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	68b9      	ldr	r1, [r7, #8]
 800c5c2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c5c4:	f7ff fd5e 	bl	800c084 <lwip_recv_tcp>
 800c5c8:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800c5ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5cc:	9301      	str	r3, [sp, #4]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	9300      	str	r3, [sp, #0]
 800c5d2:	4b35      	ldr	r3, [pc, #212]	; (800c6a8 <lwip_recvfrom+0x11c>)
 800c5d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c5d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c5d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c5da:	f7ff fed1 	bl	800c380 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800c5de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5e0:	e05e      	b.n	800c6a0 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800c5fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c5fe:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800c600:	2301      	movs	r3, #1
 800c602:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800c604:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c606:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800c608:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d002      	beq.n	800c614 <lwip_recvfrom+0x88>
 800c60e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	e000      	b.n	800c616 <lwip_recvfrom+0x8a>
 800c614:	2300      	movs	r3, #0
 800c616:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800c618:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800c61c:	f107 0214 	add.w	r2, r7, #20
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	460b      	mov	r3, r1
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c62a:	f7ff fedb 	bl	800c3e4 <lwip_recvfrom_udp_raw>
 800c62e:	4603      	mov	r3, r0
 800c630:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800c634:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d00e      	beq.n	800c65a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800c63c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff f917 	bl	800b874 <err_to_errno>
 800c646:	63f8      	str	r0, [r7, #60]	; 0x3c
 800c648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d002      	beq.n	800c654 <lwip_recvfrom+0xc8>
 800c64e:	4a17      	ldr	r2, [pc, #92]	; (800c6ac <lwip_recvfrom+0x120>)
 800c650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c652:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800c654:	f04f 33ff 	mov.w	r3, #4294967295
 800c658:	e022      	b.n	800c6a0 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800c65a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c65c:	461a      	mov	r2, r3
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4293      	cmp	r3, r2
 800c662:	bf28      	it	cs
 800c664:	4613      	movcs	r3, r2
 800c666:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d206      	bcs.n	800c67c <lwip_recvfrom+0xf0>
 800c66e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800c670:	461a      	mov	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4293      	cmp	r3, r2
 800c676:	bf28      	it	cs
 800c678:	4613      	movcs	r3, r2
 800c67a:	e001      	b.n	800c680 <lwip_recvfrom+0xf4>
 800c67c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c680:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800c682:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c684:	2b00      	cmp	r3, #0
 800c686:	d002      	beq.n	800c68e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800c688:	69ba      	ldr	r2, [r7, #24]
 800c68a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c68c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800c68e:	2300      	movs	r3, #0
 800c690:	643b      	str	r3, [r7, #64]	; 0x40
 800c692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c694:	2b00      	cmp	r3, #0
 800c696:	d002      	beq.n	800c69e <lwip_recvfrom+0x112>
 800c698:	4a04      	ldr	r2, [pc, #16]	; (800c6ac <lwip_recvfrom+0x120>)
 800c69a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c69c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800c69e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3750      	adds	r7, #80	; 0x50
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	0801aaa8 	.word	0x0801aaa8
 800c6ac:	2000bcc4 	.word	0x2000bcc4

0800c6b0 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08a      	sub	sp, #40	; 0x28
 800c6b4:	af02      	add	r7, sp, #8
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7ff f9c6 	bl	800ba50 <get_socket>
 800c6c4:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d102      	bne.n	800c6d2 <lwip_send+0x22>
    return -1;
 800c6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800c6d0:	e046      	b.n	800c760 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c6d2:	69fb      	ldr	r3, [r7, #28]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c6dc:	2b10      	cmp	r3, #16
 800c6de:	d00b      	beq.n	800c6f8 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	9301      	str	r3, [sp, #4]
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	68b9      	ldr	r1, [r7, #8]
 800c6ee:	68f8      	ldr	r0, [r7, #12]
 800c6f0:	f000 f83c 	bl	800c76c <lwip_sendto>
 800c6f4:	4603      	mov	r3, r0
 800c6f6:	e033      	b.n	800c760 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <lwip_send+0x56>
 800c702:	2203      	movs	r2, #3
 800c704:	e000      	b.n	800c708 <lwip_send+0x58>
 800c706:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	105b      	asrs	r3, r3, #1
 800c70c:	b25b      	sxtb	r3, r3
 800c70e:	f003 0304 	and.w	r3, r3, #4
 800c712:	b25b      	sxtb	r3, r3
 800c714:	4313      	orrs	r3, r2
 800c716:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800c718:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800c71a:	2300      	movs	r3, #0
 800c71c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	6818      	ldr	r0, [r3, #0]
 800c722:	7efa      	ldrb	r2, [r7, #27]
 800c724:	f107 0310 	add.w	r3, r7, #16
 800c728:	9300      	str	r3, [sp, #0]
 800c72a:	4613      	mov	r3, r2
 800c72c:	687a      	ldr	r2, [r7, #4]
 800c72e:	68b9      	ldr	r1, [r7, #8]
 800c730:	f7fd fade 	bl	8009cf0 <netconn_write_partly>
 800c734:	4603      	mov	r3, r0
 800c736:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800c738:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff f899 	bl	800b874 <err_to_errno>
 800c742:	6178      	str	r0, [r7, #20]
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d002      	beq.n	800c750 <lwip_send+0xa0>
 800c74a:	4a07      	ldr	r2, [pc, #28]	; (800c768 <lwip_send+0xb8>)
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800c750:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c754:	2b00      	cmp	r3, #0
 800c756:	d101      	bne.n	800c75c <lwip_send+0xac>
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	e001      	b.n	800c760 <lwip_send+0xb0>
 800c75c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c760:	4618      	mov	r0, r3
 800c762:	3720      	adds	r7, #32
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	2000bcc4 	.word	0x2000bcc4

0800c76c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b08e      	sub	sp, #56	; 0x38
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
 800c778:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800c77a:	68f8      	ldr	r0, [r7, #12]
 800c77c:	f7ff f968 	bl	800ba50 <get_socket>
 800c780:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800c782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c784:	2b00      	cmp	r3, #0
 800c786:	d102      	bne.n	800c78e <lwip_sendto+0x22>
    return -1;
 800c788:	f04f 33ff 	mov.w	r3, #4294967295
 800c78c:	e093      	b.n	800c8b6 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c798:	2b10      	cmp	r3, #16
 800c79a:	d107      	bne.n	800c7ac <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	68b9      	ldr	r1, [r7, #8]
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f7ff ff84 	bl	800c6b0 <lwip_send>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	e084      	b.n	800c8b6 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7b2:	d30a      	bcc.n	800c7ca <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800c7b4:	235a      	movs	r3, #90	; 0x5a
 800c7b6:	623b      	str	r3, [r7, #32]
 800c7b8:	6a3b      	ldr	r3, [r7, #32]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d002      	beq.n	800c7c4 <lwip_sendto+0x58>
 800c7be:	4a40      	ldr	r2, [pc, #256]	; (800c8c0 <lwip_sendto+0x154>)
 800c7c0:	6a3b      	ldr	r3, [r7, #32]
 800c7c2:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c7c8:	e075      	b.n	800c8b6 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800c7ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d102      	bne.n	800c7da <lwip_sendto+0x6e>
 800c7d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d023      	beq.n	800c822 <lwip_sendto+0xb6>
 800c7da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c7dc:	2b10      	cmp	r3, #16
 800c7de:	d10b      	bne.n	800c7f8 <lwip_sendto+0x8c>
 800c7e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d008      	beq.n	800c7f8 <lwip_sendto+0x8c>
 800c7e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7e8:	785b      	ldrb	r3, [r3, #1]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d104      	bne.n	800c7f8 <lwip_sendto+0x8c>
 800c7ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7f0:	f003 0303 	and.w	r3, r3, #3
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d014      	beq.n	800c822 <lwip_sendto+0xb6>
 800c7f8:	4b32      	ldr	r3, [pc, #200]	; (800c8c4 <lwip_sendto+0x158>)
 800c7fa:	f240 6252 	movw	r2, #1618	; 0x652
 800c7fe:	4932      	ldr	r1, [pc, #200]	; (800c8c8 <lwip_sendto+0x15c>)
 800c800:	4832      	ldr	r0, [pc, #200]	; (800c8cc <lwip_sendto+0x160>)
 800c802:	f00c fb03 	bl	8018e0c <iprintf>
 800c806:	f06f 000f 	mvn.w	r0, #15
 800c80a:	f7ff f833 	bl	800b874 <err_to_errno>
 800c80e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	2b00      	cmp	r3, #0
 800c814:	d002      	beq.n	800c81c <lwip_sendto+0xb0>
 800c816:	4a2a      	ldr	r2, [pc, #168]	; (800c8c0 <lwip_sendto+0x154>)
 800c818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c81a:	6013      	str	r3, [r2, #0]
 800c81c:	f04f 33ff 	mov.w	r3, #4294967295
 800c820:	e049      	b.n	800c8b6 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800c822:	2300      	movs	r3, #0
 800c824:	617b      	str	r3, [r7, #20]
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800c82a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d00a      	beq.n	800c846 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800c830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	61bb      	str	r3, [r7, #24]
 800c836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c838:	885b      	ldrh	r3, [r3, #2]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 fbe4 	bl	800d008 <lwip_htons>
 800c840:	4603      	mov	r3, r0
 800c842:	86bb      	strh	r3, [r7, #52]	; 0x34
 800c844:	e003      	b.n	800c84e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800c846:	2300      	movs	r3, #0
 800c848:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800c84a:	2300      	movs	r3, #0
 800c84c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800c84e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c850:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800c852:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c854:	f107 0310 	add.w	r3, r7, #16
 800c858:	68b9      	ldr	r1, [r7, #8]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f7ff f870 	bl	800b940 <netbuf_ref>
 800c860:	4603      	mov	r3, r0
 800c862:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800c866:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10a      	bne.n	800c884 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f107 0210 	add.w	r2, r7, #16
 800c876:	4611      	mov	r1, r2
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fd fa0b 	bl	8009c94 <netconn_send>
 800c87e:	4603      	mov	r3, r0
 800c880:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800c884:	f107 0310 	add.w	r3, r7, #16
 800c888:	4618      	mov	r0, r3
 800c88a:	f7ff f831 	bl	800b8f0 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800c88e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c892:	4618      	mov	r0, r3
 800c894:	f7fe ffee 	bl	800b874 <err_to_errno>
 800c898:	6278      	str	r0, [r7, #36]	; 0x24
 800c89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d002      	beq.n	800c8a6 <lwip_sendto+0x13a>
 800c8a0:	4a07      	ldr	r2, [pc, #28]	; (800c8c0 <lwip_sendto+0x154>)
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800c8a6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d101      	bne.n	800c8b2 <lwip_sendto+0x146>
 800c8ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c8b0:	e001      	b.n	800c8b6 <lwip_sendto+0x14a>
 800c8b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3738      	adds	r7, #56	; 0x38
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	bd80      	pop	{r7, pc}
 800c8be:	bf00      	nop
 800c8c0:	2000bcc4 	.word	0x2000bcc4
 800c8c4:	0801a8cc 	.word	0x0801a8cc
 800c8c8:	0801abac 	.word	0x0801abac
 800c8cc:	0801a920 	.word	0x0801a920

0800c8d0 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b086      	sub	sp, #24
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	60f8      	str	r0, [r7, #12]
 800c8d8:	60b9      	str	r1, [r7, #8]
 800c8da:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	2b03      	cmp	r3, #3
 800c8e0:	d009      	beq.n	800c8f6 <lwip_socket+0x26>
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	dc23      	bgt.n	800c930 <lwip_socket+0x60>
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d019      	beq.n	800c922 <lwip_socket+0x52>
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	2b02      	cmp	r3, #2
 800c8f2:	d009      	beq.n	800c908 <lwip_socket+0x38>
 800c8f4:	e01c      	b.n	800c930 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	b2db      	uxtb	r3, r3
 800c8fa:	4a22      	ldr	r2, [pc, #136]	; (800c984 <lwip_socket+0xb4>)
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	2040      	movs	r0, #64	; 0x40
 800c900:	f7fc fdca 	bl	8009498 <netconn_new_with_proto_and_callback>
 800c904:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c906:	e019      	b.n	800c93c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2b88      	cmp	r3, #136	; 0x88
 800c90c:	d101      	bne.n	800c912 <lwip_socket+0x42>
 800c90e:	2321      	movs	r3, #33	; 0x21
 800c910:	e000      	b.n	800c914 <lwip_socket+0x44>
 800c912:	2320      	movs	r3, #32
 800c914:	4a1b      	ldr	r2, [pc, #108]	; (800c984 <lwip_socket+0xb4>)
 800c916:	2100      	movs	r1, #0
 800c918:	4618      	mov	r0, r3
 800c91a:	f7fc fdbd 	bl	8009498 <netconn_new_with_proto_and_callback>
 800c91e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c920:	e00c      	b.n	800c93c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800c922:	4a18      	ldr	r2, [pc, #96]	; (800c984 <lwip_socket+0xb4>)
 800c924:	2100      	movs	r1, #0
 800c926:	2010      	movs	r0, #16
 800c928:	f7fc fdb6 	bl	8009498 <netconn_new_with_proto_and_callback>
 800c92c:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c92e:	e005      	b.n	800c93c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800c930:	4b15      	ldr	r3, [pc, #84]	; (800c988 <lwip_socket+0xb8>)
 800c932:	2216      	movs	r2, #22
 800c934:	601a      	str	r2, [r3, #0]
      return -1;
 800c936:	f04f 33ff 	mov.w	r3, #4294967295
 800c93a:	e01e      	b.n	800c97a <lwip_socket+0xaa>
  }

  if (!conn) {
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d105      	bne.n	800c94e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800c942:	4b11      	ldr	r3, [pc, #68]	; (800c988 <lwip_socket+0xb8>)
 800c944:	2269      	movs	r2, #105	; 0x69
 800c946:	601a      	str	r2, [r3, #0]
    return -1;
 800c948:	f04f 33ff 	mov.w	r3, #4294967295
 800c94c:	e015      	b.n	800c97a <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800c94e:	2100      	movs	r1, #0
 800c950:	6978      	ldr	r0, [r7, #20]
 800c952:	f7ff f895 	bl	800ba80 <alloc_socket>
 800c956:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c95e:	d108      	bne.n	800c972 <lwip_socket+0xa2>
    netconn_delete(conn);
 800c960:	6978      	ldr	r0, [r7, #20]
 800c962:	f7fc fe37 	bl	80095d4 <netconn_delete>
    set_errno(ENFILE);
 800c966:	4b08      	ldr	r3, [pc, #32]	; (800c988 <lwip_socket+0xb8>)
 800c968:	2217      	movs	r2, #23
 800c96a:	601a      	str	r2, [r3, #0]
    return -1;
 800c96c:	f04f 33ff 	mov.w	r3, #4294967295
 800c970:	e003      	b.n	800c97a <lwip_socket+0xaa>
  }
  conn->socket = i;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	693a      	ldr	r2, [r7, #16]
 800c976:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800c978:	693b      	ldr	r3, [r7, #16]
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3718      	adds	r7, #24
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	0800ca15 	.word	0x0800ca15
 800c988:	2000bcc4 	.word	0x2000bcc4

0800c98c <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b087      	sub	sp, #28
 800c990:	af00      	add	r7, sp, #0
 800c992:	60f8      	str	r0, [r7, #12]
 800c994:	60b9      	str	r1, [r7, #8]
 800c996:	607a      	str	r2, [r7, #4]
 800c998:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c99a:	2300      	movs	r3, #0
 800c99c:	617b      	str	r3, [r7, #20]
 800c99e:	e02c      	b.n	800c9fa <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	695a      	ldr	r2, [r3, #20]
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	00db      	lsls	r3, r3, #3
 800c9a8:	4413      	add	r3, r2
 800c9aa:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d11e      	bne.n	800c9f4 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d009      	beq.n	800c9d0 <lwip_poll_should_wake+0x44>
 800c9bc:	693b      	ldr	r3, [r7, #16]
 800c9be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	f003 0301 	and.w	r3, r3, #1
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <lwip_poll_should_wake+0x44>
        return 1;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e01a      	b.n	800ca06 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d009      	beq.n	800c9ea <lwip_poll_should_wake+0x5e>
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	f003 0302 	and.w	r3, r3, #2
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d001      	beq.n	800c9ea <lwip_poll_should_wake+0x5e>
        return 1;
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	e00d      	b.n	800ca06 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800c9ea:	6a3b      	ldr	r3, [r7, #32]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d001      	beq.n	800c9f4 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e008      	b.n	800ca06 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	3301      	adds	r3, #1
 800c9f8:	617b      	str	r3, [r7, #20]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	699b      	ldr	r3, [r3, #24]
 800c9fe:	697a      	ldr	r2, [r7, #20]
 800ca00:	429a      	cmp	r2, r3
 800ca02:	d3cd      	bcc.n	800c9a0 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800ca04:	2300      	movs	r3, #0
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	371c      	adds	r7, #28
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca10:	4770      	bx	lr
	...

0800ca14 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b08a      	sub	sp, #40	; 0x28
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	70fb      	strb	r3, [r7, #3]
 800ca20:	4613      	mov	r3, r2
 800ca22:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	f000 80a4 	beq.w	800cb74 <event_callback+0x160>
    s = conn->socket;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	699b      	ldr	r3, [r3, #24]
 800ca30:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800ca32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	da18      	bge.n	800ca6a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800ca38:	f00c f8d0 	bl	8018bdc <sys_arch_protect>
 800ca3c:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	699b      	ldr	r3, [r3, #24]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	da0b      	bge.n	800ca5e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800ca46:	78fb      	ldrb	r3, [r7, #3]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d104      	bne.n	800ca56 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	699b      	ldr	r3, [r3, #24]
 800ca50:	1e5a      	subs	r2, r3, #1
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800ca56:	69f8      	ldr	r0, [r7, #28]
 800ca58:	f00c f8ce 	bl	8018bf8 <sys_arch_unprotect>
        return;
 800ca5c:	e08d      	b.n	800cb7a <event_callback+0x166>
      }
      s = conn->socket;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	699b      	ldr	r3, [r3, #24]
 800ca62:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800ca64:	69f8      	ldr	r0, [r7, #28]
 800ca66:	f00c f8c7 	bl	8018bf8 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800ca6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca6c:	f7fe fff0 	bl	800ba50 <get_socket>
 800ca70:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d07f      	beq.n	800cb78 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800ca7c:	f00c f8ae 	bl	8018bdc <sys_arch_protect>
 800ca80:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800ca82:	78fb      	ldrb	r3, [r7, #3]
 800ca84:	2b04      	cmp	r3, #4
 800ca86:	d83e      	bhi.n	800cb06 <event_callback+0xf2>
 800ca88:	a201      	add	r2, pc, #4	; (adr r2, 800ca90 <event_callback+0x7c>)
 800ca8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca8e:	bf00      	nop
 800ca90:	0800caa5 	.word	0x0800caa5
 800ca94:	0800cac7 	.word	0x0800cac7
 800ca98:	0800cadf 	.word	0x0800cadf
 800ca9c:	0800caf3 	.word	0x0800caf3
 800caa0:	0800caff 	.word	0x0800caff
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800caa4:	69bb      	ldr	r3, [r7, #24]
 800caa6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800caaa:	b29b      	uxth	r3, r3
 800caac:	3301      	adds	r3, #1
 800caae:	b29b      	uxth	r3, r3
 800cab0:	b21a      	sxth	r2, r3
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800cab6:	69bb      	ldr	r3, [r7, #24]
 800cab8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	dd2a      	ble.n	800cb16 <event_callback+0x102>
        check_waiters = 0;
 800cac0:	2300      	movs	r3, #0
 800cac2:	623b      	str	r3, [r7, #32]
      }
      break;
 800cac4:	e027      	b.n	800cb16 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cacc:	b29b      	uxth	r3, r3
 800cace:	3b01      	subs	r3, #1
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	b21a      	sxth	r2, r3
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800cad8:	2300      	movs	r3, #0
 800cada:	623b      	str	r3, [r7, #32]
      break;
 800cadc:	e01c      	b.n	800cb18 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800cade:	69bb      	ldr	r3, [r7, #24]
 800cae0:	895b      	ldrh	r3, [r3, #10]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d001      	beq.n	800caea <event_callback+0xd6>
        check_waiters = 0;
 800cae6:	2300      	movs	r3, #0
 800cae8:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	2201      	movs	r2, #1
 800caee:	815a      	strh	r2, [r3, #10]
      break;
 800caf0:	e012      	b.n	800cb18 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800caf2:	69bb      	ldr	r3, [r7, #24]
 800caf4:	2200      	movs	r2, #0
 800caf6:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800caf8:	2300      	movs	r3, #0
 800cafa:	623b      	str	r3, [r7, #32]
      break;
 800cafc:	e00c      	b.n	800cb18 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	2201      	movs	r2, #1
 800cb02:	819a      	strh	r2, [r3, #12]
      break;
 800cb04:	e008      	b.n	800cb18 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800cb06:	4b1e      	ldr	r3, [pc, #120]	; (800cb80 <event_callback+0x16c>)
 800cb08:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800cb0c:	491d      	ldr	r1, [pc, #116]	; (800cb84 <event_callback+0x170>)
 800cb0e:	481e      	ldr	r0, [pc, #120]	; (800cb88 <event_callback+0x174>)
 800cb10:	f00c f97c 	bl	8018e0c <iprintf>
      break;
 800cb14:	e000      	b.n	800cb18 <event_callback+0x104>
      break;
 800cb16:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800cb18:	69bb      	ldr	r3, [r7, #24]
 800cb1a:	7b9b      	ldrb	r3, [r3, #14]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d025      	beq.n	800cb6c <event_callback+0x158>
 800cb20:	6a3b      	ldr	r3, [r7, #32]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d022      	beq.n	800cb6c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800cb26:	69bb      	ldr	r3, [r7, #24]
 800cb28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	bfcc      	ite	gt
 800cb30:	2301      	movgt	r3, #1
 800cb32:	2300      	movle	r3, #0
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800cb38:	69bb      	ldr	r3, [r7, #24]
 800cb3a:	895b      	ldrh	r3, [r3, #10]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	bf14      	ite	ne
 800cb40:	2301      	movne	r3, #1
 800cb42:	2300      	moveq	r3, #0
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800cb48:	69bb      	ldr	r3, [r7, #24]
 800cb4a:	899b      	ldrh	r3, [r3, #12]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	bf14      	ite	ne
 800cb50:	2301      	movne	r3, #1
 800cb52:	2300      	moveq	r3, #0
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800cb58:	69f8      	ldr	r0, [r7, #28]
 800cb5a:	f00c f84d 	bl	8018bf8 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	6979      	ldr	r1, [r7, #20]
 800cb64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cb66:	f000 f811 	bl	800cb8c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800cb6a:	e006      	b.n	800cb7a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800cb6c:	69f8      	ldr	r0, [r7, #28]
 800cb6e:	f00c f843 	bl	8018bf8 <sys_arch_unprotect>
 800cb72:	e002      	b.n	800cb7a <event_callback+0x166>
    return;
 800cb74:	bf00      	nop
 800cb76:	e000      	b.n	800cb7a <event_callback+0x166>
      return;
 800cb78:	bf00      	nop
  }
  done_socket(sock);
}
 800cb7a:	3728      	adds	r7, #40	; 0x28
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	0801a8cc 	.word	0x0801a8cc
 800cb84:	0801ac48 	.word	0x0801ac48
 800cb88:	0801a920 	.word	0x0801a920

0800cb8c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b088      	sub	sp, #32
 800cb90:	af02      	add	r7, sp, #8
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
 800cb98:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800cb9a:	4b3e      	ldr	r3, [pc, #248]	; (800cc94 <select_check_waiters+0x108>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	617b      	str	r3, [r7, #20]
 800cba0:	e06f      	b.n	800cc82 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800cba2:	697b      	ldr	r3, [r7, #20]
 800cba4:	69db      	ldr	r3, [r3, #28]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d168      	bne.n	800cc7c <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	695b      	ldr	r3, [r3, #20]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d009      	beq.n	800cbca <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	68ba      	ldr	r2, [r7, #8]
 800cbbe:	68f9      	ldr	r1, [r7, #12]
 800cbc0:	6978      	ldr	r0, [r7, #20]
 800cbc2:	f7ff fee3 	bl	800c98c <lwip_poll_should_wake>
 800cbc6:	6138      	str	r0, [r7, #16]
 800cbc8:	e04d      	b.n	800cc66 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d014      	beq.n	800cbfa <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d010      	beq.n	800cbfa <select_check_waiters+0x6e>
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	68fa      	ldr	r2, [r7, #12]
 800cbde:	0952      	lsrs	r2, r2, #5
 800cbe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	f002 021f 	and.w	r2, r2, #31
 800cbea:	2101      	movs	r1, #1
 800cbec:	fa01 f202 	lsl.w	r2, r1, r2
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d001      	beq.n	800cbfa <select_check_waiters+0x6e>
            do_signal = 1;
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d017      	beq.n	800cc30 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d114      	bne.n	800cc30 <select_check_waiters+0xa4>
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d010      	beq.n	800cc30 <select_check_waiters+0xa4>
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	68db      	ldr	r3, [r3, #12]
 800cc12:	68fa      	ldr	r2, [r7, #12]
 800cc14:	0952      	lsrs	r2, r2, #5
 800cc16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc1a:	68fa      	ldr	r2, [r7, #12]
 800cc1c:	f002 021f 	and.w	r2, r2, #31
 800cc20:	2101      	movs	r1, #1
 800cc22:	fa01 f202 	lsl.w	r2, r1, r2
 800cc26:	4013      	ands	r3, r2
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <select_check_waiters+0xa4>
            do_signal = 1;
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800cc30:	683b      	ldr	r3, [r7, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d017      	beq.n	800cc66 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d114      	bne.n	800cc66 <select_check_waiters+0xda>
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	691b      	ldr	r3, [r3, #16]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d010      	beq.n	800cc66 <select_check_waiters+0xda>
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	0952      	lsrs	r2, r2, #5
 800cc4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc50:	68fa      	ldr	r2, [r7, #12]
 800cc52:	f002 021f 	and.w	r2, r2, #31
 800cc56:	2101      	movs	r1, #1
 800cc58:	fa01 f202 	lsl.w	r2, r1, r2
 800cc5c:	4013      	ands	r3, r2
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d001      	beq.n	800cc66 <select_check_waiters+0xda>
            do_signal = 1;
 800cc62:	2301      	movs	r3, #1
 800cc64:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d007      	beq.n	800cc7c <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800cc6c:	697b      	ldr	r3, [r7, #20]
 800cc6e:	2201      	movs	r2, #1
 800cc70:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	3320      	adds	r3, #32
 800cc76:	4618      	mov	r0, r3
 800cc78:	f00b ff1a 	bl	8018ab0 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	617b      	str	r3, [r7, #20]
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d18c      	bne.n	800cba2 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800cc88:	bf00      	nop
 800cc8a:	bf00      	nop
 800cc8c:	3718      	adds	r7, #24
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	bd80      	pop	{r7, pc}
 800cc92:	bf00      	nop
 800cc94:	200049f8 	.word	0x200049f8

0800cc98 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800cca2:	f008 fe21 	bl	80158e8 <sys_timeouts_sleeptime>
 800cca6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccae:	d10b      	bne.n	800ccc8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ccb0:	4813      	ldr	r0, [pc, #76]	; (800cd00 <tcpip_timeouts_mbox_fetch+0x68>)
 800ccb2:	f00b ff66 	bl	8018b82 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	6839      	ldr	r1, [r7, #0]
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f00b fe3c 	bl	8018938 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ccc0:	480f      	ldr	r0, [pc, #60]	; (800cd00 <tcpip_timeouts_mbox_fetch+0x68>)
 800ccc2:	f00b ff4f 	bl	8018b64 <sys_mutex_lock>
    return;
 800ccc6:	e018      	b.n	800ccfa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d102      	bne.n	800ccd4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ccce:	f008 fdd1 	bl	8015874 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ccd2:	e7e6      	b.n	800cca2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ccd4:	480a      	ldr	r0, [pc, #40]	; (800cd00 <tcpip_timeouts_mbox_fetch+0x68>)
 800ccd6:	f00b ff54 	bl	8018b82 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ccda:	68fa      	ldr	r2, [r7, #12]
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f00b fe2a 	bl	8018938 <sys_arch_mbox_fetch>
 800cce4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800cce6:	4806      	ldr	r0, [pc, #24]	; (800cd00 <tcpip_timeouts_mbox_fetch+0x68>)
 800cce8:	f00b ff3c 	bl	8018b64 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ccec:	68bb      	ldr	r3, [r7, #8]
 800ccee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccf2:	d102      	bne.n	800ccfa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ccf4:	f008 fdbe 	bl	8015874 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ccf8:	e7d3      	b.n	800cca2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}
 800cd00:	20008448 	.word	0x20008448

0800cd04 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800cd0c:	4810      	ldr	r0, [pc, #64]	; (800cd50 <tcpip_thread+0x4c>)
 800cd0e:	f00b ff29 	bl	8018b64 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800cd12:	4b10      	ldr	r3, [pc, #64]	; (800cd54 <tcpip_thread+0x50>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d005      	beq.n	800cd26 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800cd1a:	4b0e      	ldr	r3, [pc, #56]	; (800cd54 <tcpip_thread+0x50>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	4a0e      	ldr	r2, [pc, #56]	; (800cd58 <tcpip_thread+0x54>)
 800cd20:	6812      	ldr	r2, [r2, #0]
 800cd22:	4610      	mov	r0, r2
 800cd24:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cd26:	f107 030c 	add.w	r3, r7, #12
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	480b      	ldr	r0, [pc, #44]	; (800cd5c <tcpip_thread+0x58>)
 800cd2e:	f7ff ffb3 	bl	800cc98 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d106      	bne.n	800cd46 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cd38:	4b09      	ldr	r3, [pc, #36]	; (800cd60 <tcpip_thread+0x5c>)
 800cd3a:	2291      	movs	r2, #145	; 0x91
 800cd3c:	4909      	ldr	r1, [pc, #36]	; (800cd64 <tcpip_thread+0x60>)
 800cd3e:	480a      	ldr	r0, [pc, #40]	; (800cd68 <tcpip_thread+0x64>)
 800cd40:	f00c f864 	bl	8018e0c <iprintf>
      continue;
 800cd44:	e003      	b.n	800cd4e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f000 f80f 	bl	800cd6c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800cd4e:	e7ea      	b.n	800cd26 <tcpip_thread+0x22>
 800cd50:	20008448 	.word	0x20008448
 800cd54:	200049fc 	.word	0x200049fc
 800cd58:	20004a00 	.word	0x20004a00
 800cd5c:	20004a04 	.word	0x20004a04
 800cd60:	0801ac9c 	.word	0x0801ac9c
 800cd64:	0801accc 	.word	0x0801accc
 800cd68:	0801acec 	.word	0x0801acec

0800cd6c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	2b02      	cmp	r3, #2
 800cd7a:	d026      	beq.n	800cdca <tcpip_thread_handle_msg+0x5e>
 800cd7c:	2b02      	cmp	r3, #2
 800cd7e:	dc2b      	bgt.n	800cdd8 <tcpip_thread_handle_msg+0x6c>
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d002      	beq.n	800cd8a <tcpip_thread_handle_msg+0x1e>
 800cd84:	2b01      	cmp	r3, #1
 800cd86:	d015      	beq.n	800cdb4 <tcpip_thread_handle_msg+0x48>
 800cd88:	e026      	b.n	800cdd8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	68db      	ldr	r3, [r3, #12]
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	6850      	ldr	r0, [r2, #4]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	6892      	ldr	r2, [r2, #8]
 800cd96:	4611      	mov	r1, r2
 800cd98:	4798      	blx	r3
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d004      	beq.n	800cdaa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f001 ffd7 	bl	800ed58 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800cdaa:	6879      	ldr	r1, [r7, #4]
 800cdac:	2009      	movs	r0, #9
 800cdae:	f001 f8fd 	bl	800dfac <memp_free>
      break;
 800cdb2:	e018      	b.n	800cde6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	6892      	ldr	r2, [r2, #8]
 800cdbc:	4610      	mov	r0, r2
 800cdbe:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800cdc0:	6879      	ldr	r1, [r7, #4]
 800cdc2:	2008      	movs	r0, #8
 800cdc4:	f001 f8f2 	bl	800dfac <memp_free>
      break;
 800cdc8:	e00d      	b.n	800cde6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	685b      	ldr	r3, [r3, #4]
 800cdce:	687a      	ldr	r2, [r7, #4]
 800cdd0:	6892      	ldr	r2, [r2, #8]
 800cdd2:	4610      	mov	r0, r2
 800cdd4:	4798      	blx	r3
      break;
 800cdd6:	e006      	b.n	800cde6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800cdd8:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <tcpip_thread_handle_msg+0x84>)
 800cdda:	22cf      	movs	r2, #207	; 0xcf
 800cddc:	4905      	ldr	r1, [pc, #20]	; (800cdf4 <tcpip_thread_handle_msg+0x88>)
 800cdde:	4806      	ldr	r0, [pc, #24]	; (800cdf8 <tcpip_thread_handle_msg+0x8c>)
 800cde0:	f00c f814 	bl	8018e0c <iprintf>
      break;
 800cde4:	bf00      	nop
  }
}
 800cde6:	bf00      	nop
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	0801ac9c 	.word	0x0801ac9c
 800cdf4:	0801accc 	.word	0x0801accc
 800cdf8:	0801acec 	.word	0x0801acec

0800cdfc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ce08:	481a      	ldr	r0, [pc, #104]	; (800ce74 <tcpip_inpkt+0x78>)
 800ce0a:	f00b fddd 	bl	80189c8 <sys_mbox_valid>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d105      	bne.n	800ce20 <tcpip_inpkt+0x24>
 800ce14:	4b18      	ldr	r3, [pc, #96]	; (800ce78 <tcpip_inpkt+0x7c>)
 800ce16:	22fc      	movs	r2, #252	; 0xfc
 800ce18:	4918      	ldr	r1, [pc, #96]	; (800ce7c <tcpip_inpkt+0x80>)
 800ce1a:	4819      	ldr	r0, [pc, #100]	; (800ce80 <tcpip_inpkt+0x84>)
 800ce1c:	f00b fff6 	bl	8018e0c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ce20:	2009      	movs	r0, #9
 800ce22:	f001 f871 	bl	800df08 <memp_malloc>
 800ce26:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d102      	bne.n	800ce34 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ce2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce32:	e01a      	b.n	800ce6a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	2200      	movs	r2, #0
 800ce38:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ce3a:	697b      	ldr	r3, [r7, #20]
 800ce3c:	68fa      	ldr	r2, [r7, #12]
 800ce3e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	68ba      	ldr	r2, [r7, #8]
 800ce44:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ce4c:	6979      	ldr	r1, [r7, #20]
 800ce4e:	4809      	ldr	r0, [pc, #36]	; (800ce74 <tcpip_inpkt+0x78>)
 800ce50:	f00b fd58 	bl	8018904 <sys_mbox_trypost>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d006      	beq.n	800ce68 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ce5a:	6979      	ldr	r1, [r7, #20]
 800ce5c:	2009      	movs	r0, #9
 800ce5e:	f001 f8a5 	bl	800dfac <memp_free>
    return ERR_MEM;
 800ce62:	f04f 33ff 	mov.w	r3, #4294967295
 800ce66:	e000      	b.n	800ce6a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ce68:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3718      	adds	r7, #24
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	20004a04 	.word	0x20004a04
 800ce78:	0801ac9c 	.word	0x0801ac9c
 800ce7c:	0801ad14 	.word	0x0801ad14
 800ce80:	0801acec 	.word	0x0801acec

0800ce84 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
 800ce8c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce94:	f003 0318 	and.w	r3, r3, #24
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d006      	beq.n	800ceaa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ce9c:	4a08      	ldr	r2, [pc, #32]	; (800cec0 <tcpip_input+0x3c>)
 800ce9e:	6839      	ldr	r1, [r7, #0]
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7ff ffab 	bl	800cdfc <tcpip_inpkt>
 800cea6:	4603      	mov	r3, r0
 800cea8:	e005      	b.n	800ceb6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ceaa:	4a06      	ldr	r2, [pc, #24]	; (800cec4 <tcpip_input+0x40>)
 800ceac:	6839      	ldr	r1, [r7, #0]
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f7ff ffa4 	bl	800cdfc <tcpip_inpkt>
 800ceb4:	4603      	mov	r3, r0
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3708      	adds	r7, #8
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}
 800cebe:	bf00      	nop
 800cec0:	08018701 	.word	0x08018701
 800cec4:	08017615 	.word	0x08017615

0800cec8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b084      	sub	sp, #16
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ced2:	4819      	ldr	r0, [pc, #100]	; (800cf38 <tcpip_try_callback+0x70>)
 800ced4:	f00b fd78 	bl	80189c8 <sys_mbox_valid>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d106      	bne.n	800ceec <tcpip_try_callback+0x24>
 800cede:	4b17      	ldr	r3, [pc, #92]	; (800cf3c <tcpip_try_callback+0x74>)
 800cee0:	f240 125d 	movw	r2, #349	; 0x15d
 800cee4:	4916      	ldr	r1, [pc, #88]	; (800cf40 <tcpip_try_callback+0x78>)
 800cee6:	4817      	ldr	r0, [pc, #92]	; (800cf44 <tcpip_try_callback+0x7c>)
 800cee8:	f00b ff90 	bl	8018e0c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ceec:	2008      	movs	r0, #8
 800ceee:	f001 f80b 	bl	800df08 <memp_malloc>
 800cef2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d102      	bne.n	800cf00 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800cefa:	f04f 33ff 	mov.w	r3, #4294967295
 800cefe:	e017      	b.n	800cf30 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2201      	movs	r2, #1
 800cf04:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	687a      	ldr	r2, [r7, #4]
 800cf0a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	683a      	ldr	r2, [r7, #0]
 800cf10:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800cf12:	68f9      	ldr	r1, [r7, #12]
 800cf14:	4808      	ldr	r0, [pc, #32]	; (800cf38 <tcpip_try_callback+0x70>)
 800cf16:	f00b fcf5 	bl	8018904 <sys_mbox_trypost>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d006      	beq.n	800cf2e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800cf20:	68f9      	ldr	r1, [r7, #12]
 800cf22:	2008      	movs	r0, #8
 800cf24:	f001 f842 	bl	800dfac <memp_free>
    return ERR_MEM;
 800cf28:	f04f 33ff 	mov.w	r3, #4294967295
 800cf2c:	e000      	b.n	800cf30 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	20004a04 	.word	0x20004a04
 800cf3c:	0801ac9c 	.word	0x0801ac9c
 800cf40:	0801ad14 	.word	0x0801ad14
 800cf44:	0801acec 	.word	0x0801acec

0800cf48 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	60f8      	str	r0, [r7, #12]
 800cf50:	60b9      	str	r1, [r7, #8]
 800cf52:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800cf54:	4806      	ldr	r0, [pc, #24]	; (800cf70 <tcpip_send_msg_wait_sem+0x28>)
 800cf56:	f00b fe05 	bl	8018b64 <sys_mutex_lock>
  fn(apimsg);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	68b8      	ldr	r0, [r7, #8]
 800cf5e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800cf60:	4803      	ldr	r0, [pc, #12]	; (800cf70 <tcpip_send_msg_wait_sem+0x28>)
 800cf62:	f00b fe0e 	bl	8018b82 <sys_mutex_unlock>
  return ERR_OK;
 800cf66:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3710      	adds	r7, #16
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	20008448 	.word	0x20008448

0800cf74 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af02      	add	r7, sp, #8
 800cf7a:	6078      	str	r0, [r7, #4]
 800cf7c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800cf7e:	f000 fb3a 	bl	800d5f6 <lwip_init>

  tcpip_init_done = initfunc;
 800cf82:	4a17      	ldr	r2, [pc, #92]	; (800cfe0 <tcpip_init+0x6c>)
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800cf88:	4a16      	ldr	r2, [pc, #88]	; (800cfe4 <tcpip_init+0x70>)
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800cf8e:	2106      	movs	r1, #6
 800cf90:	4815      	ldr	r0, [pc, #84]	; (800cfe8 <tcpip_init+0x74>)
 800cf92:	f00b fc8b 	bl	80188ac <sys_mbox_new>
 800cf96:	4603      	mov	r3, r0
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d006      	beq.n	800cfaa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800cf9c:	4b13      	ldr	r3, [pc, #76]	; (800cfec <tcpip_init+0x78>)
 800cf9e:	f240 2261 	movw	r2, #609	; 0x261
 800cfa2:	4913      	ldr	r1, [pc, #76]	; (800cff0 <tcpip_init+0x7c>)
 800cfa4:	4813      	ldr	r0, [pc, #76]	; (800cff4 <tcpip_init+0x80>)
 800cfa6:	f00b ff31 	bl	8018e0c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800cfaa:	4813      	ldr	r0, [pc, #76]	; (800cff8 <tcpip_init+0x84>)
 800cfac:	f00b fdc4 	bl	8018b38 <sys_mutex_new>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d006      	beq.n	800cfc4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800cfb6:	4b0d      	ldr	r3, [pc, #52]	; (800cfec <tcpip_init+0x78>)
 800cfb8:	f240 2265 	movw	r2, #613	; 0x265
 800cfbc:	490f      	ldr	r1, [pc, #60]	; (800cffc <tcpip_init+0x88>)
 800cfbe:	480d      	ldr	r0, [pc, #52]	; (800cff4 <tcpip_init+0x80>)
 800cfc0:	f00b ff24 	bl	8018e0c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800cfc4:	2318      	movs	r3, #24
 800cfc6:	9300      	str	r3, [sp, #0]
 800cfc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cfcc:	2200      	movs	r2, #0
 800cfce:	490c      	ldr	r1, [pc, #48]	; (800d000 <tcpip_init+0x8c>)
 800cfd0:	480c      	ldr	r0, [pc, #48]	; (800d004 <tcpip_init+0x90>)
 800cfd2:	f00b fde3 	bl	8018b9c <sys_thread_new>
}
 800cfd6:	bf00      	nop
 800cfd8:	3708      	adds	r7, #8
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	bd80      	pop	{r7, pc}
 800cfde:	bf00      	nop
 800cfe0:	200049fc 	.word	0x200049fc
 800cfe4:	20004a00 	.word	0x20004a00
 800cfe8:	20004a04 	.word	0x20004a04
 800cfec:	0801ac9c 	.word	0x0801ac9c
 800cff0:	0801ad24 	.word	0x0801ad24
 800cff4:	0801acec 	.word	0x0801acec
 800cff8:	20008448 	.word	0x20008448
 800cffc:	0801ad48 	.word	0x0801ad48
 800d000:	0800cd05 	.word	0x0800cd05
 800d004:	0801ad6c 	.word	0x0801ad6c

0800d008 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	4603      	mov	r3, r0
 800d010:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d012:	88fb      	ldrh	r3, [r7, #6]
 800d014:	021b      	lsls	r3, r3, #8
 800d016:	b21a      	sxth	r2, r3
 800d018:	88fb      	ldrh	r3, [r7, #6]
 800d01a:	0a1b      	lsrs	r3, r3, #8
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	b21b      	sxth	r3, r3
 800d020:	4313      	orrs	r3, r2
 800d022:	b21b      	sxth	r3, r3
 800d024:	b29b      	uxth	r3, r3
}
 800d026:	4618      	mov	r0, r3
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d032:	b480      	push	{r7}
 800d034:	b083      	sub	sp, #12
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	061a      	lsls	r2, r3, #24
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	021b      	lsls	r3, r3, #8
 800d042:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d046:	431a      	orrs	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	0a1b      	lsrs	r3, r3, #8
 800d04c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d050:	431a      	orrs	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	0e1b      	lsrs	r3, r3, #24
 800d056:	4313      	orrs	r3, r2
}
 800d058:	4618      	mov	r0, r3
 800d05a:	370c      	adds	r7, #12
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800d064:	b480      	push	{r7}
 800d066:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800d068:	bf00      	nop
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800d076:	f000 faa9 	bl	800d5cc <dns_check_entries>
}
 800d07a:	bf00      	nop
 800d07c:	bd80      	pop	{r7, pc}
	...

0800d080 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b090      	sub	sp, #64	; 0x40
 800d084:	af00      	add	r7, sp, #0
 800d086:	4603      	mov	r3, r0
 800d088:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800d08a:	79fa      	ldrb	r2, [r7, #7]
 800d08c:	4613      	mov	r3, r2
 800d08e:	011b      	lsls	r3, r3, #4
 800d090:	4413      	add	r3, r2
 800d092:	011b      	lsls	r3, r3, #4
 800d094:	4a6c      	ldr	r2, [pc, #432]	; (800d248 <dns_send+0x1c8>)
 800d096:	4413      	add	r3, r2
 800d098:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800d09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09c:	7adb      	ldrb	r3, [r3, #11]
 800d09e:	2b01      	cmp	r3, #1
 800d0a0:	d906      	bls.n	800d0b0 <dns_send+0x30>
 800d0a2:	4b6a      	ldr	r3, [pc, #424]	; (800d24c <dns_send+0x1cc>)
 800d0a4:	f240 22fa 	movw	r2, #762	; 0x2fa
 800d0a8:	4969      	ldr	r1, [pc, #420]	; (800d250 <dns_send+0x1d0>)
 800d0aa:	486a      	ldr	r0, [pc, #424]	; (800d254 <dns_send+0x1d4>)
 800d0ac:	f00b feae 	bl	8018e0c <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800d0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b2:	7adb      	ldrb	r3, [r3, #11]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	4b68      	ldr	r3, [pc, #416]	; (800d258 <dns_send+0x1d8>)
 800d0b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d109      	bne.n	800d0d4 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800d0c0:	79fb      	ldrb	r3, [r7, #7]
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f000 f8cb 	bl	800d260 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800d0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	e0b4      	b.n	800d23e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d6:	3310      	adds	r3, #16
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7f3 f879 	bl	80001d0 <strlen>
 800d0de:	4603      	mov	r3, r0
 800d0e0:	b29b      	uxth	r3, r3
 800d0e2:	3312      	adds	r3, #18
 800d0e4:	b29b      	uxth	r3, r3
 800d0e6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d0ea:	4619      	mov	r1, r3
 800d0ec:	2036      	movs	r0, #54	; 0x36
 800d0ee:	f001 fb1d 	bl	800e72c <pbuf_alloc>
 800d0f2:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	f000 8095 	beq.w	800d226 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800d0fc:	f107 0310 	add.w	r3, r7, #16
 800d100:	220c      	movs	r2, #12
 800d102:	2100      	movs	r1, #0
 800d104:	4618      	mov	r0, r3
 800d106:	f00b fdcf 	bl	8018ca8 <memset>
    hdr.id = lwip_htons(entry->txid);
 800d10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d10c:	891b      	ldrh	r3, [r3, #8]
 800d10e:	4618      	mov	r0, r3
 800d110:	f7ff ff7a 	bl	800d008 <lwip_htons>
 800d114:	4603      	mov	r3, r0
 800d116:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800d118:	2301      	movs	r3, #1
 800d11a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800d11c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d120:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800d122:	f107 0310 	add.w	r3, r7, #16
 800d126:	220c      	movs	r2, #12
 800d128:	4619      	mov	r1, r3
 800d12a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d12c:	f002 f8c8 	bl	800f2c0 <pbuf_take>
    hostname = entry->name;
 800d130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d132:	3310      	adds	r3, #16
 800d134:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800d136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d138:	3b01      	subs	r3, #1
 800d13a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800d13c:	230c      	movs	r3, #12
 800d13e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800d140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d142:	3301      	adds	r3, #1
 800d144:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800d146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d148:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800d14a:	2300      	movs	r3, #0
 800d14c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800d150:	e007      	b.n	800d162 <dns_send+0xe2>
        ++n;
 800d152:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d156:	3301      	adds	r3, #1
 800d158:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800d15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15e:	3301      	adds	r3, #1
 800d160:	63bb      	str	r3, [r7, #56]	; 0x38
 800d162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	2b2e      	cmp	r3, #46	; 0x2e
 800d168:	d003      	beq.n	800d172 <dns_send+0xf2>
 800d16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1ef      	bne.n	800d152 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800d172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d176:	1ad3      	subs	r3, r2, r3
 800d178:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800d17a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800d17c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d180:	4413      	add	r3, r2
 800d182:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d186:	4293      	cmp	r3, r2
 800d188:	dc53      	bgt.n	800d232 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800d18a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800d18e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d190:	4619      	mov	r1, r3
 800d192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d194:	f002 f9c2 	bl	800f51c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800d198:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d19a:	3301      	adds	r3, #1
 800d19c:	b29b      	uxth	r3, r3
 800d19e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d1a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d1a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1a4:	f002 f91e 	bl	800f3e4 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800d1a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1b0:	4413      	add	r3, r2
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	3301      	adds	r3, #1
 800d1b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	781b      	ldrb	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1bf      	bne.n	800d140 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800d1c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1c8:	f002 f9a8 	bl	800f51c <pbuf_put_at>
    query_idx++;
 800d1cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800d1d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1d6:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800d1d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d1dc:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800d1de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d1e0:	f107 010c 	add.w	r1, r7, #12
 800d1e4:	2204      	movs	r2, #4
 800d1e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1e8:	f002 f8fc 	bl	800f3e4 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800d1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ee:	7bdb      	ldrb	r3, [r3, #15]
 800d1f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800d1f4:	2335      	movs	r3, #53	; 0x35
 800d1f6:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800d1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fa:	7adb      	ldrb	r3, [r3, #11]
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4a16      	ldr	r2, [pc, #88]	; (800d258 <dns_send+0x1d8>)
 800d200:	4413      	add	r3, r2
 800d202:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800d204:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d208:	4a14      	ldr	r2, [pc, #80]	; (800d25c <dns_send+0x1dc>)
 800d20a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800d20e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d210:	69fa      	ldr	r2, [r7, #28]
 800d212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d214:	f008 fd96 	bl	8015d44 <udp_sendto>
 800d218:	4603      	mov	r3, r0
 800d21a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800d21e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d220:	f001 fd9a 	bl	800ed58 <pbuf_free>
 800d224:	e002      	b.n	800d22c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800d226:	23ff      	movs	r3, #255	; 0xff
 800d228:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800d22c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d230:	e005      	b.n	800d23e <dns_send+0x1be>
        goto overflow_return;
 800d232:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800d234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d236:	f001 fd8f 	bl	800ed58 <pbuf_free>
  return ERR_VAL;
 800d23a:	f06f 0305 	mvn.w	r3, #5
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3740      	adds	r7, #64	; 0x40
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop
 800d248:	20004a18 	.word	0x20004a18
 800d24c:	0801ad7c 	.word	0x0801ad7c
 800d250:	0801adac 	.word	0x0801adac
 800d254:	0801adc4 	.word	0x0801adc4
 800d258:	20004e88 	.word	0x20004e88
 800d25c:	20004a08 	.word	0x20004a08

0800d260 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800d260:	b590      	push	{r4, r7, lr}
 800d262:	b085      	sub	sp, #20
 800d264:	af00      	add	r7, sp, #0
 800d266:	4603      	mov	r3, r0
 800d268:	6039      	str	r1, [r7, #0]
 800d26a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800d26c:	2300      	movs	r3, #0
 800d26e:	73fb      	strb	r3, [r7, #15]
 800d270:	e03d      	b.n	800d2ee <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800d272:	7bfa      	ldrb	r2, [r7, #15]
 800d274:	4957      	ldr	r1, [pc, #348]	; (800d3d4 <dns_call_found+0x174>)
 800d276:	4613      	mov	r3, r2
 800d278:	005b      	lsls	r3, r3, #1
 800d27a:	4413      	add	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	440b      	add	r3, r1
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d030      	beq.n	800d2e8 <dns_call_found+0x88>
 800d286:	7bfa      	ldrb	r2, [r7, #15]
 800d288:	4952      	ldr	r1, [pc, #328]	; (800d3d4 <dns_call_found+0x174>)
 800d28a:	4613      	mov	r3, r2
 800d28c:	005b      	lsls	r3, r3, #1
 800d28e:	4413      	add	r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	440b      	add	r3, r1
 800d294:	3308      	adds	r3, #8
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	79fa      	ldrb	r2, [r7, #7]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d124      	bne.n	800d2e8 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800d29e:	7bfa      	ldrb	r2, [r7, #15]
 800d2a0:	494c      	ldr	r1, [pc, #304]	; (800d3d4 <dns_call_found+0x174>)
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	005b      	lsls	r3, r3, #1
 800d2a6:	4413      	add	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	440b      	add	r3, r1
 800d2ac:	681c      	ldr	r4, [r3, #0]
 800d2ae:	79fa      	ldrb	r2, [r7, #7]
 800d2b0:	4613      	mov	r3, r2
 800d2b2:	011b      	lsls	r3, r3, #4
 800d2b4:	4413      	add	r3, r2
 800d2b6:	011b      	lsls	r3, r3, #4
 800d2b8:	3310      	adds	r3, #16
 800d2ba:	4a47      	ldr	r2, [pc, #284]	; (800d3d8 <dns_call_found+0x178>)
 800d2bc:	1898      	adds	r0, r3, r2
 800d2be:	7bfa      	ldrb	r2, [r7, #15]
 800d2c0:	4944      	ldr	r1, [pc, #272]	; (800d3d4 <dns_call_found+0x174>)
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	005b      	lsls	r3, r3, #1
 800d2c6:	4413      	add	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	440b      	add	r3, r1
 800d2cc:	3304      	adds	r3, #4
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800d2d6:	7bfa      	ldrb	r2, [r7, #15]
 800d2d8:	493e      	ldr	r1, [pc, #248]	; (800d3d4 <dns_call_found+0x174>)
 800d2da:	4613      	mov	r3, r2
 800d2dc:	005b      	lsls	r3, r3, #1
 800d2de:	4413      	add	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	440b      	add	r3, r1
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800d2e8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	73fb      	strb	r3, [r7, #15]
 800d2ee:	7bfb      	ldrb	r3, [r7, #15]
 800d2f0:	2b03      	cmp	r3, #3
 800d2f2:	d9be      	bls.n	800d272 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73fb      	strb	r3, [r7, #15]
 800d2f8:	e031      	b.n	800d35e <dns_call_found+0xfe>
    if (i == idx) {
 800d2fa:	7bfa      	ldrb	r2, [r7, #15]
 800d2fc:	79fb      	ldrb	r3, [r7, #7]
 800d2fe:	429a      	cmp	r2, r3
 800d300:	d029      	beq.n	800d356 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800d302:	7bfa      	ldrb	r2, [r7, #15]
 800d304:	4934      	ldr	r1, [pc, #208]	; (800d3d8 <dns_call_found+0x178>)
 800d306:	4613      	mov	r3, r2
 800d308:	011b      	lsls	r3, r3, #4
 800d30a:	4413      	add	r3, r2
 800d30c:	011b      	lsls	r3, r3, #4
 800d30e:	440b      	add	r3, r1
 800d310:	330a      	adds	r3, #10
 800d312:	781b      	ldrb	r3, [r3, #0]
 800d314:	2b02      	cmp	r3, #2
 800d316:	d11f      	bne.n	800d358 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800d318:	7bfa      	ldrb	r2, [r7, #15]
 800d31a:	492f      	ldr	r1, [pc, #188]	; (800d3d8 <dns_call_found+0x178>)
 800d31c:	4613      	mov	r3, r2
 800d31e:	011b      	lsls	r3, r3, #4
 800d320:	4413      	add	r3, r2
 800d322:	011b      	lsls	r3, r3, #4
 800d324:	440b      	add	r3, r1
 800d326:	330f      	adds	r3, #15
 800d328:	7819      	ldrb	r1, [r3, #0]
 800d32a:	79fa      	ldrb	r2, [r7, #7]
 800d32c:	482a      	ldr	r0, [pc, #168]	; (800d3d8 <dns_call_found+0x178>)
 800d32e:	4613      	mov	r3, r2
 800d330:	011b      	lsls	r3, r3, #4
 800d332:	4413      	add	r3, r2
 800d334:	011b      	lsls	r3, r3, #4
 800d336:	4403      	add	r3, r0
 800d338:	330f      	adds	r3, #15
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	4299      	cmp	r1, r3
 800d33e:	d10b      	bne.n	800d358 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800d340:	79fa      	ldrb	r2, [r7, #7]
 800d342:	4925      	ldr	r1, [pc, #148]	; (800d3d8 <dns_call_found+0x178>)
 800d344:	4613      	mov	r3, r2
 800d346:	011b      	lsls	r3, r3, #4
 800d348:	4413      	add	r3, r2
 800d34a:	011b      	lsls	r3, r3, #4
 800d34c:	440b      	add	r3, r1
 800d34e:	330f      	adds	r3, #15
 800d350:	2204      	movs	r2, #4
 800d352:	701a      	strb	r2, [r3, #0]
        break;
 800d354:	e006      	b.n	800d364 <dns_call_found+0x104>
      continue; /* only check other requests */
 800d356:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800d358:	7bfb      	ldrb	r3, [r7, #15]
 800d35a:	3301      	adds	r3, #1
 800d35c:	73fb      	strb	r3, [r7, #15]
 800d35e:	7bfb      	ldrb	r3, [r7, #15]
 800d360:	2b03      	cmp	r3, #3
 800d362:	d9ca      	bls.n	800d2fa <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800d364:	79fa      	ldrb	r2, [r7, #7]
 800d366:	491c      	ldr	r1, [pc, #112]	; (800d3d8 <dns_call_found+0x178>)
 800d368:	4613      	mov	r3, r2
 800d36a:	011b      	lsls	r3, r3, #4
 800d36c:	4413      	add	r3, r2
 800d36e:	011b      	lsls	r3, r3, #4
 800d370:	440b      	add	r3, r1
 800d372:	330f      	adds	r3, #15
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	2b03      	cmp	r3, #3
 800d378:	d827      	bhi.n	800d3ca <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800d37a:	79fa      	ldrb	r2, [r7, #7]
 800d37c:	4916      	ldr	r1, [pc, #88]	; (800d3d8 <dns_call_found+0x178>)
 800d37e:	4613      	mov	r3, r2
 800d380:	011b      	lsls	r3, r3, #4
 800d382:	4413      	add	r3, r2
 800d384:	011b      	lsls	r3, r3, #4
 800d386:	440b      	add	r3, r1
 800d388:	330f      	adds	r3, #15
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	461a      	mov	r2, r3
 800d38e:	4b13      	ldr	r3, [pc, #76]	; (800d3dc <dns_call_found+0x17c>)
 800d390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d394:	4618      	mov	r0, r3
 800d396:	f008 ff33 	bl	8016200 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800d39a:	79fa      	ldrb	r2, [r7, #7]
 800d39c:	490e      	ldr	r1, [pc, #56]	; (800d3d8 <dns_call_found+0x178>)
 800d39e:	4613      	mov	r3, r2
 800d3a0:	011b      	lsls	r3, r3, #4
 800d3a2:	4413      	add	r3, r2
 800d3a4:	011b      	lsls	r3, r3, #4
 800d3a6:	440b      	add	r3, r1
 800d3a8:	330f      	adds	r3, #15
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	4b0b      	ldr	r3, [pc, #44]	; (800d3dc <dns_call_found+0x17c>)
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800d3b6:	79fa      	ldrb	r2, [r7, #7]
 800d3b8:	4907      	ldr	r1, [pc, #28]	; (800d3d8 <dns_call_found+0x178>)
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	011b      	lsls	r3, r3, #4
 800d3be:	4413      	add	r3, r2
 800d3c0:	011b      	lsls	r3, r3, #4
 800d3c2:	440b      	add	r3, r1
 800d3c4:	330f      	adds	r3, #15
 800d3c6:	2204      	movs	r2, #4
 800d3c8:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800d3ca:	bf00      	nop
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd90      	pop	{r4, r7, pc}
 800d3d2:	bf00      	nop
 800d3d4:	20004e58 	.word	0x20004e58
 800d3d8:	20004a18 	.word	0x20004a18
 800d3dc:	20004a08 	.word	0x20004a08

0800d3e0 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b082      	sub	sp, #8
 800d3e4:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800d3e6:	f00b fd29 	bl	8018e3c <rand>
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	71fb      	strb	r3, [r7, #7]
 800d3f2:	e01a      	b.n	800d42a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800d3f4:	79fa      	ldrb	r2, [r7, #7]
 800d3f6:	4911      	ldr	r1, [pc, #68]	; (800d43c <dns_create_txid+0x5c>)
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	011b      	lsls	r3, r3, #4
 800d3fc:	4413      	add	r3, r2
 800d3fe:	011b      	lsls	r3, r3, #4
 800d400:	440b      	add	r3, r1
 800d402:	330a      	adds	r3, #10
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	2b02      	cmp	r3, #2
 800d408:	d10c      	bne.n	800d424 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800d40a:	79fa      	ldrb	r2, [r7, #7]
 800d40c:	490b      	ldr	r1, [pc, #44]	; (800d43c <dns_create_txid+0x5c>)
 800d40e:	4613      	mov	r3, r2
 800d410:	011b      	lsls	r3, r3, #4
 800d412:	4413      	add	r3, r2
 800d414:	011b      	lsls	r3, r3, #4
 800d416:	440b      	add	r3, r1
 800d418:	3308      	adds	r3, #8
 800d41a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800d41c:	88ba      	ldrh	r2, [r7, #4]
 800d41e:	429a      	cmp	r2, r3
 800d420:	d100      	bne.n	800d424 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800d422:	e7e0      	b.n	800d3e6 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800d424:	79fb      	ldrb	r3, [r7, #7]
 800d426:	3301      	adds	r3, #1
 800d428:	71fb      	strb	r3, [r7, #7]
 800d42a:	79fb      	ldrb	r3, [r7, #7]
 800d42c:	2b03      	cmp	r3, #3
 800d42e:	d9e1      	bls.n	800d3f4 <dns_create_txid+0x14>
    }
  }

  return txid;
 800d430:	88bb      	ldrh	r3, [r7, #4]
}
 800d432:	4618      	mov	r0, r3
 800d434:	3708      	adds	r7, #8
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}
 800d43a:	bf00      	nop
 800d43c:	20004a18 	.word	0x20004a18

0800d440 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800d440:	b480      	push	{r7}
 800d442:	b085      	sub	sp, #20
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800d448:	2300      	movs	r3, #0
 800d44a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00d      	beq.n	800d46e <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	7adb      	ldrb	r3, [r3, #11]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d109      	bne.n	800d46e <dns_backupserver_available+0x2e>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	7adb      	ldrb	r3, [r3, #11]
 800d45e:	3301      	adds	r3, #1
 800d460:	4a06      	ldr	r2, [pc, #24]	; (800d47c <dns_backupserver_available+0x3c>)
 800d462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d001      	beq.n	800d46e <dns_backupserver_available+0x2e>
      ret = 1;
 800d46a:	2301      	movs	r3, #1
 800d46c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d470:	4618      	mov	r0, r3
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr
 800d47c:	20004e88 	.word	0x20004e88

0800d480 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	4603      	mov	r3, r0
 800d488:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800d48a:	79fa      	ldrb	r2, [r7, #7]
 800d48c:	4613      	mov	r3, r2
 800d48e:	011b      	lsls	r3, r3, #4
 800d490:	4413      	add	r3, r2
 800d492:	011b      	lsls	r3, r3, #4
 800d494:	4a48      	ldr	r2, [pc, #288]	; (800d5b8 <dns_check_entry+0x138>)
 800d496:	4413      	add	r3, r2
 800d498:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800d49a:	79fb      	ldrb	r3, [r7, #7]
 800d49c:	2b03      	cmp	r3, #3
 800d49e:	d906      	bls.n	800d4ae <dns_check_entry+0x2e>
 800d4a0:	4b46      	ldr	r3, [pc, #280]	; (800d5bc <dns_check_entry+0x13c>)
 800d4a2:	f240 421c 	movw	r2, #1052	; 0x41c
 800d4a6:	4946      	ldr	r1, [pc, #280]	; (800d5c0 <dns_check_entry+0x140>)
 800d4a8:	4846      	ldr	r0, [pc, #280]	; (800d5c4 <dns_check_entry+0x144>)
 800d4aa:	f00b fcaf 	bl	8018e0c <iprintf>

  switch (entry->state) {
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	7a9b      	ldrb	r3, [r3, #10]
 800d4b2:	2b03      	cmp	r3, #3
 800d4b4:	d86f      	bhi.n	800d596 <dns_check_entry+0x116>
 800d4b6:	a201      	add	r2, pc, #4	; (adr r2, 800d4bc <dns_check_entry+0x3c>)
 800d4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4bc:	0800d5a7 	.word	0x0800d5a7
 800d4c0:	0800d4cd 	.word	0x0800d4cd
 800d4c4:	0800d4ff 	.word	0x0800d4ff
 800d4c8:	0800d575 	.word	0x0800d575
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800d4cc:	f7ff ff88 	bl	800d3e0 <dns_create_txid>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	2202      	movs	r2, #2
 800d4dc:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800d4f0:	79fb      	ldrb	r3, [r7, #7]
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7ff fdc4 	bl	800d080 <dns_send>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800d4fc:	e058      	b.n	800d5b0 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	7b1b      	ldrb	r3, [r3, #12]
 800d502:	3b01      	subs	r3, #1
 800d504:	b2da      	uxtb	r2, r3
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	731a      	strb	r2, [r3, #12]
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	7b1b      	ldrb	r3, [r3, #12]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d14b      	bne.n	800d5aa <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	7b5b      	ldrb	r3, [r3, #13]
 800d516:	3301      	adds	r3, #1
 800d518:	b2da      	uxtb	r2, r3
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	735a      	strb	r2, [r3, #13]
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	7b5b      	ldrb	r3, [r3, #13]
 800d522:	2b04      	cmp	r3, #4
 800d524:	d11b      	bne.n	800d55e <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f7ff ff8a 	bl	800d440 <dns_backupserver_available>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d00c      	beq.n	800d54c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	7adb      	ldrb	r3, [r3, #11]
 800d536:	3301      	adds	r3, #1
 800d538:	b2da      	uxtb	r2, r3
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2201      	movs	r2, #1
 800d542:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	735a      	strb	r2, [r3, #13]
 800d54a:	e00c      	b.n	800d566 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800d54c:	79fb      	ldrb	r3, [r7, #7]
 800d54e:	2100      	movs	r1, #0
 800d550:	4618      	mov	r0, r3
 800d552:	f7ff fe85 	bl	800d260 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2200      	movs	r2, #0
 800d55a:	729a      	strb	r2, [r3, #10]
            break;
 800d55c:	e028      	b.n	800d5b0 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	7b5a      	ldrb	r2, [r3, #13]
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800d566:	79fb      	ldrb	r3, [r7, #7]
 800d568:	4618      	mov	r0, r3
 800d56a:	f7ff fd89 	bl	800d080 <dns_send>
 800d56e:	4603      	mov	r3, r0
 800d570:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800d572:	e01a      	b.n	800d5aa <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d008      	beq.n	800d58e <dns_check_entry+0x10e>
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	1e5a      	subs	r2, r3, #1
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	601a      	str	r2, [r3, #0]
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10f      	bne.n	800d5ae <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2200      	movs	r2, #0
 800d592:	729a      	strb	r2, [r3, #10]
      }
      break;
 800d594:	e00b      	b.n	800d5ae <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800d596:	4b09      	ldr	r3, [pc, #36]	; (800d5bc <dns_check_entry+0x13c>)
 800d598:	f240 425b 	movw	r2, #1115	; 0x45b
 800d59c:	490a      	ldr	r1, [pc, #40]	; (800d5c8 <dns_check_entry+0x148>)
 800d59e:	4809      	ldr	r0, [pc, #36]	; (800d5c4 <dns_check_entry+0x144>)
 800d5a0:	f00b fc34 	bl	8018e0c <iprintf>
      break;
 800d5a4:	e004      	b.n	800d5b0 <dns_check_entry+0x130>
      break;
 800d5a6:	bf00      	nop
 800d5a8:	e002      	b.n	800d5b0 <dns_check_entry+0x130>
      break;
 800d5aa:	bf00      	nop
 800d5ac:	e000      	b.n	800d5b0 <dns_check_entry+0x130>
      break;
 800d5ae:	bf00      	nop
  }
}
 800d5b0:	bf00      	nop
 800d5b2:	3710      	adds	r7, #16
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	20004a18 	.word	0x20004a18
 800d5bc:	0801ad7c 	.word	0x0801ad7c
 800d5c0:	0801adec 	.word	0x0801adec
 800d5c4:	0801adc4 	.word	0x0801adc4
 800d5c8:	0801ae08 	.word	0x0801ae08

0800d5cc <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	71fb      	strb	r3, [r7, #7]
 800d5d6:	e006      	b.n	800d5e6 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800d5d8:	79fb      	ldrb	r3, [r7, #7]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f7ff ff50 	bl	800d480 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800d5e0:	79fb      	ldrb	r3, [r7, #7]
 800d5e2:	3301      	adds	r3, #1
 800d5e4:	71fb      	strb	r3, [r7, #7]
 800d5e6:	79fb      	ldrb	r3, [r7, #7]
 800d5e8:	2b03      	cmp	r3, #3
 800d5ea:	d9f5      	bls.n	800d5d8 <dns_check_entries+0xc>
  }
}
 800d5ec:	bf00      	nop
 800d5ee:	bf00      	nop
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}

0800d5f6 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b082      	sub	sp, #8
 800d5fa:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d600:	f00b fa8e 	bl	8018b20 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d604:	f000 f8d6 	bl	800d7b4 <mem_init>
  memp_init();
 800d608:	f000 fc32 	bl	800de70 <memp_init>
  pbuf_init();
  netif_init();
 800d60c:	f000 fcf8 	bl	800e000 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d610:	f008 f9a2 	bl	8015958 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d614:	f001 ffa4 	bl	800f560 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800d618:	f7ff fd24 	bl	800d064 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d61c:	f008 f8e2 	bl	80157e4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d620:	bf00      	nop
 800d622:	3708      	adds	r7, #8
 800d624:	46bd      	mov	sp, r7
 800d626:	bd80      	pop	{r7, pc}

0800d628 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d628:	b480      	push	{r7}
 800d62a:	b083      	sub	sp, #12
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	4603      	mov	r3, r0
 800d630:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d632:	4b05      	ldr	r3, [pc, #20]	; (800d648 <ptr_to_mem+0x20>)
 800d634:	681a      	ldr	r2, [r3, #0]
 800d636:	88fb      	ldrh	r3, [r7, #6]
 800d638:	4413      	add	r3, r2
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	370c      	adds	r7, #12
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr
 800d646:	bf00      	nop
 800d648:	20004e90 	.word	0x20004e90

0800d64c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d654:	4b05      	ldr	r3, [pc, #20]	; (800d66c <mem_to_ptr+0x20>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	1ad3      	subs	r3, r2, r3
 800d65c:	b29b      	uxth	r3, r3
}
 800d65e:	4618      	mov	r0, r3
 800d660:	370c      	adds	r7, #12
 800d662:	46bd      	mov	sp, r7
 800d664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d668:	4770      	bx	lr
 800d66a:	bf00      	nop
 800d66c:	20004e90 	.word	0x20004e90

0800d670 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d670:	b590      	push	{r4, r7, lr}
 800d672:	b085      	sub	sp, #20
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d678:	4b45      	ldr	r3, [pc, #276]	; (800d790 <plug_holes+0x120>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	687a      	ldr	r2, [r7, #4]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d206      	bcs.n	800d690 <plug_holes+0x20>
 800d682:	4b44      	ldr	r3, [pc, #272]	; (800d794 <plug_holes+0x124>)
 800d684:	f240 12df 	movw	r2, #479	; 0x1df
 800d688:	4943      	ldr	r1, [pc, #268]	; (800d798 <plug_holes+0x128>)
 800d68a:	4844      	ldr	r0, [pc, #272]	; (800d79c <plug_holes+0x12c>)
 800d68c:	f00b fbbe 	bl	8018e0c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d690:	4b43      	ldr	r3, [pc, #268]	; (800d7a0 <plug_holes+0x130>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	429a      	cmp	r2, r3
 800d698:	d306      	bcc.n	800d6a8 <plug_holes+0x38>
 800d69a:	4b3e      	ldr	r3, [pc, #248]	; (800d794 <plug_holes+0x124>)
 800d69c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d6a0:	4940      	ldr	r1, [pc, #256]	; (800d7a4 <plug_holes+0x134>)
 800d6a2:	483e      	ldr	r0, [pc, #248]	; (800d79c <plug_holes+0x12c>)
 800d6a4:	f00b fbb2 	bl	8018e0c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	791b      	ldrb	r3, [r3, #4]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d006      	beq.n	800d6be <plug_holes+0x4e>
 800d6b0:	4b38      	ldr	r3, [pc, #224]	; (800d794 <plug_holes+0x124>)
 800d6b2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d6b6:	493c      	ldr	r1, [pc, #240]	; (800d7a8 <plug_holes+0x138>)
 800d6b8:	4838      	ldr	r0, [pc, #224]	; (800d79c <plug_holes+0x12c>)
 800d6ba:	f00b fba7 	bl	8018e0c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	881b      	ldrh	r3, [r3, #0]
 800d6c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d6c6:	d906      	bls.n	800d6d6 <plug_holes+0x66>
 800d6c8:	4b32      	ldr	r3, [pc, #200]	; (800d794 <plug_holes+0x124>)
 800d6ca:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d6ce:	4937      	ldr	r1, [pc, #220]	; (800d7ac <plug_holes+0x13c>)
 800d6d0:	4832      	ldr	r0, [pc, #200]	; (800d79c <plug_holes+0x12c>)
 800d6d2:	f00b fb9b 	bl	8018e0c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	881b      	ldrh	r3, [r3, #0]
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7ff ffa4 	bl	800d628 <ptr_to_mem>
 800d6e0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	429a      	cmp	r2, r3
 800d6e8:	d024      	beq.n	800d734 <plug_holes+0xc4>
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	791b      	ldrb	r3, [r3, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d120      	bne.n	800d734 <plug_holes+0xc4>
 800d6f2:	4b2b      	ldr	r3, [pc, #172]	; (800d7a0 <plug_holes+0x130>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	68fa      	ldr	r2, [r7, #12]
 800d6f8:	429a      	cmp	r2, r3
 800d6fa:	d01b      	beq.n	800d734 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d6fc:	4b2c      	ldr	r3, [pc, #176]	; (800d7b0 <plug_holes+0x140>)
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	68fa      	ldr	r2, [r7, #12]
 800d702:	429a      	cmp	r2, r3
 800d704:	d102      	bne.n	800d70c <plug_holes+0x9c>
      lfree = mem;
 800d706:	4a2a      	ldr	r2, [pc, #168]	; (800d7b0 <plug_holes+0x140>)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	881a      	ldrh	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	881b      	ldrh	r3, [r3, #0]
 800d718:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d71c:	d00a      	beq.n	800d734 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	881b      	ldrh	r3, [r3, #0]
 800d722:	4618      	mov	r0, r3
 800d724:	f7ff ff80 	bl	800d628 <ptr_to_mem>
 800d728:	4604      	mov	r4, r0
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	f7ff ff8e 	bl	800d64c <mem_to_ptr>
 800d730:	4603      	mov	r3, r0
 800d732:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	885b      	ldrh	r3, [r3, #2]
 800d738:	4618      	mov	r0, r3
 800d73a:	f7ff ff75 	bl	800d628 <ptr_to_mem>
 800d73e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d740:	68ba      	ldr	r2, [r7, #8]
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	429a      	cmp	r2, r3
 800d746:	d01f      	beq.n	800d788 <plug_holes+0x118>
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	791b      	ldrb	r3, [r3, #4]
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d11b      	bne.n	800d788 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d750:	4b17      	ldr	r3, [pc, #92]	; (800d7b0 <plug_holes+0x140>)
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	429a      	cmp	r2, r3
 800d758:	d102      	bne.n	800d760 <plug_holes+0xf0>
      lfree = pmem;
 800d75a:	4a15      	ldr	r2, [pc, #84]	; (800d7b0 <plug_holes+0x140>)
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	881a      	ldrh	r2, [r3, #0]
 800d764:	68bb      	ldr	r3, [r7, #8]
 800d766:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	881b      	ldrh	r3, [r3, #0]
 800d76c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d770:	d00a      	beq.n	800d788 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	881b      	ldrh	r3, [r3, #0]
 800d776:	4618      	mov	r0, r3
 800d778:	f7ff ff56 	bl	800d628 <ptr_to_mem>
 800d77c:	4604      	mov	r4, r0
 800d77e:	68b8      	ldr	r0, [r7, #8]
 800d780:	f7ff ff64 	bl	800d64c <mem_to_ptr>
 800d784:	4603      	mov	r3, r0
 800d786:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d788:	bf00      	nop
 800d78a:	3714      	adds	r7, #20
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd90      	pop	{r4, r7, pc}
 800d790:	20004e90 	.word	0x20004e90
 800d794:	0801ae28 	.word	0x0801ae28
 800d798:	0801ae58 	.word	0x0801ae58
 800d79c:	0801ae70 	.word	0x0801ae70
 800d7a0:	20004e94 	.word	0x20004e94
 800d7a4:	0801ae98 	.word	0x0801ae98
 800d7a8:	0801aeb4 	.word	0x0801aeb4
 800d7ac:	0801aed0 	.word	0x0801aed0
 800d7b0:	20004e9c 	.word	0x20004e9c

0800d7b4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d7ba:	4b1f      	ldr	r3, [pc, #124]	; (800d838 <mem_init+0x84>)
 800d7bc:	3303      	adds	r3, #3
 800d7be:	f023 0303 	bic.w	r3, r3, #3
 800d7c2:	461a      	mov	r2, r3
 800d7c4:	4b1d      	ldr	r3, [pc, #116]	; (800d83c <mem_init+0x88>)
 800d7c6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d7c8:	4b1c      	ldr	r3, [pc, #112]	; (800d83c <mem_init+0x88>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d7d4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d7e2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d7e6:	f7ff ff1f 	bl	800d628 <ptr_to_mem>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	4a14      	ldr	r2, [pc, #80]	; (800d840 <mem_init+0x8c>)
 800d7ee:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d7f0:	4b13      	ldr	r3, [pc, #76]	; (800d840 <mem_init+0x8c>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d7f8:	4b11      	ldr	r3, [pc, #68]	; (800d840 <mem_init+0x8c>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d800:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d802:	4b0f      	ldr	r3, [pc, #60]	; (800d840 <mem_init+0x8c>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d80a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d80c:	4b0b      	ldr	r3, [pc, #44]	; (800d83c <mem_init+0x88>)
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a0c      	ldr	r2, [pc, #48]	; (800d844 <mem_init+0x90>)
 800d812:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d814:	480c      	ldr	r0, [pc, #48]	; (800d848 <mem_init+0x94>)
 800d816:	f00b f98f 	bl	8018b38 <sys_mutex_new>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d006      	beq.n	800d82e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d820:	4b0a      	ldr	r3, [pc, #40]	; (800d84c <mem_init+0x98>)
 800d822:	f240 221f 	movw	r2, #543	; 0x21f
 800d826:	490a      	ldr	r1, [pc, #40]	; (800d850 <mem_init+0x9c>)
 800d828:	480a      	ldr	r0, [pc, #40]	; (800d854 <mem_init+0xa0>)
 800d82a:	f00b faef 	bl	8018e0c <iprintf>
  }
}
 800d82e:	bf00      	nop
 800d830:	3708      	adds	r7, #8
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	20008464 	.word	0x20008464
 800d83c:	20004e90 	.word	0x20004e90
 800d840:	20004e94 	.word	0x20004e94
 800d844:	20004e9c 	.word	0x20004e9c
 800d848:	20004e98 	.word	0x20004e98
 800d84c:	0801ae28 	.word	0x0801ae28
 800d850:	0801aefc 	.word	0x0801aefc
 800d854:	0801ae70 	.word	0x0801ae70

0800d858 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b086      	sub	sp, #24
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff fef3 	bl	800d64c <mem_to_ptr>
 800d866:	4603      	mov	r3, r0
 800d868:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff feda 	bl	800d628 <ptr_to_mem>
 800d874:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	885b      	ldrh	r3, [r3, #2]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f7ff fed4 	bl	800d628 <ptr_to_mem>
 800d880:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	881b      	ldrh	r3, [r3, #0]
 800d886:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d88a:	d818      	bhi.n	800d8be <mem_link_valid+0x66>
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	885b      	ldrh	r3, [r3, #2]
 800d890:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d894:	d813      	bhi.n	800d8be <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d89a:	8afa      	ldrh	r2, [r7, #22]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d004      	beq.n	800d8aa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	881b      	ldrh	r3, [r3, #0]
 800d8a4:	8afa      	ldrh	r2, [r7, #22]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d109      	bne.n	800d8be <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d8aa:	4b08      	ldr	r3, [pc, #32]	; (800d8cc <mem_link_valid+0x74>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d8ae:	693a      	ldr	r2, [r7, #16]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d006      	beq.n	800d8c2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d8b4:	693b      	ldr	r3, [r7, #16]
 800d8b6:	885b      	ldrh	r3, [r3, #2]
 800d8b8:	8afa      	ldrh	r2, [r7, #22]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d001      	beq.n	800d8c2 <mem_link_valid+0x6a>
    return 0;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e000      	b.n	800d8c4 <mem_link_valid+0x6c>
  }
  return 1;
 800d8c2:	2301      	movs	r3, #1
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3718      	adds	r7, #24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	20004e94 	.word	0x20004e94

0800d8d0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b088      	sub	sp, #32
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d070      	beq.n	800d9c0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	f003 0303 	and.w	r3, r3, #3
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d00d      	beq.n	800d904 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d8e8:	4b37      	ldr	r3, [pc, #220]	; (800d9c8 <mem_free+0xf8>)
 800d8ea:	f240 2273 	movw	r2, #627	; 0x273
 800d8ee:	4937      	ldr	r1, [pc, #220]	; (800d9cc <mem_free+0xfc>)
 800d8f0:	4837      	ldr	r0, [pc, #220]	; (800d9d0 <mem_free+0x100>)
 800d8f2:	f00b fa8b 	bl	8018e0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d8f6:	f00b f971 	bl	8018bdc <sys_arch_protect>
 800d8fa:	60f8      	str	r0, [r7, #12]
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f00b f97b 	bl	8018bf8 <sys_arch_unprotect>
    return;
 800d902:	e05e      	b.n	800d9c2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	3b08      	subs	r3, #8
 800d908:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d90a:	4b32      	ldr	r3, [pc, #200]	; (800d9d4 <mem_free+0x104>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	69fa      	ldr	r2, [r7, #28]
 800d910:	429a      	cmp	r2, r3
 800d912:	d306      	bcc.n	800d922 <mem_free+0x52>
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f103 020c 	add.w	r2, r3, #12
 800d91a:	4b2f      	ldr	r3, [pc, #188]	; (800d9d8 <mem_free+0x108>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d90d      	bls.n	800d93e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d922:	4b29      	ldr	r3, [pc, #164]	; (800d9c8 <mem_free+0xf8>)
 800d924:	f240 227f 	movw	r2, #639	; 0x27f
 800d928:	492c      	ldr	r1, [pc, #176]	; (800d9dc <mem_free+0x10c>)
 800d92a:	4829      	ldr	r0, [pc, #164]	; (800d9d0 <mem_free+0x100>)
 800d92c:	f00b fa6e 	bl	8018e0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d930:	f00b f954 	bl	8018bdc <sys_arch_protect>
 800d934:	6138      	str	r0, [r7, #16]
 800d936:	6938      	ldr	r0, [r7, #16]
 800d938:	f00b f95e 	bl	8018bf8 <sys_arch_unprotect>
    return;
 800d93c:	e041      	b.n	800d9c2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d93e:	4828      	ldr	r0, [pc, #160]	; (800d9e0 <mem_free+0x110>)
 800d940:	f00b f910 	bl	8018b64 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	791b      	ldrb	r3, [r3, #4]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d110      	bne.n	800d96e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d94c:	4b1e      	ldr	r3, [pc, #120]	; (800d9c8 <mem_free+0xf8>)
 800d94e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d952:	4924      	ldr	r1, [pc, #144]	; (800d9e4 <mem_free+0x114>)
 800d954:	481e      	ldr	r0, [pc, #120]	; (800d9d0 <mem_free+0x100>)
 800d956:	f00b fa59 	bl	8018e0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d95a:	4821      	ldr	r0, [pc, #132]	; (800d9e0 <mem_free+0x110>)
 800d95c:	f00b f911 	bl	8018b82 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d960:	f00b f93c 	bl	8018bdc <sys_arch_protect>
 800d964:	6178      	str	r0, [r7, #20]
 800d966:	6978      	ldr	r0, [r7, #20]
 800d968:	f00b f946 	bl	8018bf8 <sys_arch_unprotect>
    return;
 800d96c:	e029      	b.n	800d9c2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d96e:	69f8      	ldr	r0, [r7, #28]
 800d970:	f7ff ff72 	bl	800d858 <mem_link_valid>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d110      	bne.n	800d99c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d97a:	4b13      	ldr	r3, [pc, #76]	; (800d9c8 <mem_free+0xf8>)
 800d97c:	f240 2295 	movw	r2, #661	; 0x295
 800d980:	4919      	ldr	r1, [pc, #100]	; (800d9e8 <mem_free+0x118>)
 800d982:	4813      	ldr	r0, [pc, #76]	; (800d9d0 <mem_free+0x100>)
 800d984:	f00b fa42 	bl	8018e0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d988:	4815      	ldr	r0, [pc, #84]	; (800d9e0 <mem_free+0x110>)
 800d98a:	f00b f8fa 	bl	8018b82 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d98e:	f00b f925 	bl	8018bdc <sys_arch_protect>
 800d992:	61b8      	str	r0, [r7, #24]
 800d994:	69b8      	ldr	r0, [r7, #24]
 800d996:	f00b f92f 	bl	8018bf8 <sys_arch_unprotect>
    return;
 800d99a:	e012      	b.n	800d9c2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d9a2:	4b12      	ldr	r3, [pc, #72]	; (800d9ec <mem_free+0x11c>)
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	69fa      	ldr	r2, [r7, #28]
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d202      	bcs.n	800d9b2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d9ac:	4a0f      	ldr	r2, [pc, #60]	; (800d9ec <mem_free+0x11c>)
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d9b2:	69f8      	ldr	r0, [r7, #28]
 800d9b4:	f7ff fe5c 	bl	800d670 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d9b8:	4809      	ldr	r0, [pc, #36]	; (800d9e0 <mem_free+0x110>)
 800d9ba:	f00b f8e2 	bl	8018b82 <sys_mutex_unlock>
 800d9be:	e000      	b.n	800d9c2 <mem_free+0xf2>
    return;
 800d9c0:	bf00      	nop
}
 800d9c2:	3720      	adds	r7, #32
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	0801ae28 	.word	0x0801ae28
 800d9cc:	0801af18 	.word	0x0801af18
 800d9d0:	0801ae70 	.word	0x0801ae70
 800d9d4:	20004e90 	.word	0x20004e90
 800d9d8:	20004e94 	.word	0x20004e94
 800d9dc:	0801af3c 	.word	0x0801af3c
 800d9e0:	20004e98 	.word	0x20004e98
 800d9e4:	0801af58 	.word	0x0801af58
 800d9e8:	0801af80 	.word	0x0801af80
 800d9ec:	20004e9c 	.word	0x20004e9c

0800d9f0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b088      	sub	sp, #32
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d9fc:	887b      	ldrh	r3, [r7, #2]
 800d9fe:	3303      	adds	r3, #3
 800da00:	b29b      	uxth	r3, r3
 800da02:	f023 0303 	bic.w	r3, r3, #3
 800da06:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800da08:	8bfb      	ldrh	r3, [r7, #30]
 800da0a:	2b0b      	cmp	r3, #11
 800da0c:	d801      	bhi.n	800da12 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800da0e:	230c      	movs	r3, #12
 800da10:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800da12:	8bfb      	ldrh	r3, [r7, #30]
 800da14:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800da18:	d803      	bhi.n	800da22 <mem_trim+0x32>
 800da1a:	8bfa      	ldrh	r2, [r7, #30]
 800da1c:	887b      	ldrh	r3, [r7, #2]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d201      	bcs.n	800da26 <mem_trim+0x36>
    return NULL;
 800da22:	2300      	movs	r3, #0
 800da24:	e0d8      	b.n	800dbd8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800da26:	4b6e      	ldr	r3, [pc, #440]	; (800dbe0 <mem_trim+0x1f0>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d304      	bcc.n	800da3a <mem_trim+0x4a>
 800da30:	4b6c      	ldr	r3, [pc, #432]	; (800dbe4 <mem_trim+0x1f4>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	429a      	cmp	r2, r3
 800da38:	d306      	bcc.n	800da48 <mem_trim+0x58>
 800da3a:	4b6b      	ldr	r3, [pc, #428]	; (800dbe8 <mem_trim+0x1f8>)
 800da3c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800da40:	496a      	ldr	r1, [pc, #424]	; (800dbec <mem_trim+0x1fc>)
 800da42:	486b      	ldr	r0, [pc, #428]	; (800dbf0 <mem_trim+0x200>)
 800da44:	f00b f9e2 	bl	8018e0c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800da48:	4b65      	ldr	r3, [pc, #404]	; (800dbe0 <mem_trim+0x1f0>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d304      	bcc.n	800da5c <mem_trim+0x6c>
 800da52:	4b64      	ldr	r3, [pc, #400]	; (800dbe4 <mem_trim+0x1f4>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	687a      	ldr	r2, [r7, #4]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d307      	bcc.n	800da6c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800da5c:	f00b f8be 	bl	8018bdc <sys_arch_protect>
 800da60:	60b8      	str	r0, [r7, #8]
 800da62:	68b8      	ldr	r0, [r7, #8]
 800da64:	f00b f8c8 	bl	8018bf8 <sys_arch_unprotect>
    return rmem;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	e0b5      	b.n	800dbd8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	3b08      	subs	r3, #8
 800da70:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800da72:	69b8      	ldr	r0, [r7, #24]
 800da74:	f7ff fdea 	bl	800d64c <mem_to_ptr>
 800da78:	4603      	mov	r3, r0
 800da7a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	881a      	ldrh	r2, [r3, #0]
 800da80:	8afb      	ldrh	r3, [r7, #22]
 800da82:	1ad3      	subs	r3, r2, r3
 800da84:	b29b      	uxth	r3, r3
 800da86:	3b08      	subs	r3, #8
 800da88:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800da8a:	8bfa      	ldrh	r2, [r7, #30]
 800da8c:	8abb      	ldrh	r3, [r7, #20]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d906      	bls.n	800daa0 <mem_trim+0xb0>
 800da92:	4b55      	ldr	r3, [pc, #340]	; (800dbe8 <mem_trim+0x1f8>)
 800da94:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800da98:	4956      	ldr	r1, [pc, #344]	; (800dbf4 <mem_trim+0x204>)
 800da9a:	4855      	ldr	r0, [pc, #340]	; (800dbf0 <mem_trim+0x200>)
 800da9c:	f00b f9b6 	bl	8018e0c <iprintf>
  if (newsize > size) {
 800daa0:	8bfa      	ldrh	r2, [r7, #30]
 800daa2:	8abb      	ldrh	r3, [r7, #20]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d901      	bls.n	800daac <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800daa8:	2300      	movs	r3, #0
 800daaa:	e095      	b.n	800dbd8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800daac:	8bfa      	ldrh	r2, [r7, #30]
 800daae:	8abb      	ldrh	r3, [r7, #20]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d101      	bne.n	800dab8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	e08f      	b.n	800dbd8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dab8:	484f      	ldr	r0, [pc, #316]	; (800dbf8 <mem_trim+0x208>)
 800daba:	f00b f853 	bl	8018b64 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	881b      	ldrh	r3, [r3, #0]
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7ff fdb0 	bl	800d628 <ptr_to_mem>
 800dac8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	791b      	ldrb	r3, [r3, #4]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d13f      	bne.n	800db52 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dad2:	69bb      	ldr	r3, [r7, #24]
 800dad4:	881b      	ldrh	r3, [r3, #0]
 800dad6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dada:	d106      	bne.n	800daea <mem_trim+0xfa>
 800dadc:	4b42      	ldr	r3, [pc, #264]	; (800dbe8 <mem_trim+0x1f8>)
 800dade:	f240 22f5 	movw	r2, #757	; 0x2f5
 800dae2:	4946      	ldr	r1, [pc, #280]	; (800dbfc <mem_trim+0x20c>)
 800dae4:	4842      	ldr	r0, [pc, #264]	; (800dbf0 <mem_trim+0x200>)
 800dae6:	f00b f991 	bl	8018e0c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800daf0:	8afa      	ldrh	r2, [r7, #22]
 800daf2:	8bfb      	ldrh	r3, [r7, #30]
 800daf4:	4413      	add	r3, r2
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	3308      	adds	r3, #8
 800dafa:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800dafc:	4b40      	ldr	r3, [pc, #256]	; (800dc00 <mem_trim+0x210>)
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	693a      	ldr	r2, [r7, #16]
 800db02:	429a      	cmp	r2, r3
 800db04:	d106      	bne.n	800db14 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800db06:	89fb      	ldrh	r3, [r7, #14]
 800db08:	4618      	mov	r0, r3
 800db0a:	f7ff fd8d 	bl	800d628 <ptr_to_mem>
 800db0e:	4603      	mov	r3, r0
 800db10:	4a3b      	ldr	r2, [pc, #236]	; (800dc00 <mem_trim+0x210>)
 800db12:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800db14:	89fb      	ldrh	r3, [r7, #14]
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff fd86 	bl	800d628 <ptr_to_mem>
 800db1c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800db1e:	693b      	ldr	r3, [r7, #16]
 800db20:	2200      	movs	r2, #0
 800db22:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	89ba      	ldrh	r2, [r7, #12]
 800db28:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	8afa      	ldrh	r2, [r7, #22]
 800db2e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800db30:	69bb      	ldr	r3, [r7, #24]
 800db32:	89fa      	ldrh	r2, [r7, #14]
 800db34:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800db3e:	d047      	beq.n	800dbd0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	4618      	mov	r0, r3
 800db46:	f7ff fd6f 	bl	800d628 <ptr_to_mem>
 800db4a:	4602      	mov	r2, r0
 800db4c:	89fb      	ldrh	r3, [r7, #14]
 800db4e:	8053      	strh	r3, [r2, #2]
 800db50:	e03e      	b.n	800dbd0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800db52:	8bfb      	ldrh	r3, [r7, #30]
 800db54:	f103 0214 	add.w	r2, r3, #20
 800db58:	8abb      	ldrh	r3, [r7, #20]
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d838      	bhi.n	800dbd0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800db5e:	8afa      	ldrh	r2, [r7, #22]
 800db60:	8bfb      	ldrh	r3, [r7, #30]
 800db62:	4413      	add	r3, r2
 800db64:	b29b      	uxth	r3, r3
 800db66:	3308      	adds	r3, #8
 800db68:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	881b      	ldrh	r3, [r3, #0]
 800db6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800db72:	d106      	bne.n	800db82 <mem_trim+0x192>
 800db74:	4b1c      	ldr	r3, [pc, #112]	; (800dbe8 <mem_trim+0x1f8>)
 800db76:	f240 3216 	movw	r2, #790	; 0x316
 800db7a:	4920      	ldr	r1, [pc, #128]	; (800dbfc <mem_trim+0x20c>)
 800db7c:	481c      	ldr	r0, [pc, #112]	; (800dbf0 <mem_trim+0x200>)
 800db7e:	f00b f945 	bl	8018e0c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800db82:	89fb      	ldrh	r3, [r7, #14]
 800db84:	4618      	mov	r0, r3
 800db86:	f7ff fd4f 	bl	800d628 <ptr_to_mem>
 800db8a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800db8c:	4b1c      	ldr	r3, [pc, #112]	; (800dc00 <mem_trim+0x210>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	693a      	ldr	r2, [r7, #16]
 800db92:	429a      	cmp	r2, r3
 800db94:	d202      	bcs.n	800db9c <mem_trim+0x1ac>
      lfree = mem2;
 800db96:	4a1a      	ldr	r2, [pc, #104]	; (800dc00 <mem_trim+0x210>)
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	2200      	movs	r2, #0
 800dba0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800dba2:	69bb      	ldr	r3, [r7, #24]
 800dba4:	881a      	ldrh	r2, [r3, #0]
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	8afa      	ldrh	r2, [r7, #22]
 800dbae:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800dbb0:	69bb      	ldr	r3, [r7, #24]
 800dbb2:	89fa      	ldrh	r2, [r7, #14]
 800dbb4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dbb6:	693b      	ldr	r3, [r7, #16]
 800dbb8:	881b      	ldrh	r3, [r3, #0]
 800dbba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dbbe:	d007      	beq.n	800dbd0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	881b      	ldrh	r3, [r3, #0]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff fd2f 	bl	800d628 <ptr_to_mem>
 800dbca:	4602      	mov	r2, r0
 800dbcc:	89fb      	ldrh	r3, [r7, #14]
 800dbce:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dbd0:	4809      	ldr	r0, [pc, #36]	; (800dbf8 <mem_trim+0x208>)
 800dbd2:	f00a ffd6 	bl	8018b82 <sys_mutex_unlock>
  return rmem;
 800dbd6:	687b      	ldr	r3, [r7, #4]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3720      	adds	r7, #32
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	20004e90 	.word	0x20004e90
 800dbe4:	20004e94 	.word	0x20004e94
 800dbe8:	0801ae28 	.word	0x0801ae28
 800dbec:	0801afb4 	.word	0x0801afb4
 800dbf0:	0801ae70 	.word	0x0801ae70
 800dbf4:	0801afcc 	.word	0x0801afcc
 800dbf8:	20004e98 	.word	0x20004e98
 800dbfc:	0801afec 	.word	0x0801afec
 800dc00:	20004e9c 	.word	0x20004e9c

0800dc04 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800dc0e:	88fb      	ldrh	r3, [r7, #6]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d101      	bne.n	800dc18 <mem_malloc+0x14>
    return NULL;
 800dc14:	2300      	movs	r3, #0
 800dc16:	e0e2      	b.n	800ddde <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800dc18:	88fb      	ldrh	r3, [r7, #6]
 800dc1a:	3303      	adds	r3, #3
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	f023 0303 	bic.w	r3, r3, #3
 800dc22:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800dc24:	8bbb      	ldrh	r3, [r7, #28]
 800dc26:	2b0b      	cmp	r3, #11
 800dc28:	d801      	bhi.n	800dc2e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800dc2a:	230c      	movs	r3, #12
 800dc2c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800dc2e:	8bbb      	ldrh	r3, [r7, #28]
 800dc30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dc34:	d803      	bhi.n	800dc3e <mem_malloc+0x3a>
 800dc36:	8bba      	ldrh	r2, [r7, #28]
 800dc38:	88fb      	ldrh	r3, [r7, #6]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d201      	bcs.n	800dc42 <mem_malloc+0x3e>
    return NULL;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	e0cd      	b.n	800ddde <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800dc42:	4869      	ldr	r0, [pc, #420]	; (800dde8 <mem_malloc+0x1e4>)
 800dc44:	f00a ff8e 	bl	8018b64 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dc48:	4b68      	ldr	r3, [pc, #416]	; (800ddec <mem_malloc+0x1e8>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f7ff fcfd 	bl	800d64c <mem_to_ptr>
 800dc52:	4603      	mov	r3, r0
 800dc54:	83fb      	strh	r3, [r7, #30]
 800dc56:	e0b7      	b.n	800ddc8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800dc58:	8bfb      	ldrh	r3, [r7, #30]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7ff fce4 	bl	800d628 <ptr_to_mem>
 800dc60:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	791b      	ldrb	r3, [r3, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	f040 80a7 	bne.w	800ddba <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	881b      	ldrh	r3, [r3, #0]
 800dc70:	461a      	mov	r2, r3
 800dc72:	8bfb      	ldrh	r3, [r7, #30]
 800dc74:	1ad3      	subs	r3, r2, r3
 800dc76:	f1a3 0208 	sub.w	r2, r3, #8
 800dc7a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	f0c0 809c 	bcc.w	800ddba <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800dc82:	697b      	ldr	r3, [r7, #20]
 800dc84:	881b      	ldrh	r3, [r3, #0]
 800dc86:	461a      	mov	r2, r3
 800dc88:	8bfb      	ldrh	r3, [r7, #30]
 800dc8a:	1ad3      	subs	r3, r2, r3
 800dc8c:	f1a3 0208 	sub.w	r2, r3, #8
 800dc90:	8bbb      	ldrh	r3, [r7, #28]
 800dc92:	3314      	adds	r3, #20
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d333      	bcc.n	800dd00 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dc98:	8bfa      	ldrh	r2, [r7, #30]
 800dc9a:	8bbb      	ldrh	r3, [r7, #28]
 800dc9c:	4413      	add	r3, r2
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	3308      	adds	r3, #8
 800dca2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dca4:	8a7b      	ldrh	r3, [r7, #18]
 800dca6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dcaa:	d106      	bne.n	800dcba <mem_malloc+0xb6>
 800dcac:	4b50      	ldr	r3, [pc, #320]	; (800ddf0 <mem_malloc+0x1ec>)
 800dcae:	f240 3287 	movw	r2, #903	; 0x387
 800dcb2:	4950      	ldr	r1, [pc, #320]	; (800ddf4 <mem_malloc+0x1f0>)
 800dcb4:	4850      	ldr	r0, [pc, #320]	; (800ddf8 <mem_malloc+0x1f4>)
 800dcb6:	f00b f8a9 	bl	8018e0c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dcba:	8a7b      	ldrh	r3, [r7, #18]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff fcb3 	bl	800d628 <ptr_to_mem>
 800dcc2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800dcca:	697b      	ldr	r3, [r7, #20]
 800dccc:	881a      	ldrh	r2, [r3, #0]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	8bfa      	ldrh	r2, [r7, #30]
 800dcd6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	8a7a      	ldrh	r2, [r7, #18]
 800dcdc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	2201      	movs	r2, #1
 800dce2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	881b      	ldrh	r3, [r3, #0]
 800dce8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800dcec:	d00b      	beq.n	800dd06 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7ff fc98 	bl	800d628 <ptr_to_mem>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	8a7b      	ldrh	r3, [r7, #18]
 800dcfc:	8053      	strh	r3, [r2, #2]
 800dcfe:	e002      	b.n	800dd06 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	2201      	movs	r2, #1
 800dd04:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800dd06:	4b39      	ldr	r3, [pc, #228]	; (800ddec <mem_malloc+0x1e8>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	697a      	ldr	r2, [r7, #20]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d127      	bne.n	800dd60 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800dd10:	4b36      	ldr	r3, [pc, #216]	; (800ddec <mem_malloc+0x1e8>)
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800dd16:	e005      	b.n	800dd24 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	881b      	ldrh	r3, [r3, #0]
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7ff fc83 	bl	800d628 <ptr_to_mem>
 800dd22:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800dd24:	69bb      	ldr	r3, [r7, #24]
 800dd26:	791b      	ldrb	r3, [r3, #4]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d004      	beq.n	800dd36 <mem_malloc+0x132>
 800dd2c:	4b33      	ldr	r3, [pc, #204]	; (800ddfc <mem_malloc+0x1f8>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	69ba      	ldr	r2, [r7, #24]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d1f0      	bne.n	800dd18 <mem_malloc+0x114>
          }
          lfree = cur;
 800dd36:	4a2d      	ldr	r2, [pc, #180]	; (800ddec <mem_malloc+0x1e8>)
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800dd3c:	4b2b      	ldr	r3, [pc, #172]	; (800ddec <mem_malloc+0x1e8>)
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	4b2e      	ldr	r3, [pc, #184]	; (800ddfc <mem_malloc+0x1f8>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d00b      	beq.n	800dd60 <mem_malloc+0x15c>
 800dd48:	4b28      	ldr	r3, [pc, #160]	; (800ddec <mem_malloc+0x1e8>)
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	791b      	ldrb	r3, [r3, #4]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d006      	beq.n	800dd60 <mem_malloc+0x15c>
 800dd52:	4b27      	ldr	r3, [pc, #156]	; (800ddf0 <mem_malloc+0x1ec>)
 800dd54:	f240 32b5 	movw	r2, #949	; 0x3b5
 800dd58:	4929      	ldr	r1, [pc, #164]	; (800de00 <mem_malloc+0x1fc>)
 800dd5a:	4827      	ldr	r0, [pc, #156]	; (800ddf8 <mem_malloc+0x1f4>)
 800dd5c:	f00b f856 	bl	8018e0c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800dd60:	4821      	ldr	r0, [pc, #132]	; (800dde8 <mem_malloc+0x1e4>)
 800dd62:	f00a ff0e 	bl	8018b82 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800dd66:	8bba      	ldrh	r2, [r7, #28]
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	3308      	adds	r3, #8
 800dd6e:	4a23      	ldr	r2, [pc, #140]	; (800ddfc <mem_malloc+0x1f8>)
 800dd70:	6812      	ldr	r2, [r2, #0]
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d906      	bls.n	800dd84 <mem_malloc+0x180>
 800dd76:	4b1e      	ldr	r3, [pc, #120]	; (800ddf0 <mem_malloc+0x1ec>)
 800dd78:	f240 32b9 	movw	r2, #953	; 0x3b9
 800dd7c:	4921      	ldr	r1, [pc, #132]	; (800de04 <mem_malloc+0x200>)
 800dd7e:	481e      	ldr	r0, [pc, #120]	; (800ddf8 <mem_malloc+0x1f4>)
 800dd80:	f00b f844 	bl	8018e0c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	f003 0303 	and.w	r3, r3, #3
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d006      	beq.n	800dd9c <mem_malloc+0x198>
 800dd8e:	4b18      	ldr	r3, [pc, #96]	; (800ddf0 <mem_malloc+0x1ec>)
 800dd90:	f240 32bb 	movw	r2, #955	; 0x3bb
 800dd94:	491c      	ldr	r1, [pc, #112]	; (800de08 <mem_malloc+0x204>)
 800dd96:	4818      	ldr	r0, [pc, #96]	; (800ddf8 <mem_malloc+0x1f4>)
 800dd98:	f00b f838 	bl	8018e0c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	f003 0303 	and.w	r3, r3, #3
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d006      	beq.n	800ddb4 <mem_malloc+0x1b0>
 800dda6:	4b12      	ldr	r3, [pc, #72]	; (800ddf0 <mem_malloc+0x1ec>)
 800dda8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ddac:	4917      	ldr	r1, [pc, #92]	; (800de0c <mem_malloc+0x208>)
 800ddae:	4812      	ldr	r0, [pc, #72]	; (800ddf8 <mem_malloc+0x1f4>)
 800ddb0:	f00b f82c 	bl	8018e0c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	3308      	adds	r3, #8
 800ddb8:	e011      	b.n	800ddde <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ddba:	8bfb      	ldrh	r3, [r7, #30]
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7ff fc33 	bl	800d628 <ptr_to_mem>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	881b      	ldrh	r3, [r3, #0]
 800ddc6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ddc8:	8bfa      	ldrh	r2, [r7, #30]
 800ddca:	8bbb      	ldrh	r3, [r7, #28]
 800ddcc:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	f4ff af41 	bcc.w	800dc58 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ddd6:	4804      	ldr	r0, [pc, #16]	; (800dde8 <mem_malloc+0x1e4>)
 800ddd8:	f00a fed3 	bl	8018b82 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800dddc:	2300      	movs	r3, #0
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	3720      	adds	r7, #32
 800dde2:	46bd      	mov	sp, r7
 800dde4:	bd80      	pop	{r7, pc}
 800dde6:	bf00      	nop
 800dde8:	20004e98 	.word	0x20004e98
 800ddec:	20004e9c 	.word	0x20004e9c
 800ddf0:	0801ae28 	.word	0x0801ae28
 800ddf4:	0801afec 	.word	0x0801afec
 800ddf8:	0801ae70 	.word	0x0801ae70
 800ddfc:	20004e94 	.word	0x20004e94
 800de00:	0801b000 	.word	0x0801b000
 800de04:	0801b01c 	.word	0x0801b01c
 800de08:	0801b04c 	.word	0x0801b04c
 800de0c:	0801b07c 	.word	0x0801b07c

0800de10 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	689b      	ldr	r3, [r3, #8]
 800de1c:	2200      	movs	r2, #0
 800de1e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	685b      	ldr	r3, [r3, #4]
 800de24:	3303      	adds	r3, #3
 800de26:	f023 0303 	bic.w	r3, r3, #3
 800de2a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800de2c:	2300      	movs	r3, #0
 800de2e:	60fb      	str	r3, [r7, #12]
 800de30:	e011      	b.n	800de56 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	689b      	ldr	r3, [r3, #8]
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	689b      	ldr	r3, [r3, #8]
 800de40:	68ba      	ldr	r2, [r7, #8]
 800de42:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	881b      	ldrh	r3, [r3, #0]
 800de48:	461a      	mov	r2, r3
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	4413      	add	r3, r2
 800de4e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	3301      	adds	r3, #1
 800de54:	60fb      	str	r3, [r7, #12]
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	885b      	ldrh	r3, [r3, #2]
 800de5a:	461a      	mov	r2, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	4293      	cmp	r3, r2
 800de60:	dbe7      	blt.n	800de32 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800de62:	bf00      	nop
 800de64:	bf00      	nop
 800de66:	3714      	adds	r7, #20
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800de76:	2300      	movs	r3, #0
 800de78:	80fb      	strh	r3, [r7, #6]
 800de7a:	e009      	b.n	800de90 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800de7c:	88fb      	ldrh	r3, [r7, #6]
 800de7e:	4a08      	ldr	r2, [pc, #32]	; (800dea0 <memp_init+0x30>)
 800de80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de84:	4618      	mov	r0, r3
 800de86:	f7ff ffc3 	bl	800de10 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800de8a:	88fb      	ldrh	r3, [r7, #6]
 800de8c:	3301      	adds	r3, #1
 800de8e:	80fb      	strh	r3, [r7, #6]
 800de90:	88fb      	ldrh	r3, [r7, #6]
 800de92:	2b0d      	cmp	r3, #13
 800de94:	d9f2      	bls.n	800de7c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800de96:	bf00      	nop
 800de98:	bf00      	nop
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	0801dcfc 	.word	0x0801dcfc

0800dea4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800deac:	f00a fe96 	bl	8018bdc <sys_arch_protect>
 800deb0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	689b      	ldr	r3, [r3, #8]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d015      	beq.n	800deec <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	689b      	ldr	r3, [r3, #8]
 800dec4:	68ba      	ldr	r2, [r7, #8]
 800dec6:	6812      	ldr	r2, [r2, #0]
 800dec8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	f003 0303 	and.w	r3, r3, #3
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d006      	beq.n	800dee2 <do_memp_malloc_pool+0x3e>
 800ded4:	4b09      	ldr	r3, [pc, #36]	; (800defc <do_memp_malloc_pool+0x58>)
 800ded6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800deda:	4909      	ldr	r1, [pc, #36]	; (800df00 <do_memp_malloc_pool+0x5c>)
 800dedc:	4809      	ldr	r0, [pc, #36]	; (800df04 <do_memp_malloc_pool+0x60>)
 800dede:	f00a ff95 	bl	8018e0c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f00a fe88 	bl	8018bf8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	e003      	b.n	800def4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f00a fe83 	bl	8018bf8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800def2:	2300      	movs	r3, #0
}
 800def4:	4618      	mov	r0, r3
 800def6:	3710      	adds	r7, #16
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}
 800defc:	0801b0a0 	.word	0x0801b0a0
 800df00:	0801b0d0 	.word	0x0801b0d0
 800df04:	0801b0f4 	.word	0x0801b0f4

0800df08 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b084      	sub	sp, #16
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	4603      	mov	r3, r0
 800df10:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800df12:	79fb      	ldrb	r3, [r7, #7]
 800df14:	2b0d      	cmp	r3, #13
 800df16:	d908      	bls.n	800df2a <memp_malloc+0x22>
 800df18:	4b0a      	ldr	r3, [pc, #40]	; (800df44 <memp_malloc+0x3c>)
 800df1a:	f240 1257 	movw	r2, #343	; 0x157
 800df1e:	490a      	ldr	r1, [pc, #40]	; (800df48 <memp_malloc+0x40>)
 800df20:	480a      	ldr	r0, [pc, #40]	; (800df4c <memp_malloc+0x44>)
 800df22:	f00a ff73 	bl	8018e0c <iprintf>
 800df26:	2300      	movs	r3, #0
 800df28:	e008      	b.n	800df3c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800df2a:	79fb      	ldrb	r3, [r7, #7]
 800df2c:	4a08      	ldr	r2, [pc, #32]	; (800df50 <memp_malloc+0x48>)
 800df2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df32:	4618      	mov	r0, r3
 800df34:	f7ff ffb6 	bl	800dea4 <do_memp_malloc_pool>
 800df38:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800df3a:	68fb      	ldr	r3, [r7, #12]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	0801b0a0 	.word	0x0801b0a0
 800df48:	0801b130 	.word	0x0801b130
 800df4c:	0801b0f4 	.word	0x0801b0f4
 800df50:	0801dcfc 	.word	0x0801dcfc

0800df54 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	b084      	sub	sp, #16
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
 800df5c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	f003 0303 	and.w	r3, r3, #3
 800df64:	2b00      	cmp	r3, #0
 800df66:	d006      	beq.n	800df76 <do_memp_free_pool+0x22>
 800df68:	4b0d      	ldr	r3, [pc, #52]	; (800dfa0 <do_memp_free_pool+0x4c>)
 800df6a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800df6e:	490d      	ldr	r1, [pc, #52]	; (800dfa4 <do_memp_free_pool+0x50>)
 800df70:	480d      	ldr	r0, [pc, #52]	; (800dfa8 <do_memp_free_pool+0x54>)
 800df72:	f00a ff4b 	bl	8018e0c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800df7a:	f00a fe2f 	bl	8018bdc <sys_arch_protect>
 800df7e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	689b      	ldr	r3, [r3, #8]
 800df84:	681a      	ldr	r2, [r3, #0]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	68fa      	ldr	r2, [r7, #12]
 800df90:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800df92:	68b8      	ldr	r0, [r7, #8]
 800df94:	f00a fe30 	bl	8018bf8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800df98:	bf00      	nop
 800df9a:	3710      	adds	r7, #16
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	0801b0a0 	.word	0x0801b0a0
 800dfa4:	0801b150 	.word	0x0801b150
 800dfa8:	0801b0f4 	.word	0x0801b0f4

0800dfac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b082      	sub	sp, #8
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	6039      	str	r1, [r7, #0]
 800dfb6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800dfb8:	79fb      	ldrb	r3, [r7, #7]
 800dfba:	2b0d      	cmp	r3, #13
 800dfbc:	d907      	bls.n	800dfce <memp_free+0x22>
 800dfbe:	4b0c      	ldr	r3, [pc, #48]	; (800dff0 <memp_free+0x44>)
 800dfc0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800dfc4:	490b      	ldr	r1, [pc, #44]	; (800dff4 <memp_free+0x48>)
 800dfc6:	480c      	ldr	r0, [pc, #48]	; (800dff8 <memp_free+0x4c>)
 800dfc8:	f00a ff20 	bl	8018e0c <iprintf>
 800dfcc:	e00c      	b.n	800dfe8 <memp_free+0x3c>

  if (mem == NULL) {
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d008      	beq.n	800dfe6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800dfd4:	79fb      	ldrb	r3, [r7, #7]
 800dfd6:	4a09      	ldr	r2, [pc, #36]	; (800dffc <memp_free+0x50>)
 800dfd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfdc:	6839      	ldr	r1, [r7, #0]
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7ff ffb8 	bl	800df54 <do_memp_free_pool>
 800dfe4:	e000      	b.n	800dfe8 <memp_free+0x3c>
    return;
 800dfe6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800dfe8:	3708      	adds	r7, #8
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	0801b0a0 	.word	0x0801b0a0
 800dff4:	0801b170 	.word	0x0801b170
 800dff8:	0801b0f4 	.word	0x0801b0f4
 800dffc:	0801dcfc 	.word	0x0801dcfc

0800e000 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e000:	b480      	push	{r7}
 800e002:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e004:	bf00      	nop
 800e006:	46bd      	mov	sp, r7
 800e008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00c:	4770      	bx	lr
	...

0800e010 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b086      	sub	sp, #24
 800e014:	af00      	add	r7, sp, #0
 800e016:	60f8      	str	r0, [r7, #12]
 800e018:	60b9      	str	r1, [r7, #8]
 800e01a:	607a      	str	r2, [r7, #4]
 800e01c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d108      	bne.n	800e036 <netif_add+0x26>
 800e024:	4b57      	ldr	r3, [pc, #348]	; (800e184 <netif_add+0x174>)
 800e026:	f240 1227 	movw	r2, #295	; 0x127
 800e02a:	4957      	ldr	r1, [pc, #348]	; (800e188 <netif_add+0x178>)
 800e02c:	4857      	ldr	r0, [pc, #348]	; (800e18c <netif_add+0x17c>)
 800e02e:	f00a feed 	bl	8018e0c <iprintf>
 800e032:	2300      	movs	r3, #0
 800e034:	e0a2      	b.n	800e17c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d108      	bne.n	800e04e <netif_add+0x3e>
 800e03c:	4b51      	ldr	r3, [pc, #324]	; (800e184 <netif_add+0x174>)
 800e03e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e042:	4953      	ldr	r1, [pc, #332]	; (800e190 <netif_add+0x180>)
 800e044:	4851      	ldr	r0, [pc, #324]	; (800e18c <netif_add+0x17c>)
 800e046:	f00a fee1 	bl	8018e0c <iprintf>
 800e04a:	2300      	movs	r3, #0
 800e04c:	e096      	b.n	800e17c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d101      	bne.n	800e058 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e054:	4b4f      	ldr	r3, [pc, #316]	; (800e194 <netif_add+0x184>)
 800e056:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d101      	bne.n	800e062 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e05e:	4b4d      	ldr	r3, [pc, #308]	; (800e194 <netif_add+0x184>)
 800e060:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d101      	bne.n	800e06c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e068:	4b4a      	ldr	r3, [pc, #296]	; (800e194 <netif_add+0x184>)
 800e06a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	2200      	movs	r2, #0
 800e070:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	2200      	movs	r2, #0
 800e07c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	4a45      	ldr	r2, [pc, #276]	; (800e198 <netif_add+0x188>)
 800e082:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2200      	movs	r2, #0
 800e088:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2200      	movs	r2, #0
 800e096:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6a3a      	ldr	r2, [r7, #32]
 800e09c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e09e:	4b3f      	ldr	r3, [pc, #252]	; (800e19c <netif_add+0x18c>)
 800e0a0:	781a      	ldrb	r2, [r3, #0]
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e0ac:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	68b9      	ldr	r1, [r7, #8]
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f000 f913 	bl	800e2e0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0bc:	68f8      	ldr	r0, [r7, #12]
 800e0be:	4798      	blx	r3
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d001      	beq.n	800e0ca <netif_add+0xba>
    return NULL;
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	e058      	b.n	800e17c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e0d0:	2bff      	cmp	r3, #255	; 0xff
 800e0d2:	d103      	bne.n	800e0dc <netif_add+0xcc>
        netif->num = 0;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e0e0:	4b2f      	ldr	r3, [pc, #188]	; (800e1a0 <netif_add+0x190>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	617b      	str	r3, [r7, #20]
 800e0e6:	e02b      	b.n	800e140 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e0e8:	697a      	ldr	r2, [r7, #20]
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d106      	bne.n	800e0fe <netif_add+0xee>
 800e0f0:	4b24      	ldr	r3, [pc, #144]	; (800e184 <netif_add+0x174>)
 800e0f2:	f240 128b 	movw	r2, #395	; 0x18b
 800e0f6:	492b      	ldr	r1, [pc, #172]	; (800e1a4 <netif_add+0x194>)
 800e0f8:	4824      	ldr	r0, [pc, #144]	; (800e18c <netif_add+0x17c>)
 800e0fa:	f00a fe87 	bl	8018e0c <iprintf>
        num_netifs++;
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	3301      	adds	r3, #1
 800e102:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	2bff      	cmp	r3, #255	; 0xff
 800e108:	dd06      	ble.n	800e118 <netif_add+0x108>
 800e10a:	4b1e      	ldr	r3, [pc, #120]	; (800e184 <netif_add+0x174>)
 800e10c:	f240 128d 	movw	r2, #397	; 0x18d
 800e110:	4925      	ldr	r1, [pc, #148]	; (800e1a8 <netif_add+0x198>)
 800e112:	481e      	ldr	r0, [pc, #120]	; (800e18c <netif_add+0x17c>)
 800e114:	f00a fe7a 	bl	8018e0c <iprintf>
        if (netif2->num == netif->num) {
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e124:	429a      	cmp	r2, r3
 800e126:	d108      	bne.n	800e13a <netif_add+0x12a>
          netif->num++;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e12e:	3301      	adds	r3, #1
 800e130:	b2da      	uxtb	r2, r3
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800e138:	e005      	b.n	800e146 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	617b      	str	r3, [r7, #20]
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d1d0      	bne.n	800e0e8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1be      	bne.n	800e0ca <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e152:	2bfe      	cmp	r3, #254	; 0xfe
 800e154:	d103      	bne.n	800e15e <netif_add+0x14e>
    netif_num = 0;
 800e156:	4b11      	ldr	r3, [pc, #68]	; (800e19c <netif_add+0x18c>)
 800e158:	2200      	movs	r2, #0
 800e15a:	701a      	strb	r2, [r3, #0]
 800e15c:	e006      	b.n	800e16c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e164:	3301      	adds	r3, #1
 800e166:	b2da      	uxtb	r2, r3
 800e168:	4b0c      	ldr	r3, [pc, #48]	; (800e19c <netif_add+0x18c>)
 800e16a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e16c:	4b0c      	ldr	r3, [pc, #48]	; (800e1a0 <netif_add+0x190>)
 800e16e:	681a      	ldr	r2, [r3, #0]
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e174:	4a0a      	ldr	r2, [pc, #40]	; (800e1a0 <netif_add+0x190>)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e17a:	68fb      	ldr	r3, [r7, #12]
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3718      	adds	r7, #24
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}
 800e184:	0801b18c 	.word	0x0801b18c
 800e188:	0801b220 	.word	0x0801b220
 800e18c:	0801b1dc 	.word	0x0801b1dc
 800e190:	0801b23c 	.word	0x0801b23c
 800e194:	0801dd7c 	.word	0x0801dd7c
 800e198:	0800e5bb 	.word	0x0800e5bb
 800e19c:	20004ed8 	.word	0x20004ed8
 800e1a0:	2000bc98 	.word	0x2000bc98
 800e1a4:	0801b260 	.word	0x0801b260
 800e1a8:	0801b274 	.word	0x0801b274

0800e1ac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e1b6:	6839      	ldr	r1, [r7, #0]
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f002 ffeb 	bl	8011194 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e1be:	6839      	ldr	r1, [r7, #0]
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f008 f883 	bl	80162cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e1c6:	bf00      	nop
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
	...

0800e1d0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b086      	sub	sp, #24
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	60f8      	str	r0, [r7, #12]
 800e1d8:	60b9      	str	r1, [r7, #8]
 800e1da:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d106      	bne.n	800e1f0 <netif_do_set_ipaddr+0x20>
 800e1e2:	4b1d      	ldr	r3, [pc, #116]	; (800e258 <netif_do_set_ipaddr+0x88>)
 800e1e4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e1e8:	491c      	ldr	r1, [pc, #112]	; (800e25c <netif_do_set_ipaddr+0x8c>)
 800e1ea:	481d      	ldr	r0, [pc, #116]	; (800e260 <netif_do_set_ipaddr+0x90>)
 800e1ec:	f00a fe0e 	bl	8018e0c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d106      	bne.n	800e204 <netif_do_set_ipaddr+0x34>
 800e1f6:	4b18      	ldr	r3, [pc, #96]	; (800e258 <netif_do_set_ipaddr+0x88>)
 800e1f8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e1fc:	4917      	ldr	r1, [pc, #92]	; (800e25c <netif_do_set_ipaddr+0x8c>)
 800e1fe:	4818      	ldr	r0, [pc, #96]	; (800e260 <netif_do_set_ipaddr+0x90>)
 800e200:	f00a fe04 	bl	8018e0c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	681a      	ldr	r2, [r3, #0]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	3304      	adds	r3, #4
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	429a      	cmp	r2, r3
 800e210:	d01c      	beq.n	800e24c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e212:	68bb      	ldr	r3, [r7, #8]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	3304      	adds	r3, #4
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e222:	f107 0314 	add.w	r3, r7, #20
 800e226:	4619      	mov	r1, r3
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f7ff ffbf 	bl	800e1ac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d002      	beq.n	800e23a <netif_do_set_ipaddr+0x6a>
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	e000      	b.n	800e23c <netif_do_set_ipaddr+0x6c>
 800e23a:	2300      	movs	r3, #0
 800e23c:	68fa      	ldr	r2, [r7, #12]
 800e23e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e240:	2101      	movs	r1, #1
 800e242:	68f8      	ldr	r0, [r7, #12]
 800e244:	f000 f8d2 	bl	800e3ec <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e248:	2301      	movs	r3, #1
 800e24a:	e000      	b.n	800e24e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e24c:	2300      	movs	r3, #0
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3718      	adds	r7, #24
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}
 800e256:	bf00      	nop
 800e258:	0801b18c 	.word	0x0801b18c
 800e25c:	0801b2a4 	.word	0x0801b2a4
 800e260:	0801b1dc 	.word	0x0801b1dc

0800e264 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e264:	b480      	push	{r7}
 800e266:	b085      	sub	sp, #20
 800e268:	af00      	add	r7, sp, #0
 800e26a:	60f8      	str	r0, [r7, #12]
 800e26c:	60b9      	str	r1, [r7, #8]
 800e26e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	3308      	adds	r3, #8
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	429a      	cmp	r2, r3
 800e27c:	d00a      	beq.n	800e294 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d002      	beq.n	800e28a <netif_do_set_netmask+0x26>
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	e000      	b.n	800e28c <netif_do_set_netmask+0x28>
 800e28a:	2300      	movs	r3, #0
 800e28c:	68fa      	ldr	r2, [r7, #12]
 800e28e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e290:	2301      	movs	r3, #1
 800e292:	e000      	b.n	800e296 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3714      	adds	r7, #20
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr

0800e2a2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e2a2:	b480      	push	{r7}
 800e2a4:	b085      	sub	sp, #20
 800e2a6:	af00      	add	r7, sp, #0
 800e2a8:	60f8      	str	r0, [r7, #12]
 800e2aa:	60b9      	str	r1, [r7, #8]
 800e2ac:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	681a      	ldr	r2, [r3, #0]
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	330c      	adds	r3, #12
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d00a      	beq.n	800e2d2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e2bc:	68bb      	ldr	r3, [r7, #8]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d002      	beq.n	800e2c8 <netif_do_set_gw+0x26>
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	e000      	b.n	800e2ca <netif_do_set_gw+0x28>
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	68fa      	ldr	r2, [r7, #12]
 800e2cc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e2ce:	2301      	movs	r3, #1
 800e2d0:	e000      	b.n	800e2d4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e2d2:	2300      	movs	r3, #0
}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3714      	adds	r7, #20
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2de:	4770      	bx	lr

0800e2e0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b088      	sub	sp, #32
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
 800e2ec:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d101      	bne.n	800e300 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e2fc:	4b1c      	ldr	r3, [pc, #112]	; (800e370 <netif_set_addr+0x90>)
 800e2fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d101      	bne.n	800e30a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e306:	4b1a      	ldr	r3, [pc, #104]	; (800e370 <netif_set_addr+0x90>)
 800e308:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e30a:	683b      	ldr	r3, [r7, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d101      	bne.n	800e314 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e310:	4b17      	ldr	r3, [pc, #92]	; (800e370 <netif_set_addr+0x90>)
 800e312:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d003      	beq.n	800e322 <netif_set_addr+0x42>
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d101      	bne.n	800e326 <netif_set_addr+0x46>
 800e322:	2301      	movs	r3, #1
 800e324:	e000      	b.n	800e328 <netif_set_addr+0x48>
 800e326:	2300      	movs	r3, #0
 800e328:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d006      	beq.n	800e33e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e330:	f107 0310 	add.w	r3, r7, #16
 800e334:	461a      	mov	r2, r3
 800e336:	68b9      	ldr	r1, [r7, #8]
 800e338:	68f8      	ldr	r0, [r7, #12]
 800e33a:	f7ff ff49 	bl	800e1d0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e33e:	69fa      	ldr	r2, [r7, #28]
 800e340:	6879      	ldr	r1, [r7, #4]
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f7ff ff8e 	bl	800e264 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e348:	69ba      	ldr	r2, [r7, #24]
 800e34a:	6839      	ldr	r1, [r7, #0]
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f7ff ffa8 	bl	800e2a2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d106      	bne.n	800e366 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e358:	f107 0310 	add.w	r3, r7, #16
 800e35c:	461a      	mov	r2, r3
 800e35e:	68b9      	ldr	r1, [r7, #8]
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f7ff ff35 	bl	800e1d0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e366:	bf00      	nop
 800e368:	3720      	adds	r7, #32
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	0801dd7c 	.word	0x0801dd7c

0800e374 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e37c:	4a04      	ldr	r2, [pc, #16]	; (800e390 <netif_set_default+0x1c>)
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e382:	bf00      	nop
 800e384:	370c      	adds	r7, #12
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
 800e38e:	bf00      	nop
 800e390:	2000bc9c 	.word	0x2000bc9c

0800e394 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d107      	bne.n	800e3b2 <netif_set_up+0x1e>
 800e3a2:	4b0f      	ldr	r3, [pc, #60]	; (800e3e0 <netif_set_up+0x4c>)
 800e3a4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e3a8:	490e      	ldr	r1, [pc, #56]	; (800e3e4 <netif_set_up+0x50>)
 800e3aa:	480f      	ldr	r0, [pc, #60]	; (800e3e8 <netif_set_up+0x54>)
 800e3ac:	f00a fd2e 	bl	8018e0c <iprintf>
 800e3b0:	e013      	b.n	800e3da <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3b8:	f003 0301 	and.w	r3, r3, #1
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d10c      	bne.n	800e3da <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3c6:	f043 0301 	orr.w	r3, r3, #1
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e3d2:	2103      	movs	r1, #3
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 f809 	bl	800e3ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	0801b18c 	.word	0x0801b18c
 800e3e4:	0801b314 	.word	0x0801b314
 800e3e8:	0801b1dc 	.word	0x0801b1dc

0800e3ec <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d106      	bne.n	800e40c <netif_issue_reports+0x20>
 800e3fe:	4b18      	ldr	r3, [pc, #96]	; (800e460 <netif_issue_reports+0x74>)
 800e400:	f240 326d 	movw	r2, #877	; 0x36d
 800e404:	4917      	ldr	r1, [pc, #92]	; (800e464 <netif_issue_reports+0x78>)
 800e406:	4818      	ldr	r0, [pc, #96]	; (800e468 <netif_issue_reports+0x7c>)
 800e408:	f00a fd00 	bl	8018e0c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e412:	f003 0304 	and.w	r3, r3, #4
 800e416:	2b00      	cmp	r3, #0
 800e418:	d01e      	beq.n	800e458 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e420:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e424:	2b00      	cmp	r3, #0
 800e426:	d017      	beq.n	800e458 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e428:	78fb      	ldrb	r3, [r7, #3]
 800e42a:	f003 0301 	and.w	r3, r3, #1
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d013      	beq.n	800e45a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	3304      	adds	r3, #4
 800e436:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00e      	beq.n	800e45a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e442:	f003 0308 	and.w	r3, r3, #8
 800e446:	2b00      	cmp	r3, #0
 800e448:	d007      	beq.n	800e45a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	3304      	adds	r3, #4
 800e44e:	4619      	mov	r1, r3
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f008 fea5 	bl	80171a0 <etharp_request>
 800e456:	e000      	b.n	800e45a <netif_issue_reports+0x6e>
    return;
 800e458:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e45a:	3708      	adds	r7, #8
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}
 800e460:	0801b18c 	.word	0x0801b18c
 800e464:	0801b330 	.word	0x0801b330
 800e468:	0801b1dc 	.word	0x0801b1dc

0800e46c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b082      	sub	sp, #8
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2b00      	cmp	r3, #0
 800e478:	d107      	bne.n	800e48a <netif_set_down+0x1e>
 800e47a:	4b12      	ldr	r3, [pc, #72]	; (800e4c4 <netif_set_down+0x58>)
 800e47c:	f240 329b 	movw	r2, #923	; 0x39b
 800e480:	4911      	ldr	r1, [pc, #68]	; (800e4c8 <netif_set_down+0x5c>)
 800e482:	4812      	ldr	r0, [pc, #72]	; (800e4cc <netif_set_down+0x60>)
 800e484:	f00a fcc2 	bl	8018e0c <iprintf>
 800e488:	e019      	b.n	800e4be <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e490:	f003 0301 	and.w	r3, r3, #1
 800e494:	2b00      	cmp	r3, #0
 800e496:	d012      	beq.n	800e4be <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e49e:	f023 0301 	bic.w	r3, r3, #1
 800e4a2:	b2da      	uxtb	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4b0:	f003 0308 	and.w	r3, r3, #8
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d002      	beq.n	800e4be <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f008 fa2f 	bl	801691c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	0801b18c 	.word	0x0801b18c
 800e4c8:	0801b354 	.word	0x0801b354
 800e4cc:	0801b1dc 	.word	0x0801b1dc

0800e4d0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b082      	sub	sp, #8
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d107      	bne.n	800e4ee <netif_set_link_up+0x1e>
 800e4de:	4b13      	ldr	r3, [pc, #76]	; (800e52c <netif_set_link_up+0x5c>)
 800e4e0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e4e4:	4912      	ldr	r1, [pc, #72]	; (800e530 <netif_set_link_up+0x60>)
 800e4e6:	4813      	ldr	r0, [pc, #76]	; (800e534 <netif_set_link_up+0x64>)
 800e4e8:	f00a fc90 	bl	8018e0c <iprintf>
 800e4ec:	e01b      	b.n	800e526 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e4f4:	f003 0304 	and.w	r3, r3, #4
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d114      	bne.n	800e526 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e502:	f043 0304 	orr.w	r3, r3, #4
 800e506:	b2da      	uxtb	r2, r3
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e50e:	2103      	movs	r1, #3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7ff ff6b 	bl	800e3ec <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	69db      	ldr	r3, [r3, #28]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d003      	beq.n	800e526 <netif_set_link_up+0x56>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	69db      	ldr	r3, [r3, #28]
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e526:	3708      	adds	r7, #8
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	0801b18c 	.word	0x0801b18c
 800e530:	0801b374 	.word	0x0801b374
 800e534:	0801b1dc 	.word	0x0801b1dc

0800e538 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b082      	sub	sp, #8
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d107      	bne.n	800e556 <netif_set_link_down+0x1e>
 800e546:	4b11      	ldr	r3, [pc, #68]	; (800e58c <netif_set_link_down+0x54>)
 800e548:	f240 4206 	movw	r2, #1030	; 0x406
 800e54c:	4910      	ldr	r1, [pc, #64]	; (800e590 <netif_set_link_down+0x58>)
 800e54e:	4811      	ldr	r0, [pc, #68]	; (800e594 <netif_set_link_down+0x5c>)
 800e550:	f00a fc5c 	bl	8018e0c <iprintf>
 800e554:	e017      	b.n	800e586 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e55c:	f003 0304 	and.w	r3, r3, #4
 800e560:	2b00      	cmp	r3, #0
 800e562:	d010      	beq.n	800e586 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e56a:	f023 0304 	bic.w	r3, r3, #4
 800e56e:	b2da      	uxtb	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	69db      	ldr	r3, [r3, #28]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d003      	beq.n	800e586 <netif_set_link_down+0x4e>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	69db      	ldr	r3, [r3, #28]
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	0801b18c 	.word	0x0801b18c
 800e590:	0801b398 	.word	0x0801b398
 800e594:	0801b1dc 	.word	0x0801b1dc

0800e598 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d002      	beq.n	800e5ae <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	683a      	ldr	r2, [r7, #0]
 800e5ac:	61da      	str	r2, [r3, #28]
  }
}
 800e5ae:	bf00      	nop
 800e5b0:	370c      	adds	r7, #12
 800e5b2:	46bd      	mov	sp, r7
 800e5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b8:	4770      	bx	lr

0800e5ba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e5ba:	b480      	push	{r7}
 800e5bc:	b085      	sub	sp, #20
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	60f8      	str	r0, [r7, #12]
 800e5c2:	60b9      	str	r1, [r7, #8]
 800e5c4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e5c6:	f06f 030b 	mvn.w	r3, #11
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3714      	adds	r7, #20
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr
	...

0800e5d8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	4603      	mov	r3, r0
 800e5e0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e5e2:	79fb      	ldrb	r3, [r7, #7]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d013      	beq.n	800e610 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e5e8:	4b0d      	ldr	r3, [pc, #52]	; (800e620 <netif_get_by_index+0x48>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	60fb      	str	r3, [r7, #12]
 800e5ee:	e00c      	b.n	800e60a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	b2db      	uxtb	r3, r3
 800e5fa:	79fa      	ldrb	r2, [r7, #7]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d101      	bne.n	800e604 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	e006      	b.n	800e612 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	60fb      	str	r3, [r7, #12]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d1ef      	bne.n	800e5f0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e610:	2300      	movs	r3, #0
}
 800e612:	4618      	mov	r0, r3
 800e614:	3714      	adds	r7, #20
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
 800e61e:	bf00      	nop
 800e620:	2000bc98 	.word	0x2000bc98

0800e624 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800e62a:	f00a fad7 	bl	8018bdc <sys_arch_protect>
 800e62e:	6038      	str	r0, [r7, #0]
 800e630:	4b0d      	ldr	r3, [pc, #52]	; (800e668 <pbuf_free_ooseq+0x44>)
 800e632:	2200      	movs	r2, #0
 800e634:	701a      	strb	r2, [r3, #0]
 800e636:	6838      	ldr	r0, [r7, #0]
 800e638:	f00a fade 	bl	8018bf8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e63c:	4b0b      	ldr	r3, [pc, #44]	; (800e66c <pbuf_free_ooseq+0x48>)
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	607b      	str	r3, [r7, #4]
 800e642:	e00a      	b.n	800e65a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d003      	beq.n	800e654 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f002 fddf 	bl	8011210 <tcp_free_ooseq>
      return;
 800e652:	e005      	b.n	800e660 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	68db      	ldr	r3, [r3, #12]
 800e658:	607b      	str	r3, [r7, #4]
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1f1      	bne.n	800e644 <pbuf_free_ooseq+0x20>
    }
  }
}
 800e660:	3708      	adds	r7, #8
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
 800e666:	bf00      	nop
 800e668:	2000bca0 	.word	0x2000bca0
 800e66c:	2000bca8 	.word	0x2000bca8

0800e670 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b082      	sub	sp, #8
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800e678:	f7ff ffd4 	bl	800e624 <pbuf_free_ooseq>
}
 800e67c:	bf00      	nop
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}

0800e684 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b082      	sub	sp, #8
 800e688:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800e68a:	f00a faa7 	bl	8018bdc <sys_arch_protect>
 800e68e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800e690:	4b0f      	ldr	r3, [pc, #60]	; (800e6d0 <pbuf_pool_is_empty+0x4c>)
 800e692:	781b      	ldrb	r3, [r3, #0]
 800e694:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800e696:	4b0e      	ldr	r3, [pc, #56]	; (800e6d0 <pbuf_pool_is_empty+0x4c>)
 800e698:	2201      	movs	r2, #1
 800e69a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f00a faab 	bl	8018bf8 <sys_arch_unprotect>

  if (!queued) {
 800e6a2:	78fb      	ldrb	r3, [r7, #3]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d10f      	bne.n	800e6c8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800e6a8:	2100      	movs	r1, #0
 800e6aa:	480a      	ldr	r0, [pc, #40]	; (800e6d4 <pbuf_pool_is_empty+0x50>)
 800e6ac:	f7fe fc0c 	bl	800cec8 <tcpip_try_callback>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d008      	beq.n	800e6c8 <pbuf_pool_is_empty+0x44>
 800e6b6:	f00a fa91 	bl	8018bdc <sys_arch_protect>
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	4b04      	ldr	r3, [pc, #16]	; (800e6d0 <pbuf_pool_is_empty+0x4c>)
 800e6be:	2200      	movs	r2, #0
 800e6c0:	701a      	strb	r2, [r3, #0]
 800e6c2:	6878      	ldr	r0, [r7, #4]
 800e6c4:	f00a fa98 	bl	8018bf8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800e6c8:	bf00      	nop
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	2000bca0 	.word	0x2000bca0
 800e6d4:	0800e671 	.word	0x0800e671

0800e6d8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b085      	sub	sp, #20
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	4611      	mov	r1, r2
 800e6e4:	461a      	mov	r2, r3
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	80fb      	strh	r3, [r7, #6]
 800e6ea:	4613      	mov	r3, r2
 800e6ec:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	68ba      	ldr	r2, [r7, #8]
 800e6f8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	88fa      	ldrh	r2, [r7, #6]
 800e6fe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	88ba      	ldrh	r2, [r7, #4]
 800e704:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e706:	8b3b      	ldrh	r3, [r7, #24]
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	7f3a      	ldrb	r2, [r7, #28]
 800e712:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2201      	movs	r2, #1
 800e718:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2200      	movs	r2, #0
 800e71e:	73da      	strb	r2, [r3, #15]
}
 800e720:	bf00      	nop
 800e722:	3714      	adds	r7, #20
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b08c      	sub	sp, #48	; 0x30
 800e730:	af02      	add	r7, sp, #8
 800e732:	4603      	mov	r3, r0
 800e734:	71fb      	strb	r3, [r7, #7]
 800e736:	460b      	mov	r3, r1
 800e738:	80bb      	strh	r3, [r7, #4]
 800e73a:	4613      	mov	r3, r2
 800e73c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e73e:	79fb      	ldrb	r3, [r7, #7]
 800e740:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e742:	887b      	ldrh	r3, [r7, #2]
 800e744:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e748:	d07f      	beq.n	800e84a <pbuf_alloc+0x11e>
 800e74a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e74e:	f300 80c8 	bgt.w	800e8e2 <pbuf_alloc+0x1b6>
 800e752:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e756:	d010      	beq.n	800e77a <pbuf_alloc+0x4e>
 800e758:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e75c:	f300 80c1 	bgt.w	800e8e2 <pbuf_alloc+0x1b6>
 800e760:	2b01      	cmp	r3, #1
 800e762:	d002      	beq.n	800e76a <pbuf_alloc+0x3e>
 800e764:	2b41      	cmp	r3, #65	; 0x41
 800e766:	f040 80bc 	bne.w	800e8e2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e76a:	887a      	ldrh	r2, [r7, #2]
 800e76c:	88bb      	ldrh	r3, [r7, #4]
 800e76e:	4619      	mov	r1, r3
 800e770:	2000      	movs	r0, #0
 800e772:	f000 f8d1 	bl	800e918 <pbuf_alloc_reference>
 800e776:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e778:	e0bd      	b.n	800e8f6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e77a:	2300      	movs	r3, #0
 800e77c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e77e:	2300      	movs	r3, #0
 800e780:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e782:	88bb      	ldrh	r3, [r7, #4]
 800e784:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e786:	200d      	movs	r0, #13
 800e788:	f7ff fbbe 	bl	800df08 <memp_malloc>
 800e78c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d109      	bne.n	800e7a8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e794:	f7ff ff76 	bl	800e684 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d002      	beq.n	800e7a4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e79e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7a0:	f000 fada 	bl	800ed58 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	e0a7      	b.n	800e8f8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e7a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7aa:	3303      	adds	r3, #3
 800e7ac:	b29b      	uxth	r3, r3
 800e7ae:	f023 0303 	bic.w	r3, r3, #3
 800e7b2:	b29b      	uxth	r3, r3
 800e7b4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	8b7a      	ldrh	r2, [r7, #26]
 800e7bc:	4293      	cmp	r3, r2
 800e7be:	bf28      	it	cs
 800e7c0:	4613      	movcs	r3, r2
 800e7c2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e7c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e7c6:	3310      	adds	r3, #16
 800e7c8:	693a      	ldr	r2, [r7, #16]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	3303      	adds	r3, #3
 800e7ce:	f023 0303 	bic.w	r3, r3, #3
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	89f9      	ldrh	r1, [r7, #14]
 800e7d6:	8b7a      	ldrh	r2, [r7, #26]
 800e7d8:	2300      	movs	r3, #0
 800e7da:	9301      	str	r3, [sp, #4]
 800e7dc:	887b      	ldrh	r3, [r7, #2]
 800e7de:	9300      	str	r3, [sp, #0]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	4601      	mov	r1, r0
 800e7e4:	6938      	ldr	r0, [r7, #16]
 800e7e6:	f7ff ff77 	bl	800e6d8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e7ea:	693b      	ldr	r3, [r7, #16]
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	f003 0303 	and.w	r3, r3, #3
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d006      	beq.n	800e804 <pbuf_alloc+0xd8>
 800e7f6:	4b42      	ldr	r3, [pc, #264]	; (800e900 <pbuf_alloc+0x1d4>)
 800e7f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e7fc:	4941      	ldr	r1, [pc, #260]	; (800e904 <pbuf_alloc+0x1d8>)
 800e7fe:	4842      	ldr	r0, [pc, #264]	; (800e908 <pbuf_alloc+0x1dc>)
 800e800:	f00a fb04 	bl	8018e0c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e804:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e806:	3303      	adds	r3, #3
 800e808:	f023 0303 	bic.w	r3, r3, #3
 800e80c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e810:	d106      	bne.n	800e820 <pbuf_alloc+0xf4>
 800e812:	4b3b      	ldr	r3, [pc, #236]	; (800e900 <pbuf_alloc+0x1d4>)
 800e814:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e818:	493c      	ldr	r1, [pc, #240]	; (800e90c <pbuf_alloc+0x1e0>)
 800e81a:	483b      	ldr	r0, [pc, #236]	; (800e908 <pbuf_alloc+0x1dc>)
 800e81c:	f00a faf6 	bl	8018e0c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e822:	2b00      	cmp	r3, #0
 800e824:	d102      	bne.n	800e82c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	627b      	str	r3, [r7, #36]	; 0x24
 800e82a:	e002      	b.n	800e832 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	693a      	ldr	r2, [r7, #16]
 800e830:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e836:	8b7a      	ldrh	r2, [r7, #26]
 800e838:	89fb      	ldrh	r3, [r7, #14]
 800e83a:	1ad3      	subs	r3, r2, r3
 800e83c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e83e:	2300      	movs	r3, #0
 800e840:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e842:	8b7b      	ldrh	r3, [r7, #26]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d19e      	bne.n	800e786 <pbuf_alloc+0x5a>
      break;
 800e848:	e055      	b.n	800e8f6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e84a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e84c:	3303      	adds	r3, #3
 800e84e:	b29b      	uxth	r3, r3
 800e850:	f023 0303 	bic.w	r3, r3, #3
 800e854:	b29a      	uxth	r2, r3
 800e856:	88bb      	ldrh	r3, [r7, #4]
 800e858:	3303      	adds	r3, #3
 800e85a:	b29b      	uxth	r3, r3
 800e85c:	f023 0303 	bic.w	r3, r3, #3
 800e860:	b29b      	uxth	r3, r3
 800e862:	4413      	add	r3, r2
 800e864:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e866:	8b3b      	ldrh	r3, [r7, #24]
 800e868:	3310      	adds	r3, #16
 800e86a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e86c:	8b3a      	ldrh	r2, [r7, #24]
 800e86e:	88bb      	ldrh	r3, [r7, #4]
 800e870:	3303      	adds	r3, #3
 800e872:	f023 0303 	bic.w	r3, r3, #3
 800e876:	429a      	cmp	r2, r3
 800e878:	d306      	bcc.n	800e888 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e87a:	8afa      	ldrh	r2, [r7, #22]
 800e87c:	88bb      	ldrh	r3, [r7, #4]
 800e87e:	3303      	adds	r3, #3
 800e880:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e884:	429a      	cmp	r2, r3
 800e886:	d201      	bcs.n	800e88c <pbuf_alloc+0x160>
        return NULL;
 800e888:	2300      	movs	r3, #0
 800e88a:	e035      	b.n	800e8f8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e88c:	8afb      	ldrh	r3, [r7, #22]
 800e88e:	4618      	mov	r0, r3
 800e890:	f7ff f9b8 	bl	800dc04 <mem_malloc>
 800e894:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d101      	bne.n	800e8a0 <pbuf_alloc+0x174>
        return NULL;
 800e89c:	2300      	movs	r3, #0
 800e89e:	e02b      	b.n	800e8f8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e8a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8a2:	3310      	adds	r3, #16
 800e8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8a6:	4413      	add	r3, r2
 800e8a8:	3303      	adds	r3, #3
 800e8aa:	f023 0303 	bic.w	r3, r3, #3
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	88b9      	ldrh	r1, [r7, #4]
 800e8b2:	88ba      	ldrh	r2, [r7, #4]
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	9301      	str	r3, [sp, #4]
 800e8b8:	887b      	ldrh	r3, [r7, #2]
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	460b      	mov	r3, r1
 800e8be:	4601      	mov	r1, r0
 800e8c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e8c2:	f7ff ff09 	bl	800e6d8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	f003 0303 	and.w	r3, r3, #3
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d010      	beq.n	800e8f4 <pbuf_alloc+0x1c8>
 800e8d2:	4b0b      	ldr	r3, [pc, #44]	; (800e900 <pbuf_alloc+0x1d4>)
 800e8d4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e8d8:	490d      	ldr	r1, [pc, #52]	; (800e910 <pbuf_alloc+0x1e4>)
 800e8da:	480b      	ldr	r0, [pc, #44]	; (800e908 <pbuf_alloc+0x1dc>)
 800e8dc:	f00a fa96 	bl	8018e0c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e8e0:	e008      	b.n	800e8f4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e8e2:	4b07      	ldr	r3, [pc, #28]	; (800e900 <pbuf_alloc+0x1d4>)
 800e8e4:	f240 1227 	movw	r2, #295	; 0x127
 800e8e8:	490a      	ldr	r1, [pc, #40]	; (800e914 <pbuf_alloc+0x1e8>)
 800e8ea:	4807      	ldr	r0, [pc, #28]	; (800e908 <pbuf_alloc+0x1dc>)
 800e8ec:	f00a fa8e 	bl	8018e0c <iprintf>
      return NULL;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	e001      	b.n	800e8f8 <pbuf_alloc+0x1cc>
      break;
 800e8f4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e8f8:	4618      	mov	r0, r3
 800e8fa:	3728      	adds	r7, #40	; 0x28
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	bd80      	pop	{r7, pc}
 800e900:	0801b3bc 	.word	0x0801b3bc
 800e904:	0801b3ec 	.word	0x0801b3ec
 800e908:	0801b41c 	.word	0x0801b41c
 800e90c:	0801b444 	.word	0x0801b444
 800e910:	0801b478 	.word	0x0801b478
 800e914:	0801b4a4 	.word	0x0801b4a4

0800e918 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b086      	sub	sp, #24
 800e91c:	af02      	add	r7, sp, #8
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	460b      	mov	r3, r1
 800e922:	807b      	strh	r3, [r7, #2]
 800e924:	4613      	mov	r3, r2
 800e926:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e928:	883b      	ldrh	r3, [r7, #0]
 800e92a:	2b41      	cmp	r3, #65	; 0x41
 800e92c:	d009      	beq.n	800e942 <pbuf_alloc_reference+0x2a>
 800e92e:	883b      	ldrh	r3, [r7, #0]
 800e930:	2b01      	cmp	r3, #1
 800e932:	d006      	beq.n	800e942 <pbuf_alloc_reference+0x2a>
 800e934:	4b0f      	ldr	r3, [pc, #60]	; (800e974 <pbuf_alloc_reference+0x5c>)
 800e936:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e93a:	490f      	ldr	r1, [pc, #60]	; (800e978 <pbuf_alloc_reference+0x60>)
 800e93c:	480f      	ldr	r0, [pc, #60]	; (800e97c <pbuf_alloc_reference+0x64>)
 800e93e:	f00a fa65 	bl	8018e0c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e942:	200c      	movs	r0, #12
 800e944:	f7ff fae0 	bl	800df08 <memp_malloc>
 800e948:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d101      	bne.n	800e954 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e950:	2300      	movs	r3, #0
 800e952:	e00b      	b.n	800e96c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e954:	8879      	ldrh	r1, [r7, #2]
 800e956:	887a      	ldrh	r2, [r7, #2]
 800e958:	2300      	movs	r3, #0
 800e95a:	9301      	str	r3, [sp, #4]
 800e95c:	883b      	ldrh	r3, [r7, #0]
 800e95e:	9300      	str	r3, [sp, #0]
 800e960:	460b      	mov	r3, r1
 800e962:	6879      	ldr	r1, [r7, #4]
 800e964:	68f8      	ldr	r0, [r7, #12]
 800e966:	f7ff feb7 	bl	800e6d8 <pbuf_init_alloced_pbuf>
  return p;
 800e96a:	68fb      	ldr	r3, [r7, #12]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3710      	adds	r7, #16
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}
 800e974:	0801b3bc 	.word	0x0801b3bc
 800e978:	0801b4c0 	.word	0x0801b4c0
 800e97c:	0801b41c 	.word	0x0801b41c

0800e980 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b088      	sub	sp, #32
 800e984:	af02      	add	r7, sp, #8
 800e986:	607b      	str	r3, [r7, #4]
 800e988:	4603      	mov	r3, r0
 800e98a:	73fb      	strb	r3, [r7, #15]
 800e98c:	460b      	mov	r3, r1
 800e98e:	81bb      	strh	r3, [r7, #12]
 800e990:	4613      	mov	r3, r2
 800e992:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e994:	7bfb      	ldrb	r3, [r7, #15]
 800e996:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e998:	8a7b      	ldrh	r3, [r7, #18]
 800e99a:	3303      	adds	r3, #3
 800e99c:	f023 0203 	bic.w	r2, r3, #3
 800e9a0:	89bb      	ldrh	r3, [r7, #12]
 800e9a2:	441a      	add	r2, r3
 800e9a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9a6:	429a      	cmp	r2, r3
 800e9a8:	d901      	bls.n	800e9ae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	e018      	b.n	800e9e0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e9ae:	6a3b      	ldr	r3, [r7, #32]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d007      	beq.n	800e9c4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e9b4:	8a7b      	ldrh	r3, [r7, #18]
 800e9b6:	3303      	adds	r3, #3
 800e9b8:	f023 0303 	bic.w	r3, r3, #3
 800e9bc:	6a3a      	ldr	r2, [r7, #32]
 800e9be:	4413      	add	r3, r2
 800e9c0:	617b      	str	r3, [r7, #20]
 800e9c2:	e001      	b.n	800e9c8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	89b9      	ldrh	r1, [r7, #12]
 800e9cc:	89ba      	ldrh	r2, [r7, #12]
 800e9ce:	2302      	movs	r3, #2
 800e9d0:	9301      	str	r3, [sp, #4]
 800e9d2:	897b      	ldrh	r3, [r7, #10]
 800e9d4:	9300      	str	r3, [sp, #0]
 800e9d6:	460b      	mov	r3, r1
 800e9d8:	6979      	ldr	r1, [r7, #20]
 800e9da:	f7ff fe7d 	bl	800e6d8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e9de:	687b      	ldr	r3, [r7, #4]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3718      	adds	r7, #24
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d106      	bne.n	800ea08 <pbuf_realloc+0x20>
 800e9fa:	4b3a      	ldr	r3, [pc, #232]	; (800eae4 <pbuf_realloc+0xfc>)
 800e9fc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ea00:	4939      	ldr	r1, [pc, #228]	; (800eae8 <pbuf_realloc+0x100>)
 800ea02:	483a      	ldr	r0, [pc, #232]	; (800eaec <pbuf_realloc+0x104>)
 800ea04:	f00a fa02 	bl	8018e0c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	891b      	ldrh	r3, [r3, #8]
 800ea0c:	887a      	ldrh	r2, [r7, #2]
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d263      	bcs.n	800eada <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	891a      	ldrh	r2, [r3, #8]
 800ea16:	887b      	ldrh	r3, [r7, #2]
 800ea18:	1ad3      	subs	r3, r2, r3
 800ea1a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ea1c:	887b      	ldrh	r3, [r7, #2]
 800ea1e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ea24:	e018      	b.n	800ea58 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	895b      	ldrh	r3, [r3, #10]
 800ea2a:	897a      	ldrh	r2, [r7, #10]
 800ea2c:	1ad3      	subs	r3, r2, r3
 800ea2e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	891a      	ldrh	r2, [r3, #8]
 800ea34:	893b      	ldrh	r3, [r7, #8]
 800ea36:	1ad3      	subs	r3, r2, r3
 800ea38:	b29a      	uxth	r2, r3
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d106      	bne.n	800ea58 <pbuf_realloc+0x70>
 800ea4a:	4b26      	ldr	r3, [pc, #152]	; (800eae4 <pbuf_realloc+0xfc>)
 800ea4c:	f240 12af 	movw	r2, #431	; 0x1af
 800ea50:	4927      	ldr	r1, [pc, #156]	; (800eaf0 <pbuf_realloc+0x108>)
 800ea52:	4826      	ldr	r0, [pc, #152]	; (800eaec <pbuf_realloc+0x104>)
 800ea54:	f00a f9da 	bl	8018e0c <iprintf>
  while (rem_len > q->len) {
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	895b      	ldrh	r3, [r3, #10]
 800ea5c:	897a      	ldrh	r2, [r7, #10]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d8e1      	bhi.n	800ea26 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	7b1b      	ldrb	r3, [r3, #12]
 800ea66:	f003 030f 	and.w	r3, r3, #15
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d121      	bne.n	800eab2 <pbuf_realloc+0xca>
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	895b      	ldrh	r3, [r3, #10]
 800ea72:	897a      	ldrh	r2, [r7, #10]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d01c      	beq.n	800eab2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	7b5b      	ldrb	r3, [r3, #13]
 800ea7c:	f003 0302 	and.w	r3, r3, #2
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d116      	bne.n	800eab2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	685a      	ldr	r2, [r3, #4]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	1ad3      	subs	r3, r2, r3
 800ea8c:	b29a      	uxth	r2, r3
 800ea8e:	897b      	ldrh	r3, [r7, #10]
 800ea90:	4413      	add	r3, r2
 800ea92:	b29b      	uxth	r3, r3
 800ea94:	4619      	mov	r1, r3
 800ea96:	68f8      	ldr	r0, [r7, #12]
 800ea98:	f7fe ffaa 	bl	800d9f0 <mem_trim>
 800ea9c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d106      	bne.n	800eab2 <pbuf_realloc+0xca>
 800eaa4:	4b0f      	ldr	r3, [pc, #60]	; (800eae4 <pbuf_realloc+0xfc>)
 800eaa6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800eaaa:	4912      	ldr	r1, [pc, #72]	; (800eaf4 <pbuf_realloc+0x10c>)
 800eaac:	480f      	ldr	r0, [pc, #60]	; (800eaec <pbuf_realloc+0x104>)
 800eaae:	f00a f9ad 	bl	8018e0c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	897a      	ldrh	r2, [r7, #10]
 800eab6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	895a      	ldrh	r2, [r3, #10]
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d004      	beq.n	800ead2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	4618      	mov	r0, r3
 800eace:	f000 f943 	bl	800ed58 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2200      	movs	r2, #0
 800ead6:	601a      	str	r2, [r3, #0]
 800ead8:	e000      	b.n	800eadc <pbuf_realloc+0xf4>
    return;
 800eada:	bf00      	nop

}
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
 800eae2:	bf00      	nop
 800eae4:	0801b3bc 	.word	0x0801b3bc
 800eae8:	0801b4d4 	.word	0x0801b4d4
 800eaec:	0801b41c 	.word	0x0801b41c
 800eaf0:	0801b4ec 	.word	0x0801b4ec
 800eaf4:	0801b504 	.word	0x0801b504

0800eaf8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b086      	sub	sp, #24
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	4613      	mov	r3, r2
 800eb04:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d106      	bne.n	800eb1a <pbuf_add_header_impl+0x22>
 800eb0c:	4b2b      	ldr	r3, [pc, #172]	; (800ebbc <pbuf_add_header_impl+0xc4>)
 800eb0e:	f240 12df 	movw	r2, #479	; 0x1df
 800eb12:	492b      	ldr	r1, [pc, #172]	; (800ebc0 <pbuf_add_header_impl+0xc8>)
 800eb14:	482b      	ldr	r0, [pc, #172]	; (800ebc4 <pbuf_add_header_impl+0xcc>)
 800eb16:	f00a f979 	bl	8018e0c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d003      	beq.n	800eb28 <pbuf_add_header_impl+0x30>
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb26:	d301      	bcc.n	800eb2c <pbuf_add_header_impl+0x34>
    return 1;
 800eb28:	2301      	movs	r3, #1
 800eb2a:	e043      	b.n	800ebb4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <pbuf_add_header_impl+0x3e>
    return 0;
 800eb32:	2300      	movs	r3, #0
 800eb34:	e03e      	b.n	800ebb4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800eb36:	68bb      	ldr	r3, [r7, #8]
 800eb38:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	891a      	ldrh	r2, [r3, #8]
 800eb3e:	8a7b      	ldrh	r3, [r7, #18]
 800eb40:	4413      	add	r3, r2
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	8a7a      	ldrh	r2, [r7, #18]
 800eb46:	429a      	cmp	r2, r3
 800eb48:	d901      	bls.n	800eb4e <pbuf_add_header_impl+0x56>
    return 1;
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	e032      	b.n	800ebb4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	7b1b      	ldrb	r3, [r3, #12]
 800eb52:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800eb54:	8a3b      	ldrh	r3, [r7, #16]
 800eb56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00c      	beq.n	800eb78 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	685a      	ldr	r2, [r3, #4]
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	425b      	negs	r3, r3
 800eb66:	4413      	add	r3, r2
 800eb68:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	3310      	adds	r3, #16
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d20d      	bcs.n	800eb90 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800eb74:	2301      	movs	r3, #1
 800eb76:	e01d      	b.n	800ebb4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d006      	beq.n	800eb8c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	685a      	ldr	r2, [r3, #4]
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	425b      	negs	r3, r3
 800eb86:	4413      	add	r3, r2
 800eb88:	617b      	str	r3, [r7, #20]
 800eb8a:	e001      	b.n	800eb90 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	e011      	b.n	800ebb4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	697a      	ldr	r2, [r7, #20]
 800eb94:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	895a      	ldrh	r2, [r3, #10]
 800eb9a:	8a7b      	ldrh	r3, [r7, #18]
 800eb9c:	4413      	add	r3, r2
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	891a      	ldrh	r2, [r3, #8]
 800eba8:	8a7b      	ldrh	r3, [r7, #18]
 800ebaa:	4413      	add	r3, r2
 800ebac:	b29a      	uxth	r2, r3
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	811a      	strh	r2, [r3, #8]


  return 0;
 800ebb2:	2300      	movs	r3, #0
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3718      	adds	r7, #24
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	0801b3bc 	.word	0x0801b3bc
 800ebc0:	0801b520 	.word	0x0801b520
 800ebc4:	0801b41c 	.word	0x0801b41c

0800ebc8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b082      	sub	sp, #8
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	6839      	ldr	r1, [r7, #0]
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f7ff ff8e 	bl	800eaf8 <pbuf_add_header_impl>
 800ebdc:	4603      	mov	r3, r0
}
 800ebde:	4618      	mov	r0, r3
 800ebe0:	3708      	adds	r7, #8
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}
	...

0800ebe8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d106      	bne.n	800ec06 <pbuf_remove_header+0x1e>
 800ebf8:	4b20      	ldr	r3, [pc, #128]	; (800ec7c <pbuf_remove_header+0x94>)
 800ebfa:	f240 224b 	movw	r2, #587	; 0x24b
 800ebfe:	4920      	ldr	r1, [pc, #128]	; (800ec80 <pbuf_remove_header+0x98>)
 800ec00:	4820      	ldr	r0, [pc, #128]	; (800ec84 <pbuf_remove_header+0x9c>)
 800ec02:	f00a f903 	bl	8018e0c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d003      	beq.n	800ec14 <pbuf_remove_header+0x2c>
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ec12:	d301      	bcc.n	800ec18 <pbuf_remove_header+0x30>
    return 1;
 800ec14:	2301      	movs	r3, #1
 800ec16:	e02c      	b.n	800ec72 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d101      	bne.n	800ec22 <pbuf_remove_header+0x3a>
    return 0;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	e027      	b.n	800ec72 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	895b      	ldrh	r3, [r3, #10]
 800ec2a:	89fa      	ldrh	r2, [r7, #14]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d908      	bls.n	800ec42 <pbuf_remove_header+0x5a>
 800ec30:	4b12      	ldr	r3, [pc, #72]	; (800ec7c <pbuf_remove_header+0x94>)
 800ec32:	f240 2255 	movw	r2, #597	; 0x255
 800ec36:	4914      	ldr	r1, [pc, #80]	; (800ec88 <pbuf_remove_header+0xa0>)
 800ec38:	4812      	ldr	r0, [pc, #72]	; (800ec84 <pbuf_remove_header+0x9c>)
 800ec3a:	f00a f8e7 	bl	8018e0c <iprintf>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e017      	b.n	800ec72 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	685b      	ldr	r3, [r3, #4]
 800ec46:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	685a      	ldr	r2, [r3, #4]
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	441a      	add	r2, r3
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	895a      	ldrh	r2, [r3, #10]
 800ec58:	89fb      	ldrh	r3, [r7, #14]
 800ec5a:	1ad3      	subs	r3, r2, r3
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	891a      	ldrh	r2, [r3, #8]
 800ec66:	89fb      	ldrh	r3, [r7, #14]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	b29a      	uxth	r2, r3
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ec70:	2300      	movs	r3, #0
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	0801b3bc 	.word	0x0801b3bc
 800ec80:	0801b520 	.word	0x0801b520
 800ec84:	0801b41c 	.word	0x0801b41c
 800ec88:	0801b52c 	.word	0x0801b52c

0800ec8c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b082      	sub	sp, #8
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	460b      	mov	r3, r1
 800ec96:	807b      	strh	r3, [r7, #2]
 800ec98:	4613      	mov	r3, r2
 800ec9a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ec9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	da08      	bge.n	800ecb6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800eca4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eca8:	425b      	negs	r3, r3
 800ecaa:	4619      	mov	r1, r3
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f7ff ff9b 	bl	800ebe8 <pbuf_remove_header>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	e007      	b.n	800ecc6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ecb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ecba:	787a      	ldrb	r2, [r7, #1]
 800ecbc:	4619      	mov	r1, r3
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f7ff ff1a 	bl	800eaf8 <pbuf_add_header_impl>
 800ecc4:	4603      	mov	r3, r0
  }
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b082      	sub	sp, #8
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ecda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ecde:	2201      	movs	r2, #1
 800ece0:	4619      	mov	r1, r3
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7ff ffd2 	bl	800ec8c <pbuf_header_impl>
 800ece8:	4603      	mov	r3, r0
}
 800ecea:	4618      	mov	r0, r3
 800ecec:	3708      	adds	r7, #8
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	bd80      	pop	{r7, pc}

0800ecf2 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800ecf2:	b580      	push	{r7, lr}
 800ecf4:	b086      	sub	sp, #24
 800ecf6:	af00      	add	r7, sp, #0
 800ecf8:	6078      	str	r0, [r7, #4]
 800ecfa:	460b      	mov	r3, r1
 800ecfc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800ed02:	887b      	ldrh	r3, [r7, #2]
 800ed04:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800ed06:	e01c      	b.n	800ed42 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800ed08:	697b      	ldr	r3, [r7, #20]
 800ed0a:	895b      	ldrh	r3, [r3, #10]
 800ed0c:	8a7a      	ldrh	r2, [r7, #18]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d310      	bcc.n	800ed34 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	895b      	ldrh	r3, [r3, #10]
 800ed1a:	8a7a      	ldrh	r2, [r7, #18]
 800ed1c:	1ad3      	subs	r3, r2, r3
 800ed1e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800ed2c:	68f8      	ldr	r0, [r7, #12]
 800ed2e:	f000 f813 	bl	800ed58 <pbuf_free>
 800ed32:	e006      	b.n	800ed42 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800ed34:	8a7b      	ldrh	r3, [r7, #18]
 800ed36:	4619      	mov	r1, r3
 800ed38:	6978      	ldr	r0, [r7, #20]
 800ed3a:	f7ff ff55 	bl	800ebe8 <pbuf_remove_header>
      free_left = 0;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800ed42:	8a7b      	ldrh	r3, [r7, #18]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d002      	beq.n	800ed4e <pbuf_free_header+0x5c>
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d1dc      	bne.n	800ed08 <pbuf_free_header+0x16>
    }
  }
  return p;
 800ed4e:	697b      	ldr	r3, [r7, #20]
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3718      	adds	r7, #24
 800ed54:	46bd      	mov	sp, r7
 800ed56:	bd80      	pop	{r7, pc}

0800ed58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b088      	sub	sp, #32
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d10b      	bne.n	800ed7e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d106      	bne.n	800ed7a <pbuf_free+0x22>
 800ed6c:	4b3b      	ldr	r3, [pc, #236]	; (800ee5c <pbuf_free+0x104>)
 800ed6e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ed72:	493b      	ldr	r1, [pc, #236]	; (800ee60 <pbuf_free+0x108>)
 800ed74:	483b      	ldr	r0, [pc, #236]	; (800ee64 <pbuf_free+0x10c>)
 800ed76:	f00a f849 	bl	8018e0c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	e069      	b.n	800ee52 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800ed82:	e062      	b.n	800ee4a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800ed84:	f009 ff2a 	bl	8018bdc <sys_arch_protect>
 800ed88:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	7b9b      	ldrb	r3, [r3, #14]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d106      	bne.n	800eda0 <pbuf_free+0x48>
 800ed92:	4b32      	ldr	r3, [pc, #200]	; (800ee5c <pbuf_free+0x104>)
 800ed94:	f240 22f1 	movw	r2, #753	; 0x2f1
 800ed98:	4933      	ldr	r1, [pc, #204]	; (800ee68 <pbuf_free+0x110>)
 800ed9a:	4832      	ldr	r0, [pc, #200]	; (800ee64 <pbuf_free+0x10c>)
 800ed9c:	f00a f836 	bl	8018e0c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	7b9b      	ldrb	r3, [r3, #14]
 800eda4:	3b01      	subs	r3, #1
 800eda6:	b2da      	uxtb	r2, r3
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	739a      	strb	r2, [r3, #14]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	7b9b      	ldrb	r3, [r3, #14]
 800edb0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800edb2:	69b8      	ldr	r0, [r7, #24]
 800edb4:	f009 ff20 	bl	8018bf8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800edb8:	7dfb      	ldrb	r3, [r7, #23]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d143      	bne.n	800ee46 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	681b      	ldr	r3, [r3, #0]
 800edc2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	7b1b      	ldrb	r3, [r3, #12]
 800edc8:	f003 030f 	and.w	r3, r3, #15
 800edcc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	7b5b      	ldrb	r3, [r3, #13]
 800edd2:	f003 0302 	and.w	r3, r3, #2
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d011      	beq.n	800edfe <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	691b      	ldr	r3, [r3, #16]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d106      	bne.n	800edf4 <pbuf_free+0x9c>
 800ede6:	4b1d      	ldr	r3, [pc, #116]	; (800ee5c <pbuf_free+0x104>)
 800ede8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800edec:	491f      	ldr	r1, [pc, #124]	; (800ee6c <pbuf_free+0x114>)
 800edee:	481d      	ldr	r0, [pc, #116]	; (800ee64 <pbuf_free+0x10c>)
 800edf0:	f00a f80c 	bl	8018e0c <iprintf>
        pc->custom_free_function(p);
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	691b      	ldr	r3, [r3, #16]
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	4798      	blx	r3
 800edfc:	e01d      	b.n	800ee3a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800edfe:	7bfb      	ldrb	r3, [r7, #15]
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d104      	bne.n	800ee0e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ee04:	6879      	ldr	r1, [r7, #4]
 800ee06:	200d      	movs	r0, #13
 800ee08:	f7ff f8d0 	bl	800dfac <memp_free>
 800ee0c:	e015      	b.n	800ee3a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ee0e:	7bfb      	ldrb	r3, [r7, #15]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d104      	bne.n	800ee1e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ee14:	6879      	ldr	r1, [r7, #4]
 800ee16:	200c      	movs	r0, #12
 800ee18:	f7ff f8c8 	bl	800dfac <memp_free>
 800ee1c:	e00d      	b.n	800ee3a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ee1e:	7bfb      	ldrb	r3, [r7, #15]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d103      	bne.n	800ee2c <pbuf_free+0xd4>
          mem_free(p);
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7fe fd53 	bl	800d8d0 <mem_free>
 800ee2a:	e006      	b.n	800ee3a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ee2c:	4b0b      	ldr	r3, [pc, #44]	; (800ee5c <pbuf_free+0x104>)
 800ee2e:	f240 320f 	movw	r2, #783	; 0x30f
 800ee32:	490f      	ldr	r1, [pc, #60]	; (800ee70 <pbuf_free+0x118>)
 800ee34:	480b      	ldr	r0, [pc, #44]	; (800ee64 <pbuf_free+0x10c>)
 800ee36:	f009 ffe9 	bl	8018e0c <iprintf>
        }
      }
      count++;
 800ee3a:	7ffb      	ldrb	r3, [r7, #31]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	607b      	str	r3, [r7, #4]
 800ee44:	e001      	b.n	800ee4a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ee46:	2300      	movs	r3, #0
 800ee48:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d199      	bne.n	800ed84 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ee50:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee52:	4618      	mov	r0, r3
 800ee54:	3720      	adds	r7, #32
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	0801b3bc 	.word	0x0801b3bc
 800ee60:	0801b520 	.word	0x0801b520
 800ee64:	0801b41c 	.word	0x0801b41c
 800ee68:	0801b54c 	.word	0x0801b54c
 800ee6c:	0801b564 	.word	0x0801b564
 800ee70:	0801b588 	.word	0x0801b588

0800ee74 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800ee80:	e005      	b.n	800ee8e <pbuf_clen+0x1a>
    ++len;
 800ee82:	89fb      	ldrh	r3, [r7, #14]
 800ee84:	3301      	adds	r3, #1
 800ee86:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d1f6      	bne.n	800ee82 <pbuf_clen+0xe>
  }
  return len;
 800ee94:	89fb      	ldrh	r3, [r7, #14]
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	3714      	adds	r7, #20
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr
	...

0800eea4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b084      	sub	sp, #16
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d016      	beq.n	800eee0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800eeb2:	f009 fe93 	bl	8018bdc <sys_arch_protect>
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	7b9b      	ldrb	r3, [r3, #14]
 800eebc:	3301      	adds	r3, #1
 800eebe:	b2da      	uxtb	r2, r3
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	739a      	strb	r2, [r3, #14]
 800eec4:	68f8      	ldr	r0, [r7, #12]
 800eec6:	f009 fe97 	bl	8018bf8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	7b9b      	ldrb	r3, [r3, #14]
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d106      	bne.n	800eee0 <pbuf_ref+0x3c>
 800eed2:	4b05      	ldr	r3, [pc, #20]	; (800eee8 <pbuf_ref+0x44>)
 800eed4:	f240 3242 	movw	r2, #834	; 0x342
 800eed8:	4904      	ldr	r1, [pc, #16]	; (800eeec <pbuf_ref+0x48>)
 800eeda:	4805      	ldr	r0, [pc, #20]	; (800eef0 <pbuf_ref+0x4c>)
 800eedc:	f009 ff96 	bl	8018e0c <iprintf>
  }
}
 800eee0:	bf00      	nop
 800eee2:	3710      	adds	r7, #16
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	0801b3bc 	.word	0x0801b3bc
 800eeec:	0801b59c 	.word	0x0801b59c
 800eef0:	0801b41c 	.word	0x0801b41c

0800eef4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <pbuf_cat+0x16>
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d107      	bne.n	800ef1a <pbuf_cat+0x26>
 800ef0a:	4b20      	ldr	r3, [pc, #128]	; (800ef8c <pbuf_cat+0x98>)
 800ef0c:	f240 3259 	movw	r2, #857	; 0x359
 800ef10:	491f      	ldr	r1, [pc, #124]	; (800ef90 <pbuf_cat+0x9c>)
 800ef12:	4820      	ldr	r0, [pc, #128]	; (800ef94 <pbuf_cat+0xa0>)
 800ef14:	f009 ff7a 	bl	8018e0c <iprintf>
 800ef18:	e034      	b.n	800ef84 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	60fb      	str	r3, [r7, #12]
 800ef1e:	e00a      	b.n	800ef36 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	891a      	ldrh	r2, [r3, #8]
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	891b      	ldrh	r3, [r3, #8]
 800ef28:	4413      	add	r3, r2
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	60fb      	str	r3, [r7, #12]
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d1f0      	bne.n	800ef20 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	891a      	ldrh	r2, [r3, #8]
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	895b      	ldrh	r3, [r3, #10]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d006      	beq.n	800ef58 <pbuf_cat+0x64>
 800ef4a:	4b10      	ldr	r3, [pc, #64]	; (800ef8c <pbuf_cat+0x98>)
 800ef4c:	f240 3262 	movw	r2, #866	; 0x362
 800ef50:	4911      	ldr	r1, [pc, #68]	; (800ef98 <pbuf_cat+0xa4>)
 800ef52:	4810      	ldr	r0, [pc, #64]	; (800ef94 <pbuf_cat+0xa0>)
 800ef54:	f009 ff5a 	bl	8018e0c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d006      	beq.n	800ef6e <pbuf_cat+0x7a>
 800ef60:	4b0a      	ldr	r3, [pc, #40]	; (800ef8c <pbuf_cat+0x98>)
 800ef62:	f240 3263 	movw	r2, #867	; 0x363
 800ef66:	490d      	ldr	r1, [pc, #52]	; (800ef9c <pbuf_cat+0xa8>)
 800ef68:	480a      	ldr	r0, [pc, #40]	; (800ef94 <pbuf_cat+0xa0>)
 800ef6a:	f009 ff4f 	bl	8018e0c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	891a      	ldrh	r2, [r3, #8]
 800ef72:	683b      	ldr	r3, [r7, #0]
 800ef74:	891b      	ldrh	r3, [r3, #8]
 800ef76:	4413      	add	r3, r2
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	683a      	ldr	r2, [r7, #0]
 800ef82:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	0801b3bc 	.word	0x0801b3bc
 800ef90:	0801b5b0 	.word	0x0801b5b0
 800ef94:	0801b41c 	.word	0x0801b41c
 800ef98:	0801b5e8 	.word	0x0801b5e8
 800ef9c:	0801b618 	.word	0x0801b618

0800efa0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b082      	sub	sp, #8
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800efaa:	6839      	ldr	r1, [r7, #0]
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7ff ffa1 	bl	800eef4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800efb2:	6838      	ldr	r0, [r7, #0]
 800efb4:	f7ff ff76 	bl	800eea4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800efb8:	bf00      	nop
 800efba:	3708      	adds	r7, #8
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b086      	sub	sp, #24
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800efca:	2300      	movs	r3, #0
 800efcc:	617b      	str	r3, [r7, #20]
 800efce:	2300      	movs	r3, #0
 800efd0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d008      	beq.n	800efea <pbuf_copy+0x2a>
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d005      	beq.n	800efea <pbuf_copy+0x2a>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	891a      	ldrh	r2, [r3, #8]
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	891b      	ldrh	r3, [r3, #8]
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d209      	bcs.n	800effe <pbuf_copy+0x3e>
 800efea:	4b57      	ldr	r3, [pc, #348]	; (800f148 <pbuf_copy+0x188>)
 800efec:	f240 32c9 	movw	r2, #969	; 0x3c9
 800eff0:	4956      	ldr	r1, [pc, #344]	; (800f14c <pbuf_copy+0x18c>)
 800eff2:	4857      	ldr	r0, [pc, #348]	; (800f150 <pbuf_copy+0x190>)
 800eff4:	f009 ff0a 	bl	8018e0c <iprintf>
 800eff8:	f06f 030f 	mvn.w	r3, #15
 800effc:	e09f      	b.n	800f13e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	895b      	ldrh	r3, [r3, #10]
 800f002:	461a      	mov	r2, r3
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	1ad2      	subs	r2, r2, r3
 800f008:	683b      	ldr	r3, [r7, #0]
 800f00a:	895b      	ldrh	r3, [r3, #10]
 800f00c:	4619      	mov	r1, r3
 800f00e:	693b      	ldr	r3, [r7, #16]
 800f010:	1acb      	subs	r3, r1, r3
 800f012:	429a      	cmp	r2, r3
 800f014:	d306      	bcc.n	800f024 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	895b      	ldrh	r3, [r3, #10]
 800f01a:	461a      	mov	r2, r3
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	1ad3      	subs	r3, r2, r3
 800f020:	60fb      	str	r3, [r7, #12]
 800f022:	e005      	b.n	800f030 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	895b      	ldrh	r3, [r3, #10]
 800f028:	461a      	mov	r2, r3
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	1ad3      	subs	r3, r2, r3
 800f02e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	685a      	ldr	r2, [r3, #4]
 800f034:	697b      	ldr	r3, [r7, #20]
 800f036:	18d0      	adds	r0, r2, r3
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	685a      	ldr	r2, [r3, #4]
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	4413      	add	r3, r2
 800f040:	68fa      	ldr	r2, [r7, #12]
 800f042:	4619      	mov	r1, r3
 800f044:	f009 fe22 	bl	8018c8c <memcpy>
    offset_to += len;
 800f048:	697a      	ldr	r2, [r7, #20]
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	4413      	add	r3, r2
 800f04e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f050:	693a      	ldr	r2, [r7, #16]
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	4413      	add	r3, r2
 800f056:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	895b      	ldrh	r3, [r3, #10]
 800f05c:	461a      	mov	r2, r3
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	4293      	cmp	r3, r2
 800f062:	d906      	bls.n	800f072 <pbuf_copy+0xb2>
 800f064:	4b38      	ldr	r3, [pc, #224]	; (800f148 <pbuf_copy+0x188>)
 800f066:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f06a:	493a      	ldr	r1, [pc, #232]	; (800f154 <pbuf_copy+0x194>)
 800f06c:	4838      	ldr	r0, [pc, #224]	; (800f150 <pbuf_copy+0x190>)
 800f06e:	f009 fecd 	bl	8018e0c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	895b      	ldrh	r3, [r3, #10]
 800f076:	461a      	mov	r2, r3
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	4293      	cmp	r3, r2
 800f07c:	d906      	bls.n	800f08c <pbuf_copy+0xcc>
 800f07e:	4b32      	ldr	r3, [pc, #200]	; (800f148 <pbuf_copy+0x188>)
 800f080:	f240 32da 	movw	r2, #986	; 0x3da
 800f084:	4934      	ldr	r1, [pc, #208]	; (800f158 <pbuf_copy+0x198>)
 800f086:	4832      	ldr	r0, [pc, #200]	; (800f150 <pbuf_copy+0x190>)
 800f088:	f009 fec0 	bl	8018e0c <iprintf>
    if (offset_from >= p_from->len) {
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	895b      	ldrh	r3, [r3, #10]
 800f090:	461a      	mov	r2, r3
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	4293      	cmp	r3, r2
 800f096:	d304      	bcc.n	800f0a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f098:	2300      	movs	r3, #0
 800f09a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	895b      	ldrh	r3, [r3, #10]
 800f0a6:	461a      	mov	r2, r3
 800f0a8:	697b      	ldr	r3, [r7, #20]
 800f0aa:	4293      	cmp	r3, r2
 800f0ac:	d114      	bne.n	800f0d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d10c      	bne.n	800f0d8 <pbuf_copy+0x118>
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d009      	beq.n	800f0d8 <pbuf_copy+0x118>
 800f0c4:	4b20      	ldr	r3, [pc, #128]	; (800f148 <pbuf_copy+0x188>)
 800f0c6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f0ca:	4924      	ldr	r1, [pc, #144]	; (800f15c <pbuf_copy+0x19c>)
 800f0cc:	4820      	ldr	r0, [pc, #128]	; (800f150 <pbuf_copy+0x190>)
 800f0ce:	f009 fe9d 	bl	8018e0c <iprintf>
 800f0d2:	f06f 030f 	mvn.w	r3, #15
 800f0d6:	e032      	b.n	800f13e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d013      	beq.n	800f106 <pbuf_copy+0x146>
 800f0de:	683b      	ldr	r3, [r7, #0]
 800f0e0:	895a      	ldrh	r2, [r3, #10]
 800f0e2:	683b      	ldr	r3, [r7, #0]
 800f0e4:	891b      	ldrh	r3, [r3, #8]
 800f0e6:	429a      	cmp	r2, r3
 800f0e8:	d10d      	bne.n	800f106 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d009      	beq.n	800f106 <pbuf_copy+0x146>
 800f0f2:	4b15      	ldr	r3, [pc, #84]	; (800f148 <pbuf_copy+0x188>)
 800f0f4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f0f8:	4919      	ldr	r1, [pc, #100]	; (800f160 <pbuf_copy+0x1a0>)
 800f0fa:	4815      	ldr	r0, [pc, #84]	; (800f150 <pbuf_copy+0x190>)
 800f0fc:	f009 fe86 	bl	8018e0c <iprintf>
 800f100:	f06f 0305 	mvn.w	r3, #5
 800f104:	e01b      	b.n	800f13e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d013      	beq.n	800f134 <pbuf_copy+0x174>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	895a      	ldrh	r2, [r3, #10]
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	891b      	ldrh	r3, [r3, #8]
 800f114:	429a      	cmp	r2, r3
 800f116:	d10d      	bne.n	800f134 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d009      	beq.n	800f134 <pbuf_copy+0x174>
 800f120:	4b09      	ldr	r3, [pc, #36]	; (800f148 <pbuf_copy+0x188>)
 800f122:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f126:	490e      	ldr	r1, [pc, #56]	; (800f160 <pbuf_copy+0x1a0>)
 800f128:	4809      	ldr	r0, [pc, #36]	; (800f150 <pbuf_copy+0x190>)
 800f12a:	f009 fe6f 	bl	8018e0c <iprintf>
 800f12e:	f06f 0305 	mvn.w	r3, #5
 800f132:	e004      	b.n	800f13e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	2b00      	cmp	r3, #0
 800f138:	f47f af61 	bne.w	800effe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	0801b3bc 	.word	0x0801b3bc
 800f14c:	0801b664 	.word	0x0801b664
 800f150:	0801b41c 	.word	0x0801b41c
 800f154:	0801b694 	.word	0x0801b694
 800f158:	0801b6ac 	.word	0x0801b6ac
 800f15c:	0801b6c8 	.word	0x0801b6c8
 800f160:	0801b6d8 	.word	0x0801b6d8

0800f164 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b088      	sub	sp, #32
 800f168:	af00      	add	r7, sp, #0
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	60b9      	str	r1, [r7, #8]
 800f16e:	4611      	mov	r1, r2
 800f170:	461a      	mov	r2, r3
 800f172:	460b      	mov	r3, r1
 800f174:	80fb      	strh	r3, [r7, #6]
 800f176:	4613      	mov	r3, r2
 800f178:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f17a:	2300      	movs	r3, #0
 800f17c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f17e:	2300      	movs	r3, #0
 800f180:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2b00      	cmp	r3, #0
 800f186:	d108      	bne.n	800f19a <pbuf_copy_partial+0x36>
 800f188:	4b2b      	ldr	r3, [pc, #172]	; (800f238 <pbuf_copy_partial+0xd4>)
 800f18a:	f240 420a 	movw	r2, #1034	; 0x40a
 800f18e:	492b      	ldr	r1, [pc, #172]	; (800f23c <pbuf_copy_partial+0xd8>)
 800f190:	482b      	ldr	r0, [pc, #172]	; (800f240 <pbuf_copy_partial+0xdc>)
 800f192:	f009 fe3b 	bl	8018e0c <iprintf>
 800f196:	2300      	movs	r3, #0
 800f198:	e04a      	b.n	800f230 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d108      	bne.n	800f1b2 <pbuf_copy_partial+0x4e>
 800f1a0:	4b25      	ldr	r3, [pc, #148]	; (800f238 <pbuf_copy_partial+0xd4>)
 800f1a2:	f240 420b 	movw	r2, #1035	; 0x40b
 800f1a6:	4927      	ldr	r1, [pc, #156]	; (800f244 <pbuf_copy_partial+0xe0>)
 800f1a8:	4825      	ldr	r0, [pc, #148]	; (800f240 <pbuf_copy_partial+0xdc>)
 800f1aa:	f009 fe2f 	bl	8018e0c <iprintf>
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	e03e      	b.n	800f230 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	61fb      	str	r3, [r7, #28]
 800f1b6:	e034      	b.n	800f222 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f1b8:	88bb      	ldrh	r3, [r7, #4]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00a      	beq.n	800f1d4 <pbuf_copy_partial+0x70>
 800f1be:	69fb      	ldr	r3, [r7, #28]
 800f1c0:	895b      	ldrh	r3, [r3, #10]
 800f1c2:	88ba      	ldrh	r2, [r7, #4]
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d305      	bcc.n	800f1d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f1c8:	69fb      	ldr	r3, [r7, #28]
 800f1ca:	895b      	ldrh	r3, [r3, #10]
 800f1cc:	88ba      	ldrh	r2, [r7, #4]
 800f1ce:	1ad3      	subs	r3, r2, r3
 800f1d0:	80bb      	strh	r3, [r7, #4]
 800f1d2:	e023      	b.n	800f21c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	895a      	ldrh	r2, [r3, #10]
 800f1d8:	88bb      	ldrh	r3, [r7, #4]
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f1de:	8b3a      	ldrh	r2, [r7, #24]
 800f1e0:	88fb      	ldrh	r3, [r7, #6]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d901      	bls.n	800f1ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f1e6:	88fb      	ldrh	r3, [r7, #6]
 800f1e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f1ea:	8b7b      	ldrh	r3, [r7, #26]
 800f1ec:	68ba      	ldr	r2, [r7, #8]
 800f1ee:	18d0      	adds	r0, r2, r3
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	685a      	ldr	r2, [r3, #4]
 800f1f4:	88bb      	ldrh	r3, [r7, #4]
 800f1f6:	4413      	add	r3, r2
 800f1f8:	8b3a      	ldrh	r2, [r7, #24]
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	f009 fd46 	bl	8018c8c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f200:	8afa      	ldrh	r2, [r7, #22]
 800f202:	8b3b      	ldrh	r3, [r7, #24]
 800f204:	4413      	add	r3, r2
 800f206:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f208:	8b7a      	ldrh	r2, [r7, #26]
 800f20a:	8b3b      	ldrh	r3, [r7, #24]
 800f20c:	4413      	add	r3, r2
 800f20e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f210:	88fa      	ldrh	r2, [r7, #6]
 800f212:	8b3b      	ldrh	r3, [r7, #24]
 800f214:	1ad3      	subs	r3, r2, r3
 800f216:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f218:	2300      	movs	r3, #0
 800f21a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f21c:	69fb      	ldr	r3, [r7, #28]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	61fb      	str	r3, [r7, #28]
 800f222:	88fb      	ldrh	r3, [r7, #6]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d002      	beq.n	800f22e <pbuf_copy_partial+0xca>
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d1c4      	bne.n	800f1b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f22e:	8afb      	ldrh	r3, [r7, #22]
}
 800f230:	4618      	mov	r0, r3
 800f232:	3720      	adds	r7, #32
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	0801b3bc 	.word	0x0801b3bc
 800f23c:	0801b704 	.word	0x0801b704
 800f240:	0801b41c 	.word	0x0801b41c
 800f244:	0801b724 	.word	0x0801b724

0800f248 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f248:	b480      	push	{r7}
 800f24a:	b087      	sub	sp, #28
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	460b      	mov	r3, r1
 800f252:	607a      	str	r2, [r7, #4]
 800f254:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800f256:	897b      	ldrh	r3, [r7, #10]
 800f258:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800f25e:	e007      	b.n	800f270 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	895b      	ldrh	r3, [r3, #10]
 800f264:	8afa      	ldrh	r2, [r7, #22]
 800f266:	1ad3      	subs	r3, r2, r3
 800f268:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800f270:	693b      	ldr	r3, [r7, #16]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d004      	beq.n	800f280 <pbuf_skip_const+0x38>
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	895b      	ldrh	r3, [r3, #10]
 800f27a:	8afa      	ldrh	r2, [r7, #22]
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d2ef      	bcs.n	800f260 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d002      	beq.n	800f28c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	8afa      	ldrh	r2, [r7, #22]
 800f28a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800f28c:	693b      	ldr	r3, [r7, #16]
}
 800f28e:	4618      	mov	r0, r3
 800f290:	371c      	adds	r7, #28
 800f292:	46bd      	mov	sp, r7
 800f294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f298:	4770      	bx	lr

0800f29a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800f29a:	b580      	push	{r7, lr}
 800f29c:	b086      	sub	sp, #24
 800f29e:	af00      	add	r7, sp, #0
 800f2a0:	60f8      	str	r0, [r7, #12]
 800f2a2:	460b      	mov	r3, r1
 800f2a4:	607a      	str	r2, [r7, #4]
 800f2a6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800f2a8:	897b      	ldrh	r3, [r7, #10]
 800f2aa:	687a      	ldr	r2, [r7, #4]
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	68f8      	ldr	r0, [r7, #12]
 800f2b0:	f7ff ffca 	bl	800f248 <pbuf_skip_const>
 800f2b4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800f2b6:	697b      	ldr	r3, [r7, #20]
}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3718      	adds	r7, #24
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b088      	sub	sp, #32
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800f2ce:	88fb      	ldrh	r3, [r7, #6]
 800f2d0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d109      	bne.n	800f2f0 <pbuf_take+0x30>
 800f2dc:	4b3a      	ldr	r3, [pc, #232]	; (800f3c8 <pbuf_take+0x108>)
 800f2de:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800f2e2:	493a      	ldr	r1, [pc, #232]	; (800f3cc <pbuf_take+0x10c>)
 800f2e4:	483a      	ldr	r0, [pc, #232]	; (800f3d0 <pbuf_take+0x110>)
 800f2e6:	f009 fd91 	bl	8018e0c <iprintf>
 800f2ea:	f06f 030f 	mvn.w	r3, #15
 800f2ee:	e067      	b.n	800f3c0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d109      	bne.n	800f30a <pbuf_take+0x4a>
 800f2f6:	4b34      	ldr	r3, [pc, #208]	; (800f3c8 <pbuf_take+0x108>)
 800f2f8:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800f2fc:	4935      	ldr	r1, [pc, #212]	; (800f3d4 <pbuf_take+0x114>)
 800f2fe:	4834      	ldr	r0, [pc, #208]	; (800f3d0 <pbuf_take+0x110>)
 800f300:	f009 fd84 	bl	8018e0c <iprintf>
 800f304:	f06f 030f 	mvn.w	r3, #15
 800f308:	e05a      	b.n	800f3c0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	891b      	ldrh	r3, [r3, #8]
 800f30e:	88fa      	ldrh	r2, [r7, #6]
 800f310:	429a      	cmp	r2, r3
 800f312:	d909      	bls.n	800f328 <pbuf_take+0x68>
 800f314:	4b2c      	ldr	r3, [pc, #176]	; (800f3c8 <pbuf_take+0x108>)
 800f316:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800f31a:	492f      	ldr	r1, [pc, #188]	; (800f3d8 <pbuf_take+0x118>)
 800f31c:	482c      	ldr	r0, [pc, #176]	; (800f3d0 <pbuf_take+0x110>)
 800f31e:	f009 fd75 	bl	8018e0c <iprintf>
 800f322:	f04f 33ff 	mov.w	r3, #4294967295
 800f326:	e04b      	b.n	800f3c0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d007      	beq.n	800f33e <pbuf_take+0x7e>
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d004      	beq.n	800f33e <pbuf_take+0x7e>
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	891b      	ldrh	r3, [r3, #8]
 800f338:	88fa      	ldrh	r2, [r7, #6]
 800f33a:	429a      	cmp	r2, r3
 800f33c:	d902      	bls.n	800f344 <pbuf_take+0x84>
    return ERR_ARG;
 800f33e:	f06f 030f 	mvn.w	r3, #15
 800f342:	e03d      	b.n	800f3c0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	61fb      	str	r3, [r7, #28]
 800f348:	e028      	b.n	800f39c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800f34a:	69fb      	ldr	r3, [r7, #28]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d106      	bne.n	800f35e <pbuf_take+0x9e>
 800f350:	4b1d      	ldr	r3, [pc, #116]	; (800f3c8 <pbuf_take+0x108>)
 800f352:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800f356:	4921      	ldr	r1, [pc, #132]	; (800f3dc <pbuf_take+0x11c>)
 800f358:	481d      	ldr	r0, [pc, #116]	; (800f3d0 <pbuf_take+0x110>)
 800f35a:	f009 fd57 	bl	8018e0c <iprintf>
    buf_copy_len = total_copy_len;
 800f35e:	697b      	ldr	r3, [r7, #20]
 800f360:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800f362:	69fb      	ldr	r3, [r7, #28]
 800f364:	895b      	ldrh	r3, [r3, #10]
 800f366:	461a      	mov	r2, r3
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d902      	bls.n	800f374 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800f36e:	69fb      	ldr	r3, [r7, #28]
 800f370:	895b      	ldrh	r3, [r3, #10]
 800f372:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	6858      	ldr	r0, [r3, #4]
 800f378:	68ba      	ldr	r2, [r7, #8]
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	4413      	add	r3, r2
 800f37e:	69ba      	ldr	r2, [r7, #24]
 800f380:	4619      	mov	r1, r3
 800f382:	f009 fc83 	bl	8018c8c <memcpy>
    total_copy_len -= buf_copy_len;
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	1ad3      	subs	r3, r2, r3
 800f38c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800f38e:	693a      	ldr	r2, [r7, #16]
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	4413      	add	r3, r2
 800f394:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	61fb      	str	r3, [r7, #28]
 800f39c:	697b      	ldr	r3, [r7, #20]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d1d3      	bne.n	800f34a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d103      	bne.n	800f3b0 <pbuf_take+0xf0>
 800f3a8:	88fb      	ldrh	r3, [r7, #6]
 800f3aa:	693a      	ldr	r2, [r7, #16]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d006      	beq.n	800f3be <pbuf_take+0xfe>
 800f3b0:	4b05      	ldr	r3, [pc, #20]	; (800f3c8 <pbuf_take+0x108>)
 800f3b2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800f3b6:	490a      	ldr	r1, [pc, #40]	; (800f3e0 <pbuf_take+0x120>)
 800f3b8:	4805      	ldr	r0, [pc, #20]	; (800f3d0 <pbuf_take+0x110>)
 800f3ba:	f009 fd27 	bl	8018e0c <iprintf>
  return ERR_OK;
 800f3be:	2300      	movs	r3, #0
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3720      	adds	r7, #32
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	0801b3bc 	.word	0x0801b3bc
 800f3cc:	0801b794 	.word	0x0801b794
 800f3d0:	0801b41c 	.word	0x0801b41c
 800f3d4:	0801b7ac 	.word	0x0801b7ac
 800f3d8:	0801b7c8 	.word	0x0801b7c8
 800f3dc:	0801b7e8 	.word	0x0801b7e8
 800f3e0:	0801b800 	.word	0x0801b800

0800f3e4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b088      	sub	sp, #32
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	4611      	mov	r1, r2
 800f3f0:	461a      	mov	r2, r3
 800f3f2:	460b      	mov	r3, r1
 800f3f4:	80fb      	strh	r3, [r7, #6]
 800f3f6:	4613      	mov	r3, r2
 800f3f8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800f3fa:	f107 0210 	add.w	r2, r7, #16
 800f3fe:	88bb      	ldrh	r3, [r7, #4]
 800f400:	4619      	mov	r1, r3
 800f402:	68f8      	ldr	r0, [r7, #12]
 800f404:	f7ff ff49 	bl	800f29a <pbuf_skip>
 800f408:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800f40a:	69fb      	ldr	r3, [r7, #28]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d047      	beq.n	800f4a0 <pbuf_take_at+0xbc>
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	891b      	ldrh	r3, [r3, #8]
 800f414:	461a      	mov	r2, r3
 800f416:	8a3b      	ldrh	r3, [r7, #16]
 800f418:	4619      	mov	r1, r3
 800f41a:	88fb      	ldrh	r3, [r7, #6]
 800f41c:	440b      	add	r3, r1
 800f41e:	429a      	cmp	r2, r3
 800f420:	db3e      	blt.n	800f4a0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800f422:	88fb      	ldrh	r3, [r7, #6]
 800f424:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800f42a:	69fb      	ldr	r3, [r7, #28]
 800f42c:	895a      	ldrh	r2, [r3, #10]
 800f42e:	8a3b      	ldrh	r3, [r7, #16]
 800f430:	429a      	cmp	r2, r3
 800f432:	d806      	bhi.n	800f442 <pbuf_take_at+0x5e>
 800f434:	4b1d      	ldr	r3, [pc, #116]	; (800f4ac <pbuf_take_at+0xc8>)
 800f436:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800f43a:	491d      	ldr	r1, [pc, #116]	; (800f4b0 <pbuf_take_at+0xcc>)
 800f43c:	481d      	ldr	r0, [pc, #116]	; (800f4b4 <pbuf_take_at+0xd0>)
 800f43e:	f009 fce5 	bl	8018e0c <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	895b      	ldrh	r3, [r3, #10]
 800f446:	461a      	mov	r2, r3
 800f448:	8a3b      	ldrh	r3, [r7, #16]
 800f44a:	1ad2      	subs	r2, r2, r3
 800f44c:	88fb      	ldrh	r3, [r7, #6]
 800f44e:	429a      	cmp	r2, r3
 800f450:	da05      	bge.n	800f45e <pbuf_take_at+0x7a>
 800f452:	69fb      	ldr	r3, [r7, #28]
 800f454:	895a      	ldrh	r2, [r3, #10]
 800f456:	8a3b      	ldrh	r3, [r7, #16]
 800f458:	1ad3      	subs	r3, r2, r3
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	e000      	b.n	800f460 <pbuf_take_at+0x7c>
 800f45e:	88fb      	ldrh	r3, [r7, #6]
 800f460:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	8a3a      	ldrh	r2, [r7, #16]
 800f468:	4413      	add	r3, r2
 800f46a:	8a7a      	ldrh	r2, [r7, #18]
 800f46c:	68b9      	ldr	r1, [r7, #8]
 800f46e:	4618      	mov	r0, r3
 800f470:	f009 fc0c 	bl	8018c8c <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800f474:	8b7a      	ldrh	r2, [r7, #26]
 800f476:	8a7b      	ldrh	r3, [r7, #18]
 800f478:	1ad3      	subs	r3, r2, r3
 800f47a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800f47c:	8a7b      	ldrh	r3, [r7, #18]
 800f47e:	697a      	ldr	r2, [r7, #20]
 800f480:	4413      	add	r3, r2
 800f482:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800f484:	8b7b      	ldrh	r3, [r7, #26]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d008      	beq.n	800f49c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800f48a:	69fb      	ldr	r3, [r7, #28]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	8b7a      	ldrh	r2, [r7, #26]
 800f490:	6979      	ldr	r1, [r7, #20]
 800f492:	4618      	mov	r0, r3
 800f494:	f7ff ff14 	bl	800f2c0 <pbuf_take>
 800f498:	4603      	mov	r3, r0
 800f49a:	e003      	b.n	800f4a4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800f49c:	2300      	movs	r3, #0
 800f49e:	e001      	b.n	800f4a4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800f4a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3720      	adds	r7, #32
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	0801b3bc 	.word	0x0801b3bc
 800f4b0:	0801b818 	.word	0x0801b818
 800f4b4:	0801b41c 	.word	0x0801b41c

0800f4b8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	4603      	mov	r3, r0
 800f4c0:	603a      	str	r2, [r7, #0]
 800f4c2:	71fb      	strb	r3, [r7, #7]
 800f4c4:	460b      	mov	r3, r1
 800f4c6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	8919      	ldrh	r1, [r3, #8]
 800f4cc:	88ba      	ldrh	r2, [r7, #4]
 800f4ce:	79fb      	ldrb	r3, [r7, #7]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7ff f92b 	bl	800e72c <pbuf_alloc>
 800f4d6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d101      	bne.n	800f4e2 <pbuf_clone+0x2a>
    return NULL;
 800f4de:	2300      	movs	r3, #0
 800f4e0:	e011      	b.n	800f506 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	f7ff fd6b 	bl	800efc0 <pbuf_copy>
 800f4ea:	4603      	mov	r3, r0
 800f4ec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f4ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d006      	beq.n	800f504 <pbuf_clone+0x4c>
 800f4f6:	4b06      	ldr	r3, [pc, #24]	; (800f510 <pbuf_clone+0x58>)
 800f4f8:	f240 5224 	movw	r2, #1316	; 0x524
 800f4fc:	4905      	ldr	r1, [pc, #20]	; (800f514 <pbuf_clone+0x5c>)
 800f4fe:	4806      	ldr	r0, [pc, #24]	; (800f518 <pbuf_clone+0x60>)
 800f500:	f009 fc84 	bl	8018e0c <iprintf>
  return q;
 800f504:	68fb      	ldr	r3, [r7, #12]
}
 800f506:	4618      	mov	r0, r3
 800f508:	3710      	adds	r7, #16
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	0801b3bc 	.word	0x0801b3bc
 800f514:	0801b830 	.word	0x0801b830
 800f518:	0801b41c 	.word	0x0801b41c

0800f51c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	460b      	mov	r3, r1
 800f526:	807b      	strh	r3, [r7, #2]
 800f528:	4613      	mov	r3, r2
 800f52a:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800f52c:	f107 020a 	add.w	r2, r7, #10
 800f530:	887b      	ldrh	r3, [r7, #2]
 800f532:	4619      	mov	r1, r3
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f7ff feb0 	bl	800f29a <pbuf_skip>
 800f53a:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d00a      	beq.n	800f558 <pbuf_put_at+0x3c>
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	895a      	ldrh	r2, [r3, #10]
 800f546:	897b      	ldrh	r3, [r7, #10]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d905      	bls.n	800f558 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	685b      	ldr	r3, [r3, #4]
 800f550:	897a      	ldrh	r2, [r7, #10]
 800f552:	4413      	add	r3, r2
 800f554:	787a      	ldrb	r2, [r7, #1]
 800f556:	701a      	strb	r2, [r3, #0]
  }
}
 800f558:	bf00      	nop
 800f55a:	3710      	adds	r7, #16
 800f55c:	46bd      	mov	sp, r7
 800f55e:	bd80      	pop	{r7, pc}

0800f560 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f560:	b580      	push	{r7, lr}
 800f562:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f564:	f009 fc6a 	bl	8018e3c <rand>
 800f568:	4603      	mov	r3, r0
 800f56a:	b29b      	uxth	r3, r3
 800f56c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f570:	b29b      	uxth	r3, r3
 800f572:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f576:	b29a      	uxth	r2, r3
 800f578:	4b01      	ldr	r3, [pc, #4]	; (800f580 <tcp_init+0x20>)
 800f57a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f57c:	bf00      	nop
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	20000010 	.word	0x20000010

0800f584 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	7d1b      	ldrb	r3, [r3, #20]
 800f590:	2b01      	cmp	r3, #1
 800f592:	d105      	bne.n	800f5a0 <tcp_free+0x1c>
 800f594:	4b06      	ldr	r3, [pc, #24]	; (800f5b0 <tcp_free+0x2c>)
 800f596:	22d4      	movs	r2, #212	; 0xd4
 800f598:	4906      	ldr	r1, [pc, #24]	; (800f5b4 <tcp_free+0x30>)
 800f59a:	4807      	ldr	r0, [pc, #28]	; (800f5b8 <tcp_free+0x34>)
 800f59c:	f009 fc36 	bl	8018e0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f5a0:	6879      	ldr	r1, [r7, #4]
 800f5a2:	2001      	movs	r0, #1
 800f5a4:	f7fe fd02 	bl	800dfac <memp_free>
}
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	0801b8bc 	.word	0x0801b8bc
 800f5b4:	0801b8ec 	.word	0x0801b8ec
 800f5b8:	0801b900 	.word	0x0801b900

0800f5bc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	7d1b      	ldrb	r3, [r3, #20]
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d105      	bne.n	800f5d8 <tcp_free_listen+0x1c>
 800f5cc:	4b06      	ldr	r3, [pc, #24]	; (800f5e8 <tcp_free_listen+0x2c>)
 800f5ce:	22df      	movs	r2, #223	; 0xdf
 800f5d0:	4906      	ldr	r1, [pc, #24]	; (800f5ec <tcp_free_listen+0x30>)
 800f5d2:	4807      	ldr	r0, [pc, #28]	; (800f5f0 <tcp_free_listen+0x34>)
 800f5d4:	f009 fc1a 	bl	8018e0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f5d8:	6879      	ldr	r1, [r7, #4]
 800f5da:	2002      	movs	r0, #2
 800f5dc:	f7fe fce6 	bl	800dfac <memp_free>
}
 800f5e0:	bf00      	nop
 800f5e2:	3708      	adds	r7, #8
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	0801b8bc 	.word	0x0801b8bc
 800f5ec:	0801b928 	.word	0x0801b928
 800f5f0:	0801b900 	.word	0x0801b900

0800f5f4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f5f8:	f001 f8a6 	bl	8010748 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f5fc:	4b07      	ldr	r3, [pc, #28]	; (800f61c <tcp_tmr+0x28>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	3301      	adds	r3, #1
 800f602:	b2da      	uxtb	r2, r3
 800f604:	4b05      	ldr	r3, [pc, #20]	; (800f61c <tcp_tmr+0x28>)
 800f606:	701a      	strb	r2, [r3, #0]
 800f608:	4b04      	ldr	r3, [pc, #16]	; (800f61c <tcp_tmr+0x28>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	f003 0301 	and.w	r3, r3, #1
 800f610:	2b00      	cmp	r3, #0
 800f612:	d001      	beq.n	800f618 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f614:	f000 fd58 	bl	80100c8 <tcp_slowtmr>
  }
}
 800f618:	bf00      	nop
 800f61a:	bd80      	pop	{r7, pc}
 800f61c:	20004ed9 	.word	0x20004ed9

0800f620 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b084      	sub	sp, #16
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
 800f628:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d105      	bne.n	800f63c <tcp_remove_listener+0x1c>
 800f630:	4b0d      	ldr	r3, [pc, #52]	; (800f668 <tcp_remove_listener+0x48>)
 800f632:	22ff      	movs	r2, #255	; 0xff
 800f634:	490d      	ldr	r1, [pc, #52]	; (800f66c <tcp_remove_listener+0x4c>)
 800f636:	480e      	ldr	r0, [pc, #56]	; (800f670 <tcp_remove_listener+0x50>)
 800f638:	f009 fbe8 	bl	8018e0c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	60fb      	str	r3, [r7, #12]
 800f640:	e00a      	b.n	800f658 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f646:	683a      	ldr	r2, [r7, #0]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d102      	bne.n	800f652 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2200      	movs	r2, #0
 800f650:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	60fb      	str	r3, [r7, #12]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d1f1      	bne.n	800f642 <tcp_remove_listener+0x22>
    }
  }
}
 800f65e:	bf00      	nop
 800f660:	bf00      	nop
 800f662:	3710      	adds	r7, #16
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	0801b8bc 	.word	0x0801b8bc
 800f66c:	0801b944 	.word	0x0801b944
 800f670:	0801b900 	.word	0x0801b900

0800f674 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b084      	sub	sp, #16
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d106      	bne.n	800f690 <tcp_listen_closed+0x1c>
 800f682:	4b14      	ldr	r3, [pc, #80]	; (800f6d4 <tcp_listen_closed+0x60>)
 800f684:	f240 1211 	movw	r2, #273	; 0x111
 800f688:	4913      	ldr	r1, [pc, #76]	; (800f6d8 <tcp_listen_closed+0x64>)
 800f68a:	4814      	ldr	r0, [pc, #80]	; (800f6dc <tcp_listen_closed+0x68>)
 800f68c:	f009 fbbe 	bl	8018e0c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	7d1b      	ldrb	r3, [r3, #20]
 800f694:	2b01      	cmp	r3, #1
 800f696:	d006      	beq.n	800f6a6 <tcp_listen_closed+0x32>
 800f698:	4b0e      	ldr	r3, [pc, #56]	; (800f6d4 <tcp_listen_closed+0x60>)
 800f69a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f69e:	4910      	ldr	r1, [pc, #64]	; (800f6e0 <tcp_listen_closed+0x6c>)
 800f6a0:	480e      	ldr	r0, [pc, #56]	; (800f6dc <tcp_listen_closed+0x68>)
 800f6a2:	f009 fbb3 	bl	8018e0c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	60fb      	str	r3, [r7, #12]
 800f6aa:	e00b      	b.n	800f6c4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f6ac:	4a0d      	ldr	r2, [pc, #52]	; (800f6e4 <tcp_listen_closed+0x70>)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	6879      	ldr	r1, [r7, #4]
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7ff ffb1 	bl	800f620 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2b03      	cmp	r3, #3
 800f6c8:	d9f0      	bls.n	800f6ac <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f6ca:	bf00      	nop
 800f6cc:	bf00      	nop
 800f6ce:	3710      	adds	r7, #16
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	0801b8bc 	.word	0x0801b8bc
 800f6d8:	0801b96c 	.word	0x0801b96c
 800f6dc:	0801b900 	.word	0x0801b900
 800f6e0:	0801b978 	.word	0x0801b978
 800f6e4:	0801dd4c 	.word	0x0801dd4c

0800f6e8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f6e8:	b5b0      	push	{r4, r5, r7, lr}
 800f6ea:	b088      	sub	sp, #32
 800f6ec:	af04      	add	r7, sp, #16
 800f6ee:	6078      	str	r0, [r7, #4]
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d106      	bne.n	800f708 <tcp_close_shutdown+0x20>
 800f6fa:	4b63      	ldr	r3, [pc, #396]	; (800f888 <tcp_close_shutdown+0x1a0>)
 800f6fc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f700:	4962      	ldr	r1, [pc, #392]	; (800f88c <tcp_close_shutdown+0x1a4>)
 800f702:	4863      	ldr	r0, [pc, #396]	; (800f890 <tcp_close_shutdown+0x1a8>)
 800f704:	f009 fb82 	bl	8018e0c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f708:	78fb      	ldrb	r3, [r7, #3]
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d066      	beq.n	800f7dc <tcp_close_shutdown+0xf4>
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	7d1b      	ldrb	r3, [r3, #20]
 800f712:	2b04      	cmp	r3, #4
 800f714:	d003      	beq.n	800f71e <tcp_close_shutdown+0x36>
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	7d1b      	ldrb	r3, [r3, #20]
 800f71a:	2b07      	cmp	r3, #7
 800f71c:	d15e      	bne.n	800f7dc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f722:	2b00      	cmp	r3, #0
 800f724:	d104      	bne.n	800f730 <tcp_close_shutdown+0x48>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f72a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f72e:	d055      	beq.n	800f7dc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	8b5b      	ldrh	r3, [r3, #26]
 800f734:	f003 0310 	and.w	r3, r3, #16
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d106      	bne.n	800f74a <tcp_close_shutdown+0x62>
 800f73c:	4b52      	ldr	r3, [pc, #328]	; (800f888 <tcp_close_shutdown+0x1a0>)
 800f73e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f742:	4954      	ldr	r1, [pc, #336]	; (800f894 <tcp_close_shutdown+0x1ac>)
 800f744:	4852      	ldr	r0, [pc, #328]	; (800f890 <tcp_close_shutdown+0x1a8>)
 800f746:	f009 fb61 	bl	8018e0c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f752:	687d      	ldr	r5, [r7, #4]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	3304      	adds	r3, #4
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	8ad2      	ldrh	r2, [r2, #22]
 800f75c:	6879      	ldr	r1, [r7, #4]
 800f75e:	8b09      	ldrh	r1, [r1, #24]
 800f760:	9102      	str	r1, [sp, #8]
 800f762:	9201      	str	r2, [sp, #4]
 800f764:	9300      	str	r3, [sp, #0]
 800f766:	462b      	mov	r3, r5
 800f768:	4622      	mov	r2, r4
 800f76a:	4601      	mov	r1, r0
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f005 fdb7 	bl	80152e0 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f772:	6878      	ldr	r0, [r7, #4]
 800f774:	f001 fb98 	bl	8010ea8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f778:	4b47      	ldr	r3, [pc, #284]	; (800f898 <tcp_close_shutdown+0x1b0>)
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	687a      	ldr	r2, [r7, #4]
 800f77e:	429a      	cmp	r2, r3
 800f780:	d105      	bne.n	800f78e <tcp_close_shutdown+0xa6>
 800f782:	4b45      	ldr	r3, [pc, #276]	; (800f898 <tcp_close_shutdown+0x1b0>)
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	68db      	ldr	r3, [r3, #12]
 800f788:	4a43      	ldr	r2, [pc, #268]	; (800f898 <tcp_close_shutdown+0x1b0>)
 800f78a:	6013      	str	r3, [r2, #0]
 800f78c:	e013      	b.n	800f7b6 <tcp_close_shutdown+0xce>
 800f78e:	4b42      	ldr	r3, [pc, #264]	; (800f898 <tcp_close_shutdown+0x1b0>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	60fb      	str	r3, [r7, #12]
 800f794:	e00c      	b.n	800f7b0 <tcp_close_shutdown+0xc8>
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d104      	bne.n	800f7aa <tcp_close_shutdown+0xc2>
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68da      	ldr	r2, [r3, #12]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	60da      	str	r2, [r3, #12]
 800f7a8:	e005      	b.n	800f7b6 <tcp_close_shutdown+0xce>
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	68db      	ldr	r3, [r3, #12]
 800f7ae:	60fb      	str	r3, [r7, #12]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d1ef      	bne.n	800f796 <tcp_close_shutdown+0xae>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	60da      	str	r2, [r3, #12]
 800f7bc:	4b37      	ldr	r3, [pc, #220]	; (800f89c <tcp_close_shutdown+0x1b4>)
 800f7be:	2201      	movs	r2, #1
 800f7c0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f7c2:	4b37      	ldr	r3, [pc, #220]	; (800f8a0 <tcp_close_shutdown+0x1b8>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d102      	bne.n	800f7d2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f7cc:	f004 f82c 	bl	8013828 <tcp_trigger_input_pcb_close>
 800f7d0:	e002      	b.n	800f7d8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f7d2:	6878      	ldr	r0, [r7, #4]
 800f7d4:	f7ff fed6 	bl	800f584 <tcp_free>
      }
      return ERR_OK;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	e050      	b.n	800f87e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	7d1b      	ldrb	r3, [r3, #20]
 800f7e0:	2b02      	cmp	r3, #2
 800f7e2:	d03b      	beq.n	800f85c <tcp_close_shutdown+0x174>
 800f7e4:	2b02      	cmp	r3, #2
 800f7e6:	dc44      	bgt.n	800f872 <tcp_close_shutdown+0x18a>
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d002      	beq.n	800f7f2 <tcp_close_shutdown+0x10a>
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d02a      	beq.n	800f846 <tcp_close_shutdown+0x15e>
 800f7f0:	e03f      	b.n	800f872 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	8adb      	ldrh	r3, [r3, #22]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d021      	beq.n	800f83e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f7fa:	4b2a      	ldr	r3, [pc, #168]	; (800f8a4 <tcp_close_shutdown+0x1bc>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	429a      	cmp	r2, r3
 800f802:	d105      	bne.n	800f810 <tcp_close_shutdown+0x128>
 800f804:	4b27      	ldr	r3, [pc, #156]	; (800f8a4 <tcp_close_shutdown+0x1bc>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	68db      	ldr	r3, [r3, #12]
 800f80a:	4a26      	ldr	r2, [pc, #152]	; (800f8a4 <tcp_close_shutdown+0x1bc>)
 800f80c:	6013      	str	r3, [r2, #0]
 800f80e:	e013      	b.n	800f838 <tcp_close_shutdown+0x150>
 800f810:	4b24      	ldr	r3, [pc, #144]	; (800f8a4 <tcp_close_shutdown+0x1bc>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	60bb      	str	r3, [r7, #8]
 800f816:	e00c      	b.n	800f832 <tcp_close_shutdown+0x14a>
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	429a      	cmp	r2, r3
 800f820:	d104      	bne.n	800f82c <tcp_close_shutdown+0x144>
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	68da      	ldr	r2, [r3, #12]
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	60da      	str	r2, [r3, #12]
 800f82a:	e005      	b.n	800f838 <tcp_close_shutdown+0x150>
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	60bb      	str	r3, [r7, #8]
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d1ef      	bne.n	800f818 <tcp_close_shutdown+0x130>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2200      	movs	r2, #0
 800f83c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	f7ff fea0 	bl	800f584 <tcp_free>
      break;
 800f844:	e01a      	b.n	800f87c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f7ff ff14 	bl	800f674 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f84c:	6879      	ldr	r1, [r7, #4]
 800f84e:	4816      	ldr	r0, [pc, #88]	; (800f8a8 <tcp_close_shutdown+0x1c0>)
 800f850:	f001 fb7a 	bl	8010f48 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f7ff feb1 	bl	800f5bc <tcp_free_listen>
      break;
 800f85a:	e00f      	b.n	800f87c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f85c:	6879      	ldr	r1, [r7, #4]
 800f85e:	480e      	ldr	r0, [pc, #56]	; (800f898 <tcp_close_shutdown+0x1b0>)
 800f860:	f001 fb72 	bl	8010f48 <tcp_pcb_remove>
 800f864:	4b0d      	ldr	r3, [pc, #52]	; (800f89c <tcp_close_shutdown+0x1b4>)
 800f866:	2201      	movs	r2, #1
 800f868:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f86a:	6878      	ldr	r0, [r7, #4]
 800f86c:	f7ff fe8a 	bl	800f584 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f870:	e004      	b.n	800f87c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f872:	6878      	ldr	r0, [r7, #4]
 800f874:	f000 f81a 	bl	800f8ac <tcp_close_shutdown_fin>
 800f878:	4603      	mov	r3, r0
 800f87a:	e000      	b.n	800f87e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f87c:	2300      	movs	r3, #0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3710      	adds	r7, #16
 800f882:	46bd      	mov	sp, r7
 800f884:	bdb0      	pop	{r4, r5, r7, pc}
 800f886:	bf00      	nop
 800f888:	0801b8bc 	.word	0x0801b8bc
 800f88c:	0801b990 	.word	0x0801b990
 800f890:	0801b900 	.word	0x0801b900
 800f894:	0801b9b0 	.word	0x0801b9b0
 800f898:	2000bca8 	.word	0x2000bca8
 800f89c:	2000bca4 	.word	0x2000bca4
 800f8a0:	2000bcbc 	.word	0x2000bcbc
 800f8a4:	2000bcb4 	.word	0x2000bcb4
 800f8a8:	2000bcb0 	.word	0x2000bcb0

0800f8ac <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d106      	bne.n	800f8c8 <tcp_close_shutdown_fin+0x1c>
 800f8ba:	4b2e      	ldr	r3, [pc, #184]	; (800f974 <tcp_close_shutdown_fin+0xc8>)
 800f8bc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f8c0:	492d      	ldr	r1, [pc, #180]	; (800f978 <tcp_close_shutdown_fin+0xcc>)
 800f8c2:	482e      	ldr	r0, [pc, #184]	; (800f97c <tcp_close_shutdown_fin+0xd0>)
 800f8c4:	f009 faa2 	bl	8018e0c <iprintf>

  switch (pcb->state) {
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	7d1b      	ldrb	r3, [r3, #20]
 800f8cc:	2b07      	cmp	r3, #7
 800f8ce:	d020      	beq.n	800f912 <tcp_close_shutdown_fin+0x66>
 800f8d0:	2b07      	cmp	r3, #7
 800f8d2:	dc2b      	bgt.n	800f92c <tcp_close_shutdown_fin+0x80>
 800f8d4:	2b03      	cmp	r3, #3
 800f8d6:	d002      	beq.n	800f8de <tcp_close_shutdown_fin+0x32>
 800f8d8:	2b04      	cmp	r3, #4
 800f8da:	d00d      	beq.n	800f8f8 <tcp_close_shutdown_fin+0x4c>
 800f8dc:	e026      	b.n	800f92c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f8de:	6878      	ldr	r0, [r7, #4]
 800f8e0:	f004 fe0c 	bl	80144fc <tcp_send_fin>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d11f      	bne.n	800f930 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2205      	movs	r2, #5
 800f8f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f8f6:	e01b      	b.n	800f930 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f004 fdff 	bl	80144fc <tcp_send_fin>
 800f8fe:	4603      	mov	r3, r0
 800f900:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d114      	bne.n	800f934 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2205      	movs	r2, #5
 800f90e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f910:	e010      	b.n	800f934 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f004 fdf2 	bl	80144fc <tcp_send_fin>
 800f918:	4603      	mov	r3, r0
 800f91a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f91c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d109      	bne.n	800f938 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2209      	movs	r2, #9
 800f928:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f92a:	e005      	b.n	800f938 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f92c:	2300      	movs	r3, #0
 800f92e:	e01c      	b.n	800f96a <tcp_close_shutdown_fin+0xbe>
      break;
 800f930:	bf00      	nop
 800f932:	e002      	b.n	800f93a <tcp_close_shutdown_fin+0x8e>
      break;
 800f934:	bf00      	nop
 800f936:	e000      	b.n	800f93a <tcp_close_shutdown_fin+0x8e>
      break;
 800f938:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f93a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d103      	bne.n	800f94a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f942:	6878      	ldr	r0, [r7, #4]
 800f944:	f004 ff18 	bl	8014778 <tcp_output>
 800f948:	e00d      	b.n	800f966 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f94e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f952:	d108      	bne.n	800f966 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	8b5b      	ldrh	r3, [r3, #26]
 800f958:	f043 0308 	orr.w	r3, r3, #8
 800f95c:	b29a      	uxth	r2, r3
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f962:	2300      	movs	r3, #0
 800f964:	e001      	b.n	800f96a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f966:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop
 800f974:	0801b8bc 	.word	0x0801b8bc
 800f978:	0801b96c 	.word	0x0801b96c
 800f97c:	0801b900 	.word	0x0801b900

0800f980 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d109      	bne.n	800f9a2 <tcp_close+0x22>
 800f98e:	4b0f      	ldr	r3, [pc, #60]	; (800f9cc <tcp_close+0x4c>)
 800f990:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f994:	490e      	ldr	r1, [pc, #56]	; (800f9d0 <tcp_close+0x50>)
 800f996:	480f      	ldr	r0, [pc, #60]	; (800f9d4 <tcp_close+0x54>)
 800f998:	f009 fa38 	bl	8018e0c <iprintf>
 800f99c:	f06f 030f 	mvn.w	r3, #15
 800f9a0:	e00f      	b.n	800f9c2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	7d1b      	ldrb	r3, [r3, #20]
 800f9a6:	2b01      	cmp	r3, #1
 800f9a8:	d006      	beq.n	800f9b8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	8b5b      	ldrh	r3, [r3, #26]
 800f9ae:	f043 0310 	orr.w	r3, r3, #16
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f9b8:	2101      	movs	r1, #1
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f7ff fe94 	bl	800f6e8 <tcp_close_shutdown>
 800f9c0:	4603      	mov	r3, r0
}
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	3708      	adds	r7, #8
 800f9c6:	46bd      	mov	sp, r7
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	0801b8bc 	.word	0x0801b8bc
 800f9d0:	0801b9cc 	.word	0x0801b9cc
 800f9d4:	0801b900 	.word	0x0801b900

0800f9d8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d109      	bne.n	800f9fe <tcp_shutdown+0x26>
 800f9ea:	4b26      	ldr	r3, [pc, #152]	; (800fa84 <tcp_shutdown+0xac>)
 800f9ec:	f240 2207 	movw	r2, #519	; 0x207
 800f9f0:	4925      	ldr	r1, [pc, #148]	; (800fa88 <tcp_shutdown+0xb0>)
 800f9f2:	4826      	ldr	r0, [pc, #152]	; (800fa8c <tcp_shutdown+0xb4>)
 800f9f4:	f009 fa0a 	bl	8018e0c <iprintf>
 800f9f8:	f06f 030f 	mvn.w	r3, #15
 800f9fc:	e03d      	b.n	800fa7a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	7d1b      	ldrb	r3, [r3, #20]
 800fa02:	2b01      	cmp	r3, #1
 800fa04:	d102      	bne.n	800fa0c <tcp_shutdown+0x34>
    return ERR_CONN;
 800fa06:	f06f 030a 	mvn.w	r3, #10
 800fa0a:	e036      	b.n	800fa7a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d01b      	beq.n	800fa4a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	8b5b      	ldrh	r3, [r3, #26]
 800fa16:	f043 0310 	orr.w	r3, r3, #16
 800fa1a:	b29a      	uxth	r2, r3
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d005      	beq.n	800fa32 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800fa26:	2101      	movs	r1, #1
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f7ff fe5d 	bl	800f6e8 <tcp_close_shutdown>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	e023      	b.n	800fa7a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d007      	beq.n	800fa4a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f7ff f98a 	bl	800ed58 <pbuf_free>
      pcb->refused_data = NULL;
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2200      	movs	r2, #0
 800fa48:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d013      	beq.n	800fa78 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	7d1b      	ldrb	r3, [r3, #20]
 800fa54:	2b04      	cmp	r3, #4
 800fa56:	dc02      	bgt.n	800fa5e <tcp_shutdown+0x86>
 800fa58:	2b03      	cmp	r3, #3
 800fa5a:	da02      	bge.n	800fa62 <tcp_shutdown+0x8a>
 800fa5c:	e009      	b.n	800fa72 <tcp_shutdown+0x9a>
 800fa5e:	2b07      	cmp	r3, #7
 800fa60:	d107      	bne.n	800fa72 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	b2db      	uxtb	r3, r3
 800fa66:	4619      	mov	r1, r3
 800fa68:	68f8      	ldr	r0, [r7, #12]
 800fa6a:	f7ff fe3d 	bl	800f6e8 <tcp_close_shutdown>
 800fa6e:	4603      	mov	r3, r0
 800fa70:	e003      	b.n	800fa7a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800fa72:	f06f 030a 	mvn.w	r3, #10
 800fa76:	e000      	b.n	800fa7a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800fa78:	2300      	movs	r3, #0
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	0801b8bc 	.word	0x0801b8bc
 800fa88:	0801b9e4 	.word	0x0801b9e4
 800fa8c:	0801b900 	.word	0x0801b900

0800fa90 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fa90:	b580      	push	{r7, lr}
 800fa92:	b08e      	sub	sp, #56	; 0x38
 800fa94:	af04      	add	r7, sp, #16
 800fa96:	6078      	str	r0, [r7, #4]
 800fa98:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d107      	bne.n	800fab0 <tcp_abandon+0x20>
 800faa0:	4b52      	ldr	r3, [pc, #328]	; (800fbec <tcp_abandon+0x15c>)
 800faa2:	f240 223d 	movw	r2, #573	; 0x23d
 800faa6:	4952      	ldr	r1, [pc, #328]	; (800fbf0 <tcp_abandon+0x160>)
 800faa8:	4852      	ldr	r0, [pc, #328]	; (800fbf4 <tcp_abandon+0x164>)
 800faaa:	f009 f9af 	bl	8018e0c <iprintf>
 800faae:	e099      	b.n	800fbe4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	7d1b      	ldrb	r3, [r3, #20]
 800fab4:	2b01      	cmp	r3, #1
 800fab6:	d106      	bne.n	800fac6 <tcp_abandon+0x36>
 800fab8:	4b4c      	ldr	r3, [pc, #304]	; (800fbec <tcp_abandon+0x15c>)
 800faba:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fabe:	494e      	ldr	r1, [pc, #312]	; (800fbf8 <tcp_abandon+0x168>)
 800fac0:	484c      	ldr	r0, [pc, #304]	; (800fbf4 <tcp_abandon+0x164>)
 800fac2:	f009 f9a3 	bl	8018e0c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	7d1b      	ldrb	r3, [r3, #20]
 800faca:	2b0a      	cmp	r3, #10
 800facc:	d107      	bne.n	800fade <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800face:	6879      	ldr	r1, [r7, #4]
 800fad0:	484a      	ldr	r0, [pc, #296]	; (800fbfc <tcp_abandon+0x16c>)
 800fad2:	f001 fa39 	bl	8010f48 <tcp_pcb_remove>
    tcp_free(pcb);
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f7ff fd54 	bl	800f584 <tcp_free>
 800fadc:	e082      	b.n	800fbe4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800fae2:	2300      	movs	r3, #0
 800fae4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800faea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faf0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800faf8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	691b      	ldr	r3, [r3, #16]
 800fafe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	7d1b      	ldrb	r3, [r3, #20]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d126      	bne.n	800fb56 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	8adb      	ldrh	r3, [r3, #22]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d02e      	beq.n	800fb6e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fb10:	4b3b      	ldr	r3, [pc, #236]	; (800fc00 <tcp_abandon+0x170>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	687a      	ldr	r2, [r7, #4]
 800fb16:	429a      	cmp	r2, r3
 800fb18:	d105      	bne.n	800fb26 <tcp_abandon+0x96>
 800fb1a:	4b39      	ldr	r3, [pc, #228]	; (800fc00 <tcp_abandon+0x170>)
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	68db      	ldr	r3, [r3, #12]
 800fb20:	4a37      	ldr	r2, [pc, #220]	; (800fc00 <tcp_abandon+0x170>)
 800fb22:	6013      	str	r3, [r2, #0]
 800fb24:	e013      	b.n	800fb4e <tcp_abandon+0xbe>
 800fb26:	4b36      	ldr	r3, [pc, #216]	; (800fc00 <tcp_abandon+0x170>)
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	61fb      	str	r3, [r7, #28]
 800fb2c:	e00c      	b.n	800fb48 <tcp_abandon+0xb8>
 800fb2e:	69fb      	ldr	r3, [r7, #28]
 800fb30:	68db      	ldr	r3, [r3, #12]
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d104      	bne.n	800fb42 <tcp_abandon+0xb2>
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	68da      	ldr	r2, [r3, #12]
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	60da      	str	r2, [r3, #12]
 800fb40:	e005      	b.n	800fb4e <tcp_abandon+0xbe>
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	61fb      	str	r3, [r7, #28]
 800fb48:	69fb      	ldr	r3, [r7, #28]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d1ef      	bne.n	800fb2e <tcp_abandon+0x9e>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	60da      	str	r2, [r3, #12]
 800fb54:	e00b      	b.n	800fb6e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	8adb      	ldrh	r3, [r3, #22]
 800fb5e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fb60:	6879      	ldr	r1, [r7, #4]
 800fb62:	4828      	ldr	r0, [pc, #160]	; (800fc04 <tcp_abandon+0x174>)
 800fb64:	f001 f9f0 	bl	8010f48 <tcp_pcb_remove>
 800fb68:	4b27      	ldr	r3, [pc, #156]	; (800fc08 <tcp_abandon+0x178>)
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d004      	beq.n	800fb80 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	f000 fec4 	bl	8010908 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d004      	beq.n	800fb92 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f000 febb 	bl	8010908 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d004      	beq.n	800fba4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f000 feb2 	bl	8010908 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d00e      	beq.n	800fbc8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fbaa:	6879      	ldr	r1, [r7, #4]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	3304      	adds	r3, #4
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	8b12      	ldrh	r2, [r2, #24]
 800fbb4:	9202      	str	r2, [sp, #8]
 800fbb6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fbb8:	9201      	str	r2, [sp, #4]
 800fbba:	9300      	str	r3, [sp, #0]
 800fbbc:	460b      	mov	r3, r1
 800fbbe:	697a      	ldr	r2, [r7, #20]
 800fbc0:	69b9      	ldr	r1, [r7, #24]
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f005 fb8c 	bl	80152e0 <tcp_rst>
    }
    last_state = pcb->state;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	7d1b      	ldrb	r3, [r3, #20]
 800fbcc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fbce:	6878      	ldr	r0, [r7, #4]
 800fbd0:	f7ff fcd8 	bl	800f584 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d004      	beq.n	800fbe4 <tcp_abandon+0x154>
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	f06f 010c 	mvn.w	r1, #12
 800fbe0:	68f8      	ldr	r0, [r7, #12]
 800fbe2:	4798      	blx	r3
  }
}
 800fbe4:	3728      	adds	r7, #40	; 0x28
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	0801b8bc 	.word	0x0801b8bc
 800fbf0:	0801ba00 	.word	0x0801ba00
 800fbf4:	0801b900 	.word	0x0801b900
 800fbf8:	0801ba1c 	.word	0x0801ba1c
 800fbfc:	2000bcb8 	.word	0x2000bcb8
 800fc00:	2000bcb4 	.word	0x2000bcb4
 800fc04:	2000bca8 	.word	0x2000bca8
 800fc08:	2000bca4 	.word	0x2000bca4

0800fc0c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b082      	sub	sp, #8
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fc14:	2101      	movs	r1, #1
 800fc16:	6878      	ldr	r0, [r7, #4]
 800fc18:	f7ff ff3a 	bl	800fa90 <tcp_abandon>
}
 800fc1c:	bf00      	nop
 800fc1e:	3708      	adds	r7, #8
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b088      	sub	sp, #32
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	4613      	mov	r3, r2
 800fc30:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800fc32:	2304      	movs	r3, #4
 800fc34:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fc36:	68bb      	ldr	r3, [r7, #8]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d101      	bne.n	800fc40 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800fc3c:	4b3e      	ldr	r3, [pc, #248]	; (800fd38 <tcp_bind+0x114>)
 800fc3e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d109      	bne.n	800fc5a <tcp_bind+0x36>
 800fc46:	4b3d      	ldr	r3, [pc, #244]	; (800fd3c <tcp_bind+0x118>)
 800fc48:	f240 22a9 	movw	r2, #681	; 0x2a9
 800fc4c:	493c      	ldr	r1, [pc, #240]	; (800fd40 <tcp_bind+0x11c>)
 800fc4e:	483d      	ldr	r0, [pc, #244]	; (800fd44 <tcp_bind+0x120>)
 800fc50:	f009 f8dc 	bl	8018e0c <iprintf>
 800fc54:	f06f 030f 	mvn.w	r3, #15
 800fc58:	e06a      	b.n	800fd30 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	7d1b      	ldrb	r3, [r3, #20]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d009      	beq.n	800fc76 <tcp_bind+0x52>
 800fc62:	4b36      	ldr	r3, [pc, #216]	; (800fd3c <tcp_bind+0x118>)
 800fc64:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fc68:	4937      	ldr	r1, [pc, #220]	; (800fd48 <tcp_bind+0x124>)
 800fc6a:	4836      	ldr	r0, [pc, #216]	; (800fd44 <tcp_bind+0x120>)
 800fc6c:	f009 f8ce 	bl	8018e0c <iprintf>
 800fc70:	f06f 0305 	mvn.w	r3, #5
 800fc74:	e05c      	b.n	800fd30 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800fc76:	88fb      	ldrh	r3, [r7, #6]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d109      	bne.n	800fc90 <tcp_bind+0x6c>
    port = tcp_new_port();
 800fc7c:	f000 f9de 	bl	801003c <tcp_new_port>
 800fc80:	4603      	mov	r3, r0
 800fc82:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fc84:	88fb      	ldrh	r3, [r7, #6]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d135      	bne.n	800fcf6 <tcp_bind+0xd2>
      return ERR_BUF;
 800fc8a:	f06f 0301 	mvn.w	r3, #1
 800fc8e:	e04f      	b.n	800fd30 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800fc90:	2300      	movs	r3, #0
 800fc92:	61fb      	str	r3, [r7, #28]
 800fc94:	e02b      	b.n	800fcee <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fc96:	4a2d      	ldr	r2, [pc, #180]	; (800fd4c <tcp_bind+0x128>)
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	61bb      	str	r3, [r7, #24]
 800fca2:	e01e      	b.n	800fce2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800fca4:	69bb      	ldr	r3, [r7, #24]
 800fca6:	8adb      	ldrh	r3, [r3, #22]
 800fca8:	88fa      	ldrh	r2, [r7, #6]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d116      	bne.n	800fcdc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800fcae:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d010      	beq.n	800fcd6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d00c      	beq.n	800fcd6 <tcp_bind+0xb2>
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d009      	beq.n	800fcd6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d005      	beq.n	800fcd6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800fcca:	69bb      	ldr	r3, [r7, #24]
 800fccc:	681a      	ldr	r2, [r3, #0]
 800fcce:	68bb      	ldr	r3, [r7, #8]
 800fcd0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fcd2:	429a      	cmp	r2, r3
 800fcd4:	d102      	bne.n	800fcdc <tcp_bind+0xb8>
              return ERR_USE;
 800fcd6:	f06f 0307 	mvn.w	r3, #7
 800fcda:	e029      	b.n	800fd30 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fcdc:	69bb      	ldr	r3, [r7, #24]
 800fcde:	68db      	ldr	r3, [r3, #12]
 800fce0:	61bb      	str	r3, [r7, #24]
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d1dd      	bne.n	800fca4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800fce8:	69fb      	ldr	r3, [r7, #28]
 800fcea:	3301      	adds	r3, #1
 800fcec:	61fb      	str	r3, [r7, #28]
 800fcee:	69fa      	ldr	r2, [r7, #28]
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	dbcf      	blt.n	800fc96 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800fcf6:	68bb      	ldr	r3, [r7, #8]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d00c      	beq.n	800fd16 <tcp_bind+0xf2>
 800fcfc:	68bb      	ldr	r3, [r7, #8]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d008      	beq.n	800fd16 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d002      	beq.n	800fd10 <tcp_bind+0xec>
 800fd0a:	68bb      	ldr	r3, [r7, #8]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	e000      	b.n	800fd12 <tcp_bind+0xee>
 800fd10:	2300      	movs	r3, #0
 800fd12:	68fa      	ldr	r2, [r7, #12]
 800fd14:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	88fa      	ldrh	r2, [r7, #6]
 800fd1a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800fd1c:	4b0c      	ldr	r3, [pc, #48]	; (800fd50 <tcp_bind+0x12c>)
 800fd1e:	681a      	ldr	r2, [r3, #0]
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	60da      	str	r2, [r3, #12]
 800fd24:	4a0a      	ldr	r2, [pc, #40]	; (800fd50 <tcp_bind+0x12c>)
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	6013      	str	r3, [r2, #0]
 800fd2a:	f005 fc9b 	bl	8015664 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800fd2e:	2300      	movs	r3, #0
}
 800fd30:	4618      	mov	r0, r3
 800fd32:	3720      	adds	r7, #32
 800fd34:	46bd      	mov	sp, r7
 800fd36:	bd80      	pop	{r7, pc}
 800fd38:	0801dd7c 	.word	0x0801dd7c
 800fd3c:	0801b8bc 	.word	0x0801b8bc
 800fd40:	0801ba50 	.word	0x0801ba50
 800fd44:	0801b900 	.word	0x0801b900
 800fd48:	0801ba68 	.word	0x0801ba68
 800fd4c:	0801dd4c 	.word	0x0801dd4c
 800fd50:	2000bcb4 	.word	0x2000bcb4

0800fd54 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b084      	sub	sp, #16
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	60f8      	str	r0, [r7, #12]
 800fd5c:	60b9      	str	r1, [r7, #8]
 800fd5e:	4613      	mov	r3, r2
 800fd60:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d106      	bne.n	800fd76 <tcp_accept_null+0x22>
 800fd68:	4b07      	ldr	r3, [pc, #28]	; (800fd88 <tcp_accept_null+0x34>)
 800fd6a:	f240 320f 	movw	r2, #783	; 0x30f
 800fd6e:	4907      	ldr	r1, [pc, #28]	; (800fd8c <tcp_accept_null+0x38>)
 800fd70:	4807      	ldr	r0, [pc, #28]	; (800fd90 <tcp_accept_null+0x3c>)
 800fd72:	f009 f84b 	bl	8018e0c <iprintf>

  tcp_abort(pcb);
 800fd76:	68b8      	ldr	r0, [r7, #8]
 800fd78:	f7ff ff48 	bl	800fc0c <tcp_abort>

  return ERR_ABRT;
 800fd7c:	f06f 030c 	mvn.w	r3, #12
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3710      	adds	r7, #16
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}
 800fd88:	0801b8bc 	.word	0x0801b8bc
 800fd8c:	0801ba90 	.word	0x0801ba90
 800fd90:	0801b900 	.word	0x0801b900

0800fd94 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b088      	sub	sp, #32
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	60f8      	str	r0, [r7, #12]
 800fd9c:	460b      	mov	r3, r1
 800fd9e:	607a      	str	r2, [r7, #4]
 800fda0:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800fda2:	2300      	movs	r3, #0
 800fda4:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d109      	bne.n	800fdc0 <tcp_listen_with_backlog_and_err+0x2c>
 800fdac:	4b47      	ldr	r3, [pc, #284]	; (800fecc <tcp_listen_with_backlog_and_err+0x138>)
 800fdae:	f240 3259 	movw	r2, #857	; 0x359
 800fdb2:	4947      	ldr	r1, [pc, #284]	; (800fed0 <tcp_listen_with_backlog_and_err+0x13c>)
 800fdb4:	4847      	ldr	r0, [pc, #284]	; (800fed4 <tcp_listen_with_backlog_and_err+0x140>)
 800fdb6:	f009 f829 	bl	8018e0c <iprintf>
 800fdba:	23f0      	movs	r3, #240	; 0xf0
 800fdbc:	76fb      	strb	r3, [r7, #27]
 800fdbe:	e079      	b.n	800feb4 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	7d1b      	ldrb	r3, [r3, #20]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d009      	beq.n	800fddc <tcp_listen_with_backlog_and_err+0x48>
 800fdc8:	4b40      	ldr	r3, [pc, #256]	; (800fecc <tcp_listen_with_backlog_and_err+0x138>)
 800fdca:	f240 325a 	movw	r2, #858	; 0x35a
 800fdce:	4942      	ldr	r1, [pc, #264]	; (800fed8 <tcp_listen_with_backlog_and_err+0x144>)
 800fdd0:	4840      	ldr	r0, [pc, #256]	; (800fed4 <tcp_listen_with_backlog_and_err+0x140>)
 800fdd2:	f009 f81b 	bl	8018e0c <iprintf>
 800fdd6:	23f1      	movs	r3, #241	; 0xf1
 800fdd8:	76fb      	strb	r3, [r7, #27]
 800fdda:	e06b      	b.n	800feb4 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	7d1b      	ldrb	r3, [r3, #20]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d104      	bne.n	800fdee <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800fde8:	23f7      	movs	r3, #247	; 0xf7
 800fdea:	76fb      	strb	r3, [r7, #27]
    goto done;
 800fdec:	e062      	b.n	800feb4 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800fdee:	2002      	movs	r0, #2
 800fdf0:	f7fe f88a 	bl	800df08 <memp_malloc>
 800fdf4:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d102      	bne.n	800fe02 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800fdfc:	23ff      	movs	r3, #255	; 0xff
 800fdfe:	76fb      	strb	r3, [r7, #27]
    goto done;
 800fe00:	e058      	b.n	800feb4 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	691a      	ldr	r2, [r3, #16]
 800fe06:	69fb      	ldr	r3, [r7, #28]
 800fe08:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	8ada      	ldrh	r2, [r3, #22]
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800fe12:	69fb      	ldr	r3, [r7, #28]
 800fe14:	2201      	movs	r2, #1
 800fe16:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	7d5a      	ldrb	r2, [r3, #21]
 800fe1c:	69fb      	ldr	r3, [r7, #28]
 800fe1e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	7a5a      	ldrb	r2, [r3, #9]
 800fe24:	69fb      	ldr	r3, [r7, #28]
 800fe26:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	7ada      	ldrb	r2, [r3, #11]
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	7a9a      	ldrb	r2, [r3, #10]
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	681a      	ldr	r2, [r3, #0]
 800fe42:	69fb      	ldr	r3, [r7, #28]
 800fe44:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	8adb      	ldrh	r3, [r3, #22]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d021      	beq.n	800fe92 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe4e:	4b23      	ldr	r3, [pc, #140]	; (800fedc <tcp_listen_with_backlog_and_err+0x148>)
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	68fa      	ldr	r2, [r7, #12]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d105      	bne.n	800fe64 <tcp_listen_with_backlog_and_err+0xd0>
 800fe58:	4b20      	ldr	r3, [pc, #128]	; (800fedc <tcp_listen_with_backlog_and_err+0x148>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	68db      	ldr	r3, [r3, #12]
 800fe5e:	4a1f      	ldr	r2, [pc, #124]	; (800fedc <tcp_listen_with_backlog_and_err+0x148>)
 800fe60:	6013      	str	r3, [r2, #0]
 800fe62:	e013      	b.n	800fe8c <tcp_listen_with_backlog_and_err+0xf8>
 800fe64:	4b1d      	ldr	r3, [pc, #116]	; (800fedc <tcp_listen_with_backlog_and_err+0x148>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	617b      	str	r3, [r7, #20]
 800fe6a:	e00c      	b.n	800fe86 <tcp_listen_with_backlog_and_err+0xf2>
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	68fa      	ldr	r2, [r7, #12]
 800fe72:	429a      	cmp	r2, r3
 800fe74:	d104      	bne.n	800fe80 <tcp_listen_with_backlog_and_err+0xec>
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	68da      	ldr	r2, [r3, #12]
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	60da      	str	r2, [r3, #12]
 800fe7e:	e005      	b.n	800fe8c <tcp_listen_with_backlog_and_err+0xf8>
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	68db      	ldr	r3, [r3, #12]
 800fe84:	617b      	str	r3, [r7, #20]
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d1ef      	bne.n	800fe6c <tcp_listen_with_backlog_and_err+0xd8>
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2200      	movs	r2, #0
 800fe90:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800fe92:	68f8      	ldr	r0, [r7, #12]
 800fe94:	f7ff fb76 	bl	800f584 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	4a11      	ldr	r2, [pc, #68]	; (800fee0 <tcp_listen_with_backlog_and_err+0x14c>)
 800fe9c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800fe9e:	4b11      	ldr	r3, [pc, #68]	; (800fee4 <tcp_listen_with_backlog_and_err+0x150>)
 800fea0:	681a      	ldr	r2, [r3, #0]
 800fea2:	69fb      	ldr	r3, [r7, #28]
 800fea4:	60da      	str	r2, [r3, #12]
 800fea6:	4a0f      	ldr	r2, [pc, #60]	; (800fee4 <tcp_listen_with_backlog_and_err+0x150>)
 800fea8:	69fb      	ldr	r3, [r7, #28]
 800feaa:	6013      	str	r3, [r2, #0]
 800feac:	f005 fbda 	bl	8015664 <tcp_timer_needed>
  res = ERR_OK;
 800feb0:	2300      	movs	r3, #0
 800feb2:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d002      	beq.n	800fec0 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	7efa      	ldrb	r2, [r7, #27]
 800febe:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800fec0:	69fb      	ldr	r3, [r7, #28]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3720      	adds	r7, #32
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	0801b8bc 	.word	0x0801b8bc
 800fed0:	0801bab0 	.word	0x0801bab0
 800fed4:	0801b900 	.word	0x0801b900
 800fed8:	0801bae0 	.word	0x0801bae0
 800fedc:	2000bcb4 	.word	0x2000bcb4
 800fee0:	0800fd55 	.word	0x0800fd55
 800fee4:	2000bcb0 	.word	0x2000bcb0

0800fee8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d106      	bne.n	800ff04 <tcp_update_rcv_ann_wnd+0x1c>
 800fef6:	4b25      	ldr	r3, [pc, #148]	; (800ff8c <tcp_update_rcv_ann_wnd+0xa4>)
 800fef8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fefc:	4924      	ldr	r1, [pc, #144]	; (800ff90 <tcp_update_rcv_ann_wnd+0xa8>)
 800fefe:	4825      	ldr	r0, [pc, #148]	; (800ff94 <tcp_update_rcv_ann_wnd+0xac>)
 800ff00:	f008 ff84 	bl	8018e0c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800ff0c:	4413      	add	r3, r2
 800ff0e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff14:	687a      	ldr	r2, [r7, #4]
 800ff16:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800ff18:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800ff1c:	bf28      	it	cs
 800ff1e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800ff22:	b292      	uxth	r2, r2
 800ff24:	4413      	add	r3, r2
 800ff26:	68fa      	ldr	r2, [r7, #12]
 800ff28:	1ad3      	subs	r3, r2, r3
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	db08      	blt.n	800ff40 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff3a:	68fa      	ldr	r2, [r7, #12]
 800ff3c:	1ad3      	subs	r3, r2, r3
 800ff3e:	e020      	b.n	800ff82 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	dd03      	ble.n	800ff56 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2200      	movs	r2, #0
 800ff52:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ff54:	e014      	b.n	800ff80 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff5e:	1ad3      	subs	r3, r2, r3
 800ff60:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff68:	d306      	bcc.n	800ff78 <tcp_update_rcv_ann_wnd+0x90>
 800ff6a:	4b08      	ldr	r3, [pc, #32]	; (800ff8c <tcp_update_rcv_ann_wnd+0xa4>)
 800ff6c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ff70:	4909      	ldr	r1, [pc, #36]	; (800ff98 <tcp_update_rcv_ann_wnd+0xb0>)
 800ff72:	4808      	ldr	r0, [pc, #32]	; (800ff94 <tcp_update_rcv_ann_wnd+0xac>)
 800ff74:	f008 ff4a 	bl	8018e0c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ff80:	2300      	movs	r3, #0
  }
}
 800ff82:	4618      	mov	r0, r3
 800ff84:	3710      	adds	r7, #16
 800ff86:	46bd      	mov	sp, r7
 800ff88:	bd80      	pop	{r7, pc}
 800ff8a:	bf00      	nop
 800ff8c:	0801b8bc 	.word	0x0801b8bc
 800ff90:	0801bb18 	.word	0x0801bb18
 800ff94:	0801b900 	.word	0x0801b900
 800ff98:	0801bb3c 	.word	0x0801bb3c

0800ff9c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b084      	sub	sp, #16
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
 800ffa4:	460b      	mov	r3, r1
 800ffa6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d107      	bne.n	800ffbe <tcp_recved+0x22>
 800ffae:	4b1f      	ldr	r3, [pc, #124]	; (801002c <tcp_recved+0x90>)
 800ffb0:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ffb4:	491e      	ldr	r1, [pc, #120]	; (8010030 <tcp_recved+0x94>)
 800ffb6:	481f      	ldr	r0, [pc, #124]	; (8010034 <tcp_recved+0x98>)
 800ffb8:	f008 ff28 	bl	8018e0c <iprintf>
 800ffbc:	e032      	b.n	8010024 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	7d1b      	ldrb	r3, [r3, #20]
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d106      	bne.n	800ffd4 <tcp_recved+0x38>
 800ffc6:	4b19      	ldr	r3, [pc, #100]	; (801002c <tcp_recved+0x90>)
 800ffc8:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ffcc:	491a      	ldr	r1, [pc, #104]	; (8010038 <tcp_recved+0x9c>)
 800ffce:	4819      	ldr	r0, [pc, #100]	; (8010034 <tcp_recved+0x98>)
 800ffd0:	f008 ff1c 	bl	8018e0c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ffd8:	887b      	ldrh	r3, [r7, #2]
 800ffda:	4413      	add	r3, r2
 800ffdc:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ffde:	89fb      	ldrh	r3, [r7, #14]
 800ffe0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ffe4:	d804      	bhi.n	800fff0 <tcp_recved+0x54>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ffea:	89fa      	ldrh	r2, [r7, #14]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d204      	bcs.n	800fffa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800fff6:	851a      	strh	r2, [r3, #40]	; 0x28
 800fff8:	e002      	b.n	8010000 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	89fa      	ldrh	r2, [r7, #14]
 800fffe:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff ff71 	bl	800fee8 <tcp_update_rcv_ann_wnd>
 8010006:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801000e:	d309      	bcc.n	8010024 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	8b5b      	ldrh	r3, [r3, #26]
 8010014:	f043 0302 	orr.w	r3, r3, #2
 8010018:	b29a      	uxth	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f004 fbaa 	bl	8014778 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010024:	3710      	adds	r7, #16
 8010026:	46bd      	mov	sp, r7
 8010028:	bd80      	pop	{r7, pc}
 801002a:	bf00      	nop
 801002c:	0801b8bc 	.word	0x0801b8bc
 8010030:	0801bb58 	.word	0x0801bb58
 8010034:	0801b900 	.word	0x0801b900
 8010038:	0801bb70 	.word	0x0801bb70

0801003c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801003c:	b480      	push	{r7}
 801003e:	b083      	sub	sp, #12
 8010040:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8010042:	2300      	movs	r3, #0
 8010044:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8010046:	4b1e      	ldr	r3, [pc, #120]	; (80100c0 <tcp_new_port+0x84>)
 8010048:	881b      	ldrh	r3, [r3, #0]
 801004a:	3301      	adds	r3, #1
 801004c:	b29a      	uxth	r2, r3
 801004e:	4b1c      	ldr	r3, [pc, #112]	; (80100c0 <tcp_new_port+0x84>)
 8010050:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8010052:	4b1b      	ldr	r3, [pc, #108]	; (80100c0 <tcp_new_port+0x84>)
 8010054:	881b      	ldrh	r3, [r3, #0]
 8010056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801005a:	4293      	cmp	r3, r2
 801005c:	d103      	bne.n	8010066 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801005e:	4b18      	ldr	r3, [pc, #96]	; (80100c0 <tcp_new_port+0x84>)
 8010060:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010064:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8010066:	2300      	movs	r3, #0
 8010068:	71fb      	strb	r3, [r7, #7]
 801006a:	e01e      	b.n	80100aa <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801006c:	79fb      	ldrb	r3, [r7, #7]
 801006e:	4a15      	ldr	r2, [pc, #84]	; (80100c4 <tcp_new_port+0x88>)
 8010070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	603b      	str	r3, [r7, #0]
 8010078:	e011      	b.n	801009e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	8ada      	ldrh	r2, [r3, #22]
 801007e:	4b10      	ldr	r3, [pc, #64]	; (80100c0 <tcp_new_port+0x84>)
 8010080:	881b      	ldrh	r3, [r3, #0]
 8010082:	429a      	cmp	r2, r3
 8010084:	d108      	bne.n	8010098 <tcp_new_port+0x5c>
        n++;
 8010086:	88bb      	ldrh	r3, [r7, #4]
 8010088:	3301      	adds	r3, #1
 801008a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801008c:	88bb      	ldrh	r3, [r7, #4]
 801008e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010092:	d3d8      	bcc.n	8010046 <tcp_new_port+0xa>
          return 0;
 8010094:	2300      	movs	r3, #0
 8010096:	e00d      	b.n	80100b4 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	68db      	ldr	r3, [r3, #12]
 801009c:	603b      	str	r3, [r7, #0]
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d1ea      	bne.n	801007a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80100a4:	79fb      	ldrb	r3, [r7, #7]
 80100a6:	3301      	adds	r3, #1
 80100a8:	71fb      	strb	r3, [r7, #7]
 80100aa:	79fb      	ldrb	r3, [r7, #7]
 80100ac:	2b03      	cmp	r3, #3
 80100ae:	d9dd      	bls.n	801006c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80100b0:	4b03      	ldr	r3, [pc, #12]	; (80100c0 <tcp_new_port+0x84>)
 80100b2:	881b      	ldrh	r3, [r3, #0]
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	370c      	adds	r7, #12
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr
 80100c0:	20000010 	.word	0x20000010
 80100c4:	0801dd4c 	.word	0x0801dd4c

080100c8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80100c8:	b5b0      	push	{r4, r5, r7, lr}
 80100ca:	b090      	sub	sp, #64	; 0x40
 80100cc:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80100ce:	2300      	movs	r3, #0
 80100d0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80100d4:	4b94      	ldr	r3, [pc, #592]	; (8010328 <tcp_slowtmr+0x260>)
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	3301      	adds	r3, #1
 80100da:	4a93      	ldr	r2, [pc, #588]	; (8010328 <tcp_slowtmr+0x260>)
 80100dc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80100de:	4b93      	ldr	r3, [pc, #588]	; (801032c <tcp_slowtmr+0x264>)
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	3301      	adds	r3, #1
 80100e4:	b2da      	uxtb	r2, r3
 80100e6:	4b91      	ldr	r3, [pc, #580]	; (801032c <tcp_slowtmr+0x264>)
 80100e8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80100ea:	2300      	movs	r3, #0
 80100ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80100ee:	4b90      	ldr	r3, [pc, #576]	; (8010330 <tcp_slowtmr+0x268>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80100f4:	e29f      	b.n	8010636 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80100f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f8:	7d1b      	ldrb	r3, [r3, #20]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d106      	bne.n	801010c <tcp_slowtmr+0x44>
 80100fe:	4b8d      	ldr	r3, [pc, #564]	; (8010334 <tcp_slowtmr+0x26c>)
 8010100:	f240 42be 	movw	r2, #1214	; 0x4be
 8010104:	498c      	ldr	r1, [pc, #560]	; (8010338 <tcp_slowtmr+0x270>)
 8010106:	488d      	ldr	r0, [pc, #564]	; (801033c <tcp_slowtmr+0x274>)
 8010108:	f008 fe80 	bl	8018e0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801010c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010e:	7d1b      	ldrb	r3, [r3, #20]
 8010110:	2b01      	cmp	r3, #1
 8010112:	d106      	bne.n	8010122 <tcp_slowtmr+0x5a>
 8010114:	4b87      	ldr	r3, [pc, #540]	; (8010334 <tcp_slowtmr+0x26c>)
 8010116:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801011a:	4989      	ldr	r1, [pc, #548]	; (8010340 <tcp_slowtmr+0x278>)
 801011c:	4887      	ldr	r0, [pc, #540]	; (801033c <tcp_slowtmr+0x274>)
 801011e:	f008 fe75 	bl	8018e0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8010122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010124:	7d1b      	ldrb	r3, [r3, #20]
 8010126:	2b0a      	cmp	r3, #10
 8010128:	d106      	bne.n	8010138 <tcp_slowtmr+0x70>
 801012a:	4b82      	ldr	r3, [pc, #520]	; (8010334 <tcp_slowtmr+0x26c>)
 801012c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010130:	4984      	ldr	r1, [pc, #528]	; (8010344 <tcp_slowtmr+0x27c>)
 8010132:	4882      	ldr	r0, [pc, #520]	; (801033c <tcp_slowtmr+0x274>)
 8010134:	f008 fe6a 	bl	8018e0c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801013a:	7f9a      	ldrb	r2, [r3, #30]
 801013c:	4b7b      	ldr	r3, [pc, #492]	; (801032c <tcp_slowtmr+0x264>)
 801013e:	781b      	ldrb	r3, [r3, #0]
 8010140:	429a      	cmp	r2, r3
 8010142:	d105      	bne.n	8010150 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8010144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010146:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014a:	68db      	ldr	r3, [r3, #12]
 801014c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801014e:	e272      	b.n	8010636 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010150:	4b76      	ldr	r3, [pc, #472]	; (801032c <tcp_slowtmr+0x264>)
 8010152:	781a      	ldrb	r2, [r3, #0]
 8010154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010156:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010158:	2300      	movs	r3, #0
 801015a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801015e:	2300      	movs	r3, #0
 8010160:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8010164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010166:	7d1b      	ldrb	r3, [r3, #20]
 8010168:	2b02      	cmp	r3, #2
 801016a:	d10a      	bne.n	8010182 <tcp_slowtmr+0xba>
 801016c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010172:	2b05      	cmp	r3, #5
 8010174:	d905      	bls.n	8010182 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8010176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801017a:	3301      	adds	r3, #1
 801017c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010180:	e11e      	b.n	80103c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8010182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010184:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010188:	2b0b      	cmp	r3, #11
 801018a:	d905      	bls.n	8010198 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801018c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010190:	3301      	adds	r3, #1
 8010192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010196:	e113      	b.n	80103c0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d075      	beq.n	801028e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80101a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d006      	beq.n	80101b8 <tcp_slowtmr+0xf0>
 80101aa:	4b62      	ldr	r3, [pc, #392]	; (8010334 <tcp_slowtmr+0x26c>)
 80101ac:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80101b0:	4965      	ldr	r1, [pc, #404]	; (8010348 <tcp_slowtmr+0x280>)
 80101b2:	4862      	ldr	r0, [pc, #392]	; (801033c <tcp_slowtmr+0x274>)
 80101b4:	f008 fe2a 	bl	8018e0c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80101b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d106      	bne.n	80101ce <tcp_slowtmr+0x106>
 80101c0:	4b5c      	ldr	r3, [pc, #368]	; (8010334 <tcp_slowtmr+0x26c>)
 80101c2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80101c6:	4961      	ldr	r1, [pc, #388]	; (801034c <tcp_slowtmr+0x284>)
 80101c8:	485c      	ldr	r0, [pc, #368]	; (801033c <tcp_slowtmr+0x274>)
 80101ca:	f008 fe1f 	bl	8018e0c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80101ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101d0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80101d4:	2b0b      	cmp	r3, #11
 80101d6:	d905      	bls.n	80101e4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80101d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80101dc:	3301      	adds	r3, #1
 80101de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80101e2:	e0ed      	b.n	80103c0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80101e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80101ea:	3b01      	subs	r3, #1
 80101ec:	4a58      	ldr	r2, [pc, #352]	; (8010350 <tcp_slowtmr+0x288>)
 80101ee:	5cd3      	ldrb	r3, [r2, r3]
 80101f0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80101f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80101f8:	7c7a      	ldrb	r2, [r7, #17]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d907      	bls.n	801020e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80101fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010200:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010204:	3301      	adds	r3, #1
 8010206:	b2da      	uxtb	r2, r3
 8010208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801020a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801020e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010210:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010214:	7c7a      	ldrb	r2, [r7, #17]
 8010216:	429a      	cmp	r2, r3
 8010218:	f200 80d2 	bhi.w	80103c0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801021c:	2301      	movs	r3, #1
 801021e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010222:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010226:	2b00      	cmp	r3, #0
 8010228:	d108      	bne.n	801023c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801022a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801022c:	f005 f94c 	bl	80154c8 <tcp_zero_window_probe>
 8010230:	4603      	mov	r3, r0
 8010232:	2b00      	cmp	r3, #0
 8010234:	d014      	beq.n	8010260 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8010236:	2300      	movs	r3, #0
 8010238:	623b      	str	r3, [r7, #32]
 801023a:	e011      	b.n	8010260 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801023c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801023e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010242:	4619      	mov	r1, r3
 8010244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010246:	f004 f811 	bl	801426c <tcp_split_unsent_seg>
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d107      	bne.n	8010260 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010250:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010252:	f004 fa91 	bl	8014778 <tcp_output>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	d101      	bne.n	8010260 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801025c:	2300      	movs	r3, #0
 801025e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010260:	6a3b      	ldr	r3, [r7, #32]
 8010262:	2b00      	cmp	r3, #0
 8010264:	f000 80ac 	beq.w	80103c0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026a:	2200      	movs	r2, #0
 801026c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010272:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010276:	2b06      	cmp	r3, #6
 8010278:	f200 80a2 	bhi.w	80103c0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801027c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010282:	3301      	adds	r3, #1
 8010284:	b2da      	uxtb	r2, r3
 8010286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010288:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801028c:	e098      	b.n	80103c0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801028e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010290:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010294:	2b00      	cmp	r3, #0
 8010296:	db0f      	blt.n	80102b8 <tcp_slowtmr+0x1f0>
 8010298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801029e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d008      	beq.n	80102b8 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80102a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	3301      	adds	r3, #1
 80102b0:	b29b      	uxth	r3, r3
 80102b2:	b21a      	sxth	r2, r3
 80102b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b6:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80102b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ba:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80102be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80102c4:	429a      	cmp	r2, r3
 80102c6:	db7b      	blt.n	80103c0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80102c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102ca:	f004 fd47 	bl	8014d5c <tcp_rexmit_rto_prepare>
 80102ce:	4603      	mov	r3, r0
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d007      	beq.n	80102e4 <tcp_slowtmr+0x21c>
 80102d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d171      	bne.n	80103c0 <tcp_slowtmr+0x2f8>
 80102dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d06d      	beq.n	80103c0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80102e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e6:	7d1b      	ldrb	r3, [r3, #20]
 80102e8:	2b02      	cmp	r3, #2
 80102ea:	d03a      	beq.n	8010362 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80102ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102f2:	2b0c      	cmp	r3, #12
 80102f4:	bf28      	it	cs
 80102f6:	230c      	movcs	r3, #12
 80102f8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80102fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010300:	10db      	asrs	r3, r3, #3
 8010302:	b21b      	sxth	r3, r3
 8010304:	461a      	mov	r2, r3
 8010306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010308:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801030c:	4413      	add	r3, r2
 801030e:	7efa      	ldrb	r2, [r7, #27]
 8010310:	4910      	ldr	r1, [pc, #64]	; (8010354 <tcp_slowtmr+0x28c>)
 8010312:	5c8a      	ldrb	r2, [r1, r2]
 8010314:	4093      	lsls	r3, r2
 8010316:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801031e:	4293      	cmp	r3, r2
 8010320:	dc1a      	bgt.n	8010358 <tcp_slowtmr+0x290>
 8010322:	697b      	ldr	r3, [r7, #20]
 8010324:	b21a      	sxth	r2, r3
 8010326:	e019      	b.n	801035c <tcp_slowtmr+0x294>
 8010328:	2000bcac 	.word	0x2000bcac
 801032c:	20004eda 	.word	0x20004eda
 8010330:	2000bca8 	.word	0x2000bca8
 8010334:	0801b8bc 	.word	0x0801b8bc
 8010338:	0801bc00 	.word	0x0801bc00
 801033c:	0801b900 	.word	0x0801b900
 8010340:	0801bc2c 	.word	0x0801bc2c
 8010344:	0801bc58 	.word	0x0801bc58
 8010348:	0801bc88 	.word	0x0801bc88
 801034c:	0801bcbc 	.word	0x0801bcbc
 8010350:	0801dd44 	.word	0x0801dd44
 8010354:	0801dd34 	.word	0x0801dd34
 8010358:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801035c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8010362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010364:	2200      	movs	r2, #0
 8010366:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801036a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801036e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010370:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010374:	4293      	cmp	r3, r2
 8010376:	bf28      	it	cs
 8010378:	4613      	movcs	r3, r2
 801037a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801037c:	8a7b      	ldrh	r3, [r7, #18]
 801037e:	085b      	lsrs	r3, r3, #1
 8010380:	b29a      	uxth	r2, r3
 8010382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010384:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801038e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010390:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010392:	005b      	lsls	r3, r3, #1
 8010394:	b29b      	uxth	r3, r3
 8010396:	429a      	cmp	r2, r3
 8010398:	d206      	bcs.n	80103a8 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801039a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801039c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801039e:	005b      	lsls	r3, r3, #1
 80103a0:	b29a      	uxth	r2, r3
 80103a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80103a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103aa:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80103ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80103b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b4:	2200      	movs	r2, #0
 80103b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80103ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103bc:	f004 fd3e 	bl	8014e3c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80103c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c2:	7d1b      	ldrb	r3, [r3, #20]
 80103c4:	2b06      	cmp	r3, #6
 80103c6:	d111      	bne.n	80103ec <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80103c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ca:	8b5b      	ldrh	r3, [r3, #26]
 80103cc:	f003 0310 	and.w	r3, r3, #16
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d00b      	beq.n	80103ec <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80103d4:	4b9d      	ldr	r3, [pc, #628]	; (801064c <tcp_slowtmr+0x584>)
 80103d6:	681a      	ldr	r2, [r3, #0]
 80103d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103da:	6a1b      	ldr	r3, [r3, #32]
 80103dc:	1ad3      	subs	r3, r2, r3
 80103de:	2b28      	cmp	r3, #40	; 0x28
 80103e0:	d904      	bls.n	80103ec <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80103e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103e6:	3301      	adds	r3, #1
 80103e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80103ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ee:	7a5b      	ldrb	r3, [r3, #9]
 80103f0:	f003 0308 	and.w	r3, r3, #8
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d04c      	beq.n	8010492 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80103f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103fa:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80103fc:	2b04      	cmp	r3, #4
 80103fe:	d003      	beq.n	8010408 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010402:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010404:	2b07      	cmp	r3, #7
 8010406:	d144      	bne.n	8010492 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010408:	4b90      	ldr	r3, [pc, #576]	; (801064c <tcp_slowtmr+0x584>)
 801040a:	681a      	ldr	r2, [r3, #0]
 801040c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040e:	6a1b      	ldr	r3, [r3, #32]
 8010410:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010418:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 801041c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8010420:	498b      	ldr	r1, [pc, #556]	; (8010650 <tcp_slowtmr+0x588>)
 8010422:	fba1 1303 	umull	r1, r3, r1, r3
 8010426:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010428:	429a      	cmp	r2, r3
 801042a:	d90a      	bls.n	8010442 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801042c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010430:	3301      	adds	r3, #1
 8010432:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8010436:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801043a:	3301      	adds	r3, #1
 801043c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010440:	e027      	b.n	8010492 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010442:	4b82      	ldr	r3, [pc, #520]	; (801064c <tcp_slowtmr+0x584>)
 8010444:	681a      	ldr	r2, [r3, #0]
 8010446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010448:	6a1b      	ldr	r3, [r3, #32]
 801044a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801044c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801044e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010454:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010458:	4618      	mov	r0, r3
 801045a:	4b7e      	ldr	r3, [pc, #504]	; (8010654 <tcp_slowtmr+0x58c>)
 801045c:	fb03 f300 	mul.w	r3, r3, r0
 8010460:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010462:	497b      	ldr	r1, [pc, #492]	; (8010650 <tcp_slowtmr+0x588>)
 8010464:	fba1 1303 	umull	r1, r3, r1, r3
 8010468:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801046a:	429a      	cmp	r2, r3
 801046c:	d911      	bls.n	8010492 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801046e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010470:	f004 ffea 	bl	8015448 <tcp_keepalive>
 8010474:	4603      	mov	r3, r0
 8010476:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801047a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801047e:	2b00      	cmp	r3, #0
 8010480:	d107      	bne.n	8010492 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8010482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010484:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010488:	3301      	adds	r3, #1
 801048a:	b2da      	uxtb	r2, r3
 801048c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010496:	2b00      	cmp	r3, #0
 8010498:	d011      	beq.n	80104be <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801049a:	4b6c      	ldr	r3, [pc, #432]	; (801064c <tcp_slowtmr+0x584>)
 801049c:	681a      	ldr	r2, [r3, #0]
 801049e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a0:	6a1b      	ldr	r3, [r3, #32]
 80104a2:	1ad2      	subs	r2, r2, r3
 80104a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80104aa:	4619      	mov	r1, r3
 80104ac:	460b      	mov	r3, r1
 80104ae:	005b      	lsls	r3, r3, #1
 80104b0:	440b      	add	r3, r1
 80104b2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d302      	bcc.n	80104be <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80104b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104ba:	f000 fea9 	bl	8011210 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80104be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c0:	7d1b      	ldrb	r3, [r3, #20]
 80104c2:	2b03      	cmp	r3, #3
 80104c4:	d10b      	bne.n	80104de <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80104c6:	4b61      	ldr	r3, [pc, #388]	; (801064c <tcp_slowtmr+0x584>)
 80104c8:	681a      	ldr	r2, [r3, #0]
 80104ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104cc:	6a1b      	ldr	r3, [r3, #32]
 80104ce:	1ad3      	subs	r3, r2, r3
 80104d0:	2b28      	cmp	r3, #40	; 0x28
 80104d2:	d904      	bls.n	80104de <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80104d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104d8:	3301      	adds	r3, #1
 80104da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80104de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e0:	7d1b      	ldrb	r3, [r3, #20]
 80104e2:	2b09      	cmp	r3, #9
 80104e4:	d10b      	bne.n	80104fe <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80104e6:	4b59      	ldr	r3, [pc, #356]	; (801064c <tcp_slowtmr+0x584>)
 80104e8:	681a      	ldr	r2, [r3, #0]
 80104ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ec:	6a1b      	ldr	r3, [r3, #32]
 80104ee:	1ad3      	subs	r3, r2, r3
 80104f0:	2bf0      	cmp	r3, #240	; 0xf0
 80104f2:	d904      	bls.n	80104fe <tcp_slowtmr+0x436>
        ++pcb_remove;
 80104f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104f8:	3301      	adds	r3, #1
 80104fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80104fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010502:	2b00      	cmp	r3, #0
 8010504:	d060      	beq.n	80105c8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801050c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801050e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010510:	f000 fcca 	bl	8010ea8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010516:	2b00      	cmp	r3, #0
 8010518:	d010      	beq.n	801053c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801051a:	4b4f      	ldr	r3, [pc, #316]	; (8010658 <tcp_slowtmr+0x590>)
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010520:	429a      	cmp	r2, r3
 8010522:	d106      	bne.n	8010532 <tcp_slowtmr+0x46a>
 8010524:	4b4d      	ldr	r3, [pc, #308]	; (801065c <tcp_slowtmr+0x594>)
 8010526:	f240 526d 	movw	r2, #1389	; 0x56d
 801052a:	494d      	ldr	r1, [pc, #308]	; (8010660 <tcp_slowtmr+0x598>)
 801052c:	484d      	ldr	r0, [pc, #308]	; (8010664 <tcp_slowtmr+0x59c>)
 801052e:	f008 fc6d 	bl	8018e0c <iprintf>
        prev->next = pcb->next;
 8010532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010534:	68da      	ldr	r2, [r3, #12]
 8010536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010538:	60da      	str	r2, [r3, #12]
 801053a:	e00f      	b.n	801055c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801053c:	4b46      	ldr	r3, [pc, #280]	; (8010658 <tcp_slowtmr+0x590>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010542:	429a      	cmp	r2, r3
 8010544:	d006      	beq.n	8010554 <tcp_slowtmr+0x48c>
 8010546:	4b45      	ldr	r3, [pc, #276]	; (801065c <tcp_slowtmr+0x594>)
 8010548:	f240 5271 	movw	r2, #1393	; 0x571
 801054c:	4946      	ldr	r1, [pc, #280]	; (8010668 <tcp_slowtmr+0x5a0>)
 801054e:	4845      	ldr	r0, [pc, #276]	; (8010664 <tcp_slowtmr+0x59c>)
 8010550:	f008 fc5c 	bl	8018e0c <iprintf>
        tcp_active_pcbs = pcb->next;
 8010554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010556:	68db      	ldr	r3, [r3, #12]
 8010558:	4a3f      	ldr	r2, [pc, #252]	; (8010658 <tcp_slowtmr+0x590>)
 801055a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801055c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010560:	2b00      	cmp	r3, #0
 8010562:	d013      	beq.n	801058c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010566:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801056c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801056e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010570:	3304      	adds	r3, #4
 8010572:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010574:	8ad2      	ldrh	r2, [r2, #22]
 8010576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010578:	8b09      	ldrh	r1, [r1, #24]
 801057a:	9102      	str	r1, [sp, #8]
 801057c:	9201      	str	r2, [sp, #4]
 801057e:	9300      	str	r3, [sp, #0]
 8010580:	462b      	mov	r3, r5
 8010582:	4622      	mov	r2, r4
 8010584:	4601      	mov	r1, r0
 8010586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010588:	f004 feaa 	bl	80152e0 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801058c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058e:	691b      	ldr	r3, [r3, #16]
 8010590:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010594:	7d1b      	ldrb	r3, [r3, #20]
 8010596:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801059c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80105a2:	6838      	ldr	r0, [r7, #0]
 80105a4:	f7fe ffee 	bl	800f584 <tcp_free>

      tcp_active_pcbs_changed = 0;
 80105a8:	4b30      	ldr	r3, [pc, #192]	; (801066c <tcp_slowtmr+0x5a4>)
 80105aa:	2200      	movs	r2, #0
 80105ac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d004      	beq.n	80105be <tcp_slowtmr+0x4f6>
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f06f 010c 	mvn.w	r1, #12
 80105ba:	68b8      	ldr	r0, [r7, #8]
 80105bc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80105be:	4b2b      	ldr	r3, [pc, #172]	; (801066c <tcp_slowtmr+0x5a4>)
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d037      	beq.n	8010636 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80105c6:	e590      	b.n	80100ea <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80105c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80105cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ce:	68db      	ldr	r3, [r3, #12]
 80105d0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80105d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d4:	7f1b      	ldrb	r3, [r3, #28]
 80105d6:	3301      	adds	r3, #1
 80105d8:	b2da      	uxtb	r2, r3
 80105da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105dc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80105de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e0:	7f1a      	ldrb	r2, [r3, #28]
 80105e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e4:	7f5b      	ldrb	r3, [r3, #29]
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d325      	bcc.n	8010636 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80105ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ec:	2200      	movs	r2, #0
 80105ee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80105f0:	4b1e      	ldr	r3, [pc, #120]	; (801066c <tcp_slowtmr+0x5a4>)
 80105f2:	2200      	movs	r2, #0
 80105f4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80105f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00b      	beq.n	8010618 <tcp_slowtmr+0x550>
 8010600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010608:	6912      	ldr	r2, [r2, #16]
 801060a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801060c:	4610      	mov	r0, r2
 801060e:	4798      	blx	r3
 8010610:	4603      	mov	r3, r0
 8010612:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010616:	e002      	b.n	801061e <tcp_slowtmr+0x556>
 8010618:	2300      	movs	r3, #0
 801061a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801061e:	4b13      	ldr	r3, [pc, #76]	; (801066c <tcp_slowtmr+0x5a4>)
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d000      	beq.n	8010628 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8010626:	e560      	b.n	80100ea <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010628:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801062c:	2b00      	cmp	r3, #0
 801062e:	d102      	bne.n	8010636 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8010630:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010632:	f004 f8a1 	bl	8014778 <tcp_output>
  while (pcb != NULL) {
 8010636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010638:	2b00      	cmp	r3, #0
 801063a:	f47f ad5c 	bne.w	80100f6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801063e:	2300      	movs	r3, #0
 8010640:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010642:	4b0b      	ldr	r3, [pc, #44]	; (8010670 <tcp_slowtmr+0x5a8>)
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010648:	e067      	b.n	801071a <tcp_slowtmr+0x652>
 801064a:	bf00      	nop
 801064c:	2000bcac 	.word	0x2000bcac
 8010650:	10624dd3 	.word	0x10624dd3
 8010654:	000124f8 	.word	0x000124f8
 8010658:	2000bca8 	.word	0x2000bca8
 801065c:	0801b8bc 	.word	0x0801b8bc
 8010660:	0801bcf4 	.word	0x0801bcf4
 8010664:	0801b900 	.word	0x0801b900
 8010668:	0801bd20 	.word	0x0801bd20
 801066c:	2000bca4 	.word	0x2000bca4
 8010670:	2000bcb8 	.word	0x2000bcb8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010676:	7d1b      	ldrb	r3, [r3, #20]
 8010678:	2b0a      	cmp	r3, #10
 801067a:	d006      	beq.n	801068a <tcp_slowtmr+0x5c2>
 801067c:	4b2b      	ldr	r3, [pc, #172]	; (801072c <tcp_slowtmr+0x664>)
 801067e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010682:	492b      	ldr	r1, [pc, #172]	; (8010730 <tcp_slowtmr+0x668>)
 8010684:	482b      	ldr	r0, [pc, #172]	; (8010734 <tcp_slowtmr+0x66c>)
 8010686:	f008 fbc1 	bl	8018e0c <iprintf>
    pcb_remove = 0;
 801068a:	2300      	movs	r3, #0
 801068c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010690:	4b29      	ldr	r3, [pc, #164]	; (8010738 <tcp_slowtmr+0x670>)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010696:	6a1b      	ldr	r3, [r3, #32]
 8010698:	1ad3      	subs	r3, r2, r3
 801069a:	2bf0      	cmp	r3, #240	; 0xf0
 801069c:	d904      	bls.n	80106a8 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801069e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106a2:	3301      	adds	r3, #1
 80106a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80106a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d02f      	beq.n	8010710 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80106b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106b2:	f000 fbf9 	bl	8010ea8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80106b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d010      	beq.n	80106de <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80106bc:	4b1f      	ldr	r3, [pc, #124]	; (801073c <tcp_slowtmr+0x674>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d106      	bne.n	80106d4 <tcp_slowtmr+0x60c>
 80106c6:	4b19      	ldr	r3, [pc, #100]	; (801072c <tcp_slowtmr+0x664>)
 80106c8:	f240 52af 	movw	r2, #1455	; 0x5af
 80106cc:	491c      	ldr	r1, [pc, #112]	; (8010740 <tcp_slowtmr+0x678>)
 80106ce:	4819      	ldr	r0, [pc, #100]	; (8010734 <tcp_slowtmr+0x66c>)
 80106d0:	f008 fb9c 	bl	8018e0c <iprintf>
        prev->next = pcb->next;
 80106d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106d6:	68da      	ldr	r2, [r3, #12]
 80106d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106da:	60da      	str	r2, [r3, #12]
 80106dc:	e00f      	b.n	80106fe <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80106de:	4b17      	ldr	r3, [pc, #92]	; (801073c <tcp_slowtmr+0x674>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d006      	beq.n	80106f6 <tcp_slowtmr+0x62e>
 80106e8:	4b10      	ldr	r3, [pc, #64]	; (801072c <tcp_slowtmr+0x664>)
 80106ea:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80106ee:	4915      	ldr	r1, [pc, #84]	; (8010744 <tcp_slowtmr+0x67c>)
 80106f0:	4810      	ldr	r0, [pc, #64]	; (8010734 <tcp_slowtmr+0x66c>)
 80106f2:	f008 fb8b 	bl	8018e0c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80106f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	4a10      	ldr	r2, [pc, #64]	; (801073c <tcp_slowtmr+0x674>)
 80106fc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80106fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010700:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010704:	68db      	ldr	r3, [r3, #12]
 8010706:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010708:	69f8      	ldr	r0, [r7, #28]
 801070a:	f7fe ff3b 	bl	800f584 <tcp_free>
 801070e:	e004      	b.n	801071a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010712:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010716:	68db      	ldr	r3, [r3, #12]
 8010718:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801071a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071c:	2b00      	cmp	r3, #0
 801071e:	d1a9      	bne.n	8010674 <tcp_slowtmr+0x5ac>
    }
  }
}
 8010720:	bf00      	nop
 8010722:	bf00      	nop
 8010724:	3730      	adds	r7, #48	; 0x30
 8010726:	46bd      	mov	sp, r7
 8010728:	bdb0      	pop	{r4, r5, r7, pc}
 801072a:	bf00      	nop
 801072c:	0801b8bc 	.word	0x0801b8bc
 8010730:	0801bd4c 	.word	0x0801bd4c
 8010734:	0801b900 	.word	0x0801b900
 8010738:	2000bcac 	.word	0x2000bcac
 801073c:	2000bcb8 	.word	0x2000bcb8
 8010740:	0801bd7c 	.word	0x0801bd7c
 8010744:	0801bda4 	.word	0x0801bda4

08010748 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010748:	b580      	push	{r7, lr}
 801074a:	b082      	sub	sp, #8
 801074c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801074e:	4b2d      	ldr	r3, [pc, #180]	; (8010804 <tcp_fasttmr+0xbc>)
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	3301      	adds	r3, #1
 8010754:	b2da      	uxtb	r2, r3
 8010756:	4b2b      	ldr	r3, [pc, #172]	; (8010804 <tcp_fasttmr+0xbc>)
 8010758:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801075a:	4b2b      	ldr	r3, [pc, #172]	; (8010808 <tcp_fasttmr+0xc0>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010760:	e048      	b.n	80107f4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	7f9a      	ldrb	r2, [r3, #30]
 8010766:	4b27      	ldr	r3, [pc, #156]	; (8010804 <tcp_fasttmr+0xbc>)
 8010768:	781b      	ldrb	r3, [r3, #0]
 801076a:	429a      	cmp	r2, r3
 801076c:	d03f      	beq.n	80107ee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801076e:	4b25      	ldr	r3, [pc, #148]	; (8010804 <tcp_fasttmr+0xbc>)
 8010770:	781a      	ldrb	r2, [r3, #0]
 8010772:	687b      	ldr	r3, [r7, #4]
 8010774:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	8b5b      	ldrh	r3, [r3, #26]
 801077a:	f003 0301 	and.w	r3, r3, #1
 801077e:	2b00      	cmp	r3, #0
 8010780:	d010      	beq.n	80107a4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	8b5b      	ldrh	r3, [r3, #26]
 8010786:	f043 0302 	orr.w	r3, r3, #2
 801078a:	b29a      	uxth	r2, r3
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f003 fff1 	bl	8014778 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	8b5b      	ldrh	r3, [r3, #26]
 801079a:	f023 0303 	bic.w	r3, r3, #3
 801079e:	b29a      	uxth	r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	8b5b      	ldrh	r3, [r3, #26]
 80107a8:	f003 0308 	and.w	r3, r3, #8
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d009      	beq.n	80107c4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	8b5b      	ldrh	r3, [r3, #26]
 80107b4:	f023 0308 	bic.w	r3, r3, #8
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff f874 	bl	800f8ac <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d00a      	beq.n	80107e8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80107d2:	4b0e      	ldr	r3, [pc, #56]	; (801080c <tcp_fasttmr+0xc4>)
 80107d4:	2200      	movs	r2, #0
 80107d6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f000 f819 	bl	8010810 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80107de:	4b0b      	ldr	r3, [pc, #44]	; (801080c <tcp_fasttmr+0xc4>)
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d000      	beq.n	80107e8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80107e6:	e7b8      	b.n	801075a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	607b      	str	r3, [r7, #4]
 80107ec:	e002      	b.n	80107f4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	68db      	ldr	r3, [r3, #12]
 80107f2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d1b3      	bne.n	8010762 <tcp_fasttmr+0x1a>
    }
  }
}
 80107fa:	bf00      	nop
 80107fc:	bf00      	nop
 80107fe:	3708      	adds	r7, #8
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	20004eda 	.word	0x20004eda
 8010808:	2000bca8 	.word	0x2000bca8
 801080c:	2000bca4 	.word	0x2000bca4

08010810 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010810:	b590      	push	{r4, r7, lr}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d109      	bne.n	8010832 <tcp_process_refused_data+0x22>
 801081e:	4b37      	ldr	r3, [pc, #220]	; (80108fc <tcp_process_refused_data+0xec>)
 8010820:	f240 6209 	movw	r2, #1545	; 0x609
 8010824:	4936      	ldr	r1, [pc, #216]	; (8010900 <tcp_process_refused_data+0xf0>)
 8010826:	4837      	ldr	r0, [pc, #220]	; (8010904 <tcp_process_refused_data+0xf4>)
 8010828:	f008 faf0 	bl	8018e0c <iprintf>
 801082c:	f06f 030f 	mvn.w	r3, #15
 8010830:	e060      	b.n	80108f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010836:	7b5b      	ldrb	r3, [r3, #13]
 8010838:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801083e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	2200      	movs	r2, #0
 8010844:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801084c:	2b00      	cmp	r3, #0
 801084e:	d00b      	beq.n	8010868 <tcp_process_refused_data+0x58>
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	6918      	ldr	r0, [r3, #16]
 801085a:	2300      	movs	r3, #0
 801085c:	68ba      	ldr	r2, [r7, #8]
 801085e:	6879      	ldr	r1, [r7, #4]
 8010860:	47a0      	blx	r4
 8010862:	4603      	mov	r3, r0
 8010864:	73fb      	strb	r3, [r7, #15]
 8010866:	e007      	b.n	8010878 <tcp_process_refused_data+0x68>
 8010868:	2300      	movs	r3, #0
 801086a:	68ba      	ldr	r2, [r7, #8]
 801086c:	6879      	ldr	r1, [r7, #4]
 801086e:	2000      	movs	r0, #0
 8010870:	f000 f8a4 	bl	80109bc <tcp_recv_null>
 8010874:	4603      	mov	r3, r0
 8010876:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d12a      	bne.n	80108d6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010880:	7bbb      	ldrb	r3, [r7, #14]
 8010882:	f003 0320 	and.w	r3, r3, #32
 8010886:	2b00      	cmp	r3, #0
 8010888:	d033      	beq.n	80108f2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801088e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010892:	d005      	beq.n	80108a0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010898:	3301      	adds	r3, #1
 801089a:	b29a      	uxth	r2, r3
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d00b      	beq.n	80108c2 <tcp_process_refused_data+0xb2>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6918      	ldr	r0, [r3, #16]
 80108b4:	2300      	movs	r3, #0
 80108b6:	2200      	movs	r2, #0
 80108b8:	6879      	ldr	r1, [r7, #4]
 80108ba:	47a0      	blx	r4
 80108bc:	4603      	mov	r3, r0
 80108be:	73fb      	strb	r3, [r7, #15]
 80108c0:	e001      	b.n	80108c6 <tcp_process_refused_data+0xb6>
 80108c2:	2300      	movs	r3, #0
 80108c4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80108c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108ca:	f113 0f0d 	cmn.w	r3, #13
 80108ce:	d110      	bne.n	80108f2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80108d0:	f06f 030c 	mvn.w	r3, #12
 80108d4:	e00e      	b.n	80108f4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80108d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108da:	f113 0f0d 	cmn.w	r3, #13
 80108de:	d102      	bne.n	80108e6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80108e0:	f06f 030c 	mvn.w	r3, #12
 80108e4:	e006      	b.n	80108f4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	68ba      	ldr	r2, [r7, #8]
 80108ea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80108ec:	f06f 0304 	mvn.w	r3, #4
 80108f0:	e000      	b.n	80108f4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3714      	adds	r7, #20
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd90      	pop	{r4, r7, pc}
 80108fc:	0801b8bc 	.word	0x0801b8bc
 8010900:	0801bdcc 	.word	0x0801bdcc
 8010904:	0801b900 	.word	0x0801b900

08010908 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	b084      	sub	sp, #16
 801090c:	af00      	add	r7, sp, #0
 801090e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010910:	e007      	b.n	8010922 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 f80a 	bl	8010932 <tcp_seg_free>
    seg = next;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d1f4      	bne.n	8010912 <tcp_segs_free+0xa>
  }
}
 8010928:	bf00      	nop
 801092a:	bf00      	nop
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b082      	sub	sp, #8
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d00c      	beq.n	801095a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	2b00      	cmp	r3, #0
 8010946:	d004      	beq.n	8010952 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	685b      	ldr	r3, [r3, #4]
 801094c:	4618      	mov	r0, r3
 801094e:	f7fe fa03 	bl	800ed58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010952:	6879      	ldr	r1, [r7, #4]
 8010954:	2003      	movs	r0, #3
 8010956:	f7fd fb29 	bl	800dfac <memp_free>
  }
}
 801095a:	bf00      	nop
 801095c:	3708      	adds	r7, #8
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
	...

08010964 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b084      	sub	sp, #16
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d106      	bne.n	8010980 <tcp_seg_copy+0x1c>
 8010972:	4b0f      	ldr	r3, [pc, #60]	; (80109b0 <tcp_seg_copy+0x4c>)
 8010974:	f240 6282 	movw	r2, #1666	; 0x682
 8010978:	490e      	ldr	r1, [pc, #56]	; (80109b4 <tcp_seg_copy+0x50>)
 801097a:	480f      	ldr	r0, [pc, #60]	; (80109b8 <tcp_seg_copy+0x54>)
 801097c:	f008 fa46 	bl	8018e0c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010980:	2003      	movs	r0, #3
 8010982:	f7fd fac1 	bl	800df08 <memp_malloc>
 8010986:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d101      	bne.n	8010992 <tcp_seg_copy+0x2e>
    return NULL;
 801098e:	2300      	movs	r3, #0
 8010990:	e00a      	b.n	80109a8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010992:	2210      	movs	r2, #16
 8010994:	6879      	ldr	r1, [r7, #4]
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f008 f978 	bl	8018c8c <memcpy>
  pbuf_ref(cseg->p);
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	685b      	ldr	r3, [r3, #4]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fe fa7f 	bl	800eea4 <pbuf_ref>
  return cseg;
 80109a6:	68fb      	ldr	r3, [r7, #12]
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3710      	adds	r7, #16
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	0801b8bc 	.word	0x0801b8bc
 80109b4:	0801be10 	.word	0x0801be10
 80109b8:	0801b900 	.word	0x0801b900

080109bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b084      	sub	sp, #16
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	60f8      	str	r0, [r7, #12]
 80109c4:	60b9      	str	r1, [r7, #8]
 80109c6:	607a      	str	r2, [r7, #4]
 80109c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80109ca:	68bb      	ldr	r3, [r7, #8]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d109      	bne.n	80109e4 <tcp_recv_null+0x28>
 80109d0:	4b12      	ldr	r3, [pc, #72]	; (8010a1c <tcp_recv_null+0x60>)
 80109d2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80109d6:	4912      	ldr	r1, [pc, #72]	; (8010a20 <tcp_recv_null+0x64>)
 80109d8:	4812      	ldr	r0, [pc, #72]	; (8010a24 <tcp_recv_null+0x68>)
 80109da:	f008 fa17 	bl	8018e0c <iprintf>
 80109de:	f06f 030f 	mvn.w	r3, #15
 80109e2:	e016      	b.n	8010a12 <tcp_recv_null+0x56>

  if (p != NULL) {
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d009      	beq.n	80109fe <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	891b      	ldrh	r3, [r3, #8]
 80109ee:	4619      	mov	r1, r3
 80109f0:	68b8      	ldr	r0, [r7, #8]
 80109f2:	f7ff fad3 	bl	800ff9c <tcp_recved>
    pbuf_free(p);
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f7fe f9ae 	bl	800ed58 <pbuf_free>
 80109fc:	e008      	b.n	8010a10 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80109fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d104      	bne.n	8010a10 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010a06:	68b8      	ldr	r0, [r7, #8]
 8010a08:	f7fe ffba 	bl	800f980 <tcp_close>
 8010a0c:	4603      	mov	r3, r0
 8010a0e:	e000      	b.n	8010a12 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	0801b8bc 	.word	0x0801b8bc
 8010a20:	0801be2c 	.word	0x0801be2c
 8010a24:	0801b900 	.word	0x0801b900

08010a28 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b086      	sub	sp, #24
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	4603      	mov	r3, r0
 8010a30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	db01      	blt.n	8010a3e <tcp_kill_prio+0x16>
 8010a3a:	79fb      	ldrb	r3, [r7, #7]
 8010a3c:	e000      	b.n	8010a40 <tcp_kill_prio+0x18>
 8010a3e:	237f      	movs	r3, #127	; 0x7f
 8010a40:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010a42:	7afb      	ldrb	r3, [r7, #11]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d034      	beq.n	8010ab2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010a48:	7afb      	ldrb	r3, [r7, #11]
 8010a4a:	3b01      	subs	r3, #1
 8010a4c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010a4e:	2300      	movs	r3, #0
 8010a50:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010a52:	2300      	movs	r3, #0
 8010a54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a56:	4b19      	ldr	r3, [pc, #100]	; (8010abc <tcp_kill_prio+0x94>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	617b      	str	r3, [r7, #20]
 8010a5c:	e01f      	b.n	8010a9e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010a5e:	697b      	ldr	r3, [r7, #20]
 8010a60:	7d5b      	ldrb	r3, [r3, #21]
 8010a62:	7afa      	ldrb	r2, [r7, #11]
 8010a64:	429a      	cmp	r2, r3
 8010a66:	d80c      	bhi.n	8010a82 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010a6c:	7afa      	ldrb	r2, [r7, #11]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d112      	bne.n	8010a98 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010a72:	4b13      	ldr	r3, [pc, #76]	; (8010ac0 <tcp_kill_prio+0x98>)
 8010a74:	681a      	ldr	r2, [r3, #0]
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	6a1b      	ldr	r3, [r3, #32]
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	68fa      	ldr	r2, [r7, #12]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d80a      	bhi.n	8010a98 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010a82:	4b0f      	ldr	r3, [pc, #60]	; (8010ac0 <tcp_kill_prio+0x98>)
 8010a84:	681a      	ldr	r2, [r3, #0]
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	6a1b      	ldr	r3, [r3, #32]
 8010a8a:	1ad3      	subs	r3, r2, r3
 8010a8c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010a92:	697b      	ldr	r3, [r7, #20]
 8010a94:	7d5b      	ldrb	r3, [r3, #21]
 8010a96:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a98:	697b      	ldr	r3, [r7, #20]
 8010a9a:	68db      	ldr	r3, [r3, #12]
 8010a9c:	617b      	str	r3, [r7, #20]
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d1dc      	bne.n	8010a5e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010aa4:	693b      	ldr	r3, [r7, #16]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d004      	beq.n	8010ab4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010aaa:	6938      	ldr	r0, [r7, #16]
 8010aac:	f7ff f8ae 	bl	800fc0c <tcp_abort>
 8010ab0:	e000      	b.n	8010ab4 <tcp_kill_prio+0x8c>
    return;
 8010ab2:	bf00      	nop
  }
}
 8010ab4:	3718      	adds	r7, #24
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd80      	pop	{r7, pc}
 8010aba:	bf00      	nop
 8010abc:	2000bca8 	.word	0x2000bca8
 8010ac0:	2000bcac 	.word	0x2000bcac

08010ac4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b086      	sub	sp, #24
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	4603      	mov	r3, r0
 8010acc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010ace:	79fb      	ldrb	r3, [r7, #7]
 8010ad0:	2b08      	cmp	r3, #8
 8010ad2:	d009      	beq.n	8010ae8 <tcp_kill_state+0x24>
 8010ad4:	79fb      	ldrb	r3, [r7, #7]
 8010ad6:	2b09      	cmp	r3, #9
 8010ad8:	d006      	beq.n	8010ae8 <tcp_kill_state+0x24>
 8010ada:	4b1a      	ldr	r3, [pc, #104]	; (8010b44 <tcp_kill_state+0x80>)
 8010adc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010ae0:	4919      	ldr	r1, [pc, #100]	; (8010b48 <tcp_kill_state+0x84>)
 8010ae2:	481a      	ldr	r0, [pc, #104]	; (8010b4c <tcp_kill_state+0x88>)
 8010ae4:	f008 f992 	bl	8018e0c <iprintf>

  inactivity = 0;
 8010ae8:	2300      	movs	r3, #0
 8010aea:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010aec:	2300      	movs	r3, #0
 8010aee:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010af0:	4b17      	ldr	r3, [pc, #92]	; (8010b50 <tcp_kill_state+0x8c>)
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	617b      	str	r3, [r7, #20]
 8010af6:	e017      	b.n	8010b28 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	7d1b      	ldrb	r3, [r3, #20]
 8010afc:	79fa      	ldrb	r2, [r7, #7]
 8010afe:	429a      	cmp	r2, r3
 8010b00:	d10f      	bne.n	8010b22 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010b02:	4b14      	ldr	r3, [pc, #80]	; (8010b54 <tcp_kill_state+0x90>)
 8010b04:	681a      	ldr	r2, [r3, #0]
 8010b06:	697b      	ldr	r3, [r7, #20]
 8010b08:	6a1b      	ldr	r3, [r3, #32]
 8010b0a:	1ad3      	subs	r3, r2, r3
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d807      	bhi.n	8010b22 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010b12:	4b10      	ldr	r3, [pc, #64]	; (8010b54 <tcp_kill_state+0x90>)
 8010b14:	681a      	ldr	r2, [r3, #0]
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	6a1b      	ldr	r3, [r3, #32]
 8010b1a:	1ad3      	subs	r3, r2, r3
 8010b1c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010b1e:	697b      	ldr	r3, [r7, #20]
 8010b20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	617b      	str	r3, [r7, #20]
 8010b28:	697b      	ldr	r3, [r7, #20]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d1e4      	bne.n	8010af8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d003      	beq.n	8010b3c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010b34:	2100      	movs	r1, #0
 8010b36:	6938      	ldr	r0, [r7, #16]
 8010b38:	f7fe ffaa 	bl	800fa90 <tcp_abandon>
  }
}
 8010b3c:	bf00      	nop
 8010b3e:	3718      	adds	r7, #24
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	0801b8bc 	.word	0x0801b8bc
 8010b48:	0801be48 	.word	0x0801be48
 8010b4c:	0801b900 	.word	0x0801b900
 8010b50:	2000bca8 	.word	0x2000bca8
 8010b54:	2000bcac 	.word	0x2000bcac

08010b58 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010b62:	2300      	movs	r3, #0
 8010b64:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b66:	4b12      	ldr	r3, [pc, #72]	; (8010bb0 <tcp_kill_timewait+0x58>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	60fb      	str	r3, [r7, #12]
 8010b6c:	e012      	b.n	8010b94 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010b6e:	4b11      	ldr	r3, [pc, #68]	; (8010bb4 <tcp_kill_timewait+0x5c>)
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	6a1b      	ldr	r3, [r3, #32]
 8010b76:	1ad3      	subs	r3, r2, r3
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d807      	bhi.n	8010b8e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010b7e:	4b0d      	ldr	r3, [pc, #52]	; (8010bb4 <tcp_kill_timewait+0x5c>)
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	6a1b      	ldr	r3, [r3, #32]
 8010b86:	1ad3      	subs	r3, r2, r3
 8010b88:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	68db      	ldr	r3, [r3, #12]
 8010b92:	60fb      	str	r3, [r7, #12]
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d1e9      	bne.n	8010b6e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d002      	beq.n	8010ba6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010ba0:	68b8      	ldr	r0, [r7, #8]
 8010ba2:	f7ff f833 	bl	800fc0c <tcp_abort>
  }
}
 8010ba6:	bf00      	nop
 8010ba8:	3710      	adds	r7, #16
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}
 8010bae:	bf00      	nop
 8010bb0:	2000bcb8 	.word	0x2000bcb8
 8010bb4:	2000bcac 	.word	0x2000bcac

08010bb8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010bbe:	4b10      	ldr	r3, [pc, #64]	; (8010c00 <tcp_handle_closepend+0x48>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010bc4:	e014      	b.n	8010bf0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	8b5b      	ldrh	r3, [r3, #26]
 8010bd0:	f003 0308 	and.w	r3, r3, #8
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d009      	beq.n	8010bec <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	8b5b      	ldrh	r3, [r3, #26]
 8010bdc:	f023 0308 	bic.w	r3, r3, #8
 8010be0:	b29a      	uxth	r2, r3
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010be6:	6878      	ldr	r0, [r7, #4]
 8010be8:	f7fe fe60 	bl	800f8ac <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d1e7      	bne.n	8010bc6 <tcp_handle_closepend+0xe>
  }
}
 8010bf6:	bf00      	nop
 8010bf8:	bf00      	nop
 8010bfa:	3708      	adds	r7, #8
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	2000bca8 	.word	0x2000bca8

08010c04 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c0e:	2001      	movs	r0, #1
 8010c10:	f7fd f97a 	bl	800df08 <memp_malloc>
 8010c14:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d126      	bne.n	8010c6a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010c1c:	f7ff ffcc 	bl	8010bb8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010c20:	f7ff ff9a 	bl	8010b58 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c24:	2001      	movs	r0, #1
 8010c26:	f7fd f96f 	bl	800df08 <memp_malloc>
 8010c2a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d11b      	bne.n	8010c6a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010c32:	2009      	movs	r0, #9
 8010c34:	f7ff ff46 	bl	8010ac4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c38:	2001      	movs	r0, #1
 8010c3a:	f7fd f965 	bl	800df08 <memp_malloc>
 8010c3e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d111      	bne.n	8010c6a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010c46:	2008      	movs	r0, #8
 8010c48:	f7ff ff3c 	bl	8010ac4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c4c:	2001      	movs	r0, #1
 8010c4e:	f7fd f95b 	bl	800df08 <memp_malloc>
 8010c52:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d107      	bne.n	8010c6a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010c5a:	79fb      	ldrb	r3, [r7, #7]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7ff fee3 	bl	8010a28 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010c62:	2001      	movs	r0, #1
 8010c64:	f7fd f950 	bl	800df08 <memp_malloc>
 8010c68:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d03f      	beq.n	8010cf0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010c70:	229c      	movs	r2, #156	; 0x9c
 8010c72:	2100      	movs	r1, #0
 8010c74:	68f8      	ldr	r0, [r7, #12]
 8010c76:	f008 f817 	bl	8018ca8 <memset>
    pcb->prio = prio;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	79fa      	ldrb	r2, [r7, #7]
 8010c7e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010c86:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010c90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	22ff      	movs	r2, #255	; 0xff
 8010c9e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010ca6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	2206      	movs	r2, #6
 8010cac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	2206      	movs	r2, #6
 8010cb4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cbc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	2201      	movs	r2, #1
 8010cc2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010cc6:	4b0d      	ldr	r3, [pc, #52]	; (8010cfc <tcp_alloc+0xf8>)
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010cce:	4b0c      	ldr	r3, [pc, #48]	; (8010d00 <tcp_alloc+0xfc>)
 8010cd0:	781a      	ldrb	r2, [r3, #0]
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010cdc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	4a08      	ldr	r2, [pc, #32]	; (8010d04 <tcp_alloc+0x100>)
 8010ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	4a07      	ldr	r2, [pc, #28]	; (8010d08 <tcp_alloc+0x104>)
 8010cec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3710      	adds	r7, #16
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}
 8010cfa:	bf00      	nop
 8010cfc:	2000bcac 	.word	0x2000bcac
 8010d00:	20004eda 	.word	0x20004eda
 8010d04:	080109bd 	.word	0x080109bd
 8010d08:	006ddd00 	.word	0x006ddd00

08010d0c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	4603      	mov	r3, r0
 8010d14:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010d16:	2040      	movs	r0, #64	; 0x40
 8010d18:	f7ff ff74 	bl	8010c04 <tcp_alloc>
 8010d1c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010d1e:	68fb      	ldr	r3, [r7, #12]
}
 8010d20:	4618      	mov	r0, r3
 8010d22:	3710      	adds	r7, #16
 8010d24:	46bd      	mov	sp, r7
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b083      	sub	sp, #12
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	6078      	str	r0, [r7, #4]
 8010d30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d002      	beq.n	8010d3e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	683a      	ldr	r2, [r7, #0]
 8010d3c:	611a      	str	r2, [r3, #16]
  }
}
 8010d3e:	bf00      	nop
 8010d40:	370c      	adds	r7, #12
 8010d42:	46bd      	mov	sp, r7
 8010d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d48:	4770      	bx	lr
	...

08010d4c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]
 8010d54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00e      	beq.n	8010d7a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	7d1b      	ldrb	r3, [r3, #20]
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d106      	bne.n	8010d72 <tcp_recv+0x26>
 8010d64:	4b07      	ldr	r3, [pc, #28]	; (8010d84 <tcp_recv+0x38>)
 8010d66:	f240 72df 	movw	r2, #2015	; 0x7df
 8010d6a:	4907      	ldr	r1, [pc, #28]	; (8010d88 <tcp_recv+0x3c>)
 8010d6c:	4807      	ldr	r0, [pc, #28]	; (8010d8c <tcp_recv+0x40>)
 8010d6e:	f008 f84d 	bl	8018e0c <iprintf>
    pcb->recv = recv;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	683a      	ldr	r2, [r7, #0]
 8010d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8010d7a:	bf00      	nop
 8010d7c:	3708      	adds	r7, #8
 8010d7e:	46bd      	mov	sp, r7
 8010d80:	bd80      	pop	{r7, pc}
 8010d82:	bf00      	nop
 8010d84:	0801b8bc 	.word	0x0801b8bc
 8010d88:	0801be58 	.word	0x0801be58
 8010d8c:	0801b900 	.word	0x0801b900

08010d90 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	b082      	sub	sp, #8
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	6078      	str	r0, [r7, #4]
 8010d98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d00e      	beq.n	8010dbe <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	7d1b      	ldrb	r3, [r3, #20]
 8010da4:	2b01      	cmp	r3, #1
 8010da6:	d106      	bne.n	8010db6 <tcp_sent+0x26>
 8010da8:	4b07      	ldr	r3, [pc, #28]	; (8010dc8 <tcp_sent+0x38>)
 8010daa:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010dae:	4907      	ldr	r1, [pc, #28]	; (8010dcc <tcp_sent+0x3c>)
 8010db0:	4807      	ldr	r0, [pc, #28]	; (8010dd0 <tcp_sent+0x40>)
 8010db2:	f008 f82b 	bl	8018e0c <iprintf>
    pcb->sent = sent;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	683a      	ldr	r2, [r7, #0]
 8010dba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010dbe:	bf00      	nop
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	0801b8bc 	.word	0x0801b8bc
 8010dcc:	0801be80 	.word	0x0801be80
 8010dd0:	0801b900 	.word	0x0801b900

08010dd4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b082      	sub	sp, #8
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d00e      	beq.n	8010e02 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	7d1b      	ldrb	r3, [r3, #20]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	d106      	bne.n	8010dfa <tcp_err+0x26>
 8010dec:	4b07      	ldr	r3, [pc, #28]	; (8010e0c <tcp_err+0x38>)
 8010dee:	f640 020d 	movw	r2, #2061	; 0x80d
 8010df2:	4907      	ldr	r1, [pc, #28]	; (8010e10 <tcp_err+0x3c>)
 8010df4:	4807      	ldr	r0, [pc, #28]	; (8010e14 <tcp_err+0x40>)
 8010df6:	f008 f809 	bl	8018e0c <iprintf>
    pcb->errf = err;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	683a      	ldr	r2, [r7, #0]
 8010dfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010e02:	bf00      	nop
 8010e04:	3708      	adds	r7, #8
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	0801b8bc 	.word	0x0801b8bc
 8010e10:	0801bea8 	.word	0x0801bea8
 8010e14:	0801b900 	.word	0x0801b900

08010e18 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b085      	sub	sp, #20
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
 8010e20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d008      	beq.n	8010e3a <tcp_accept+0x22>
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	7d1b      	ldrb	r3, [r3, #20]
 8010e2c:	2b01      	cmp	r3, #1
 8010e2e:	d104      	bne.n	8010e3a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	683a      	ldr	r2, [r7, #0]
 8010e38:	619a      	str	r2, [r3, #24]
  }
}
 8010e3a:	bf00      	nop
 8010e3c:	3714      	adds	r7, #20
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr
	...

08010e48 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b084      	sub	sp, #16
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	60f8      	str	r0, [r7, #12]
 8010e50:	60b9      	str	r1, [r7, #8]
 8010e52:	4613      	mov	r3, r2
 8010e54:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d107      	bne.n	8010e6c <tcp_poll+0x24>
 8010e5c:	4b0e      	ldr	r3, [pc, #56]	; (8010e98 <tcp_poll+0x50>)
 8010e5e:	f640 023d 	movw	r2, #2109	; 0x83d
 8010e62:	490e      	ldr	r1, [pc, #56]	; (8010e9c <tcp_poll+0x54>)
 8010e64:	480e      	ldr	r0, [pc, #56]	; (8010ea0 <tcp_poll+0x58>)
 8010e66:	f007 ffd1 	bl	8018e0c <iprintf>
 8010e6a:	e011      	b.n	8010e90 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	7d1b      	ldrb	r3, [r3, #20]
 8010e70:	2b01      	cmp	r3, #1
 8010e72:	d106      	bne.n	8010e82 <tcp_poll+0x3a>
 8010e74:	4b08      	ldr	r3, [pc, #32]	; (8010e98 <tcp_poll+0x50>)
 8010e76:	f640 023e 	movw	r2, #2110	; 0x83e
 8010e7a:	490a      	ldr	r1, [pc, #40]	; (8010ea4 <tcp_poll+0x5c>)
 8010e7c:	4808      	ldr	r0, [pc, #32]	; (8010ea0 <tcp_poll+0x58>)
 8010e7e:	f007 ffc5 	bl	8018e0c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	68ba      	ldr	r2, [r7, #8]
 8010e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	79fa      	ldrb	r2, [r7, #7]
 8010e8e:	775a      	strb	r2, [r3, #29]
}
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	0801b8bc 	.word	0x0801b8bc
 8010e9c:	0801bed0 	.word	0x0801bed0
 8010ea0:	0801b900 	.word	0x0801b900
 8010ea4:	0801bee8 	.word	0x0801bee8

08010ea8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d107      	bne.n	8010ec6 <tcp_pcb_purge+0x1e>
 8010eb6:	4b21      	ldr	r3, [pc, #132]	; (8010f3c <tcp_pcb_purge+0x94>)
 8010eb8:	f640 0251 	movw	r2, #2129	; 0x851
 8010ebc:	4920      	ldr	r1, [pc, #128]	; (8010f40 <tcp_pcb_purge+0x98>)
 8010ebe:	4821      	ldr	r0, [pc, #132]	; (8010f44 <tcp_pcb_purge+0x9c>)
 8010ec0:	f007 ffa4 	bl	8018e0c <iprintf>
 8010ec4:	e037      	b.n	8010f36 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	7d1b      	ldrb	r3, [r3, #20]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d033      	beq.n	8010f36 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010ed2:	2b0a      	cmp	r3, #10
 8010ed4:	d02f      	beq.n	8010f36 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d02b      	beq.n	8010f36 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d007      	beq.n	8010ef6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fd ff34 	bl	800ed58 <pbuf_free>
      pcb->refused_data = NULL;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d002      	beq.n	8010f04 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f986 	bl	8011210 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f0a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f10:	4618      	mov	r0, r3
 8010f12:	f7ff fcf9 	bl	8010908 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7ff fcf4 	bl	8010908 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	2200      	movs	r2, #0
 8010f24:	66da      	str	r2, [r3, #108]	; 0x6c
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2200      	movs	r2, #0
 8010f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010f36:	3708      	adds	r7, #8
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	0801b8bc 	.word	0x0801b8bc
 8010f40:	0801bf08 	.word	0x0801bf08
 8010f44:	0801b900 	.word	0x0801b900

08010f48 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d106      	bne.n	8010f66 <tcp_pcb_remove+0x1e>
 8010f58:	4b3e      	ldr	r3, [pc, #248]	; (8011054 <tcp_pcb_remove+0x10c>)
 8010f5a:	f640 0283 	movw	r2, #2179	; 0x883
 8010f5e:	493e      	ldr	r1, [pc, #248]	; (8011058 <tcp_pcb_remove+0x110>)
 8010f60:	483e      	ldr	r0, [pc, #248]	; (801105c <tcp_pcb_remove+0x114>)
 8010f62:	f007 ff53 	bl	8018e0c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d106      	bne.n	8010f7a <tcp_pcb_remove+0x32>
 8010f6c:	4b39      	ldr	r3, [pc, #228]	; (8011054 <tcp_pcb_remove+0x10c>)
 8010f6e:	f640 0284 	movw	r2, #2180	; 0x884
 8010f72:	493b      	ldr	r1, [pc, #236]	; (8011060 <tcp_pcb_remove+0x118>)
 8010f74:	4839      	ldr	r0, [pc, #228]	; (801105c <tcp_pcb_remove+0x114>)
 8010f76:	f007 ff49 	bl	8018e0c <iprintf>

  TCP_RMV(pcblist, pcb);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	683a      	ldr	r2, [r7, #0]
 8010f80:	429a      	cmp	r2, r3
 8010f82:	d105      	bne.n	8010f90 <tcp_pcb_remove+0x48>
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	68da      	ldr	r2, [r3, #12]
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	601a      	str	r2, [r3, #0]
 8010f8e:	e013      	b.n	8010fb8 <tcp_pcb_remove+0x70>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	60fb      	str	r3, [r7, #12]
 8010f96:	e00c      	b.n	8010fb2 <tcp_pcb_remove+0x6a>
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	683a      	ldr	r2, [r7, #0]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d104      	bne.n	8010fac <tcp_pcb_remove+0x64>
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	68da      	ldr	r2, [r3, #12]
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	60da      	str	r2, [r3, #12]
 8010faa:	e005      	b.n	8010fb8 <tcp_pcb_remove+0x70>
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	68db      	ldr	r3, [r3, #12]
 8010fb0:	60fb      	str	r3, [r7, #12]
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d1ef      	bne.n	8010f98 <tcp_pcb_remove+0x50>
 8010fb8:	683b      	ldr	r3, [r7, #0]
 8010fba:	2200      	movs	r2, #0
 8010fbc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010fbe:	6838      	ldr	r0, [r7, #0]
 8010fc0:	f7ff ff72 	bl	8010ea8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	7d1b      	ldrb	r3, [r3, #20]
 8010fc8:	2b0a      	cmp	r3, #10
 8010fca:	d013      	beq.n	8010ff4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010fd0:	2b01      	cmp	r3, #1
 8010fd2:	d00f      	beq.n	8010ff4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	8b5b      	ldrh	r3, [r3, #26]
 8010fd8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d009      	beq.n	8010ff4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	8b5b      	ldrh	r3, [r3, #26]
 8010fe4:	f043 0302 	orr.w	r3, r3, #2
 8010fe8:	b29a      	uxth	r2, r3
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010fee:	6838      	ldr	r0, [r7, #0]
 8010ff0:	f003 fbc2 	bl	8014778 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	7d1b      	ldrb	r3, [r3, #20]
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d020      	beq.n	801103e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011000:	2b00      	cmp	r3, #0
 8011002:	d006      	beq.n	8011012 <tcp_pcb_remove+0xca>
 8011004:	4b13      	ldr	r3, [pc, #76]	; (8011054 <tcp_pcb_remove+0x10c>)
 8011006:	f640 0293 	movw	r2, #2195	; 0x893
 801100a:	4916      	ldr	r1, [pc, #88]	; (8011064 <tcp_pcb_remove+0x11c>)
 801100c:	4813      	ldr	r0, [pc, #76]	; (801105c <tcp_pcb_remove+0x114>)
 801100e:	f007 fefd 	bl	8018e0c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011016:	2b00      	cmp	r3, #0
 8011018:	d006      	beq.n	8011028 <tcp_pcb_remove+0xe0>
 801101a:	4b0e      	ldr	r3, [pc, #56]	; (8011054 <tcp_pcb_remove+0x10c>)
 801101c:	f640 0294 	movw	r2, #2196	; 0x894
 8011020:	4911      	ldr	r1, [pc, #68]	; (8011068 <tcp_pcb_remove+0x120>)
 8011022:	480e      	ldr	r0, [pc, #56]	; (801105c <tcp_pcb_remove+0x114>)
 8011024:	f007 fef2 	bl	8018e0c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801102c:	2b00      	cmp	r3, #0
 801102e:	d006      	beq.n	801103e <tcp_pcb_remove+0xf6>
 8011030:	4b08      	ldr	r3, [pc, #32]	; (8011054 <tcp_pcb_remove+0x10c>)
 8011032:	f640 0296 	movw	r2, #2198	; 0x896
 8011036:	490d      	ldr	r1, [pc, #52]	; (801106c <tcp_pcb_remove+0x124>)
 8011038:	4808      	ldr	r0, [pc, #32]	; (801105c <tcp_pcb_remove+0x114>)
 801103a:	f007 fee7 	bl	8018e0c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801103e:	683b      	ldr	r3, [r7, #0]
 8011040:	2200      	movs	r2, #0
 8011042:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011044:	683b      	ldr	r3, [r7, #0]
 8011046:	2200      	movs	r2, #0
 8011048:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801104a:	bf00      	nop
 801104c:	3710      	adds	r7, #16
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	0801b8bc 	.word	0x0801b8bc
 8011058:	0801bf24 	.word	0x0801bf24
 801105c:	0801b900 	.word	0x0801b900
 8011060:	0801bf40 	.word	0x0801bf40
 8011064:	0801bf60 	.word	0x0801bf60
 8011068:	0801bf78 	.word	0x0801bf78
 801106c:	0801bf94 	.word	0x0801bf94

08011070 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d106      	bne.n	801108c <tcp_next_iss+0x1c>
 801107e:	4b0a      	ldr	r3, [pc, #40]	; (80110a8 <tcp_next_iss+0x38>)
 8011080:	f640 02af 	movw	r2, #2223	; 0x8af
 8011084:	4909      	ldr	r1, [pc, #36]	; (80110ac <tcp_next_iss+0x3c>)
 8011086:	480a      	ldr	r0, [pc, #40]	; (80110b0 <tcp_next_iss+0x40>)
 8011088:	f007 fec0 	bl	8018e0c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801108c:	4b09      	ldr	r3, [pc, #36]	; (80110b4 <tcp_next_iss+0x44>)
 801108e:	681a      	ldr	r2, [r3, #0]
 8011090:	4b09      	ldr	r3, [pc, #36]	; (80110b8 <tcp_next_iss+0x48>)
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	4413      	add	r3, r2
 8011096:	4a07      	ldr	r2, [pc, #28]	; (80110b4 <tcp_next_iss+0x44>)
 8011098:	6013      	str	r3, [r2, #0]
  return iss;
 801109a:	4b06      	ldr	r3, [pc, #24]	; (80110b4 <tcp_next_iss+0x44>)
 801109c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3708      	adds	r7, #8
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	0801b8bc 	.word	0x0801b8bc
 80110ac:	0801bfac 	.word	0x0801bfac
 80110b0:	0801b900 	.word	0x0801b900
 80110b4:	20000014 	.word	0x20000014
 80110b8:	2000bcac 	.word	0x2000bcac

080110bc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b086      	sub	sp, #24
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	4603      	mov	r3, r0
 80110c4:	60b9      	str	r1, [r7, #8]
 80110c6:	607a      	str	r2, [r7, #4]
 80110c8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d106      	bne.n	80110de <tcp_eff_send_mss_netif+0x22>
 80110d0:	4b14      	ldr	r3, [pc, #80]	; (8011124 <tcp_eff_send_mss_netif+0x68>)
 80110d2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80110d6:	4914      	ldr	r1, [pc, #80]	; (8011128 <tcp_eff_send_mss_netif+0x6c>)
 80110d8:	4814      	ldr	r0, [pc, #80]	; (801112c <tcp_eff_send_mss_netif+0x70>)
 80110da:	f007 fe97 	bl	8018e0c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d101      	bne.n	80110e8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80110e4:	89fb      	ldrh	r3, [r7, #14]
 80110e6:	e019      	b.n	801111c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80110ec:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80110ee:	8afb      	ldrh	r3, [r7, #22]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d012      	beq.n	801111a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80110f4:	2328      	movs	r3, #40	; 0x28
 80110f6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80110f8:	8afa      	ldrh	r2, [r7, #22]
 80110fa:	8abb      	ldrh	r3, [r7, #20]
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d904      	bls.n	801110a <tcp_eff_send_mss_netif+0x4e>
 8011100:	8afa      	ldrh	r2, [r7, #22]
 8011102:	8abb      	ldrh	r3, [r7, #20]
 8011104:	1ad3      	subs	r3, r2, r3
 8011106:	b29b      	uxth	r3, r3
 8011108:	e000      	b.n	801110c <tcp_eff_send_mss_netif+0x50>
 801110a:	2300      	movs	r3, #0
 801110c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801110e:	8a7a      	ldrh	r2, [r7, #18]
 8011110:	89fb      	ldrh	r3, [r7, #14]
 8011112:	4293      	cmp	r3, r2
 8011114:	bf28      	it	cs
 8011116:	4613      	movcs	r3, r2
 8011118:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801111a:	89fb      	ldrh	r3, [r7, #14]
}
 801111c:	4618      	mov	r0, r3
 801111e:	3718      	adds	r7, #24
 8011120:	46bd      	mov	sp, r7
 8011122:	bd80      	pop	{r7, pc}
 8011124:	0801b8bc 	.word	0x0801b8bc
 8011128:	0801bfc8 	.word	0x0801bfc8
 801112c:	0801b900 	.word	0x0801b900

08011130 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b084      	sub	sp, #16
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2b00      	cmp	r3, #0
 8011142:	d119      	bne.n	8011178 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011144:	4b10      	ldr	r3, [pc, #64]	; (8011188 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011146:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801114a:	4910      	ldr	r1, [pc, #64]	; (801118c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801114c:	4810      	ldr	r0, [pc, #64]	; (8011190 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801114e:	f007 fe5d 	bl	8018e0c <iprintf>

  while (pcb != NULL) {
 8011152:	e011      	b.n	8011178 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	429a      	cmp	r2, r3
 801115e:	d108      	bne.n	8011172 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011166:	68f8      	ldr	r0, [r7, #12]
 8011168:	f7fe fd50 	bl	800fc0c <tcp_abort>
      pcb = next;
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	60fb      	str	r3, [r7, #12]
 8011170:	e002      	b.n	8011178 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d1ea      	bne.n	8011154 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801117e:	bf00      	nop
 8011180:	bf00      	nop
 8011182:	3710      	adds	r7, #16
 8011184:	46bd      	mov	sp, r7
 8011186:	bd80      	pop	{r7, pc}
 8011188:	0801b8bc 	.word	0x0801b8bc
 801118c:	0801bff0 	.word	0x0801bff0
 8011190:	0801b900 	.word	0x0801b900

08011194 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b084      	sub	sp, #16
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
 801119c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d02a      	beq.n	80111fa <tcp_netif_ip_addr_changed+0x66>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d026      	beq.n	80111fa <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80111ac:	4b15      	ldr	r3, [pc, #84]	; (8011204 <tcp_netif_ip_addr_changed+0x70>)
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	4619      	mov	r1, r3
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f7ff ffbc 	bl	8011130 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80111b8:	4b13      	ldr	r3, [pc, #76]	; (8011208 <tcp_netif_ip_addr_changed+0x74>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	4619      	mov	r1, r3
 80111be:	6878      	ldr	r0, [r7, #4]
 80111c0:	f7ff ffb6 	bl	8011130 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80111c4:	683b      	ldr	r3, [r7, #0]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d017      	beq.n	80111fa <tcp_netif_ip_addr_changed+0x66>
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	681b      	ldr	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d013      	beq.n	80111fa <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80111d2:	4b0e      	ldr	r3, [pc, #56]	; (801120c <tcp_netif_ip_addr_changed+0x78>)
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	60fb      	str	r3, [r7, #12]
 80111d8:	e00c      	b.n	80111f4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d103      	bne.n	80111ee <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80111e6:	683b      	ldr	r3, [r7, #0]
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	68db      	ldr	r3, [r3, #12]
 80111f2:	60fb      	str	r3, [r7, #12]
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d1ef      	bne.n	80111da <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80111fa:	bf00      	nop
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
 8011202:	bf00      	nop
 8011204:	2000bca8 	.word	0x2000bca8
 8011208:	2000bcb4 	.word	0x2000bcb4
 801120c:	2000bcb0 	.word	0x2000bcb0

08011210 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b082      	sub	sp, #8
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801121c:	2b00      	cmp	r3, #0
 801121e:	d007      	beq.n	8011230 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011224:	4618      	mov	r0, r3
 8011226:	f7ff fb6f 	bl	8010908 <tcp_segs_free>
    pcb->ooseq = NULL;
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	2200      	movs	r2, #0
 801122e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8011230:	bf00      	nop
 8011232:	3708      	adds	r7, #8
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8011238:	b590      	push	{r4, r7, lr}
 801123a:	b08d      	sub	sp, #52	; 0x34
 801123c:	af04      	add	r7, sp, #16
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d105      	bne.n	8011254 <tcp_input+0x1c>
 8011248:	4b9b      	ldr	r3, [pc, #620]	; (80114b8 <tcp_input+0x280>)
 801124a:	2283      	movs	r2, #131	; 0x83
 801124c:	499b      	ldr	r1, [pc, #620]	; (80114bc <tcp_input+0x284>)
 801124e:	489c      	ldr	r0, [pc, #624]	; (80114c0 <tcp_input+0x288>)
 8011250:	f007 fddc 	bl	8018e0c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	685b      	ldr	r3, [r3, #4]
 8011258:	4a9a      	ldr	r2, [pc, #616]	; (80114c4 <tcp_input+0x28c>)
 801125a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	895b      	ldrh	r3, [r3, #10]
 8011260:	2b13      	cmp	r3, #19
 8011262:	f240 83c4 	bls.w	80119ee <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011266:	4b98      	ldr	r3, [pc, #608]	; (80114c8 <tcp_input+0x290>)
 8011268:	695b      	ldr	r3, [r3, #20]
 801126a:	4a97      	ldr	r2, [pc, #604]	; (80114c8 <tcp_input+0x290>)
 801126c:	6812      	ldr	r2, [r2, #0]
 801126e:	4611      	mov	r1, r2
 8011270:	4618      	mov	r0, r3
 8011272:	f006 fbcb 	bl	8017a0c <ip4_addr_isbroadcast_u32>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	f040 83ba 	bne.w	80119f2 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801127e:	4b92      	ldr	r3, [pc, #584]	; (80114c8 <tcp_input+0x290>)
 8011280:	695b      	ldr	r3, [r3, #20]
 8011282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011286:	2be0      	cmp	r3, #224	; 0xe0
 8011288:	f000 83b3 	beq.w	80119f2 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801128c:	4b8d      	ldr	r3, [pc, #564]	; (80114c4 <tcp_input+0x28c>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	899b      	ldrh	r3, [r3, #12]
 8011292:	b29b      	uxth	r3, r3
 8011294:	4618      	mov	r0, r3
 8011296:	f7fb feb7 	bl	800d008 <lwip_htons>
 801129a:	4603      	mov	r3, r0
 801129c:	0b1b      	lsrs	r3, r3, #12
 801129e:	b29b      	uxth	r3, r3
 80112a0:	b2db      	uxtb	r3, r3
 80112a2:	009b      	lsls	r3, r3, #2
 80112a4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80112a6:	7cbb      	ldrb	r3, [r7, #18]
 80112a8:	2b13      	cmp	r3, #19
 80112aa:	f240 83a4 	bls.w	80119f6 <tcp_input+0x7be>
 80112ae:	7cbb      	ldrb	r3, [r7, #18]
 80112b0:	b29a      	uxth	r2, r3
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	891b      	ldrh	r3, [r3, #8]
 80112b6:	429a      	cmp	r2, r3
 80112b8:	f200 839d 	bhi.w	80119f6 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80112bc:	7cbb      	ldrb	r3, [r7, #18]
 80112be:	b29b      	uxth	r3, r3
 80112c0:	3b14      	subs	r3, #20
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	4b81      	ldr	r3, [pc, #516]	; (80114cc <tcp_input+0x294>)
 80112c6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80112c8:	4b81      	ldr	r3, [pc, #516]	; (80114d0 <tcp_input+0x298>)
 80112ca:	2200      	movs	r2, #0
 80112cc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	895a      	ldrh	r2, [r3, #10]
 80112d2:	7cbb      	ldrb	r3, [r7, #18]
 80112d4:	b29b      	uxth	r3, r3
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d309      	bcc.n	80112ee <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80112da:	4b7c      	ldr	r3, [pc, #496]	; (80114cc <tcp_input+0x294>)
 80112dc:	881a      	ldrh	r2, [r3, #0]
 80112de:	4b7d      	ldr	r3, [pc, #500]	; (80114d4 <tcp_input+0x29c>)
 80112e0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80112e2:	7cbb      	ldrb	r3, [r7, #18]
 80112e4:	4619      	mov	r1, r3
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7fd fc7e 	bl	800ebe8 <pbuf_remove_header>
 80112ec:	e04e      	b.n	801138c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d105      	bne.n	8011302 <tcp_input+0xca>
 80112f6:	4b70      	ldr	r3, [pc, #448]	; (80114b8 <tcp_input+0x280>)
 80112f8:	22c2      	movs	r2, #194	; 0xc2
 80112fa:	4977      	ldr	r1, [pc, #476]	; (80114d8 <tcp_input+0x2a0>)
 80112fc:	4870      	ldr	r0, [pc, #448]	; (80114c0 <tcp_input+0x288>)
 80112fe:	f007 fd85 	bl	8018e0c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011302:	2114      	movs	r1, #20
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f7fd fc6f 	bl	800ebe8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	895a      	ldrh	r2, [r3, #10]
 801130e:	4b71      	ldr	r3, [pc, #452]	; (80114d4 <tcp_input+0x29c>)
 8011310:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011312:	4b6e      	ldr	r3, [pc, #440]	; (80114cc <tcp_input+0x294>)
 8011314:	881a      	ldrh	r2, [r3, #0]
 8011316:	4b6f      	ldr	r3, [pc, #444]	; (80114d4 <tcp_input+0x29c>)
 8011318:	881b      	ldrh	r3, [r3, #0]
 801131a:	1ad3      	subs	r3, r2, r3
 801131c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801131e:	4b6d      	ldr	r3, [pc, #436]	; (80114d4 <tcp_input+0x29c>)
 8011320:	881b      	ldrh	r3, [r3, #0]
 8011322:	4619      	mov	r1, r3
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f7fd fc5f 	bl	800ebe8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	895b      	ldrh	r3, [r3, #10]
 8011330:	8a3a      	ldrh	r2, [r7, #16]
 8011332:	429a      	cmp	r2, r3
 8011334:	f200 8361 	bhi.w	80119fa <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	681b      	ldr	r3, [r3, #0]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	4a64      	ldr	r2, [pc, #400]	; (80114d0 <tcp_input+0x298>)
 8011340:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	8a3a      	ldrh	r2, [r7, #16]
 8011348:	4611      	mov	r1, r2
 801134a:	4618      	mov	r0, r3
 801134c:	f7fd fc4c 	bl	800ebe8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	891a      	ldrh	r2, [r3, #8]
 8011354:	8a3b      	ldrh	r3, [r7, #16]
 8011356:	1ad3      	subs	r3, r2, r3
 8011358:	b29a      	uxth	r2, r3
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	895b      	ldrh	r3, [r3, #10]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d005      	beq.n	8011372 <tcp_input+0x13a>
 8011366:	4b54      	ldr	r3, [pc, #336]	; (80114b8 <tcp_input+0x280>)
 8011368:	22df      	movs	r2, #223	; 0xdf
 801136a:	495c      	ldr	r1, [pc, #368]	; (80114dc <tcp_input+0x2a4>)
 801136c:	4854      	ldr	r0, [pc, #336]	; (80114c0 <tcp_input+0x288>)
 801136e:	f007 fd4d 	bl	8018e0c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	891a      	ldrh	r2, [r3, #8]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	681b      	ldr	r3, [r3, #0]
 801137a:	891b      	ldrh	r3, [r3, #8]
 801137c:	429a      	cmp	r2, r3
 801137e:	d005      	beq.n	801138c <tcp_input+0x154>
 8011380:	4b4d      	ldr	r3, [pc, #308]	; (80114b8 <tcp_input+0x280>)
 8011382:	22e0      	movs	r2, #224	; 0xe0
 8011384:	4956      	ldr	r1, [pc, #344]	; (80114e0 <tcp_input+0x2a8>)
 8011386:	484e      	ldr	r0, [pc, #312]	; (80114c0 <tcp_input+0x288>)
 8011388:	f007 fd40 	bl	8018e0c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801138c:	4b4d      	ldr	r3, [pc, #308]	; (80114c4 <tcp_input+0x28c>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	881b      	ldrh	r3, [r3, #0]
 8011392:	b29b      	uxth	r3, r3
 8011394:	4a4b      	ldr	r2, [pc, #300]	; (80114c4 <tcp_input+0x28c>)
 8011396:	6814      	ldr	r4, [r2, #0]
 8011398:	4618      	mov	r0, r3
 801139a:	f7fb fe35 	bl	800d008 <lwip_htons>
 801139e:	4603      	mov	r3, r0
 80113a0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80113a2:	4b48      	ldr	r3, [pc, #288]	; (80114c4 <tcp_input+0x28c>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	885b      	ldrh	r3, [r3, #2]
 80113a8:	b29b      	uxth	r3, r3
 80113aa:	4a46      	ldr	r2, [pc, #280]	; (80114c4 <tcp_input+0x28c>)
 80113ac:	6814      	ldr	r4, [r2, #0]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f7fb fe2a 	bl	800d008 <lwip_htons>
 80113b4:	4603      	mov	r3, r0
 80113b6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80113b8:	4b42      	ldr	r3, [pc, #264]	; (80114c4 <tcp_input+0x28c>)
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	4a41      	ldr	r2, [pc, #260]	; (80114c4 <tcp_input+0x28c>)
 80113c0:	6814      	ldr	r4, [r2, #0]
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7fb fe35 	bl	800d032 <lwip_htonl>
 80113c8:	4603      	mov	r3, r0
 80113ca:	6063      	str	r3, [r4, #4]
 80113cc:	6863      	ldr	r3, [r4, #4]
 80113ce:	4a45      	ldr	r2, [pc, #276]	; (80114e4 <tcp_input+0x2ac>)
 80113d0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80113d2:	4b3c      	ldr	r3, [pc, #240]	; (80114c4 <tcp_input+0x28c>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	689b      	ldr	r3, [r3, #8]
 80113d8:	4a3a      	ldr	r2, [pc, #232]	; (80114c4 <tcp_input+0x28c>)
 80113da:	6814      	ldr	r4, [r2, #0]
 80113dc:	4618      	mov	r0, r3
 80113de:	f7fb fe28 	bl	800d032 <lwip_htonl>
 80113e2:	4603      	mov	r3, r0
 80113e4:	60a3      	str	r3, [r4, #8]
 80113e6:	68a3      	ldr	r3, [r4, #8]
 80113e8:	4a3f      	ldr	r2, [pc, #252]	; (80114e8 <tcp_input+0x2b0>)
 80113ea:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80113ec:	4b35      	ldr	r3, [pc, #212]	; (80114c4 <tcp_input+0x28c>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	89db      	ldrh	r3, [r3, #14]
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	4a33      	ldr	r2, [pc, #204]	; (80114c4 <tcp_input+0x28c>)
 80113f6:	6814      	ldr	r4, [r2, #0]
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7fb fe05 	bl	800d008 <lwip_htons>
 80113fe:	4603      	mov	r3, r0
 8011400:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011402:	4b30      	ldr	r3, [pc, #192]	; (80114c4 <tcp_input+0x28c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	899b      	ldrh	r3, [r3, #12]
 8011408:	b29b      	uxth	r3, r3
 801140a:	4618      	mov	r0, r3
 801140c:	f7fb fdfc 	bl	800d008 <lwip_htons>
 8011410:	4603      	mov	r3, r0
 8011412:	b2db      	uxtb	r3, r3
 8011414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011418:	b2da      	uxtb	r2, r3
 801141a:	4b34      	ldr	r3, [pc, #208]	; (80114ec <tcp_input+0x2b4>)
 801141c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	891a      	ldrh	r2, [r3, #8]
 8011422:	4b33      	ldr	r3, [pc, #204]	; (80114f0 <tcp_input+0x2b8>)
 8011424:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011426:	4b31      	ldr	r3, [pc, #196]	; (80114ec <tcp_input+0x2b4>)
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	f003 0303 	and.w	r3, r3, #3
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00c      	beq.n	801144c <tcp_input+0x214>
    tcplen++;
 8011432:	4b2f      	ldr	r3, [pc, #188]	; (80114f0 <tcp_input+0x2b8>)
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	3301      	adds	r3, #1
 8011438:	b29a      	uxth	r2, r3
 801143a:	4b2d      	ldr	r3, [pc, #180]	; (80114f0 <tcp_input+0x2b8>)
 801143c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	891a      	ldrh	r2, [r3, #8]
 8011442:	4b2b      	ldr	r3, [pc, #172]	; (80114f0 <tcp_input+0x2b8>)
 8011444:	881b      	ldrh	r3, [r3, #0]
 8011446:	429a      	cmp	r2, r3
 8011448:	f200 82d9 	bhi.w	80119fe <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801144c:	2300      	movs	r3, #0
 801144e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011450:	4b28      	ldr	r3, [pc, #160]	; (80114f4 <tcp_input+0x2bc>)
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	61fb      	str	r3, [r7, #28]
 8011456:	e09d      	b.n	8011594 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011458:	69fb      	ldr	r3, [r7, #28]
 801145a:	7d1b      	ldrb	r3, [r3, #20]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d105      	bne.n	801146c <tcp_input+0x234>
 8011460:	4b15      	ldr	r3, [pc, #84]	; (80114b8 <tcp_input+0x280>)
 8011462:	22fb      	movs	r2, #251	; 0xfb
 8011464:	4924      	ldr	r1, [pc, #144]	; (80114f8 <tcp_input+0x2c0>)
 8011466:	4816      	ldr	r0, [pc, #88]	; (80114c0 <tcp_input+0x288>)
 8011468:	f007 fcd0 	bl	8018e0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801146c:	69fb      	ldr	r3, [r7, #28]
 801146e:	7d1b      	ldrb	r3, [r3, #20]
 8011470:	2b0a      	cmp	r3, #10
 8011472:	d105      	bne.n	8011480 <tcp_input+0x248>
 8011474:	4b10      	ldr	r3, [pc, #64]	; (80114b8 <tcp_input+0x280>)
 8011476:	22fc      	movs	r2, #252	; 0xfc
 8011478:	4920      	ldr	r1, [pc, #128]	; (80114fc <tcp_input+0x2c4>)
 801147a:	4811      	ldr	r0, [pc, #68]	; (80114c0 <tcp_input+0x288>)
 801147c:	f007 fcc6 	bl	8018e0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	7d1b      	ldrb	r3, [r3, #20]
 8011484:	2b01      	cmp	r3, #1
 8011486:	d105      	bne.n	8011494 <tcp_input+0x25c>
 8011488:	4b0b      	ldr	r3, [pc, #44]	; (80114b8 <tcp_input+0x280>)
 801148a:	22fd      	movs	r2, #253	; 0xfd
 801148c:	491c      	ldr	r1, [pc, #112]	; (8011500 <tcp_input+0x2c8>)
 801148e:	480c      	ldr	r0, [pc, #48]	; (80114c0 <tcp_input+0x288>)
 8011490:	f007 fcbc 	bl	8018e0c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011494:	69fb      	ldr	r3, [r7, #28]
 8011496:	7a1b      	ldrb	r3, [r3, #8]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d033      	beq.n	8011504 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801149c:	69fb      	ldr	r3, [r7, #28]
 801149e:	7a1a      	ldrb	r2, [r3, #8]
 80114a0:	4b09      	ldr	r3, [pc, #36]	; (80114c8 <tcp_input+0x290>)
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114a8:	3301      	adds	r3, #1
 80114aa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d029      	beq.n	8011504 <tcp_input+0x2cc>
      prev = pcb;
 80114b0:	69fb      	ldr	r3, [r7, #28]
 80114b2:	61bb      	str	r3, [r7, #24]
      continue;
 80114b4:	e06b      	b.n	801158e <tcp_input+0x356>
 80114b6:	bf00      	nop
 80114b8:	0801c024 	.word	0x0801c024
 80114bc:	0801c058 	.word	0x0801c058
 80114c0:	0801c070 	.word	0x0801c070
 80114c4:	20004eec 	.word	0x20004eec
 80114c8:	2000844c 	.word	0x2000844c
 80114cc:	20004ef0 	.word	0x20004ef0
 80114d0:	20004ef4 	.word	0x20004ef4
 80114d4:	20004ef2 	.word	0x20004ef2
 80114d8:	0801c098 	.word	0x0801c098
 80114dc:	0801c0a8 	.word	0x0801c0a8
 80114e0:	0801c0b4 	.word	0x0801c0b4
 80114e4:	20004efc 	.word	0x20004efc
 80114e8:	20004f00 	.word	0x20004f00
 80114ec:	20004f08 	.word	0x20004f08
 80114f0:	20004f06 	.word	0x20004f06
 80114f4:	2000bca8 	.word	0x2000bca8
 80114f8:	0801c0d4 	.word	0x0801c0d4
 80114fc:	0801c0fc 	.word	0x0801c0fc
 8011500:	0801c128 	.word	0x0801c128
    }

    if (pcb->remote_port == tcphdr->src &&
 8011504:	69fb      	ldr	r3, [r7, #28]
 8011506:	8b1a      	ldrh	r2, [r3, #24]
 8011508:	4b94      	ldr	r3, [pc, #592]	; (801175c <tcp_input+0x524>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	881b      	ldrh	r3, [r3, #0]
 801150e:	b29b      	uxth	r3, r3
 8011510:	429a      	cmp	r2, r3
 8011512:	d13a      	bne.n	801158a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011514:	69fb      	ldr	r3, [r7, #28]
 8011516:	8ada      	ldrh	r2, [r3, #22]
 8011518:	4b90      	ldr	r3, [pc, #576]	; (801175c <tcp_input+0x524>)
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	885b      	ldrh	r3, [r3, #2]
 801151e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011520:	429a      	cmp	r2, r3
 8011522:	d132      	bne.n	801158a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011524:	69fb      	ldr	r3, [r7, #28]
 8011526:	685a      	ldr	r2, [r3, #4]
 8011528:	4b8d      	ldr	r3, [pc, #564]	; (8011760 <tcp_input+0x528>)
 801152a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801152c:	429a      	cmp	r2, r3
 801152e:	d12c      	bne.n	801158a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011530:	69fb      	ldr	r3, [r7, #28]
 8011532:	681a      	ldr	r2, [r3, #0]
 8011534:	4b8a      	ldr	r3, [pc, #552]	; (8011760 <tcp_input+0x528>)
 8011536:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011538:	429a      	cmp	r2, r3
 801153a:	d126      	bne.n	801158a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801153c:	69fb      	ldr	r3, [r7, #28]
 801153e:	68db      	ldr	r3, [r3, #12]
 8011540:	69fa      	ldr	r2, [r7, #28]
 8011542:	429a      	cmp	r2, r3
 8011544:	d106      	bne.n	8011554 <tcp_input+0x31c>
 8011546:	4b87      	ldr	r3, [pc, #540]	; (8011764 <tcp_input+0x52c>)
 8011548:	f240 120d 	movw	r2, #269	; 0x10d
 801154c:	4986      	ldr	r1, [pc, #536]	; (8011768 <tcp_input+0x530>)
 801154e:	4887      	ldr	r0, [pc, #540]	; (801176c <tcp_input+0x534>)
 8011550:	f007 fc5c 	bl	8018e0c <iprintf>
      if (prev != NULL) {
 8011554:	69bb      	ldr	r3, [r7, #24]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d00a      	beq.n	8011570 <tcp_input+0x338>
        prev->next = pcb->next;
 801155a:	69fb      	ldr	r3, [r7, #28]
 801155c:	68da      	ldr	r2, [r3, #12]
 801155e:	69bb      	ldr	r3, [r7, #24]
 8011560:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011562:	4b83      	ldr	r3, [pc, #524]	; (8011770 <tcp_input+0x538>)
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	69fb      	ldr	r3, [r7, #28]
 8011568:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801156a:	4a81      	ldr	r2, [pc, #516]	; (8011770 <tcp_input+0x538>)
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011570:	69fb      	ldr	r3, [r7, #28]
 8011572:	68db      	ldr	r3, [r3, #12]
 8011574:	69fa      	ldr	r2, [r7, #28]
 8011576:	429a      	cmp	r2, r3
 8011578:	d111      	bne.n	801159e <tcp_input+0x366>
 801157a:	4b7a      	ldr	r3, [pc, #488]	; (8011764 <tcp_input+0x52c>)
 801157c:	f240 1215 	movw	r2, #277	; 0x115
 8011580:	497c      	ldr	r1, [pc, #496]	; (8011774 <tcp_input+0x53c>)
 8011582:	487a      	ldr	r0, [pc, #488]	; (801176c <tcp_input+0x534>)
 8011584:	f007 fc42 	bl	8018e0c <iprintf>
      break;
 8011588:	e009      	b.n	801159e <tcp_input+0x366>
    }
    prev = pcb;
 801158a:	69fb      	ldr	r3, [r7, #28]
 801158c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801158e:	69fb      	ldr	r3, [r7, #28]
 8011590:	68db      	ldr	r3, [r3, #12]
 8011592:	61fb      	str	r3, [r7, #28]
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	2b00      	cmp	r3, #0
 8011598:	f47f af5e 	bne.w	8011458 <tcp_input+0x220>
 801159c:	e000      	b.n	80115a0 <tcp_input+0x368>
      break;
 801159e:	bf00      	nop
  }

  if (pcb == NULL) {
 80115a0:	69fb      	ldr	r3, [r7, #28]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	f040 8095 	bne.w	80116d2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80115a8:	4b73      	ldr	r3, [pc, #460]	; (8011778 <tcp_input+0x540>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	61fb      	str	r3, [r7, #28]
 80115ae:	e03f      	b.n	8011630 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80115b0:	69fb      	ldr	r3, [r7, #28]
 80115b2:	7d1b      	ldrb	r3, [r3, #20]
 80115b4:	2b0a      	cmp	r3, #10
 80115b6:	d006      	beq.n	80115c6 <tcp_input+0x38e>
 80115b8:	4b6a      	ldr	r3, [pc, #424]	; (8011764 <tcp_input+0x52c>)
 80115ba:	f240 121f 	movw	r2, #287	; 0x11f
 80115be:	496f      	ldr	r1, [pc, #444]	; (801177c <tcp_input+0x544>)
 80115c0:	486a      	ldr	r0, [pc, #424]	; (801176c <tcp_input+0x534>)
 80115c2:	f007 fc23 	bl	8018e0c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	7a1b      	ldrb	r3, [r3, #8]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d009      	beq.n	80115e2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80115ce:	69fb      	ldr	r3, [r7, #28]
 80115d0:	7a1a      	ldrb	r2, [r3, #8]
 80115d2:	4b63      	ldr	r3, [pc, #396]	; (8011760 <tcp_input+0x528>)
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80115da:	3301      	adds	r3, #1
 80115dc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115de:	429a      	cmp	r2, r3
 80115e0:	d122      	bne.n	8011628 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	8b1a      	ldrh	r2, [r3, #24]
 80115e6:	4b5d      	ldr	r3, [pc, #372]	; (801175c <tcp_input+0x524>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	881b      	ldrh	r3, [r3, #0]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	429a      	cmp	r2, r3
 80115f0:	d11b      	bne.n	801162a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80115f2:	69fb      	ldr	r3, [r7, #28]
 80115f4:	8ada      	ldrh	r2, [r3, #22]
 80115f6:	4b59      	ldr	r3, [pc, #356]	; (801175c <tcp_input+0x524>)
 80115f8:	681b      	ldr	r3, [r3, #0]
 80115fa:	885b      	ldrh	r3, [r3, #2]
 80115fc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80115fe:	429a      	cmp	r2, r3
 8011600:	d113      	bne.n	801162a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	685a      	ldr	r2, [r3, #4]
 8011606:	4b56      	ldr	r3, [pc, #344]	; (8011760 <tcp_input+0x528>)
 8011608:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801160a:	429a      	cmp	r2, r3
 801160c:	d10d      	bne.n	801162a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801160e:	69fb      	ldr	r3, [r7, #28]
 8011610:	681a      	ldr	r2, [r3, #0]
 8011612:	4b53      	ldr	r3, [pc, #332]	; (8011760 <tcp_input+0x528>)
 8011614:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011616:	429a      	cmp	r2, r3
 8011618:	d107      	bne.n	801162a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801161a:	69f8      	ldr	r0, [r7, #28]
 801161c:	f000 fb54 	bl	8011cc8 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f7fd fb99 	bl	800ed58 <pbuf_free>
        return;
 8011626:	e1f0      	b.n	8011a0a <tcp_input+0x7d2>
        continue;
 8011628:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801162a:	69fb      	ldr	r3, [r7, #28]
 801162c:	68db      	ldr	r3, [r3, #12]
 801162e:	61fb      	str	r3, [r7, #28]
 8011630:	69fb      	ldr	r3, [r7, #28]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d1bc      	bne.n	80115b0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011636:	2300      	movs	r3, #0
 8011638:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801163a:	4b51      	ldr	r3, [pc, #324]	; (8011780 <tcp_input+0x548>)
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	617b      	str	r3, [r7, #20]
 8011640:	e02a      	b.n	8011698 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	7a1b      	ldrb	r3, [r3, #8]
 8011646:	2b00      	cmp	r3, #0
 8011648:	d00c      	beq.n	8011664 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801164a:	697b      	ldr	r3, [r7, #20]
 801164c:	7a1a      	ldrb	r2, [r3, #8]
 801164e:	4b44      	ldr	r3, [pc, #272]	; (8011760 <tcp_input+0x528>)
 8011650:	685b      	ldr	r3, [r3, #4]
 8011652:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011656:	3301      	adds	r3, #1
 8011658:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801165a:	429a      	cmp	r2, r3
 801165c:	d002      	beq.n	8011664 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	61bb      	str	r3, [r7, #24]
        continue;
 8011662:	e016      	b.n	8011692 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011664:	697b      	ldr	r3, [r7, #20]
 8011666:	8ada      	ldrh	r2, [r3, #22]
 8011668:	4b3c      	ldr	r3, [pc, #240]	; (801175c <tcp_input+0x524>)
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	885b      	ldrh	r3, [r3, #2]
 801166e:	b29b      	uxth	r3, r3
 8011670:	429a      	cmp	r2, r3
 8011672:	d10c      	bne.n	801168e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	681a      	ldr	r2, [r3, #0]
 8011678:	4b39      	ldr	r3, [pc, #228]	; (8011760 <tcp_input+0x528>)
 801167a:	695b      	ldr	r3, [r3, #20]
 801167c:	429a      	cmp	r2, r3
 801167e:	d00f      	beq.n	80116a0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011680:	697b      	ldr	r3, [r7, #20]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d00d      	beq.n	80116a2 <tcp_input+0x46a>
 8011686:	697b      	ldr	r3, [r7, #20]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d009      	beq.n	80116a2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	617b      	str	r3, [r7, #20]
 8011698:	697b      	ldr	r3, [r7, #20]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d1d1      	bne.n	8011642 <tcp_input+0x40a>
 801169e:	e000      	b.n	80116a2 <tcp_input+0x46a>
            break;
 80116a0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d014      	beq.n	80116d2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80116a8:	69bb      	ldr	r3, [r7, #24]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d00a      	beq.n	80116c4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	68da      	ldr	r2, [r3, #12]
 80116b2:	69bb      	ldr	r3, [r7, #24]
 80116b4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80116b6:	4b32      	ldr	r3, [pc, #200]	; (8011780 <tcp_input+0x548>)
 80116b8:	681a      	ldr	r2, [r3, #0]
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80116be:	4a30      	ldr	r2, [pc, #192]	; (8011780 <tcp_input+0x548>)
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80116c4:	6978      	ldr	r0, [r7, #20]
 80116c6:	f000 fa01 	bl	8011acc <tcp_listen_input>
      }
      pbuf_free(p);
 80116ca:	6878      	ldr	r0, [r7, #4]
 80116cc:	f7fd fb44 	bl	800ed58 <pbuf_free>
      return;
 80116d0:	e19b      	b.n	8011a0a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80116d2:	69fb      	ldr	r3, [r7, #28]
 80116d4:	2b00      	cmp	r3, #0
 80116d6:	f000 8160 	beq.w	801199a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80116da:	4b2a      	ldr	r3, [pc, #168]	; (8011784 <tcp_input+0x54c>)
 80116dc:	2200      	movs	r2, #0
 80116de:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	891a      	ldrh	r2, [r3, #8]
 80116e4:	4b27      	ldr	r3, [pc, #156]	; (8011784 <tcp_input+0x54c>)
 80116e6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80116e8:	4a26      	ldr	r2, [pc, #152]	; (8011784 <tcp_input+0x54c>)
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80116ee:	4b1b      	ldr	r3, [pc, #108]	; (801175c <tcp_input+0x524>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	4a24      	ldr	r2, [pc, #144]	; (8011784 <tcp_input+0x54c>)
 80116f4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80116f6:	4b24      	ldr	r3, [pc, #144]	; (8011788 <tcp_input+0x550>)
 80116f8:	2200      	movs	r2, #0
 80116fa:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80116fc:	4b23      	ldr	r3, [pc, #140]	; (801178c <tcp_input+0x554>)
 80116fe:	2200      	movs	r2, #0
 8011700:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011702:	4b23      	ldr	r3, [pc, #140]	; (8011790 <tcp_input+0x558>)
 8011704:	2200      	movs	r2, #0
 8011706:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011708:	4b22      	ldr	r3, [pc, #136]	; (8011794 <tcp_input+0x55c>)
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	f003 0308 	and.w	r3, r3, #8
 8011710:	2b00      	cmp	r3, #0
 8011712:	d006      	beq.n	8011722 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	7b5b      	ldrb	r3, [r3, #13]
 8011718:	f043 0301 	orr.w	r3, r3, #1
 801171c:	b2da      	uxtb	r2, r3
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011726:	2b00      	cmp	r3, #0
 8011728:	d038      	beq.n	801179c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801172a:	69f8      	ldr	r0, [r7, #28]
 801172c:	f7ff f870 	bl	8010810 <tcp_process_refused_data>
 8011730:	4603      	mov	r3, r0
 8011732:	f113 0f0d 	cmn.w	r3, #13
 8011736:	d007      	beq.n	8011748 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801173c:	2b00      	cmp	r3, #0
 801173e:	d02d      	beq.n	801179c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011740:	4b15      	ldr	r3, [pc, #84]	; (8011798 <tcp_input+0x560>)
 8011742:	881b      	ldrh	r3, [r3, #0]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d029      	beq.n	801179c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011748:	69fb      	ldr	r3, [r7, #28]
 801174a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801174c:	2b00      	cmp	r3, #0
 801174e:	f040 8104 	bne.w	801195a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011752:	69f8      	ldr	r0, [r7, #28]
 8011754:	f003 fe16 	bl	8015384 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011758:	e0ff      	b.n	801195a <tcp_input+0x722>
 801175a:	bf00      	nop
 801175c:	20004eec 	.word	0x20004eec
 8011760:	2000844c 	.word	0x2000844c
 8011764:	0801c024 	.word	0x0801c024
 8011768:	0801c150 	.word	0x0801c150
 801176c:	0801c070 	.word	0x0801c070
 8011770:	2000bca8 	.word	0x2000bca8
 8011774:	0801c17c 	.word	0x0801c17c
 8011778:	2000bcb8 	.word	0x2000bcb8
 801177c:	0801c1a8 	.word	0x0801c1a8
 8011780:	2000bcb0 	.word	0x2000bcb0
 8011784:	20004edc 	.word	0x20004edc
 8011788:	20004f0c 	.word	0x20004f0c
 801178c:	20004f09 	.word	0x20004f09
 8011790:	20004f04 	.word	0x20004f04
 8011794:	20004f08 	.word	0x20004f08
 8011798:	20004f06 	.word	0x20004f06
      }
    }
    tcp_input_pcb = pcb;
 801179c:	4a9c      	ldr	r2, [pc, #624]	; (8011a10 <tcp_input+0x7d8>)
 801179e:	69fb      	ldr	r3, [r7, #28]
 80117a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80117a2:	69f8      	ldr	r0, [r7, #28]
 80117a4:	f000 fb0a 	bl	8011dbc <tcp_process>
 80117a8:	4603      	mov	r3, r0
 80117aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80117ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80117b0:	f113 0f0d 	cmn.w	r3, #13
 80117b4:	f000 80d3 	beq.w	801195e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80117b8:	4b96      	ldr	r3, [pc, #600]	; (8011a14 <tcp_input+0x7dc>)
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	f003 0308 	and.w	r3, r3, #8
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d015      	beq.n	80117f0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80117c4:	69fb      	ldr	r3, [r7, #28]
 80117c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d008      	beq.n	80117e0 <tcp_input+0x5a8>
 80117ce:	69fb      	ldr	r3, [r7, #28]
 80117d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117d4:	69fa      	ldr	r2, [r7, #28]
 80117d6:	6912      	ldr	r2, [r2, #16]
 80117d8:	f06f 010d 	mvn.w	r1, #13
 80117dc:	4610      	mov	r0, r2
 80117de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80117e0:	69f9      	ldr	r1, [r7, #28]
 80117e2:	488d      	ldr	r0, [pc, #564]	; (8011a18 <tcp_input+0x7e0>)
 80117e4:	f7ff fbb0 	bl	8010f48 <tcp_pcb_remove>
        tcp_free(pcb);
 80117e8:	69f8      	ldr	r0, [r7, #28]
 80117ea:	f7fd fecb 	bl	800f584 <tcp_free>
 80117ee:	e0c1      	b.n	8011974 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80117f0:	2300      	movs	r3, #0
 80117f2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80117f4:	4b89      	ldr	r3, [pc, #548]	; (8011a1c <tcp_input+0x7e4>)
 80117f6:	881b      	ldrh	r3, [r3, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d01d      	beq.n	8011838 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80117fc:	4b87      	ldr	r3, [pc, #540]	; (8011a1c <tcp_input+0x7e4>)
 80117fe:	881b      	ldrh	r3, [r3, #0]
 8011800:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011808:	2b00      	cmp	r3, #0
 801180a:	d00a      	beq.n	8011822 <tcp_input+0x5ea>
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011812:	69fa      	ldr	r2, [r7, #28]
 8011814:	6910      	ldr	r0, [r2, #16]
 8011816:	89fa      	ldrh	r2, [r7, #14]
 8011818:	69f9      	ldr	r1, [r7, #28]
 801181a:	4798      	blx	r3
 801181c:	4603      	mov	r3, r0
 801181e:	74fb      	strb	r3, [r7, #19]
 8011820:	e001      	b.n	8011826 <tcp_input+0x5ee>
 8011822:	2300      	movs	r3, #0
 8011824:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011826:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801182a:	f113 0f0d 	cmn.w	r3, #13
 801182e:	f000 8098 	beq.w	8011962 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011832:	4b7a      	ldr	r3, [pc, #488]	; (8011a1c <tcp_input+0x7e4>)
 8011834:	2200      	movs	r2, #0
 8011836:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011838:	69f8      	ldr	r0, [r7, #28]
 801183a:	f000 f907 	bl	8011a4c <tcp_input_delayed_close>
 801183e:	4603      	mov	r3, r0
 8011840:	2b00      	cmp	r3, #0
 8011842:	f040 8090 	bne.w	8011966 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011846:	4b76      	ldr	r3, [pc, #472]	; (8011a20 <tcp_input+0x7e8>)
 8011848:	681b      	ldr	r3, [r3, #0]
 801184a:	2b00      	cmp	r3, #0
 801184c:	d041      	beq.n	80118d2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801184e:	69fb      	ldr	r3, [r7, #28]
 8011850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011852:	2b00      	cmp	r3, #0
 8011854:	d006      	beq.n	8011864 <tcp_input+0x62c>
 8011856:	4b73      	ldr	r3, [pc, #460]	; (8011a24 <tcp_input+0x7ec>)
 8011858:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801185c:	4972      	ldr	r1, [pc, #456]	; (8011a28 <tcp_input+0x7f0>)
 801185e:	4873      	ldr	r0, [pc, #460]	; (8011a2c <tcp_input+0x7f4>)
 8011860:	f007 fad4 	bl	8018e0c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011864:	69fb      	ldr	r3, [r7, #28]
 8011866:	8b5b      	ldrh	r3, [r3, #26]
 8011868:	f003 0310 	and.w	r3, r3, #16
 801186c:	2b00      	cmp	r3, #0
 801186e:	d008      	beq.n	8011882 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011870:	4b6b      	ldr	r3, [pc, #428]	; (8011a20 <tcp_input+0x7e8>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	4618      	mov	r0, r3
 8011876:	f7fd fa6f 	bl	800ed58 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801187a:	69f8      	ldr	r0, [r7, #28]
 801187c:	f7fe f9c6 	bl	800fc0c <tcp_abort>
            goto aborted;
 8011880:	e078      	b.n	8011974 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011882:	69fb      	ldr	r3, [r7, #28]
 8011884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011888:	2b00      	cmp	r3, #0
 801188a:	d00c      	beq.n	80118a6 <tcp_input+0x66e>
 801188c:	69fb      	ldr	r3, [r7, #28]
 801188e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011892:	69fb      	ldr	r3, [r7, #28]
 8011894:	6918      	ldr	r0, [r3, #16]
 8011896:	4b62      	ldr	r3, [pc, #392]	; (8011a20 <tcp_input+0x7e8>)
 8011898:	681a      	ldr	r2, [r3, #0]
 801189a:	2300      	movs	r3, #0
 801189c:	69f9      	ldr	r1, [r7, #28]
 801189e:	47a0      	blx	r4
 80118a0:	4603      	mov	r3, r0
 80118a2:	74fb      	strb	r3, [r7, #19]
 80118a4:	e008      	b.n	80118b8 <tcp_input+0x680>
 80118a6:	4b5e      	ldr	r3, [pc, #376]	; (8011a20 <tcp_input+0x7e8>)
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	2300      	movs	r3, #0
 80118ac:	69f9      	ldr	r1, [r7, #28]
 80118ae:	2000      	movs	r0, #0
 80118b0:	f7ff f884 	bl	80109bc <tcp_recv_null>
 80118b4:	4603      	mov	r3, r0
 80118b6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80118b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118bc:	f113 0f0d 	cmn.w	r3, #13
 80118c0:	d053      	beq.n	801196a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80118c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d003      	beq.n	80118d2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80118ca:	4b55      	ldr	r3, [pc, #340]	; (8011a20 <tcp_input+0x7e8>)
 80118cc:	681a      	ldr	r2, [r3, #0]
 80118ce:	69fb      	ldr	r3, [r7, #28]
 80118d0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80118d2:	4b50      	ldr	r3, [pc, #320]	; (8011a14 <tcp_input+0x7dc>)
 80118d4:	781b      	ldrb	r3, [r3, #0]
 80118d6:	f003 0320 	and.w	r3, r3, #32
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d030      	beq.n	8011940 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80118de:	69fb      	ldr	r3, [r7, #28]
 80118e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d009      	beq.n	80118fa <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80118e6:	69fb      	ldr	r3, [r7, #28]
 80118e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118ea:	7b5a      	ldrb	r2, [r3, #13]
 80118ec:	69fb      	ldr	r3, [r7, #28]
 80118ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80118f0:	f042 0220 	orr.w	r2, r2, #32
 80118f4:	b2d2      	uxtb	r2, r2
 80118f6:	735a      	strb	r2, [r3, #13]
 80118f8:	e022      	b.n	8011940 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80118fa:	69fb      	ldr	r3, [r7, #28]
 80118fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011902:	d005      	beq.n	8011910 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011904:	69fb      	ldr	r3, [r7, #28]
 8011906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011908:	3301      	adds	r3, #1
 801190a:	b29a      	uxth	r2, r3
 801190c:	69fb      	ldr	r3, [r7, #28]
 801190e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011916:	2b00      	cmp	r3, #0
 8011918:	d00b      	beq.n	8011932 <tcp_input+0x6fa>
 801191a:	69fb      	ldr	r3, [r7, #28]
 801191c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011920:	69fb      	ldr	r3, [r7, #28]
 8011922:	6918      	ldr	r0, [r3, #16]
 8011924:	2300      	movs	r3, #0
 8011926:	2200      	movs	r2, #0
 8011928:	69f9      	ldr	r1, [r7, #28]
 801192a:	47a0      	blx	r4
 801192c:	4603      	mov	r3, r0
 801192e:	74fb      	strb	r3, [r7, #19]
 8011930:	e001      	b.n	8011936 <tcp_input+0x6fe>
 8011932:	2300      	movs	r3, #0
 8011934:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011936:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801193a:	f113 0f0d 	cmn.w	r3, #13
 801193e:	d016      	beq.n	801196e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011940:	4b33      	ldr	r3, [pc, #204]	; (8011a10 <tcp_input+0x7d8>)
 8011942:	2200      	movs	r2, #0
 8011944:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011946:	69f8      	ldr	r0, [r7, #28]
 8011948:	f000 f880 	bl	8011a4c <tcp_input_delayed_close>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d10f      	bne.n	8011972 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011952:	69f8      	ldr	r0, [r7, #28]
 8011954:	f002 ff10 	bl	8014778 <tcp_output>
 8011958:	e00c      	b.n	8011974 <tcp_input+0x73c>
        goto aborted;
 801195a:	bf00      	nop
 801195c:	e00a      	b.n	8011974 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801195e:	bf00      	nop
 8011960:	e008      	b.n	8011974 <tcp_input+0x73c>
              goto aborted;
 8011962:	bf00      	nop
 8011964:	e006      	b.n	8011974 <tcp_input+0x73c>
          goto aborted;
 8011966:	bf00      	nop
 8011968:	e004      	b.n	8011974 <tcp_input+0x73c>
            goto aborted;
 801196a:	bf00      	nop
 801196c:	e002      	b.n	8011974 <tcp_input+0x73c>
              goto aborted;
 801196e:	bf00      	nop
 8011970:	e000      	b.n	8011974 <tcp_input+0x73c>
          goto aborted;
 8011972:	bf00      	nop
    tcp_input_pcb = NULL;
 8011974:	4b26      	ldr	r3, [pc, #152]	; (8011a10 <tcp_input+0x7d8>)
 8011976:	2200      	movs	r2, #0
 8011978:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801197a:	4b29      	ldr	r3, [pc, #164]	; (8011a20 <tcp_input+0x7e8>)
 801197c:	2200      	movs	r2, #0
 801197e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011980:	4b2b      	ldr	r3, [pc, #172]	; (8011a30 <tcp_input+0x7f8>)
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d03f      	beq.n	8011a08 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8011988:	4b29      	ldr	r3, [pc, #164]	; (8011a30 <tcp_input+0x7f8>)
 801198a:	685b      	ldr	r3, [r3, #4]
 801198c:	4618      	mov	r0, r3
 801198e:	f7fd f9e3 	bl	800ed58 <pbuf_free>
      inseg.p = NULL;
 8011992:	4b27      	ldr	r3, [pc, #156]	; (8011a30 <tcp_input+0x7f8>)
 8011994:	2200      	movs	r2, #0
 8011996:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011998:	e036      	b.n	8011a08 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801199a:	4b26      	ldr	r3, [pc, #152]	; (8011a34 <tcp_input+0x7fc>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	899b      	ldrh	r3, [r3, #12]
 80119a0:	b29b      	uxth	r3, r3
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7fb fb30 	bl	800d008 <lwip_htons>
 80119a8:	4603      	mov	r3, r0
 80119aa:	b2db      	uxtb	r3, r3
 80119ac:	f003 0304 	and.w	r3, r3, #4
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d118      	bne.n	80119e6 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119b4:	4b20      	ldr	r3, [pc, #128]	; (8011a38 <tcp_input+0x800>)
 80119b6:	6819      	ldr	r1, [r3, #0]
 80119b8:	4b20      	ldr	r3, [pc, #128]	; (8011a3c <tcp_input+0x804>)
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	461a      	mov	r2, r3
 80119be:	4b20      	ldr	r3, [pc, #128]	; (8011a40 <tcp_input+0x808>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119c4:	4b1b      	ldr	r3, [pc, #108]	; (8011a34 <tcp_input+0x7fc>)
 80119c6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119c8:	885b      	ldrh	r3, [r3, #2]
 80119ca:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119cc:	4a19      	ldr	r2, [pc, #100]	; (8011a34 <tcp_input+0x7fc>)
 80119ce:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119d0:	8812      	ldrh	r2, [r2, #0]
 80119d2:	b292      	uxth	r2, r2
 80119d4:	9202      	str	r2, [sp, #8]
 80119d6:	9301      	str	r3, [sp, #4]
 80119d8:	4b1a      	ldr	r3, [pc, #104]	; (8011a44 <tcp_input+0x80c>)
 80119da:	9300      	str	r3, [sp, #0]
 80119dc:	4b1a      	ldr	r3, [pc, #104]	; (8011a48 <tcp_input+0x810>)
 80119de:	4602      	mov	r2, r0
 80119e0:	2000      	movs	r0, #0
 80119e2:	f003 fc7d 	bl	80152e0 <tcp_rst>
    pbuf_free(p);
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f7fd f9b6 	bl	800ed58 <pbuf_free>
  return;
 80119ec:	e00c      	b.n	8011a08 <tcp_input+0x7d0>
    goto dropped;
 80119ee:	bf00      	nop
 80119f0:	e006      	b.n	8011a00 <tcp_input+0x7c8>
    goto dropped;
 80119f2:	bf00      	nop
 80119f4:	e004      	b.n	8011a00 <tcp_input+0x7c8>
    goto dropped;
 80119f6:	bf00      	nop
 80119f8:	e002      	b.n	8011a00 <tcp_input+0x7c8>
      goto dropped;
 80119fa:	bf00      	nop
 80119fc:	e000      	b.n	8011a00 <tcp_input+0x7c8>
      goto dropped;
 80119fe:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f7fd f9a9 	bl	800ed58 <pbuf_free>
 8011a06:	e000      	b.n	8011a0a <tcp_input+0x7d2>
  return;
 8011a08:	bf00      	nop
}
 8011a0a:	3724      	adds	r7, #36	; 0x24
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd90      	pop	{r4, r7, pc}
 8011a10:	2000bcbc 	.word	0x2000bcbc
 8011a14:	20004f09 	.word	0x20004f09
 8011a18:	2000bca8 	.word	0x2000bca8
 8011a1c:	20004f04 	.word	0x20004f04
 8011a20:	20004f0c 	.word	0x20004f0c
 8011a24:	0801c024 	.word	0x0801c024
 8011a28:	0801c1d8 	.word	0x0801c1d8
 8011a2c:	0801c070 	.word	0x0801c070
 8011a30:	20004edc 	.word	0x20004edc
 8011a34:	20004eec 	.word	0x20004eec
 8011a38:	20004f00 	.word	0x20004f00
 8011a3c:	20004f06 	.word	0x20004f06
 8011a40:	20004efc 	.word	0x20004efc
 8011a44:	2000845c 	.word	0x2000845c
 8011a48:	20008460 	.word	0x20008460

08011a4c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d106      	bne.n	8011a68 <tcp_input_delayed_close+0x1c>
 8011a5a:	4b17      	ldr	r3, [pc, #92]	; (8011ab8 <tcp_input_delayed_close+0x6c>)
 8011a5c:	f240 225a 	movw	r2, #602	; 0x25a
 8011a60:	4916      	ldr	r1, [pc, #88]	; (8011abc <tcp_input_delayed_close+0x70>)
 8011a62:	4817      	ldr	r0, [pc, #92]	; (8011ac0 <tcp_input_delayed_close+0x74>)
 8011a64:	f007 f9d2 	bl	8018e0c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011a68:	4b16      	ldr	r3, [pc, #88]	; (8011ac4 <tcp_input_delayed_close+0x78>)
 8011a6a:	781b      	ldrb	r3, [r3, #0]
 8011a6c:	f003 0310 	and.w	r3, r3, #16
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d01c      	beq.n	8011aae <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	8b5b      	ldrh	r3, [r3, #26]
 8011a78:	f003 0310 	and.w	r3, r3, #16
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d10d      	bne.n	8011a9c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d008      	beq.n	8011a9c <tcp_input_delayed_close+0x50>
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	6912      	ldr	r2, [r2, #16]
 8011a94:	f06f 010e 	mvn.w	r1, #14
 8011a98:	4610      	mov	r0, r2
 8011a9a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011a9c:	6879      	ldr	r1, [r7, #4]
 8011a9e:	480a      	ldr	r0, [pc, #40]	; (8011ac8 <tcp_input_delayed_close+0x7c>)
 8011aa0:	f7ff fa52 	bl	8010f48 <tcp_pcb_remove>
    tcp_free(pcb);
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f7fd fd6d 	bl	800f584 <tcp_free>
    return 1;
 8011aaa:	2301      	movs	r3, #1
 8011aac:	e000      	b.n	8011ab0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011aae:	2300      	movs	r3, #0
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}
 8011ab8:	0801c024 	.word	0x0801c024
 8011abc:	0801c1f4 	.word	0x0801c1f4
 8011ac0:	0801c070 	.word	0x0801c070
 8011ac4:	20004f09 	.word	0x20004f09
 8011ac8:	2000bca8 	.word	0x2000bca8

08011acc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011acc:	b590      	push	{r4, r7, lr}
 8011ace:	b08b      	sub	sp, #44	; 0x2c
 8011ad0:	af04      	add	r7, sp, #16
 8011ad2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011ad4:	4b6f      	ldr	r3, [pc, #444]	; (8011c94 <tcp_listen_input+0x1c8>)
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	f003 0304 	and.w	r3, r3, #4
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	f040 80d2 	bne.w	8011c86 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d106      	bne.n	8011af6 <tcp_listen_input+0x2a>
 8011ae8:	4b6b      	ldr	r3, [pc, #428]	; (8011c98 <tcp_listen_input+0x1cc>)
 8011aea:	f240 2281 	movw	r2, #641	; 0x281
 8011aee:	496b      	ldr	r1, [pc, #428]	; (8011c9c <tcp_listen_input+0x1d0>)
 8011af0:	486b      	ldr	r0, [pc, #428]	; (8011ca0 <tcp_listen_input+0x1d4>)
 8011af2:	f007 f98b 	bl	8018e0c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011af6:	4b67      	ldr	r3, [pc, #412]	; (8011c94 <tcp_listen_input+0x1c8>)
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	f003 0310 	and.w	r3, r3, #16
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d019      	beq.n	8011b36 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b02:	4b68      	ldr	r3, [pc, #416]	; (8011ca4 <tcp_listen_input+0x1d8>)
 8011b04:	6819      	ldr	r1, [r3, #0]
 8011b06:	4b68      	ldr	r3, [pc, #416]	; (8011ca8 <tcp_listen_input+0x1dc>)
 8011b08:	881b      	ldrh	r3, [r3, #0]
 8011b0a:	461a      	mov	r2, r3
 8011b0c:	4b67      	ldr	r3, [pc, #412]	; (8011cac <tcp_listen_input+0x1e0>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b12:	4b67      	ldr	r3, [pc, #412]	; (8011cb0 <tcp_listen_input+0x1e4>)
 8011b14:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b16:	885b      	ldrh	r3, [r3, #2]
 8011b18:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011b1a:	4a65      	ldr	r2, [pc, #404]	; (8011cb0 <tcp_listen_input+0x1e4>)
 8011b1c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011b1e:	8812      	ldrh	r2, [r2, #0]
 8011b20:	b292      	uxth	r2, r2
 8011b22:	9202      	str	r2, [sp, #8]
 8011b24:	9301      	str	r3, [sp, #4]
 8011b26:	4b63      	ldr	r3, [pc, #396]	; (8011cb4 <tcp_listen_input+0x1e8>)
 8011b28:	9300      	str	r3, [sp, #0]
 8011b2a:	4b63      	ldr	r3, [pc, #396]	; (8011cb8 <tcp_listen_input+0x1ec>)
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f003 fbd6 	bl	80152e0 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011b34:	e0a9      	b.n	8011c8a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011b36:	4b57      	ldr	r3, [pc, #348]	; (8011c94 <tcp_listen_input+0x1c8>)
 8011b38:	781b      	ldrb	r3, [r3, #0]
 8011b3a:	f003 0302 	and.w	r3, r3, #2
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	f000 80a3 	beq.w	8011c8a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	7d5b      	ldrb	r3, [r3, #21]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f7ff f85b 	bl	8010c04 <tcp_alloc>
 8011b4e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011b50:	697b      	ldr	r3, [r7, #20]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d111      	bne.n	8011b7a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	699b      	ldr	r3, [r3, #24]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d00a      	beq.n	8011b74 <tcp_listen_input+0xa8>
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	699b      	ldr	r3, [r3, #24]
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	6910      	ldr	r0, [r2, #16]
 8011b66:	f04f 32ff 	mov.w	r2, #4294967295
 8011b6a:	2100      	movs	r1, #0
 8011b6c:	4798      	blx	r3
 8011b6e:	4603      	mov	r3, r0
 8011b70:	73bb      	strb	r3, [r7, #14]
      return;
 8011b72:	e08b      	b.n	8011c8c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011b74:	23f0      	movs	r3, #240	; 0xf0
 8011b76:	73bb      	strb	r3, [r7, #14]
      return;
 8011b78:	e088      	b.n	8011c8c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011b7a:	4b50      	ldr	r3, [pc, #320]	; (8011cbc <tcp_listen_input+0x1f0>)
 8011b7c:	695a      	ldr	r2, [r3, #20]
 8011b7e:	697b      	ldr	r3, [r7, #20]
 8011b80:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011b82:	4b4e      	ldr	r3, [pc, #312]	; (8011cbc <tcp_listen_input+0x1f0>)
 8011b84:	691a      	ldr	r2, [r3, #16]
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	8ada      	ldrh	r2, [r3, #22]
 8011b8e:	697b      	ldr	r3, [r7, #20]
 8011b90:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011b92:	4b47      	ldr	r3, [pc, #284]	; (8011cb0 <tcp_listen_input+0x1e4>)
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	881b      	ldrh	r3, [r3, #0]
 8011b98:	b29a      	uxth	r2, r3
 8011b9a:	697b      	ldr	r3, [r7, #20]
 8011b9c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	2203      	movs	r2, #3
 8011ba2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011ba4:	4b41      	ldr	r3, [pc, #260]	; (8011cac <tcp_listen_input+0x1e0>)
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	1c5a      	adds	r2, r3, #1
 8011baa:	697b      	ldr	r3, [r7, #20]
 8011bac:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011bb6:	6978      	ldr	r0, [r7, #20]
 8011bb8:	f7ff fa5a 	bl	8011070 <tcp_next_iss>
 8011bbc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	693a      	ldr	r2, [r7, #16]
 8011bc2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	693a      	ldr	r2, [r7, #16]
 8011bc8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	693a      	ldr	r2, [r7, #16]
 8011bce:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011bd0:	697b      	ldr	r3, [r7, #20]
 8011bd2:	693a      	ldr	r2, [r7, #16]
 8011bd4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011bd6:	4b35      	ldr	r3, [pc, #212]	; (8011cac <tcp_listen_input+0x1e0>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	1e5a      	subs	r2, r3, #1
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	691a      	ldr	r2, [r3, #16]
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	687a      	ldr	r2, [r7, #4]
 8011bec:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	7a5b      	ldrb	r3, [r3, #9]
 8011bf2:	f003 030c 	and.w	r3, r3, #12
 8011bf6:	b2da      	uxtb	r2, r3
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	7a1a      	ldrb	r2, [r3, #8]
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011c04:	4b2e      	ldr	r3, [pc, #184]	; (8011cc0 <tcp_listen_input+0x1f4>)
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	697b      	ldr	r3, [r7, #20]
 8011c0a:	60da      	str	r2, [r3, #12]
 8011c0c:	4a2c      	ldr	r2, [pc, #176]	; (8011cc0 <tcp_listen_input+0x1f4>)
 8011c0e:	697b      	ldr	r3, [r7, #20]
 8011c10:	6013      	str	r3, [r2, #0]
 8011c12:	f003 fd27 	bl	8015664 <tcp_timer_needed>
 8011c16:	4b2b      	ldr	r3, [pc, #172]	; (8011cc4 <tcp_listen_input+0x1f8>)
 8011c18:	2201      	movs	r2, #1
 8011c1a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011c1c:	6978      	ldr	r0, [r7, #20]
 8011c1e:	f001 fd8d 	bl	801373c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011c22:	4b23      	ldr	r3, [pc, #140]	; (8011cb0 <tcp_listen_input+0x1e4>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	89db      	ldrh	r3, [r3, #14]
 8011c28:	b29a      	uxth	r2, r3
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011c30:	697b      	ldr	r3, [r7, #20]
 8011c32:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	3304      	adds	r3, #4
 8011c44:	4618      	mov	r0, r3
 8011c46:	f005 fc4b 	bl	80174e0 <ip4_route>
 8011c4a:	4601      	mov	r1, r0
 8011c4c:	697b      	ldr	r3, [r7, #20]
 8011c4e:	3304      	adds	r3, #4
 8011c50:	461a      	mov	r2, r3
 8011c52:	4620      	mov	r0, r4
 8011c54:	f7ff fa32 	bl	80110bc <tcp_eff_send_mss_netif>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	461a      	mov	r2, r3
 8011c5c:	697b      	ldr	r3, [r7, #20]
 8011c5e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011c60:	2112      	movs	r1, #18
 8011c62:	6978      	ldr	r0, [r7, #20]
 8011c64:	f002 fc9a 	bl	801459c <tcp_enqueue_flags>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d004      	beq.n	8011c7e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011c74:	2100      	movs	r1, #0
 8011c76:	6978      	ldr	r0, [r7, #20]
 8011c78:	f7fd ff0a 	bl	800fa90 <tcp_abandon>
      return;
 8011c7c:	e006      	b.n	8011c8c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011c7e:	6978      	ldr	r0, [r7, #20]
 8011c80:	f002 fd7a 	bl	8014778 <tcp_output>
  return;
 8011c84:	e001      	b.n	8011c8a <tcp_listen_input+0x1be>
    return;
 8011c86:	bf00      	nop
 8011c88:	e000      	b.n	8011c8c <tcp_listen_input+0x1c0>
  return;
 8011c8a:	bf00      	nop
}
 8011c8c:	371c      	adds	r7, #28
 8011c8e:	46bd      	mov	sp, r7
 8011c90:	bd90      	pop	{r4, r7, pc}
 8011c92:	bf00      	nop
 8011c94:	20004f08 	.word	0x20004f08
 8011c98:	0801c024 	.word	0x0801c024
 8011c9c:	0801c21c 	.word	0x0801c21c
 8011ca0:	0801c070 	.word	0x0801c070
 8011ca4:	20004f00 	.word	0x20004f00
 8011ca8:	20004f06 	.word	0x20004f06
 8011cac:	20004efc 	.word	0x20004efc
 8011cb0:	20004eec 	.word	0x20004eec
 8011cb4:	2000845c 	.word	0x2000845c
 8011cb8:	20008460 	.word	0x20008460
 8011cbc:	2000844c 	.word	0x2000844c
 8011cc0:	2000bca8 	.word	0x2000bca8
 8011cc4:	2000bca4 	.word	0x2000bca4

08011cc8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b086      	sub	sp, #24
 8011ccc:	af04      	add	r7, sp, #16
 8011cce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011cd0:	4b2f      	ldr	r3, [pc, #188]	; (8011d90 <tcp_timewait_input+0xc8>)
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	f003 0304 	and.w	r3, r3, #4
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d153      	bne.n	8011d84 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d106      	bne.n	8011cf0 <tcp_timewait_input+0x28>
 8011ce2:	4b2c      	ldr	r3, [pc, #176]	; (8011d94 <tcp_timewait_input+0xcc>)
 8011ce4:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011ce8:	492b      	ldr	r1, [pc, #172]	; (8011d98 <tcp_timewait_input+0xd0>)
 8011cea:	482c      	ldr	r0, [pc, #176]	; (8011d9c <tcp_timewait_input+0xd4>)
 8011cec:	f007 f88e 	bl	8018e0c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011cf0:	4b27      	ldr	r3, [pc, #156]	; (8011d90 <tcp_timewait_input+0xc8>)
 8011cf2:	781b      	ldrb	r3, [r3, #0]
 8011cf4:	f003 0302 	and.w	r3, r3, #2
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d02a      	beq.n	8011d52 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011cfc:	4b28      	ldr	r3, [pc, #160]	; (8011da0 <tcp_timewait_input+0xd8>)
 8011cfe:	681a      	ldr	r2, [r3, #0]
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d04:	1ad3      	subs	r3, r2, r3
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	db2d      	blt.n	8011d66 <tcp_timewait_input+0x9e>
 8011d0a:	4b25      	ldr	r3, [pc, #148]	; (8011da0 <tcp_timewait_input+0xd8>)
 8011d0c:	681a      	ldr	r2, [r3, #0]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d12:	6879      	ldr	r1, [r7, #4]
 8011d14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011d16:	440b      	add	r3, r1
 8011d18:	1ad3      	subs	r3, r2, r3
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	dc23      	bgt.n	8011d66 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d1e:	4b21      	ldr	r3, [pc, #132]	; (8011da4 <tcp_timewait_input+0xdc>)
 8011d20:	6819      	ldr	r1, [r3, #0]
 8011d22:	4b21      	ldr	r3, [pc, #132]	; (8011da8 <tcp_timewait_input+0xe0>)
 8011d24:	881b      	ldrh	r3, [r3, #0]
 8011d26:	461a      	mov	r2, r3
 8011d28:	4b1d      	ldr	r3, [pc, #116]	; (8011da0 <tcp_timewait_input+0xd8>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d2e:	4b1f      	ldr	r3, [pc, #124]	; (8011dac <tcp_timewait_input+0xe4>)
 8011d30:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d32:	885b      	ldrh	r3, [r3, #2]
 8011d34:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011d36:	4a1d      	ldr	r2, [pc, #116]	; (8011dac <tcp_timewait_input+0xe4>)
 8011d38:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011d3a:	8812      	ldrh	r2, [r2, #0]
 8011d3c:	b292      	uxth	r2, r2
 8011d3e:	9202      	str	r2, [sp, #8]
 8011d40:	9301      	str	r3, [sp, #4]
 8011d42:	4b1b      	ldr	r3, [pc, #108]	; (8011db0 <tcp_timewait_input+0xe8>)
 8011d44:	9300      	str	r3, [sp, #0]
 8011d46:	4b1b      	ldr	r3, [pc, #108]	; (8011db4 <tcp_timewait_input+0xec>)
 8011d48:	4602      	mov	r2, r0
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f003 fac8 	bl	80152e0 <tcp_rst>
      return;
 8011d50:	e01b      	b.n	8011d8a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011d52:	4b0f      	ldr	r3, [pc, #60]	; (8011d90 <tcp_timewait_input+0xc8>)
 8011d54:	781b      	ldrb	r3, [r3, #0]
 8011d56:	f003 0301 	and.w	r3, r3, #1
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d003      	beq.n	8011d66 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011d5e:	4b16      	ldr	r3, [pc, #88]	; (8011db8 <tcp_timewait_input+0xf0>)
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011d66:	4b10      	ldr	r3, [pc, #64]	; (8011da8 <tcp_timewait_input+0xe0>)
 8011d68:	881b      	ldrh	r3, [r3, #0]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d00c      	beq.n	8011d88 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	8b5b      	ldrh	r3, [r3, #26]
 8011d72:	f043 0302 	orr.w	r3, r3, #2
 8011d76:	b29a      	uxth	r2, r3
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011d7c:	6878      	ldr	r0, [r7, #4]
 8011d7e:	f002 fcfb 	bl	8014778 <tcp_output>
  }
  return;
 8011d82:	e001      	b.n	8011d88 <tcp_timewait_input+0xc0>
    return;
 8011d84:	bf00      	nop
 8011d86:	e000      	b.n	8011d8a <tcp_timewait_input+0xc2>
  return;
 8011d88:	bf00      	nop
}
 8011d8a:	3708      	adds	r7, #8
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}
 8011d90:	20004f08 	.word	0x20004f08
 8011d94:	0801c024 	.word	0x0801c024
 8011d98:	0801c23c 	.word	0x0801c23c
 8011d9c:	0801c070 	.word	0x0801c070
 8011da0:	20004efc 	.word	0x20004efc
 8011da4:	20004f00 	.word	0x20004f00
 8011da8:	20004f06 	.word	0x20004f06
 8011dac:	20004eec 	.word	0x20004eec
 8011db0:	2000845c 	.word	0x2000845c
 8011db4:	20008460 	.word	0x20008460
 8011db8:	2000bcac 	.word	0x2000bcac

08011dbc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011dbc:	b590      	push	{r4, r7, lr}
 8011dbe:	b08d      	sub	sp, #52	; 0x34
 8011dc0:	af04      	add	r7, sp, #16
 8011dc2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011dc8:	2300      	movs	r3, #0
 8011dca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d106      	bne.n	8011de0 <tcp_process+0x24>
 8011dd2:	4ba5      	ldr	r3, [pc, #660]	; (8012068 <tcp_process+0x2ac>)
 8011dd4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011dd8:	49a4      	ldr	r1, [pc, #656]	; (801206c <tcp_process+0x2b0>)
 8011dda:	48a5      	ldr	r0, [pc, #660]	; (8012070 <tcp_process+0x2b4>)
 8011ddc:	f007 f816 	bl	8018e0c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011de0:	4ba4      	ldr	r3, [pc, #656]	; (8012074 <tcp_process+0x2b8>)
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	f003 0304 	and.w	r3, r3, #4
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d04e      	beq.n	8011e8a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	7d1b      	ldrb	r3, [r3, #20]
 8011df0:	2b02      	cmp	r3, #2
 8011df2:	d108      	bne.n	8011e06 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011df8:	4b9f      	ldr	r3, [pc, #636]	; (8012078 <tcp_process+0x2bc>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	429a      	cmp	r2, r3
 8011dfe:	d123      	bne.n	8011e48 <tcp_process+0x8c>
        acceptable = 1;
 8011e00:	2301      	movs	r3, #1
 8011e02:	76fb      	strb	r3, [r7, #27]
 8011e04:	e020      	b.n	8011e48 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e0a:	4b9c      	ldr	r3, [pc, #624]	; (801207c <tcp_process+0x2c0>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	429a      	cmp	r2, r3
 8011e10:	d102      	bne.n	8011e18 <tcp_process+0x5c>
        acceptable = 1;
 8011e12:	2301      	movs	r3, #1
 8011e14:	76fb      	strb	r3, [r7, #27]
 8011e16:	e017      	b.n	8011e48 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011e18:	4b98      	ldr	r3, [pc, #608]	; (801207c <tcp_process+0x2c0>)
 8011e1a:	681a      	ldr	r2, [r3, #0]
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e20:	1ad3      	subs	r3, r2, r3
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	db10      	blt.n	8011e48 <tcp_process+0x8c>
 8011e26:	4b95      	ldr	r3, [pc, #596]	; (801207c <tcp_process+0x2c0>)
 8011e28:	681a      	ldr	r2, [r3, #0]
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e2e:	6879      	ldr	r1, [r7, #4]
 8011e30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e32:	440b      	add	r3, r1
 8011e34:	1ad3      	subs	r3, r2, r3
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	dc06      	bgt.n	8011e48 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	8b5b      	ldrh	r3, [r3, #26]
 8011e3e:	f043 0302 	orr.w	r3, r3, #2
 8011e42:	b29a      	uxth	r2, r3
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011e48:	7efb      	ldrb	r3, [r7, #27]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d01b      	beq.n	8011e86 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	7d1b      	ldrb	r3, [r3, #20]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d106      	bne.n	8011e64 <tcp_process+0xa8>
 8011e56:	4b84      	ldr	r3, [pc, #528]	; (8012068 <tcp_process+0x2ac>)
 8011e58:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011e5c:	4988      	ldr	r1, [pc, #544]	; (8012080 <tcp_process+0x2c4>)
 8011e5e:	4884      	ldr	r0, [pc, #528]	; (8012070 <tcp_process+0x2b4>)
 8011e60:	f006 ffd4 	bl	8018e0c <iprintf>
      recv_flags |= TF_RESET;
 8011e64:	4b87      	ldr	r3, [pc, #540]	; (8012084 <tcp_process+0x2c8>)
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	f043 0308 	orr.w	r3, r3, #8
 8011e6c:	b2da      	uxtb	r2, r3
 8011e6e:	4b85      	ldr	r3, [pc, #532]	; (8012084 <tcp_process+0x2c8>)
 8011e70:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	8b5b      	ldrh	r3, [r3, #26]
 8011e76:	f023 0301 	bic.w	r3, r3, #1
 8011e7a:	b29a      	uxth	r2, r3
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011e80:	f06f 030d 	mvn.w	r3, #13
 8011e84:	e37a      	b.n	801257c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011e86:	2300      	movs	r3, #0
 8011e88:	e378      	b.n	801257c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011e8a:	4b7a      	ldr	r3, [pc, #488]	; (8012074 <tcp_process+0x2b8>)
 8011e8c:	781b      	ldrb	r3, [r3, #0]
 8011e8e:	f003 0302 	and.w	r3, r3, #2
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d010      	beq.n	8011eb8 <tcp_process+0xfc>
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	7d1b      	ldrb	r3, [r3, #20]
 8011e9a:	2b02      	cmp	r3, #2
 8011e9c:	d00c      	beq.n	8011eb8 <tcp_process+0xfc>
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	7d1b      	ldrb	r3, [r3, #20]
 8011ea2:	2b03      	cmp	r3, #3
 8011ea4:	d008      	beq.n	8011eb8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	8b5b      	ldrh	r3, [r3, #26]
 8011eaa:	f043 0302 	orr.w	r3, r3, #2
 8011eae:	b29a      	uxth	r2, r3
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	e361      	b.n	801257c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	8b5b      	ldrh	r3, [r3, #26]
 8011ebc:	f003 0310 	and.w	r3, r3, #16
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d103      	bne.n	8011ecc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011ec4:	4b70      	ldr	r3, [pc, #448]	; (8012088 <tcp_process+0x2cc>)
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	2200      	movs	r2, #0
 8011ed0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f001 fc2d 	bl	801373c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	7d1b      	ldrb	r3, [r3, #20]
 8011ee6:	3b02      	subs	r3, #2
 8011ee8:	2b07      	cmp	r3, #7
 8011eea:	f200 8337 	bhi.w	801255c <tcp_process+0x7a0>
 8011eee:	a201      	add	r2, pc, #4	; (adr r2, 8011ef4 <tcp_process+0x138>)
 8011ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ef4:	08011f15 	.word	0x08011f15
 8011ef8:	08012145 	.word	0x08012145
 8011efc:	080122bd 	.word	0x080122bd
 8011f00:	080122e7 	.word	0x080122e7
 8011f04:	0801240b 	.word	0x0801240b
 8011f08:	080122bd 	.word	0x080122bd
 8011f0c:	08012497 	.word	0x08012497
 8011f10:	08012527 	.word	0x08012527
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011f14:	4b57      	ldr	r3, [pc, #348]	; (8012074 <tcp_process+0x2b8>)
 8011f16:	781b      	ldrb	r3, [r3, #0]
 8011f18:	f003 0310 	and.w	r3, r3, #16
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	f000 80e4 	beq.w	80120ea <tcp_process+0x32e>
 8011f22:	4b54      	ldr	r3, [pc, #336]	; (8012074 <tcp_process+0x2b8>)
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	f003 0302 	and.w	r3, r3, #2
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	f000 80dd 	beq.w	80120ea <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011f34:	1c5a      	adds	r2, r3, #1
 8011f36:	4b50      	ldr	r3, [pc, #320]	; (8012078 <tcp_process+0x2bc>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	f040 80d5 	bne.w	80120ea <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011f40:	4b4e      	ldr	r3, [pc, #312]	; (801207c <tcp_process+0x2c0>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	1c5a      	adds	r2, r3, #1
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011f52:	4b49      	ldr	r3, [pc, #292]	; (8012078 <tcp_process+0x2bc>)
 8011f54:	681a      	ldr	r2, [r3, #0]
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011f5a:	4b4c      	ldr	r3, [pc, #304]	; (801208c <tcp_process+0x2d0>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	89db      	ldrh	r3, [r3, #14]
 8011f60:	b29a      	uxth	r2, r3
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011f74:	4b41      	ldr	r3, [pc, #260]	; (801207c <tcp_process+0x2c0>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	1e5a      	subs	r2, r3, #1
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2204      	movs	r2, #4
 8011f82:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	3304      	adds	r3, #4
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f005 faa7 	bl	80174e0 <ip4_route>
 8011f92:	4601      	mov	r1, r0
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	3304      	adds	r3, #4
 8011f98:	461a      	mov	r2, r3
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	f7ff f88e 	bl	80110bc <tcp_eff_send_mss_netif>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fac:	009a      	lsls	r2, r3, #2
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fb2:	005b      	lsls	r3, r3, #1
 8011fb4:	f241 111c 	movw	r1, #4380	; 0x111c
 8011fb8:	428b      	cmp	r3, r1
 8011fba:	bf38      	it	cc
 8011fbc:	460b      	movcc	r3, r1
 8011fbe:	429a      	cmp	r2, r3
 8011fc0:	d204      	bcs.n	8011fcc <tcp_process+0x210>
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fc6:	009b      	lsls	r3, r3, #2
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	e00d      	b.n	8011fe8 <tcp_process+0x22c>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fd0:	005b      	lsls	r3, r3, #1
 8011fd2:	f241 121c 	movw	r2, #4380	; 0x111c
 8011fd6:	4293      	cmp	r3, r2
 8011fd8:	d904      	bls.n	8011fe4 <tcp_process+0x228>
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011fde:	005b      	lsls	r3, r3, #1
 8011fe0:	b29b      	uxth	r3, r3
 8011fe2:	e001      	b.n	8011fe8 <tcp_process+0x22c>
 8011fe4:	f241 131c 	movw	r3, #4380	; 0x111c
 8011fe8:	687a      	ldr	r2, [r7, #4]
 8011fea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d106      	bne.n	8012006 <tcp_process+0x24a>
 8011ff8:	4b1b      	ldr	r3, [pc, #108]	; (8012068 <tcp_process+0x2ac>)
 8011ffa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011ffe:	4924      	ldr	r1, [pc, #144]	; (8012090 <tcp_process+0x2d4>)
 8012000:	481b      	ldr	r0, [pc, #108]	; (8012070 <tcp_process+0x2b4>)
 8012002:	f006 ff03 	bl	8018e0c <iprintf>
        --pcb->snd_queuelen;
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801200c:	3b01      	subs	r3, #1
 801200e:	b29a      	uxth	r2, r3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801201a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801201c:	69fb      	ldr	r3, [r7, #28]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d111      	bne.n	8012046 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012026:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8012028:	69fb      	ldr	r3, [r7, #28]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d106      	bne.n	801203c <tcp_process+0x280>
 801202e:	4b0e      	ldr	r3, [pc, #56]	; (8012068 <tcp_process+0x2ac>)
 8012030:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012034:	4917      	ldr	r1, [pc, #92]	; (8012094 <tcp_process+0x2d8>)
 8012036:	480e      	ldr	r0, [pc, #56]	; (8012070 <tcp_process+0x2b4>)
 8012038:	f006 fee8 	bl	8018e0c <iprintf>
          pcb->unsent = rseg->next;
 801203c:	69fb      	ldr	r3, [r7, #28]
 801203e:	681a      	ldr	r2, [r3, #0]
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	66da      	str	r2, [r3, #108]	; 0x6c
 8012044:	e003      	b.n	801204e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8012046:	69fb      	ldr	r3, [r7, #28]
 8012048:	681a      	ldr	r2, [r3, #0]
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801204e:	69f8      	ldr	r0, [r7, #28]
 8012050:	f7fe fc6f 	bl	8010932 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012058:	2b00      	cmp	r3, #0
 801205a:	d11d      	bne.n	8012098 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012062:	861a      	strh	r2, [r3, #48]	; 0x30
 8012064:	e01f      	b.n	80120a6 <tcp_process+0x2ea>
 8012066:	bf00      	nop
 8012068:	0801c024 	.word	0x0801c024
 801206c:	0801c25c 	.word	0x0801c25c
 8012070:	0801c070 	.word	0x0801c070
 8012074:	20004f08 	.word	0x20004f08
 8012078:	20004f00 	.word	0x20004f00
 801207c:	20004efc 	.word	0x20004efc
 8012080:	0801c278 	.word	0x0801c278
 8012084:	20004f09 	.word	0x20004f09
 8012088:	2000bcac 	.word	0x2000bcac
 801208c:	20004eec 	.word	0x20004eec
 8012090:	0801c298 	.word	0x0801c298
 8012094:	0801c2b0 	.word	0x0801c2b0
        } else {
          pcb->rtime = 0;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	2200      	movs	r2, #0
 801209c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	2200      	movs	r2, #0
 80120a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d00a      	beq.n	80120c6 <tcp_process+0x30a>
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	6910      	ldr	r0, [r2, #16]
 80120ba:	2200      	movs	r2, #0
 80120bc:	6879      	ldr	r1, [r7, #4]
 80120be:	4798      	blx	r3
 80120c0:	4603      	mov	r3, r0
 80120c2:	76bb      	strb	r3, [r7, #26]
 80120c4:	e001      	b.n	80120ca <tcp_process+0x30e>
 80120c6:	2300      	movs	r3, #0
 80120c8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80120ca:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80120ce:	f113 0f0d 	cmn.w	r3, #13
 80120d2:	d102      	bne.n	80120da <tcp_process+0x31e>
          return ERR_ABRT;
 80120d4:	f06f 030c 	mvn.w	r3, #12
 80120d8:	e250      	b.n	801257c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	8b5b      	ldrh	r3, [r3, #26]
 80120de:	f043 0302 	orr.w	r3, r3, #2
 80120e2:	b29a      	uxth	r2, r3
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80120e8:	e23a      	b.n	8012560 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80120ea:	4b9d      	ldr	r3, [pc, #628]	; (8012360 <tcp_process+0x5a4>)
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	f003 0310 	and.w	r3, r3, #16
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	f000 8234 	beq.w	8012560 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120f8:	4b9a      	ldr	r3, [pc, #616]	; (8012364 <tcp_process+0x5a8>)
 80120fa:	6819      	ldr	r1, [r3, #0]
 80120fc:	4b9a      	ldr	r3, [pc, #616]	; (8012368 <tcp_process+0x5ac>)
 80120fe:	881b      	ldrh	r3, [r3, #0]
 8012100:	461a      	mov	r2, r3
 8012102:	4b9a      	ldr	r3, [pc, #616]	; (801236c <tcp_process+0x5b0>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012108:	4b99      	ldr	r3, [pc, #612]	; (8012370 <tcp_process+0x5b4>)
 801210a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801210c:	885b      	ldrh	r3, [r3, #2]
 801210e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012110:	4a97      	ldr	r2, [pc, #604]	; (8012370 <tcp_process+0x5b4>)
 8012112:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012114:	8812      	ldrh	r2, [r2, #0]
 8012116:	b292      	uxth	r2, r2
 8012118:	9202      	str	r2, [sp, #8]
 801211a:	9301      	str	r3, [sp, #4]
 801211c:	4b95      	ldr	r3, [pc, #596]	; (8012374 <tcp_process+0x5b8>)
 801211e:	9300      	str	r3, [sp, #0]
 8012120:	4b95      	ldr	r3, [pc, #596]	; (8012378 <tcp_process+0x5bc>)
 8012122:	4602      	mov	r2, r0
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f003 f8db 	bl	80152e0 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012130:	2b05      	cmp	r3, #5
 8012132:	f200 8215 	bhi.w	8012560 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2200      	movs	r2, #0
 801213a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f002 fea5 	bl	8014e8c <tcp_rexmit_rto>
      break;
 8012142:	e20d      	b.n	8012560 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012144:	4b86      	ldr	r3, [pc, #536]	; (8012360 <tcp_process+0x5a4>)
 8012146:	781b      	ldrb	r3, [r3, #0]
 8012148:	f003 0310 	and.w	r3, r3, #16
 801214c:	2b00      	cmp	r3, #0
 801214e:	f000 80a1 	beq.w	8012294 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012152:	4b84      	ldr	r3, [pc, #528]	; (8012364 <tcp_process+0x5a8>)
 8012154:	681a      	ldr	r2, [r3, #0]
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801215a:	1ad3      	subs	r3, r2, r3
 801215c:	3b01      	subs	r3, #1
 801215e:	2b00      	cmp	r3, #0
 8012160:	db7e      	blt.n	8012260 <tcp_process+0x4a4>
 8012162:	4b80      	ldr	r3, [pc, #512]	; (8012364 <tcp_process+0x5a8>)
 8012164:	681a      	ldr	r2, [r3, #0]
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801216a:	1ad3      	subs	r3, r2, r3
 801216c:	2b00      	cmp	r3, #0
 801216e:	dc77      	bgt.n	8012260 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2204      	movs	r2, #4
 8012174:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801217a:	2b00      	cmp	r3, #0
 801217c:	d102      	bne.n	8012184 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801217e:	23fa      	movs	r3, #250	; 0xfa
 8012180:	76bb      	strb	r3, [r7, #26]
 8012182:	e01d      	b.n	80121c0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012188:	699b      	ldr	r3, [r3, #24]
 801218a:	2b00      	cmp	r3, #0
 801218c:	d106      	bne.n	801219c <tcp_process+0x3e0>
 801218e:	4b7b      	ldr	r3, [pc, #492]	; (801237c <tcp_process+0x5c0>)
 8012190:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012194:	497a      	ldr	r1, [pc, #488]	; (8012380 <tcp_process+0x5c4>)
 8012196:	487b      	ldr	r0, [pc, #492]	; (8012384 <tcp_process+0x5c8>)
 8012198:	f006 fe38 	bl	8018e0c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121a0:	699b      	ldr	r3, [r3, #24]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d00a      	beq.n	80121bc <tcp_process+0x400>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80121aa:	699b      	ldr	r3, [r3, #24]
 80121ac:	687a      	ldr	r2, [r7, #4]
 80121ae:	6910      	ldr	r0, [r2, #16]
 80121b0:	2200      	movs	r2, #0
 80121b2:	6879      	ldr	r1, [r7, #4]
 80121b4:	4798      	blx	r3
 80121b6:	4603      	mov	r3, r0
 80121b8:	76bb      	strb	r3, [r7, #26]
 80121ba:	e001      	b.n	80121c0 <tcp_process+0x404>
 80121bc:	23f0      	movs	r3, #240	; 0xf0
 80121be:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80121c0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d00a      	beq.n	80121de <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80121c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80121cc:	f113 0f0d 	cmn.w	r3, #13
 80121d0:	d002      	beq.n	80121d8 <tcp_process+0x41c>
              tcp_abort(pcb);
 80121d2:	6878      	ldr	r0, [r7, #4]
 80121d4:	f7fd fd1a 	bl	800fc0c <tcp_abort>
            }
            return ERR_ABRT;
 80121d8:	f06f 030c 	mvn.w	r3, #12
 80121dc:	e1ce      	b.n	801257c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f000 fae0 	bl	80127a4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80121e4:	4b68      	ldr	r3, [pc, #416]	; (8012388 <tcp_process+0x5cc>)
 80121e6:	881b      	ldrh	r3, [r3, #0]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d005      	beq.n	80121f8 <tcp_process+0x43c>
            recv_acked--;
 80121ec:	4b66      	ldr	r3, [pc, #408]	; (8012388 <tcp_process+0x5cc>)
 80121ee:	881b      	ldrh	r3, [r3, #0]
 80121f0:	3b01      	subs	r3, #1
 80121f2:	b29a      	uxth	r2, r3
 80121f4:	4b64      	ldr	r3, [pc, #400]	; (8012388 <tcp_process+0x5cc>)
 80121f6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80121fc:	009a      	lsls	r2, r3, #2
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012202:	005b      	lsls	r3, r3, #1
 8012204:	f241 111c 	movw	r1, #4380	; 0x111c
 8012208:	428b      	cmp	r3, r1
 801220a:	bf38      	it	cc
 801220c:	460b      	movcc	r3, r1
 801220e:	429a      	cmp	r2, r3
 8012210:	d204      	bcs.n	801221c <tcp_process+0x460>
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012216:	009b      	lsls	r3, r3, #2
 8012218:	b29b      	uxth	r3, r3
 801221a:	e00d      	b.n	8012238 <tcp_process+0x47c>
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012220:	005b      	lsls	r3, r3, #1
 8012222:	f241 121c 	movw	r2, #4380	; 0x111c
 8012226:	4293      	cmp	r3, r2
 8012228:	d904      	bls.n	8012234 <tcp_process+0x478>
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801222e:	005b      	lsls	r3, r3, #1
 8012230:	b29b      	uxth	r3, r3
 8012232:	e001      	b.n	8012238 <tcp_process+0x47c>
 8012234:	f241 131c 	movw	r3, #4380	; 0x111c
 8012238:	687a      	ldr	r2, [r7, #4]
 801223a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801223e:	4b53      	ldr	r3, [pc, #332]	; (801238c <tcp_process+0x5d0>)
 8012240:	781b      	ldrb	r3, [r3, #0]
 8012242:	f003 0320 	and.w	r3, r3, #32
 8012246:	2b00      	cmp	r3, #0
 8012248:	d037      	beq.n	80122ba <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	8b5b      	ldrh	r3, [r3, #26]
 801224e:	f043 0302 	orr.w	r3, r3, #2
 8012252:	b29a      	uxth	r2, r3
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	2207      	movs	r2, #7
 801225c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801225e:	e02c      	b.n	80122ba <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012260:	4b40      	ldr	r3, [pc, #256]	; (8012364 <tcp_process+0x5a8>)
 8012262:	6819      	ldr	r1, [r3, #0]
 8012264:	4b40      	ldr	r3, [pc, #256]	; (8012368 <tcp_process+0x5ac>)
 8012266:	881b      	ldrh	r3, [r3, #0]
 8012268:	461a      	mov	r2, r3
 801226a:	4b40      	ldr	r3, [pc, #256]	; (801236c <tcp_process+0x5b0>)
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012270:	4b3f      	ldr	r3, [pc, #252]	; (8012370 <tcp_process+0x5b4>)
 8012272:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012274:	885b      	ldrh	r3, [r3, #2]
 8012276:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012278:	4a3d      	ldr	r2, [pc, #244]	; (8012370 <tcp_process+0x5b4>)
 801227a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801227c:	8812      	ldrh	r2, [r2, #0]
 801227e:	b292      	uxth	r2, r2
 8012280:	9202      	str	r2, [sp, #8]
 8012282:	9301      	str	r3, [sp, #4]
 8012284:	4b3b      	ldr	r3, [pc, #236]	; (8012374 <tcp_process+0x5b8>)
 8012286:	9300      	str	r3, [sp, #0]
 8012288:	4b3b      	ldr	r3, [pc, #236]	; (8012378 <tcp_process+0x5bc>)
 801228a:	4602      	mov	r2, r0
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f003 f827 	bl	80152e0 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012292:	e167      	b.n	8012564 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012294:	4b32      	ldr	r3, [pc, #200]	; (8012360 <tcp_process+0x5a4>)
 8012296:	781b      	ldrb	r3, [r3, #0]
 8012298:	f003 0302 	and.w	r3, r3, #2
 801229c:	2b00      	cmp	r3, #0
 801229e:	f000 8161 	beq.w	8012564 <tcp_process+0x7a8>
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122a6:	1e5a      	subs	r2, r3, #1
 80122a8:	4b30      	ldr	r3, [pc, #192]	; (801236c <tcp_process+0x5b0>)
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	f040 8159 	bne.w	8012564 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80122b2:	6878      	ldr	r0, [r7, #4]
 80122b4:	f002 fe0c 	bl	8014ed0 <tcp_rexmit>
      break;
 80122b8:	e154      	b.n	8012564 <tcp_process+0x7a8>
 80122ba:	e153      	b.n	8012564 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f000 fa71 	bl	80127a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80122c2:	4b32      	ldr	r3, [pc, #200]	; (801238c <tcp_process+0x5d0>)
 80122c4:	781b      	ldrb	r3, [r3, #0]
 80122c6:	f003 0320 	and.w	r3, r3, #32
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	f000 814c 	beq.w	8012568 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	8b5b      	ldrh	r3, [r3, #26]
 80122d4:	f043 0302 	orr.w	r3, r3, #2
 80122d8:	b29a      	uxth	r2, r3
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	2207      	movs	r2, #7
 80122e2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80122e4:	e140      	b.n	8012568 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 fa5c 	bl	80127a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80122ec:	4b27      	ldr	r3, [pc, #156]	; (801238c <tcp_process+0x5d0>)
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	f003 0320 	and.w	r3, r3, #32
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d071      	beq.n	80123dc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80122f8:	4b19      	ldr	r3, [pc, #100]	; (8012360 <tcp_process+0x5a4>)
 80122fa:	781b      	ldrb	r3, [r3, #0]
 80122fc:	f003 0310 	and.w	r3, r3, #16
 8012300:	2b00      	cmp	r3, #0
 8012302:	d060      	beq.n	80123c6 <tcp_process+0x60a>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012308:	4b16      	ldr	r3, [pc, #88]	; (8012364 <tcp_process+0x5a8>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	429a      	cmp	r2, r3
 801230e:	d15a      	bne.n	80123c6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012314:	2b00      	cmp	r3, #0
 8012316:	d156      	bne.n	80123c6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	8b5b      	ldrh	r3, [r3, #26]
 801231c:	f043 0302 	orr.w	r3, r3, #2
 8012320:	b29a      	uxth	r2, r3
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f7fe fdbe 	bl	8010ea8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801232c:	4b18      	ldr	r3, [pc, #96]	; (8012390 <tcp_process+0x5d4>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	687a      	ldr	r2, [r7, #4]
 8012332:	429a      	cmp	r2, r3
 8012334:	d105      	bne.n	8012342 <tcp_process+0x586>
 8012336:	4b16      	ldr	r3, [pc, #88]	; (8012390 <tcp_process+0x5d4>)
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	68db      	ldr	r3, [r3, #12]
 801233c:	4a14      	ldr	r2, [pc, #80]	; (8012390 <tcp_process+0x5d4>)
 801233e:	6013      	str	r3, [r2, #0]
 8012340:	e02e      	b.n	80123a0 <tcp_process+0x5e4>
 8012342:	4b13      	ldr	r3, [pc, #76]	; (8012390 <tcp_process+0x5d4>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	617b      	str	r3, [r7, #20]
 8012348:	e027      	b.n	801239a <tcp_process+0x5de>
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	68db      	ldr	r3, [r3, #12]
 801234e:	687a      	ldr	r2, [r7, #4]
 8012350:	429a      	cmp	r2, r3
 8012352:	d11f      	bne.n	8012394 <tcp_process+0x5d8>
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	68da      	ldr	r2, [r3, #12]
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	60da      	str	r2, [r3, #12]
 801235c:	e020      	b.n	80123a0 <tcp_process+0x5e4>
 801235e:	bf00      	nop
 8012360:	20004f08 	.word	0x20004f08
 8012364:	20004f00 	.word	0x20004f00
 8012368:	20004f06 	.word	0x20004f06
 801236c:	20004efc 	.word	0x20004efc
 8012370:	20004eec 	.word	0x20004eec
 8012374:	2000845c 	.word	0x2000845c
 8012378:	20008460 	.word	0x20008460
 801237c:	0801c024 	.word	0x0801c024
 8012380:	0801c2c4 	.word	0x0801c2c4
 8012384:	0801c070 	.word	0x0801c070
 8012388:	20004f04 	.word	0x20004f04
 801238c:	20004f09 	.word	0x20004f09
 8012390:	2000bca8 	.word	0x2000bca8
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	68db      	ldr	r3, [r3, #12]
 8012398:	617b      	str	r3, [r7, #20]
 801239a:	697b      	ldr	r3, [r7, #20]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1d4      	bne.n	801234a <tcp_process+0x58e>
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	2200      	movs	r2, #0
 80123a4:	60da      	str	r2, [r3, #12]
 80123a6:	4b77      	ldr	r3, [pc, #476]	; (8012584 <tcp_process+0x7c8>)
 80123a8:	2201      	movs	r2, #1
 80123aa:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	220a      	movs	r2, #10
 80123b0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80123b2:	4b75      	ldr	r3, [pc, #468]	; (8012588 <tcp_process+0x7cc>)
 80123b4:	681a      	ldr	r2, [r3, #0]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	60da      	str	r2, [r3, #12]
 80123ba:	4a73      	ldr	r2, [pc, #460]	; (8012588 <tcp_process+0x7cc>)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6013      	str	r3, [r2, #0]
 80123c0:	f003 f950 	bl	8015664 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80123c4:	e0d2      	b.n	801256c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	8b5b      	ldrh	r3, [r3, #26]
 80123ca:	f043 0302 	orr.w	r3, r3, #2
 80123ce:	b29a      	uxth	r2, r3
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	2208      	movs	r2, #8
 80123d8:	751a      	strb	r2, [r3, #20]
      break;
 80123da:	e0c7      	b.n	801256c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80123dc:	4b6b      	ldr	r3, [pc, #428]	; (801258c <tcp_process+0x7d0>)
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	f003 0310 	and.w	r3, r3, #16
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	f000 80c1 	beq.w	801256c <tcp_process+0x7b0>
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80123ee:	4b68      	ldr	r3, [pc, #416]	; (8012590 <tcp_process+0x7d4>)
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	f040 80ba 	bne.w	801256c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	f040 80b5 	bne.w	801256c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	2206      	movs	r2, #6
 8012406:	751a      	strb	r2, [r3, #20]
      break;
 8012408:	e0b0      	b.n	801256c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f000 f9ca 	bl	80127a4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012410:	4b60      	ldr	r3, [pc, #384]	; (8012594 <tcp_process+0x7d8>)
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	f003 0320 	and.w	r3, r3, #32
 8012418:	2b00      	cmp	r3, #0
 801241a:	f000 80a9 	beq.w	8012570 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	8b5b      	ldrh	r3, [r3, #26]
 8012422:	f043 0302 	orr.w	r3, r3, #2
 8012426:	b29a      	uxth	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f7fe fd3b 	bl	8010ea8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012432:	4b59      	ldr	r3, [pc, #356]	; (8012598 <tcp_process+0x7dc>)
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	687a      	ldr	r2, [r7, #4]
 8012438:	429a      	cmp	r2, r3
 801243a:	d105      	bne.n	8012448 <tcp_process+0x68c>
 801243c:	4b56      	ldr	r3, [pc, #344]	; (8012598 <tcp_process+0x7dc>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	68db      	ldr	r3, [r3, #12]
 8012442:	4a55      	ldr	r2, [pc, #340]	; (8012598 <tcp_process+0x7dc>)
 8012444:	6013      	str	r3, [r2, #0]
 8012446:	e013      	b.n	8012470 <tcp_process+0x6b4>
 8012448:	4b53      	ldr	r3, [pc, #332]	; (8012598 <tcp_process+0x7dc>)
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	613b      	str	r3, [r7, #16]
 801244e:	e00c      	b.n	801246a <tcp_process+0x6ae>
 8012450:	693b      	ldr	r3, [r7, #16]
 8012452:	68db      	ldr	r3, [r3, #12]
 8012454:	687a      	ldr	r2, [r7, #4]
 8012456:	429a      	cmp	r2, r3
 8012458:	d104      	bne.n	8012464 <tcp_process+0x6a8>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	68da      	ldr	r2, [r3, #12]
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	60da      	str	r2, [r3, #12]
 8012462:	e005      	b.n	8012470 <tcp_process+0x6b4>
 8012464:	693b      	ldr	r3, [r7, #16]
 8012466:	68db      	ldr	r3, [r3, #12]
 8012468:	613b      	str	r3, [r7, #16]
 801246a:	693b      	ldr	r3, [r7, #16]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d1ef      	bne.n	8012450 <tcp_process+0x694>
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	60da      	str	r2, [r3, #12]
 8012476:	4b43      	ldr	r3, [pc, #268]	; (8012584 <tcp_process+0x7c8>)
 8012478:	2201      	movs	r2, #1
 801247a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	220a      	movs	r2, #10
 8012480:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012482:	4b41      	ldr	r3, [pc, #260]	; (8012588 <tcp_process+0x7cc>)
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	60da      	str	r2, [r3, #12]
 801248a:	4a3f      	ldr	r2, [pc, #252]	; (8012588 <tcp_process+0x7cc>)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	6013      	str	r3, [r2, #0]
 8012490:	f003 f8e8 	bl	8015664 <tcp_timer_needed>
      }
      break;
 8012494:	e06c      	b.n	8012570 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f000 f984 	bl	80127a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801249c:	4b3b      	ldr	r3, [pc, #236]	; (801258c <tcp_process+0x7d0>)
 801249e:	781b      	ldrb	r3, [r3, #0]
 80124a0:	f003 0310 	and.w	r3, r3, #16
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d065      	beq.n	8012574 <tcp_process+0x7b8>
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124ac:	4b38      	ldr	r3, [pc, #224]	; (8012590 <tcp_process+0x7d4>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d15f      	bne.n	8012574 <tcp_process+0x7b8>
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d15b      	bne.n	8012574 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f7fe fcf3 	bl	8010ea8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80124c2:	4b35      	ldr	r3, [pc, #212]	; (8012598 <tcp_process+0x7dc>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	687a      	ldr	r2, [r7, #4]
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d105      	bne.n	80124d8 <tcp_process+0x71c>
 80124cc:	4b32      	ldr	r3, [pc, #200]	; (8012598 <tcp_process+0x7dc>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	68db      	ldr	r3, [r3, #12]
 80124d2:	4a31      	ldr	r2, [pc, #196]	; (8012598 <tcp_process+0x7dc>)
 80124d4:	6013      	str	r3, [r2, #0]
 80124d6:	e013      	b.n	8012500 <tcp_process+0x744>
 80124d8:	4b2f      	ldr	r3, [pc, #188]	; (8012598 <tcp_process+0x7dc>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	60fb      	str	r3, [r7, #12]
 80124de:	e00c      	b.n	80124fa <tcp_process+0x73e>
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	68db      	ldr	r3, [r3, #12]
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d104      	bne.n	80124f4 <tcp_process+0x738>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	68da      	ldr	r2, [r3, #12]
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	60da      	str	r2, [r3, #12]
 80124f2:	e005      	b.n	8012500 <tcp_process+0x744>
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	68db      	ldr	r3, [r3, #12]
 80124f8:	60fb      	str	r3, [r7, #12]
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d1ef      	bne.n	80124e0 <tcp_process+0x724>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	2200      	movs	r2, #0
 8012504:	60da      	str	r2, [r3, #12]
 8012506:	4b1f      	ldr	r3, [pc, #124]	; (8012584 <tcp_process+0x7c8>)
 8012508:	2201      	movs	r2, #1
 801250a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	220a      	movs	r2, #10
 8012510:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012512:	4b1d      	ldr	r3, [pc, #116]	; (8012588 <tcp_process+0x7cc>)
 8012514:	681a      	ldr	r2, [r3, #0]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	60da      	str	r2, [r3, #12]
 801251a:	4a1b      	ldr	r2, [pc, #108]	; (8012588 <tcp_process+0x7cc>)
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6013      	str	r3, [r2, #0]
 8012520:	f003 f8a0 	bl	8015664 <tcp_timer_needed>
      }
      break;
 8012524:	e026      	b.n	8012574 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012526:	6878      	ldr	r0, [r7, #4]
 8012528:	f000 f93c 	bl	80127a4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801252c:	4b17      	ldr	r3, [pc, #92]	; (801258c <tcp_process+0x7d0>)
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	f003 0310 	and.w	r3, r3, #16
 8012534:	2b00      	cmp	r3, #0
 8012536:	d01f      	beq.n	8012578 <tcp_process+0x7bc>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801253c:	4b14      	ldr	r3, [pc, #80]	; (8012590 <tcp_process+0x7d4>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	429a      	cmp	r2, r3
 8012542:	d119      	bne.n	8012578 <tcp_process+0x7bc>
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012548:	2b00      	cmp	r3, #0
 801254a:	d115      	bne.n	8012578 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801254c:	4b11      	ldr	r3, [pc, #68]	; (8012594 <tcp_process+0x7d8>)
 801254e:	781b      	ldrb	r3, [r3, #0]
 8012550:	f043 0310 	orr.w	r3, r3, #16
 8012554:	b2da      	uxtb	r2, r3
 8012556:	4b0f      	ldr	r3, [pc, #60]	; (8012594 <tcp_process+0x7d8>)
 8012558:	701a      	strb	r2, [r3, #0]
      }
      break;
 801255a:	e00d      	b.n	8012578 <tcp_process+0x7bc>
    default:
      break;
 801255c:	bf00      	nop
 801255e:	e00c      	b.n	801257a <tcp_process+0x7be>
      break;
 8012560:	bf00      	nop
 8012562:	e00a      	b.n	801257a <tcp_process+0x7be>
      break;
 8012564:	bf00      	nop
 8012566:	e008      	b.n	801257a <tcp_process+0x7be>
      break;
 8012568:	bf00      	nop
 801256a:	e006      	b.n	801257a <tcp_process+0x7be>
      break;
 801256c:	bf00      	nop
 801256e:	e004      	b.n	801257a <tcp_process+0x7be>
      break;
 8012570:	bf00      	nop
 8012572:	e002      	b.n	801257a <tcp_process+0x7be>
      break;
 8012574:	bf00      	nop
 8012576:	e000      	b.n	801257a <tcp_process+0x7be>
      break;
 8012578:	bf00      	nop
  }
  return ERR_OK;
 801257a:	2300      	movs	r3, #0
}
 801257c:	4618      	mov	r0, r3
 801257e:	3724      	adds	r7, #36	; 0x24
 8012580:	46bd      	mov	sp, r7
 8012582:	bd90      	pop	{r4, r7, pc}
 8012584:	2000bca4 	.word	0x2000bca4
 8012588:	2000bcb8 	.word	0x2000bcb8
 801258c:	20004f08 	.word	0x20004f08
 8012590:	20004f00 	.word	0x20004f00
 8012594:	20004f09 	.word	0x20004f09
 8012598:	2000bca8 	.word	0x2000bca8

0801259c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b085      	sub	sp, #20
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
 80125a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d106      	bne.n	80125ba <tcp_oos_insert_segment+0x1e>
 80125ac:	4b3b      	ldr	r3, [pc, #236]	; (801269c <tcp_oos_insert_segment+0x100>)
 80125ae:	f240 421f 	movw	r2, #1055	; 0x41f
 80125b2:	493b      	ldr	r1, [pc, #236]	; (80126a0 <tcp_oos_insert_segment+0x104>)
 80125b4:	483b      	ldr	r0, [pc, #236]	; (80126a4 <tcp_oos_insert_segment+0x108>)
 80125b6:	f006 fc29 	bl	8018e0c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	68db      	ldr	r3, [r3, #12]
 80125be:	899b      	ldrh	r3, [r3, #12]
 80125c0:	b29b      	uxth	r3, r3
 80125c2:	4618      	mov	r0, r3
 80125c4:	f7fa fd20 	bl	800d008 <lwip_htons>
 80125c8:	4603      	mov	r3, r0
 80125ca:	b2db      	uxtb	r3, r3
 80125cc:	f003 0301 	and.w	r3, r3, #1
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d028      	beq.n	8012626 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80125d4:	6838      	ldr	r0, [r7, #0]
 80125d6:	f7fe f997 	bl	8010908 <tcp_segs_free>
    next = NULL;
 80125da:	2300      	movs	r3, #0
 80125dc:	603b      	str	r3, [r7, #0]
 80125de:	e056      	b.n	801268e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	899b      	ldrh	r3, [r3, #12]
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	4618      	mov	r0, r3
 80125ea:	f7fa fd0d 	bl	800d008 <lwip_htons>
 80125ee:	4603      	mov	r3, r0
 80125f0:	b2db      	uxtb	r3, r3
 80125f2:	f003 0301 	and.w	r3, r3, #1
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d00d      	beq.n	8012616 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	68db      	ldr	r3, [r3, #12]
 80125fe:	899b      	ldrh	r3, [r3, #12]
 8012600:	b29c      	uxth	r4, r3
 8012602:	2001      	movs	r0, #1
 8012604:	f7fa fd00 	bl	800d008 <lwip_htons>
 8012608:	4603      	mov	r3, r0
 801260a:	461a      	mov	r2, r3
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	68db      	ldr	r3, [r3, #12]
 8012610:	4322      	orrs	r2, r4
 8012612:	b292      	uxth	r2, r2
 8012614:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801261a:	683b      	ldr	r3, [r7, #0]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012620:	68f8      	ldr	r0, [r7, #12]
 8012622:	f7fe f986 	bl	8010932 <tcp_seg_free>
    while (next &&
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d00e      	beq.n	801264a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	891b      	ldrh	r3, [r3, #8]
 8012630:	461a      	mov	r2, r3
 8012632:	4b1d      	ldr	r3, [pc, #116]	; (80126a8 <tcp_oos_insert_segment+0x10c>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	441a      	add	r2, r3
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	68db      	ldr	r3, [r3, #12]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	6839      	ldr	r1, [r7, #0]
 8012640:	8909      	ldrh	r1, [r1, #8]
 8012642:	440b      	add	r3, r1
 8012644:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012646:	2b00      	cmp	r3, #0
 8012648:	daca      	bge.n	80125e0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d01e      	beq.n	801268e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	891b      	ldrh	r3, [r3, #8]
 8012654:	461a      	mov	r2, r3
 8012656:	4b14      	ldr	r3, [pc, #80]	; (80126a8 <tcp_oos_insert_segment+0x10c>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	441a      	add	r2, r3
 801265c:	683b      	ldr	r3, [r7, #0]
 801265e:	68db      	ldr	r3, [r3, #12]
 8012660:	685b      	ldr	r3, [r3, #4]
 8012662:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012664:	2b00      	cmp	r3, #0
 8012666:	dd12      	ble.n	801268e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012668:	683b      	ldr	r3, [r7, #0]
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	b29a      	uxth	r2, r3
 8012670:	4b0d      	ldr	r3, [pc, #52]	; (80126a8 <tcp_oos_insert_segment+0x10c>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	b29b      	uxth	r3, r3
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	b29a      	uxth	r2, r3
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	685a      	ldr	r2, [r3, #4]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	891b      	ldrh	r3, [r3, #8]
 8012686:	4619      	mov	r1, r3
 8012688:	4610      	mov	r0, r2
 801268a:	f7fc f9ad 	bl	800e9e8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	683a      	ldr	r2, [r7, #0]
 8012692:	601a      	str	r2, [r3, #0]
}
 8012694:	bf00      	nop
 8012696:	3714      	adds	r7, #20
 8012698:	46bd      	mov	sp, r7
 801269a:	bd90      	pop	{r4, r7, pc}
 801269c:	0801c024 	.word	0x0801c024
 80126a0:	0801c2e4 	.word	0x0801c2e4
 80126a4:	0801c070 	.word	0x0801c070
 80126a8:	20004efc 	.word	0x20004efc

080126ac <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80126ac:	b5b0      	push	{r4, r5, r7, lr}
 80126ae:	b086      	sub	sp, #24
 80126b0:	af00      	add	r7, sp, #0
 80126b2:	60f8      	str	r0, [r7, #12]
 80126b4:	60b9      	str	r1, [r7, #8]
 80126b6:	607a      	str	r2, [r7, #4]
 80126b8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80126ba:	e03e      	b.n	801273a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	685b      	ldr	r3, [r3, #4]
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fc fbd2 	bl	800ee74 <pbuf_clen>
 80126d0:	4603      	mov	r3, r0
 80126d2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126da:	8a7a      	ldrh	r2, [r7, #18]
 80126dc:	429a      	cmp	r2, r3
 80126de:	d906      	bls.n	80126ee <tcp_free_acked_segments+0x42>
 80126e0:	4b2a      	ldr	r3, [pc, #168]	; (801278c <tcp_free_acked_segments+0xe0>)
 80126e2:	f240 4257 	movw	r2, #1111	; 0x457
 80126e6:	492a      	ldr	r1, [pc, #168]	; (8012790 <tcp_free_acked_segments+0xe4>)
 80126e8:	482a      	ldr	r0, [pc, #168]	; (8012794 <tcp_free_acked_segments+0xe8>)
 80126ea:	f006 fb8f 	bl	8018e0c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80126f4:	8a7b      	ldrh	r3, [r7, #18]
 80126f6:	1ad3      	subs	r3, r2, r3
 80126f8:	b29a      	uxth	r2, r3
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	891a      	ldrh	r2, [r3, #8]
 8012704:	4b24      	ldr	r3, [pc, #144]	; (8012798 <tcp_free_acked_segments+0xec>)
 8012706:	881b      	ldrh	r3, [r3, #0]
 8012708:	4413      	add	r3, r2
 801270a:	b29a      	uxth	r2, r3
 801270c:	4b22      	ldr	r3, [pc, #136]	; (8012798 <tcp_free_acked_segments+0xec>)
 801270e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012710:	6978      	ldr	r0, [r7, #20]
 8012712:	f7fe f90e 	bl	8010932 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801271c:	2b00      	cmp	r3, #0
 801271e:	d00c      	beq.n	801273a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d109      	bne.n	801273a <tcp_free_acked_segments+0x8e>
 8012726:	683b      	ldr	r3, [r7, #0]
 8012728:	2b00      	cmp	r3, #0
 801272a:	d106      	bne.n	801273a <tcp_free_acked_segments+0x8e>
 801272c:	4b17      	ldr	r3, [pc, #92]	; (801278c <tcp_free_acked_segments+0xe0>)
 801272e:	f240 4261 	movw	r2, #1121	; 0x461
 8012732:	491a      	ldr	r1, [pc, #104]	; (801279c <tcp_free_acked_segments+0xf0>)
 8012734:	4817      	ldr	r0, [pc, #92]	; (8012794 <tcp_free_acked_segments+0xe8>)
 8012736:	f006 fb69 	bl	8018e0c <iprintf>
  while (seg_list != NULL &&
 801273a:	68bb      	ldr	r3, [r7, #8]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d020      	beq.n	8012782 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	68db      	ldr	r3, [r3, #12]
 8012744:	685b      	ldr	r3, [r3, #4]
 8012746:	4618      	mov	r0, r3
 8012748:	f7fa fc73 	bl	800d032 <lwip_htonl>
 801274c:	4604      	mov	r4, r0
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	891b      	ldrh	r3, [r3, #8]
 8012752:	461d      	mov	r5, r3
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	899b      	ldrh	r3, [r3, #12]
 801275a:	b29b      	uxth	r3, r3
 801275c:	4618      	mov	r0, r3
 801275e:	f7fa fc53 	bl	800d008 <lwip_htons>
 8012762:	4603      	mov	r3, r0
 8012764:	b2db      	uxtb	r3, r3
 8012766:	f003 0303 	and.w	r3, r3, #3
 801276a:	2b00      	cmp	r3, #0
 801276c:	d001      	beq.n	8012772 <tcp_free_acked_segments+0xc6>
 801276e:	2301      	movs	r3, #1
 8012770:	e000      	b.n	8012774 <tcp_free_acked_segments+0xc8>
 8012772:	2300      	movs	r3, #0
 8012774:	442b      	add	r3, r5
 8012776:	18e2      	adds	r2, r4, r3
 8012778:	4b09      	ldr	r3, [pc, #36]	; (80127a0 <tcp_free_acked_segments+0xf4>)
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801277e:	2b00      	cmp	r3, #0
 8012780:	dd9c      	ble.n	80126bc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012782:	68bb      	ldr	r3, [r7, #8]
}
 8012784:	4618      	mov	r0, r3
 8012786:	3718      	adds	r7, #24
 8012788:	46bd      	mov	sp, r7
 801278a:	bdb0      	pop	{r4, r5, r7, pc}
 801278c:	0801c024 	.word	0x0801c024
 8012790:	0801c30c 	.word	0x0801c30c
 8012794:	0801c070 	.word	0x0801c070
 8012798:	20004f04 	.word	0x20004f04
 801279c:	0801c334 	.word	0x0801c334
 80127a0:	20004f00 	.word	0x20004f00

080127a4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80127a4:	b5b0      	push	{r4, r5, r7, lr}
 80127a6:	b094      	sub	sp, #80	; 0x50
 80127a8:	af00      	add	r7, sp, #0
 80127aa:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80127ac:	2300      	movs	r3, #0
 80127ae:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d106      	bne.n	80127c4 <tcp_receive+0x20>
 80127b6:	4ba6      	ldr	r3, [pc, #664]	; (8012a50 <tcp_receive+0x2ac>)
 80127b8:	f240 427b 	movw	r2, #1147	; 0x47b
 80127bc:	49a5      	ldr	r1, [pc, #660]	; (8012a54 <tcp_receive+0x2b0>)
 80127be:	48a6      	ldr	r0, [pc, #664]	; (8012a58 <tcp_receive+0x2b4>)
 80127c0:	f006 fb24 	bl	8018e0c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	7d1b      	ldrb	r3, [r3, #20]
 80127c8:	2b03      	cmp	r3, #3
 80127ca:	d806      	bhi.n	80127da <tcp_receive+0x36>
 80127cc:	4ba0      	ldr	r3, [pc, #640]	; (8012a50 <tcp_receive+0x2ac>)
 80127ce:	f240 427c 	movw	r2, #1148	; 0x47c
 80127d2:	49a2      	ldr	r1, [pc, #648]	; (8012a5c <tcp_receive+0x2b8>)
 80127d4:	48a0      	ldr	r0, [pc, #640]	; (8012a58 <tcp_receive+0x2b4>)
 80127d6:	f006 fb19 	bl	8018e0c <iprintf>

  if (flags & TCP_ACK) {
 80127da:	4ba1      	ldr	r3, [pc, #644]	; (8012a60 <tcp_receive+0x2bc>)
 80127dc:	781b      	ldrb	r3, [r3, #0]
 80127de:	f003 0310 	and.w	r3, r3, #16
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	f000 8263 	beq.w	8012cae <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80127ee:	461a      	mov	r2, r3
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127f4:	4413      	add	r3, r2
 80127f6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80127fc:	4b99      	ldr	r3, [pc, #612]	; (8012a64 <tcp_receive+0x2c0>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	1ad3      	subs	r3, r2, r3
 8012802:	2b00      	cmp	r3, #0
 8012804:	db1b      	blt.n	801283e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801280a:	4b96      	ldr	r3, [pc, #600]	; (8012a64 <tcp_receive+0x2c0>)
 801280c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801280e:	429a      	cmp	r2, r3
 8012810:	d106      	bne.n	8012820 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012816:	4b94      	ldr	r3, [pc, #592]	; (8012a68 <tcp_receive+0x2c4>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	1ad3      	subs	r3, r2, r3
 801281c:	2b00      	cmp	r3, #0
 801281e:	db0e      	blt.n	801283e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012824:	4b90      	ldr	r3, [pc, #576]	; (8012a68 <tcp_receive+0x2c4>)
 8012826:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012828:	429a      	cmp	r2, r3
 801282a:	d125      	bne.n	8012878 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801282c:	4b8f      	ldr	r3, [pc, #572]	; (8012a6c <tcp_receive+0x2c8>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	89db      	ldrh	r3, [r3, #14]
 8012832:	b29a      	uxth	r2, r3
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801283a:	429a      	cmp	r2, r3
 801283c:	d91c      	bls.n	8012878 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801283e:	4b8b      	ldr	r3, [pc, #556]	; (8012a6c <tcp_receive+0x2c8>)
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	89db      	ldrh	r3, [r3, #14]
 8012844:	b29a      	uxth	r2, r3
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012858:	429a      	cmp	r2, r3
 801285a:	d205      	bcs.n	8012868 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012868:	4b7e      	ldr	r3, [pc, #504]	; (8012a64 <tcp_receive+0x2c0>)
 801286a:	681a      	ldr	r2, [r3, #0]
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012870:	4b7d      	ldr	r3, [pc, #500]	; (8012a68 <tcp_receive+0x2c4>)
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012878:	4b7b      	ldr	r3, [pc, #492]	; (8012a68 <tcp_receive+0x2c4>)
 801287a:	681a      	ldr	r2, [r3, #0]
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012880:	1ad3      	subs	r3, r2, r3
 8012882:	2b00      	cmp	r3, #0
 8012884:	dc58      	bgt.n	8012938 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012886:	4b7a      	ldr	r3, [pc, #488]	; (8012a70 <tcp_receive+0x2cc>)
 8012888:	881b      	ldrh	r3, [r3, #0]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d14b      	bne.n	8012926 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012892:	687a      	ldr	r2, [r7, #4]
 8012894:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012898:	4413      	add	r3, r2
 801289a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801289c:	429a      	cmp	r2, r3
 801289e:	d142      	bne.n	8012926 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	db3d      	blt.n	8012926 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80128ae:	4b6e      	ldr	r3, [pc, #440]	; (8012a68 <tcp_receive+0x2c4>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	429a      	cmp	r2, r3
 80128b4:	d137      	bne.n	8012926 <tcp_receive+0x182>
              found_dupack = 1;
 80128b6:	2301      	movs	r3, #1
 80128b8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128c0:	2bff      	cmp	r3, #255	; 0xff
 80128c2:	d007      	beq.n	80128d4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128ca:	3301      	adds	r3, #1
 80128cc:	b2da      	uxtb	r2, r3
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128da:	2b03      	cmp	r3, #3
 80128dc:	d91b      	bls.n	8012916 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128e8:	4413      	add	r3, r2
 80128ea:	b29a      	uxth	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d30a      	bcc.n	801290c <tcp_receive+0x168>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012900:	4413      	add	r3, r2
 8012902:	b29a      	uxth	r2, r3
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801290a:	e004      	b.n	8012916 <tcp_receive+0x172>
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012912:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801291c:	2b02      	cmp	r3, #2
 801291e:	d902      	bls.n	8012926 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012920:	6878      	ldr	r0, [r7, #4]
 8012922:	f002 fb41 	bl	8014fa8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012928:	2b00      	cmp	r3, #0
 801292a:	f040 8160 	bne.w	8012bee <tcp_receive+0x44a>
        pcb->dupacks = 0;
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	2200      	movs	r2, #0
 8012932:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012936:	e15a      	b.n	8012bee <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012938:	4b4b      	ldr	r3, [pc, #300]	; (8012a68 <tcp_receive+0x2c4>)
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012940:	1ad3      	subs	r3, r2, r3
 8012942:	3b01      	subs	r3, #1
 8012944:	2b00      	cmp	r3, #0
 8012946:	f2c0 814d 	blt.w	8012be4 <tcp_receive+0x440>
 801294a:	4b47      	ldr	r3, [pc, #284]	; (8012a68 <tcp_receive+0x2c4>)
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012952:	1ad3      	subs	r3, r2, r3
 8012954:	2b00      	cmp	r3, #0
 8012956:	f300 8145 	bgt.w	8012be4 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	8b5b      	ldrh	r3, [r3, #26]
 801295e:	f003 0304 	and.w	r3, r3, #4
 8012962:	2b00      	cmp	r3, #0
 8012964:	d010      	beq.n	8012988 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	8b5b      	ldrh	r3, [r3, #26]
 801296a:	f023 0304 	bic.w	r3, r3, #4
 801296e:	b29a      	uxth	r2, r3
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2200      	movs	r2, #0
 8012984:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2200      	movs	r2, #0
 801298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012996:	10db      	asrs	r3, r3, #3
 8012998:	b21b      	sxth	r3, r3
 801299a:	b29a      	uxth	r2, r3
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	4413      	add	r3, r2
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	b21a      	sxth	r2, r3
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80129b0:	4b2d      	ldr	r3, [pc, #180]	; (8012a68 <tcp_receive+0x2c4>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	b29a      	uxth	r2, r3
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	1ad3      	subs	r3, r2, r3
 80129be:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2200      	movs	r2, #0
 80129c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80129c8:	4b27      	ldr	r3, [pc, #156]	; (8012a68 <tcp_receive+0x2c4>)
 80129ca:	681a      	ldr	r2, [r3, #0]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	7d1b      	ldrb	r3, [r3, #20]
 80129d4:	2b03      	cmp	r3, #3
 80129d6:	f240 8096 	bls.w	8012b06 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80129e6:	429a      	cmp	r2, r3
 80129e8:	d244      	bcs.n	8012a74 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	8b5b      	ldrh	r3, [r3, #26]
 80129ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d001      	beq.n	80129fa <tcp_receive+0x256>
 80129f6:	2301      	movs	r3, #1
 80129f8:	e000      	b.n	80129fc <tcp_receive+0x258>
 80129fa:	2302      	movs	r3, #2
 80129fc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012a00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012a04:	b29a      	uxth	r2, r3
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a0a:	fb12 f303 	smulbb	r3, r2, r3
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012a12:	4293      	cmp	r3, r2
 8012a14:	bf28      	it	cs
 8012a16:	4613      	movcs	r3, r2
 8012a18:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012a22:	4413      	add	r3, r2
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d309      	bcc.n	8012a44 <tcp_receive+0x2a0>
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012a38:	4413      	add	r3, r2
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a42:	e060      	b.n	8012b06 <tcp_receive+0x362>
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a4e:	e05a      	b.n	8012b06 <tcp_receive+0x362>
 8012a50:	0801c024 	.word	0x0801c024
 8012a54:	0801c354 	.word	0x0801c354
 8012a58:	0801c070 	.word	0x0801c070
 8012a5c:	0801c370 	.word	0x0801c370
 8012a60:	20004f08 	.word	0x20004f08
 8012a64:	20004efc 	.word	0x20004efc
 8012a68:	20004f00 	.word	0x20004f00
 8012a6c:	20004eec 	.word	0x20004eec
 8012a70:	20004f06 	.word	0x20004f06
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012a7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012a7c:	4413      	add	r3, r2
 8012a7e:	b29a      	uxth	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d309      	bcc.n	8012a9e <tcp_receive+0x2fa>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012a90:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012a92:	4413      	add	r3, r2
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012a9c:	e004      	b.n	8012aa8 <tcp_receive+0x304>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d326      	bcc.n	8012b06 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	b29a      	uxth	r2, r3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ad8:	4413      	add	r3, r2
 8012ada:	b29a      	uxth	r2, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d30a      	bcc.n	8012afc <tcp_receive+0x358>
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012af0:	4413      	add	r3, r2
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012afa:	e004      	b.n	8012b06 <tcp_receive+0x362>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b0e:	4a98      	ldr	r2, [pc, #608]	; (8012d70 <tcp_receive+0x5cc>)
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f7ff fdcb 	bl	80126ac <tcp_free_acked_segments>
 8012b16:	4602      	mov	r2, r0
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b24:	4a93      	ldr	r2, [pc, #588]	; (8012d74 <tcp_receive+0x5d0>)
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7ff fdc0 	bl	80126ac <tcp_free_acked_segments>
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d104      	bne.n	8012b44 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b40:	861a      	strh	r2, [r3, #48]	; 0x30
 8012b42:	e002      	b.n	8012b4a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2200      	movs	r2, #0
 8012b48:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d103      	bne.n	8012b60 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012b66:	4b84      	ldr	r3, [pc, #528]	; (8012d78 <tcp_receive+0x5d4>)
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	b29a      	uxth	r2, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	8b5b      	ldrh	r3, [r3, #26]
 8012b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d035      	beq.n	8012bec <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d118      	bne.n	8012bba <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00c      	beq.n	8012baa <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7fa fa48 	bl	800d032 <lwip_htonl>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	dc20      	bgt.n	8012bec <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	8b5b      	ldrh	r3, [r3, #26]
 8012bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012bb8:	e018      	b.n	8012bec <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bc2:	68db      	ldr	r3, [r3, #12]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fa fa33 	bl	800d032 <lwip_htonl>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	1ae3      	subs	r3, r4, r3
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	dc0b      	bgt.n	8012bec <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	8b5b      	ldrh	r3, [r3, #26]
 8012bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012bdc:	b29a      	uxth	r2, r3
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012be2:	e003      	b.n	8012bec <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f002 fbcd 	bl	8015384 <tcp_send_empty_ack>
 8012bea:	e000      	b.n	8012bee <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012bec:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d05b      	beq.n	8012cae <tcp_receive+0x50a>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012bfa:	4b60      	ldr	r3, [pc, #384]	; (8012d7c <tcp_receive+0x5d8>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	1ad3      	subs	r3, r2, r3
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	da54      	bge.n	8012cae <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012c04:	4b5e      	ldr	r3, [pc, #376]	; (8012d80 <tcp_receive+0x5dc>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	b29a      	uxth	r2, r3
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	1ad3      	subs	r3, r2, r3
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012c18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c22:	10db      	asrs	r3, r3, #3
 8012c24:	b21b      	sxth	r3, r3
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	1ad3      	subs	r3, r2, r3
 8012c2a:	b29b      	uxth	r3, r3
 8012c2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c36:	b29a      	uxth	r2, r3
 8012c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012c3c:	4413      	add	r3, r2
 8012c3e:	b29b      	uxth	r3, r3
 8012c40:	b21a      	sxth	r2, r3
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012c46:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	da05      	bge.n	8012c5a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8012c4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012c52:	425b      	negs	r3, r3
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012c5a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c64:	109b      	asrs	r3, r3, #2
 8012c66:	b21b      	sxth	r3, r3
 8012c68:	b29b      	uxth	r3, r3
 8012c6a:	1ad3      	subs	r3, r2, r3
 8012c6c:	b29b      	uxth	r3, r3
 8012c6e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c78:	b29a      	uxth	r2, r3
 8012c7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012c7e:	4413      	add	r3, r2
 8012c80:	b29b      	uxth	r3, r3
 8012c82:	b21a      	sxth	r2, r3
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c8e:	10db      	asrs	r3, r3, #3
 8012c90:	b21b      	sxth	r3, r3
 8012c92:	b29a      	uxth	r2, r3
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c9a:	b29b      	uxth	r3, r3
 8012c9c:	4413      	add	r3, r2
 8012c9e:	b29b      	uxth	r3, r3
 8012ca0:	b21a      	sxth	r2, r3
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	2200      	movs	r2, #0
 8012cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012cae:	4b35      	ldr	r3, [pc, #212]	; (8012d84 <tcp_receive+0x5e0>)
 8012cb0:	881b      	ldrh	r3, [r3, #0]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	f000 84e1 	beq.w	801367a <tcp_receive+0xed6>
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	7d1b      	ldrb	r3, [r3, #20]
 8012cbc:	2b06      	cmp	r3, #6
 8012cbe:	f200 84dc 	bhi.w	801367a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cc6:	4b30      	ldr	r3, [pc, #192]	; (8012d88 <tcp_receive+0x5e4>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	1ad3      	subs	r3, r2, r3
 8012ccc:	3b01      	subs	r3, #1
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	f2c0 808e 	blt.w	8012df0 <tcp_receive+0x64c>
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cd8:	4b2a      	ldr	r3, [pc, #168]	; (8012d84 <tcp_receive+0x5e0>)
 8012cda:	881b      	ldrh	r3, [r3, #0]
 8012cdc:	4619      	mov	r1, r3
 8012cde:	4b2a      	ldr	r3, [pc, #168]	; (8012d88 <tcp_receive+0x5e4>)
 8012ce0:	681b      	ldr	r3, [r3, #0]
 8012ce2:	440b      	add	r3, r1
 8012ce4:	1ad3      	subs	r3, r2, r3
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f300 8081 	bgt.w	8012df0 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012cee:	4b27      	ldr	r3, [pc, #156]	; (8012d8c <tcp_receive+0x5e8>)
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cf8:	4b23      	ldr	r3, [pc, #140]	; (8012d88 <tcp_receive+0x5e4>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	1ad3      	subs	r3, r2, r3
 8012cfe:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012d00:	4b22      	ldr	r3, [pc, #136]	; (8012d8c <tcp_receive+0x5e8>)
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d106      	bne.n	8012d16 <tcp_receive+0x572>
 8012d08:	4b21      	ldr	r3, [pc, #132]	; (8012d90 <tcp_receive+0x5ec>)
 8012d0a:	f240 5294 	movw	r2, #1428	; 0x594
 8012d0e:	4921      	ldr	r1, [pc, #132]	; (8012d94 <tcp_receive+0x5f0>)
 8012d10:	4821      	ldr	r0, [pc, #132]	; (8012d98 <tcp_receive+0x5f4>)
 8012d12:	f006 f87b 	bl	8018e0c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012d1c:	4293      	cmp	r3, r2
 8012d1e:	d906      	bls.n	8012d2e <tcp_receive+0x58a>
 8012d20:	4b1b      	ldr	r3, [pc, #108]	; (8012d90 <tcp_receive+0x5ec>)
 8012d22:	f240 5295 	movw	r2, #1429	; 0x595
 8012d26:	491d      	ldr	r1, [pc, #116]	; (8012d9c <tcp_receive+0x5f8>)
 8012d28:	481b      	ldr	r0, [pc, #108]	; (8012d98 <tcp_receive+0x5f4>)
 8012d2a:	f006 f86f 	bl	8018e0c <iprintf>
      off = (u16_t)off32;
 8012d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d30:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012d34:	4b15      	ldr	r3, [pc, #84]	; (8012d8c <tcp_receive+0x5e8>)
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	891b      	ldrh	r3, [r3, #8]
 8012d3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012d3e:	429a      	cmp	r2, r3
 8012d40:	d906      	bls.n	8012d50 <tcp_receive+0x5ac>
 8012d42:	4b13      	ldr	r3, [pc, #76]	; (8012d90 <tcp_receive+0x5ec>)
 8012d44:	f240 5297 	movw	r2, #1431	; 0x597
 8012d48:	4915      	ldr	r1, [pc, #84]	; (8012da0 <tcp_receive+0x5fc>)
 8012d4a:	4813      	ldr	r0, [pc, #76]	; (8012d98 <tcp_receive+0x5f4>)
 8012d4c:	f006 f85e 	bl	8018e0c <iprintf>
      inseg.len -= off;
 8012d50:	4b0e      	ldr	r3, [pc, #56]	; (8012d8c <tcp_receive+0x5e8>)
 8012d52:	891a      	ldrh	r2, [r3, #8]
 8012d54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d58:	1ad3      	subs	r3, r2, r3
 8012d5a:	b29a      	uxth	r2, r3
 8012d5c:	4b0b      	ldr	r3, [pc, #44]	; (8012d8c <tcp_receive+0x5e8>)
 8012d5e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012d60:	4b0a      	ldr	r3, [pc, #40]	; (8012d8c <tcp_receive+0x5e8>)
 8012d62:	685b      	ldr	r3, [r3, #4]
 8012d64:	891a      	ldrh	r2, [r3, #8]
 8012d66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012d6a:	1ad3      	subs	r3, r2, r3
 8012d6c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8012d6e:	e029      	b.n	8012dc4 <tcp_receive+0x620>
 8012d70:	0801c38c 	.word	0x0801c38c
 8012d74:	0801c394 	.word	0x0801c394
 8012d78:	20004f04 	.word	0x20004f04
 8012d7c:	20004f00 	.word	0x20004f00
 8012d80:	2000bcac 	.word	0x2000bcac
 8012d84:	20004f06 	.word	0x20004f06
 8012d88:	20004efc 	.word	0x20004efc
 8012d8c:	20004edc 	.word	0x20004edc
 8012d90:	0801c024 	.word	0x0801c024
 8012d94:	0801c39c 	.word	0x0801c39c
 8012d98:	0801c070 	.word	0x0801c070
 8012d9c:	0801c3ac 	.word	0x0801c3ac
 8012da0:	0801c3bc 	.word	0x0801c3bc
        off -= p->len;
 8012da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012da6:	895b      	ldrh	r3, [r3, #10]
 8012da8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012dac:	1ad3      	subs	r3, r2, r3
 8012dae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012db4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012db6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dba:	2200      	movs	r2, #0
 8012dbc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012dc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012dc6:	895b      	ldrh	r3, [r3, #10]
 8012dc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d8e9      	bhi.n	8012da4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012dd0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012dd4:	4619      	mov	r1, r3
 8012dd6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012dd8:	f7fb ff06 	bl	800ebe8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012de0:	4a91      	ldr	r2, [pc, #580]	; (8013028 <tcp_receive+0x884>)
 8012de2:	6013      	str	r3, [r2, #0]
 8012de4:	4b91      	ldr	r3, [pc, #580]	; (801302c <tcp_receive+0x888>)
 8012de6:	68db      	ldr	r3, [r3, #12]
 8012de8:	4a8f      	ldr	r2, [pc, #572]	; (8013028 <tcp_receive+0x884>)
 8012dea:	6812      	ldr	r2, [r2, #0]
 8012dec:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012dee:	e00d      	b.n	8012e0c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012df0:	4b8d      	ldr	r3, [pc, #564]	; (8013028 <tcp_receive+0x884>)
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012df8:	1ad3      	subs	r3, r2, r3
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	da06      	bge.n	8012e0c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	8b5b      	ldrh	r3, [r3, #26]
 8012e02:	f043 0302 	orr.w	r3, r3, #2
 8012e06:	b29a      	uxth	r2, r3
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012e0c:	4b86      	ldr	r3, [pc, #536]	; (8013028 <tcp_receive+0x884>)
 8012e0e:	681a      	ldr	r2, [r3, #0]
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e14:	1ad3      	subs	r3, r2, r3
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	f2c0 842a 	blt.w	8013670 <tcp_receive+0xecc>
 8012e1c:	4b82      	ldr	r3, [pc, #520]	; (8013028 <tcp_receive+0x884>)
 8012e1e:	681a      	ldr	r2, [r3, #0]
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e24:	6879      	ldr	r1, [r7, #4]
 8012e26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e28:	440b      	add	r3, r1
 8012e2a:	1ad3      	subs	r3, r2, r3
 8012e2c:	3301      	adds	r3, #1
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	f300 841e 	bgt.w	8013670 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e38:	4b7b      	ldr	r3, [pc, #492]	; (8013028 <tcp_receive+0x884>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	f040 829a 	bne.w	8013376 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012e42:	4b7a      	ldr	r3, [pc, #488]	; (801302c <tcp_receive+0x888>)
 8012e44:	891c      	ldrh	r4, [r3, #8]
 8012e46:	4b79      	ldr	r3, [pc, #484]	; (801302c <tcp_receive+0x888>)
 8012e48:	68db      	ldr	r3, [r3, #12]
 8012e4a:	899b      	ldrh	r3, [r3, #12]
 8012e4c:	b29b      	uxth	r3, r3
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7fa f8da 	bl	800d008 <lwip_htons>
 8012e54:	4603      	mov	r3, r0
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	f003 0303 	and.w	r3, r3, #3
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d001      	beq.n	8012e64 <tcp_receive+0x6c0>
 8012e60:	2301      	movs	r3, #1
 8012e62:	e000      	b.n	8012e66 <tcp_receive+0x6c2>
 8012e64:	2300      	movs	r3, #0
 8012e66:	4423      	add	r3, r4
 8012e68:	b29a      	uxth	r2, r3
 8012e6a:	4b71      	ldr	r3, [pc, #452]	; (8013030 <tcp_receive+0x88c>)
 8012e6c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e72:	4b6f      	ldr	r3, [pc, #444]	; (8013030 <tcp_receive+0x88c>)
 8012e74:	881b      	ldrh	r3, [r3, #0]
 8012e76:	429a      	cmp	r2, r3
 8012e78:	d275      	bcs.n	8012f66 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012e7a:	4b6c      	ldr	r3, [pc, #432]	; (801302c <tcp_receive+0x888>)
 8012e7c:	68db      	ldr	r3, [r3, #12]
 8012e7e:	899b      	ldrh	r3, [r3, #12]
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	4618      	mov	r0, r3
 8012e84:	f7fa f8c0 	bl	800d008 <lwip_htons>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	b2db      	uxtb	r3, r3
 8012e8c:	f003 0301 	and.w	r3, r3, #1
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d01f      	beq.n	8012ed4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012e94:	4b65      	ldr	r3, [pc, #404]	; (801302c <tcp_receive+0x888>)
 8012e96:	68db      	ldr	r3, [r3, #12]
 8012e98:	899b      	ldrh	r3, [r3, #12]
 8012e9a:	b29b      	uxth	r3, r3
 8012e9c:	b21b      	sxth	r3, r3
 8012e9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012ea2:	b21c      	sxth	r4, r3
 8012ea4:	4b61      	ldr	r3, [pc, #388]	; (801302c <tcp_receive+0x888>)
 8012ea6:	68db      	ldr	r3, [r3, #12]
 8012ea8:	899b      	ldrh	r3, [r3, #12]
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7fa f8ab 	bl	800d008 <lwip_htons>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	b2db      	uxtb	r3, r3
 8012eb6:	b29b      	uxth	r3, r3
 8012eb8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012ebc:	b29b      	uxth	r3, r3
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7fa f8a2 	bl	800d008 <lwip_htons>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	b21b      	sxth	r3, r3
 8012ec8:	4323      	orrs	r3, r4
 8012eca:	b21a      	sxth	r2, r3
 8012ecc:	4b57      	ldr	r3, [pc, #348]	; (801302c <tcp_receive+0x888>)
 8012ece:	68db      	ldr	r3, [r3, #12]
 8012ed0:	b292      	uxth	r2, r2
 8012ed2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ed8:	4b54      	ldr	r3, [pc, #336]	; (801302c <tcp_receive+0x888>)
 8012eda:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012edc:	4b53      	ldr	r3, [pc, #332]	; (801302c <tcp_receive+0x888>)
 8012ede:	68db      	ldr	r3, [r3, #12]
 8012ee0:	899b      	ldrh	r3, [r3, #12]
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7fa f88f 	bl	800d008 <lwip_htons>
 8012eea:	4603      	mov	r3, r0
 8012eec:	b2db      	uxtb	r3, r3
 8012eee:	f003 0302 	and.w	r3, r3, #2
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d005      	beq.n	8012f02 <tcp_receive+0x75e>
            inseg.len -= 1;
 8012ef6:	4b4d      	ldr	r3, [pc, #308]	; (801302c <tcp_receive+0x888>)
 8012ef8:	891b      	ldrh	r3, [r3, #8]
 8012efa:	3b01      	subs	r3, #1
 8012efc:	b29a      	uxth	r2, r3
 8012efe:	4b4b      	ldr	r3, [pc, #300]	; (801302c <tcp_receive+0x888>)
 8012f00:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012f02:	4b4a      	ldr	r3, [pc, #296]	; (801302c <tcp_receive+0x888>)
 8012f04:	685b      	ldr	r3, [r3, #4]
 8012f06:	4a49      	ldr	r2, [pc, #292]	; (801302c <tcp_receive+0x888>)
 8012f08:	8912      	ldrh	r2, [r2, #8]
 8012f0a:	4611      	mov	r1, r2
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7fb fd6b 	bl	800e9e8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012f12:	4b46      	ldr	r3, [pc, #280]	; (801302c <tcp_receive+0x888>)
 8012f14:	891c      	ldrh	r4, [r3, #8]
 8012f16:	4b45      	ldr	r3, [pc, #276]	; (801302c <tcp_receive+0x888>)
 8012f18:	68db      	ldr	r3, [r3, #12]
 8012f1a:	899b      	ldrh	r3, [r3, #12]
 8012f1c:	b29b      	uxth	r3, r3
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fa f872 	bl	800d008 <lwip_htons>
 8012f24:	4603      	mov	r3, r0
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	f003 0303 	and.w	r3, r3, #3
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d001      	beq.n	8012f34 <tcp_receive+0x790>
 8012f30:	2301      	movs	r3, #1
 8012f32:	e000      	b.n	8012f36 <tcp_receive+0x792>
 8012f34:	2300      	movs	r3, #0
 8012f36:	4423      	add	r3, r4
 8012f38:	b29a      	uxth	r2, r3
 8012f3a:	4b3d      	ldr	r3, [pc, #244]	; (8013030 <tcp_receive+0x88c>)
 8012f3c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012f3e:	4b3c      	ldr	r3, [pc, #240]	; (8013030 <tcp_receive+0x88c>)
 8012f40:	881b      	ldrh	r3, [r3, #0]
 8012f42:	461a      	mov	r2, r3
 8012f44:	4b38      	ldr	r3, [pc, #224]	; (8013028 <tcp_receive+0x884>)
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	441a      	add	r2, r3
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f4e:	6879      	ldr	r1, [r7, #4]
 8012f50:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f52:	440b      	add	r3, r1
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d006      	beq.n	8012f66 <tcp_receive+0x7c2>
 8012f58:	4b36      	ldr	r3, [pc, #216]	; (8013034 <tcp_receive+0x890>)
 8012f5a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012f5e:	4936      	ldr	r1, [pc, #216]	; (8013038 <tcp_receive+0x894>)
 8012f60:	4836      	ldr	r0, [pc, #216]	; (801303c <tcp_receive+0x898>)
 8012f62:	f005 ff53 	bl	8018e0c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	f000 80e7 	beq.w	801313e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012f70:	4b2e      	ldr	r3, [pc, #184]	; (801302c <tcp_receive+0x888>)
 8012f72:	68db      	ldr	r3, [r3, #12]
 8012f74:	899b      	ldrh	r3, [r3, #12]
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fa f845 	bl	800d008 <lwip_htons>
 8012f7e:	4603      	mov	r3, r0
 8012f80:	b2db      	uxtb	r3, r3
 8012f82:	f003 0301 	and.w	r3, r3, #1
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d010      	beq.n	8012fac <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8012f8a:	e00a      	b.n	8012fa2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f90:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012f96:	681a      	ldr	r2, [r3, #0]
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8012f9c:	68f8      	ldr	r0, [r7, #12]
 8012f9e:	f7fd fcc8 	bl	8010932 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d1f0      	bne.n	8012f8c <tcp_receive+0x7e8>
 8012faa:	e0c8      	b.n	801313e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012fb2:	e052      	b.n	801305a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012fb6:	68db      	ldr	r3, [r3, #12]
 8012fb8:	899b      	ldrh	r3, [r3, #12]
 8012fba:	b29b      	uxth	r3, r3
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f7fa f823 	bl	800d008 <lwip_htons>
 8012fc2:	4603      	mov	r3, r0
 8012fc4:	b2db      	uxtb	r3, r3
 8012fc6:	f003 0301 	and.w	r3, r3, #1
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d03d      	beq.n	801304a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8012fce:	4b17      	ldr	r3, [pc, #92]	; (801302c <tcp_receive+0x888>)
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	899b      	ldrh	r3, [r3, #12]
 8012fd4:	b29b      	uxth	r3, r3
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7fa f816 	bl	800d008 <lwip_htons>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	b2db      	uxtb	r3, r3
 8012fe0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d130      	bne.n	801304a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012fe8:	4b10      	ldr	r3, [pc, #64]	; (801302c <tcp_receive+0x888>)
 8012fea:	68db      	ldr	r3, [r3, #12]
 8012fec:	899b      	ldrh	r3, [r3, #12]
 8012fee:	b29c      	uxth	r4, r3
 8012ff0:	2001      	movs	r0, #1
 8012ff2:	f7fa f809 	bl	800d008 <lwip_htons>
 8012ff6:	4603      	mov	r3, r0
 8012ff8:	461a      	mov	r2, r3
 8012ffa:	4b0c      	ldr	r3, [pc, #48]	; (801302c <tcp_receive+0x888>)
 8012ffc:	68db      	ldr	r3, [r3, #12]
 8012ffe:	4322      	orrs	r2, r4
 8013000:	b292      	uxth	r2, r2
 8013002:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8013004:	4b09      	ldr	r3, [pc, #36]	; (801302c <tcp_receive+0x888>)
 8013006:	891c      	ldrh	r4, [r3, #8]
 8013008:	4b08      	ldr	r3, [pc, #32]	; (801302c <tcp_receive+0x888>)
 801300a:	68db      	ldr	r3, [r3, #12]
 801300c:	899b      	ldrh	r3, [r3, #12]
 801300e:	b29b      	uxth	r3, r3
 8013010:	4618      	mov	r0, r3
 8013012:	f7f9 fff9 	bl	800d008 <lwip_htons>
 8013016:	4603      	mov	r3, r0
 8013018:	b2db      	uxtb	r3, r3
 801301a:	f003 0303 	and.w	r3, r3, #3
 801301e:	2b00      	cmp	r3, #0
 8013020:	d00e      	beq.n	8013040 <tcp_receive+0x89c>
 8013022:	2301      	movs	r3, #1
 8013024:	e00d      	b.n	8013042 <tcp_receive+0x89e>
 8013026:	bf00      	nop
 8013028:	20004efc 	.word	0x20004efc
 801302c:	20004edc 	.word	0x20004edc
 8013030:	20004f06 	.word	0x20004f06
 8013034:	0801c024 	.word	0x0801c024
 8013038:	0801c3cc 	.word	0x0801c3cc
 801303c:	0801c070 	.word	0x0801c070
 8013040:	2300      	movs	r3, #0
 8013042:	4423      	add	r3, r4
 8013044:	b29a      	uxth	r2, r3
 8013046:	4b98      	ldr	r3, [pc, #608]	; (80132a8 <tcp_receive+0xb04>)
 8013048:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801304a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801304c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801304e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013054:	6938      	ldr	r0, [r7, #16]
 8013056:	f7fd fc6c 	bl	8010932 <tcp_seg_free>
            while (next &&
 801305a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801305c:	2b00      	cmp	r3, #0
 801305e:	d00e      	beq.n	801307e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013060:	4b91      	ldr	r3, [pc, #580]	; (80132a8 <tcp_receive+0xb04>)
 8013062:	881b      	ldrh	r3, [r3, #0]
 8013064:	461a      	mov	r2, r3
 8013066:	4b91      	ldr	r3, [pc, #580]	; (80132ac <tcp_receive+0xb08>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	441a      	add	r2, r3
 801306c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801306e:	68db      	ldr	r3, [r3, #12]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013074:	8909      	ldrh	r1, [r1, #8]
 8013076:	440b      	add	r3, r1
 8013078:	1ad3      	subs	r3, r2, r3
            while (next &&
 801307a:	2b00      	cmp	r3, #0
 801307c:	da9a      	bge.n	8012fb4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801307e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013080:	2b00      	cmp	r3, #0
 8013082:	d059      	beq.n	8013138 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8013084:	4b88      	ldr	r3, [pc, #544]	; (80132a8 <tcp_receive+0xb04>)
 8013086:	881b      	ldrh	r3, [r3, #0]
 8013088:	461a      	mov	r2, r3
 801308a:	4b88      	ldr	r3, [pc, #544]	; (80132ac <tcp_receive+0xb08>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	441a      	add	r2, r3
 8013090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013092:	68db      	ldr	r3, [r3, #12]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	1ad3      	subs	r3, r2, r3
            if (next &&
 8013098:	2b00      	cmp	r3, #0
 801309a:	dd4d      	ble.n	8013138 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801309c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801309e:	68db      	ldr	r3, [r3, #12]
 80130a0:	685b      	ldr	r3, [r3, #4]
 80130a2:	b29a      	uxth	r2, r3
 80130a4:	4b81      	ldr	r3, [pc, #516]	; (80132ac <tcp_receive+0xb08>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	1ad3      	subs	r3, r2, r3
 80130ac:	b29a      	uxth	r2, r3
 80130ae:	4b80      	ldr	r3, [pc, #512]	; (80132b0 <tcp_receive+0xb0c>)
 80130b0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80130b2:	4b7f      	ldr	r3, [pc, #508]	; (80132b0 <tcp_receive+0xb0c>)
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	899b      	ldrh	r3, [r3, #12]
 80130b8:	b29b      	uxth	r3, r3
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f9 ffa4 	bl	800d008 <lwip_htons>
 80130c0:	4603      	mov	r3, r0
 80130c2:	b2db      	uxtb	r3, r3
 80130c4:	f003 0302 	and.w	r3, r3, #2
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d005      	beq.n	80130d8 <tcp_receive+0x934>
                inseg.len -= 1;
 80130cc:	4b78      	ldr	r3, [pc, #480]	; (80132b0 <tcp_receive+0xb0c>)
 80130ce:	891b      	ldrh	r3, [r3, #8]
 80130d0:	3b01      	subs	r3, #1
 80130d2:	b29a      	uxth	r2, r3
 80130d4:	4b76      	ldr	r3, [pc, #472]	; (80132b0 <tcp_receive+0xb0c>)
 80130d6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80130d8:	4b75      	ldr	r3, [pc, #468]	; (80132b0 <tcp_receive+0xb0c>)
 80130da:	685b      	ldr	r3, [r3, #4]
 80130dc:	4a74      	ldr	r2, [pc, #464]	; (80132b0 <tcp_receive+0xb0c>)
 80130de:	8912      	ldrh	r2, [r2, #8]
 80130e0:	4611      	mov	r1, r2
 80130e2:	4618      	mov	r0, r3
 80130e4:	f7fb fc80 	bl	800e9e8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80130e8:	4b71      	ldr	r3, [pc, #452]	; (80132b0 <tcp_receive+0xb0c>)
 80130ea:	891c      	ldrh	r4, [r3, #8]
 80130ec:	4b70      	ldr	r3, [pc, #448]	; (80132b0 <tcp_receive+0xb0c>)
 80130ee:	68db      	ldr	r3, [r3, #12]
 80130f0:	899b      	ldrh	r3, [r3, #12]
 80130f2:	b29b      	uxth	r3, r3
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7f9 ff87 	bl	800d008 <lwip_htons>
 80130fa:	4603      	mov	r3, r0
 80130fc:	b2db      	uxtb	r3, r3
 80130fe:	f003 0303 	and.w	r3, r3, #3
 8013102:	2b00      	cmp	r3, #0
 8013104:	d001      	beq.n	801310a <tcp_receive+0x966>
 8013106:	2301      	movs	r3, #1
 8013108:	e000      	b.n	801310c <tcp_receive+0x968>
 801310a:	2300      	movs	r3, #0
 801310c:	4423      	add	r3, r4
 801310e:	b29a      	uxth	r2, r3
 8013110:	4b65      	ldr	r3, [pc, #404]	; (80132a8 <tcp_receive+0xb04>)
 8013112:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8013114:	4b64      	ldr	r3, [pc, #400]	; (80132a8 <tcp_receive+0xb04>)
 8013116:	881b      	ldrh	r3, [r3, #0]
 8013118:	461a      	mov	r2, r3
 801311a:	4b64      	ldr	r3, [pc, #400]	; (80132ac <tcp_receive+0xb08>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	441a      	add	r2, r3
 8013120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013122:	68db      	ldr	r3, [r3, #12]
 8013124:	685b      	ldr	r3, [r3, #4]
 8013126:	429a      	cmp	r2, r3
 8013128:	d006      	beq.n	8013138 <tcp_receive+0x994>
 801312a:	4b62      	ldr	r3, [pc, #392]	; (80132b4 <tcp_receive+0xb10>)
 801312c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8013130:	4961      	ldr	r1, [pc, #388]	; (80132b8 <tcp_receive+0xb14>)
 8013132:	4862      	ldr	r0, [pc, #392]	; (80132bc <tcp_receive+0xb18>)
 8013134:	f005 fe6a 	bl	8018e0c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801313c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801313e:	4b5a      	ldr	r3, [pc, #360]	; (80132a8 <tcp_receive+0xb04>)
 8013140:	881b      	ldrh	r3, [r3, #0]
 8013142:	461a      	mov	r2, r3
 8013144:	4b59      	ldr	r3, [pc, #356]	; (80132ac <tcp_receive+0xb08>)
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	441a      	add	r2, r3
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013152:	4b55      	ldr	r3, [pc, #340]	; (80132a8 <tcp_receive+0xb04>)
 8013154:	881b      	ldrh	r3, [r3, #0]
 8013156:	429a      	cmp	r2, r3
 8013158:	d206      	bcs.n	8013168 <tcp_receive+0x9c4>
 801315a:	4b56      	ldr	r3, [pc, #344]	; (80132b4 <tcp_receive+0xb10>)
 801315c:	f240 6207 	movw	r2, #1543	; 0x607
 8013160:	4957      	ldr	r1, [pc, #348]	; (80132c0 <tcp_receive+0xb1c>)
 8013162:	4856      	ldr	r0, [pc, #344]	; (80132bc <tcp_receive+0xb18>)
 8013164:	f005 fe52 	bl	8018e0c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801316c:	4b4e      	ldr	r3, [pc, #312]	; (80132a8 <tcp_receive+0xb04>)
 801316e:	881b      	ldrh	r3, [r3, #0]
 8013170:	1ad3      	subs	r3, r2, r3
 8013172:	b29a      	uxth	r2, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8013178:	6878      	ldr	r0, [r7, #4]
 801317a:	f7fc feb5 	bl	800fee8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801317e:	4b4c      	ldr	r3, [pc, #304]	; (80132b0 <tcp_receive+0xb0c>)
 8013180:	685b      	ldr	r3, [r3, #4]
 8013182:	891b      	ldrh	r3, [r3, #8]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d006      	beq.n	8013196 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8013188:	4b49      	ldr	r3, [pc, #292]	; (80132b0 <tcp_receive+0xb0c>)
 801318a:	685b      	ldr	r3, [r3, #4]
 801318c:	4a4d      	ldr	r2, [pc, #308]	; (80132c4 <tcp_receive+0xb20>)
 801318e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013190:	4b47      	ldr	r3, [pc, #284]	; (80132b0 <tcp_receive+0xb0c>)
 8013192:	2200      	movs	r2, #0
 8013194:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013196:	4b46      	ldr	r3, [pc, #280]	; (80132b0 <tcp_receive+0xb0c>)
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	899b      	ldrh	r3, [r3, #12]
 801319c:	b29b      	uxth	r3, r3
 801319e:	4618      	mov	r0, r3
 80131a0:	f7f9 ff32 	bl	800d008 <lwip_htons>
 80131a4:	4603      	mov	r3, r0
 80131a6:	b2db      	uxtb	r3, r3
 80131a8:	f003 0301 	and.w	r3, r3, #1
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	f000 80b8 	beq.w	8013322 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80131b2:	4b45      	ldr	r3, [pc, #276]	; (80132c8 <tcp_receive+0xb24>)
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	f043 0320 	orr.w	r3, r3, #32
 80131ba:	b2da      	uxtb	r2, r3
 80131bc:	4b42      	ldr	r3, [pc, #264]	; (80132c8 <tcp_receive+0xb24>)
 80131be:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80131c0:	e0af      	b.n	8013322 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131c6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80131cc:	68db      	ldr	r3, [r3, #12]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	4a36      	ldr	r2, [pc, #216]	; (80132ac <tcp_receive+0xb08>)
 80131d2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80131d4:	68bb      	ldr	r3, [r7, #8]
 80131d6:	891b      	ldrh	r3, [r3, #8]
 80131d8:	461c      	mov	r4, r3
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	68db      	ldr	r3, [r3, #12]
 80131de:	899b      	ldrh	r3, [r3, #12]
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	4618      	mov	r0, r3
 80131e4:	f7f9 ff10 	bl	800d008 <lwip_htons>
 80131e8:	4603      	mov	r3, r0
 80131ea:	b2db      	uxtb	r3, r3
 80131ec:	f003 0303 	and.w	r3, r3, #3
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d001      	beq.n	80131f8 <tcp_receive+0xa54>
 80131f4:	2301      	movs	r3, #1
 80131f6:	e000      	b.n	80131fa <tcp_receive+0xa56>
 80131f8:	2300      	movs	r3, #0
 80131fa:	191a      	adds	r2, r3, r4
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013200:	441a      	add	r2, r3
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801320a:	461c      	mov	r4, r3
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	891b      	ldrh	r3, [r3, #8]
 8013210:	461d      	mov	r5, r3
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	68db      	ldr	r3, [r3, #12]
 8013216:	899b      	ldrh	r3, [r3, #12]
 8013218:	b29b      	uxth	r3, r3
 801321a:	4618      	mov	r0, r3
 801321c:	f7f9 fef4 	bl	800d008 <lwip_htons>
 8013220:	4603      	mov	r3, r0
 8013222:	b2db      	uxtb	r3, r3
 8013224:	f003 0303 	and.w	r3, r3, #3
 8013228:	2b00      	cmp	r3, #0
 801322a:	d001      	beq.n	8013230 <tcp_receive+0xa8c>
 801322c:	2301      	movs	r3, #1
 801322e:	e000      	b.n	8013232 <tcp_receive+0xa8e>
 8013230:	2300      	movs	r3, #0
 8013232:	442b      	add	r3, r5
 8013234:	429c      	cmp	r4, r3
 8013236:	d206      	bcs.n	8013246 <tcp_receive+0xaa2>
 8013238:	4b1e      	ldr	r3, [pc, #120]	; (80132b4 <tcp_receive+0xb10>)
 801323a:	f240 622b 	movw	r2, #1579	; 0x62b
 801323e:	4923      	ldr	r1, [pc, #140]	; (80132cc <tcp_receive+0xb28>)
 8013240:	481e      	ldr	r0, [pc, #120]	; (80132bc <tcp_receive+0xb18>)
 8013242:	f005 fde3 	bl	8018e0c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	891b      	ldrh	r3, [r3, #8]
 801324a:	461c      	mov	r4, r3
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	68db      	ldr	r3, [r3, #12]
 8013250:	899b      	ldrh	r3, [r3, #12]
 8013252:	b29b      	uxth	r3, r3
 8013254:	4618      	mov	r0, r3
 8013256:	f7f9 fed7 	bl	800d008 <lwip_htons>
 801325a:	4603      	mov	r3, r0
 801325c:	b2db      	uxtb	r3, r3
 801325e:	f003 0303 	and.w	r3, r3, #3
 8013262:	2b00      	cmp	r3, #0
 8013264:	d001      	beq.n	801326a <tcp_receive+0xac6>
 8013266:	2301      	movs	r3, #1
 8013268:	e000      	b.n	801326c <tcp_receive+0xac8>
 801326a:	2300      	movs	r3, #0
 801326c:	1919      	adds	r1, r3, r4
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013272:	b28b      	uxth	r3, r1
 8013274:	1ad3      	subs	r3, r2, r3
 8013276:	b29a      	uxth	r2, r3
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f7fc fe33 	bl	800fee8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013282:	68bb      	ldr	r3, [r7, #8]
 8013284:	685b      	ldr	r3, [r3, #4]
 8013286:	891b      	ldrh	r3, [r3, #8]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d028      	beq.n	80132de <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801328c:	4b0d      	ldr	r3, [pc, #52]	; (80132c4 <tcp_receive+0xb20>)
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d01d      	beq.n	80132d0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8013294:	4b0b      	ldr	r3, [pc, #44]	; (80132c4 <tcp_receive+0xb20>)
 8013296:	681a      	ldr	r2, [r3, #0]
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	685b      	ldr	r3, [r3, #4]
 801329c:	4619      	mov	r1, r3
 801329e:	4610      	mov	r0, r2
 80132a0:	f7fb fe28 	bl	800eef4 <pbuf_cat>
 80132a4:	e018      	b.n	80132d8 <tcp_receive+0xb34>
 80132a6:	bf00      	nop
 80132a8:	20004f06 	.word	0x20004f06
 80132ac:	20004efc 	.word	0x20004efc
 80132b0:	20004edc 	.word	0x20004edc
 80132b4:	0801c024 	.word	0x0801c024
 80132b8:	0801c404 	.word	0x0801c404
 80132bc:	0801c070 	.word	0x0801c070
 80132c0:	0801c440 	.word	0x0801c440
 80132c4:	20004f0c 	.word	0x20004f0c
 80132c8:	20004f09 	.word	0x20004f09
 80132cc:	0801c460 	.word	0x0801c460
            } else {
              recv_data = cseg->p;
 80132d0:	68bb      	ldr	r3, [r7, #8]
 80132d2:	685b      	ldr	r3, [r3, #4]
 80132d4:	4a70      	ldr	r2, [pc, #448]	; (8013498 <tcp_receive+0xcf4>)
 80132d6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	2200      	movs	r2, #0
 80132dc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	68db      	ldr	r3, [r3, #12]
 80132e2:	899b      	ldrh	r3, [r3, #12]
 80132e4:	b29b      	uxth	r3, r3
 80132e6:	4618      	mov	r0, r3
 80132e8:	f7f9 fe8e 	bl	800d008 <lwip_htons>
 80132ec:	4603      	mov	r3, r0
 80132ee:	b2db      	uxtb	r3, r3
 80132f0:	f003 0301 	and.w	r3, r3, #1
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d00d      	beq.n	8013314 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80132f8:	4b68      	ldr	r3, [pc, #416]	; (801349c <tcp_receive+0xcf8>)
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	f043 0320 	orr.w	r3, r3, #32
 8013300:	b2da      	uxtb	r2, r3
 8013302:	4b66      	ldr	r3, [pc, #408]	; (801349c <tcp_receive+0xcf8>)
 8013304:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	7d1b      	ldrb	r3, [r3, #20]
 801330a:	2b04      	cmp	r3, #4
 801330c:	d102      	bne.n	8013314 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2207      	movs	r2, #7
 8013312:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801331c:	68b8      	ldr	r0, [r7, #8]
 801331e:	f7fd fb08 	bl	8010932 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013326:	2b00      	cmp	r3, #0
 8013328:	d008      	beq.n	801333c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801332e:	68db      	ldr	r3, [r3, #12]
 8013330:	685a      	ldr	r2, [r3, #4]
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8013336:	429a      	cmp	r2, r3
 8013338:	f43f af43 	beq.w	80131c2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	8b5b      	ldrh	r3, [r3, #26]
 8013340:	f003 0301 	and.w	r3, r3, #1
 8013344:	2b00      	cmp	r3, #0
 8013346:	d00e      	beq.n	8013366 <tcp_receive+0xbc2>
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	8b5b      	ldrh	r3, [r3, #26]
 801334c:	f023 0301 	bic.w	r3, r3, #1
 8013350:	b29a      	uxth	r2, r3
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	835a      	strh	r2, [r3, #26]
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	8b5b      	ldrh	r3, [r3, #26]
 801335a:	f043 0302 	orr.w	r3, r3, #2
 801335e:	b29a      	uxth	r2, r3
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013364:	e188      	b.n	8013678 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	8b5b      	ldrh	r3, [r3, #26]
 801336a:	f043 0301 	orr.w	r3, r3, #1
 801336e:	b29a      	uxth	r2, r3
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013374:	e180      	b.n	8013678 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801337a:	2b00      	cmp	r3, #0
 801337c:	d106      	bne.n	801338c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801337e:	4848      	ldr	r0, [pc, #288]	; (80134a0 <tcp_receive+0xcfc>)
 8013380:	f7fd faf0 	bl	8010964 <tcp_seg_copy>
 8013384:	4602      	mov	r2, r0
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	675a      	str	r2, [r3, #116]	; 0x74
 801338a:	e16d      	b.n	8013668 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801338c:	2300      	movs	r3, #0
 801338e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013394:	63bb      	str	r3, [r7, #56]	; 0x38
 8013396:	e157      	b.n	8013648 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8013398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801339a:	68db      	ldr	r3, [r3, #12]
 801339c:	685a      	ldr	r2, [r3, #4]
 801339e:	4b41      	ldr	r3, [pc, #260]	; (80134a4 <tcp_receive+0xd00>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d11d      	bne.n	80133e2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80133a6:	4b3e      	ldr	r3, [pc, #248]	; (80134a0 <tcp_receive+0xcfc>)
 80133a8:	891a      	ldrh	r2, [r3, #8]
 80133aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ac:	891b      	ldrh	r3, [r3, #8]
 80133ae:	429a      	cmp	r2, r3
 80133b0:	f240 814f 	bls.w	8013652 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80133b4:	483a      	ldr	r0, [pc, #232]	; (80134a0 <tcp_receive+0xcfc>)
 80133b6:	f7fd fad5 	bl	8010964 <tcp_seg_copy>
 80133ba:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80133bc:	697b      	ldr	r3, [r7, #20]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	f000 8149 	beq.w	8013656 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80133c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d003      	beq.n	80133d2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80133ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133cc:	697a      	ldr	r2, [r7, #20]
 80133ce:	601a      	str	r2, [r3, #0]
 80133d0:	e002      	b.n	80133d8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	697a      	ldr	r2, [r7, #20]
 80133d6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80133d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80133da:	6978      	ldr	r0, [r7, #20]
 80133dc:	f7ff f8de 	bl	801259c <tcp_oos_insert_segment>
                }
                break;
 80133e0:	e139      	b.n	8013656 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80133e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d117      	bne.n	8013418 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80133e8:	4b2e      	ldr	r3, [pc, #184]	; (80134a4 <tcp_receive+0xd00>)
 80133ea:	681a      	ldr	r2, [r3, #0]
 80133ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133ee:	68db      	ldr	r3, [r3, #12]
 80133f0:	685b      	ldr	r3, [r3, #4]
 80133f2:	1ad3      	subs	r3, r2, r3
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	da57      	bge.n	80134a8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80133f8:	4829      	ldr	r0, [pc, #164]	; (80134a0 <tcp_receive+0xcfc>)
 80133fa:	f7fd fab3 	bl	8010964 <tcp_seg_copy>
 80133fe:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013400:	69bb      	ldr	r3, [r7, #24]
 8013402:	2b00      	cmp	r3, #0
 8013404:	f000 8129 	beq.w	801365a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	69ba      	ldr	r2, [r7, #24]
 801340c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801340e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013410:	69b8      	ldr	r0, [r7, #24]
 8013412:	f7ff f8c3 	bl	801259c <tcp_oos_insert_segment>
                  }
                  break;
 8013416:	e120      	b.n	801365a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013418:	4b22      	ldr	r3, [pc, #136]	; (80134a4 <tcp_receive+0xd00>)
 801341a:	681a      	ldr	r2, [r3, #0]
 801341c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801341e:	68db      	ldr	r3, [r3, #12]
 8013420:	685b      	ldr	r3, [r3, #4]
 8013422:	1ad3      	subs	r3, r2, r3
 8013424:	3b01      	subs	r3, #1
 8013426:	2b00      	cmp	r3, #0
 8013428:	db3e      	blt.n	80134a8 <tcp_receive+0xd04>
 801342a:	4b1e      	ldr	r3, [pc, #120]	; (80134a4 <tcp_receive+0xd00>)
 801342c:	681a      	ldr	r2, [r3, #0]
 801342e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013430:	68db      	ldr	r3, [r3, #12]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	1ad3      	subs	r3, r2, r3
 8013436:	3301      	adds	r3, #1
 8013438:	2b00      	cmp	r3, #0
 801343a:	dc35      	bgt.n	80134a8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801343c:	4818      	ldr	r0, [pc, #96]	; (80134a0 <tcp_receive+0xcfc>)
 801343e:	f7fd fa91 	bl	8010964 <tcp_seg_copy>
 8013442:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013444:	69fb      	ldr	r3, [r7, #28]
 8013446:	2b00      	cmp	r3, #0
 8013448:	f000 8109 	beq.w	801365e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801344c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801344e:	68db      	ldr	r3, [r3, #12]
 8013450:	685b      	ldr	r3, [r3, #4]
 8013452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013454:	8912      	ldrh	r2, [r2, #8]
 8013456:	441a      	add	r2, r3
 8013458:	4b12      	ldr	r3, [pc, #72]	; (80134a4 <tcp_receive+0xd00>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	1ad3      	subs	r3, r2, r3
 801345e:	2b00      	cmp	r3, #0
 8013460:	dd12      	ble.n	8013488 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013462:	4b10      	ldr	r3, [pc, #64]	; (80134a4 <tcp_receive+0xd00>)
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	b29a      	uxth	r2, r3
 8013468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801346a:	68db      	ldr	r3, [r3, #12]
 801346c:	685b      	ldr	r3, [r3, #4]
 801346e:	b29b      	uxth	r3, r3
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	b29a      	uxth	r2, r3
 8013474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013476:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801347a:	685a      	ldr	r2, [r3, #4]
 801347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801347e:	891b      	ldrh	r3, [r3, #8]
 8013480:	4619      	mov	r1, r3
 8013482:	4610      	mov	r0, r2
 8013484:	f7fb fab0 	bl	800e9e8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801348a:	69fa      	ldr	r2, [r7, #28]
 801348c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801348e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013490:	69f8      	ldr	r0, [r7, #28]
 8013492:	f7ff f883 	bl	801259c <tcp_oos_insert_segment>
                  }
                  break;
 8013496:	e0e2      	b.n	801365e <tcp_receive+0xeba>
 8013498:	20004f0c 	.word	0x20004f0c
 801349c:	20004f09 	.word	0x20004f09
 80134a0:	20004edc 	.word	0x20004edc
 80134a4:	20004efc 	.word	0x20004efc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80134a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134aa:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80134ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	f040 80c6 	bne.w	8013642 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80134b6:	4b80      	ldr	r3, [pc, #512]	; (80136b8 <tcp_receive+0xf14>)
 80134b8:	681a      	ldr	r2, [r3, #0]
 80134ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134bc:	68db      	ldr	r3, [r3, #12]
 80134be:	685b      	ldr	r3, [r3, #4]
 80134c0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	f340 80bd 	ble.w	8013642 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80134c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ca:	68db      	ldr	r3, [r3, #12]
 80134cc:	899b      	ldrh	r3, [r3, #12]
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7f9 fd99 	bl	800d008 <lwip_htons>
 80134d6:	4603      	mov	r3, r0
 80134d8:	b2db      	uxtb	r3, r3
 80134da:	f003 0301 	and.w	r3, r3, #1
 80134de:	2b00      	cmp	r3, #0
 80134e0:	f040 80bf 	bne.w	8013662 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80134e4:	4875      	ldr	r0, [pc, #468]	; (80136bc <tcp_receive+0xf18>)
 80134e6:	f7fd fa3d 	bl	8010964 <tcp_seg_copy>
 80134ea:	4602      	mov	r2, r0
 80134ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ee:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80134f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	f000 80b6 	beq.w	8013666 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80134fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134fc:	68db      	ldr	r3, [r3, #12]
 80134fe:	685b      	ldr	r3, [r3, #4]
 8013500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013502:	8912      	ldrh	r2, [r2, #8]
 8013504:	441a      	add	r2, r3
 8013506:	4b6c      	ldr	r3, [pc, #432]	; (80136b8 <tcp_receive+0xf14>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	1ad3      	subs	r3, r2, r3
 801350c:	2b00      	cmp	r3, #0
 801350e:	dd12      	ble.n	8013536 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013510:	4b69      	ldr	r3, [pc, #420]	; (80136b8 <tcp_receive+0xf14>)
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	b29a      	uxth	r2, r3
 8013516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013518:	68db      	ldr	r3, [r3, #12]
 801351a:	685b      	ldr	r3, [r3, #4]
 801351c:	b29b      	uxth	r3, r3
 801351e:	1ad3      	subs	r3, r2, r3
 8013520:	b29a      	uxth	r2, r3
 8013522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013524:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013528:	685a      	ldr	r2, [r3, #4]
 801352a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801352c:	891b      	ldrh	r3, [r3, #8]
 801352e:	4619      	mov	r1, r3
 8013530:	4610      	mov	r0, r2
 8013532:	f7fb fa59 	bl	800e9e8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013536:	4b62      	ldr	r3, [pc, #392]	; (80136c0 <tcp_receive+0xf1c>)
 8013538:	881b      	ldrh	r3, [r3, #0]
 801353a:	461a      	mov	r2, r3
 801353c:	4b5e      	ldr	r3, [pc, #376]	; (80136b8 <tcp_receive+0xf14>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	441a      	add	r2, r3
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013546:	6879      	ldr	r1, [r7, #4]
 8013548:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801354a:	440b      	add	r3, r1
 801354c:	1ad3      	subs	r3, r2, r3
 801354e:	2b00      	cmp	r3, #0
 8013550:	f340 8089 	ble.w	8013666 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	68db      	ldr	r3, [r3, #12]
 801355a:	899b      	ldrh	r3, [r3, #12]
 801355c:	b29b      	uxth	r3, r3
 801355e:	4618      	mov	r0, r3
 8013560:	f7f9 fd52 	bl	800d008 <lwip_htons>
 8013564:	4603      	mov	r3, r0
 8013566:	b2db      	uxtb	r3, r3
 8013568:	f003 0301 	and.w	r3, r3, #1
 801356c:	2b00      	cmp	r3, #0
 801356e:	d022      	beq.n	80135b6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	68db      	ldr	r3, [r3, #12]
 8013576:	899b      	ldrh	r3, [r3, #12]
 8013578:	b29b      	uxth	r3, r3
 801357a:	b21b      	sxth	r3, r3
 801357c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013580:	b21c      	sxth	r4, r3
 8013582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013584:	681b      	ldr	r3, [r3, #0]
 8013586:	68db      	ldr	r3, [r3, #12]
 8013588:	899b      	ldrh	r3, [r3, #12]
 801358a:	b29b      	uxth	r3, r3
 801358c:	4618      	mov	r0, r3
 801358e:	f7f9 fd3b 	bl	800d008 <lwip_htons>
 8013592:	4603      	mov	r3, r0
 8013594:	b2db      	uxtb	r3, r3
 8013596:	b29b      	uxth	r3, r3
 8013598:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801359c:	b29b      	uxth	r3, r3
 801359e:	4618      	mov	r0, r3
 80135a0:	f7f9 fd32 	bl	800d008 <lwip_htons>
 80135a4:	4603      	mov	r3, r0
 80135a6:	b21b      	sxth	r3, r3
 80135a8:	4323      	orrs	r3, r4
 80135aa:	b21a      	sxth	r2, r3
 80135ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	b292      	uxth	r2, r2
 80135b4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135c0:	4413      	add	r3, r2
 80135c2:	b299      	uxth	r1, r3
 80135c4:	4b3c      	ldr	r3, [pc, #240]	; (80136b8 <tcp_receive+0xf14>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	b29a      	uxth	r2, r3
 80135ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	1a8a      	subs	r2, r1, r2
 80135d0:	b292      	uxth	r2, r2
 80135d2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80135d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135d6:	681b      	ldr	r3, [r3, #0]
 80135d8:	685a      	ldr	r2, [r3, #4]
 80135da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	891b      	ldrh	r3, [r3, #8]
 80135e0:	4619      	mov	r1, r3
 80135e2:	4610      	mov	r0, r2
 80135e4:	f7fb fa00 	bl	800e9e8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80135e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	891c      	ldrh	r4, [r3, #8]
 80135ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	68db      	ldr	r3, [r3, #12]
 80135f4:	899b      	ldrh	r3, [r3, #12]
 80135f6:	b29b      	uxth	r3, r3
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7f9 fd05 	bl	800d008 <lwip_htons>
 80135fe:	4603      	mov	r3, r0
 8013600:	b2db      	uxtb	r3, r3
 8013602:	f003 0303 	and.w	r3, r3, #3
 8013606:	2b00      	cmp	r3, #0
 8013608:	d001      	beq.n	801360e <tcp_receive+0xe6a>
 801360a:	2301      	movs	r3, #1
 801360c:	e000      	b.n	8013610 <tcp_receive+0xe6c>
 801360e:	2300      	movs	r3, #0
 8013610:	4423      	add	r3, r4
 8013612:	b29a      	uxth	r2, r3
 8013614:	4b2a      	ldr	r3, [pc, #168]	; (80136c0 <tcp_receive+0xf1c>)
 8013616:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013618:	4b29      	ldr	r3, [pc, #164]	; (80136c0 <tcp_receive+0xf1c>)
 801361a:	881b      	ldrh	r3, [r3, #0]
 801361c:	461a      	mov	r2, r3
 801361e:	4b26      	ldr	r3, [pc, #152]	; (80136b8 <tcp_receive+0xf14>)
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	441a      	add	r2, r3
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013628:	6879      	ldr	r1, [r7, #4]
 801362a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801362c:	440b      	add	r3, r1
 801362e:	429a      	cmp	r2, r3
 8013630:	d019      	beq.n	8013666 <tcp_receive+0xec2>
 8013632:	4b24      	ldr	r3, [pc, #144]	; (80136c4 <tcp_receive+0xf20>)
 8013634:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013638:	4923      	ldr	r1, [pc, #140]	; (80136c8 <tcp_receive+0xf24>)
 801363a:	4824      	ldr	r0, [pc, #144]	; (80136cc <tcp_receive+0xf28>)
 801363c:	f005 fbe6 	bl	8018e0c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013640:	e011      	b.n	8013666 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	63bb      	str	r3, [r7, #56]	; 0x38
 8013648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801364a:	2b00      	cmp	r3, #0
 801364c:	f47f aea4 	bne.w	8013398 <tcp_receive+0xbf4>
 8013650:	e00a      	b.n	8013668 <tcp_receive+0xec4>
                break;
 8013652:	bf00      	nop
 8013654:	e008      	b.n	8013668 <tcp_receive+0xec4>
                break;
 8013656:	bf00      	nop
 8013658:	e006      	b.n	8013668 <tcp_receive+0xec4>
                  break;
 801365a:	bf00      	nop
 801365c:	e004      	b.n	8013668 <tcp_receive+0xec4>
                  break;
 801365e:	bf00      	nop
 8013660:	e002      	b.n	8013668 <tcp_receive+0xec4>
                  break;
 8013662:	bf00      	nop
 8013664:	e000      	b.n	8013668 <tcp_receive+0xec4>
                break;
 8013666:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013668:	6878      	ldr	r0, [r7, #4]
 801366a:	f001 fe8b 	bl	8015384 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801366e:	e003      	b.n	8013678 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f001 fe87 	bl	8015384 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013676:	e01a      	b.n	80136ae <tcp_receive+0xf0a>
 8013678:	e019      	b.n	80136ae <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801367a:	4b0f      	ldr	r3, [pc, #60]	; (80136b8 <tcp_receive+0xf14>)
 801367c:	681a      	ldr	r2, [r3, #0]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013682:	1ad3      	subs	r3, r2, r3
 8013684:	2b00      	cmp	r3, #0
 8013686:	db0a      	blt.n	801369e <tcp_receive+0xefa>
 8013688:	4b0b      	ldr	r3, [pc, #44]	; (80136b8 <tcp_receive+0xf14>)
 801368a:	681a      	ldr	r2, [r3, #0]
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013690:	6879      	ldr	r1, [r7, #4]
 8013692:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013694:	440b      	add	r3, r1
 8013696:	1ad3      	subs	r3, r2, r3
 8013698:	3301      	adds	r3, #1
 801369a:	2b00      	cmp	r3, #0
 801369c:	dd07      	ble.n	80136ae <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	8b5b      	ldrh	r3, [r3, #26]
 80136a2:	f043 0302 	orr.w	r3, r3, #2
 80136a6:	b29a      	uxth	r2, r3
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80136ac:	e7ff      	b.n	80136ae <tcp_receive+0xf0a>
 80136ae:	bf00      	nop
 80136b0:	3750      	adds	r7, #80	; 0x50
 80136b2:	46bd      	mov	sp, r7
 80136b4:	bdb0      	pop	{r4, r5, r7, pc}
 80136b6:	bf00      	nop
 80136b8:	20004efc 	.word	0x20004efc
 80136bc:	20004edc 	.word	0x20004edc
 80136c0:	20004f06 	.word	0x20004f06
 80136c4:	0801c024 	.word	0x0801c024
 80136c8:	0801c3cc 	.word	0x0801c3cc
 80136cc:	0801c070 	.word	0x0801c070

080136d0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80136d0:	b480      	push	{r7}
 80136d2:	b083      	sub	sp, #12
 80136d4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80136d6:	4b15      	ldr	r3, [pc, #84]	; (801372c <tcp_get_next_optbyte+0x5c>)
 80136d8:	881b      	ldrh	r3, [r3, #0]
 80136da:	1c5a      	adds	r2, r3, #1
 80136dc:	b291      	uxth	r1, r2
 80136de:	4a13      	ldr	r2, [pc, #76]	; (801372c <tcp_get_next_optbyte+0x5c>)
 80136e0:	8011      	strh	r1, [r2, #0]
 80136e2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80136e4:	4b12      	ldr	r3, [pc, #72]	; (8013730 <tcp_get_next_optbyte+0x60>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d004      	beq.n	80136f6 <tcp_get_next_optbyte+0x26>
 80136ec:	4b11      	ldr	r3, [pc, #68]	; (8013734 <tcp_get_next_optbyte+0x64>)
 80136ee:	881b      	ldrh	r3, [r3, #0]
 80136f0:	88fa      	ldrh	r2, [r7, #6]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d208      	bcs.n	8013708 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80136f6:	4b10      	ldr	r3, [pc, #64]	; (8013738 <tcp_get_next_optbyte+0x68>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	3314      	adds	r3, #20
 80136fc:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80136fe:	88fb      	ldrh	r3, [r7, #6]
 8013700:	683a      	ldr	r2, [r7, #0]
 8013702:	4413      	add	r3, r2
 8013704:	781b      	ldrb	r3, [r3, #0]
 8013706:	e00b      	b.n	8013720 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013708:	88fb      	ldrh	r3, [r7, #6]
 801370a:	b2da      	uxtb	r2, r3
 801370c:	4b09      	ldr	r3, [pc, #36]	; (8013734 <tcp_get_next_optbyte+0x64>)
 801370e:	881b      	ldrh	r3, [r3, #0]
 8013710:	b2db      	uxtb	r3, r3
 8013712:	1ad3      	subs	r3, r2, r3
 8013714:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013716:	4b06      	ldr	r3, [pc, #24]	; (8013730 <tcp_get_next_optbyte+0x60>)
 8013718:	681a      	ldr	r2, [r3, #0]
 801371a:	797b      	ldrb	r3, [r7, #5]
 801371c:	4413      	add	r3, r2
 801371e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013720:	4618      	mov	r0, r3
 8013722:	370c      	adds	r7, #12
 8013724:	46bd      	mov	sp, r7
 8013726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801372a:	4770      	bx	lr
 801372c:	20004ef8 	.word	0x20004ef8
 8013730:	20004ef4 	.word	0x20004ef4
 8013734:	20004ef2 	.word	0x20004ef2
 8013738:	20004eec 	.word	0x20004eec

0801373c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d106      	bne.n	8013758 <tcp_parseopt+0x1c>
 801374a:	4b32      	ldr	r3, [pc, #200]	; (8013814 <tcp_parseopt+0xd8>)
 801374c:	f240 727d 	movw	r2, #1917	; 0x77d
 8013750:	4931      	ldr	r1, [pc, #196]	; (8013818 <tcp_parseopt+0xdc>)
 8013752:	4832      	ldr	r0, [pc, #200]	; (801381c <tcp_parseopt+0xe0>)
 8013754:	f005 fb5a 	bl	8018e0c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013758:	4b31      	ldr	r3, [pc, #196]	; (8013820 <tcp_parseopt+0xe4>)
 801375a:	881b      	ldrh	r3, [r3, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d055      	beq.n	801380c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013760:	4b30      	ldr	r3, [pc, #192]	; (8013824 <tcp_parseopt+0xe8>)
 8013762:	2200      	movs	r2, #0
 8013764:	801a      	strh	r2, [r3, #0]
 8013766:	e045      	b.n	80137f4 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8013768:	f7ff ffb2 	bl	80136d0 <tcp_get_next_optbyte>
 801376c:	4603      	mov	r3, r0
 801376e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013770:	7bfb      	ldrb	r3, [r7, #15]
 8013772:	2b02      	cmp	r3, #2
 8013774:	d006      	beq.n	8013784 <tcp_parseopt+0x48>
 8013776:	2b02      	cmp	r3, #2
 8013778:	dc2b      	bgt.n	80137d2 <tcp_parseopt+0x96>
 801377a:	2b00      	cmp	r3, #0
 801377c:	d041      	beq.n	8013802 <tcp_parseopt+0xc6>
 801377e:	2b01      	cmp	r3, #1
 8013780:	d127      	bne.n	80137d2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013782:	e037      	b.n	80137f4 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013784:	f7ff ffa4 	bl	80136d0 <tcp_get_next_optbyte>
 8013788:	4603      	mov	r3, r0
 801378a:	2b04      	cmp	r3, #4
 801378c:	d13b      	bne.n	8013806 <tcp_parseopt+0xca>
 801378e:	4b25      	ldr	r3, [pc, #148]	; (8013824 <tcp_parseopt+0xe8>)
 8013790:	881b      	ldrh	r3, [r3, #0]
 8013792:	3301      	adds	r3, #1
 8013794:	4a22      	ldr	r2, [pc, #136]	; (8013820 <tcp_parseopt+0xe4>)
 8013796:	8812      	ldrh	r2, [r2, #0]
 8013798:	4293      	cmp	r3, r2
 801379a:	da34      	bge.n	8013806 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801379c:	f7ff ff98 	bl	80136d0 <tcp_get_next_optbyte>
 80137a0:	4603      	mov	r3, r0
 80137a2:	b29b      	uxth	r3, r3
 80137a4:	021b      	lsls	r3, r3, #8
 80137a6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80137a8:	f7ff ff92 	bl	80136d0 <tcp_get_next_optbyte>
 80137ac:	4603      	mov	r3, r0
 80137ae:	b29a      	uxth	r2, r3
 80137b0:	89bb      	ldrh	r3, [r7, #12]
 80137b2:	4313      	orrs	r3, r2
 80137b4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80137b6:	89bb      	ldrh	r3, [r7, #12]
 80137b8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80137bc:	d804      	bhi.n	80137c8 <tcp_parseopt+0x8c>
 80137be:	89bb      	ldrh	r3, [r7, #12]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d001      	beq.n	80137c8 <tcp_parseopt+0x8c>
 80137c4:	89ba      	ldrh	r2, [r7, #12]
 80137c6:	e001      	b.n	80137cc <tcp_parseopt+0x90>
 80137c8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80137d0:	e010      	b.n	80137f4 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80137d2:	f7ff ff7d 	bl	80136d0 <tcp_get_next_optbyte>
 80137d6:	4603      	mov	r3, r0
 80137d8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80137da:	7afb      	ldrb	r3, [r7, #11]
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d914      	bls.n	801380a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80137e0:	7afb      	ldrb	r3, [r7, #11]
 80137e2:	b29a      	uxth	r2, r3
 80137e4:	4b0f      	ldr	r3, [pc, #60]	; (8013824 <tcp_parseopt+0xe8>)
 80137e6:	881b      	ldrh	r3, [r3, #0]
 80137e8:	4413      	add	r3, r2
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	3b02      	subs	r3, #2
 80137ee:	b29a      	uxth	r2, r3
 80137f0:	4b0c      	ldr	r3, [pc, #48]	; (8013824 <tcp_parseopt+0xe8>)
 80137f2:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80137f4:	4b0b      	ldr	r3, [pc, #44]	; (8013824 <tcp_parseopt+0xe8>)
 80137f6:	881a      	ldrh	r2, [r3, #0]
 80137f8:	4b09      	ldr	r3, [pc, #36]	; (8013820 <tcp_parseopt+0xe4>)
 80137fa:	881b      	ldrh	r3, [r3, #0]
 80137fc:	429a      	cmp	r2, r3
 80137fe:	d3b3      	bcc.n	8013768 <tcp_parseopt+0x2c>
 8013800:	e004      	b.n	801380c <tcp_parseopt+0xd0>
          return;
 8013802:	bf00      	nop
 8013804:	e002      	b.n	801380c <tcp_parseopt+0xd0>
            return;
 8013806:	bf00      	nop
 8013808:	e000      	b.n	801380c <tcp_parseopt+0xd0>
            return;
 801380a:	bf00      	nop
      }
    }
  }
}
 801380c:	3710      	adds	r7, #16
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
 8013812:	bf00      	nop
 8013814:	0801c024 	.word	0x0801c024
 8013818:	0801c488 	.word	0x0801c488
 801381c:	0801c070 	.word	0x0801c070
 8013820:	20004ef0 	.word	0x20004ef0
 8013824:	20004ef8 	.word	0x20004ef8

08013828 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013828:	b480      	push	{r7}
 801382a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801382c:	4b05      	ldr	r3, [pc, #20]	; (8013844 <tcp_trigger_input_pcb_close+0x1c>)
 801382e:	781b      	ldrb	r3, [r3, #0]
 8013830:	f043 0310 	orr.w	r3, r3, #16
 8013834:	b2da      	uxtb	r2, r3
 8013836:	4b03      	ldr	r3, [pc, #12]	; (8013844 <tcp_trigger_input_pcb_close+0x1c>)
 8013838:	701a      	strb	r2, [r3, #0]
}
 801383a:	bf00      	nop
 801383c:	46bd      	mov	sp, r7
 801383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013842:	4770      	bx	lr
 8013844:	20004f09 	.word	0x20004f09

08013848 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b084      	sub	sp, #16
 801384c:	af00      	add	r7, sp, #0
 801384e:	60f8      	str	r0, [r7, #12]
 8013850:	60b9      	str	r1, [r7, #8]
 8013852:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d00a      	beq.n	8013870 <tcp_route+0x28>
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	7a1b      	ldrb	r3, [r3, #8]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d006      	beq.n	8013870 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	7a1b      	ldrb	r3, [r3, #8]
 8013866:	4618      	mov	r0, r3
 8013868:	f7fa feb6 	bl	800e5d8 <netif_get_by_index>
 801386c:	4603      	mov	r3, r0
 801386e:	e003      	b.n	8013878 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f003 fe35 	bl	80174e0 <ip4_route>
 8013876:	4603      	mov	r3, r0
  }
}
 8013878:	4618      	mov	r0, r3
 801387a:	3710      	adds	r7, #16
 801387c:	46bd      	mov	sp, r7
 801387e:	bd80      	pop	{r7, pc}

08013880 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013880:	b590      	push	{r4, r7, lr}
 8013882:	b087      	sub	sp, #28
 8013884:	af00      	add	r7, sp, #0
 8013886:	60f8      	str	r0, [r7, #12]
 8013888:	60b9      	str	r1, [r7, #8]
 801388a:	603b      	str	r3, [r7, #0]
 801388c:	4613      	mov	r3, r2
 801388e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d105      	bne.n	80138a2 <tcp_create_segment+0x22>
 8013896:	4b44      	ldr	r3, [pc, #272]	; (80139a8 <tcp_create_segment+0x128>)
 8013898:	22a3      	movs	r2, #163	; 0xa3
 801389a:	4944      	ldr	r1, [pc, #272]	; (80139ac <tcp_create_segment+0x12c>)
 801389c:	4844      	ldr	r0, [pc, #272]	; (80139b0 <tcp_create_segment+0x130>)
 801389e:	f005 fab5 	bl	8018e0c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d105      	bne.n	80138b4 <tcp_create_segment+0x34>
 80138a8:	4b3f      	ldr	r3, [pc, #252]	; (80139a8 <tcp_create_segment+0x128>)
 80138aa:	22a4      	movs	r2, #164	; 0xa4
 80138ac:	4941      	ldr	r1, [pc, #260]	; (80139b4 <tcp_create_segment+0x134>)
 80138ae:	4840      	ldr	r0, [pc, #256]	; (80139b0 <tcp_create_segment+0x130>)
 80138b0:	f005 faac 	bl	8018e0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80138b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80138b8:	009b      	lsls	r3, r3, #2
 80138ba:	b2db      	uxtb	r3, r3
 80138bc:	f003 0304 	and.w	r3, r3, #4
 80138c0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80138c2:	2003      	movs	r0, #3
 80138c4:	f7fa fb20 	bl	800df08 <memp_malloc>
 80138c8:	6138      	str	r0, [r7, #16]
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d104      	bne.n	80138da <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80138d0:	68b8      	ldr	r0, [r7, #8]
 80138d2:	f7fb fa41 	bl	800ed58 <pbuf_free>
    return NULL;
 80138d6:	2300      	movs	r3, #0
 80138d8:	e061      	b.n	801399e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80138e0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80138e2:	693b      	ldr	r3, [r7, #16]
 80138e4:	2200      	movs	r2, #0
 80138e6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	68ba      	ldr	r2, [r7, #8]
 80138ec:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	891a      	ldrh	r2, [r3, #8]
 80138f2:	7dfb      	ldrb	r3, [r7, #23]
 80138f4:	b29b      	uxth	r3, r3
 80138f6:	429a      	cmp	r2, r3
 80138f8:	d205      	bcs.n	8013906 <tcp_create_segment+0x86>
 80138fa:	4b2b      	ldr	r3, [pc, #172]	; (80139a8 <tcp_create_segment+0x128>)
 80138fc:	22b0      	movs	r2, #176	; 0xb0
 80138fe:	492e      	ldr	r1, [pc, #184]	; (80139b8 <tcp_create_segment+0x138>)
 8013900:	482b      	ldr	r0, [pc, #172]	; (80139b0 <tcp_create_segment+0x130>)
 8013902:	f005 fa83 	bl	8018e0c <iprintf>
  seg->len = p->tot_len - optlen;
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	891a      	ldrh	r2, [r3, #8]
 801390a:	7dfb      	ldrb	r3, [r7, #23]
 801390c:	b29b      	uxth	r3, r3
 801390e:	1ad3      	subs	r3, r2, r3
 8013910:	b29a      	uxth	r2, r3
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013916:	2114      	movs	r1, #20
 8013918:	68b8      	ldr	r0, [r7, #8]
 801391a:	f7fb f955 	bl	800ebc8 <pbuf_add_header>
 801391e:	4603      	mov	r3, r0
 8013920:	2b00      	cmp	r3, #0
 8013922:	d004      	beq.n	801392e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013924:	6938      	ldr	r0, [r7, #16]
 8013926:	f7fd f804 	bl	8010932 <tcp_seg_free>
    return NULL;
 801392a:	2300      	movs	r3, #0
 801392c:	e037      	b.n	801399e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801392e:	693b      	ldr	r3, [r7, #16]
 8013930:	685b      	ldr	r3, [r3, #4]
 8013932:	685a      	ldr	r2, [r3, #4]
 8013934:	693b      	ldr	r3, [r7, #16]
 8013936:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	8ada      	ldrh	r2, [r3, #22]
 801393c:	693b      	ldr	r3, [r7, #16]
 801393e:	68dc      	ldr	r4, [r3, #12]
 8013940:	4610      	mov	r0, r2
 8013942:	f7f9 fb61 	bl	800d008 <lwip_htons>
 8013946:	4603      	mov	r3, r0
 8013948:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	8b1a      	ldrh	r2, [r3, #24]
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	68dc      	ldr	r4, [r3, #12]
 8013952:	4610      	mov	r0, r2
 8013954:	f7f9 fb58 	bl	800d008 <lwip_htons>
 8013958:	4603      	mov	r3, r0
 801395a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	68dc      	ldr	r4, [r3, #12]
 8013960:	6838      	ldr	r0, [r7, #0]
 8013962:	f7f9 fb66 	bl	800d032 <lwip_htonl>
 8013966:	4603      	mov	r3, r0
 8013968:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801396a:	7dfb      	ldrb	r3, [r7, #23]
 801396c:	089b      	lsrs	r3, r3, #2
 801396e:	b2db      	uxtb	r3, r3
 8013970:	b29b      	uxth	r3, r3
 8013972:	3305      	adds	r3, #5
 8013974:	b29b      	uxth	r3, r3
 8013976:	031b      	lsls	r3, r3, #12
 8013978:	b29a      	uxth	r2, r3
 801397a:	79fb      	ldrb	r3, [r7, #7]
 801397c:	b29b      	uxth	r3, r3
 801397e:	4313      	orrs	r3, r2
 8013980:	b29a      	uxth	r2, r3
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	68dc      	ldr	r4, [r3, #12]
 8013986:	4610      	mov	r0, r2
 8013988:	f7f9 fb3e 	bl	800d008 <lwip_htons>
 801398c:	4603      	mov	r3, r0
 801398e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	68db      	ldr	r3, [r3, #12]
 8013994:	2200      	movs	r2, #0
 8013996:	749a      	strb	r2, [r3, #18]
 8013998:	2200      	movs	r2, #0
 801399a:	74da      	strb	r2, [r3, #19]
  return seg;
 801399c:	693b      	ldr	r3, [r7, #16]
}
 801399e:	4618      	mov	r0, r3
 80139a0:	371c      	adds	r7, #28
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd90      	pop	{r4, r7, pc}
 80139a6:	bf00      	nop
 80139a8:	0801c4a4 	.word	0x0801c4a4
 80139ac:	0801c4d8 	.word	0x0801c4d8
 80139b0:	0801c4f8 	.word	0x0801c4f8
 80139b4:	0801c520 	.word	0x0801c520
 80139b8:	0801c544 	.word	0x0801c544

080139bc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80139bc:	b580      	push	{r7, lr}
 80139be:	b086      	sub	sp, #24
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	607b      	str	r3, [r7, #4]
 80139c4:	4603      	mov	r3, r0
 80139c6:	73fb      	strb	r3, [r7, #15]
 80139c8:	460b      	mov	r3, r1
 80139ca:	81bb      	strh	r3, [r7, #12]
 80139cc:	4613      	mov	r3, r2
 80139ce:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80139d0:	89bb      	ldrh	r3, [r7, #12]
 80139d2:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d105      	bne.n	80139e6 <tcp_pbuf_prealloc+0x2a>
 80139da:	4b30      	ldr	r3, [pc, #192]	; (8013a9c <tcp_pbuf_prealloc+0xe0>)
 80139dc:	22e8      	movs	r2, #232	; 0xe8
 80139de:	4930      	ldr	r1, [pc, #192]	; (8013aa0 <tcp_pbuf_prealloc+0xe4>)
 80139e0:	4830      	ldr	r0, [pc, #192]	; (8013aa4 <tcp_pbuf_prealloc+0xe8>)
 80139e2:	f005 fa13 	bl	8018e0c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80139e6:	6a3b      	ldr	r3, [r7, #32]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d105      	bne.n	80139f8 <tcp_pbuf_prealloc+0x3c>
 80139ec:	4b2b      	ldr	r3, [pc, #172]	; (8013a9c <tcp_pbuf_prealloc+0xe0>)
 80139ee:	22e9      	movs	r2, #233	; 0xe9
 80139f0:	492d      	ldr	r1, [pc, #180]	; (8013aa8 <tcp_pbuf_prealloc+0xec>)
 80139f2:	482c      	ldr	r0, [pc, #176]	; (8013aa4 <tcp_pbuf_prealloc+0xe8>)
 80139f4:	f005 fa0a 	bl	8018e0c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80139f8:	89ba      	ldrh	r2, [r7, #12]
 80139fa:	897b      	ldrh	r3, [r7, #10]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d221      	bcs.n	8013a44 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013a00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013a04:	f003 0302 	and.w	r3, r3, #2
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d111      	bne.n	8013a30 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013a0c:	6a3b      	ldr	r3, [r7, #32]
 8013a0e:	8b5b      	ldrh	r3, [r3, #26]
 8013a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d115      	bne.n	8013a44 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013a18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d007      	beq.n	8013a30 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013a20:	6a3b      	ldr	r3, [r7, #32]
 8013a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d103      	bne.n	8013a30 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8013a28:	6a3b      	ldr	r3, [r7, #32]
 8013a2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d009      	beq.n	8013a44 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013a30:	89bb      	ldrh	r3, [r7, #12]
 8013a32:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8013a36:	f023 0203 	bic.w	r2, r3, #3
 8013a3a:	897b      	ldrh	r3, [r7, #10]
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	bf28      	it	cs
 8013a40:	4613      	movcs	r3, r2
 8013a42:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013a44:	8af9      	ldrh	r1, [r7, #22]
 8013a46:	7bfb      	ldrb	r3, [r7, #15]
 8013a48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	f7fa fe6d 	bl	800e72c <pbuf_alloc>
 8013a52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d101      	bne.n	8013a5e <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	e019      	b.n	8013a92 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013a5e:	693b      	ldr	r3, [r7, #16]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d006      	beq.n	8013a74 <tcp_pbuf_prealloc+0xb8>
 8013a66:	4b0d      	ldr	r3, [pc, #52]	; (8013a9c <tcp_pbuf_prealloc+0xe0>)
 8013a68:	f240 120b 	movw	r2, #267	; 0x10b
 8013a6c:	490f      	ldr	r1, [pc, #60]	; (8013aac <tcp_pbuf_prealloc+0xf0>)
 8013a6e:	480d      	ldr	r0, [pc, #52]	; (8013aa4 <tcp_pbuf_prealloc+0xe8>)
 8013a70:	f005 f9cc 	bl	8018e0c <iprintf>
  *oversize = p->len - length;
 8013a74:	693b      	ldr	r3, [r7, #16]
 8013a76:	895a      	ldrh	r2, [r3, #10]
 8013a78:	89bb      	ldrh	r3, [r7, #12]
 8013a7a:	1ad3      	subs	r3, r2, r3
 8013a7c:	b29a      	uxth	r2, r3
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	89ba      	ldrh	r2, [r7, #12]
 8013a86:	811a      	strh	r2, [r3, #8]
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	891a      	ldrh	r2, [r3, #8]
 8013a8c:	693b      	ldr	r3, [r7, #16]
 8013a8e:	815a      	strh	r2, [r3, #10]
  return p;
 8013a90:	693b      	ldr	r3, [r7, #16]
}
 8013a92:	4618      	mov	r0, r3
 8013a94:	3718      	adds	r7, #24
 8013a96:	46bd      	mov	sp, r7
 8013a98:	bd80      	pop	{r7, pc}
 8013a9a:	bf00      	nop
 8013a9c:	0801c4a4 	.word	0x0801c4a4
 8013aa0:	0801c55c 	.word	0x0801c55c
 8013aa4:	0801c4f8 	.word	0x0801c4f8
 8013aa8:	0801c580 	.word	0x0801c580
 8013aac:	0801c5a0 	.word	0x0801c5a0

08013ab0 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
 8013ab8:	460b      	mov	r3, r1
 8013aba:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d106      	bne.n	8013ad0 <tcp_write_checks+0x20>
 8013ac2:	4b33      	ldr	r3, [pc, #204]	; (8013b90 <tcp_write_checks+0xe0>)
 8013ac4:	f240 1233 	movw	r2, #307	; 0x133
 8013ac8:	4932      	ldr	r1, [pc, #200]	; (8013b94 <tcp_write_checks+0xe4>)
 8013aca:	4833      	ldr	r0, [pc, #204]	; (8013b98 <tcp_write_checks+0xe8>)
 8013acc:	f005 f99e 	bl	8018e0c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	7d1b      	ldrb	r3, [r3, #20]
 8013ad4:	2b04      	cmp	r3, #4
 8013ad6:	d00e      	beq.n	8013af6 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013adc:	2b07      	cmp	r3, #7
 8013ade:	d00a      	beq.n	8013af6 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013ae4:	2b02      	cmp	r3, #2
 8013ae6:	d006      	beq.n	8013af6 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013aec:	2b03      	cmp	r3, #3
 8013aee:	d002      	beq.n	8013af6 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013af0:	f06f 030a 	mvn.w	r3, #10
 8013af4:	e048      	b.n	8013b88 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013af6:	887b      	ldrh	r3, [r7, #2]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d101      	bne.n	8013b00 <tcp_write_checks+0x50>
    return ERR_OK;
 8013afc:	2300      	movs	r3, #0
 8013afe:	e043      	b.n	8013b88 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013b06:	887a      	ldrh	r2, [r7, #2]
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d909      	bls.n	8013b20 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	8b5b      	ldrh	r3, [r3, #26]
 8013b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b14:	b29a      	uxth	r2, r3
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8013b1e:	e033      	b.n	8013b88 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b26:	2b08      	cmp	r3, #8
 8013b28:	d909      	bls.n	8013b3e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	8b5b      	ldrh	r3, [r3, #26]
 8013b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b32:	b29a      	uxth	r2, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8013b38:	f04f 33ff 	mov.w	r3, #4294967295
 8013b3c:	e024      	b.n	8013b88 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d00f      	beq.n	8013b68 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d11a      	bne.n	8013b86 <tcp_write_checks+0xd6>
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d116      	bne.n	8013b86 <tcp_write_checks+0xd6>
 8013b58:	4b0d      	ldr	r3, [pc, #52]	; (8013b90 <tcp_write_checks+0xe0>)
 8013b5a:	f240 1255 	movw	r2, #341	; 0x155
 8013b5e:	490f      	ldr	r1, [pc, #60]	; (8013b9c <tcp_write_checks+0xec>)
 8013b60:	480d      	ldr	r0, [pc, #52]	; (8013b98 <tcp_write_checks+0xe8>)
 8013b62:	f005 f953 	bl	8018e0c <iprintf>
 8013b66:	e00e      	b.n	8013b86 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d103      	bne.n	8013b78 <tcp_write_checks+0xc8>
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	d006      	beq.n	8013b86 <tcp_write_checks+0xd6>
 8013b78:	4b05      	ldr	r3, [pc, #20]	; (8013b90 <tcp_write_checks+0xe0>)
 8013b7a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013b7e:	4908      	ldr	r1, [pc, #32]	; (8013ba0 <tcp_write_checks+0xf0>)
 8013b80:	4805      	ldr	r0, [pc, #20]	; (8013b98 <tcp_write_checks+0xe8>)
 8013b82:	f005 f943 	bl	8018e0c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013b86:	2300      	movs	r3, #0
}
 8013b88:	4618      	mov	r0, r3
 8013b8a:	3708      	adds	r7, #8
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	0801c4a4 	.word	0x0801c4a4
 8013b94:	0801c5b4 	.word	0x0801c5b4
 8013b98:	0801c4f8 	.word	0x0801c4f8
 8013b9c:	0801c5d4 	.word	0x0801c5d4
 8013ba0:	0801c610 	.word	0x0801c610

08013ba4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013ba4:	b590      	push	{r4, r7, lr}
 8013ba6:	b09b      	sub	sp, #108	; 0x6c
 8013ba8:	af04      	add	r7, sp, #16
 8013baa:	60f8      	str	r0, [r7, #12]
 8013bac:	60b9      	str	r1, [r7, #8]
 8013bae:	4611      	mov	r1, r2
 8013bb0:	461a      	mov	r2, r3
 8013bb2:	460b      	mov	r3, r1
 8013bb4:	80fb      	strh	r3, [r7, #6]
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013bbe:	2300      	movs	r3, #0
 8013bc0:	653b      	str	r3, [r7, #80]	; 0x50
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8013bca:	2300      	movs	r3, #0
 8013bcc:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013bce:	2300      	movs	r3, #0
 8013bd0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013bd4:	2300      	movs	r3, #0
 8013bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013bde:	2300      	movs	r3, #0
 8013be0:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013be2:	2300      	movs	r3, #0
 8013be4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d109      	bne.n	8013c00 <tcp_write+0x5c>
 8013bec:	4ba4      	ldr	r3, [pc, #656]	; (8013e80 <tcp_write+0x2dc>)
 8013bee:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013bf2:	49a4      	ldr	r1, [pc, #656]	; (8013e84 <tcp_write+0x2e0>)
 8013bf4:	48a4      	ldr	r0, [pc, #656]	; (8013e88 <tcp_write+0x2e4>)
 8013bf6:	f005 f909 	bl	8018e0c <iprintf>
 8013bfa:	f06f 030f 	mvn.w	r3, #15
 8013bfe:	e32a      	b.n	8014256 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013c06:	085b      	lsrs	r3, r3, #1
 8013c08:	b29a      	uxth	r2, r3
 8013c0a:	68fb      	ldr	r3, [r7, #12]
 8013c0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	bf28      	it	cs
 8013c12:	4613      	movcs	r3, r2
 8013c14:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013c16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d102      	bne.n	8013c22 <tcp_write+0x7e>
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c20:	e000      	b.n	8013c24 <tcp_write+0x80>
 8013c22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c24:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d109      	bne.n	8013c40 <tcp_write+0x9c>
 8013c2c:	4b94      	ldr	r3, [pc, #592]	; (8013e80 <tcp_write+0x2dc>)
 8013c2e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013c32:	4996      	ldr	r1, [pc, #600]	; (8013e8c <tcp_write+0x2e8>)
 8013c34:	4894      	ldr	r0, [pc, #592]	; (8013e88 <tcp_write+0x2e4>)
 8013c36:	f005 f8e9 	bl	8018e0c <iprintf>
 8013c3a:	f06f 030f 	mvn.w	r3, #15
 8013c3e:	e30a      	b.n	8014256 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013c40:	88fb      	ldrh	r3, [r7, #6]
 8013c42:	4619      	mov	r1, r3
 8013c44:	68f8      	ldr	r0, [r7, #12]
 8013c46:	f7ff ff33 	bl	8013ab0 <tcp_write_checks>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013c50:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	d002      	beq.n	8013c5e <tcp_write+0xba>
    return err;
 8013c58:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013c5c:	e2fb      	b.n	8014256 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c64:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013c68:	2300      	movs	r3, #0
 8013c6a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013c6e:	68fb      	ldr	r3, [r7, #12]
 8013c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	f000 80f6 	beq.w	8013e64 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c7c:	653b      	str	r3, [r7, #80]	; 0x50
 8013c7e:	e002      	b.n	8013c86 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013c80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d1f8      	bne.n	8013c80 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013c90:	7a9b      	ldrb	r3, [r3, #10]
 8013c92:	009b      	lsls	r3, r3, #2
 8013c94:	b29b      	uxth	r3, r3
 8013c96:	f003 0304 	and.w	r3, r3, #4
 8013c9a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013c9c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ca0:	891b      	ldrh	r3, [r3, #8]
 8013ca2:	4619      	mov	r1, r3
 8013ca4:	8c3b      	ldrh	r3, [r7, #32]
 8013ca6:	440b      	add	r3, r1
 8013ca8:	429a      	cmp	r2, r3
 8013caa:	da06      	bge.n	8013cba <tcp_write+0x116>
 8013cac:	4b74      	ldr	r3, [pc, #464]	; (8013e80 <tcp_write+0x2dc>)
 8013cae:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013cb2:	4977      	ldr	r1, [pc, #476]	; (8013e90 <tcp_write+0x2ec>)
 8013cb4:	4874      	ldr	r0, [pc, #464]	; (8013e88 <tcp_write+0x2e4>)
 8013cb6:	f005 f8a9 	bl	8018e0c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8013cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cbc:	891a      	ldrh	r2, [r3, #8]
 8013cbe:	8c3b      	ldrh	r3, [r7, #32]
 8013cc0:	4413      	add	r3, r2
 8013cc2:	b29b      	uxth	r3, r3
 8013cc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013cc6:	1ad3      	subs	r3, r2, r3
 8013cc8:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013cd0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013cd2:	8a7b      	ldrh	r3, [r7, #18]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d026      	beq.n	8013d26 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013cd8:	8a7b      	ldrh	r3, [r7, #18]
 8013cda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013cdc:	429a      	cmp	r2, r3
 8013cde:	d206      	bcs.n	8013cee <tcp_write+0x14a>
 8013ce0:	4b67      	ldr	r3, [pc, #412]	; (8013e80 <tcp_write+0x2dc>)
 8013ce2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013ce6:	496b      	ldr	r1, [pc, #428]	; (8013e94 <tcp_write+0x2f0>)
 8013ce8:	4867      	ldr	r0, [pc, #412]	; (8013e88 <tcp_write+0x2e4>)
 8013cea:	f005 f88f 	bl	8018e0c <iprintf>
      seg = last_unsent;
 8013cee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013cf2:	8a7b      	ldrh	r3, [r7, #18]
 8013cf4:	88fa      	ldrh	r2, [r7, #6]
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	bf28      	it	cs
 8013cfa:	4613      	movcs	r3, r2
 8013cfc:	b29b      	uxth	r3, r3
 8013cfe:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013d00:	4293      	cmp	r3, r2
 8013d02:	bf28      	it	cs
 8013d04:	4613      	movcs	r3, r2
 8013d06:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8013d08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d0c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d0e:	4413      	add	r3, r2
 8013d10:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013d14:	8a7a      	ldrh	r2, [r7, #18]
 8013d16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d18:	1ad3      	subs	r3, r2, r3
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013d1e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013d20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d22:	1ad3      	subs	r3, r2, r3
 8013d24:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8013d26:	8a7b      	ldrh	r3, [r7, #18]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d00b      	beq.n	8013d44 <tcp_write+0x1a0>
 8013d2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d30:	88fb      	ldrh	r3, [r7, #6]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d006      	beq.n	8013d44 <tcp_write+0x1a0>
 8013d36:	4b52      	ldr	r3, [pc, #328]	; (8013e80 <tcp_write+0x2dc>)
 8013d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013d3c:	4956      	ldr	r1, [pc, #344]	; (8013e98 <tcp_write+0x2f4>)
 8013d3e:	4852      	ldr	r0, [pc, #328]	; (8013e88 <tcp_write+0x2e4>)
 8013d40:	f005 f864 	bl	8018e0c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013d44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d48:	88fb      	ldrh	r3, [r7, #6]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	f080 8167 	bcs.w	801401e <tcp_write+0x47a>
 8013d50:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	f000 8163 	beq.w	801401e <tcp_write+0x47a>
 8013d58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d5a:	891b      	ldrh	r3, [r3, #8]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	f000 815e 	beq.w	801401e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013d62:	88fa      	ldrh	r2, [r7, #6]
 8013d64:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013d68:	1ad2      	subs	r2, r2, r3
 8013d6a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d6c:	4293      	cmp	r3, r2
 8013d6e:	bfa8      	it	ge
 8013d70:	4613      	movge	r3, r2
 8013d72:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013d76:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013d78:	797b      	ldrb	r3, [r7, #5]
 8013d7a:	f003 0301 	and.w	r3, r3, #1
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d027      	beq.n	8013dd2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013d82:	f107 0012 	add.w	r0, r7, #18
 8013d86:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013d88:	8bf9      	ldrh	r1, [r7, #30]
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	9302      	str	r3, [sp, #8]
 8013d8e:	797b      	ldrb	r3, [r7, #5]
 8013d90:	9301      	str	r3, [sp, #4]
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	9300      	str	r3, [sp, #0]
 8013d96:	4603      	mov	r3, r0
 8013d98:	2000      	movs	r0, #0
 8013d9a:	f7ff fe0f 	bl	80139bc <tcp_pbuf_prealloc>
 8013d9e:	6578      	str	r0, [r7, #84]	; 0x54
 8013da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	f000 8225 	beq.w	80141f2 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013daa:	6858      	ldr	r0, [r3, #4]
 8013dac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013db0:	68ba      	ldr	r2, [r7, #8]
 8013db2:	4413      	add	r3, r2
 8013db4:	8bfa      	ldrh	r2, [r7, #30]
 8013db6:	4619      	mov	r1, r3
 8013db8:	f004 ff68 	bl	8018c8c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013dbc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013dbe:	f7fb f859 	bl	800ee74 <pbuf_clen>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	461a      	mov	r2, r3
 8013dc6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013dca:	4413      	add	r3, r2
 8013dcc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013dd0:	e041      	b.n	8013e56 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013dd4:	685b      	ldr	r3, [r3, #4]
 8013dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8013dd8:	e002      	b.n	8013de0 <tcp_write+0x23c>
 8013dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	637b      	str	r3, [r7, #52]	; 0x34
 8013de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d1f8      	bne.n	8013dda <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013dea:	7b1b      	ldrb	r3, [r3, #12]
 8013dec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d115      	bne.n	8013e20 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013df6:	685b      	ldr	r3, [r3, #4]
 8013df8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013dfa:	8952      	ldrh	r2, [r2, #10]
 8013dfc:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013dfe:	68ba      	ldr	r2, [r7, #8]
 8013e00:	429a      	cmp	r2, r3
 8013e02:	d10d      	bne.n	8013e20 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013e04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d006      	beq.n	8013e1a <tcp_write+0x276>
 8013e0c:	4b1c      	ldr	r3, [pc, #112]	; (8013e80 <tcp_write+0x2dc>)
 8013e0e:	f240 2231 	movw	r2, #561	; 0x231
 8013e12:	4922      	ldr	r1, [pc, #136]	; (8013e9c <tcp_write+0x2f8>)
 8013e14:	481c      	ldr	r0, [pc, #112]	; (8013e88 <tcp_write+0x2e4>)
 8013e16:	f004 fff9 	bl	8018e0c <iprintf>
          extendlen = seglen;
 8013e1a:	8bfb      	ldrh	r3, [r7, #30]
 8013e1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013e1e:	e01a      	b.n	8013e56 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013e20:	8bfb      	ldrh	r3, [r7, #30]
 8013e22:	2201      	movs	r2, #1
 8013e24:	4619      	mov	r1, r3
 8013e26:	2000      	movs	r0, #0
 8013e28:	f7fa fc80 	bl	800e72c <pbuf_alloc>
 8013e2c:	6578      	str	r0, [r7, #84]	; 0x54
 8013e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	f000 81e0 	beq.w	80141f6 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8013e36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e3a:	68ba      	ldr	r2, [r7, #8]
 8013e3c:	441a      	add	r2, r3
 8013e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e40:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013e42:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013e44:	f7fb f816 	bl	800ee74 <pbuf_clen>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013e50:	4413      	add	r3, r2
 8013e52:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8013e56:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013e5a:	8bfb      	ldrh	r3, [r7, #30]
 8013e5c:	4413      	add	r3, r2
 8013e5e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013e62:	e0dc      	b.n	801401e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	f000 80d7 	beq.w	801401e <tcp_write+0x47a>
 8013e70:	4b03      	ldr	r3, [pc, #12]	; (8013e80 <tcp_write+0x2dc>)
 8013e72:	f240 224a 	movw	r2, #586	; 0x24a
 8013e76:	490a      	ldr	r1, [pc, #40]	; (8013ea0 <tcp_write+0x2fc>)
 8013e78:	4803      	ldr	r0, [pc, #12]	; (8013e88 <tcp_write+0x2e4>)
 8013e7a:	f004 ffc7 	bl	8018e0c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013e7e:	e0ce      	b.n	801401e <tcp_write+0x47a>
 8013e80:	0801c4a4 	.word	0x0801c4a4
 8013e84:	0801c644 	.word	0x0801c644
 8013e88:	0801c4f8 	.word	0x0801c4f8
 8013e8c:	0801c65c 	.word	0x0801c65c
 8013e90:	0801c690 	.word	0x0801c690
 8013e94:	0801c6a8 	.word	0x0801c6a8
 8013e98:	0801c6c8 	.word	0x0801c6c8
 8013e9c:	0801c6e8 	.word	0x0801c6e8
 8013ea0:	0801c714 	.word	0x0801c714
    struct pbuf *p;
    u16_t left = len - pos;
 8013ea4:	88fa      	ldrh	r2, [r7, #6]
 8013ea6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013eaa:	1ad3      	subs	r3, r2, r3
 8013eac:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013eae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013eb2:	b29b      	uxth	r3, r3
 8013eb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013eb6:	1ad3      	subs	r3, r2, r3
 8013eb8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8013eba:	8b7a      	ldrh	r2, [r7, #26]
 8013ebc:	8bbb      	ldrh	r3, [r7, #28]
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	bf28      	it	cs
 8013ec2:	4613      	movcs	r3, r2
 8013ec4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013ec6:	797b      	ldrb	r3, [r7, #5]
 8013ec8:	f003 0301 	and.w	r3, r3, #1
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d036      	beq.n	8013f3e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013ed0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013ed4:	b29a      	uxth	r2, r3
 8013ed6:	8b3b      	ldrh	r3, [r7, #24]
 8013ed8:	4413      	add	r3, r2
 8013eda:	b299      	uxth	r1, r3
 8013edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	bf0c      	ite	eq
 8013ee2:	2301      	moveq	r3, #1
 8013ee4:	2300      	movne	r3, #0
 8013ee6:	b2db      	uxtb	r3, r3
 8013ee8:	f107 0012 	add.w	r0, r7, #18
 8013eec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013eee:	9302      	str	r3, [sp, #8]
 8013ef0:	797b      	ldrb	r3, [r7, #5]
 8013ef2:	9301      	str	r3, [sp, #4]
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	9300      	str	r3, [sp, #0]
 8013ef8:	4603      	mov	r3, r0
 8013efa:	2036      	movs	r0, #54	; 0x36
 8013efc:	f7ff fd5e 	bl	80139bc <tcp_pbuf_prealloc>
 8013f00:	6338      	str	r0, [r7, #48]	; 0x30
 8013f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	f000 8178 	beq.w	80141fa <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8013f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f0c:	895b      	ldrh	r3, [r3, #10]
 8013f0e:	8b3a      	ldrh	r2, [r7, #24]
 8013f10:	429a      	cmp	r2, r3
 8013f12:	d906      	bls.n	8013f22 <tcp_write+0x37e>
 8013f14:	4b8c      	ldr	r3, [pc, #560]	; (8014148 <tcp_write+0x5a4>)
 8013f16:	f240 2266 	movw	r2, #614	; 0x266
 8013f1a:	498c      	ldr	r1, [pc, #560]	; (801414c <tcp_write+0x5a8>)
 8013f1c:	488c      	ldr	r0, [pc, #560]	; (8014150 <tcp_write+0x5ac>)
 8013f1e:	f004 ff75 	bl	8018e0c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f24:	685a      	ldr	r2, [r3, #4]
 8013f26:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013f2a:	18d0      	adds	r0, r2, r3
 8013f2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f30:	68ba      	ldr	r2, [r7, #8]
 8013f32:	4413      	add	r3, r2
 8013f34:	8b3a      	ldrh	r2, [r7, #24]
 8013f36:	4619      	mov	r1, r3
 8013f38:	f004 fea8 	bl	8018c8c <memcpy>
 8013f3c:	e02f      	b.n	8013f9e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013f3e:	8a7b      	ldrh	r3, [r7, #18]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d006      	beq.n	8013f52 <tcp_write+0x3ae>
 8013f44:	4b80      	ldr	r3, [pc, #512]	; (8014148 <tcp_write+0x5a4>)
 8013f46:	f240 2271 	movw	r2, #625	; 0x271
 8013f4a:	4982      	ldr	r1, [pc, #520]	; (8014154 <tcp_write+0x5b0>)
 8013f4c:	4880      	ldr	r0, [pc, #512]	; (8014150 <tcp_write+0x5ac>)
 8013f4e:	f004 ff5d 	bl	8018e0c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013f52:	8b3b      	ldrh	r3, [r7, #24]
 8013f54:	2201      	movs	r2, #1
 8013f56:	4619      	mov	r1, r3
 8013f58:	2036      	movs	r0, #54	; 0x36
 8013f5a:	f7fa fbe7 	bl	800e72c <pbuf_alloc>
 8013f5e:	6178      	str	r0, [r7, #20]
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	f000 814b 	beq.w	80141fe <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8013f68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f6c:	68ba      	ldr	r2, [r7, #8]
 8013f6e:	441a      	add	r2, r3
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013f74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013f78:	b29b      	uxth	r3, r3
 8013f7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013f7e:	4619      	mov	r1, r3
 8013f80:	2036      	movs	r0, #54	; 0x36
 8013f82:	f7fa fbd3 	bl	800e72c <pbuf_alloc>
 8013f86:	6338      	str	r0, [r7, #48]	; 0x30
 8013f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d103      	bne.n	8013f96 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013f8e:	6978      	ldr	r0, [r7, #20]
 8013f90:	f7fa fee2 	bl	800ed58 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013f94:	e136      	b.n	8014204 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013f96:	6979      	ldr	r1, [r7, #20]
 8013f98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f9a:	f7fa ffab 	bl	800eef4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013f9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fa0:	f7fa ff68 	bl	800ee74 <pbuf_clen>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	461a      	mov	r2, r3
 8013fa8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013fac:	4413      	add	r3, r2
 8013fae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013fb2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013fb6:	2b09      	cmp	r3, #9
 8013fb8:	d903      	bls.n	8013fc2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8013fba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013fbc:	f7fa fecc 	bl	800ed58 <pbuf_free>
      goto memerr;
 8013fc0:	e120      	b.n	8014204 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013fc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013fca:	441a      	add	r2, r3
 8013fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013fd0:	9300      	str	r3, [sp, #0]
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013fd8:	68f8      	ldr	r0, [r7, #12]
 8013fda:	f7ff fc51 	bl	8013880 <tcp_create_segment>
 8013fde:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013fe0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	f000 810d 	beq.w	8014202 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d102      	bne.n	8013ff4 <tcp_write+0x450>
      queue = seg;
 8013fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8013ff2:	e00c      	b.n	801400e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013ff4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d106      	bne.n	8014008 <tcp_write+0x464>
 8013ffa:	4b53      	ldr	r3, [pc, #332]	; (8014148 <tcp_write+0x5a4>)
 8013ffc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014000:	4955      	ldr	r1, [pc, #340]	; (8014158 <tcp_write+0x5b4>)
 8014002:	4853      	ldr	r0, [pc, #332]	; (8014150 <tcp_write+0x5ac>)
 8014004:	f004 ff02 	bl	8018e0c <iprintf>
      prev_seg->next = seg;
 8014008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801400a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801400c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801400e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014010:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8014012:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014016:	8b3b      	ldrh	r3, [r7, #24]
 8014018:	4413      	add	r3, r2
 801401a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801401e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014022:	88fb      	ldrh	r3, [r7, #6]
 8014024:	429a      	cmp	r2, r3
 8014026:	f4ff af3d 	bcc.w	8013ea4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801402a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801402c:	2b00      	cmp	r3, #0
 801402e:	d02c      	beq.n	801408a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8014030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014032:	685b      	ldr	r3, [r3, #4]
 8014034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014036:	e01e      	b.n	8014076 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8014038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801403a:	891a      	ldrh	r2, [r3, #8]
 801403c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801403e:	4413      	add	r3, r2
 8014040:	b29a      	uxth	r2, r3
 8014042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014044:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8014046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d110      	bne.n	8014070 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801404e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014050:	685b      	ldr	r3, [r3, #4]
 8014052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014054:	8952      	ldrh	r2, [r2, #10]
 8014056:	4413      	add	r3, r2
 8014058:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801405a:	68b9      	ldr	r1, [r7, #8]
 801405c:	4618      	mov	r0, r3
 801405e:	f004 fe15 	bl	8018c8c <memcpy>
        p->len += oversize_used;
 8014062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014064:	895a      	ldrh	r2, [r3, #10]
 8014066:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014068:	4413      	add	r3, r2
 801406a:	b29a      	uxth	r2, r3
 801406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801406e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8014070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014078:	2b00      	cmp	r3, #0
 801407a:	d1dd      	bne.n	8014038 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801407c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801407e:	891a      	ldrh	r2, [r3, #8]
 8014080:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014082:	4413      	add	r3, r2
 8014084:	b29a      	uxth	r2, r3
 8014086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014088:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801408a:	8a7a      	ldrh	r2, [r7, #18]
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8014092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014094:	2b00      	cmp	r3, #0
 8014096:	d018      	beq.n	80140ca <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8014098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801409a:	2b00      	cmp	r3, #0
 801409c:	d106      	bne.n	80140ac <tcp_write+0x508>
 801409e:	4b2a      	ldr	r3, [pc, #168]	; (8014148 <tcp_write+0x5a4>)
 80140a0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80140a4:	492d      	ldr	r1, [pc, #180]	; (801415c <tcp_write+0x5b8>)
 80140a6:	482a      	ldr	r0, [pc, #168]	; (8014150 <tcp_write+0x5ac>)
 80140a8:	f004 feb0 	bl	8018e0c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80140ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140ae:	685b      	ldr	r3, [r3, #4]
 80140b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80140b2:	4618      	mov	r0, r3
 80140b4:	f7fa ff1e 	bl	800eef4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80140b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140ba:	891a      	ldrh	r2, [r3, #8]
 80140bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80140be:	891b      	ldrh	r3, [r3, #8]
 80140c0:	4413      	add	r3, r2
 80140c2:	b29a      	uxth	r2, r3
 80140c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140c6:	811a      	strh	r2, [r3, #8]
 80140c8:	e037      	b.n	801413a <tcp_write+0x596>
  } else if (extendlen > 0) {
 80140ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d034      	beq.n	801413a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80140d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d003      	beq.n	80140de <tcp_write+0x53a>
 80140d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140d8:	685b      	ldr	r3, [r3, #4]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d106      	bne.n	80140ec <tcp_write+0x548>
 80140de:	4b1a      	ldr	r3, [pc, #104]	; (8014148 <tcp_write+0x5a4>)
 80140e0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80140e4:	491e      	ldr	r1, [pc, #120]	; (8014160 <tcp_write+0x5bc>)
 80140e6:	481a      	ldr	r0, [pc, #104]	; (8014150 <tcp_write+0x5ac>)
 80140e8:	f004 fe90 	bl	8018e0c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80140ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80140ee:	685b      	ldr	r3, [r3, #4]
 80140f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80140f2:	e009      	b.n	8014108 <tcp_write+0x564>
      p->tot_len += extendlen;
 80140f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f6:	891a      	ldrh	r2, [r3, #8]
 80140f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80140fa:	4413      	add	r3, r2
 80140fc:	b29a      	uxth	r2, r3
 80140fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014100:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8014102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014104:	681b      	ldr	r3, [r3, #0]
 8014106:	62bb      	str	r3, [r7, #40]	; 0x28
 8014108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801410a:	681b      	ldr	r3, [r3, #0]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d1f1      	bne.n	80140f4 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8014110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014112:	891a      	ldrh	r2, [r3, #8]
 8014114:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014116:	4413      	add	r3, r2
 8014118:	b29a      	uxth	r2, r3
 801411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801411c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014120:	895a      	ldrh	r2, [r3, #10]
 8014122:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014124:	4413      	add	r3, r2
 8014126:	b29a      	uxth	r2, r3
 8014128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801412a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801412c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801412e:	891a      	ldrh	r2, [r3, #8]
 8014130:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014132:	4413      	add	r3, r2
 8014134:	b29a      	uxth	r2, r3
 8014136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014138:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801413a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801413c:	2b00      	cmp	r3, #0
 801413e:	d111      	bne.n	8014164 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8014140:	68fb      	ldr	r3, [r7, #12]
 8014142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014144:	66da      	str	r2, [r3, #108]	; 0x6c
 8014146:	e010      	b.n	801416a <tcp_write+0x5c6>
 8014148:	0801c4a4 	.word	0x0801c4a4
 801414c:	0801c744 	.word	0x0801c744
 8014150:	0801c4f8 	.word	0x0801c4f8
 8014154:	0801c784 	.word	0x0801c784
 8014158:	0801c794 	.word	0x0801c794
 801415c:	0801c7a8 	.word	0x0801c7a8
 8014160:	0801c7e0 	.word	0x0801c7e0
  } else {
    last_unsent->next = queue;
 8014164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014166:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014168:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801416e:	88fb      	ldrh	r3, [r7, #6]
 8014170:	441a      	add	r2, r3
 8014172:	68fb      	ldr	r3, [r7, #12]
 8014174:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801417c:	88fb      	ldrh	r3, [r7, #6]
 801417e:	1ad3      	subs	r3, r2, r3
 8014180:	b29a      	uxth	r2, r3
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801418e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014198:	2b00      	cmp	r3, #0
 801419a:	d00e      	beq.n	80141ba <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801419c:	68fb      	ldr	r3, [r7, #12]
 801419e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d10a      	bne.n	80141ba <tcp_write+0x616>
 80141a4:	68fb      	ldr	r3, [r7, #12]
 80141a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d106      	bne.n	80141ba <tcp_write+0x616>
 80141ac:	4b2c      	ldr	r3, [pc, #176]	; (8014260 <tcp_write+0x6bc>)
 80141ae:	f240 3212 	movw	r2, #786	; 0x312
 80141b2:	492c      	ldr	r1, [pc, #176]	; (8014264 <tcp_write+0x6c0>)
 80141b4:	482c      	ldr	r0, [pc, #176]	; (8014268 <tcp_write+0x6c4>)
 80141b6:	f004 fe29 	bl	8018e0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80141ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d016      	beq.n	80141ee <tcp_write+0x64a>
 80141c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141c2:	68db      	ldr	r3, [r3, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	d012      	beq.n	80141ee <tcp_write+0x64a>
 80141c8:	797b      	ldrb	r3, [r7, #5]
 80141ca:	f003 0302 	and.w	r3, r3, #2
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d10d      	bne.n	80141ee <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80141d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141d4:	68db      	ldr	r3, [r3, #12]
 80141d6:	899b      	ldrh	r3, [r3, #12]
 80141d8:	b29c      	uxth	r4, r3
 80141da:	2008      	movs	r0, #8
 80141dc:	f7f8 ff14 	bl	800d008 <lwip_htons>
 80141e0:	4603      	mov	r3, r0
 80141e2:	461a      	mov	r2, r3
 80141e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	4322      	orrs	r2, r4
 80141ea:	b292      	uxth	r2, r2
 80141ec:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80141ee:	2300      	movs	r3, #0
 80141f0:	e031      	b.n	8014256 <tcp_write+0x6b2>
          goto memerr;
 80141f2:	bf00      	nop
 80141f4:	e006      	b.n	8014204 <tcp_write+0x660>
            goto memerr;
 80141f6:	bf00      	nop
 80141f8:	e004      	b.n	8014204 <tcp_write+0x660>
        goto memerr;
 80141fa:	bf00      	nop
 80141fc:	e002      	b.n	8014204 <tcp_write+0x660>
        goto memerr;
 80141fe:	bf00      	nop
 8014200:	e000      	b.n	8014204 <tcp_write+0x660>
      goto memerr;
 8014202:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014204:	68fb      	ldr	r3, [r7, #12]
 8014206:	8b5b      	ldrh	r3, [r3, #26]
 8014208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801420c:	b29a      	uxth	r2, r3
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8014212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014214:	2b00      	cmp	r3, #0
 8014216:	d002      	beq.n	801421e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8014218:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801421a:	f7fa fd9d 	bl	800ed58 <pbuf_free>
  }
  if (queue != NULL) {
 801421e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014220:	2b00      	cmp	r3, #0
 8014222:	d002      	beq.n	801422a <tcp_write+0x686>
    tcp_segs_free(queue);
 8014224:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8014226:	f7fc fb6f 	bl	8010908 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014230:	2b00      	cmp	r3, #0
 8014232:	d00e      	beq.n	8014252 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014238:	2b00      	cmp	r3, #0
 801423a:	d10a      	bne.n	8014252 <tcp_write+0x6ae>
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014240:	2b00      	cmp	r3, #0
 8014242:	d106      	bne.n	8014252 <tcp_write+0x6ae>
 8014244:	4b06      	ldr	r3, [pc, #24]	; (8014260 <tcp_write+0x6bc>)
 8014246:	f240 3227 	movw	r2, #807	; 0x327
 801424a:	4906      	ldr	r1, [pc, #24]	; (8014264 <tcp_write+0x6c0>)
 801424c:	4806      	ldr	r0, [pc, #24]	; (8014268 <tcp_write+0x6c4>)
 801424e:	f004 fddd 	bl	8018e0c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8014252:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014256:	4618      	mov	r0, r3
 8014258:	375c      	adds	r7, #92	; 0x5c
 801425a:	46bd      	mov	sp, r7
 801425c:	bd90      	pop	{r4, r7, pc}
 801425e:	bf00      	nop
 8014260:	0801c4a4 	.word	0x0801c4a4
 8014264:	0801c818 	.word	0x0801c818
 8014268:	0801c4f8 	.word	0x0801c4f8

0801426c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801426c:	b590      	push	{r4, r7, lr}
 801426e:	b08b      	sub	sp, #44	; 0x2c
 8014270:	af02      	add	r7, sp, #8
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	460b      	mov	r3, r1
 8014276:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8014278:	2300      	movs	r3, #0
 801427a:	61fb      	str	r3, [r7, #28]
 801427c:	2300      	movs	r3, #0
 801427e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014280:	2300      	movs	r3, #0
 8014282:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d106      	bne.n	8014298 <tcp_split_unsent_seg+0x2c>
 801428a:	4b95      	ldr	r3, [pc, #596]	; (80144e0 <tcp_split_unsent_seg+0x274>)
 801428c:	f240 324b 	movw	r2, #843	; 0x34b
 8014290:	4994      	ldr	r1, [pc, #592]	; (80144e4 <tcp_split_unsent_seg+0x278>)
 8014292:	4895      	ldr	r0, [pc, #596]	; (80144e8 <tcp_split_unsent_seg+0x27c>)
 8014294:	f004 fdba 	bl	8018e0c <iprintf>

  useg = pcb->unsent;
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801429c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801429e:	697b      	ldr	r3, [r7, #20]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d102      	bne.n	80142aa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80142a4:	f04f 33ff 	mov.w	r3, #4294967295
 80142a8:	e116      	b.n	80144d8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80142aa:	887b      	ldrh	r3, [r7, #2]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d109      	bne.n	80142c4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80142b0:	4b8b      	ldr	r3, [pc, #556]	; (80144e0 <tcp_split_unsent_seg+0x274>)
 80142b2:	f240 3253 	movw	r2, #851	; 0x353
 80142b6:	498d      	ldr	r1, [pc, #564]	; (80144ec <tcp_split_unsent_seg+0x280>)
 80142b8:	488b      	ldr	r0, [pc, #556]	; (80144e8 <tcp_split_unsent_seg+0x27c>)
 80142ba:	f004 fda7 	bl	8018e0c <iprintf>
    return ERR_VAL;
 80142be:	f06f 0305 	mvn.w	r3, #5
 80142c2:	e109      	b.n	80144d8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	891b      	ldrh	r3, [r3, #8]
 80142c8:	887a      	ldrh	r2, [r7, #2]
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d301      	bcc.n	80142d2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80142ce:	2300      	movs	r3, #0
 80142d0:	e102      	b.n	80144d8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142d6:	887a      	ldrh	r2, [r7, #2]
 80142d8:	429a      	cmp	r2, r3
 80142da:	d906      	bls.n	80142ea <tcp_split_unsent_seg+0x7e>
 80142dc:	4b80      	ldr	r3, [pc, #512]	; (80144e0 <tcp_split_unsent_seg+0x274>)
 80142de:	f240 325b 	movw	r2, #859	; 0x35b
 80142e2:	4983      	ldr	r1, [pc, #524]	; (80144f0 <tcp_split_unsent_seg+0x284>)
 80142e4:	4880      	ldr	r0, [pc, #512]	; (80144e8 <tcp_split_unsent_seg+0x27c>)
 80142e6:	f004 fd91 	bl	8018e0c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	891b      	ldrh	r3, [r3, #8]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d106      	bne.n	8014300 <tcp_split_unsent_seg+0x94>
 80142f2:	4b7b      	ldr	r3, [pc, #492]	; (80144e0 <tcp_split_unsent_seg+0x274>)
 80142f4:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80142f8:	497e      	ldr	r1, [pc, #504]	; (80144f4 <tcp_split_unsent_seg+0x288>)
 80142fa:	487b      	ldr	r0, [pc, #492]	; (80144e8 <tcp_split_unsent_seg+0x27c>)
 80142fc:	f004 fd86 	bl	8018e0c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	7a9b      	ldrb	r3, [r3, #10]
 8014304:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8014306:	7bfb      	ldrb	r3, [r7, #15]
 8014308:	009b      	lsls	r3, r3, #2
 801430a:	b2db      	uxtb	r3, r3
 801430c:	f003 0304 	and.w	r3, r3, #4
 8014310:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014312:	697b      	ldr	r3, [r7, #20]
 8014314:	891a      	ldrh	r2, [r3, #8]
 8014316:	887b      	ldrh	r3, [r7, #2]
 8014318:	1ad3      	subs	r3, r2, r3
 801431a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801431c:	7bbb      	ldrb	r3, [r7, #14]
 801431e:	b29a      	uxth	r2, r3
 8014320:	89bb      	ldrh	r3, [r7, #12]
 8014322:	4413      	add	r3, r2
 8014324:	b29b      	uxth	r3, r3
 8014326:	f44f 7220 	mov.w	r2, #640	; 0x280
 801432a:	4619      	mov	r1, r3
 801432c:	2036      	movs	r0, #54	; 0x36
 801432e:	f7fa f9fd 	bl	800e72c <pbuf_alloc>
 8014332:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	2b00      	cmp	r3, #0
 8014338:	f000 80b7 	beq.w	80144aa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801433c:	697b      	ldr	r3, [r7, #20]
 801433e:	685b      	ldr	r3, [r3, #4]
 8014340:	891a      	ldrh	r2, [r3, #8]
 8014342:	697b      	ldr	r3, [r7, #20]
 8014344:	891b      	ldrh	r3, [r3, #8]
 8014346:	1ad3      	subs	r3, r2, r3
 8014348:	b29a      	uxth	r2, r3
 801434a:	887b      	ldrh	r3, [r7, #2]
 801434c:	4413      	add	r3, r2
 801434e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	6858      	ldr	r0, [r3, #4]
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	685a      	ldr	r2, [r3, #4]
 8014358:	7bbb      	ldrb	r3, [r7, #14]
 801435a:	18d1      	adds	r1, r2, r3
 801435c:	897b      	ldrh	r3, [r7, #10]
 801435e:	89ba      	ldrh	r2, [r7, #12]
 8014360:	f7fa ff00 	bl	800f164 <pbuf_copy_partial>
 8014364:	4603      	mov	r3, r0
 8014366:	461a      	mov	r2, r3
 8014368:	89bb      	ldrh	r3, [r7, #12]
 801436a:	4293      	cmp	r3, r2
 801436c:	f040 809f 	bne.w	80144ae <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014370:	697b      	ldr	r3, [r7, #20]
 8014372:	68db      	ldr	r3, [r3, #12]
 8014374:	899b      	ldrh	r3, [r3, #12]
 8014376:	b29b      	uxth	r3, r3
 8014378:	4618      	mov	r0, r3
 801437a:	f7f8 fe45 	bl	800d008 <lwip_htons>
 801437e:	4603      	mov	r3, r0
 8014380:	b2db      	uxtb	r3, r3
 8014382:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014386:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8014388:	2300      	movs	r3, #0
 801438a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801438c:	7efb      	ldrb	r3, [r7, #27]
 801438e:	f003 0308 	and.w	r3, r3, #8
 8014392:	2b00      	cmp	r3, #0
 8014394:	d007      	beq.n	80143a6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8014396:	7efb      	ldrb	r3, [r7, #27]
 8014398:	f023 0308 	bic.w	r3, r3, #8
 801439c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801439e:	7ebb      	ldrb	r3, [r7, #26]
 80143a0:	f043 0308 	orr.w	r3, r3, #8
 80143a4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80143a6:	7efb      	ldrb	r3, [r7, #27]
 80143a8:	f003 0301 	and.w	r3, r3, #1
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d007      	beq.n	80143c0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80143b0:	7efb      	ldrb	r3, [r7, #27]
 80143b2:	f023 0301 	bic.w	r3, r3, #1
 80143b6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80143b8:	7ebb      	ldrb	r3, [r7, #26]
 80143ba:	f043 0301 	orr.w	r3, r3, #1
 80143be:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80143c0:	697b      	ldr	r3, [r7, #20]
 80143c2:	68db      	ldr	r3, [r3, #12]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	4618      	mov	r0, r3
 80143c8:	f7f8 fe33 	bl	800d032 <lwip_htonl>
 80143cc:	4602      	mov	r2, r0
 80143ce:	887b      	ldrh	r3, [r7, #2]
 80143d0:	18d1      	adds	r1, r2, r3
 80143d2:	7eba      	ldrb	r2, [r7, #26]
 80143d4:	7bfb      	ldrb	r3, [r7, #15]
 80143d6:	9300      	str	r3, [sp, #0]
 80143d8:	460b      	mov	r3, r1
 80143da:	6939      	ldr	r1, [r7, #16]
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f7ff fa4f 	bl	8013880 <tcp_create_segment>
 80143e2:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80143e4:	69fb      	ldr	r3, [r7, #28]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d063      	beq.n	80144b2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	685b      	ldr	r3, [r3, #4]
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7fa fd40 	bl	800ee74 <pbuf_clen>
 80143f4:	4603      	mov	r3, r0
 80143f6:	461a      	mov	r2, r3
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80143fe:	1a9b      	subs	r3, r3, r2
 8014400:	b29a      	uxth	r2, r3
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	6858      	ldr	r0, [r3, #4]
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	685b      	ldr	r3, [r3, #4]
 8014410:	891a      	ldrh	r2, [r3, #8]
 8014412:	89bb      	ldrh	r3, [r7, #12]
 8014414:	1ad3      	subs	r3, r2, r3
 8014416:	b29b      	uxth	r3, r3
 8014418:	4619      	mov	r1, r3
 801441a:	f7fa fae5 	bl	800e9e8 <pbuf_realloc>
  useg->len -= remainder;
 801441e:	697b      	ldr	r3, [r7, #20]
 8014420:	891a      	ldrh	r2, [r3, #8]
 8014422:	89bb      	ldrh	r3, [r7, #12]
 8014424:	1ad3      	subs	r3, r2, r3
 8014426:	b29a      	uxth	r2, r3
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801442c:	697b      	ldr	r3, [r7, #20]
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	899b      	ldrh	r3, [r3, #12]
 8014432:	b29c      	uxth	r4, r3
 8014434:	7efb      	ldrb	r3, [r7, #27]
 8014436:	b29b      	uxth	r3, r3
 8014438:	4618      	mov	r0, r3
 801443a:	f7f8 fde5 	bl	800d008 <lwip_htons>
 801443e:	4603      	mov	r3, r0
 8014440:	461a      	mov	r2, r3
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	68db      	ldr	r3, [r3, #12]
 8014446:	4322      	orrs	r2, r4
 8014448:	b292      	uxth	r2, r2
 801444a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	685b      	ldr	r3, [r3, #4]
 8014450:	4618      	mov	r0, r3
 8014452:	f7fa fd0f 	bl	800ee74 <pbuf_clen>
 8014456:	4603      	mov	r3, r0
 8014458:	461a      	mov	r2, r3
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014460:	4413      	add	r3, r2
 8014462:	b29a      	uxth	r2, r3
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801446a:	69fb      	ldr	r3, [r7, #28]
 801446c:	685b      	ldr	r3, [r3, #4]
 801446e:	4618      	mov	r0, r3
 8014470:	f7fa fd00 	bl	800ee74 <pbuf_clen>
 8014474:	4603      	mov	r3, r0
 8014476:	461a      	mov	r2, r3
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801447e:	4413      	add	r3, r2
 8014480:	b29a      	uxth	r2, r3
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8014488:	697b      	ldr	r3, [r7, #20]
 801448a:	681a      	ldr	r2, [r3, #0]
 801448c:	69fb      	ldr	r3, [r7, #28]
 801448e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8014490:	697b      	ldr	r3, [r7, #20]
 8014492:	69fa      	ldr	r2, [r7, #28]
 8014494:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8014496:	69fb      	ldr	r3, [r7, #28]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d103      	bne.n	80144a6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2200      	movs	r2, #0
 80144a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80144a6:	2300      	movs	r3, #0
 80144a8:	e016      	b.n	80144d8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80144aa:	bf00      	nop
 80144ac:	e002      	b.n	80144b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80144ae:	bf00      	nop
 80144b0:	e000      	b.n	80144b4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80144b2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80144b4:	69fb      	ldr	r3, [r7, #28]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d006      	beq.n	80144c8 <tcp_split_unsent_seg+0x25c>
 80144ba:	4b09      	ldr	r3, [pc, #36]	; (80144e0 <tcp_split_unsent_seg+0x274>)
 80144bc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80144c0:	490d      	ldr	r1, [pc, #52]	; (80144f8 <tcp_split_unsent_seg+0x28c>)
 80144c2:	4809      	ldr	r0, [pc, #36]	; (80144e8 <tcp_split_unsent_seg+0x27c>)
 80144c4:	f004 fca2 	bl	8018e0c <iprintf>
  if (p != NULL) {
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d002      	beq.n	80144d4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80144ce:	6938      	ldr	r0, [r7, #16]
 80144d0:	f7fa fc42 	bl	800ed58 <pbuf_free>
  }

  return ERR_MEM;
 80144d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80144d8:	4618      	mov	r0, r3
 80144da:	3724      	adds	r7, #36	; 0x24
 80144dc:	46bd      	mov	sp, r7
 80144de:	bd90      	pop	{r4, r7, pc}
 80144e0:	0801c4a4 	.word	0x0801c4a4
 80144e4:	0801c838 	.word	0x0801c838
 80144e8:	0801c4f8 	.word	0x0801c4f8
 80144ec:	0801c85c 	.word	0x0801c85c
 80144f0:	0801c880 	.word	0x0801c880
 80144f4:	0801c890 	.word	0x0801c890
 80144f8:	0801c8a0 	.word	0x0801c8a0

080144fc <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80144fc:	b590      	push	{r4, r7, lr}
 80144fe:	b085      	sub	sp, #20
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2b00      	cmp	r3, #0
 8014508:	d106      	bne.n	8014518 <tcp_send_fin+0x1c>
 801450a:	4b21      	ldr	r3, [pc, #132]	; (8014590 <tcp_send_fin+0x94>)
 801450c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014510:	4920      	ldr	r1, [pc, #128]	; (8014594 <tcp_send_fin+0x98>)
 8014512:	4821      	ldr	r0, [pc, #132]	; (8014598 <tcp_send_fin+0x9c>)
 8014514:	f004 fc7a 	bl	8018e0c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801451c:	2b00      	cmp	r3, #0
 801451e:	d02e      	beq.n	801457e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014524:	60fb      	str	r3, [r7, #12]
 8014526:	e002      	b.n	801452e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d1f8      	bne.n	8014528 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8014536:	68fb      	ldr	r3, [r7, #12]
 8014538:	68db      	ldr	r3, [r3, #12]
 801453a:	899b      	ldrh	r3, [r3, #12]
 801453c:	b29b      	uxth	r3, r3
 801453e:	4618      	mov	r0, r3
 8014540:	f7f8 fd62 	bl	800d008 <lwip_htons>
 8014544:	4603      	mov	r3, r0
 8014546:	b2db      	uxtb	r3, r3
 8014548:	f003 0307 	and.w	r3, r3, #7
 801454c:	2b00      	cmp	r3, #0
 801454e:	d116      	bne.n	801457e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	68db      	ldr	r3, [r3, #12]
 8014554:	899b      	ldrh	r3, [r3, #12]
 8014556:	b29c      	uxth	r4, r3
 8014558:	2001      	movs	r0, #1
 801455a:	f7f8 fd55 	bl	800d008 <lwip_htons>
 801455e:	4603      	mov	r3, r0
 8014560:	461a      	mov	r2, r3
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	68db      	ldr	r3, [r3, #12]
 8014566:	4322      	orrs	r2, r4
 8014568:	b292      	uxth	r2, r2
 801456a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	8b5b      	ldrh	r3, [r3, #26]
 8014570:	f043 0320 	orr.w	r3, r3, #32
 8014574:	b29a      	uxth	r2, r3
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801457a:	2300      	movs	r3, #0
 801457c:	e004      	b.n	8014588 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801457e:	2101      	movs	r1, #1
 8014580:	6878      	ldr	r0, [r7, #4]
 8014582:	f000 f80b 	bl	801459c <tcp_enqueue_flags>
 8014586:	4603      	mov	r3, r0
}
 8014588:	4618      	mov	r0, r3
 801458a:	3714      	adds	r7, #20
 801458c:	46bd      	mov	sp, r7
 801458e:	bd90      	pop	{r4, r7, pc}
 8014590:	0801c4a4 	.word	0x0801c4a4
 8014594:	0801c8ac 	.word	0x0801c8ac
 8014598:	0801c4f8 	.word	0x0801c4f8

0801459c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b08a      	sub	sp, #40	; 0x28
 80145a0:	af02      	add	r7, sp, #8
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	460b      	mov	r3, r1
 80145a6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80145a8:	2300      	movs	r3, #0
 80145aa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80145ac:	2300      	movs	r3, #0
 80145ae:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80145b0:	78fb      	ldrb	r3, [r7, #3]
 80145b2:	f003 0303 	and.w	r3, r3, #3
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d106      	bne.n	80145c8 <tcp_enqueue_flags+0x2c>
 80145ba:	4b67      	ldr	r3, [pc, #412]	; (8014758 <tcp_enqueue_flags+0x1bc>)
 80145bc:	f240 4211 	movw	r2, #1041	; 0x411
 80145c0:	4966      	ldr	r1, [pc, #408]	; (801475c <tcp_enqueue_flags+0x1c0>)
 80145c2:	4867      	ldr	r0, [pc, #412]	; (8014760 <tcp_enqueue_flags+0x1c4>)
 80145c4:	f004 fc22 	bl	8018e0c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d106      	bne.n	80145dc <tcp_enqueue_flags+0x40>
 80145ce:	4b62      	ldr	r3, [pc, #392]	; (8014758 <tcp_enqueue_flags+0x1bc>)
 80145d0:	f240 4213 	movw	r2, #1043	; 0x413
 80145d4:	4963      	ldr	r1, [pc, #396]	; (8014764 <tcp_enqueue_flags+0x1c8>)
 80145d6:	4862      	ldr	r0, [pc, #392]	; (8014760 <tcp_enqueue_flags+0x1c4>)
 80145d8:	f004 fc18 	bl	8018e0c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80145dc:	78fb      	ldrb	r3, [r7, #3]
 80145de:	f003 0302 	and.w	r3, r3, #2
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d001      	beq.n	80145ea <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80145e6:	2301      	movs	r3, #1
 80145e8:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80145ea:	7ffb      	ldrb	r3, [r7, #31]
 80145ec:	009b      	lsls	r3, r3, #2
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	f003 0304 	and.w	r3, r3, #4
 80145f4:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80145f6:	7dfb      	ldrb	r3, [r7, #23]
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80145fe:	4619      	mov	r1, r3
 8014600:	2036      	movs	r0, #54	; 0x36
 8014602:	f7fa f893 	bl	800e72c <pbuf_alloc>
 8014606:	6138      	str	r0, [r7, #16]
 8014608:	693b      	ldr	r3, [r7, #16]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d109      	bne.n	8014622 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	8b5b      	ldrh	r3, [r3, #26]
 8014612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014616:	b29a      	uxth	r2, r3
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801461c:	f04f 33ff 	mov.w	r3, #4294967295
 8014620:	e095      	b.n	801474e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014622:	693b      	ldr	r3, [r7, #16]
 8014624:	895a      	ldrh	r2, [r3, #10]
 8014626:	7dfb      	ldrb	r3, [r7, #23]
 8014628:	b29b      	uxth	r3, r3
 801462a:	429a      	cmp	r2, r3
 801462c:	d206      	bcs.n	801463c <tcp_enqueue_flags+0xa0>
 801462e:	4b4a      	ldr	r3, [pc, #296]	; (8014758 <tcp_enqueue_flags+0x1bc>)
 8014630:	f240 4239 	movw	r2, #1081	; 0x439
 8014634:	494c      	ldr	r1, [pc, #304]	; (8014768 <tcp_enqueue_flags+0x1cc>)
 8014636:	484a      	ldr	r0, [pc, #296]	; (8014760 <tcp_enqueue_flags+0x1c4>)
 8014638:	f004 fbe8 	bl	8018e0c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014640:	78fa      	ldrb	r2, [r7, #3]
 8014642:	7ffb      	ldrb	r3, [r7, #31]
 8014644:	9300      	str	r3, [sp, #0]
 8014646:	460b      	mov	r3, r1
 8014648:	6939      	ldr	r1, [r7, #16]
 801464a:	6878      	ldr	r0, [r7, #4]
 801464c:	f7ff f918 	bl	8013880 <tcp_create_segment>
 8014650:	60f8      	str	r0, [r7, #12]
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d109      	bne.n	801466c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	8b5b      	ldrh	r3, [r3, #26]
 801465c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014660:	b29a      	uxth	r2, r3
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014666:	f04f 33ff 	mov.w	r3, #4294967295
 801466a:	e070      	b.n	801474e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	68db      	ldr	r3, [r3, #12]
 8014670:	f003 0303 	and.w	r3, r3, #3
 8014674:	2b00      	cmp	r3, #0
 8014676:	d006      	beq.n	8014686 <tcp_enqueue_flags+0xea>
 8014678:	4b37      	ldr	r3, [pc, #220]	; (8014758 <tcp_enqueue_flags+0x1bc>)
 801467a:	f240 4242 	movw	r2, #1090	; 0x442
 801467e:	493b      	ldr	r1, [pc, #236]	; (801476c <tcp_enqueue_flags+0x1d0>)
 8014680:	4837      	ldr	r0, [pc, #220]	; (8014760 <tcp_enqueue_flags+0x1c4>)
 8014682:	f004 fbc3 	bl	8018e0c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	891b      	ldrh	r3, [r3, #8]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d006      	beq.n	801469c <tcp_enqueue_flags+0x100>
 801468e:	4b32      	ldr	r3, [pc, #200]	; (8014758 <tcp_enqueue_flags+0x1bc>)
 8014690:	f240 4243 	movw	r2, #1091	; 0x443
 8014694:	4936      	ldr	r1, [pc, #216]	; (8014770 <tcp_enqueue_flags+0x1d4>)
 8014696:	4832      	ldr	r0, [pc, #200]	; (8014760 <tcp_enqueue_flags+0x1c4>)
 8014698:	f004 fbb8 	bl	8018e0c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d103      	bne.n	80146ac <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	68fa      	ldr	r2, [r7, #12]
 80146a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80146aa:	e00d      	b.n	80146c8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146b0:	61bb      	str	r3, [r7, #24]
 80146b2:	e002      	b.n	80146ba <tcp_enqueue_flags+0x11e>
 80146b4:	69bb      	ldr	r3, [r7, #24]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	61bb      	str	r3, [r7, #24]
 80146ba:	69bb      	ldr	r3, [r7, #24]
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d1f8      	bne.n	80146b4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	68fa      	ldr	r2, [r7, #12]
 80146c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	2200      	movs	r2, #0
 80146cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80146d0:	78fb      	ldrb	r3, [r7, #3]
 80146d2:	f003 0302 	and.w	r3, r3, #2
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d104      	bne.n	80146e4 <tcp_enqueue_flags+0x148>
 80146da:	78fb      	ldrb	r3, [r7, #3]
 80146dc:	f003 0301 	and.w	r3, r3, #1
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d004      	beq.n	80146ee <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80146e8:	1c5a      	adds	r2, r3, #1
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80146ee:	78fb      	ldrb	r3, [r7, #3]
 80146f0:	f003 0301 	and.w	r3, r3, #1
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d006      	beq.n	8014706 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	8b5b      	ldrh	r3, [r3, #26]
 80146fc:	f043 0320 	orr.w	r3, r3, #32
 8014700:	b29a      	uxth	r2, r3
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	4618      	mov	r0, r3
 801470c:	f7fa fbb2 	bl	800ee74 <pbuf_clen>
 8014710:	4603      	mov	r3, r0
 8014712:	461a      	mov	r2, r3
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801471a:	4413      	add	r3, r2
 801471c:	b29a      	uxth	r2, r3
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801472a:	2b00      	cmp	r3, #0
 801472c:	d00e      	beq.n	801474c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014732:	2b00      	cmp	r3, #0
 8014734:	d10a      	bne.n	801474c <tcp_enqueue_flags+0x1b0>
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801473a:	2b00      	cmp	r3, #0
 801473c:	d106      	bne.n	801474c <tcp_enqueue_flags+0x1b0>
 801473e:	4b06      	ldr	r3, [pc, #24]	; (8014758 <tcp_enqueue_flags+0x1bc>)
 8014740:	f240 4265 	movw	r2, #1125	; 0x465
 8014744:	490b      	ldr	r1, [pc, #44]	; (8014774 <tcp_enqueue_flags+0x1d8>)
 8014746:	4806      	ldr	r0, [pc, #24]	; (8014760 <tcp_enqueue_flags+0x1c4>)
 8014748:	f004 fb60 	bl	8018e0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801474c:	2300      	movs	r3, #0
}
 801474e:	4618      	mov	r0, r3
 8014750:	3720      	adds	r7, #32
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
 8014756:	bf00      	nop
 8014758:	0801c4a4 	.word	0x0801c4a4
 801475c:	0801c8c8 	.word	0x0801c8c8
 8014760:	0801c4f8 	.word	0x0801c4f8
 8014764:	0801c920 	.word	0x0801c920
 8014768:	0801c940 	.word	0x0801c940
 801476c:	0801c97c 	.word	0x0801c97c
 8014770:	0801c994 	.word	0x0801c994
 8014774:	0801c9c0 	.word	0x0801c9c0

08014778 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8014778:	b5b0      	push	{r4, r5, r7, lr}
 801477a:	b08a      	sub	sp, #40	; 0x28
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d106      	bne.n	8014794 <tcp_output+0x1c>
 8014786:	4b9e      	ldr	r3, [pc, #632]	; (8014a00 <tcp_output+0x288>)
 8014788:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801478c:	499d      	ldr	r1, [pc, #628]	; (8014a04 <tcp_output+0x28c>)
 801478e:	489e      	ldr	r0, [pc, #632]	; (8014a08 <tcp_output+0x290>)
 8014790:	f004 fb3c 	bl	8018e0c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	7d1b      	ldrb	r3, [r3, #20]
 8014798:	2b01      	cmp	r3, #1
 801479a:	d106      	bne.n	80147aa <tcp_output+0x32>
 801479c:	4b98      	ldr	r3, [pc, #608]	; (8014a00 <tcp_output+0x288>)
 801479e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80147a2:	499a      	ldr	r1, [pc, #616]	; (8014a0c <tcp_output+0x294>)
 80147a4:	4898      	ldr	r0, [pc, #608]	; (8014a08 <tcp_output+0x290>)
 80147a6:	f004 fb31 	bl	8018e0c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80147aa:	4b99      	ldr	r3, [pc, #612]	; (8014a10 <tcp_output+0x298>)
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	687a      	ldr	r2, [r7, #4]
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d101      	bne.n	80147b8 <tcp_output+0x40>
    return ERR_OK;
 80147b4:	2300      	movs	r3, #0
 80147b6:	e1ce      	b.n	8014b56 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80147c4:	4293      	cmp	r3, r2
 80147c6:	bf28      	it	cs
 80147c8:	4613      	movcs	r3, r2
 80147ca:	b29b      	uxth	r3, r3
 80147cc:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80147d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d10b      	bne.n	80147f2 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	8b5b      	ldrh	r3, [r3, #26]
 80147de:	f003 0302 	and.w	r3, r3, #2
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	f000 81aa 	beq.w	8014b3c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80147e8:	6878      	ldr	r0, [r7, #4]
 80147ea:	f000 fdcb 	bl	8015384 <tcp_send_empty_ack>
 80147ee:	4603      	mov	r3, r0
 80147f0:	e1b1      	b.n	8014b56 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80147f2:	6879      	ldr	r1, [r7, #4]
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	3304      	adds	r3, #4
 80147f8:	461a      	mov	r2, r3
 80147fa:	6878      	ldr	r0, [r7, #4]
 80147fc:	f7ff f824 	bl	8013848 <tcp_route>
 8014800:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014802:	697b      	ldr	r3, [r7, #20]
 8014804:	2b00      	cmp	r3, #0
 8014806:	d102      	bne.n	801480e <tcp_output+0x96>
    return ERR_RTE;
 8014808:	f06f 0303 	mvn.w	r3, #3
 801480c:	e1a3      	b.n	8014b56 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	2b00      	cmp	r3, #0
 8014812:	d003      	beq.n	801481c <tcp_output+0xa4>
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	2b00      	cmp	r3, #0
 801481a:	d111      	bne.n	8014840 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d002      	beq.n	8014828 <tcp_output+0xb0>
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	3304      	adds	r3, #4
 8014826:	e000      	b.n	801482a <tcp_output+0xb2>
 8014828:	2300      	movs	r3, #0
 801482a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801482c:	693b      	ldr	r3, [r7, #16]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d102      	bne.n	8014838 <tcp_output+0xc0>
      return ERR_RTE;
 8014832:	f06f 0303 	mvn.w	r3, #3
 8014836:	e18e      	b.n	8014b56 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8014838:	693b      	ldr	r3, [r7, #16]
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014842:	68db      	ldr	r3, [r3, #12]
 8014844:	685b      	ldr	r3, [r3, #4]
 8014846:	4618      	mov	r0, r3
 8014848:	f7f8 fbf3 	bl	800d032 <lwip_htonl>
 801484c:	4602      	mov	r2, r0
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014852:	1ad3      	subs	r3, r2, r3
 8014854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014856:	8912      	ldrh	r2, [r2, #8]
 8014858:	4413      	add	r3, r2
 801485a:	69ba      	ldr	r2, [r7, #24]
 801485c:	429a      	cmp	r2, r3
 801485e:	d227      	bcs.n	80148b0 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014866:	461a      	mov	r2, r3
 8014868:	69bb      	ldr	r3, [r7, #24]
 801486a:	4293      	cmp	r3, r2
 801486c:	d114      	bne.n	8014898 <tcp_output+0x120>
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014872:	2b00      	cmp	r3, #0
 8014874:	d110      	bne.n	8014898 <tcp_output+0x120>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801487c:	2b00      	cmp	r3, #0
 801487e:	d10b      	bne.n	8014898 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	2200      	movs	r2, #0
 8014884:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	2201      	movs	r2, #1
 801488c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	2200      	movs	r2, #0
 8014894:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	8b5b      	ldrh	r3, [r3, #26]
 801489c:	f003 0302 	and.w	r3, r3, #2
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	f000 814d 	beq.w	8014b40 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f000 fd6c 	bl	8015384 <tcp_send_empty_ack>
 80148ac:	4603      	mov	r3, r0
 80148ae:	e152      	b.n	8014b56 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	2200      	movs	r2, #0
 80148b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148bc:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80148be:	6a3b      	ldr	r3, [r7, #32]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	f000 811c 	beq.w	8014afe <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80148c6:	e002      	b.n	80148ce <tcp_output+0x156>
 80148c8:	6a3b      	ldr	r3, [r7, #32]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	623b      	str	r3, [r7, #32]
 80148ce:	6a3b      	ldr	r3, [r7, #32]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d1f8      	bne.n	80148c8 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80148d6:	e112      	b.n	8014afe <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80148d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148da:	68db      	ldr	r3, [r3, #12]
 80148dc:	899b      	ldrh	r3, [r3, #12]
 80148de:	b29b      	uxth	r3, r3
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7f8 fb91 	bl	800d008 <lwip_htons>
 80148e6:	4603      	mov	r3, r0
 80148e8:	b2db      	uxtb	r3, r3
 80148ea:	f003 0304 	and.w	r3, r3, #4
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d006      	beq.n	8014900 <tcp_output+0x188>
 80148f2:	4b43      	ldr	r3, [pc, #268]	; (8014a00 <tcp_output+0x288>)
 80148f4:	f240 5236 	movw	r2, #1334	; 0x536
 80148f8:	4946      	ldr	r1, [pc, #280]	; (8014a14 <tcp_output+0x29c>)
 80148fa:	4843      	ldr	r0, [pc, #268]	; (8014a08 <tcp_output+0x290>)
 80148fc:	f004 fa86 	bl	8018e0c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014904:	2b00      	cmp	r3, #0
 8014906:	d01f      	beq.n	8014948 <tcp_output+0x1d0>
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	8b5b      	ldrh	r3, [r3, #26]
 801490c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014910:	2b00      	cmp	r3, #0
 8014912:	d119      	bne.n	8014948 <tcp_output+0x1d0>
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014918:	2b00      	cmp	r3, #0
 801491a:	d00b      	beq.n	8014934 <tcp_output+0x1bc>
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d110      	bne.n	8014948 <tcp_output+0x1d0>
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801492a:	891a      	ldrh	r2, [r3, #8]
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014930:	429a      	cmp	r2, r3
 8014932:	d209      	bcs.n	8014948 <tcp_output+0x1d0>
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801493a:	2b00      	cmp	r3, #0
 801493c:	d004      	beq.n	8014948 <tcp_output+0x1d0>
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014944:	2b08      	cmp	r3, #8
 8014946:	d901      	bls.n	801494c <tcp_output+0x1d4>
 8014948:	2301      	movs	r3, #1
 801494a:	e000      	b.n	801494e <tcp_output+0x1d6>
 801494c:	2300      	movs	r3, #0
 801494e:	2b00      	cmp	r3, #0
 8014950:	d106      	bne.n	8014960 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	8b5b      	ldrh	r3, [r3, #26]
 8014956:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801495a:	2b00      	cmp	r3, #0
 801495c:	f000 80e4 	beq.w	8014b28 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	7d1b      	ldrb	r3, [r3, #20]
 8014964:	2b02      	cmp	r3, #2
 8014966:	d00d      	beq.n	8014984 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8014968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801496a:	68db      	ldr	r3, [r3, #12]
 801496c:	899b      	ldrh	r3, [r3, #12]
 801496e:	b29c      	uxth	r4, r3
 8014970:	2010      	movs	r0, #16
 8014972:	f7f8 fb49 	bl	800d008 <lwip_htons>
 8014976:	4603      	mov	r3, r0
 8014978:	461a      	mov	r2, r3
 801497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801497c:	68db      	ldr	r3, [r3, #12]
 801497e:	4322      	orrs	r2, r4
 8014980:	b292      	uxth	r2, r2
 8014982:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014984:	697a      	ldr	r2, [r7, #20]
 8014986:	6879      	ldr	r1, [r7, #4]
 8014988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801498a:	f000 f909 	bl	8014ba0 <tcp_output_segment>
 801498e:	4603      	mov	r3, r0
 8014990:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d009      	beq.n	80149ae <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	8b5b      	ldrh	r3, [r3, #26]
 801499e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80149a2:	b29a      	uxth	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	835a      	strh	r2, [r3, #26]
      return err;
 80149a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149ac:	e0d3      	b.n	8014b56 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80149ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80149b6:	687b      	ldr	r3, [r7, #4]
 80149b8:	7d1b      	ldrb	r3, [r3, #20]
 80149ba:	2b02      	cmp	r3, #2
 80149bc:	d006      	beq.n	80149cc <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	8b5b      	ldrh	r3, [r3, #26]
 80149c2:	f023 0303 	bic.w	r3, r3, #3
 80149c6:	b29a      	uxth	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80149cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149ce:	68db      	ldr	r3, [r3, #12]
 80149d0:	685b      	ldr	r3, [r3, #4]
 80149d2:	4618      	mov	r0, r3
 80149d4:	f7f8 fb2d 	bl	800d032 <lwip_htonl>
 80149d8:	4604      	mov	r4, r0
 80149da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149dc:	891b      	ldrh	r3, [r3, #8]
 80149de:	461d      	mov	r5, r3
 80149e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149e2:	68db      	ldr	r3, [r3, #12]
 80149e4:	899b      	ldrh	r3, [r3, #12]
 80149e6:	b29b      	uxth	r3, r3
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7f8 fb0d 	bl	800d008 <lwip_htons>
 80149ee:	4603      	mov	r3, r0
 80149f0:	b2db      	uxtb	r3, r3
 80149f2:	f003 0303 	and.w	r3, r3, #3
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d00e      	beq.n	8014a18 <tcp_output+0x2a0>
 80149fa:	2301      	movs	r3, #1
 80149fc:	e00d      	b.n	8014a1a <tcp_output+0x2a2>
 80149fe:	bf00      	nop
 8014a00:	0801c4a4 	.word	0x0801c4a4
 8014a04:	0801c9e8 	.word	0x0801c9e8
 8014a08:	0801c4f8 	.word	0x0801c4f8
 8014a0c:	0801ca00 	.word	0x0801ca00
 8014a10:	2000bcbc 	.word	0x2000bcbc
 8014a14:	0801ca28 	.word	0x0801ca28
 8014a18:	2300      	movs	r3, #0
 8014a1a:	442b      	add	r3, r5
 8014a1c:	4423      	add	r3, r4
 8014a1e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	1ad3      	subs	r3, r2, r3
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	da02      	bge.n	8014a32 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	68ba      	ldr	r2, [r7, #8]
 8014a30:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a34:	891b      	ldrh	r3, [r3, #8]
 8014a36:	461c      	mov	r4, r3
 8014a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a3a:	68db      	ldr	r3, [r3, #12]
 8014a3c:	899b      	ldrh	r3, [r3, #12]
 8014a3e:	b29b      	uxth	r3, r3
 8014a40:	4618      	mov	r0, r3
 8014a42:	f7f8 fae1 	bl	800d008 <lwip_htons>
 8014a46:	4603      	mov	r3, r0
 8014a48:	b2db      	uxtb	r3, r3
 8014a4a:	f003 0303 	and.w	r3, r3, #3
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d001      	beq.n	8014a56 <tcp_output+0x2de>
 8014a52:	2301      	movs	r3, #1
 8014a54:	e000      	b.n	8014a58 <tcp_output+0x2e0>
 8014a56:	2300      	movs	r3, #0
 8014a58:	4423      	add	r3, r4
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d049      	beq.n	8014af2 <tcp_output+0x37a>
      seg->next = NULL;
 8014a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a60:	2200      	movs	r2, #0
 8014a62:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d105      	bne.n	8014a78 <tcp_output+0x300>
        pcb->unacked = seg;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014a70:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a74:	623b      	str	r3, [r7, #32]
 8014a76:	e03f      	b.n	8014af8 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8014a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a7a:	68db      	ldr	r3, [r3, #12]
 8014a7c:	685b      	ldr	r3, [r3, #4]
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7f8 fad7 	bl	800d032 <lwip_htonl>
 8014a84:	4604      	mov	r4, r0
 8014a86:	6a3b      	ldr	r3, [r7, #32]
 8014a88:	68db      	ldr	r3, [r3, #12]
 8014a8a:	685b      	ldr	r3, [r3, #4]
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7f8 fad0 	bl	800d032 <lwip_htonl>
 8014a92:	4603      	mov	r3, r0
 8014a94:	1ae3      	subs	r3, r4, r3
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	da24      	bge.n	8014ae4 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	3370      	adds	r3, #112	; 0x70
 8014a9e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014aa0:	e002      	b.n	8014aa8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014aa2:	69fb      	ldr	r3, [r7, #28]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014aa8:	69fb      	ldr	r3, [r7, #28]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d011      	beq.n	8014ad4 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014ab0:	69fb      	ldr	r3, [r7, #28]
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	68db      	ldr	r3, [r3, #12]
 8014ab6:	685b      	ldr	r3, [r3, #4]
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7f8 faba 	bl	800d032 <lwip_htonl>
 8014abe:	4604      	mov	r4, r0
 8014ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ac2:	68db      	ldr	r3, [r3, #12]
 8014ac4:	685b      	ldr	r3, [r3, #4]
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f7f8 fab3 	bl	800d032 <lwip_htonl>
 8014acc:	4603      	mov	r3, r0
 8014ace:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	dbe6      	blt.n	8014aa2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014ad4:	69fb      	ldr	r3, [r7, #28]
 8014ad6:	681a      	ldr	r2, [r3, #0]
 8014ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ada:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014adc:	69fb      	ldr	r3, [r7, #28]
 8014ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ae0:	601a      	str	r2, [r3, #0]
 8014ae2:	e009      	b.n	8014af8 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014ae4:	6a3b      	ldr	r3, [r7, #32]
 8014ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ae8:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8014aea:	6a3b      	ldr	r3, [r7, #32]
 8014aec:	681b      	ldr	r3, [r3, #0]
 8014aee:	623b      	str	r3, [r7, #32]
 8014af0:	e002      	b.n	8014af8 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014af4:	f7fb ff1d 	bl	8010932 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014afc:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d012      	beq.n	8014b2a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b06:	68db      	ldr	r3, [r3, #12]
 8014b08:	685b      	ldr	r3, [r3, #4]
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	f7f8 fa91 	bl	800d032 <lwip_htonl>
 8014b10:	4602      	mov	r2, r0
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b16:	1ad3      	subs	r3, r2, r3
 8014b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014b1a:	8912      	ldrh	r2, [r2, #8]
 8014b1c:	4413      	add	r3, r2
  while (seg != NULL &&
 8014b1e:	69ba      	ldr	r2, [r7, #24]
 8014b20:	429a      	cmp	r2, r3
 8014b22:	f4bf aed9 	bcs.w	80148d8 <tcp_output+0x160>
 8014b26:	e000      	b.n	8014b2a <tcp_output+0x3b2>
      break;
 8014b28:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d108      	bne.n	8014b44 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	2200      	movs	r2, #0
 8014b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8014b3a:	e004      	b.n	8014b46 <tcp_output+0x3ce>
    goto output_done;
 8014b3c:	bf00      	nop
 8014b3e:	e002      	b.n	8014b46 <tcp_output+0x3ce>
    goto output_done;
 8014b40:	bf00      	nop
 8014b42:	e000      	b.n	8014b46 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014b44:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	8b5b      	ldrh	r3, [r3, #26]
 8014b4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014b4e:	b29a      	uxth	r2, r3
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014b54:	2300      	movs	r3, #0
}
 8014b56:	4618      	mov	r0, r3
 8014b58:	3728      	adds	r7, #40	; 0x28
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8014b5e:	bf00      	nop

08014b60 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b082      	sub	sp, #8
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d106      	bne.n	8014b7c <tcp_output_segment_busy+0x1c>
 8014b6e:	4b09      	ldr	r3, [pc, #36]	; (8014b94 <tcp_output_segment_busy+0x34>)
 8014b70:	f240 529a 	movw	r2, #1434	; 0x59a
 8014b74:	4908      	ldr	r1, [pc, #32]	; (8014b98 <tcp_output_segment_busy+0x38>)
 8014b76:	4809      	ldr	r0, [pc, #36]	; (8014b9c <tcp_output_segment_busy+0x3c>)
 8014b78:	f004 f948 	bl	8018e0c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	685b      	ldr	r3, [r3, #4]
 8014b80:	7b9b      	ldrb	r3, [r3, #14]
 8014b82:	2b01      	cmp	r3, #1
 8014b84:	d001      	beq.n	8014b8a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014b86:	2301      	movs	r3, #1
 8014b88:	e000      	b.n	8014b8c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8014b8a:	2300      	movs	r3, #0
}
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	3708      	adds	r7, #8
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}
 8014b94:	0801c4a4 	.word	0x0801c4a4
 8014b98:	0801ca40 	.word	0x0801ca40
 8014b9c:	0801c4f8 	.word	0x0801c4f8

08014ba0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014ba0:	b5b0      	push	{r4, r5, r7, lr}
 8014ba2:	b08c      	sub	sp, #48	; 0x30
 8014ba4:	af04      	add	r7, sp, #16
 8014ba6:	60f8      	str	r0, [r7, #12]
 8014ba8:	60b9      	str	r1, [r7, #8]
 8014baa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d106      	bne.n	8014bc0 <tcp_output_segment+0x20>
 8014bb2:	4b63      	ldr	r3, [pc, #396]	; (8014d40 <tcp_output_segment+0x1a0>)
 8014bb4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014bb8:	4962      	ldr	r1, [pc, #392]	; (8014d44 <tcp_output_segment+0x1a4>)
 8014bba:	4863      	ldr	r0, [pc, #396]	; (8014d48 <tcp_output_segment+0x1a8>)
 8014bbc:	f004 f926 	bl	8018e0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014bc0:	68bb      	ldr	r3, [r7, #8]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d106      	bne.n	8014bd4 <tcp_output_segment+0x34>
 8014bc6:	4b5e      	ldr	r3, [pc, #376]	; (8014d40 <tcp_output_segment+0x1a0>)
 8014bc8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014bcc:	495f      	ldr	r1, [pc, #380]	; (8014d4c <tcp_output_segment+0x1ac>)
 8014bce:	485e      	ldr	r0, [pc, #376]	; (8014d48 <tcp_output_segment+0x1a8>)
 8014bd0:	f004 f91c 	bl	8018e0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d106      	bne.n	8014be8 <tcp_output_segment+0x48>
 8014bda:	4b59      	ldr	r3, [pc, #356]	; (8014d40 <tcp_output_segment+0x1a0>)
 8014bdc:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014be0:	495b      	ldr	r1, [pc, #364]	; (8014d50 <tcp_output_segment+0x1b0>)
 8014be2:	4859      	ldr	r0, [pc, #356]	; (8014d48 <tcp_output_segment+0x1a8>)
 8014be4:	f004 f912 	bl	8018e0c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014be8:	68f8      	ldr	r0, [r7, #12]
 8014bea:	f7ff ffb9 	bl	8014b60 <tcp_output_segment_busy>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d001      	beq.n	8014bf8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	e09f      	b.n	8014d38 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	68dc      	ldr	r4, [r3, #12]
 8014c00:	4610      	mov	r0, r2
 8014c02:	f7f8 fa16 	bl	800d032 <lwip_htonl>
 8014c06:	4603      	mov	r3, r0
 8014c08:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	68dc      	ldr	r4, [r3, #12]
 8014c12:	4610      	mov	r0, r2
 8014c14:	f7f8 f9f8 	bl	800d008 <lwip_htons>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014c1c:	68bb      	ldr	r3, [r7, #8]
 8014c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c20:	68ba      	ldr	r2, [r7, #8]
 8014c22:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014c24:	441a      	add	r2, r3
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	68db      	ldr	r3, [r3, #12]
 8014c2e:	3314      	adds	r3, #20
 8014c30:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	7a9b      	ldrb	r3, [r3, #10]
 8014c36:	f003 0301 	and.w	r3, r3, #1
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d015      	beq.n	8014c6a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014c3e:	68bb      	ldr	r3, [r7, #8]
 8014c40:	3304      	adds	r3, #4
 8014c42:	461a      	mov	r2, r3
 8014c44:	6879      	ldr	r1, [r7, #4]
 8014c46:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014c4a:	f7fc fa37 	bl	80110bc <tcp_eff_send_mss_netif>
 8014c4e:	4603      	mov	r3, r0
 8014c50:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014c52:	8b7b      	ldrh	r3, [r7, #26]
 8014c54:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f7f8 f9ea 	bl	800d032 <lwip_htonl>
 8014c5e:	4602      	mov	r2, r0
 8014c60:	69fb      	ldr	r3, [r7, #28]
 8014c62:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014c64:	69fb      	ldr	r3, [r7, #28]
 8014c66:	3304      	adds	r3, #4
 8014c68:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014c6a:	68bb      	ldr	r3, [r7, #8]
 8014c6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	da02      	bge.n	8014c7a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	2200      	movs	r2, #0
 8014c78:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d10c      	bne.n	8014c9c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014c82:	4b34      	ldr	r3, [pc, #208]	; (8014d54 <tcp_output_segment+0x1b4>)
 8014c84:	681a      	ldr	r2, [r3, #0]
 8014c86:	68bb      	ldr	r3, [r7, #8]
 8014c88:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	68db      	ldr	r3, [r3, #12]
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7f8 f9ce 	bl	800d032 <lwip_htonl>
 8014c96:	4602      	mov	r2, r0
 8014c98:	68bb      	ldr	r3, [r7, #8]
 8014c9a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	68da      	ldr	r2, [r3, #12]
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	685b      	ldr	r3, [r3, #4]
 8014ca4:	685b      	ldr	r3, [r3, #4]
 8014ca6:	1ad3      	subs	r3, r2, r3
 8014ca8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	685b      	ldr	r3, [r3, #4]
 8014cae:	8959      	ldrh	r1, [r3, #10]
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	685b      	ldr	r3, [r3, #4]
 8014cb4:	8b3a      	ldrh	r2, [r7, #24]
 8014cb6:	1a8a      	subs	r2, r1, r2
 8014cb8:	b292      	uxth	r2, r2
 8014cba:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014cbc:	68fb      	ldr	r3, [r7, #12]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	8919      	ldrh	r1, [r3, #8]
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	685b      	ldr	r3, [r3, #4]
 8014cc6:	8b3a      	ldrh	r2, [r7, #24]
 8014cc8:	1a8a      	subs	r2, r1, r2
 8014cca:	b292      	uxth	r2, r2
 8014ccc:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	68fa      	ldr	r2, [r7, #12]
 8014cd4:	68d2      	ldr	r2, [r2, #12]
 8014cd6:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	68db      	ldr	r3, [r3, #12]
 8014cdc:	2200      	movs	r2, #0
 8014cde:	741a      	strb	r2, [r3, #16]
 8014ce0:	2200      	movs	r2, #0
 8014ce2:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	68db      	ldr	r3, [r3, #12]
 8014ce8:	f103 0214 	add.w	r2, r3, #20
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	7a9b      	ldrb	r3, [r3, #10]
 8014cf0:	009b      	lsls	r3, r3, #2
 8014cf2:	f003 0304 	and.w	r3, r3, #4
 8014cf6:	4413      	add	r3, r2
 8014cf8:	69fa      	ldr	r2, [r7, #28]
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d006      	beq.n	8014d0c <tcp_output_segment+0x16c>
 8014cfe:	4b10      	ldr	r3, [pc, #64]	; (8014d40 <tcp_output_segment+0x1a0>)
 8014d00:	f240 621c 	movw	r2, #1564	; 0x61c
 8014d04:	4914      	ldr	r1, [pc, #80]	; (8014d58 <tcp_output_segment+0x1b8>)
 8014d06:	4810      	ldr	r0, [pc, #64]	; (8014d48 <tcp_output_segment+0x1a8>)
 8014d08:	f004 f880 	bl	8018e0c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	6858      	ldr	r0, [r3, #4]
 8014d10:	68b9      	ldr	r1, [r7, #8]
 8014d12:	68bb      	ldr	r3, [r7, #8]
 8014d14:	1d1c      	adds	r4, r3, #4
 8014d16:	68bb      	ldr	r3, [r7, #8]
 8014d18:	7add      	ldrb	r5, [r3, #11]
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	7a9b      	ldrb	r3, [r3, #10]
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	9202      	str	r2, [sp, #8]
 8014d22:	2206      	movs	r2, #6
 8014d24:	9201      	str	r2, [sp, #4]
 8014d26:	9300      	str	r3, [sp, #0]
 8014d28:	462b      	mov	r3, r5
 8014d2a:	4622      	mov	r2, r4
 8014d2c:	f002 fd96 	bl	801785c <ip4_output_if>
 8014d30:	4603      	mov	r3, r0
 8014d32:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014d34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	3720      	adds	r7, #32
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8014d40:	0801c4a4 	.word	0x0801c4a4
 8014d44:	0801ca68 	.word	0x0801ca68
 8014d48:	0801c4f8 	.word	0x0801c4f8
 8014d4c:	0801ca88 	.word	0x0801ca88
 8014d50:	0801caa8 	.word	0x0801caa8
 8014d54:	2000bcac 	.word	0x2000bcac
 8014d58:	0801cacc 	.word	0x0801cacc

08014d5c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014d5c:	b5b0      	push	{r4, r5, r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d106      	bne.n	8014d78 <tcp_rexmit_rto_prepare+0x1c>
 8014d6a:	4b31      	ldr	r3, [pc, #196]	; (8014e30 <tcp_rexmit_rto_prepare+0xd4>)
 8014d6c:	f240 6263 	movw	r2, #1635	; 0x663
 8014d70:	4930      	ldr	r1, [pc, #192]	; (8014e34 <tcp_rexmit_rto_prepare+0xd8>)
 8014d72:	4831      	ldr	r0, [pc, #196]	; (8014e38 <tcp_rexmit_rto_prepare+0xdc>)
 8014d74:	f004 f84a 	bl	8018e0c <iprintf>

  if (pcb->unacked == NULL) {
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d102      	bne.n	8014d86 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014d80:	f06f 0305 	mvn.w	r3, #5
 8014d84:	e050      	b.n	8014e28 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d8a:	60fb      	str	r3, [r7, #12]
 8014d8c:	e00b      	b.n	8014da6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014d8e:	68f8      	ldr	r0, [r7, #12]
 8014d90:	f7ff fee6 	bl	8014b60 <tcp_output_segment_busy>
 8014d94:	4603      	mov	r3, r0
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d002      	beq.n	8014da0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014d9a:	f06f 0305 	mvn.w	r3, #5
 8014d9e:	e043      	b.n	8014e28 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	60fb      	str	r3, [r7, #12]
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d1ef      	bne.n	8014d8e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014dae:	68f8      	ldr	r0, [r7, #12]
 8014db0:	f7ff fed6 	bl	8014b60 <tcp_output_segment_busy>
 8014db4:	4603      	mov	r3, r0
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d002      	beq.n	8014dc0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014dba:	f06f 0305 	mvn.w	r3, #5
 8014dbe:	e033      	b.n	8014e28 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	2200      	movs	r2, #0
 8014dd4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	8b5b      	ldrh	r3, [r3, #26]
 8014dda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014dde:	b29a      	uxth	r2, r3
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014de4:	68fb      	ldr	r3, [r7, #12]
 8014de6:	68db      	ldr	r3, [r3, #12]
 8014de8:	685b      	ldr	r3, [r3, #4]
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7f8 f921 	bl	800d032 <lwip_htonl>
 8014df0:	4604      	mov	r4, r0
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	891b      	ldrh	r3, [r3, #8]
 8014df6:	461d      	mov	r5, r3
 8014df8:	68fb      	ldr	r3, [r7, #12]
 8014dfa:	68db      	ldr	r3, [r3, #12]
 8014dfc:	899b      	ldrh	r3, [r3, #12]
 8014dfe:	b29b      	uxth	r3, r3
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7f8 f901 	bl	800d008 <lwip_htons>
 8014e06:	4603      	mov	r3, r0
 8014e08:	b2db      	uxtb	r3, r3
 8014e0a:	f003 0303 	and.w	r3, r3, #3
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d001      	beq.n	8014e16 <tcp_rexmit_rto_prepare+0xba>
 8014e12:	2301      	movs	r3, #1
 8014e14:	e000      	b.n	8014e18 <tcp_rexmit_rto_prepare+0xbc>
 8014e16:	2300      	movs	r3, #0
 8014e18:	442b      	add	r3, r5
 8014e1a:	18e2      	adds	r2, r4, r3
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	2200      	movs	r2, #0
 8014e24:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014e26:	2300      	movs	r3, #0
}
 8014e28:	4618      	mov	r0, r3
 8014e2a:	3710      	adds	r7, #16
 8014e2c:	46bd      	mov	sp, r7
 8014e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8014e30:	0801c4a4 	.word	0x0801c4a4
 8014e34:	0801cae0 	.word	0x0801cae0
 8014e38:	0801c4f8 	.word	0x0801c4f8

08014e3c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014e3c:	b580      	push	{r7, lr}
 8014e3e:	b082      	sub	sp, #8
 8014e40:	af00      	add	r7, sp, #0
 8014e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d106      	bne.n	8014e58 <tcp_rexmit_rto_commit+0x1c>
 8014e4a:	4b0d      	ldr	r3, [pc, #52]	; (8014e80 <tcp_rexmit_rto_commit+0x44>)
 8014e4c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014e50:	490c      	ldr	r1, [pc, #48]	; (8014e84 <tcp_rexmit_rto_commit+0x48>)
 8014e52:	480d      	ldr	r0, [pc, #52]	; (8014e88 <tcp_rexmit_rto_commit+0x4c>)
 8014e54:	f003 ffda 	bl	8018e0c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014e5e:	2bff      	cmp	r3, #255	; 0xff
 8014e60:	d007      	beq.n	8014e72 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014e68:	3301      	adds	r3, #1
 8014e6a:	b2da      	uxtb	r2, r3
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f7ff fc80 	bl	8014778 <tcp_output>
}
 8014e78:	bf00      	nop
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	0801c4a4 	.word	0x0801c4a4
 8014e84:	0801cb04 	.word	0x0801cb04
 8014e88:	0801c4f8 	.word	0x0801c4f8

08014e8c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d106      	bne.n	8014ea8 <tcp_rexmit_rto+0x1c>
 8014e9a:	4b0a      	ldr	r3, [pc, #40]	; (8014ec4 <tcp_rexmit_rto+0x38>)
 8014e9c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014ea0:	4909      	ldr	r1, [pc, #36]	; (8014ec8 <tcp_rexmit_rto+0x3c>)
 8014ea2:	480a      	ldr	r0, [pc, #40]	; (8014ecc <tcp_rexmit_rto+0x40>)
 8014ea4:	f003 ffb2 	bl	8018e0c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f7ff ff57 	bl	8014d5c <tcp_rexmit_rto_prepare>
 8014eae:	4603      	mov	r3, r0
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d102      	bne.n	8014eba <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f7ff ffc1 	bl	8014e3c <tcp_rexmit_rto_commit>
  }
}
 8014eba:	bf00      	nop
 8014ebc:	3708      	adds	r7, #8
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	0801c4a4 	.word	0x0801c4a4
 8014ec8:	0801cb28 	.word	0x0801cb28
 8014ecc:	0801c4f8 	.word	0x0801c4f8

08014ed0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014ed0:	b590      	push	{r4, r7, lr}
 8014ed2:	b085      	sub	sp, #20
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d106      	bne.n	8014eec <tcp_rexmit+0x1c>
 8014ede:	4b2f      	ldr	r3, [pc, #188]	; (8014f9c <tcp_rexmit+0xcc>)
 8014ee0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014ee4:	492e      	ldr	r1, [pc, #184]	; (8014fa0 <tcp_rexmit+0xd0>)
 8014ee6:	482f      	ldr	r0, [pc, #188]	; (8014fa4 <tcp_rexmit+0xd4>)
 8014ee8:	f003 ff90 	bl	8018e0c <iprintf>

  if (pcb->unacked == NULL) {
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d102      	bne.n	8014efa <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014ef4:	f06f 0305 	mvn.w	r3, #5
 8014ef8:	e04c      	b.n	8014f94 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014efe:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014f00:	68b8      	ldr	r0, [r7, #8]
 8014f02:	f7ff fe2d 	bl	8014b60 <tcp_output_segment_busy>
 8014f06:	4603      	mov	r3, r0
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d002      	beq.n	8014f12 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014f0c:	f06f 0305 	mvn.w	r3, #5
 8014f10:	e040      	b.n	8014f94 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	681a      	ldr	r2, [r3, #0]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	336c      	adds	r3, #108	; 0x6c
 8014f1e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014f20:	e002      	b.n	8014f28 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014f22:	68fb      	ldr	r3, [r7, #12]
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d011      	beq.n	8014f54 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	68db      	ldr	r3, [r3, #12]
 8014f36:	685b      	ldr	r3, [r3, #4]
 8014f38:	4618      	mov	r0, r3
 8014f3a:	f7f8 f87a 	bl	800d032 <lwip_htonl>
 8014f3e:	4604      	mov	r4, r0
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	685b      	ldr	r3, [r3, #4]
 8014f46:	4618      	mov	r0, r3
 8014f48:	f7f8 f873 	bl	800d032 <lwip_htonl>
 8014f4c:	4603      	mov	r3, r0
 8014f4e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	dbe6      	blt.n	8014f22 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014f54:	68fb      	ldr	r3, [r7, #12]
 8014f56:	681a      	ldr	r2, [r3, #0]
 8014f58:	68bb      	ldr	r3, [r7, #8]
 8014f5a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014f5c:	68fb      	ldr	r3, [r7, #12]
 8014f5e:	68ba      	ldr	r2, [r7, #8]
 8014f60:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014f62:	68bb      	ldr	r3, [r7, #8]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d103      	bne.n	8014f72 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014f78:	2bff      	cmp	r3, #255	; 0xff
 8014f7a:	d007      	beq.n	8014f8c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014f82:	3301      	adds	r3, #1
 8014f84:	b2da      	uxtb	r2, r3
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	2200      	movs	r2, #0
 8014f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014f92:	2300      	movs	r3, #0
}
 8014f94:	4618      	mov	r0, r3
 8014f96:	3714      	adds	r7, #20
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd90      	pop	{r4, r7, pc}
 8014f9c:	0801c4a4 	.word	0x0801c4a4
 8014fa0:	0801cb44 	.word	0x0801cb44
 8014fa4:	0801c4f8 	.word	0x0801c4f8

08014fa8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b082      	sub	sp, #8
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d106      	bne.n	8014fc4 <tcp_rexmit_fast+0x1c>
 8014fb6:	4b2a      	ldr	r3, [pc, #168]	; (8015060 <tcp_rexmit_fast+0xb8>)
 8014fb8:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014fbc:	4929      	ldr	r1, [pc, #164]	; (8015064 <tcp_rexmit_fast+0xbc>)
 8014fbe:	482a      	ldr	r0, [pc, #168]	; (8015068 <tcp_rexmit_fast+0xc0>)
 8014fc0:	f003 ff24 	bl	8018e0c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d044      	beq.n	8015056 <tcp_rexmit_fast+0xae>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	8b5b      	ldrh	r3, [r3, #26]
 8014fd0:	f003 0304 	and.w	r3, r3, #4
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d13e      	bne.n	8015056 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f7ff ff79 	bl	8014ed0 <tcp_rexmit>
 8014fde:	4603      	mov	r3, r0
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d138      	bne.n	8015056 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	bf28      	it	cs
 8014ff4:	4613      	movcs	r3, r2
 8014ff6:	b29b      	uxth	r3, r3
 8014ff8:	0fda      	lsrs	r2, r3, #31
 8014ffa:	4413      	add	r3, r2
 8014ffc:	105b      	asrs	r3, r3, #1
 8014ffe:	b29a      	uxth	r2, r3
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801500c:	461a      	mov	r2, r3
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015012:	005b      	lsls	r3, r3, #1
 8015014:	429a      	cmp	r2, r3
 8015016:	d206      	bcs.n	8015026 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801501c:	005b      	lsls	r3, r3, #1
 801501e:	b29a      	uxth	r2, r3
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015030:	4619      	mov	r1, r3
 8015032:	0049      	lsls	r1, r1, #1
 8015034:	440b      	add	r3, r1
 8015036:	b29b      	uxth	r3, r3
 8015038:	4413      	add	r3, r2
 801503a:	b29a      	uxth	r2, r3
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	8b5b      	ldrh	r3, [r3, #26]
 8015046:	f043 0304 	orr.w	r3, r3, #4
 801504a:	b29a      	uxth	r2, r3
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2200      	movs	r2, #0
 8015054:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8015056:	bf00      	nop
 8015058:	3708      	adds	r7, #8
 801505a:	46bd      	mov	sp, r7
 801505c:	bd80      	pop	{r7, pc}
 801505e:	bf00      	nop
 8015060:	0801c4a4 	.word	0x0801c4a4
 8015064:	0801cb5c 	.word	0x0801cb5c
 8015068:	0801c4f8 	.word	0x0801c4f8

0801506c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801506c:	b580      	push	{r7, lr}
 801506e:	b086      	sub	sp, #24
 8015070:	af00      	add	r7, sp, #0
 8015072:	60f8      	str	r0, [r7, #12]
 8015074:	607b      	str	r3, [r7, #4]
 8015076:	460b      	mov	r3, r1
 8015078:	817b      	strh	r3, [r7, #10]
 801507a:	4613      	mov	r3, r2
 801507c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801507e:	897a      	ldrh	r2, [r7, #10]
 8015080:	893b      	ldrh	r3, [r7, #8]
 8015082:	4413      	add	r3, r2
 8015084:	b29b      	uxth	r3, r3
 8015086:	3314      	adds	r3, #20
 8015088:	b29b      	uxth	r3, r3
 801508a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801508e:	4619      	mov	r1, r3
 8015090:	2022      	movs	r0, #34	; 0x22
 8015092:	f7f9 fb4b 	bl	800e72c <pbuf_alloc>
 8015096:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015098:	697b      	ldr	r3, [r7, #20]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d04d      	beq.n	801513a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801509e:	897b      	ldrh	r3, [r7, #10]
 80150a0:	3313      	adds	r3, #19
 80150a2:	697a      	ldr	r2, [r7, #20]
 80150a4:	8952      	ldrh	r2, [r2, #10]
 80150a6:	4293      	cmp	r3, r2
 80150a8:	db06      	blt.n	80150b8 <tcp_output_alloc_header_common+0x4c>
 80150aa:	4b26      	ldr	r3, [pc, #152]	; (8015144 <tcp_output_alloc_header_common+0xd8>)
 80150ac:	f240 7223 	movw	r2, #1827	; 0x723
 80150b0:	4925      	ldr	r1, [pc, #148]	; (8015148 <tcp_output_alloc_header_common+0xdc>)
 80150b2:	4826      	ldr	r0, [pc, #152]	; (801514c <tcp_output_alloc_header_common+0xe0>)
 80150b4:	f003 feaa 	bl	8018e0c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80150b8:	697b      	ldr	r3, [r7, #20]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80150be:	8c3b      	ldrh	r3, [r7, #32]
 80150c0:	4618      	mov	r0, r3
 80150c2:	f7f7 ffa1 	bl	800d008 <lwip_htons>
 80150c6:	4603      	mov	r3, r0
 80150c8:	461a      	mov	r2, r3
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80150ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80150d0:	4618      	mov	r0, r3
 80150d2:	f7f7 ff99 	bl	800d008 <lwip_htons>
 80150d6:	4603      	mov	r3, r0
 80150d8:	461a      	mov	r2, r3
 80150da:	693b      	ldr	r3, [r7, #16]
 80150dc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80150de:	693b      	ldr	r3, [r7, #16]
 80150e0:	687a      	ldr	r2, [r7, #4]
 80150e2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80150e4:	68f8      	ldr	r0, [r7, #12]
 80150e6:	f7f7 ffa4 	bl	800d032 <lwip_htonl>
 80150ea:	4602      	mov	r2, r0
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80150f0:	897b      	ldrh	r3, [r7, #10]
 80150f2:	089b      	lsrs	r3, r3, #2
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	3305      	adds	r3, #5
 80150f8:	b29b      	uxth	r3, r3
 80150fa:	031b      	lsls	r3, r3, #12
 80150fc:	b29a      	uxth	r2, r3
 80150fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015102:	b29b      	uxth	r3, r3
 8015104:	4313      	orrs	r3, r2
 8015106:	b29b      	uxth	r3, r3
 8015108:	4618      	mov	r0, r3
 801510a:	f7f7 ff7d 	bl	800d008 <lwip_htons>
 801510e:	4603      	mov	r3, r0
 8015110:	461a      	mov	r2, r3
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8015116:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8015118:	4618      	mov	r0, r3
 801511a:	f7f7 ff75 	bl	800d008 <lwip_htons>
 801511e:	4603      	mov	r3, r0
 8015120:	461a      	mov	r2, r3
 8015122:	693b      	ldr	r3, [r7, #16]
 8015124:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	2200      	movs	r2, #0
 801512a:	741a      	strb	r2, [r3, #16]
 801512c:	2200      	movs	r2, #0
 801512e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	2200      	movs	r2, #0
 8015134:	749a      	strb	r2, [r3, #18]
 8015136:	2200      	movs	r2, #0
 8015138:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801513a:	697b      	ldr	r3, [r7, #20]
}
 801513c:	4618      	mov	r0, r3
 801513e:	3718      	adds	r7, #24
 8015140:	46bd      	mov	sp, r7
 8015142:	bd80      	pop	{r7, pc}
 8015144:	0801c4a4 	.word	0x0801c4a4
 8015148:	0801cb7c 	.word	0x0801cb7c
 801514c:	0801c4f8 	.word	0x0801c4f8

08015150 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8015150:	b5b0      	push	{r4, r5, r7, lr}
 8015152:	b08a      	sub	sp, #40	; 0x28
 8015154:	af04      	add	r7, sp, #16
 8015156:	60f8      	str	r0, [r7, #12]
 8015158:	607b      	str	r3, [r7, #4]
 801515a:	460b      	mov	r3, r1
 801515c:	817b      	strh	r3, [r7, #10]
 801515e:	4613      	mov	r3, r2
 8015160:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d106      	bne.n	8015176 <tcp_output_alloc_header+0x26>
 8015168:	4b15      	ldr	r3, [pc, #84]	; (80151c0 <tcp_output_alloc_header+0x70>)
 801516a:	f240 7242 	movw	r2, #1858	; 0x742
 801516e:	4915      	ldr	r1, [pc, #84]	; (80151c4 <tcp_output_alloc_header+0x74>)
 8015170:	4815      	ldr	r0, [pc, #84]	; (80151c8 <tcp_output_alloc_header+0x78>)
 8015172:	f003 fe4b 	bl	8018e0c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	8adb      	ldrh	r3, [r3, #22]
 801517e:	68fa      	ldr	r2, [r7, #12]
 8015180:	8b12      	ldrh	r2, [r2, #24]
 8015182:	68f9      	ldr	r1, [r7, #12]
 8015184:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8015186:	893d      	ldrh	r5, [r7, #8]
 8015188:	897c      	ldrh	r4, [r7, #10]
 801518a:	9103      	str	r1, [sp, #12]
 801518c:	2110      	movs	r1, #16
 801518e:	9102      	str	r1, [sp, #8]
 8015190:	9201      	str	r2, [sp, #4]
 8015192:	9300      	str	r3, [sp, #0]
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	462a      	mov	r2, r5
 8015198:	4621      	mov	r1, r4
 801519a:	f7ff ff67 	bl	801506c <tcp_output_alloc_header_common>
 801519e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80151a0:	697b      	ldr	r3, [r7, #20]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d006      	beq.n	80151b4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151aa:	68fa      	ldr	r2, [r7, #12]
 80151ac:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80151ae:	441a      	add	r2, r3
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80151b4:	697b      	ldr	r3, [r7, #20]
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	3718      	adds	r7, #24
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bdb0      	pop	{r4, r5, r7, pc}
 80151be:	bf00      	nop
 80151c0:	0801c4a4 	.word	0x0801c4a4
 80151c4:	0801cbac 	.word	0x0801cbac
 80151c8:	0801c4f8 	.word	0x0801c4f8

080151cc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b088      	sub	sp, #32
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	4611      	mov	r1, r2
 80151d8:	461a      	mov	r2, r3
 80151da:	460b      	mov	r3, r1
 80151dc:	71fb      	strb	r3, [r7, #7]
 80151de:	4613      	mov	r3, r2
 80151e0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80151e2:	2300      	movs	r3, #0
 80151e4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80151e6:	68bb      	ldr	r3, [r7, #8]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d106      	bne.n	80151fa <tcp_output_fill_options+0x2e>
 80151ec:	4b13      	ldr	r3, [pc, #76]	; (801523c <tcp_output_fill_options+0x70>)
 80151ee:	f240 7256 	movw	r2, #1878	; 0x756
 80151f2:	4913      	ldr	r1, [pc, #76]	; (8015240 <tcp_output_fill_options+0x74>)
 80151f4:	4813      	ldr	r0, [pc, #76]	; (8015244 <tcp_output_fill_options+0x78>)
 80151f6:	f003 fe09 	bl	8018e0c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80151fa:	68bb      	ldr	r3, [r7, #8]
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015200:	69bb      	ldr	r3, [r7, #24]
 8015202:	3314      	adds	r3, #20
 8015204:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	f103 0214 	add.w	r2, r3, #20
 801520c:	8bfb      	ldrh	r3, [r7, #30]
 801520e:	009b      	lsls	r3, r3, #2
 8015210:	4619      	mov	r1, r3
 8015212:	79fb      	ldrb	r3, [r7, #7]
 8015214:	009b      	lsls	r3, r3, #2
 8015216:	f003 0304 	and.w	r3, r3, #4
 801521a:	440b      	add	r3, r1
 801521c:	4413      	add	r3, r2
 801521e:	697a      	ldr	r2, [r7, #20]
 8015220:	429a      	cmp	r2, r3
 8015222:	d006      	beq.n	8015232 <tcp_output_fill_options+0x66>
 8015224:	4b05      	ldr	r3, [pc, #20]	; (801523c <tcp_output_fill_options+0x70>)
 8015226:	f240 7275 	movw	r2, #1909	; 0x775
 801522a:	4907      	ldr	r1, [pc, #28]	; (8015248 <tcp_output_fill_options+0x7c>)
 801522c:	4805      	ldr	r0, [pc, #20]	; (8015244 <tcp_output_fill_options+0x78>)
 801522e:	f003 fded 	bl	8018e0c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015232:	bf00      	nop
 8015234:	3720      	adds	r7, #32
 8015236:	46bd      	mov	sp, r7
 8015238:	bd80      	pop	{r7, pc}
 801523a:	bf00      	nop
 801523c:	0801c4a4 	.word	0x0801c4a4
 8015240:	0801cbd4 	.word	0x0801cbd4
 8015244:	0801c4f8 	.word	0x0801c4f8
 8015248:	0801cacc 	.word	0x0801cacc

0801524c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b08a      	sub	sp, #40	; 0x28
 8015250:	af04      	add	r7, sp, #16
 8015252:	60f8      	str	r0, [r7, #12]
 8015254:	60b9      	str	r1, [r7, #8]
 8015256:	607a      	str	r2, [r7, #4]
 8015258:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801525a:	68bb      	ldr	r3, [r7, #8]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d106      	bne.n	801526e <tcp_output_control_segment+0x22>
 8015260:	4b1c      	ldr	r3, [pc, #112]	; (80152d4 <tcp_output_control_segment+0x88>)
 8015262:	f240 7287 	movw	r2, #1927	; 0x787
 8015266:	491c      	ldr	r1, [pc, #112]	; (80152d8 <tcp_output_control_segment+0x8c>)
 8015268:	481c      	ldr	r0, [pc, #112]	; (80152dc <tcp_output_control_segment+0x90>)
 801526a:	f003 fdcf 	bl	8018e0c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801526e:	683a      	ldr	r2, [r7, #0]
 8015270:	6879      	ldr	r1, [r7, #4]
 8015272:	68f8      	ldr	r0, [r7, #12]
 8015274:	f7fe fae8 	bl	8013848 <tcp_route>
 8015278:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801527a:	693b      	ldr	r3, [r7, #16]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d102      	bne.n	8015286 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015280:	23fc      	movs	r3, #252	; 0xfc
 8015282:	75fb      	strb	r3, [r7, #23]
 8015284:	e01c      	b.n	80152c0 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d006      	beq.n	801529a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	7adb      	ldrb	r3, [r3, #11]
 8015290:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	7a9b      	ldrb	r3, [r3, #10]
 8015296:	757b      	strb	r3, [r7, #21]
 8015298:	e003      	b.n	80152a2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801529a:	23ff      	movs	r3, #255	; 0xff
 801529c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801529e:	2300      	movs	r3, #0
 80152a0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80152a2:	7dba      	ldrb	r2, [r7, #22]
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	9302      	str	r3, [sp, #8]
 80152a8:	2306      	movs	r3, #6
 80152aa:	9301      	str	r3, [sp, #4]
 80152ac:	7d7b      	ldrb	r3, [r7, #21]
 80152ae:	9300      	str	r3, [sp, #0]
 80152b0:	4613      	mov	r3, r2
 80152b2:	683a      	ldr	r2, [r7, #0]
 80152b4:	6879      	ldr	r1, [r7, #4]
 80152b6:	68b8      	ldr	r0, [r7, #8]
 80152b8:	f002 fad0 	bl	801785c <ip4_output_if>
 80152bc:	4603      	mov	r3, r0
 80152be:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80152c0:	68b8      	ldr	r0, [r7, #8]
 80152c2:	f7f9 fd49 	bl	800ed58 <pbuf_free>
  return err;
 80152c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152ca:	4618      	mov	r0, r3
 80152cc:	3718      	adds	r7, #24
 80152ce:	46bd      	mov	sp, r7
 80152d0:	bd80      	pop	{r7, pc}
 80152d2:	bf00      	nop
 80152d4:	0801c4a4 	.word	0x0801c4a4
 80152d8:	0801cbfc 	.word	0x0801cbfc
 80152dc:	0801c4f8 	.word	0x0801c4f8

080152e0 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80152e0:	b590      	push	{r4, r7, lr}
 80152e2:	b08b      	sub	sp, #44	; 0x2c
 80152e4:	af04      	add	r7, sp, #16
 80152e6:	60f8      	str	r0, [r7, #12]
 80152e8:	60b9      	str	r1, [r7, #8]
 80152ea:	607a      	str	r2, [r7, #4]
 80152ec:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80152ee:	683b      	ldr	r3, [r7, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d106      	bne.n	8015302 <tcp_rst+0x22>
 80152f4:	4b1f      	ldr	r3, [pc, #124]	; (8015374 <tcp_rst+0x94>)
 80152f6:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80152fa:	491f      	ldr	r1, [pc, #124]	; (8015378 <tcp_rst+0x98>)
 80152fc:	481f      	ldr	r0, [pc, #124]	; (801537c <tcp_rst+0x9c>)
 80152fe:	f003 fd85 	bl	8018e0c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015304:	2b00      	cmp	r3, #0
 8015306:	d106      	bne.n	8015316 <tcp_rst+0x36>
 8015308:	4b1a      	ldr	r3, [pc, #104]	; (8015374 <tcp_rst+0x94>)
 801530a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801530e:	491c      	ldr	r1, [pc, #112]	; (8015380 <tcp_rst+0xa0>)
 8015310:	481a      	ldr	r0, [pc, #104]	; (801537c <tcp_rst+0x9c>)
 8015312:	f003 fd7b 	bl	8018e0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015316:	2300      	movs	r3, #0
 8015318:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801531a:	f246 0308 	movw	r3, #24584	; 0x6008
 801531e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015320:	7dfb      	ldrb	r3, [r7, #23]
 8015322:	b29c      	uxth	r4, r3
 8015324:	68b8      	ldr	r0, [r7, #8]
 8015326:	f7f7 fe84 	bl	800d032 <lwip_htonl>
 801532a:	4602      	mov	r2, r0
 801532c:	8abb      	ldrh	r3, [r7, #20]
 801532e:	9303      	str	r3, [sp, #12]
 8015330:	2314      	movs	r3, #20
 8015332:	9302      	str	r3, [sp, #8]
 8015334:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8015336:	9301      	str	r3, [sp, #4]
 8015338:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801533a:	9300      	str	r3, [sp, #0]
 801533c:	4613      	mov	r3, r2
 801533e:	2200      	movs	r2, #0
 8015340:	4621      	mov	r1, r4
 8015342:	6878      	ldr	r0, [r7, #4]
 8015344:	f7ff fe92 	bl	801506c <tcp_output_alloc_header_common>
 8015348:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801534a:	693b      	ldr	r3, [r7, #16]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d00c      	beq.n	801536a <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015350:	7dfb      	ldrb	r3, [r7, #23]
 8015352:	2200      	movs	r2, #0
 8015354:	6939      	ldr	r1, [r7, #16]
 8015356:	68f8      	ldr	r0, [r7, #12]
 8015358:	f7ff ff38 	bl	80151cc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801535e:	683a      	ldr	r2, [r7, #0]
 8015360:	6939      	ldr	r1, [r7, #16]
 8015362:	68f8      	ldr	r0, [r7, #12]
 8015364:	f7ff ff72 	bl	801524c <tcp_output_control_segment>
 8015368:	e000      	b.n	801536c <tcp_rst+0x8c>
    return;
 801536a:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801536c:	371c      	adds	r7, #28
 801536e:	46bd      	mov	sp, r7
 8015370:	bd90      	pop	{r4, r7, pc}
 8015372:	bf00      	nop
 8015374:	0801c4a4 	.word	0x0801c4a4
 8015378:	0801cc28 	.word	0x0801cc28
 801537c:	0801c4f8 	.word	0x0801c4f8
 8015380:	0801cc44 	.word	0x0801cc44

08015384 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015384:	b590      	push	{r4, r7, lr}
 8015386:	b087      	sub	sp, #28
 8015388:	af00      	add	r7, sp, #0
 801538a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801538c:	2300      	movs	r3, #0
 801538e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8015390:	2300      	movs	r3, #0
 8015392:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	2b00      	cmp	r3, #0
 8015398:	d106      	bne.n	80153a8 <tcp_send_empty_ack+0x24>
 801539a:	4b28      	ldr	r3, [pc, #160]	; (801543c <tcp_send_empty_ack+0xb8>)
 801539c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80153a0:	4927      	ldr	r1, [pc, #156]	; (8015440 <tcp_send_empty_ack+0xbc>)
 80153a2:	4828      	ldr	r0, [pc, #160]	; (8015444 <tcp_send_empty_ack+0xc0>)
 80153a4:	f003 fd32 	bl	8018e0c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80153a8:	7dfb      	ldrb	r3, [r7, #23]
 80153aa:	009b      	lsls	r3, r3, #2
 80153ac:	b2db      	uxtb	r3, r3
 80153ae:	f003 0304 	and.w	r3, r3, #4
 80153b2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80153b4:	7d7b      	ldrb	r3, [r7, #21]
 80153b6:	b29c      	uxth	r4, r3
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80153bc:	4618      	mov	r0, r3
 80153be:	f7f7 fe38 	bl	800d032 <lwip_htonl>
 80153c2:	4603      	mov	r3, r0
 80153c4:	2200      	movs	r2, #0
 80153c6:	4621      	mov	r1, r4
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f7ff fec1 	bl	8015150 <tcp_output_alloc_header>
 80153ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80153d0:	693b      	ldr	r3, [r7, #16]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d109      	bne.n	80153ea <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	8b5b      	ldrh	r3, [r3, #26]
 80153da:	f043 0303 	orr.w	r3, r3, #3
 80153de:	b29a      	uxth	r2, r3
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80153e4:	f06f 0301 	mvn.w	r3, #1
 80153e8:	e023      	b.n	8015432 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80153ea:	7dbb      	ldrb	r3, [r7, #22]
 80153ec:	7dfa      	ldrb	r2, [r7, #23]
 80153ee:	6939      	ldr	r1, [r7, #16]
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f7ff feeb 	bl	80151cc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80153f6:	687a      	ldr	r2, [r7, #4]
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	3304      	adds	r3, #4
 80153fc:	6939      	ldr	r1, [r7, #16]
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f7ff ff24 	bl	801524c <tcp_output_control_segment>
 8015404:	4603      	mov	r3, r0
 8015406:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8015408:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d007      	beq.n	8015420 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	8b5b      	ldrh	r3, [r3, #26]
 8015414:	f043 0303 	orr.w	r3, r3, #3
 8015418:	b29a      	uxth	r2, r3
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	835a      	strh	r2, [r3, #26]
 801541e:	e006      	b.n	801542e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	8b5b      	ldrh	r3, [r3, #26]
 8015424:	f023 0303 	bic.w	r3, r3, #3
 8015428:	b29a      	uxth	r2, r3
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801542e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015432:	4618      	mov	r0, r3
 8015434:	371c      	adds	r7, #28
 8015436:	46bd      	mov	sp, r7
 8015438:	bd90      	pop	{r4, r7, pc}
 801543a:	bf00      	nop
 801543c:	0801c4a4 	.word	0x0801c4a4
 8015440:	0801cc60 	.word	0x0801cc60
 8015444:	0801c4f8 	.word	0x0801c4f8

08015448 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8015448:	b590      	push	{r4, r7, lr}
 801544a:	b087      	sub	sp, #28
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015450:	2300      	movs	r3, #0
 8015452:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d106      	bne.n	8015468 <tcp_keepalive+0x20>
 801545a:	4b18      	ldr	r3, [pc, #96]	; (80154bc <tcp_keepalive+0x74>)
 801545c:	f640 0224 	movw	r2, #2084	; 0x824
 8015460:	4917      	ldr	r1, [pc, #92]	; (80154c0 <tcp_keepalive+0x78>)
 8015462:	4818      	ldr	r0, [pc, #96]	; (80154c4 <tcp_keepalive+0x7c>)
 8015464:	f003 fcd2 	bl	8018e0c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8015468:	7dfb      	ldrb	r3, [r7, #23]
 801546a:	b29c      	uxth	r4, r3
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015470:	3b01      	subs	r3, #1
 8015472:	4618      	mov	r0, r3
 8015474:	f7f7 fddd 	bl	800d032 <lwip_htonl>
 8015478:	4603      	mov	r3, r0
 801547a:	2200      	movs	r2, #0
 801547c:	4621      	mov	r1, r4
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f7ff fe66 	bl	8015150 <tcp_output_alloc_header>
 8015484:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015486:	693b      	ldr	r3, [r7, #16]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d102      	bne.n	8015492 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801548c:	f04f 33ff 	mov.w	r3, #4294967295
 8015490:	e010      	b.n	80154b4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015492:	7dfb      	ldrb	r3, [r7, #23]
 8015494:	2200      	movs	r2, #0
 8015496:	6939      	ldr	r1, [r7, #16]
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f7ff fe97 	bl	80151cc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801549e:	687a      	ldr	r2, [r7, #4]
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	3304      	adds	r3, #4
 80154a4:	6939      	ldr	r1, [r7, #16]
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f7ff fed0 	bl	801524c <tcp_output_control_segment>
 80154ac:	4603      	mov	r3, r0
 80154ae:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80154b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	371c      	adds	r7, #28
 80154b8:	46bd      	mov	sp, r7
 80154ba:	bd90      	pop	{r4, r7, pc}
 80154bc:	0801c4a4 	.word	0x0801c4a4
 80154c0:	0801cc80 	.word	0x0801cc80
 80154c4:	0801c4f8 	.word	0x0801c4f8

080154c8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80154c8:	b590      	push	{r4, r7, lr}
 80154ca:	b08b      	sub	sp, #44	; 0x2c
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80154d0:	2300      	movs	r3, #0
 80154d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d106      	bne.n	80154ea <tcp_zero_window_probe+0x22>
 80154dc:	4b4c      	ldr	r3, [pc, #304]	; (8015610 <tcp_zero_window_probe+0x148>)
 80154de:	f640 024f 	movw	r2, #2127	; 0x84f
 80154e2:	494c      	ldr	r1, [pc, #304]	; (8015614 <tcp_zero_window_probe+0x14c>)
 80154e4:	484c      	ldr	r0, [pc, #304]	; (8015618 <tcp_zero_window_probe+0x150>)
 80154e6:	f003 fc91 	bl	8018e0c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80154ee:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80154f0:	6a3b      	ldr	r3, [r7, #32]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d101      	bne.n	80154fa <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80154f6:	2300      	movs	r3, #0
 80154f8:	e086      	b.n	8015608 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015500:	2bff      	cmp	r3, #255	; 0xff
 8015502:	d007      	beq.n	8015514 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801550a:	3301      	adds	r3, #1
 801550c:	b2da      	uxtb	r2, r3
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015514:	6a3b      	ldr	r3, [r7, #32]
 8015516:	68db      	ldr	r3, [r3, #12]
 8015518:	899b      	ldrh	r3, [r3, #12]
 801551a:	b29b      	uxth	r3, r3
 801551c:	4618      	mov	r0, r3
 801551e:	f7f7 fd73 	bl	800d008 <lwip_htons>
 8015522:	4603      	mov	r3, r0
 8015524:	b2db      	uxtb	r3, r3
 8015526:	f003 0301 	and.w	r3, r3, #1
 801552a:	2b00      	cmp	r3, #0
 801552c:	d005      	beq.n	801553a <tcp_zero_window_probe+0x72>
 801552e:	6a3b      	ldr	r3, [r7, #32]
 8015530:	891b      	ldrh	r3, [r3, #8]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d101      	bne.n	801553a <tcp_zero_window_probe+0x72>
 8015536:	2301      	movs	r3, #1
 8015538:	e000      	b.n	801553c <tcp_zero_window_probe+0x74>
 801553a:	2300      	movs	r3, #0
 801553c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801553e:	7ffb      	ldrb	r3, [r7, #31]
 8015540:	2b00      	cmp	r3, #0
 8015542:	bf0c      	ite	eq
 8015544:	2301      	moveq	r3, #1
 8015546:	2300      	movne	r3, #0
 8015548:	b2db      	uxtb	r3, r3
 801554a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801554c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015550:	b299      	uxth	r1, r3
 8015552:	6a3b      	ldr	r3, [r7, #32]
 8015554:	68db      	ldr	r3, [r3, #12]
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	8bba      	ldrh	r2, [r7, #28]
 801555a:	6878      	ldr	r0, [r7, #4]
 801555c:	f7ff fdf8 	bl	8015150 <tcp_output_alloc_header>
 8015560:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015562:	69bb      	ldr	r3, [r7, #24]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d102      	bne.n	801556e <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8015568:	f04f 33ff 	mov.w	r3, #4294967295
 801556c:	e04c      	b.n	8015608 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801556e:	69bb      	ldr	r3, [r7, #24]
 8015570:	685b      	ldr	r3, [r3, #4]
 8015572:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015574:	7ffb      	ldrb	r3, [r7, #31]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d011      	beq.n	801559e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	899b      	ldrh	r3, [r3, #12]
 801557e:	b29b      	uxth	r3, r3
 8015580:	b21b      	sxth	r3, r3
 8015582:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015586:	b21c      	sxth	r4, r3
 8015588:	2011      	movs	r0, #17
 801558a:	f7f7 fd3d 	bl	800d008 <lwip_htons>
 801558e:	4603      	mov	r3, r0
 8015590:	b21b      	sxth	r3, r3
 8015592:	4323      	orrs	r3, r4
 8015594:	b21b      	sxth	r3, r3
 8015596:	b29a      	uxth	r2, r3
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	819a      	strh	r2, [r3, #12]
 801559c:	e010      	b.n	80155c0 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801559e:	69bb      	ldr	r3, [r7, #24]
 80155a0:	685b      	ldr	r3, [r3, #4]
 80155a2:	3314      	adds	r3, #20
 80155a4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80155a6:	6a3b      	ldr	r3, [r7, #32]
 80155a8:	6858      	ldr	r0, [r3, #4]
 80155aa:	6a3b      	ldr	r3, [r7, #32]
 80155ac:	685b      	ldr	r3, [r3, #4]
 80155ae:	891a      	ldrh	r2, [r3, #8]
 80155b0:	6a3b      	ldr	r3, [r7, #32]
 80155b2:	891b      	ldrh	r3, [r3, #8]
 80155b4:	1ad3      	subs	r3, r2, r3
 80155b6:	b29b      	uxth	r3, r3
 80155b8:	2201      	movs	r2, #1
 80155ba:	6939      	ldr	r1, [r7, #16]
 80155bc:	f7f9 fdd2 	bl	800f164 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80155c0:	6a3b      	ldr	r3, [r7, #32]
 80155c2:	68db      	ldr	r3, [r3, #12]
 80155c4:	685b      	ldr	r3, [r3, #4]
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7f7 fd33 	bl	800d032 <lwip_htonl>
 80155cc:	4603      	mov	r3, r0
 80155ce:	3301      	adds	r3, #1
 80155d0:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	1ad3      	subs	r3, r2, r3
 80155da:	2b00      	cmp	r3, #0
 80155dc:	da02      	bge.n	80155e4 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	68fa      	ldr	r2, [r7, #12]
 80155e2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80155e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155e8:	2200      	movs	r2, #0
 80155ea:	69b9      	ldr	r1, [r7, #24]
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f7ff fded 	bl	80151cc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80155f2:	687a      	ldr	r2, [r7, #4]
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	3304      	adds	r3, #4
 80155f8:	69b9      	ldr	r1, [r7, #24]
 80155fa:	6878      	ldr	r0, [r7, #4]
 80155fc:	f7ff fe26 	bl	801524c <tcp_output_control_segment>
 8015600:	4603      	mov	r3, r0
 8015602:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015604:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015608:	4618      	mov	r0, r3
 801560a:	372c      	adds	r7, #44	; 0x2c
 801560c:	46bd      	mov	sp, r7
 801560e:	bd90      	pop	{r4, r7, pc}
 8015610:	0801c4a4 	.word	0x0801c4a4
 8015614:	0801cc9c 	.word	0x0801cc9c
 8015618:	0801c4f8 	.word	0x0801c4f8

0801561c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b082      	sub	sp, #8
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015624:	f7f9 ffe6 	bl	800f5f4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8015628:	4b0a      	ldr	r3, [pc, #40]	; (8015654 <tcpip_tcp_timer+0x38>)
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	2b00      	cmp	r3, #0
 801562e:	d103      	bne.n	8015638 <tcpip_tcp_timer+0x1c>
 8015630:	4b09      	ldr	r3, [pc, #36]	; (8015658 <tcpip_tcp_timer+0x3c>)
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d005      	beq.n	8015644 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015638:	2200      	movs	r2, #0
 801563a:	4908      	ldr	r1, [pc, #32]	; (801565c <tcpip_tcp_timer+0x40>)
 801563c:	20fa      	movs	r0, #250	; 0xfa
 801563e:	f000 f8f3 	bl	8015828 <sys_timeout>
 8015642:	e003      	b.n	801564c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015644:	4b06      	ldr	r3, [pc, #24]	; (8015660 <tcpip_tcp_timer+0x44>)
 8015646:	2200      	movs	r2, #0
 8015648:	601a      	str	r2, [r3, #0]
  }
}
 801564a:	bf00      	nop
 801564c:	bf00      	nop
 801564e:	3708      	adds	r7, #8
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}
 8015654:	2000bca8 	.word	0x2000bca8
 8015658:	2000bcb8 	.word	0x2000bcb8
 801565c:	0801561d 	.word	0x0801561d
 8015660:	20004f18 	.word	0x20004f18

08015664 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015664:	b580      	push	{r7, lr}
 8015666:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8015668:	4b0a      	ldr	r3, [pc, #40]	; (8015694 <tcp_timer_needed+0x30>)
 801566a:	681b      	ldr	r3, [r3, #0]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d10f      	bne.n	8015690 <tcp_timer_needed+0x2c>
 8015670:	4b09      	ldr	r3, [pc, #36]	; (8015698 <tcp_timer_needed+0x34>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	2b00      	cmp	r3, #0
 8015676:	d103      	bne.n	8015680 <tcp_timer_needed+0x1c>
 8015678:	4b08      	ldr	r3, [pc, #32]	; (801569c <tcp_timer_needed+0x38>)
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d007      	beq.n	8015690 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015680:	4b04      	ldr	r3, [pc, #16]	; (8015694 <tcp_timer_needed+0x30>)
 8015682:	2201      	movs	r2, #1
 8015684:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8015686:	2200      	movs	r2, #0
 8015688:	4905      	ldr	r1, [pc, #20]	; (80156a0 <tcp_timer_needed+0x3c>)
 801568a:	20fa      	movs	r0, #250	; 0xfa
 801568c:	f000 f8cc 	bl	8015828 <sys_timeout>
  }
}
 8015690:	bf00      	nop
 8015692:	bd80      	pop	{r7, pc}
 8015694:	20004f18 	.word	0x20004f18
 8015698:	2000bca8 	.word	0x2000bca8
 801569c:	2000bcb8 	.word	0x2000bcb8
 80156a0:	0801561d 	.word	0x0801561d

080156a4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b086      	sub	sp, #24
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	60f8      	str	r0, [r7, #12]
 80156ac:	60b9      	str	r1, [r7, #8]
 80156ae:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80156b0:	200a      	movs	r0, #10
 80156b2:	f7f8 fc29 	bl	800df08 <memp_malloc>
 80156b6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80156b8:	693b      	ldr	r3, [r7, #16]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d109      	bne.n	80156d2 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80156be:	693b      	ldr	r3, [r7, #16]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d151      	bne.n	8015768 <sys_timeout_abs+0xc4>
 80156c4:	4b2a      	ldr	r3, [pc, #168]	; (8015770 <sys_timeout_abs+0xcc>)
 80156c6:	22be      	movs	r2, #190	; 0xbe
 80156c8:	492a      	ldr	r1, [pc, #168]	; (8015774 <sys_timeout_abs+0xd0>)
 80156ca:	482b      	ldr	r0, [pc, #172]	; (8015778 <sys_timeout_abs+0xd4>)
 80156cc:	f003 fb9e 	bl	8018e0c <iprintf>
    return;
 80156d0:	e04a      	b.n	8015768 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80156d2:	693b      	ldr	r3, [r7, #16]
 80156d4:	2200      	movs	r2, #0
 80156d6:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80156d8:	693b      	ldr	r3, [r7, #16]
 80156da:	68ba      	ldr	r2, [r7, #8]
 80156dc:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	687a      	ldr	r2, [r7, #4]
 80156e2:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80156e4:	693b      	ldr	r3, [r7, #16]
 80156e6:	68fa      	ldr	r2, [r7, #12]
 80156e8:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80156ea:	4b24      	ldr	r3, [pc, #144]	; (801577c <sys_timeout_abs+0xd8>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d103      	bne.n	80156fa <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80156f2:	4a22      	ldr	r2, [pc, #136]	; (801577c <sys_timeout_abs+0xd8>)
 80156f4:	693b      	ldr	r3, [r7, #16]
 80156f6:	6013      	str	r3, [r2, #0]
    return;
 80156f8:	e037      	b.n	801576a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80156fa:	693b      	ldr	r3, [r7, #16]
 80156fc:	685a      	ldr	r2, [r3, #4]
 80156fe:	4b1f      	ldr	r3, [pc, #124]	; (801577c <sys_timeout_abs+0xd8>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	685b      	ldr	r3, [r3, #4]
 8015704:	1ad3      	subs	r3, r2, r3
 8015706:	0fdb      	lsrs	r3, r3, #31
 8015708:	f003 0301 	and.w	r3, r3, #1
 801570c:	b2db      	uxtb	r3, r3
 801570e:	2b00      	cmp	r3, #0
 8015710:	d007      	beq.n	8015722 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015712:	4b1a      	ldr	r3, [pc, #104]	; (801577c <sys_timeout_abs+0xd8>)
 8015714:	681a      	ldr	r2, [r3, #0]
 8015716:	693b      	ldr	r3, [r7, #16]
 8015718:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801571a:	4a18      	ldr	r2, [pc, #96]	; (801577c <sys_timeout_abs+0xd8>)
 801571c:	693b      	ldr	r3, [r7, #16]
 801571e:	6013      	str	r3, [r2, #0]
 8015720:	e023      	b.n	801576a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015722:	4b16      	ldr	r3, [pc, #88]	; (801577c <sys_timeout_abs+0xd8>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	617b      	str	r3, [r7, #20]
 8015728:	e01a      	b.n	8015760 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d00b      	beq.n	801574a <sys_timeout_abs+0xa6>
 8015732:	693b      	ldr	r3, [r7, #16]
 8015734:	685a      	ldr	r2, [r3, #4]
 8015736:	697b      	ldr	r3, [r7, #20]
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	685b      	ldr	r3, [r3, #4]
 801573c:	1ad3      	subs	r3, r2, r3
 801573e:	0fdb      	lsrs	r3, r3, #31
 8015740:	f003 0301 	and.w	r3, r3, #1
 8015744:	b2db      	uxtb	r3, r3
 8015746:	2b00      	cmp	r3, #0
 8015748:	d007      	beq.n	801575a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801574a:	697b      	ldr	r3, [r7, #20]
 801574c:	681a      	ldr	r2, [r3, #0]
 801574e:	693b      	ldr	r3, [r7, #16]
 8015750:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015752:	697b      	ldr	r3, [r7, #20]
 8015754:	693a      	ldr	r2, [r7, #16]
 8015756:	601a      	str	r2, [r3, #0]
        break;
 8015758:	e007      	b.n	801576a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	617b      	str	r3, [r7, #20]
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	2b00      	cmp	r3, #0
 8015764:	d1e1      	bne.n	801572a <sys_timeout_abs+0x86>
 8015766:	e000      	b.n	801576a <sys_timeout_abs+0xc6>
    return;
 8015768:	bf00      	nop
      }
    }
  }
}
 801576a:	3718      	adds	r7, #24
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}
 8015770:	0801ccc0 	.word	0x0801ccc0
 8015774:	0801ccf4 	.word	0x0801ccf4
 8015778:	0801cd34 	.word	0x0801cd34
 801577c:	20004f10 	.word	0x20004f10

08015780 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b086      	sub	sp, #24
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801578c:	697b      	ldr	r3, [r7, #20]
 801578e:	685b      	ldr	r3, [r3, #4]
 8015790:	4798      	blx	r3

  now = sys_now();
 8015792:	f7ef fe03 	bl	800539c <sys_now>
 8015796:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015798:	697b      	ldr	r3, [r7, #20]
 801579a:	681a      	ldr	r2, [r3, #0]
 801579c:	4b0f      	ldr	r3, [pc, #60]	; (80157dc <lwip_cyclic_timer+0x5c>)
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	4413      	add	r3, r2
 80157a2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80157a4:	68fa      	ldr	r2, [r7, #12]
 80157a6:	693b      	ldr	r3, [r7, #16]
 80157a8:	1ad3      	subs	r3, r2, r3
 80157aa:	0fdb      	lsrs	r3, r3, #31
 80157ac:	f003 0301 	and.w	r3, r3, #1
 80157b0:	b2db      	uxtb	r3, r3
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d009      	beq.n	80157ca <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80157b6:	697b      	ldr	r3, [r7, #20]
 80157b8:	681a      	ldr	r2, [r3, #0]
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	4413      	add	r3, r2
 80157be:	687a      	ldr	r2, [r7, #4]
 80157c0:	4907      	ldr	r1, [pc, #28]	; (80157e0 <lwip_cyclic_timer+0x60>)
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7ff ff6e 	bl	80156a4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80157c8:	e004      	b.n	80157d4 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80157ca:	687a      	ldr	r2, [r7, #4]
 80157cc:	4904      	ldr	r1, [pc, #16]	; (80157e0 <lwip_cyclic_timer+0x60>)
 80157ce:	68f8      	ldr	r0, [r7, #12]
 80157d0:	f7ff ff68 	bl	80156a4 <sys_timeout_abs>
}
 80157d4:	bf00      	nop
 80157d6:	3718      	adds	r7, #24
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	20004f14 	.word	0x20004f14
 80157e0:	08015781 	.word	0x08015781

080157e4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80157ea:	2301      	movs	r3, #1
 80157ec:	607b      	str	r3, [r7, #4]
 80157ee:	e00e      	b.n	801580e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80157f0:	4a0b      	ldr	r2, [pc, #44]	; (8015820 <sys_timeouts_init+0x3c>)
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	00db      	lsls	r3, r3, #3
 80157fc:	4a08      	ldr	r2, [pc, #32]	; (8015820 <sys_timeouts_init+0x3c>)
 80157fe:	4413      	add	r3, r2
 8015800:	461a      	mov	r2, r3
 8015802:	4908      	ldr	r1, [pc, #32]	; (8015824 <sys_timeouts_init+0x40>)
 8015804:	f000 f810 	bl	8015828 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	3301      	adds	r3, #1
 801580c:	607b      	str	r3, [r7, #4]
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	2b03      	cmp	r3, #3
 8015812:	d9ed      	bls.n	80157f0 <sys_timeouts_init+0xc>
  }
}
 8015814:	bf00      	nop
 8015816:	bf00      	nop
 8015818:	3708      	adds	r7, #8
 801581a:	46bd      	mov	sp, r7
 801581c:	bd80      	pop	{r7, pc}
 801581e:	bf00      	nop
 8015820:	0801dd5c 	.word	0x0801dd5c
 8015824:	08015781 	.word	0x08015781

08015828 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8015828:	b580      	push	{r7, lr}
 801582a:	b086      	sub	sp, #24
 801582c:	af00      	add	r7, sp, #0
 801582e:	60f8      	str	r0, [r7, #12]
 8015830:	60b9      	str	r1, [r7, #8]
 8015832:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015834:	68fb      	ldr	r3, [r7, #12]
 8015836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801583a:	d306      	bcc.n	801584a <sys_timeout+0x22>
 801583c:	4b0a      	ldr	r3, [pc, #40]	; (8015868 <sys_timeout+0x40>)
 801583e:	f240 1229 	movw	r2, #297	; 0x129
 8015842:	490a      	ldr	r1, [pc, #40]	; (801586c <sys_timeout+0x44>)
 8015844:	480a      	ldr	r0, [pc, #40]	; (8015870 <sys_timeout+0x48>)
 8015846:	f003 fae1 	bl	8018e0c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801584a:	f7ef fda7 	bl	800539c <sys_now>
 801584e:	4602      	mov	r2, r0
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	4413      	add	r3, r2
 8015854:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8015856:	687a      	ldr	r2, [r7, #4]
 8015858:	68b9      	ldr	r1, [r7, #8]
 801585a:	6978      	ldr	r0, [r7, #20]
 801585c:	f7ff ff22 	bl	80156a4 <sys_timeout_abs>
#endif
}
 8015860:	bf00      	nop
 8015862:	3718      	adds	r7, #24
 8015864:	46bd      	mov	sp, r7
 8015866:	bd80      	pop	{r7, pc}
 8015868:	0801ccc0 	.word	0x0801ccc0
 801586c:	0801cd5c 	.word	0x0801cd5c
 8015870:	0801cd34 	.word	0x0801cd34

08015874 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015874:	b580      	push	{r7, lr}
 8015876:	b084      	sub	sp, #16
 8015878:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801587a:	f7ef fd8f 	bl	800539c <sys_now>
 801587e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015880:	4b17      	ldr	r3, [pc, #92]	; (80158e0 <sys_check_timeouts+0x6c>)
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015886:	68bb      	ldr	r3, [r7, #8]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d022      	beq.n	80158d2 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	685b      	ldr	r3, [r3, #4]
 8015890:	68fa      	ldr	r2, [r7, #12]
 8015892:	1ad3      	subs	r3, r2, r3
 8015894:	0fdb      	lsrs	r3, r3, #31
 8015896:	f003 0301 	and.w	r3, r3, #1
 801589a:	b2db      	uxtb	r3, r3
 801589c:	2b00      	cmp	r3, #0
 801589e:	d11a      	bne.n	80158d6 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80158a0:	68bb      	ldr	r3, [r7, #8]
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	4a0e      	ldr	r2, [pc, #56]	; (80158e0 <sys_check_timeouts+0x6c>)
 80158a6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	689b      	ldr	r3, [r3, #8]
 80158ac:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	68db      	ldr	r3, [r3, #12]
 80158b2:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	4a0a      	ldr	r2, [pc, #40]	; (80158e4 <sys_check_timeouts+0x70>)
 80158ba:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80158bc:	68b9      	ldr	r1, [r7, #8]
 80158be:	200a      	movs	r0, #10
 80158c0:	f7f8 fb74 	bl	800dfac <memp_free>
    if (handler != NULL) {
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d0da      	beq.n	8015880 <sys_check_timeouts+0xc>
      handler(arg);
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	6838      	ldr	r0, [r7, #0]
 80158ce:	4798      	blx	r3
  do {
 80158d0:	e7d6      	b.n	8015880 <sys_check_timeouts+0xc>
      return;
 80158d2:	bf00      	nop
 80158d4:	e000      	b.n	80158d8 <sys_check_timeouts+0x64>
      return;
 80158d6:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80158d8:	3710      	adds	r7, #16
 80158da:	46bd      	mov	sp, r7
 80158dc:	bd80      	pop	{r7, pc}
 80158de:	bf00      	nop
 80158e0:	20004f10 	.word	0x20004f10
 80158e4:	20004f14 	.word	0x20004f14

080158e8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80158e8:	b580      	push	{r7, lr}
 80158ea:	b082      	sub	sp, #8
 80158ec:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80158ee:	4b16      	ldr	r3, [pc, #88]	; (8015948 <sys_timeouts_sleeptime+0x60>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d102      	bne.n	80158fc <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80158f6:	f04f 33ff 	mov.w	r3, #4294967295
 80158fa:	e020      	b.n	801593e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80158fc:	f7ef fd4e 	bl	800539c <sys_now>
 8015900:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015902:	4b11      	ldr	r3, [pc, #68]	; (8015948 <sys_timeouts_sleeptime+0x60>)
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	685a      	ldr	r2, [r3, #4]
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	1ad3      	subs	r3, r2, r3
 801590c:	0fdb      	lsrs	r3, r3, #31
 801590e:	f003 0301 	and.w	r3, r3, #1
 8015912:	b2db      	uxtb	r3, r3
 8015914:	2b00      	cmp	r3, #0
 8015916:	d001      	beq.n	801591c <sys_timeouts_sleeptime+0x34>
    return 0;
 8015918:	2300      	movs	r3, #0
 801591a:	e010      	b.n	801593e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801591c:	4b0a      	ldr	r3, [pc, #40]	; (8015948 <sys_timeouts_sleeptime+0x60>)
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	685a      	ldr	r2, [r3, #4]
 8015922:	687b      	ldr	r3, [r7, #4]
 8015924:	1ad3      	subs	r3, r2, r3
 8015926:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8015928:	683b      	ldr	r3, [r7, #0]
 801592a:	2b00      	cmp	r3, #0
 801592c:	da06      	bge.n	801593c <sys_timeouts_sleeptime+0x54>
 801592e:	4b07      	ldr	r3, [pc, #28]	; (801594c <sys_timeouts_sleeptime+0x64>)
 8015930:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015934:	4906      	ldr	r1, [pc, #24]	; (8015950 <sys_timeouts_sleeptime+0x68>)
 8015936:	4807      	ldr	r0, [pc, #28]	; (8015954 <sys_timeouts_sleeptime+0x6c>)
 8015938:	f003 fa68 	bl	8018e0c <iprintf>
    return ret;
 801593c:	683b      	ldr	r3, [r7, #0]
  }
}
 801593e:	4618      	mov	r0, r3
 8015940:	3708      	adds	r7, #8
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}
 8015946:	bf00      	nop
 8015948:	20004f10 	.word	0x20004f10
 801594c:	0801ccc0 	.word	0x0801ccc0
 8015950:	0801cd94 	.word	0x0801cd94
 8015954:	0801cd34 	.word	0x0801cd34

08015958 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015958:	b580      	push	{r7, lr}
 801595a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801595c:	f003 fa6e 	bl	8018e3c <rand>
 8015960:	4603      	mov	r3, r0
 8015962:	b29b      	uxth	r3, r3
 8015964:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015968:	b29b      	uxth	r3, r3
 801596a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801596e:	b29a      	uxth	r2, r3
 8015970:	4b01      	ldr	r3, [pc, #4]	; (8015978 <udp_init+0x20>)
 8015972:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015974:	bf00      	nop
 8015976:	bd80      	pop	{r7, pc}
 8015978:	20000018 	.word	0x20000018

0801597c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801597c:	b480      	push	{r7}
 801597e:	b083      	sub	sp, #12
 8015980:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015982:	2300      	movs	r3, #0
 8015984:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015986:	4b17      	ldr	r3, [pc, #92]	; (80159e4 <udp_new_port+0x68>)
 8015988:	881b      	ldrh	r3, [r3, #0]
 801598a:	1c5a      	adds	r2, r3, #1
 801598c:	b291      	uxth	r1, r2
 801598e:	4a15      	ldr	r2, [pc, #84]	; (80159e4 <udp_new_port+0x68>)
 8015990:	8011      	strh	r1, [r2, #0]
 8015992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015996:	4293      	cmp	r3, r2
 8015998:	d103      	bne.n	80159a2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801599a:	4b12      	ldr	r3, [pc, #72]	; (80159e4 <udp_new_port+0x68>)
 801599c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80159a0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80159a2:	4b11      	ldr	r3, [pc, #68]	; (80159e8 <udp_new_port+0x6c>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	603b      	str	r3, [r7, #0]
 80159a8:	e011      	b.n	80159ce <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80159aa:	683b      	ldr	r3, [r7, #0]
 80159ac:	8a5a      	ldrh	r2, [r3, #18]
 80159ae:	4b0d      	ldr	r3, [pc, #52]	; (80159e4 <udp_new_port+0x68>)
 80159b0:	881b      	ldrh	r3, [r3, #0]
 80159b2:	429a      	cmp	r2, r3
 80159b4:	d108      	bne.n	80159c8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80159b6:	88fb      	ldrh	r3, [r7, #6]
 80159b8:	3301      	adds	r3, #1
 80159ba:	80fb      	strh	r3, [r7, #6]
 80159bc:	88fb      	ldrh	r3, [r7, #6]
 80159be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80159c2:	d3e0      	bcc.n	8015986 <udp_new_port+0xa>
        return 0;
 80159c4:	2300      	movs	r3, #0
 80159c6:	e007      	b.n	80159d8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80159c8:	683b      	ldr	r3, [r7, #0]
 80159ca:	68db      	ldr	r3, [r3, #12]
 80159cc:	603b      	str	r3, [r7, #0]
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d1ea      	bne.n	80159aa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80159d4:	4b03      	ldr	r3, [pc, #12]	; (80159e4 <udp_new_port+0x68>)
 80159d6:	881b      	ldrh	r3, [r3, #0]
}
 80159d8:	4618      	mov	r0, r3
 80159da:	370c      	adds	r7, #12
 80159dc:	46bd      	mov	sp, r7
 80159de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e2:	4770      	bx	lr
 80159e4:	20000018 	.word	0x20000018
 80159e8:	2000bcc0 	.word	0x2000bcc0

080159ec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b084      	sub	sp, #16
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	60f8      	str	r0, [r7, #12]
 80159f4:	60b9      	str	r1, [r7, #8]
 80159f6:	4613      	mov	r3, r2
 80159f8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d105      	bne.n	8015a0c <udp_input_local_match+0x20>
 8015a00:	4b27      	ldr	r3, [pc, #156]	; (8015aa0 <udp_input_local_match+0xb4>)
 8015a02:	2287      	movs	r2, #135	; 0x87
 8015a04:	4927      	ldr	r1, [pc, #156]	; (8015aa4 <udp_input_local_match+0xb8>)
 8015a06:	4828      	ldr	r0, [pc, #160]	; (8015aa8 <udp_input_local_match+0xbc>)
 8015a08:	f003 fa00 	bl	8018e0c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d105      	bne.n	8015a1e <udp_input_local_match+0x32>
 8015a12:	4b23      	ldr	r3, [pc, #140]	; (8015aa0 <udp_input_local_match+0xb4>)
 8015a14:	2288      	movs	r2, #136	; 0x88
 8015a16:	4925      	ldr	r1, [pc, #148]	; (8015aac <udp_input_local_match+0xc0>)
 8015a18:	4823      	ldr	r0, [pc, #140]	; (8015aa8 <udp_input_local_match+0xbc>)
 8015a1a:	f003 f9f7 	bl	8018e0c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	7a1b      	ldrb	r3, [r3, #8]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d00b      	beq.n	8015a3e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	7a1a      	ldrb	r2, [r3, #8]
 8015a2a:	4b21      	ldr	r3, [pc, #132]	; (8015ab0 <udp_input_local_match+0xc4>)
 8015a2c:	685b      	ldr	r3, [r3, #4]
 8015a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015a32:	3301      	adds	r3, #1
 8015a34:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015a36:	429a      	cmp	r2, r3
 8015a38:	d001      	beq.n	8015a3e <udp_input_local_match+0x52>
    return 0;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	e02b      	b.n	8015a96 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015a3e:	79fb      	ldrb	r3, [r7, #7]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d018      	beq.n	8015a76 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015a44:	68fb      	ldr	r3, [r7, #12]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d013      	beq.n	8015a72 <udp_input_local_match+0x86>
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d00f      	beq.n	8015a72 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015a52:	4b17      	ldr	r3, [pc, #92]	; (8015ab0 <udp_input_local_match+0xc4>)
 8015a54:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a5a:	d00a      	beq.n	8015a72 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015a5c:	68fb      	ldr	r3, [r7, #12]
 8015a5e:	681a      	ldr	r2, [r3, #0]
 8015a60:	4b13      	ldr	r3, [pc, #76]	; (8015ab0 <udp_input_local_match+0xc4>)
 8015a62:	695b      	ldr	r3, [r3, #20]
 8015a64:	405a      	eors	r2, r3
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	3308      	adds	r3, #8
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d110      	bne.n	8015a94 <udp_input_local_match+0xa8>
          return 1;
 8015a72:	2301      	movs	r3, #1
 8015a74:	e00f      	b.n	8015a96 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d009      	beq.n	8015a90 <udp_input_local_match+0xa4>
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d005      	beq.n	8015a90 <udp_input_local_match+0xa4>
 8015a84:	68fb      	ldr	r3, [r7, #12]
 8015a86:	681a      	ldr	r2, [r3, #0]
 8015a88:	4b09      	ldr	r3, [pc, #36]	; (8015ab0 <udp_input_local_match+0xc4>)
 8015a8a:	695b      	ldr	r3, [r3, #20]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d101      	bne.n	8015a94 <udp_input_local_match+0xa8>
        return 1;
 8015a90:	2301      	movs	r3, #1
 8015a92:	e000      	b.n	8015a96 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015a94:	2300      	movs	r3, #0
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	3710      	adds	r7, #16
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}
 8015a9e:	bf00      	nop
 8015aa0:	0801cda8 	.word	0x0801cda8
 8015aa4:	0801cdd8 	.word	0x0801cdd8
 8015aa8:	0801cdfc 	.word	0x0801cdfc
 8015aac:	0801ce24 	.word	0x0801ce24
 8015ab0:	2000844c 	.word	0x2000844c

08015ab4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015ab4:	b590      	push	{r4, r7, lr}
 8015ab6:	b08d      	sub	sp, #52	; 0x34
 8015ab8:	af02      	add	r7, sp, #8
 8015aba:	6078      	str	r0, [r7, #4]
 8015abc:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d105      	bne.n	8015ad4 <udp_input+0x20>
 8015ac8:	4b7c      	ldr	r3, [pc, #496]	; (8015cbc <udp_input+0x208>)
 8015aca:	22cf      	movs	r2, #207	; 0xcf
 8015acc:	497c      	ldr	r1, [pc, #496]	; (8015cc0 <udp_input+0x20c>)
 8015ace:	487d      	ldr	r0, [pc, #500]	; (8015cc4 <udp_input+0x210>)
 8015ad0:	f003 f99c 	bl	8018e0c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015ad4:	683b      	ldr	r3, [r7, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d105      	bne.n	8015ae6 <udp_input+0x32>
 8015ada:	4b78      	ldr	r3, [pc, #480]	; (8015cbc <udp_input+0x208>)
 8015adc:	22d0      	movs	r2, #208	; 0xd0
 8015ade:	497a      	ldr	r1, [pc, #488]	; (8015cc8 <udp_input+0x214>)
 8015ae0:	4878      	ldr	r0, [pc, #480]	; (8015cc4 <udp_input+0x210>)
 8015ae2:	f003 f993 	bl	8018e0c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	895b      	ldrh	r3, [r3, #10]
 8015aea:	2b07      	cmp	r3, #7
 8015aec:	d803      	bhi.n	8015af6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015aee:	6878      	ldr	r0, [r7, #4]
 8015af0:	f7f9 f932 	bl	800ed58 <pbuf_free>
    goto end;
 8015af4:	e0de      	b.n	8015cb4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	685b      	ldr	r3, [r3, #4]
 8015afa:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015afc:	4b73      	ldr	r3, [pc, #460]	; (8015ccc <udp_input+0x218>)
 8015afe:	695b      	ldr	r3, [r3, #20]
 8015b00:	4a72      	ldr	r2, [pc, #456]	; (8015ccc <udp_input+0x218>)
 8015b02:	6812      	ldr	r2, [r2, #0]
 8015b04:	4611      	mov	r1, r2
 8015b06:	4618      	mov	r0, r3
 8015b08:	f001 ff80 	bl	8017a0c <ip4_addr_isbroadcast_u32>
 8015b0c:	4603      	mov	r3, r0
 8015b0e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015b10:	697b      	ldr	r3, [r7, #20]
 8015b12:	881b      	ldrh	r3, [r3, #0]
 8015b14:	b29b      	uxth	r3, r3
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7f7 fa76 	bl	800d008 <lwip_htons>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	885b      	ldrh	r3, [r3, #2]
 8015b24:	b29b      	uxth	r3, r3
 8015b26:	4618      	mov	r0, r3
 8015b28:	f7f7 fa6e 	bl	800d008 <lwip_htons>
 8015b2c:	4603      	mov	r3, r0
 8015b2e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015b30:	2300      	movs	r3, #0
 8015b32:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015b34:	2300      	movs	r3, #0
 8015b36:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b3c:	4b64      	ldr	r3, [pc, #400]	; (8015cd0 <udp_input+0x21c>)
 8015b3e:	681b      	ldr	r3, [r3, #0]
 8015b40:	627b      	str	r3, [r7, #36]	; 0x24
 8015b42:	e054      	b.n	8015bee <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b46:	8a5b      	ldrh	r3, [r3, #18]
 8015b48:	89fa      	ldrh	r2, [r7, #14]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d14a      	bne.n	8015be4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015b4e:	7cfb      	ldrb	r3, [r7, #19]
 8015b50:	461a      	mov	r2, r3
 8015b52:	6839      	ldr	r1, [r7, #0]
 8015b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015b56:	f7ff ff49 	bl	80159ec <udp_input_local_match>
 8015b5a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d041      	beq.n	8015be4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b62:	7c1b      	ldrb	r3, [r3, #16]
 8015b64:	f003 0304 	and.w	r3, r3, #4
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d11d      	bne.n	8015ba8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015b6c:	69fb      	ldr	r3, [r7, #28]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d102      	bne.n	8015b78 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b74:	61fb      	str	r3, [r7, #28]
 8015b76:	e017      	b.n	8015ba8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015b78:	7cfb      	ldrb	r3, [r7, #19]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d014      	beq.n	8015ba8 <udp_input+0xf4>
 8015b7e:	4b53      	ldr	r3, [pc, #332]	; (8015ccc <udp_input+0x218>)
 8015b80:	695b      	ldr	r3, [r3, #20]
 8015b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b86:	d10f      	bne.n	8015ba8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015b88:	69fb      	ldr	r3, [r7, #28]
 8015b8a:	681a      	ldr	r2, [r3, #0]
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	3304      	adds	r3, #4
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d008      	beq.n	8015ba8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	3304      	adds	r3, #4
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d101      	bne.n	8015ba8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ba6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015baa:	8a9b      	ldrh	r3, [r3, #20]
 8015bac:	8a3a      	ldrh	r2, [r7, #16]
 8015bae:	429a      	cmp	r2, r3
 8015bb0:	d118      	bne.n	8015be4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bb4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d005      	beq.n	8015bc6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8015bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bbc:	685a      	ldr	r2, [r3, #4]
 8015bbe:	4b43      	ldr	r3, [pc, #268]	; (8015ccc <udp_input+0x218>)
 8015bc0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	d10e      	bne.n	8015be4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015bc6:	6a3b      	ldr	r3, [r7, #32]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d014      	beq.n	8015bf6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bce:	68da      	ldr	r2, [r3, #12]
 8015bd0:	6a3b      	ldr	r3, [r7, #32]
 8015bd2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015bd4:	4b3e      	ldr	r3, [pc, #248]	; (8015cd0 <udp_input+0x21c>)
 8015bd6:	681a      	ldr	r2, [r3, #0]
 8015bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bda:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015bdc:	4a3c      	ldr	r2, [pc, #240]	; (8015cd0 <udp_input+0x21c>)
 8015bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015be2:	e008      	b.n	8015bf6 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015be6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	627b      	str	r3, [r7, #36]	; 0x24
 8015bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d1a7      	bne.n	8015b44 <udp_input+0x90>
 8015bf4:	e000      	b.n	8015bf8 <udp_input+0x144>
        break;
 8015bf6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d101      	bne.n	8015c02 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015bfe:	69fb      	ldr	r3, [r7, #28]
 8015c00:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d002      	beq.n	8015c0e <udp_input+0x15a>
    for_us = 1;
 8015c08:	2301      	movs	r3, #1
 8015c0a:	76fb      	strb	r3, [r7, #27]
 8015c0c:	e00a      	b.n	8015c24 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015c0e:	683b      	ldr	r3, [r7, #0]
 8015c10:	3304      	adds	r3, #4
 8015c12:	681a      	ldr	r2, [r3, #0]
 8015c14:	4b2d      	ldr	r3, [pc, #180]	; (8015ccc <udp_input+0x218>)
 8015c16:	695b      	ldr	r3, [r3, #20]
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	bf0c      	ite	eq
 8015c1c:	2301      	moveq	r3, #1
 8015c1e:	2300      	movne	r3, #0
 8015c20:	b2db      	uxtb	r3, r3
 8015c22:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015c24:	7efb      	ldrb	r3, [r7, #27]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d041      	beq.n	8015cae <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8015c2a:	2108      	movs	r1, #8
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f7f8 ffdb 	bl	800ebe8 <pbuf_remove_header>
 8015c32:	4603      	mov	r3, r0
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d00a      	beq.n	8015c4e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8015c38:	4b20      	ldr	r3, [pc, #128]	; (8015cbc <udp_input+0x208>)
 8015c3a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015c3e:	4925      	ldr	r1, [pc, #148]	; (8015cd4 <udp_input+0x220>)
 8015c40:	4820      	ldr	r0, [pc, #128]	; (8015cc4 <udp_input+0x210>)
 8015c42:	f003 f8e3 	bl	8018e0c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f7f9 f886 	bl	800ed58 <pbuf_free>
      goto end;
 8015c4c:	e032      	b.n	8015cb4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c50:	2b00      	cmp	r3, #0
 8015c52:	d012      	beq.n	8015c7a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c56:	699b      	ldr	r3, [r3, #24]
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d00a      	beq.n	8015c72 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c5e:	699c      	ldr	r4, [r3, #24]
 8015c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c62:	69d8      	ldr	r0, [r3, #28]
 8015c64:	8a3b      	ldrh	r3, [r7, #16]
 8015c66:	9300      	str	r3, [sp, #0]
 8015c68:	4b1b      	ldr	r3, [pc, #108]	; (8015cd8 <udp_input+0x224>)
 8015c6a:	687a      	ldr	r2, [r7, #4]
 8015c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015c6e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015c70:	e021      	b.n	8015cb6 <udp_input+0x202>
        pbuf_free(p);
 8015c72:	6878      	ldr	r0, [r7, #4]
 8015c74:	f7f9 f870 	bl	800ed58 <pbuf_free>
        goto end;
 8015c78:	e01c      	b.n	8015cb4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8015c7a:	7cfb      	ldrb	r3, [r7, #19]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d112      	bne.n	8015ca6 <udp_input+0x1f2>
 8015c80:	4b12      	ldr	r3, [pc, #72]	; (8015ccc <udp_input+0x218>)
 8015c82:	695b      	ldr	r3, [r3, #20]
 8015c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c88:	2be0      	cmp	r3, #224	; 0xe0
 8015c8a:	d00c      	beq.n	8015ca6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015c8c:	4b0f      	ldr	r3, [pc, #60]	; (8015ccc <udp_input+0x218>)
 8015c8e:	899b      	ldrh	r3, [r3, #12]
 8015c90:	3308      	adds	r3, #8
 8015c92:	b29b      	uxth	r3, r3
 8015c94:	b21b      	sxth	r3, r3
 8015c96:	4619      	mov	r1, r3
 8015c98:	6878      	ldr	r0, [r7, #4]
 8015c9a:	f7f9 f818 	bl	800ecce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015c9e:	2103      	movs	r1, #3
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f001 fb93 	bl	80173cc <icmp_dest_unreach>
      pbuf_free(p);
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f7f9 f856 	bl	800ed58 <pbuf_free>
  return;
 8015cac:	e003      	b.n	8015cb6 <udp_input+0x202>
    pbuf_free(p);
 8015cae:	6878      	ldr	r0, [r7, #4]
 8015cb0:	f7f9 f852 	bl	800ed58 <pbuf_free>
  return;
 8015cb4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015cb6:	372c      	adds	r7, #44	; 0x2c
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd90      	pop	{r4, r7, pc}
 8015cbc:	0801cda8 	.word	0x0801cda8
 8015cc0:	0801ce4c 	.word	0x0801ce4c
 8015cc4:	0801cdfc 	.word	0x0801cdfc
 8015cc8:	0801ce64 	.word	0x0801ce64
 8015ccc:	2000844c 	.word	0x2000844c
 8015cd0:	2000bcc0 	.word	0x2000bcc0
 8015cd4:	0801ce80 	.word	0x0801ce80
 8015cd8:	2000845c 	.word	0x2000845c

08015cdc <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8015cdc:	b580      	push	{r7, lr}
 8015cde:	b082      	sub	sp, #8
 8015ce0:	af00      	add	r7, sp, #0
 8015ce2:	6078      	str	r0, [r7, #4]
 8015ce4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d109      	bne.n	8015d00 <udp_send+0x24>
 8015cec:	4b11      	ldr	r3, [pc, #68]	; (8015d34 <udp_send+0x58>)
 8015cee:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015cf2:	4911      	ldr	r1, [pc, #68]	; (8015d38 <udp_send+0x5c>)
 8015cf4:	4811      	ldr	r0, [pc, #68]	; (8015d3c <udp_send+0x60>)
 8015cf6:	f003 f889 	bl	8018e0c <iprintf>
 8015cfa:	f06f 030f 	mvn.w	r3, #15
 8015cfe:	e015      	b.n	8015d2c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015d00:	683b      	ldr	r3, [r7, #0]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d109      	bne.n	8015d1a <udp_send+0x3e>
 8015d06:	4b0b      	ldr	r3, [pc, #44]	; (8015d34 <udp_send+0x58>)
 8015d08:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8015d0c:	490c      	ldr	r1, [pc, #48]	; (8015d40 <udp_send+0x64>)
 8015d0e:	480b      	ldr	r0, [pc, #44]	; (8015d3c <udp_send+0x60>)
 8015d10:	f003 f87c 	bl	8018e0c <iprintf>
 8015d14:	f06f 030f 	mvn.w	r3, #15
 8015d18:	e008      	b.n	8015d2c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	1d1a      	adds	r2, r3, #4
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	8a9b      	ldrh	r3, [r3, #20]
 8015d22:	6839      	ldr	r1, [r7, #0]
 8015d24:	6878      	ldr	r0, [r7, #4]
 8015d26:	f000 f80d 	bl	8015d44 <udp_sendto>
 8015d2a:	4603      	mov	r3, r0
}
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	3708      	adds	r7, #8
 8015d30:	46bd      	mov	sp, r7
 8015d32:	bd80      	pop	{r7, pc}
 8015d34:	0801cda8 	.word	0x0801cda8
 8015d38:	0801ce9c 	.word	0x0801ce9c
 8015d3c:	0801cdfc 	.word	0x0801cdfc
 8015d40:	0801ceb4 	.word	0x0801ceb4

08015d44 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b088      	sub	sp, #32
 8015d48:	af02      	add	r7, sp, #8
 8015d4a:	60f8      	str	r0, [r7, #12]
 8015d4c:	60b9      	str	r1, [r7, #8]
 8015d4e:	607a      	str	r2, [r7, #4]
 8015d50:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d109      	bne.n	8015d6c <udp_sendto+0x28>
 8015d58:	4b23      	ldr	r3, [pc, #140]	; (8015de8 <udp_sendto+0xa4>)
 8015d5a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015d5e:	4923      	ldr	r1, [pc, #140]	; (8015dec <udp_sendto+0xa8>)
 8015d60:	4823      	ldr	r0, [pc, #140]	; (8015df0 <udp_sendto+0xac>)
 8015d62:	f003 f853 	bl	8018e0c <iprintf>
 8015d66:	f06f 030f 	mvn.w	r3, #15
 8015d6a:	e038      	b.n	8015dde <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8015d6c:	68bb      	ldr	r3, [r7, #8]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d109      	bne.n	8015d86 <udp_sendto+0x42>
 8015d72:	4b1d      	ldr	r3, [pc, #116]	; (8015de8 <udp_sendto+0xa4>)
 8015d74:	f240 2219 	movw	r2, #537	; 0x219
 8015d78:	491e      	ldr	r1, [pc, #120]	; (8015df4 <udp_sendto+0xb0>)
 8015d7a:	481d      	ldr	r0, [pc, #116]	; (8015df0 <udp_sendto+0xac>)
 8015d7c:	f003 f846 	bl	8018e0c <iprintf>
 8015d80:	f06f 030f 	mvn.w	r3, #15
 8015d84:	e02b      	b.n	8015dde <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d109      	bne.n	8015da0 <udp_sendto+0x5c>
 8015d8c:	4b16      	ldr	r3, [pc, #88]	; (8015de8 <udp_sendto+0xa4>)
 8015d8e:	f240 221a 	movw	r2, #538	; 0x21a
 8015d92:	4919      	ldr	r1, [pc, #100]	; (8015df8 <udp_sendto+0xb4>)
 8015d94:	4816      	ldr	r0, [pc, #88]	; (8015df0 <udp_sendto+0xac>)
 8015d96:	f003 f839 	bl	8018e0c <iprintf>
 8015d9a:	f06f 030f 	mvn.w	r3, #15
 8015d9e:	e01e      	b.n	8015dde <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	7a1b      	ldrb	r3, [r3, #8]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d006      	beq.n	8015db6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	7a1b      	ldrb	r3, [r3, #8]
 8015dac:	4618      	mov	r0, r3
 8015dae:	f7f8 fc13 	bl	800e5d8 <netif_get_by_index>
 8015db2:	6178      	str	r0, [r7, #20]
 8015db4:	e003      	b.n	8015dbe <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015db6:	6878      	ldr	r0, [r7, #4]
 8015db8:	f001 fb92 	bl	80174e0 <ip4_route>
 8015dbc:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8015dbe:	697b      	ldr	r3, [r7, #20]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d102      	bne.n	8015dca <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015dc4:	f06f 0303 	mvn.w	r3, #3
 8015dc8:	e009      	b.n	8015dde <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8015dca:	887a      	ldrh	r2, [r7, #2]
 8015dcc:	697b      	ldr	r3, [r7, #20]
 8015dce:	9300      	str	r3, [sp, #0]
 8015dd0:	4613      	mov	r3, r2
 8015dd2:	687a      	ldr	r2, [r7, #4]
 8015dd4:	68b9      	ldr	r1, [r7, #8]
 8015dd6:	68f8      	ldr	r0, [r7, #12]
 8015dd8:	f000 f810 	bl	8015dfc <udp_sendto_if>
 8015ddc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015dde:	4618      	mov	r0, r3
 8015de0:	3718      	adds	r7, #24
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
 8015de6:	bf00      	nop
 8015de8:	0801cda8 	.word	0x0801cda8
 8015dec:	0801cecc 	.word	0x0801cecc
 8015df0:	0801cdfc 	.word	0x0801cdfc
 8015df4:	0801cee4 	.word	0x0801cee4
 8015df8:	0801cf00 	.word	0x0801cf00

08015dfc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b088      	sub	sp, #32
 8015e00:	af02      	add	r7, sp, #8
 8015e02:	60f8      	str	r0, [r7, #12]
 8015e04:	60b9      	str	r1, [r7, #8]
 8015e06:	607a      	str	r2, [r7, #4]
 8015e08:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d109      	bne.n	8015e24 <udp_sendto_if+0x28>
 8015e10:	4b2e      	ldr	r3, [pc, #184]	; (8015ecc <udp_sendto_if+0xd0>)
 8015e12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e16:	492e      	ldr	r1, [pc, #184]	; (8015ed0 <udp_sendto_if+0xd4>)
 8015e18:	482e      	ldr	r0, [pc, #184]	; (8015ed4 <udp_sendto_if+0xd8>)
 8015e1a:	f002 fff7 	bl	8018e0c <iprintf>
 8015e1e:	f06f 030f 	mvn.w	r3, #15
 8015e22:	e04f      	b.n	8015ec4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015e24:	68bb      	ldr	r3, [r7, #8]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d109      	bne.n	8015e3e <udp_sendto_if+0x42>
 8015e2a:	4b28      	ldr	r3, [pc, #160]	; (8015ecc <udp_sendto_if+0xd0>)
 8015e2c:	f240 2281 	movw	r2, #641	; 0x281
 8015e30:	4929      	ldr	r1, [pc, #164]	; (8015ed8 <udp_sendto_if+0xdc>)
 8015e32:	4828      	ldr	r0, [pc, #160]	; (8015ed4 <udp_sendto_if+0xd8>)
 8015e34:	f002 ffea 	bl	8018e0c <iprintf>
 8015e38:	f06f 030f 	mvn.w	r3, #15
 8015e3c:	e042      	b.n	8015ec4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d109      	bne.n	8015e58 <udp_sendto_if+0x5c>
 8015e44:	4b21      	ldr	r3, [pc, #132]	; (8015ecc <udp_sendto_if+0xd0>)
 8015e46:	f240 2282 	movw	r2, #642	; 0x282
 8015e4a:	4924      	ldr	r1, [pc, #144]	; (8015edc <udp_sendto_if+0xe0>)
 8015e4c:	4821      	ldr	r0, [pc, #132]	; (8015ed4 <udp_sendto_if+0xd8>)
 8015e4e:	f002 ffdd 	bl	8018e0c <iprintf>
 8015e52:	f06f 030f 	mvn.w	r3, #15
 8015e56:	e035      	b.n	8015ec4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8015e58:	6a3b      	ldr	r3, [r7, #32]
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d109      	bne.n	8015e72 <udp_sendto_if+0x76>
 8015e5e:	4b1b      	ldr	r3, [pc, #108]	; (8015ecc <udp_sendto_if+0xd0>)
 8015e60:	f240 2283 	movw	r2, #643	; 0x283
 8015e64:	491e      	ldr	r1, [pc, #120]	; (8015ee0 <udp_sendto_if+0xe4>)
 8015e66:	481b      	ldr	r0, [pc, #108]	; (8015ed4 <udp_sendto_if+0xd8>)
 8015e68:	f002 ffd0 	bl	8018e0c <iprintf>
 8015e6c:	f06f 030f 	mvn.w	r3, #15
 8015e70:	e028      	b.n	8015ec4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d009      	beq.n	8015e8c <udp_sendto_if+0x90>
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d005      	beq.n	8015e8c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015e88:	2be0      	cmp	r3, #224	; 0xe0
 8015e8a:	d103      	bne.n	8015e94 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8015e8c:	6a3b      	ldr	r3, [r7, #32]
 8015e8e:	3304      	adds	r3, #4
 8015e90:	617b      	str	r3, [r7, #20]
 8015e92:	e00b      	b.n	8015eac <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015e94:	68fb      	ldr	r3, [r7, #12]
 8015e96:	681a      	ldr	r2, [r3, #0]
 8015e98:	6a3b      	ldr	r3, [r7, #32]
 8015e9a:	3304      	adds	r3, #4
 8015e9c:	681b      	ldr	r3, [r3, #0]
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	d002      	beq.n	8015ea8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015ea2:	f06f 0303 	mvn.w	r3, #3
 8015ea6:	e00d      	b.n	8015ec4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8015eac:	887a      	ldrh	r2, [r7, #2]
 8015eae:	697b      	ldr	r3, [r7, #20]
 8015eb0:	9301      	str	r3, [sp, #4]
 8015eb2:	6a3b      	ldr	r3, [r7, #32]
 8015eb4:	9300      	str	r3, [sp, #0]
 8015eb6:	4613      	mov	r3, r2
 8015eb8:	687a      	ldr	r2, [r7, #4]
 8015eba:	68b9      	ldr	r1, [r7, #8]
 8015ebc:	68f8      	ldr	r0, [r7, #12]
 8015ebe:	f000 f811 	bl	8015ee4 <udp_sendto_if_src>
 8015ec2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3718      	adds	r7, #24
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}
 8015ecc:	0801cda8 	.word	0x0801cda8
 8015ed0:	0801cf1c 	.word	0x0801cf1c
 8015ed4:	0801cdfc 	.word	0x0801cdfc
 8015ed8:	0801cf38 	.word	0x0801cf38
 8015edc:	0801cf54 	.word	0x0801cf54
 8015ee0:	0801cf74 	.word	0x0801cf74

08015ee4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b08c      	sub	sp, #48	; 0x30
 8015ee8:	af04      	add	r7, sp, #16
 8015eea:	60f8      	str	r0, [r7, #12]
 8015eec:	60b9      	str	r1, [r7, #8]
 8015eee:	607a      	str	r2, [r7, #4]
 8015ef0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d109      	bne.n	8015f0c <udp_sendto_if_src+0x28>
 8015ef8:	4b65      	ldr	r3, [pc, #404]	; (8016090 <udp_sendto_if_src+0x1ac>)
 8015efa:	f240 22d1 	movw	r2, #721	; 0x2d1
 8015efe:	4965      	ldr	r1, [pc, #404]	; (8016094 <udp_sendto_if_src+0x1b0>)
 8015f00:	4865      	ldr	r0, [pc, #404]	; (8016098 <udp_sendto_if_src+0x1b4>)
 8015f02:	f002 ff83 	bl	8018e0c <iprintf>
 8015f06:	f06f 030f 	mvn.w	r3, #15
 8015f0a:	e0bc      	b.n	8016086 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d109      	bne.n	8015f26 <udp_sendto_if_src+0x42>
 8015f12:	4b5f      	ldr	r3, [pc, #380]	; (8016090 <udp_sendto_if_src+0x1ac>)
 8015f14:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015f18:	4960      	ldr	r1, [pc, #384]	; (801609c <udp_sendto_if_src+0x1b8>)
 8015f1a:	485f      	ldr	r0, [pc, #380]	; (8016098 <udp_sendto_if_src+0x1b4>)
 8015f1c:	f002 ff76 	bl	8018e0c <iprintf>
 8015f20:	f06f 030f 	mvn.w	r3, #15
 8015f24:	e0af      	b.n	8016086 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d109      	bne.n	8015f40 <udp_sendto_if_src+0x5c>
 8015f2c:	4b58      	ldr	r3, [pc, #352]	; (8016090 <udp_sendto_if_src+0x1ac>)
 8015f2e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8015f32:	495b      	ldr	r1, [pc, #364]	; (80160a0 <udp_sendto_if_src+0x1bc>)
 8015f34:	4858      	ldr	r0, [pc, #352]	; (8016098 <udp_sendto_if_src+0x1b4>)
 8015f36:	f002 ff69 	bl	8018e0c <iprintf>
 8015f3a:	f06f 030f 	mvn.w	r3, #15
 8015f3e:	e0a2      	b.n	8016086 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8015f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d109      	bne.n	8015f5a <udp_sendto_if_src+0x76>
 8015f46:	4b52      	ldr	r3, [pc, #328]	; (8016090 <udp_sendto_if_src+0x1ac>)
 8015f48:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8015f4c:	4955      	ldr	r1, [pc, #340]	; (80160a4 <udp_sendto_if_src+0x1c0>)
 8015f4e:	4852      	ldr	r0, [pc, #328]	; (8016098 <udp_sendto_if_src+0x1b4>)
 8015f50:	f002 ff5c 	bl	8018e0c <iprintf>
 8015f54:	f06f 030f 	mvn.w	r3, #15
 8015f58:	e095      	b.n	8016086 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8015f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d109      	bne.n	8015f74 <udp_sendto_if_src+0x90>
 8015f60:	4b4b      	ldr	r3, [pc, #300]	; (8016090 <udp_sendto_if_src+0x1ac>)
 8015f62:	f240 22d5 	movw	r2, #725	; 0x2d5
 8015f66:	4950      	ldr	r1, [pc, #320]	; (80160a8 <udp_sendto_if_src+0x1c4>)
 8015f68:	484b      	ldr	r0, [pc, #300]	; (8016098 <udp_sendto_if_src+0x1b4>)
 8015f6a:	f002 ff4f 	bl	8018e0c <iprintf>
 8015f6e:	f06f 030f 	mvn.w	r3, #15
 8015f72:	e088      	b.n	8016086 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	8a5b      	ldrh	r3, [r3, #18]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d10f      	bne.n	8015f9c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015f7c:	68f9      	ldr	r1, [r7, #12]
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	8a5b      	ldrh	r3, [r3, #18]
 8015f82:	461a      	mov	r2, r3
 8015f84:	68f8      	ldr	r0, [r7, #12]
 8015f86:	f000 f893 	bl	80160b0 <udp_bind>
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015f8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d002      	beq.n	8015f9c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015f96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015f9a:	e074      	b.n	8016086 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015f9c:	68bb      	ldr	r3, [r7, #8]
 8015f9e:	891b      	ldrh	r3, [r3, #8]
 8015fa0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015fa4:	4293      	cmp	r3, r2
 8015fa6:	d902      	bls.n	8015fae <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8015fac:	e06b      	b.n	8016086 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015fae:	2108      	movs	r1, #8
 8015fb0:	68b8      	ldr	r0, [r7, #8]
 8015fb2:	f7f8 fe09 	bl	800ebc8 <pbuf_add_header>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d015      	beq.n	8015fe8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015fbc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015fc0:	2108      	movs	r1, #8
 8015fc2:	2022      	movs	r0, #34	; 0x22
 8015fc4:	f7f8 fbb2 	bl	800e72c <pbuf_alloc>
 8015fc8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015fca:	69fb      	ldr	r3, [r7, #28]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d102      	bne.n	8015fd6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8015fd4:	e057      	b.n	8016086 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015fd6:	68bb      	ldr	r3, [r7, #8]
 8015fd8:	891b      	ldrh	r3, [r3, #8]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d006      	beq.n	8015fec <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015fde:	68b9      	ldr	r1, [r7, #8]
 8015fe0:	69f8      	ldr	r0, [r7, #28]
 8015fe2:	f7f8 ffdd 	bl	800efa0 <pbuf_chain>
 8015fe6:	e001      	b.n	8015fec <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015fe8:	68bb      	ldr	r3, [r7, #8]
 8015fea:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8015fec:	69fb      	ldr	r3, [r7, #28]
 8015fee:	895b      	ldrh	r3, [r3, #10]
 8015ff0:	2b07      	cmp	r3, #7
 8015ff2:	d806      	bhi.n	8016002 <udp_sendto_if_src+0x11e>
 8015ff4:	4b26      	ldr	r3, [pc, #152]	; (8016090 <udp_sendto_if_src+0x1ac>)
 8015ff6:	f240 320d 	movw	r2, #781	; 0x30d
 8015ffa:	492c      	ldr	r1, [pc, #176]	; (80160ac <udp_sendto_if_src+0x1c8>)
 8015ffc:	4826      	ldr	r0, [pc, #152]	; (8016098 <udp_sendto_if_src+0x1b4>)
 8015ffe:	f002 ff05 	bl	8018e0c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8016002:	69fb      	ldr	r3, [r7, #28]
 8016004:	685b      	ldr	r3, [r3, #4]
 8016006:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	8a5b      	ldrh	r3, [r3, #18]
 801600c:	4618      	mov	r0, r3
 801600e:	f7f6 fffb 	bl	800d008 <lwip_htons>
 8016012:	4603      	mov	r3, r0
 8016014:	461a      	mov	r2, r3
 8016016:	697b      	ldr	r3, [r7, #20]
 8016018:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801601a:	887b      	ldrh	r3, [r7, #2]
 801601c:	4618      	mov	r0, r3
 801601e:	f7f6 fff3 	bl	800d008 <lwip_htons>
 8016022:	4603      	mov	r3, r0
 8016024:	461a      	mov	r2, r3
 8016026:	697b      	ldr	r3, [r7, #20]
 8016028:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801602a:	697b      	ldr	r3, [r7, #20]
 801602c:	2200      	movs	r2, #0
 801602e:	719a      	strb	r2, [r3, #6]
 8016030:	2200      	movs	r2, #0
 8016032:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8016034:	69fb      	ldr	r3, [r7, #28]
 8016036:	891b      	ldrh	r3, [r3, #8]
 8016038:	4618      	mov	r0, r3
 801603a:	f7f6 ffe5 	bl	800d008 <lwip_htons>
 801603e:	4603      	mov	r3, r0
 8016040:	461a      	mov	r2, r3
 8016042:	697b      	ldr	r3, [r7, #20]
 8016044:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8016046:	2311      	movs	r3, #17
 8016048:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	7adb      	ldrb	r3, [r3, #11]
 801604e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	7a9b      	ldrb	r3, [r3, #10]
 8016054:	7cb9      	ldrb	r1, [r7, #18]
 8016056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016058:	9202      	str	r2, [sp, #8]
 801605a:	7cfa      	ldrb	r2, [r7, #19]
 801605c:	9201      	str	r2, [sp, #4]
 801605e:	9300      	str	r3, [sp, #0]
 8016060:	460b      	mov	r3, r1
 8016062:	687a      	ldr	r2, [r7, #4]
 8016064:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016066:	69f8      	ldr	r0, [r7, #28]
 8016068:	f001 fc22 	bl	80178b0 <ip4_output_if_src>
 801606c:	4603      	mov	r3, r0
 801606e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8016070:	69fa      	ldr	r2, [r7, #28]
 8016072:	68bb      	ldr	r3, [r7, #8]
 8016074:	429a      	cmp	r2, r3
 8016076:	d004      	beq.n	8016082 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8016078:	69f8      	ldr	r0, [r7, #28]
 801607a:	f7f8 fe6d 	bl	800ed58 <pbuf_free>
    q = NULL;
 801607e:	2300      	movs	r3, #0
 8016080:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8016082:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8016086:	4618      	mov	r0, r3
 8016088:	3720      	adds	r7, #32
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	0801cda8 	.word	0x0801cda8
 8016094:	0801cf94 	.word	0x0801cf94
 8016098:	0801cdfc 	.word	0x0801cdfc
 801609c:	0801cfb4 	.word	0x0801cfb4
 80160a0:	0801cfd4 	.word	0x0801cfd4
 80160a4:	0801cff8 	.word	0x0801cff8
 80160a8:	0801d01c 	.word	0x0801d01c
 80160ac:	0801d040 	.word	0x0801d040

080160b0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b086      	sub	sp, #24
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	4613      	mov	r3, r2
 80160bc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d101      	bne.n	80160c8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80160c4:	4b39      	ldr	r3, [pc, #228]	; (80161ac <udp_bind+0xfc>)
 80160c6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d109      	bne.n	80160e2 <udp_bind+0x32>
 80160ce:	4b38      	ldr	r3, [pc, #224]	; (80161b0 <udp_bind+0x100>)
 80160d0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80160d4:	4937      	ldr	r1, [pc, #220]	; (80161b4 <udp_bind+0x104>)
 80160d6:	4838      	ldr	r0, [pc, #224]	; (80161b8 <udp_bind+0x108>)
 80160d8:	f002 fe98 	bl	8018e0c <iprintf>
 80160dc:	f06f 030f 	mvn.w	r3, #15
 80160e0:	e060      	b.n	80161a4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80160e2:	2300      	movs	r3, #0
 80160e4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80160e6:	4b35      	ldr	r3, [pc, #212]	; (80161bc <udp_bind+0x10c>)
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	617b      	str	r3, [r7, #20]
 80160ec:	e009      	b.n	8016102 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80160ee:	68fa      	ldr	r2, [r7, #12]
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	429a      	cmp	r2, r3
 80160f4:	d102      	bne.n	80160fc <udp_bind+0x4c>
      rebind = 1;
 80160f6:	2301      	movs	r3, #1
 80160f8:	74fb      	strb	r3, [r7, #19]
      break;
 80160fa:	e005      	b.n	8016108 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80160fc:	697b      	ldr	r3, [r7, #20]
 80160fe:	68db      	ldr	r3, [r3, #12]
 8016100:	617b      	str	r3, [r7, #20]
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d1f2      	bne.n	80160ee <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8016108:	88fb      	ldrh	r3, [r7, #6]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d109      	bne.n	8016122 <udp_bind+0x72>
    port = udp_new_port();
 801610e:	f7ff fc35 	bl	801597c <udp_new_port>
 8016112:	4603      	mov	r3, r0
 8016114:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8016116:	88fb      	ldrh	r3, [r7, #6]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d12c      	bne.n	8016176 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801611c:	f06f 0307 	mvn.w	r3, #7
 8016120:	e040      	b.n	80161a4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8016122:	4b26      	ldr	r3, [pc, #152]	; (80161bc <udp_bind+0x10c>)
 8016124:	681b      	ldr	r3, [r3, #0]
 8016126:	617b      	str	r3, [r7, #20]
 8016128:	e022      	b.n	8016170 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801612a:	68fa      	ldr	r2, [r7, #12]
 801612c:	697b      	ldr	r3, [r7, #20]
 801612e:	429a      	cmp	r2, r3
 8016130:	d01b      	beq.n	801616a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8016132:	697b      	ldr	r3, [r7, #20]
 8016134:	8a5b      	ldrh	r3, [r3, #18]
 8016136:	88fa      	ldrh	r2, [r7, #6]
 8016138:	429a      	cmp	r2, r3
 801613a:	d116      	bne.n	801616a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	681a      	ldr	r2, [r3, #0]
 8016140:	68bb      	ldr	r3, [r7, #8]
 8016142:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8016144:	429a      	cmp	r2, r3
 8016146:	d00d      	beq.n	8016164 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016148:	68bb      	ldr	r3, [r7, #8]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d00a      	beq.n	8016164 <udp_bind+0xb4>
 801614e:	68bb      	ldr	r3, [r7, #8]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d006      	beq.n	8016164 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8016156:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8016158:	2b00      	cmp	r3, #0
 801615a:	d003      	beq.n	8016164 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801615c:	697b      	ldr	r3, [r7, #20]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d102      	bne.n	801616a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8016164:	f06f 0307 	mvn.w	r3, #7
 8016168:	e01c      	b.n	80161a4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	68db      	ldr	r3, [r3, #12]
 801616e:	617b      	str	r3, [r7, #20]
 8016170:	697b      	ldr	r3, [r7, #20]
 8016172:	2b00      	cmp	r3, #0
 8016174:	d1d9      	bne.n	801612a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8016176:	68bb      	ldr	r3, [r7, #8]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d002      	beq.n	8016182 <udp_bind+0xd2>
 801617c:	68bb      	ldr	r3, [r7, #8]
 801617e:	681b      	ldr	r3, [r3, #0]
 8016180:	e000      	b.n	8016184 <udp_bind+0xd4>
 8016182:	2300      	movs	r3, #0
 8016184:	68fa      	ldr	r2, [r7, #12]
 8016186:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	88fa      	ldrh	r2, [r7, #6]
 801618c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801618e:	7cfb      	ldrb	r3, [r7, #19]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d106      	bne.n	80161a2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8016194:	4b09      	ldr	r3, [pc, #36]	; (80161bc <udp_bind+0x10c>)
 8016196:	681a      	ldr	r2, [r3, #0]
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801619c:	4a07      	ldr	r2, [pc, #28]	; (80161bc <udp_bind+0x10c>)
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80161a2:	2300      	movs	r3, #0
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	3718      	adds	r7, #24
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}
 80161ac:	0801dd7c 	.word	0x0801dd7c
 80161b0:	0801cda8 	.word	0x0801cda8
 80161b4:	0801d070 	.word	0x0801d070
 80161b8:	0801cdfc 	.word	0x0801cdfc
 80161bc:	2000bcc0 	.word	0x2000bcc0

080161c0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80161c0:	b580      	push	{r7, lr}
 80161c2:	b084      	sub	sp, #16
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	60f8      	str	r0, [r7, #12]
 80161c8:	60b9      	str	r1, [r7, #8]
 80161ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d107      	bne.n	80161e2 <udp_recv+0x22>
 80161d2:	4b08      	ldr	r3, [pc, #32]	; (80161f4 <udp_recv+0x34>)
 80161d4:	f240 428a 	movw	r2, #1162	; 0x48a
 80161d8:	4907      	ldr	r1, [pc, #28]	; (80161f8 <udp_recv+0x38>)
 80161da:	4808      	ldr	r0, [pc, #32]	; (80161fc <udp_recv+0x3c>)
 80161dc:	f002 fe16 	bl	8018e0c <iprintf>
 80161e0:	e005      	b.n	80161ee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	68ba      	ldr	r2, [r7, #8]
 80161e6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	687a      	ldr	r2, [r7, #4]
 80161ec:	61da      	str	r2, [r3, #28]
}
 80161ee:	3710      	adds	r7, #16
 80161f0:	46bd      	mov	sp, r7
 80161f2:	bd80      	pop	{r7, pc}
 80161f4:	0801cda8 	.word	0x0801cda8
 80161f8:	0801d0dc 	.word	0x0801d0dc
 80161fc:	0801cdfc 	.word	0x0801cdfc

08016200 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	2b00      	cmp	r3, #0
 801620c:	d107      	bne.n	801621e <udp_remove+0x1e>
 801620e:	4b19      	ldr	r3, [pc, #100]	; (8016274 <udp_remove+0x74>)
 8016210:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8016214:	4918      	ldr	r1, [pc, #96]	; (8016278 <udp_remove+0x78>)
 8016216:	4819      	ldr	r0, [pc, #100]	; (801627c <udp_remove+0x7c>)
 8016218:	f002 fdf8 	bl	8018e0c <iprintf>
 801621c:	e026      	b.n	801626c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801621e:	4b18      	ldr	r3, [pc, #96]	; (8016280 <udp_remove+0x80>)
 8016220:	681b      	ldr	r3, [r3, #0]
 8016222:	687a      	ldr	r2, [r7, #4]
 8016224:	429a      	cmp	r2, r3
 8016226:	d105      	bne.n	8016234 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8016228:	4b15      	ldr	r3, [pc, #84]	; (8016280 <udp_remove+0x80>)
 801622a:	681b      	ldr	r3, [r3, #0]
 801622c:	68db      	ldr	r3, [r3, #12]
 801622e:	4a14      	ldr	r2, [pc, #80]	; (8016280 <udp_remove+0x80>)
 8016230:	6013      	str	r3, [r2, #0]
 8016232:	e017      	b.n	8016264 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016234:	4b12      	ldr	r3, [pc, #72]	; (8016280 <udp_remove+0x80>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	60fb      	str	r3, [r7, #12]
 801623a:	e010      	b.n	801625e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	2b00      	cmp	r3, #0
 8016242:	d009      	beq.n	8016258 <udp_remove+0x58>
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	68db      	ldr	r3, [r3, #12]
 8016248:	687a      	ldr	r2, [r7, #4]
 801624a:	429a      	cmp	r2, r3
 801624c:	d104      	bne.n	8016258 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	68da      	ldr	r2, [r3, #12]
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	60da      	str	r2, [r3, #12]
        break;
 8016256:	e005      	b.n	8016264 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	68db      	ldr	r3, [r3, #12]
 801625c:	60fb      	str	r3, [r7, #12]
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d1eb      	bne.n	801623c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8016264:	6879      	ldr	r1, [r7, #4]
 8016266:	2000      	movs	r0, #0
 8016268:	f7f7 fea0 	bl	800dfac <memp_free>
}
 801626c:	3710      	adds	r7, #16
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}
 8016272:	bf00      	nop
 8016274:	0801cda8 	.word	0x0801cda8
 8016278:	0801d0f4 	.word	0x0801d0f4
 801627c:	0801cdfc 	.word	0x0801cdfc
 8016280:	2000bcc0 	.word	0x2000bcc0

08016284 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8016284:	b580      	push	{r7, lr}
 8016286:	b082      	sub	sp, #8
 8016288:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801628a:	2000      	movs	r0, #0
 801628c:	f7f7 fe3c 	bl	800df08 <memp_malloc>
 8016290:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d007      	beq.n	80162a8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8016298:	2220      	movs	r2, #32
 801629a:	2100      	movs	r1, #0
 801629c:	6878      	ldr	r0, [r7, #4]
 801629e:	f002 fd03 	bl	8018ca8 <memset>
    pcb->ttl = UDP_TTL;
 80162a2:	687b      	ldr	r3, [r7, #4]
 80162a4:	22ff      	movs	r2, #255	; 0xff
 80162a6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80162a8:	687b      	ldr	r3, [r7, #4]
}
 80162aa:	4618      	mov	r0, r3
 80162ac:	3708      	adds	r7, #8
 80162ae:	46bd      	mov	sp, r7
 80162b0:	bd80      	pop	{r7, pc}

080162b2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80162b2:	b580      	push	{r7, lr}
 80162b4:	b084      	sub	sp, #16
 80162b6:	af00      	add	r7, sp, #0
 80162b8:	4603      	mov	r3, r0
 80162ba:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80162bc:	f7ff ffe2 	bl	8016284 <udp_new>
 80162c0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80162c2:	68fb      	ldr	r3, [r7, #12]
}
 80162c4:	4618      	mov	r0, r3
 80162c6:	3710      	adds	r7, #16
 80162c8:	46bd      	mov	sp, r7
 80162ca:	bd80      	pop	{r7, pc}

080162cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80162cc:	b480      	push	{r7}
 80162ce:	b085      	sub	sp, #20
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
 80162d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d01e      	beq.n	801631a <udp_netif_ip_addr_changed+0x4e>
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d01a      	beq.n	801631a <udp_netif_ip_addr_changed+0x4e>
 80162e4:	683b      	ldr	r3, [r7, #0]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d017      	beq.n	801631a <udp_netif_ip_addr_changed+0x4e>
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	681b      	ldr	r3, [r3, #0]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d013      	beq.n	801631a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80162f2:	4b0d      	ldr	r3, [pc, #52]	; (8016328 <udp_netif_ip_addr_changed+0x5c>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	60fb      	str	r3, [r7, #12]
 80162f8:	e00c      	b.n	8016314 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	681a      	ldr	r2, [r3, #0]
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	429a      	cmp	r2, r3
 8016304:	d103      	bne.n	801630e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016306:	683b      	ldr	r3, [r7, #0]
 8016308:	681a      	ldr	r2, [r3, #0]
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	68db      	ldr	r3, [r3, #12]
 8016312:	60fb      	str	r3, [r7, #12]
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	2b00      	cmp	r3, #0
 8016318:	d1ef      	bne.n	80162fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801631a:	bf00      	nop
 801631c:	3714      	adds	r7, #20
 801631e:	46bd      	mov	sp, r7
 8016320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016324:	4770      	bx	lr
 8016326:	bf00      	nop
 8016328:	2000bcc0 	.word	0x2000bcc0

0801632c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b082      	sub	sp, #8
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016334:	4915      	ldr	r1, [pc, #84]	; (801638c <etharp_free_entry+0x60>)
 8016336:	687a      	ldr	r2, [r7, #4]
 8016338:	4613      	mov	r3, r2
 801633a:	005b      	lsls	r3, r3, #1
 801633c:	4413      	add	r3, r2
 801633e:	00db      	lsls	r3, r3, #3
 8016340:	440b      	add	r3, r1
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d013      	beq.n	8016370 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016348:	4910      	ldr	r1, [pc, #64]	; (801638c <etharp_free_entry+0x60>)
 801634a:	687a      	ldr	r2, [r7, #4]
 801634c:	4613      	mov	r3, r2
 801634e:	005b      	lsls	r3, r3, #1
 8016350:	4413      	add	r3, r2
 8016352:	00db      	lsls	r3, r3, #3
 8016354:	440b      	add	r3, r1
 8016356:	681b      	ldr	r3, [r3, #0]
 8016358:	4618      	mov	r0, r3
 801635a:	f7f8 fcfd 	bl	800ed58 <pbuf_free>
    arp_table[i].q = NULL;
 801635e:	490b      	ldr	r1, [pc, #44]	; (801638c <etharp_free_entry+0x60>)
 8016360:	687a      	ldr	r2, [r7, #4]
 8016362:	4613      	mov	r3, r2
 8016364:	005b      	lsls	r3, r3, #1
 8016366:	4413      	add	r3, r2
 8016368:	00db      	lsls	r3, r3, #3
 801636a:	440b      	add	r3, r1
 801636c:	2200      	movs	r2, #0
 801636e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016370:	4906      	ldr	r1, [pc, #24]	; (801638c <etharp_free_entry+0x60>)
 8016372:	687a      	ldr	r2, [r7, #4]
 8016374:	4613      	mov	r3, r2
 8016376:	005b      	lsls	r3, r3, #1
 8016378:	4413      	add	r3, r2
 801637a:	00db      	lsls	r3, r3, #3
 801637c:	440b      	add	r3, r1
 801637e:	3314      	adds	r3, #20
 8016380:	2200      	movs	r2, #0
 8016382:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016384:	bf00      	nop
 8016386:	3708      	adds	r7, #8
 8016388:	46bd      	mov	sp, r7
 801638a:	bd80      	pop	{r7, pc}
 801638c:	20004f1c 	.word	0x20004f1c

08016390 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b082      	sub	sp, #8
 8016394:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016396:	2300      	movs	r3, #0
 8016398:	607b      	str	r3, [r7, #4]
 801639a:	e096      	b.n	80164ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801639c:	494f      	ldr	r1, [pc, #316]	; (80164dc <etharp_tmr+0x14c>)
 801639e:	687a      	ldr	r2, [r7, #4]
 80163a0:	4613      	mov	r3, r2
 80163a2:	005b      	lsls	r3, r3, #1
 80163a4:	4413      	add	r3, r2
 80163a6:	00db      	lsls	r3, r3, #3
 80163a8:	440b      	add	r3, r1
 80163aa:	3314      	adds	r3, #20
 80163ac:	781b      	ldrb	r3, [r3, #0]
 80163ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80163b0:	78fb      	ldrb	r3, [r7, #3]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	f000 8086 	beq.w	80164c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80163b8:	4948      	ldr	r1, [pc, #288]	; (80164dc <etharp_tmr+0x14c>)
 80163ba:	687a      	ldr	r2, [r7, #4]
 80163bc:	4613      	mov	r3, r2
 80163be:	005b      	lsls	r3, r3, #1
 80163c0:	4413      	add	r3, r2
 80163c2:	00db      	lsls	r3, r3, #3
 80163c4:	440b      	add	r3, r1
 80163c6:	3312      	adds	r3, #18
 80163c8:	881b      	ldrh	r3, [r3, #0]
 80163ca:	3301      	adds	r3, #1
 80163cc:	b298      	uxth	r0, r3
 80163ce:	4943      	ldr	r1, [pc, #268]	; (80164dc <etharp_tmr+0x14c>)
 80163d0:	687a      	ldr	r2, [r7, #4]
 80163d2:	4613      	mov	r3, r2
 80163d4:	005b      	lsls	r3, r3, #1
 80163d6:	4413      	add	r3, r2
 80163d8:	00db      	lsls	r3, r3, #3
 80163da:	440b      	add	r3, r1
 80163dc:	3312      	adds	r3, #18
 80163de:	4602      	mov	r2, r0
 80163e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80163e2:	493e      	ldr	r1, [pc, #248]	; (80164dc <etharp_tmr+0x14c>)
 80163e4:	687a      	ldr	r2, [r7, #4]
 80163e6:	4613      	mov	r3, r2
 80163e8:	005b      	lsls	r3, r3, #1
 80163ea:	4413      	add	r3, r2
 80163ec:	00db      	lsls	r3, r3, #3
 80163ee:	440b      	add	r3, r1
 80163f0:	3312      	adds	r3, #18
 80163f2:	881b      	ldrh	r3, [r3, #0]
 80163f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80163f8:	d215      	bcs.n	8016426 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80163fa:	4938      	ldr	r1, [pc, #224]	; (80164dc <etharp_tmr+0x14c>)
 80163fc:	687a      	ldr	r2, [r7, #4]
 80163fe:	4613      	mov	r3, r2
 8016400:	005b      	lsls	r3, r3, #1
 8016402:	4413      	add	r3, r2
 8016404:	00db      	lsls	r3, r3, #3
 8016406:	440b      	add	r3, r1
 8016408:	3314      	adds	r3, #20
 801640a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801640c:	2b01      	cmp	r3, #1
 801640e:	d10e      	bne.n	801642e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016410:	4932      	ldr	r1, [pc, #200]	; (80164dc <etharp_tmr+0x14c>)
 8016412:	687a      	ldr	r2, [r7, #4]
 8016414:	4613      	mov	r3, r2
 8016416:	005b      	lsls	r3, r3, #1
 8016418:	4413      	add	r3, r2
 801641a:	00db      	lsls	r3, r3, #3
 801641c:	440b      	add	r3, r1
 801641e:	3312      	adds	r3, #18
 8016420:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016422:	2b04      	cmp	r3, #4
 8016424:	d903      	bls.n	801642e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016426:	6878      	ldr	r0, [r7, #4]
 8016428:	f7ff ff80 	bl	801632c <etharp_free_entry>
 801642c:	e04a      	b.n	80164c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801642e:	492b      	ldr	r1, [pc, #172]	; (80164dc <etharp_tmr+0x14c>)
 8016430:	687a      	ldr	r2, [r7, #4]
 8016432:	4613      	mov	r3, r2
 8016434:	005b      	lsls	r3, r3, #1
 8016436:	4413      	add	r3, r2
 8016438:	00db      	lsls	r3, r3, #3
 801643a:	440b      	add	r3, r1
 801643c:	3314      	adds	r3, #20
 801643e:	781b      	ldrb	r3, [r3, #0]
 8016440:	2b03      	cmp	r3, #3
 8016442:	d10a      	bne.n	801645a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016444:	4925      	ldr	r1, [pc, #148]	; (80164dc <etharp_tmr+0x14c>)
 8016446:	687a      	ldr	r2, [r7, #4]
 8016448:	4613      	mov	r3, r2
 801644a:	005b      	lsls	r3, r3, #1
 801644c:	4413      	add	r3, r2
 801644e:	00db      	lsls	r3, r3, #3
 8016450:	440b      	add	r3, r1
 8016452:	3314      	adds	r3, #20
 8016454:	2204      	movs	r2, #4
 8016456:	701a      	strb	r2, [r3, #0]
 8016458:	e034      	b.n	80164c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801645a:	4920      	ldr	r1, [pc, #128]	; (80164dc <etharp_tmr+0x14c>)
 801645c:	687a      	ldr	r2, [r7, #4]
 801645e:	4613      	mov	r3, r2
 8016460:	005b      	lsls	r3, r3, #1
 8016462:	4413      	add	r3, r2
 8016464:	00db      	lsls	r3, r3, #3
 8016466:	440b      	add	r3, r1
 8016468:	3314      	adds	r3, #20
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	2b04      	cmp	r3, #4
 801646e:	d10a      	bne.n	8016486 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016470:	491a      	ldr	r1, [pc, #104]	; (80164dc <etharp_tmr+0x14c>)
 8016472:	687a      	ldr	r2, [r7, #4]
 8016474:	4613      	mov	r3, r2
 8016476:	005b      	lsls	r3, r3, #1
 8016478:	4413      	add	r3, r2
 801647a:	00db      	lsls	r3, r3, #3
 801647c:	440b      	add	r3, r1
 801647e:	3314      	adds	r3, #20
 8016480:	2202      	movs	r2, #2
 8016482:	701a      	strb	r2, [r3, #0]
 8016484:	e01e      	b.n	80164c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016486:	4915      	ldr	r1, [pc, #84]	; (80164dc <etharp_tmr+0x14c>)
 8016488:	687a      	ldr	r2, [r7, #4]
 801648a:	4613      	mov	r3, r2
 801648c:	005b      	lsls	r3, r3, #1
 801648e:	4413      	add	r3, r2
 8016490:	00db      	lsls	r3, r3, #3
 8016492:	440b      	add	r3, r1
 8016494:	3314      	adds	r3, #20
 8016496:	781b      	ldrb	r3, [r3, #0]
 8016498:	2b01      	cmp	r3, #1
 801649a:	d113      	bne.n	80164c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801649c:	490f      	ldr	r1, [pc, #60]	; (80164dc <etharp_tmr+0x14c>)
 801649e:	687a      	ldr	r2, [r7, #4]
 80164a0:	4613      	mov	r3, r2
 80164a2:	005b      	lsls	r3, r3, #1
 80164a4:	4413      	add	r3, r2
 80164a6:	00db      	lsls	r3, r3, #3
 80164a8:	440b      	add	r3, r1
 80164aa:	3308      	adds	r3, #8
 80164ac:	6818      	ldr	r0, [r3, #0]
 80164ae:	687a      	ldr	r2, [r7, #4]
 80164b0:	4613      	mov	r3, r2
 80164b2:	005b      	lsls	r3, r3, #1
 80164b4:	4413      	add	r3, r2
 80164b6:	00db      	lsls	r3, r3, #3
 80164b8:	4a08      	ldr	r2, [pc, #32]	; (80164dc <etharp_tmr+0x14c>)
 80164ba:	4413      	add	r3, r2
 80164bc:	3304      	adds	r3, #4
 80164be:	4619      	mov	r1, r3
 80164c0:	f000 fe6e 	bl	80171a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	3301      	adds	r3, #1
 80164c8:	607b      	str	r3, [r7, #4]
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	2b09      	cmp	r3, #9
 80164ce:	f77f af65 	ble.w	801639c <etharp_tmr+0xc>
      }
    }
  }
}
 80164d2:	bf00      	nop
 80164d4:	bf00      	nop
 80164d6:	3708      	adds	r7, #8
 80164d8:	46bd      	mov	sp, r7
 80164da:	bd80      	pop	{r7, pc}
 80164dc:	20004f1c 	.word	0x20004f1c

080164e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80164e0:	b580      	push	{r7, lr}
 80164e2:	b08a      	sub	sp, #40	; 0x28
 80164e4:	af00      	add	r7, sp, #0
 80164e6:	60f8      	str	r0, [r7, #12]
 80164e8:	460b      	mov	r3, r1
 80164ea:	607a      	str	r2, [r7, #4]
 80164ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80164ee:	230a      	movs	r3, #10
 80164f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80164f2:	230a      	movs	r3, #10
 80164f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80164f6:	230a      	movs	r3, #10
 80164f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80164fa:	2300      	movs	r3, #0
 80164fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80164fe:	230a      	movs	r3, #10
 8016500:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016502:	2300      	movs	r3, #0
 8016504:	83bb      	strh	r3, [r7, #28]
 8016506:	2300      	movs	r3, #0
 8016508:	837b      	strh	r3, [r7, #26]
 801650a:	2300      	movs	r3, #0
 801650c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801650e:	2300      	movs	r3, #0
 8016510:	843b      	strh	r3, [r7, #32]
 8016512:	e0ae      	b.n	8016672 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016514:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016518:	49a6      	ldr	r1, [pc, #664]	; (80167b4 <etharp_find_entry+0x2d4>)
 801651a:	4613      	mov	r3, r2
 801651c:	005b      	lsls	r3, r3, #1
 801651e:	4413      	add	r3, r2
 8016520:	00db      	lsls	r3, r3, #3
 8016522:	440b      	add	r3, r1
 8016524:	3314      	adds	r3, #20
 8016526:	781b      	ldrb	r3, [r3, #0]
 8016528:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801652a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801652e:	2b0a      	cmp	r3, #10
 8016530:	d105      	bne.n	801653e <etharp_find_entry+0x5e>
 8016532:	7dfb      	ldrb	r3, [r7, #23]
 8016534:	2b00      	cmp	r3, #0
 8016536:	d102      	bne.n	801653e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016538:	8c3b      	ldrh	r3, [r7, #32]
 801653a:	847b      	strh	r3, [r7, #34]	; 0x22
 801653c:	e095      	b.n	801666a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801653e:	7dfb      	ldrb	r3, [r7, #23]
 8016540:	2b00      	cmp	r3, #0
 8016542:	f000 8092 	beq.w	801666a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016546:	7dfb      	ldrb	r3, [r7, #23]
 8016548:	2b01      	cmp	r3, #1
 801654a:	d009      	beq.n	8016560 <etharp_find_entry+0x80>
 801654c:	7dfb      	ldrb	r3, [r7, #23]
 801654e:	2b01      	cmp	r3, #1
 8016550:	d806      	bhi.n	8016560 <etharp_find_entry+0x80>
 8016552:	4b99      	ldr	r3, [pc, #612]	; (80167b8 <etharp_find_entry+0x2d8>)
 8016554:	f240 1223 	movw	r2, #291	; 0x123
 8016558:	4998      	ldr	r1, [pc, #608]	; (80167bc <etharp_find_entry+0x2dc>)
 801655a:	4899      	ldr	r0, [pc, #612]	; (80167c0 <etharp_find_entry+0x2e0>)
 801655c:	f002 fc56 	bl	8018e0c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	2b00      	cmp	r3, #0
 8016564:	d020      	beq.n	80165a8 <etharp_find_entry+0xc8>
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	6819      	ldr	r1, [r3, #0]
 801656a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801656e:	4891      	ldr	r0, [pc, #580]	; (80167b4 <etharp_find_entry+0x2d4>)
 8016570:	4613      	mov	r3, r2
 8016572:	005b      	lsls	r3, r3, #1
 8016574:	4413      	add	r3, r2
 8016576:	00db      	lsls	r3, r3, #3
 8016578:	4403      	add	r3, r0
 801657a:	3304      	adds	r3, #4
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	4299      	cmp	r1, r3
 8016580:	d112      	bne.n	80165a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d00c      	beq.n	80165a2 <etharp_find_entry+0xc2>
 8016588:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801658c:	4989      	ldr	r1, [pc, #548]	; (80167b4 <etharp_find_entry+0x2d4>)
 801658e:	4613      	mov	r3, r2
 8016590:	005b      	lsls	r3, r3, #1
 8016592:	4413      	add	r3, r2
 8016594:	00db      	lsls	r3, r3, #3
 8016596:	440b      	add	r3, r1
 8016598:	3308      	adds	r3, #8
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	687a      	ldr	r2, [r7, #4]
 801659e:	429a      	cmp	r2, r3
 80165a0:	d102      	bne.n	80165a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80165a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80165a6:	e100      	b.n	80167aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80165a8:	7dfb      	ldrb	r3, [r7, #23]
 80165aa:	2b01      	cmp	r3, #1
 80165ac:	d140      	bne.n	8016630 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80165ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165b2:	4980      	ldr	r1, [pc, #512]	; (80167b4 <etharp_find_entry+0x2d4>)
 80165b4:	4613      	mov	r3, r2
 80165b6:	005b      	lsls	r3, r3, #1
 80165b8:	4413      	add	r3, r2
 80165ba:	00db      	lsls	r3, r3, #3
 80165bc:	440b      	add	r3, r1
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d01a      	beq.n	80165fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80165c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165c8:	497a      	ldr	r1, [pc, #488]	; (80167b4 <etharp_find_entry+0x2d4>)
 80165ca:	4613      	mov	r3, r2
 80165cc:	005b      	lsls	r3, r3, #1
 80165ce:	4413      	add	r3, r2
 80165d0:	00db      	lsls	r3, r3, #3
 80165d2:	440b      	add	r3, r1
 80165d4:	3312      	adds	r3, #18
 80165d6:	881b      	ldrh	r3, [r3, #0]
 80165d8:	8bba      	ldrh	r2, [r7, #28]
 80165da:	429a      	cmp	r2, r3
 80165dc:	d845      	bhi.n	801666a <etharp_find_entry+0x18a>
            old_queue = i;
 80165de:	8c3b      	ldrh	r3, [r7, #32]
 80165e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80165e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165e6:	4973      	ldr	r1, [pc, #460]	; (80167b4 <etharp_find_entry+0x2d4>)
 80165e8:	4613      	mov	r3, r2
 80165ea:	005b      	lsls	r3, r3, #1
 80165ec:	4413      	add	r3, r2
 80165ee:	00db      	lsls	r3, r3, #3
 80165f0:	440b      	add	r3, r1
 80165f2:	3312      	adds	r3, #18
 80165f4:	881b      	ldrh	r3, [r3, #0]
 80165f6:	83bb      	strh	r3, [r7, #28]
 80165f8:	e037      	b.n	801666a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80165fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80165fe:	496d      	ldr	r1, [pc, #436]	; (80167b4 <etharp_find_entry+0x2d4>)
 8016600:	4613      	mov	r3, r2
 8016602:	005b      	lsls	r3, r3, #1
 8016604:	4413      	add	r3, r2
 8016606:	00db      	lsls	r3, r3, #3
 8016608:	440b      	add	r3, r1
 801660a:	3312      	adds	r3, #18
 801660c:	881b      	ldrh	r3, [r3, #0]
 801660e:	8b7a      	ldrh	r2, [r7, #26]
 8016610:	429a      	cmp	r2, r3
 8016612:	d82a      	bhi.n	801666a <etharp_find_entry+0x18a>
            old_pending = i;
 8016614:	8c3b      	ldrh	r3, [r7, #32]
 8016616:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016618:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801661c:	4965      	ldr	r1, [pc, #404]	; (80167b4 <etharp_find_entry+0x2d4>)
 801661e:	4613      	mov	r3, r2
 8016620:	005b      	lsls	r3, r3, #1
 8016622:	4413      	add	r3, r2
 8016624:	00db      	lsls	r3, r3, #3
 8016626:	440b      	add	r3, r1
 8016628:	3312      	adds	r3, #18
 801662a:	881b      	ldrh	r3, [r3, #0]
 801662c:	837b      	strh	r3, [r7, #26]
 801662e:	e01c      	b.n	801666a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016630:	7dfb      	ldrb	r3, [r7, #23]
 8016632:	2b01      	cmp	r3, #1
 8016634:	d919      	bls.n	801666a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801663a:	495e      	ldr	r1, [pc, #376]	; (80167b4 <etharp_find_entry+0x2d4>)
 801663c:	4613      	mov	r3, r2
 801663e:	005b      	lsls	r3, r3, #1
 8016640:	4413      	add	r3, r2
 8016642:	00db      	lsls	r3, r3, #3
 8016644:	440b      	add	r3, r1
 8016646:	3312      	adds	r3, #18
 8016648:	881b      	ldrh	r3, [r3, #0]
 801664a:	8b3a      	ldrh	r2, [r7, #24]
 801664c:	429a      	cmp	r2, r3
 801664e:	d80c      	bhi.n	801666a <etharp_find_entry+0x18a>
            old_stable = i;
 8016650:	8c3b      	ldrh	r3, [r7, #32]
 8016652:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016654:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016658:	4956      	ldr	r1, [pc, #344]	; (80167b4 <etharp_find_entry+0x2d4>)
 801665a:	4613      	mov	r3, r2
 801665c:	005b      	lsls	r3, r3, #1
 801665e:	4413      	add	r3, r2
 8016660:	00db      	lsls	r3, r3, #3
 8016662:	440b      	add	r3, r1
 8016664:	3312      	adds	r3, #18
 8016666:	881b      	ldrh	r3, [r3, #0]
 8016668:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801666a:	8c3b      	ldrh	r3, [r7, #32]
 801666c:	3301      	adds	r3, #1
 801666e:	b29b      	uxth	r3, r3
 8016670:	843b      	strh	r3, [r7, #32]
 8016672:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016676:	2b09      	cmp	r3, #9
 8016678:	f77f af4c 	ble.w	8016514 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801667c:	7afb      	ldrb	r3, [r7, #11]
 801667e:	f003 0302 	and.w	r3, r3, #2
 8016682:	2b00      	cmp	r3, #0
 8016684:	d108      	bne.n	8016698 <etharp_find_entry+0x1b8>
 8016686:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801668a:	2b0a      	cmp	r3, #10
 801668c:	d107      	bne.n	801669e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801668e:	7afb      	ldrb	r3, [r7, #11]
 8016690:	f003 0301 	and.w	r3, r3, #1
 8016694:	2b00      	cmp	r3, #0
 8016696:	d102      	bne.n	801669e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016698:	f04f 33ff 	mov.w	r3, #4294967295
 801669c:	e085      	b.n	80167aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801669e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80166a2:	2b09      	cmp	r3, #9
 80166a4:	dc02      	bgt.n	80166ac <etharp_find_entry+0x1cc>
    i = empty;
 80166a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80166a8:	843b      	strh	r3, [r7, #32]
 80166aa:	e039      	b.n	8016720 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80166ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80166b0:	2b09      	cmp	r3, #9
 80166b2:	dc14      	bgt.n	80166de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80166b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80166b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166bc:	493d      	ldr	r1, [pc, #244]	; (80167b4 <etharp_find_entry+0x2d4>)
 80166be:	4613      	mov	r3, r2
 80166c0:	005b      	lsls	r3, r3, #1
 80166c2:	4413      	add	r3, r2
 80166c4:	00db      	lsls	r3, r3, #3
 80166c6:	440b      	add	r3, r1
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d018      	beq.n	8016700 <etharp_find_entry+0x220>
 80166ce:	4b3a      	ldr	r3, [pc, #232]	; (80167b8 <etharp_find_entry+0x2d8>)
 80166d0:	f240 126d 	movw	r2, #365	; 0x16d
 80166d4:	493b      	ldr	r1, [pc, #236]	; (80167c4 <etharp_find_entry+0x2e4>)
 80166d6:	483a      	ldr	r0, [pc, #232]	; (80167c0 <etharp_find_entry+0x2e0>)
 80166d8:	f002 fb98 	bl	8018e0c <iprintf>
 80166dc:	e010      	b.n	8016700 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80166de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80166e2:	2b09      	cmp	r3, #9
 80166e4:	dc02      	bgt.n	80166ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80166e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80166e8:	843b      	strh	r3, [r7, #32]
 80166ea:	e009      	b.n	8016700 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80166ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80166f0:	2b09      	cmp	r3, #9
 80166f2:	dc02      	bgt.n	80166fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80166f4:	8bfb      	ldrh	r3, [r7, #30]
 80166f6:	843b      	strh	r3, [r7, #32]
 80166f8:	e002      	b.n	8016700 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80166fa:	f04f 33ff 	mov.w	r3, #4294967295
 80166fe:	e054      	b.n	80167aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016700:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016704:	2b09      	cmp	r3, #9
 8016706:	dd06      	ble.n	8016716 <etharp_find_entry+0x236>
 8016708:	4b2b      	ldr	r3, [pc, #172]	; (80167b8 <etharp_find_entry+0x2d8>)
 801670a:	f240 127f 	movw	r2, #383	; 0x17f
 801670e:	492e      	ldr	r1, [pc, #184]	; (80167c8 <etharp_find_entry+0x2e8>)
 8016710:	482b      	ldr	r0, [pc, #172]	; (80167c0 <etharp_find_entry+0x2e0>)
 8016712:	f002 fb7b 	bl	8018e0c <iprintf>
    etharp_free_entry(i);
 8016716:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801671a:	4618      	mov	r0, r3
 801671c:	f7ff fe06 	bl	801632c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016720:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016724:	2b09      	cmp	r3, #9
 8016726:	dd06      	ble.n	8016736 <etharp_find_entry+0x256>
 8016728:	4b23      	ldr	r3, [pc, #140]	; (80167b8 <etharp_find_entry+0x2d8>)
 801672a:	f240 1283 	movw	r2, #387	; 0x183
 801672e:	4926      	ldr	r1, [pc, #152]	; (80167c8 <etharp_find_entry+0x2e8>)
 8016730:	4823      	ldr	r0, [pc, #140]	; (80167c0 <etharp_find_entry+0x2e0>)
 8016732:	f002 fb6b 	bl	8018e0c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016736:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801673a:	491e      	ldr	r1, [pc, #120]	; (80167b4 <etharp_find_entry+0x2d4>)
 801673c:	4613      	mov	r3, r2
 801673e:	005b      	lsls	r3, r3, #1
 8016740:	4413      	add	r3, r2
 8016742:	00db      	lsls	r3, r3, #3
 8016744:	440b      	add	r3, r1
 8016746:	3314      	adds	r3, #20
 8016748:	781b      	ldrb	r3, [r3, #0]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d006      	beq.n	801675c <etharp_find_entry+0x27c>
 801674e:	4b1a      	ldr	r3, [pc, #104]	; (80167b8 <etharp_find_entry+0x2d8>)
 8016750:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016754:	491d      	ldr	r1, [pc, #116]	; (80167cc <etharp_find_entry+0x2ec>)
 8016756:	481a      	ldr	r0, [pc, #104]	; (80167c0 <etharp_find_entry+0x2e0>)
 8016758:	f002 fb58 	bl	8018e0c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d00b      	beq.n	801677a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016762:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	6819      	ldr	r1, [r3, #0]
 801676a:	4812      	ldr	r0, [pc, #72]	; (80167b4 <etharp_find_entry+0x2d4>)
 801676c:	4613      	mov	r3, r2
 801676e:	005b      	lsls	r3, r3, #1
 8016770:	4413      	add	r3, r2
 8016772:	00db      	lsls	r3, r3, #3
 8016774:	4403      	add	r3, r0
 8016776:	3304      	adds	r3, #4
 8016778:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801677a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801677e:	490d      	ldr	r1, [pc, #52]	; (80167b4 <etharp_find_entry+0x2d4>)
 8016780:	4613      	mov	r3, r2
 8016782:	005b      	lsls	r3, r3, #1
 8016784:	4413      	add	r3, r2
 8016786:	00db      	lsls	r3, r3, #3
 8016788:	440b      	add	r3, r1
 801678a:	3312      	adds	r3, #18
 801678c:	2200      	movs	r2, #0
 801678e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016790:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016794:	4907      	ldr	r1, [pc, #28]	; (80167b4 <etharp_find_entry+0x2d4>)
 8016796:	4613      	mov	r3, r2
 8016798:	005b      	lsls	r3, r3, #1
 801679a:	4413      	add	r3, r2
 801679c:	00db      	lsls	r3, r3, #3
 801679e:	440b      	add	r3, r1
 80167a0:	3308      	adds	r3, #8
 80167a2:	687a      	ldr	r2, [r7, #4]
 80167a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80167a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3728      	adds	r7, #40	; 0x28
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	bf00      	nop
 80167b4:	20004f1c 	.word	0x20004f1c
 80167b8:	0801d10c 	.word	0x0801d10c
 80167bc:	0801d144 	.word	0x0801d144
 80167c0:	0801d184 	.word	0x0801d184
 80167c4:	0801d1ac 	.word	0x0801d1ac
 80167c8:	0801d1c4 	.word	0x0801d1c4
 80167cc:	0801d1d8 	.word	0x0801d1d8

080167d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b088      	sub	sp, #32
 80167d4:	af02      	add	r7, sp, #8
 80167d6:	60f8      	str	r0, [r7, #12]
 80167d8:	60b9      	str	r1, [r7, #8]
 80167da:	607a      	str	r2, [r7, #4]
 80167dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80167de:	68fb      	ldr	r3, [r7, #12]
 80167e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80167e4:	2b06      	cmp	r3, #6
 80167e6:	d006      	beq.n	80167f6 <etharp_update_arp_entry+0x26>
 80167e8:	4b48      	ldr	r3, [pc, #288]	; (801690c <etharp_update_arp_entry+0x13c>)
 80167ea:	f240 12a9 	movw	r2, #425	; 0x1a9
 80167ee:	4948      	ldr	r1, [pc, #288]	; (8016910 <etharp_update_arp_entry+0x140>)
 80167f0:	4848      	ldr	r0, [pc, #288]	; (8016914 <etharp_update_arp_entry+0x144>)
 80167f2:	f002 fb0b 	bl	8018e0c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80167f6:	68bb      	ldr	r3, [r7, #8]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d012      	beq.n	8016822 <etharp_update_arp_entry+0x52>
 80167fc:	68bb      	ldr	r3, [r7, #8]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d00e      	beq.n	8016822 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016804:	68bb      	ldr	r3, [r7, #8]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	68f9      	ldr	r1, [r7, #12]
 801680a:	4618      	mov	r0, r3
 801680c:	f001 f8fe 	bl	8017a0c <ip4_addr_isbroadcast_u32>
 8016810:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016812:	2b00      	cmp	r3, #0
 8016814:	d105      	bne.n	8016822 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016816:	68bb      	ldr	r3, [r7, #8]
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801681e:	2be0      	cmp	r3, #224	; 0xe0
 8016820:	d102      	bne.n	8016828 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016822:	f06f 030f 	mvn.w	r3, #15
 8016826:	e06c      	b.n	8016902 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016828:	78fb      	ldrb	r3, [r7, #3]
 801682a:	68fa      	ldr	r2, [r7, #12]
 801682c:	4619      	mov	r1, r3
 801682e:	68b8      	ldr	r0, [r7, #8]
 8016830:	f7ff fe56 	bl	80164e0 <etharp_find_entry>
 8016834:	4603      	mov	r3, r0
 8016836:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016838:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801683c:	2b00      	cmp	r3, #0
 801683e:	da02      	bge.n	8016846 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016840:	8afb      	ldrh	r3, [r7, #22]
 8016842:	b25b      	sxtb	r3, r3
 8016844:	e05d      	b.n	8016902 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016846:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801684a:	4933      	ldr	r1, [pc, #204]	; (8016918 <etharp_update_arp_entry+0x148>)
 801684c:	4613      	mov	r3, r2
 801684e:	005b      	lsls	r3, r3, #1
 8016850:	4413      	add	r3, r2
 8016852:	00db      	lsls	r3, r3, #3
 8016854:	440b      	add	r3, r1
 8016856:	3314      	adds	r3, #20
 8016858:	2202      	movs	r2, #2
 801685a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801685c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016860:	492d      	ldr	r1, [pc, #180]	; (8016918 <etharp_update_arp_entry+0x148>)
 8016862:	4613      	mov	r3, r2
 8016864:	005b      	lsls	r3, r3, #1
 8016866:	4413      	add	r3, r2
 8016868:	00db      	lsls	r3, r3, #3
 801686a:	440b      	add	r3, r1
 801686c:	3308      	adds	r3, #8
 801686e:	68fa      	ldr	r2, [r7, #12]
 8016870:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016872:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016876:	4613      	mov	r3, r2
 8016878:	005b      	lsls	r3, r3, #1
 801687a:	4413      	add	r3, r2
 801687c:	00db      	lsls	r3, r3, #3
 801687e:	3308      	adds	r3, #8
 8016880:	4a25      	ldr	r2, [pc, #148]	; (8016918 <etharp_update_arp_entry+0x148>)
 8016882:	4413      	add	r3, r2
 8016884:	3304      	adds	r3, #4
 8016886:	2206      	movs	r2, #6
 8016888:	6879      	ldr	r1, [r7, #4]
 801688a:	4618      	mov	r0, r3
 801688c:	f002 f9fe 	bl	8018c8c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016890:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016894:	4920      	ldr	r1, [pc, #128]	; (8016918 <etharp_update_arp_entry+0x148>)
 8016896:	4613      	mov	r3, r2
 8016898:	005b      	lsls	r3, r3, #1
 801689a:	4413      	add	r3, r2
 801689c:	00db      	lsls	r3, r3, #3
 801689e:	440b      	add	r3, r1
 80168a0:	3312      	adds	r3, #18
 80168a2:	2200      	movs	r2, #0
 80168a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80168a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168aa:	491b      	ldr	r1, [pc, #108]	; (8016918 <etharp_update_arp_entry+0x148>)
 80168ac:	4613      	mov	r3, r2
 80168ae:	005b      	lsls	r3, r3, #1
 80168b0:	4413      	add	r3, r2
 80168b2:	00db      	lsls	r3, r3, #3
 80168b4:	440b      	add	r3, r1
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d021      	beq.n	8016900 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80168bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168c0:	4915      	ldr	r1, [pc, #84]	; (8016918 <etharp_update_arp_entry+0x148>)
 80168c2:	4613      	mov	r3, r2
 80168c4:	005b      	lsls	r3, r3, #1
 80168c6:	4413      	add	r3, r2
 80168c8:	00db      	lsls	r3, r3, #3
 80168ca:	440b      	add	r3, r1
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80168d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80168d4:	4910      	ldr	r1, [pc, #64]	; (8016918 <etharp_update_arp_entry+0x148>)
 80168d6:	4613      	mov	r3, r2
 80168d8:	005b      	lsls	r3, r3, #1
 80168da:	4413      	add	r3, r2
 80168dc:	00db      	lsls	r3, r3, #3
 80168de:	440b      	add	r3, r1
 80168e0:	2200      	movs	r2, #0
 80168e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80168e4:	68fb      	ldr	r3, [r7, #12]
 80168e6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80168ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80168ee:	9300      	str	r3, [sp, #0]
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	6939      	ldr	r1, [r7, #16]
 80168f4:	68f8      	ldr	r0, [r7, #12]
 80168f6:	f001 ff91 	bl	801881c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80168fa:	6938      	ldr	r0, [r7, #16]
 80168fc:	f7f8 fa2c 	bl	800ed58 <pbuf_free>
  }
  return ERR_OK;
 8016900:	2300      	movs	r3, #0
}
 8016902:	4618      	mov	r0, r3
 8016904:	3718      	adds	r7, #24
 8016906:	46bd      	mov	sp, r7
 8016908:	bd80      	pop	{r7, pc}
 801690a:	bf00      	nop
 801690c:	0801d10c 	.word	0x0801d10c
 8016910:	0801d204 	.word	0x0801d204
 8016914:	0801d184 	.word	0x0801d184
 8016918:	20004f1c 	.word	0x20004f1c

0801691c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b084      	sub	sp, #16
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016924:	2300      	movs	r3, #0
 8016926:	60fb      	str	r3, [r7, #12]
 8016928:	e01e      	b.n	8016968 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801692a:	4913      	ldr	r1, [pc, #76]	; (8016978 <etharp_cleanup_netif+0x5c>)
 801692c:	68fa      	ldr	r2, [r7, #12]
 801692e:	4613      	mov	r3, r2
 8016930:	005b      	lsls	r3, r3, #1
 8016932:	4413      	add	r3, r2
 8016934:	00db      	lsls	r3, r3, #3
 8016936:	440b      	add	r3, r1
 8016938:	3314      	adds	r3, #20
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801693e:	7afb      	ldrb	r3, [r7, #11]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d00e      	beq.n	8016962 <etharp_cleanup_netif+0x46>
 8016944:	490c      	ldr	r1, [pc, #48]	; (8016978 <etharp_cleanup_netif+0x5c>)
 8016946:	68fa      	ldr	r2, [r7, #12]
 8016948:	4613      	mov	r3, r2
 801694a:	005b      	lsls	r3, r3, #1
 801694c:	4413      	add	r3, r2
 801694e:	00db      	lsls	r3, r3, #3
 8016950:	440b      	add	r3, r1
 8016952:	3308      	adds	r3, #8
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	687a      	ldr	r2, [r7, #4]
 8016958:	429a      	cmp	r2, r3
 801695a:	d102      	bne.n	8016962 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801695c:	68f8      	ldr	r0, [r7, #12]
 801695e:	f7ff fce5 	bl	801632c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	3301      	adds	r3, #1
 8016966:	60fb      	str	r3, [r7, #12]
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	2b09      	cmp	r3, #9
 801696c:	dddd      	ble.n	801692a <etharp_cleanup_netif+0xe>
    }
  }
}
 801696e:	bf00      	nop
 8016970:	bf00      	nop
 8016972:	3710      	adds	r7, #16
 8016974:	46bd      	mov	sp, r7
 8016976:	bd80      	pop	{r7, pc}
 8016978:	20004f1c 	.word	0x20004f1c

0801697c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801697c:	b5b0      	push	{r4, r5, r7, lr}
 801697e:	b08a      	sub	sp, #40	; 0x28
 8016980:	af04      	add	r7, sp, #16
 8016982:	6078      	str	r0, [r7, #4]
 8016984:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016986:	683b      	ldr	r3, [r7, #0]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d107      	bne.n	801699c <etharp_input+0x20>
 801698c:	4b3d      	ldr	r3, [pc, #244]	; (8016a84 <etharp_input+0x108>)
 801698e:	f240 228a 	movw	r2, #650	; 0x28a
 8016992:	493d      	ldr	r1, [pc, #244]	; (8016a88 <etharp_input+0x10c>)
 8016994:	483d      	ldr	r0, [pc, #244]	; (8016a8c <etharp_input+0x110>)
 8016996:	f002 fa39 	bl	8018e0c <iprintf>
 801699a:	e06f      	b.n	8016a7c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	685b      	ldr	r3, [r3, #4]
 80169a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	881b      	ldrh	r3, [r3, #0]
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80169ac:	d10c      	bne.n	80169c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80169ae:	693b      	ldr	r3, [r7, #16]
 80169b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80169b2:	2b06      	cmp	r3, #6
 80169b4:	d108      	bne.n	80169c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80169b6:	693b      	ldr	r3, [r7, #16]
 80169b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80169ba:	2b04      	cmp	r3, #4
 80169bc:	d104      	bne.n	80169c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80169be:	693b      	ldr	r3, [r7, #16]
 80169c0:	885b      	ldrh	r3, [r3, #2]
 80169c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80169c4:	2b08      	cmp	r3, #8
 80169c6:	d003      	beq.n	80169d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80169c8:	6878      	ldr	r0, [r7, #4]
 80169ca:	f7f8 f9c5 	bl	800ed58 <pbuf_free>
    return;
 80169ce:	e055      	b.n	8016a7c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80169d0:	693b      	ldr	r3, [r7, #16]
 80169d2:	330e      	adds	r3, #14
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80169d8:	693b      	ldr	r3, [r7, #16]
 80169da:	3318      	adds	r3, #24
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80169e0:	683b      	ldr	r3, [r7, #0]
 80169e2:	3304      	adds	r3, #4
 80169e4:	681b      	ldr	r3, [r3, #0]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d102      	bne.n	80169f0 <etharp_input+0x74>
    for_us = 0;
 80169ea:	2300      	movs	r3, #0
 80169ec:	75fb      	strb	r3, [r7, #23]
 80169ee:	e009      	b.n	8016a04 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80169f0:	68ba      	ldr	r2, [r7, #8]
 80169f2:	683b      	ldr	r3, [r7, #0]
 80169f4:	3304      	adds	r3, #4
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	429a      	cmp	r2, r3
 80169fa:	bf0c      	ite	eq
 80169fc:	2301      	moveq	r3, #1
 80169fe:	2300      	movne	r3, #0
 8016a00:	b2db      	uxtb	r3, r3
 8016a02:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016a04:	693b      	ldr	r3, [r7, #16]
 8016a06:	f103 0208 	add.w	r2, r3, #8
 8016a0a:	7dfb      	ldrb	r3, [r7, #23]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d001      	beq.n	8016a14 <etharp_input+0x98>
 8016a10:	2301      	movs	r3, #1
 8016a12:	e000      	b.n	8016a16 <etharp_input+0x9a>
 8016a14:	2302      	movs	r3, #2
 8016a16:	f107 010c 	add.w	r1, r7, #12
 8016a1a:	6838      	ldr	r0, [r7, #0]
 8016a1c:	f7ff fed8 	bl	80167d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016a20:	693b      	ldr	r3, [r7, #16]
 8016a22:	88db      	ldrh	r3, [r3, #6]
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016a2a:	d003      	beq.n	8016a34 <etharp_input+0xb8>
 8016a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016a30:	d01e      	beq.n	8016a70 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016a32:	e020      	b.n	8016a76 <etharp_input+0xfa>
      if (for_us) {
 8016a34:	7dfb      	ldrb	r3, [r7, #23]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d01c      	beq.n	8016a74 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016a40:	693b      	ldr	r3, [r7, #16]
 8016a42:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016a50:	693a      	ldr	r2, [r7, #16]
 8016a52:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016a54:	2102      	movs	r1, #2
 8016a56:	9103      	str	r1, [sp, #12]
 8016a58:	f107 010c 	add.w	r1, r7, #12
 8016a5c:	9102      	str	r1, [sp, #8]
 8016a5e:	9201      	str	r2, [sp, #4]
 8016a60:	9300      	str	r3, [sp, #0]
 8016a62:	462b      	mov	r3, r5
 8016a64:	4622      	mov	r2, r4
 8016a66:	4601      	mov	r1, r0
 8016a68:	6838      	ldr	r0, [r7, #0]
 8016a6a:	f000 faeb 	bl	8017044 <etharp_raw>
      break;
 8016a6e:	e001      	b.n	8016a74 <etharp_input+0xf8>
      break;
 8016a70:	bf00      	nop
 8016a72:	e000      	b.n	8016a76 <etharp_input+0xfa>
      break;
 8016a74:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016a76:	6878      	ldr	r0, [r7, #4]
 8016a78:	f7f8 f96e 	bl	800ed58 <pbuf_free>
}
 8016a7c:	3718      	adds	r7, #24
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	bdb0      	pop	{r4, r5, r7, pc}
 8016a82:	bf00      	nop
 8016a84:	0801d10c 	.word	0x0801d10c
 8016a88:	0801d25c 	.word	0x0801d25c
 8016a8c:	0801d184 	.word	0x0801d184

08016a90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b086      	sub	sp, #24
 8016a94:	af02      	add	r7, sp, #8
 8016a96:	60f8      	str	r0, [r7, #12]
 8016a98:	60b9      	str	r1, [r7, #8]
 8016a9a:	4613      	mov	r3, r2
 8016a9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016a9e:	79fa      	ldrb	r2, [r7, #7]
 8016aa0:	4944      	ldr	r1, [pc, #272]	; (8016bb4 <etharp_output_to_arp_index+0x124>)
 8016aa2:	4613      	mov	r3, r2
 8016aa4:	005b      	lsls	r3, r3, #1
 8016aa6:	4413      	add	r3, r2
 8016aa8:	00db      	lsls	r3, r3, #3
 8016aaa:	440b      	add	r3, r1
 8016aac:	3314      	adds	r3, #20
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d806      	bhi.n	8016ac2 <etharp_output_to_arp_index+0x32>
 8016ab4:	4b40      	ldr	r3, [pc, #256]	; (8016bb8 <etharp_output_to_arp_index+0x128>)
 8016ab6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016aba:	4940      	ldr	r1, [pc, #256]	; (8016bbc <etharp_output_to_arp_index+0x12c>)
 8016abc:	4840      	ldr	r0, [pc, #256]	; (8016bc0 <etharp_output_to_arp_index+0x130>)
 8016abe:	f002 f9a5 	bl	8018e0c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016ac2:	79fa      	ldrb	r2, [r7, #7]
 8016ac4:	493b      	ldr	r1, [pc, #236]	; (8016bb4 <etharp_output_to_arp_index+0x124>)
 8016ac6:	4613      	mov	r3, r2
 8016ac8:	005b      	lsls	r3, r3, #1
 8016aca:	4413      	add	r3, r2
 8016acc:	00db      	lsls	r3, r3, #3
 8016ace:	440b      	add	r3, r1
 8016ad0:	3314      	adds	r3, #20
 8016ad2:	781b      	ldrb	r3, [r3, #0]
 8016ad4:	2b02      	cmp	r3, #2
 8016ad6:	d153      	bne.n	8016b80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016ad8:	79fa      	ldrb	r2, [r7, #7]
 8016ada:	4936      	ldr	r1, [pc, #216]	; (8016bb4 <etharp_output_to_arp_index+0x124>)
 8016adc:	4613      	mov	r3, r2
 8016ade:	005b      	lsls	r3, r3, #1
 8016ae0:	4413      	add	r3, r2
 8016ae2:	00db      	lsls	r3, r3, #3
 8016ae4:	440b      	add	r3, r1
 8016ae6:	3312      	adds	r3, #18
 8016ae8:	881b      	ldrh	r3, [r3, #0]
 8016aea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016aee:	d919      	bls.n	8016b24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016af0:	79fa      	ldrb	r2, [r7, #7]
 8016af2:	4613      	mov	r3, r2
 8016af4:	005b      	lsls	r3, r3, #1
 8016af6:	4413      	add	r3, r2
 8016af8:	00db      	lsls	r3, r3, #3
 8016afa:	4a2e      	ldr	r2, [pc, #184]	; (8016bb4 <etharp_output_to_arp_index+0x124>)
 8016afc:	4413      	add	r3, r2
 8016afe:	3304      	adds	r3, #4
 8016b00:	4619      	mov	r1, r3
 8016b02:	68f8      	ldr	r0, [r7, #12]
 8016b04:	f000 fb4c 	bl	80171a0 <etharp_request>
 8016b08:	4603      	mov	r3, r0
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d138      	bne.n	8016b80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016b0e:	79fa      	ldrb	r2, [r7, #7]
 8016b10:	4928      	ldr	r1, [pc, #160]	; (8016bb4 <etharp_output_to_arp_index+0x124>)
 8016b12:	4613      	mov	r3, r2
 8016b14:	005b      	lsls	r3, r3, #1
 8016b16:	4413      	add	r3, r2
 8016b18:	00db      	lsls	r3, r3, #3
 8016b1a:	440b      	add	r3, r1
 8016b1c:	3314      	adds	r3, #20
 8016b1e:	2203      	movs	r2, #3
 8016b20:	701a      	strb	r2, [r3, #0]
 8016b22:	e02d      	b.n	8016b80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016b24:	79fa      	ldrb	r2, [r7, #7]
 8016b26:	4923      	ldr	r1, [pc, #140]	; (8016bb4 <etharp_output_to_arp_index+0x124>)
 8016b28:	4613      	mov	r3, r2
 8016b2a:	005b      	lsls	r3, r3, #1
 8016b2c:	4413      	add	r3, r2
 8016b2e:	00db      	lsls	r3, r3, #3
 8016b30:	440b      	add	r3, r1
 8016b32:	3312      	adds	r3, #18
 8016b34:	881b      	ldrh	r3, [r3, #0]
 8016b36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016b3a:	d321      	bcc.n	8016b80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016b3c:	79fa      	ldrb	r2, [r7, #7]
 8016b3e:	4613      	mov	r3, r2
 8016b40:	005b      	lsls	r3, r3, #1
 8016b42:	4413      	add	r3, r2
 8016b44:	00db      	lsls	r3, r3, #3
 8016b46:	4a1b      	ldr	r2, [pc, #108]	; (8016bb4 <etharp_output_to_arp_index+0x124>)
 8016b48:	4413      	add	r3, r2
 8016b4a:	1d19      	adds	r1, r3, #4
 8016b4c:	79fa      	ldrb	r2, [r7, #7]
 8016b4e:	4613      	mov	r3, r2
 8016b50:	005b      	lsls	r3, r3, #1
 8016b52:	4413      	add	r3, r2
 8016b54:	00db      	lsls	r3, r3, #3
 8016b56:	3308      	adds	r3, #8
 8016b58:	4a16      	ldr	r2, [pc, #88]	; (8016bb4 <etharp_output_to_arp_index+0x124>)
 8016b5a:	4413      	add	r3, r2
 8016b5c:	3304      	adds	r3, #4
 8016b5e:	461a      	mov	r2, r3
 8016b60:	68f8      	ldr	r0, [r7, #12]
 8016b62:	f000 fafb 	bl	801715c <etharp_request_dst>
 8016b66:	4603      	mov	r3, r0
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d109      	bne.n	8016b80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016b6c:	79fa      	ldrb	r2, [r7, #7]
 8016b6e:	4911      	ldr	r1, [pc, #68]	; (8016bb4 <etharp_output_to_arp_index+0x124>)
 8016b70:	4613      	mov	r3, r2
 8016b72:	005b      	lsls	r3, r3, #1
 8016b74:	4413      	add	r3, r2
 8016b76:	00db      	lsls	r3, r3, #3
 8016b78:	440b      	add	r3, r1
 8016b7a:	3314      	adds	r3, #20
 8016b7c:	2203      	movs	r2, #3
 8016b7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016b86:	79fa      	ldrb	r2, [r7, #7]
 8016b88:	4613      	mov	r3, r2
 8016b8a:	005b      	lsls	r3, r3, #1
 8016b8c:	4413      	add	r3, r2
 8016b8e:	00db      	lsls	r3, r3, #3
 8016b90:	3308      	adds	r3, #8
 8016b92:	4a08      	ldr	r2, [pc, #32]	; (8016bb4 <etharp_output_to_arp_index+0x124>)
 8016b94:	4413      	add	r3, r2
 8016b96:	3304      	adds	r3, #4
 8016b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016b9c:	9200      	str	r2, [sp, #0]
 8016b9e:	460a      	mov	r2, r1
 8016ba0:	68b9      	ldr	r1, [r7, #8]
 8016ba2:	68f8      	ldr	r0, [r7, #12]
 8016ba4:	f001 fe3a 	bl	801881c <ethernet_output>
 8016ba8:	4603      	mov	r3, r0
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	3710      	adds	r7, #16
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd80      	pop	{r7, pc}
 8016bb2:	bf00      	nop
 8016bb4:	20004f1c 	.word	0x20004f1c
 8016bb8:	0801d10c 	.word	0x0801d10c
 8016bbc:	0801d27c 	.word	0x0801d27c
 8016bc0:	0801d184 	.word	0x0801d184

08016bc4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b08a      	sub	sp, #40	; 0x28
 8016bc8:	af02      	add	r7, sp, #8
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	60b9      	str	r1, [r7, #8]
 8016bce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d106      	bne.n	8016be8 <etharp_output+0x24>
 8016bda:	4b73      	ldr	r3, [pc, #460]	; (8016da8 <etharp_output+0x1e4>)
 8016bdc:	f240 321e 	movw	r2, #798	; 0x31e
 8016be0:	4972      	ldr	r1, [pc, #456]	; (8016dac <etharp_output+0x1e8>)
 8016be2:	4873      	ldr	r0, [pc, #460]	; (8016db0 <etharp_output+0x1ec>)
 8016be4:	f002 f912 	bl	8018e0c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d106      	bne.n	8016bfc <etharp_output+0x38>
 8016bee:	4b6e      	ldr	r3, [pc, #440]	; (8016da8 <etharp_output+0x1e4>)
 8016bf0:	f240 321f 	movw	r2, #799	; 0x31f
 8016bf4:	496f      	ldr	r1, [pc, #444]	; (8016db4 <etharp_output+0x1f0>)
 8016bf6:	486e      	ldr	r0, [pc, #440]	; (8016db0 <etharp_output+0x1ec>)
 8016bf8:	f002 f908 	bl	8018e0c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d106      	bne.n	8016c10 <etharp_output+0x4c>
 8016c02:	4b69      	ldr	r3, [pc, #420]	; (8016da8 <etharp_output+0x1e4>)
 8016c04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016c08:	496b      	ldr	r1, [pc, #428]	; (8016db8 <etharp_output+0x1f4>)
 8016c0a:	4869      	ldr	r0, [pc, #420]	; (8016db0 <etharp_output+0x1ec>)
 8016c0c:	f002 f8fe 	bl	8018e0c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	681b      	ldr	r3, [r3, #0]
 8016c14:	68f9      	ldr	r1, [r7, #12]
 8016c16:	4618      	mov	r0, r3
 8016c18:	f000 fef8 	bl	8017a0c <ip4_addr_isbroadcast_u32>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d002      	beq.n	8016c28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016c22:	4b66      	ldr	r3, [pc, #408]	; (8016dbc <etharp_output+0x1f8>)
 8016c24:	61fb      	str	r3, [r7, #28]
 8016c26:	e0af      	b.n	8016d88 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	681b      	ldr	r3, [r3, #0]
 8016c2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016c30:	2be0      	cmp	r3, #224	; 0xe0
 8016c32:	d118      	bne.n	8016c66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016c34:	2301      	movs	r3, #1
 8016c36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016c38:	2300      	movs	r3, #0
 8016c3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016c3c:	235e      	movs	r3, #94	; 0x5e
 8016c3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	3301      	adds	r3, #1
 8016c44:	781b      	ldrb	r3, [r3, #0]
 8016c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c4a:	b2db      	uxtb	r3, r3
 8016c4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	3302      	adds	r3, #2
 8016c52:	781b      	ldrb	r3, [r3, #0]
 8016c54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	3303      	adds	r3, #3
 8016c5a:	781b      	ldrb	r3, [r3, #0]
 8016c5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016c5e:	f107 0310 	add.w	r3, r7, #16
 8016c62:	61fb      	str	r3, [r7, #28]
 8016c64:	e090      	b.n	8016d88 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	681a      	ldr	r2, [r3, #0]
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	3304      	adds	r3, #4
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	405a      	eors	r2, r3
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	3308      	adds	r3, #8
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	4013      	ands	r3, r2
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d012      	beq.n	8016ca4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016c84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016c88:	4293      	cmp	r3, r2
 8016c8a:	d00b      	beq.n	8016ca4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	330c      	adds	r3, #12
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d003      	beq.n	8016c9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	330c      	adds	r3, #12
 8016c9a:	61bb      	str	r3, [r7, #24]
 8016c9c:	e002      	b.n	8016ca4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016c9e:	f06f 0303 	mvn.w	r3, #3
 8016ca2:	e07d      	b.n	8016da0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016ca4:	4b46      	ldr	r3, [pc, #280]	; (8016dc0 <etharp_output+0x1fc>)
 8016ca6:	781b      	ldrb	r3, [r3, #0]
 8016ca8:	4619      	mov	r1, r3
 8016caa:	4a46      	ldr	r2, [pc, #280]	; (8016dc4 <etharp_output+0x200>)
 8016cac:	460b      	mov	r3, r1
 8016cae:	005b      	lsls	r3, r3, #1
 8016cb0:	440b      	add	r3, r1
 8016cb2:	00db      	lsls	r3, r3, #3
 8016cb4:	4413      	add	r3, r2
 8016cb6:	3314      	adds	r3, #20
 8016cb8:	781b      	ldrb	r3, [r3, #0]
 8016cba:	2b01      	cmp	r3, #1
 8016cbc:	d925      	bls.n	8016d0a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016cbe:	4b40      	ldr	r3, [pc, #256]	; (8016dc0 <etharp_output+0x1fc>)
 8016cc0:	781b      	ldrb	r3, [r3, #0]
 8016cc2:	4619      	mov	r1, r3
 8016cc4:	4a3f      	ldr	r2, [pc, #252]	; (8016dc4 <etharp_output+0x200>)
 8016cc6:	460b      	mov	r3, r1
 8016cc8:	005b      	lsls	r3, r3, #1
 8016cca:	440b      	add	r3, r1
 8016ccc:	00db      	lsls	r3, r3, #3
 8016cce:	4413      	add	r3, r2
 8016cd0:	3308      	adds	r3, #8
 8016cd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016cd4:	68fa      	ldr	r2, [r7, #12]
 8016cd6:	429a      	cmp	r2, r3
 8016cd8:	d117      	bne.n	8016d0a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016cda:	69bb      	ldr	r3, [r7, #24]
 8016cdc:	681a      	ldr	r2, [r3, #0]
 8016cde:	4b38      	ldr	r3, [pc, #224]	; (8016dc0 <etharp_output+0x1fc>)
 8016ce0:	781b      	ldrb	r3, [r3, #0]
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	4937      	ldr	r1, [pc, #220]	; (8016dc4 <etharp_output+0x200>)
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	005b      	lsls	r3, r3, #1
 8016cea:	4403      	add	r3, r0
 8016cec:	00db      	lsls	r3, r3, #3
 8016cee:	440b      	add	r3, r1
 8016cf0:	3304      	adds	r3, #4
 8016cf2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016cf4:	429a      	cmp	r2, r3
 8016cf6:	d108      	bne.n	8016d0a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016cf8:	4b31      	ldr	r3, [pc, #196]	; (8016dc0 <etharp_output+0x1fc>)
 8016cfa:	781b      	ldrb	r3, [r3, #0]
 8016cfc:	461a      	mov	r2, r3
 8016cfe:	68b9      	ldr	r1, [r7, #8]
 8016d00:	68f8      	ldr	r0, [r7, #12]
 8016d02:	f7ff fec5 	bl	8016a90 <etharp_output_to_arp_index>
 8016d06:	4603      	mov	r3, r0
 8016d08:	e04a      	b.n	8016da0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016d0a:	2300      	movs	r3, #0
 8016d0c:	75fb      	strb	r3, [r7, #23]
 8016d0e:	e031      	b.n	8016d74 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016d10:	7dfa      	ldrb	r2, [r7, #23]
 8016d12:	492c      	ldr	r1, [pc, #176]	; (8016dc4 <etharp_output+0x200>)
 8016d14:	4613      	mov	r3, r2
 8016d16:	005b      	lsls	r3, r3, #1
 8016d18:	4413      	add	r3, r2
 8016d1a:	00db      	lsls	r3, r3, #3
 8016d1c:	440b      	add	r3, r1
 8016d1e:	3314      	adds	r3, #20
 8016d20:	781b      	ldrb	r3, [r3, #0]
 8016d22:	2b01      	cmp	r3, #1
 8016d24:	d923      	bls.n	8016d6e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016d26:	7dfa      	ldrb	r2, [r7, #23]
 8016d28:	4926      	ldr	r1, [pc, #152]	; (8016dc4 <etharp_output+0x200>)
 8016d2a:	4613      	mov	r3, r2
 8016d2c:	005b      	lsls	r3, r3, #1
 8016d2e:	4413      	add	r3, r2
 8016d30:	00db      	lsls	r3, r3, #3
 8016d32:	440b      	add	r3, r1
 8016d34:	3308      	adds	r3, #8
 8016d36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016d38:	68fa      	ldr	r2, [r7, #12]
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	d117      	bne.n	8016d6e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016d3e:	69bb      	ldr	r3, [r7, #24]
 8016d40:	6819      	ldr	r1, [r3, #0]
 8016d42:	7dfa      	ldrb	r2, [r7, #23]
 8016d44:	481f      	ldr	r0, [pc, #124]	; (8016dc4 <etharp_output+0x200>)
 8016d46:	4613      	mov	r3, r2
 8016d48:	005b      	lsls	r3, r3, #1
 8016d4a:	4413      	add	r3, r2
 8016d4c:	00db      	lsls	r3, r3, #3
 8016d4e:	4403      	add	r3, r0
 8016d50:	3304      	adds	r3, #4
 8016d52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016d54:	4299      	cmp	r1, r3
 8016d56:	d10a      	bne.n	8016d6e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016d58:	4a19      	ldr	r2, [pc, #100]	; (8016dc0 <etharp_output+0x1fc>)
 8016d5a:	7dfb      	ldrb	r3, [r7, #23]
 8016d5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016d5e:	7dfb      	ldrb	r3, [r7, #23]
 8016d60:	461a      	mov	r2, r3
 8016d62:	68b9      	ldr	r1, [r7, #8]
 8016d64:	68f8      	ldr	r0, [r7, #12]
 8016d66:	f7ff fe93 	bl	8016a90 <etharp_output_to_arp_index>
 8016d6a:	4603      	mov	r3, r0
 8016d6c:	e018      	b.n	8016da0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016d6e:	7dfb      	ldrb	r3, [r7, #23]
 8016d70:	3301      	adds	r3, #1
 8016d72:	75fb      	strb	r3, [r7, #23]
 8016d74:	7dfb      	ldrb	r3, [r7, #23]
 8016d76:	2b09      	cmp	r3, #9
 8016d78:	d9ca      	bls.n	8016d10 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016d7a:	68ba      	ldr	r2, [r7, #8]
 8016d7c:	69b9      	ldr	r1, [r7, #24]
 8016d7e:	68f8      	ldr	r0, [r7, #12]
 8016d80:	f000 f822 	bl	8016dc8 <etharp_query>
 8016d84:	4603      	mov	r3, r0
 8016d86:	e00b      	b.n	8016da0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8016d8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016d92:	9300      	str	r3, [sp, #0]
 8016d94:	69fb      	ldr	r3, [r7, #28]
 8016d96:	68b9      	ldr	r1, [r7, #8]
 8016d98:	68f8      	ldr	r0, [r7, #12]
 8016d9a:	f001 fd3f 	bl	801881c <ethernet_output>
 8016d9e:	4603      	mov	r3, r0
}
 8016da0:	4618      	mov	r0, r3
 8016da2:	3720      	adds	r7, #32
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}
 8016da8:	0801d10c 	.word	0x0801d10c
 8016dac:	0801d25c 	.word	0x0801d25c
 8016db0:	0801d184 	.word	0x0801d184
 8016db4:	0801d2ac 	.word	0x0801d2ac
 8016db8:	0801d24c 	.word	0x0801d24c
 8016dbc:	0801dd80 	.word	0x0801dd80
 8016dc0:	2000500c 	.word	0x2000500c
 8016dc4:	20004f1c 	.word	0x20004f1c

08016dc8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b08c      	sub	sp, #48	; 0x30
 8016dcc:	af02      	add	r7, sp, #8
 8016dce:	60f8      	str	r0, [r7, #12]
 8016dd0:	60b9      	str	r1, [r7, #8]
 8016dd2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	3326      	adds	r3, #38	; 0x26
 8016dd8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016dda:	23ff      	movs	r3, #255	; 0xff
 8016ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016de0:	2300      	movs	r3, #0
 8016de2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016de4:	68bb      	ldr	r3, [r7, #8]
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	68f9      	ldr	r1, [r7, #12]
 8016dea:	4618      	mov	r0, r3
 8016dec:	f000 fe0e 	bl	8017a0c <ip4_addr_isbroadcast_u32>
 8016df0:	4603      	mov	r3, r0
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d10c      	bne.n	8016e10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016df6:	68bb      	ldr	r3, [r7, #8]
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016dfe:	2be0      	cmp	r3, #224	; 0xe0
 8016e00:	d006      	beq.n	8016e10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016e02:	68bb      	ldr	r3, [r7, #8]
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d003      	beq.n	8016e10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	2b00      	cmp	r3, #0
 8016e0e:	d102      	bne.n	8016e16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016e10:	f06f 030f 	mvn.w	r3, #15
 8016e14:	e101      	b.n	801701a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016e16:	68fa      	ldr	r2, [r7, #12]
 8016e18:	2101      	movs	r1, #1
 8016e1a:	68b8      	ldr	r0, [r7, #8]
 8016e1c:	f7ff fb60 	bl	80164e0 <etharp_find_entry>
 8016e20:	4603      	mov	r3, r0
 8016e22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016e24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	da02      	bge.n	8016e32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016e2c:	8a7b      	ldrh	r3, [r7, #18]
 8016e2e:	b25b      	sxtb	r3, r3
 8016e30:	e0f3      	b.n	801701a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016e32:	8a7b      	ldrh	r3, [r7, #18]
 8016e34:	2b7e      	cmp	r3, #126	; 0x7e
 8016e36:	d906      	bls.n	8016e46 <etharp_query+0x7e>
 8016e38:	4b7a      	ldr	r3, [pc, #488]	; (8017024 <etharp_query+0x25c>)
 8016e3a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016e3e:	497a      	ldr	r1, [pc, #488]	; (8017028 <etharp_query+0x260>)
 8016e40:	487a      	ldr	r0, [pc, #488]	; (801702c <etharp_query+0x264>)
 8016e42:	f001 ffe3 	bl	8018e0c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016e46:	8a7b      	ldrh	r3, [r7, #18]
 8016e48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016e4a:	7c7a      	ldrb	r2, [r7, #17]
 8016e4c:	4978      	ldr	r1, [pc, #480]	; (8017030 <etharp_query+0x268>)
 8016e4e:	4613      	mov	r3, r2
 8016e50:	005b      	lsls	r3, r3, #1
 8016e52:	4413      	add	r3, r2
 8016e54:	00db      	lsls	r3, r3, #3
 8016e56:	440b      	add	r3, r1
 8016e58:	3314      	adds	r3, #20
 8016e5a:	781b      	ldrb	r3, [r3, #0]
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d115      	bne.n	8016e8c <etharp_query+0xc4>
    is_new_entry = 1;
 8016e60:	2301      	movs	r3, #1
 8016e62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016e64:	7c7a      	ldrb	r2, [r7, #17]
 8016e66:	4972      	ldr	r1, [pc, #456]	; (8017030 <etharp_query+0x268>)
 8016e68:	4613      	mov	r3, r2
 8016e6a:	005b      	lsls	r3, r3, #1
 8016e6c:	4413      	add	r3, r2
 8016e6e:	00db      	lsls	r3, r3, #3
 8016e70:	440b      	add	r3, r1
 8016e72:	3314      	adds	r3, #20
 8016e74:	2201      	movs	r2, #1
 8016e76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016e78:	7c7a      	ldrb	r2, [r7, #17]
 8016e7a:	496d      	ldr	r1, [pc, #436]	; (8017030 <etharp_query+0x268>)
 8016e7c:	4613      	mov	r3, r2
 8016e7e:	005b      	lsls	r3, r3, #1
 8016e80:	4413      	add	r3, r2
 8016e82:	00db      	lsls	r3, r3, #3
 8016e84:	440b      	add	r3, r1
 8016e86:	3308      	adds	r3, #8
 8016e88:	68fa      	ldr	r2, [r7, #12]
 8016e8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8016e8c:	7c7a      	ldrb	r2, [r7, #17]
 8016e8e:	4968      	ldr	r1, [pc, #416]	; (8017030 <etharp_query+0x268>)
 8016e90:	4613      	mov	r3, r2
 8016e92:	005b      	lsls	r3, r3, #1
 8016e94:	4413      	add	r3, r2
 8016e96:	00db      	lsls	r3, r3, #3
 8016e98:	440b      	add	r3, r1
 8016e9a:	3314      	adds	r3, #20
 8016e9c:	781b      	ldrb	r3, [r3, #0]
 8016e9e:	2b01      	cmp	r3, #1
 8016ea0:	d011      	beq.n	8016ec6 <etharp_query+0xfe>
 8016ea2:	7c7a      	ldrb	r2, [r7, #17]
 8016ea4:	4962      	ldr	r1, [pc, #392]	; (8017030 <etharp_query+0x268>)
 8016ea6:	4613      	mov	r3, r2
 8016ea8:	005b      	lsls	r3, r3, #1
 8016eaa:	4413      	add	r3, r2
 8016eac:	00db      	lsls	r3, r3, #3
 8016eae:	440b      	add	r3, r1
 8016eb0:	3314      	adds	r3, #20
 8016eb2:	781b      	ldrb	r3, [r3, #0]
 8016eb4:	2b01      	cmp	r3, #1
 8016eb6:	d806      	bhi.n	8016ec6 <etharp_query+0xfe>
 8016eb8:	4b5a      	ldr	r3, [pc, #360]	; (8017024 <etharp_query+0x25c>)
 8016eba:	f240 32cd 	movw	r2, #973	; 0x3cd
 8016ebe:	495d      	ldr	r1, [pc, #372]	; (8017034 <etharp_query+0x26c>)
 8016ec0:	485a      	ldr	r0, [pc, #360]	; (801702c <etharp_query+0x264>)
 8016ec2:	f001 ffa3 	bl	8018e0c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016ec6:	6a3b      	ldr	r3, [r7, #32]
 8016ec8:	2b00      	cmp	r3, #0
 8016eca:	d102      	bne.n	8016ed2 <etharp_query+0x10a>
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d10c      	bne.n	8016eec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016ed2:	68b9      	ldr	r1, [r7, #8]
 8016ed4:	68f8      	ldr	r0, [r7, #12]
 8016ed6:	f000 f963 	bl	80171a0 <etharp_request>
 8016eda:	4603      	mov	r3, r0
 8016edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d102      	bne.n	8016eec <etharp_query+0x124>
      return result;
 8016ee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016eea:	e096      	b.n	801701a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d106      	bne.n	8016f00 <etharp_query+0x138>
 8016ef2:	4b4c      	ldr	r3, [pc, #304]	; (8017024 <etharp_query+0x25c>)
 8016ef4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016ef8:	494f      	ldr	r1, [pc, #316]	; (8017038 <etharp_query+0x270>)
 8016efa:	484c      	ldr	r0, [pc, #304]	; (801702c <etharp_query+0x264>)
 8016efc:	f001 ff86 	bl	8018e0c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016f00:	7c7a      	ldrb	r2, [r7, #17]
 8016f02:	494b      	ldr	r1, [pc, #300]	; (8017030 <etharp_query+0x268>)
 8016f04:	4613      	mov	r3, r2
 8016f06:	005b      	lsls	r3, r3, #1
 8016f08:	4413      	add	r3, r2
 8016f0a:	00db      	lsls	r3, r3, #3
 8016f0c:	440b      	add	r3, r1
 8016f0e:	3314      	adds	r3, #20
 8016f10:	781b      	ldrb	r3, [r3, #0]
 8016f12:	2b01      	cmp	r3, #1
 8016f14:	d917      	bls.n	8016f46 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016f16:	4a49      	ldr	r2, [pc, #292]	; (801703c <etharp_query+0x274>)
 8016f18:	7c7b      	ldrb	r3, [r7, #17]
 8016f1a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8016f1c:	7c7a      	ldrb	r2, [r7, #17]
 8016f1e:	4613      	mov	r3, r2
 8016f20:	005b      	lsls	r3, r3, #1
 8016f22:	4413      	add	r3, r2
 8016f24:	00db      	lsls	r3, r3, #3
 8016f26:	3308      	adds	r3, #8
 8016f28:	4a41      	ldr	r2, [pc, #260]	; (8017030 <etharp_query+0x268>)
 8016f2a:	4413      	add	r3, r2
 8016f2c:	3304      	adds	r3, #4
 8016f2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016f32:	9200      	str	r2, [sp, #0]
 8016f34:	697a      	ldr	r2, [r7, #20]
 8016f36:	6879      	ldr	r1, [r7, #4]
 8016f38:	68f8      	ldr	r0, [r7, #12]
 8016f3a:	f001 fc6f 	bl	801881c <ethernet_output>
 8016f3e:	4603      	mov	r3, r0
 8016f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016f44:	e067      	b.n	8017016 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016f46:	7c7a      	ldrb	r2, [r7, #17]
 8016f48:	4939      	ldr	r1, [pc, #228]	; (8017030 <etharp_query+0x268>)
 8016f4a:	4613      	mov	r3, r2
 8016f4c:	005b      	lsls	r3, r3, #1
 8016f4e:	4413      	add	r3, r2
 8016f50:	00db      	lsls	r3, r3, #3
 8016f52:	440b      	add	r3, r1
 8016f54:	3314      	adds	r3, #20
 8016f56:	781b      	ldrb	r3, [r3, #0]
 8016f58:	2b01      	cmp	r3, #1
 8016f5a:	d15c      	bne.n	8017016 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016f64:	e01c      	b.n	8016fa0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016f66:	69fb      	ldr	r3, [r7, #28]
 8016f68:	895a      	ldrh	r2, [r3, #10]
 8016f6a:	69fb      	ldr	r3, [r7, #28]
 8016f6c:	891b      	ldrh	r3, [r3, #8]
 8016f6e:	429a      	cmp	r2, r3
 8016f70:	d10a      	bne.n	8016f88 <etharp_query+0x1c0>
 8016f72:	69fb      	ldr	r3, [r7, #28]
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d006      	beq.n	8016f88 <etharp_query+0x1c0>
 8016f7a:	4b2a      	ldr	r3, [pc, #168]	; (8017024 <etharp_query+0x25c>)
 8016f7c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016f80:	492f      	ldr	r1, [pc, #188]	; (8017040 <etharp_query+0x278>)
 8016f82:	482a      	ldr	r0, [pc, #168]	; (801702c <etharp_query+0x264>)
 8016f84:	f001 ff42 	bl	8018e0c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016f88:	69fb      	ldr	r3, [r7, #28]
 8016f8a:	7b1b      	ldrb	r3, [r3, #12]
 8016f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d002      	beq.n	8016f9a <etharp_query+0x1d2>
        copy_needed = 1;
 8016f94:	2301      	movs	r3, #1
 8016f96:	61bb      	str	r3, [r7, #24]
        break;
 8016f98:	e005      	b.n	8016fa6 <etharp_query+0x1de>
      }
      p = p->next;
 8016f9a:	69fb      	ldr	r3, [r7, #28]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016fa0:	69fb      	ldr	r3, [r7, #28]
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	d1df      	bne.n	8016f66 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016fa6:	69bb      	ldr	r3, [r7, #24]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d007      	beq.n	8016fbc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8016fac:	687a      	ldr	r2, [r7, #4]
 8016fae:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016fb2:	200e      	movs	r0, #14
 8016fb4:	f7f8 fa80 	bl	800f4b8 <pbuf_clone>
 8016fb8:	61f8      	str	r0, [r7, #28]
 8016fba:	e004      	b.n	8016fc6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016fbc:	687b      	ldr	r3, [r7, #4]
 8016fbe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016fc0:	69f8      	ldr	r0, [r7, #28]
 8016fc2:	f7f7 ff6f 	bl	800eea4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016fc6:	69fb      	ldr	r3, [r7, #28]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d021      	beq.n	8017010 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016fcc:	7c7a      	ldrb	r2, [r7, #17]
 8016fce:	4918      	ldr	r1, [pc, #96]	; (8017030 <etharp_query+0x268>)
 8016fd0:	4613      	mov	r3, r2
 8016fd2:	005b      	lsls	r3, r3, #1
 8016fd4:	4413      	add	r3, r2
 8016fd6:	00db      	lsls	r3, r3, #3
 8016fd8:	440b      	add	r3, r1
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d00a      	beq.n	8016ff6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016fe0:	7c7a      	ldrb	r2, [r7, #17]
 8016fe2:	4913      	ldr	r1, [pc, #76]	; (8017030 <etharp_query+0x268>)
 8016fe4:	4613      	mov	r3, r2
 8016fe6:	005b      	lsls	r3, r3, #1
 8016fe8:	4413      	add	r3, r2
 8016fea:	00db      	lsls	r3, r3, #3
 8016fec:	440b      	add	r3, r1
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f7f7 feb1 	bl	800ed58 <pbuf_free>
      }
      arp_table[i].q = p;
 8016ff6:	7c7a      	ldrb	r2, [r7, #17]
 8016ff8:	490d      	ldr	r1, [pc, #52]	; (8017030 <etharp_query+0x268>)
 8016ffa:	4613      	mov	r3, r2
 8016ffc:	005b      	lsls	r3, r3, #1
 8016ffe:	4413      	add	r3, r2
 8017000:	00db      	lsls	r3, r3, #3
 8017002:	440b      	add	r3, r1
 8017004:	69fa      	ldr	r2, [r7, #28]
 8017006:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017008:	2300      	movs	r3, #0
 801700a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801700e:	e002      	b.n	8017016 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017010:	23ff      	movs	r3, #255	; 0xff
 8017012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017016:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801701a:	4618      	mov	r0, r3
 801701c:	3728      	adds	r7, #40	; 0x28
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
 8017022:	bf00      	nop
 8017024:	0801d10c 	.word	0x0801d10c
 8017028:	0801d2b8 	.word	0x0801d2b8
 801702c:	0801d184 	.word	0x0801d184
 8017030:	20004f1c 	.word	0x20004f1c
 8017034:	0801d2c8 	.word	0x0801d2c8
 8017038:	0801d2ac 	.word	0x0801d2ac
 801703c:	2000500c 	.word	0x2000500c
 8017040:	0801d2f0 	.word	0x0801d2f0

08017044 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b08a      	sub	sp, #40	; 0x28
 8017048:	af02      	add	r7, sp, #8
 801704a:	60f8      	str	r0, [r7, #12]
 801704c:	60b9      	str	r1, [r7, #8]
 801704e:	607a      	str	r2, [r7, #4]
 8017050:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017052:	2300      	movs	r3, #0
 8017054:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	2b00      	cmp	r3, #0
 801705a:	d106      	bne.n	801706a <etharp_raw+0x26>
 801705c:	4b3a      	ldr	r3, [pc, #232]	; (8017148 <etharp_raw+0x104>)
 801705e:	f240 4257 	movw	r2, #1111	; 0x457
 8017062:	493a      	ldr	r1, [pc, #232]	; (801714c <etharp_raw+0x108>)
 8017064:	483a      	ldr	r0, [pc, #232]	; (8017150 <etharp_raw+0x10c>)
 8017066:	f001 fed1 	bl	8018e0c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801706a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801706e:	211c      	movs	r1, #28
 8017070:	200e      	movs	r0, #14
 8017072:	f7f7 fb5b 	bl	800e72c <pbuf_alloc>
 8017076:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017078:	69bb      	ldr	r3, [r7, #24]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d102      	bne.n	8017084 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801707e:	f04f 33ff 	mov.w	r3, #4294967295
 8017082:	e05d      	b.n	8017140 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017084:	69bb      	ldr	r3, [r7, #24]
 8017086:	895b      	ldrh	r3, [r3, #10]
 8017088:	2b1b      	cmp	r3, #27
 801708a:	d806      	bhi.n	801709a <etharp_raw+0x56>
 801708c:	4b2e      	ldr	r3, [pc, #184]	; (8017148 <etharp_raw+0x104>)
 801708e:	f240 4262 	movw	r2, #1122	; 0x462
 8017092:	4930      	ldr	r1, [pc, #192]	; (8017154 <etharp_raw+0x110>)
 8017094:	482e      	ldr	r0, [pc, #184]	; (8017150 <etharp_raw+0x10c>)
 8017096:	f001 feb9 	bl	8018e0c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801709a:	69bb      	ldr	r3, [r7, #24]
 801709c:	685b      	ldr	r3, [r3, #4]
 801709e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80170a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80170a2:	4618      	mov	r0, r3
 80170a4:	f7f5 ffb0 	bl	800d008 <lwip_htons>
 80170a8:	4603      	mov	r3, r0
 80170aa:	461a      	mov	r2, r3
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80170b6:	2b06      	cmp	r3, #6
 80170b8:	d006      	beq.n	80170c8 <etharp_raw+0x84>
 80170ba:	4b23      	ldr	r3, [pc, #140]	; (8017148 <etharp_raw+0x104>)
 80170bc:	f240 4269 	movw	r2, #1129	; 0x469
 80170c0:	4925      	ldr	r1, [pc, #148]	; (8017158 <etharp_raw+0x114>)
 80170c2:	4823      	ldr	r0, [pc, #140]	; (8017150 <etharp_raw+0x10c>)
 80170c4:	f001 fea2 	bl	8018e0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80170c8:	697b      	ldr	r3, [r7, #20]
 80170ca:	3308      	adds	r3, #8
 80170cc:	2206      	movs	r2, #6
 80170ce:	6839      	ldr	r1, [r7, #0]
 80170d0:	4618      	mov	r0, r3
 80170d2:	f001 fddb 	bl	8018c8c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80170d6:	697b      	ldr	r3, [r7, #20]
 80170d8:	3312      	adds	r3, #18
 80170da:	2206      	movs	r2, #6
 80170dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80170de:	4618      	mov	r0, r3
 80170e0:	f001 fdd4 	bl	8018c8c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80170e4:	697b      	ldr	r3, [r7, #20]
 80170e6:	330e      	adds	r3, #14
 80170e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80170ea:	6812      	ldr	r2, [r2, #0]
 80170ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80170ee:	697b      	ldr	r3, [r7, #20]
 80170f0:	3318      	adds	r3, #24
 80170f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170f4:	6812      	ldr	r2, [r2, #0]
 80170f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80170f8:	697b      	ldr	r3, [r7, #20]
 80170fa:	2200      	movs	r2, #0
 80170fc:	701a      	strb	r2, [r3, #0]
 80170fe:	2200      	movs	r2, #0
 8017100:	f042 0201 	orr.w	r2, r2, #1
 8017104:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017106:	697b      	ldr	r3, [r7, #20]
 8017108:	2200      	movs	r2, #0
 801710a:	f042 0208 	orr.w	r2, r2, #8
 801710e:	709a      	strb	r2, [r3, #2]
 8017110:	2200      	movs	r2, #0
 8017112:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017114:	697b      	ldr	r3, [r7, #20]
 8017116:	2206      	movs	r2, #6
 8017118:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801711a:	697b      	ldr	r3, [r7, #20]
 801711c:	2204      	movs	r2, #4
 801711e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017120:	f640 0306 	movw	r3, #2054	; 0x806
 8017124:	9300      	str	r3, [sp, #0]
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	68ba      	ldr	r2, [r7, #8]
 801712a:	69b9      	ldr	r1, [r7, #24]
 801712c:	68f8      	ldr	r0, [r7, #12]
 801712e:	f001 fb75 	bl	801881c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017132:	69b8      	ldr	r0, [r7, #24]
 8017134:	f7f7 fe10 	bl	800ed58 <pbuf_free>
  p = NULL;
 8017138:	2300      	movs	r3, #0
 801713a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801713c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017140:	4618      	mov	r0, r3
 8017142:	3720      	adds	r7, #32
 8017144:	46bd      	mov	sp, r7
 8017146:	bd80      	pop	{r7, pc}
 8017148:	0801d10c 	.word	0x0801d10c
 801714c:	0801d25c 	.word	0x0801d25c
 8017150:	0801d184 	.word	0x0801d184
 8017154:	0801d30c 	.word	0x0801d30c
 8017158:	0801d340 	.word	0x0801d340

0801715c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	b088      	sub	sp, #32
 8017160:	af04      	add	r7, sp, #16
 8017162:	60f8      	str	r0, [r7, #12]
 8017164:	60b9      	str	r1, [r7, #8]
 8017166:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017178:	2201      	movs	r2, #1
 801717a:	9203      	str	r2, [sp, #12]
 801717c:	68ba      	ldr	r2, [r7, #8]
 801717e:	9202      	str	r2, [sp, #8]
 8017180:	4a06      	ldr	r2, [pc, #24]	; (801719c <etharp_request_dst+0x40>)
 8017182:	9201      	str	r2, [sp, #4]
 8017184:	9300      	str	r3, [sp, #0]
 8017186:	4603      	mov	r3, r0
 8017188:	687a      	ldr	r2, [r7, #4]
 801718a:	68f8      	ldr	r0, [r7, #12]
 801718c:	f7ff ff5a 	bl	8017044 <etharp_raw>
 8017190:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017192:	4618      	mov	r0, r3
 8017194:	3710      	adds	r7, #16
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}
 801719a:	bf00      	nop
 801719c:	0801dd88 	.word	0x0801dd88

080171a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80171a0:	b580      	push	{r7, lr}
 80171a2:	b082      	sub	sp, #8
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	6078      	str	r0, [r7, #4]
 80171a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80171aa:	4a05      	ldr	r2, [pc, #20]	; (80171c0 <etharp_request+0x20>)
 80171ac:	6839      	ldr	r1, [r7, #0]
 80171ae:	6878      	ldr	r0, [r7, #4]
 80171b0:	f7ff ffd4 	bl	801715c <etharp_request_dst>
 80171b4:	4603      	mov	r3, r0
}
 80171b6:	4618      	mov	r0, r3
 80171b8:	3708      	adds	r7, #8
 80171ba:	46bd      	mov	sp, r7
 80171bc:	bd80      	pop	{r7, pc}
 80171be:	bf00      	nop
 80171c0:	0801dd80 	.word	0x0801dd80

080171c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80171c4:	b580      	push	{r7, lr}
 80171c6:	b08e      	sub	sp, #56	; 0x38
 80171c8:	af04      	add	r7, sp, #16
 80171ca:	6078      	str	r0, [r7, #4]
 80171cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80171ce:	4b79      	ldr	r3, [pc, #484]	; (80173b4 <icmp_input+0x1f0>)
 80171d0:	689b      	ldr	r3, [r3, #8]
 80171d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80171d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171d6:	781b      	ldrb	r3, [r3, #0]
 80171d8:	f003 030f 	and.w	r3, r3, #15
 80171dc:	b2db      	uxtb	r3, r3
 80171de:	009b      	lsls	r3, r3, #2
 80171e0:	b2db      	uxtb	r3, r3
 80171e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80171e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171e6:	2b13      	cmp	r3, #19
 80171e8:	f240 80cd 	bls.w	8017386 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	895b      	ldrh	r3, [r3, #10]
 80171f0:	2b03      	cmp	r3, #3
 80171f2:	f240 80ca 	bls.w	801738a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	685b      	ldr	r3, [r3, #4]
 80171fa:	781b      	ldrb	r3, [r3, #0]
 80171fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017200:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017204:	2b00      	cmp	r3, #0
 8017206:	f000 80b7 	beq.w	8017378 <icmp_input+0x1b4>
 801720a:	2b08      	cmp	r3, #8
 801720c:	f040 80b7 	bne.w	801737e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017210:	4b69      	ldr	r3, [pc, #420]	; (80173b8 <icmp_input+0x1f4>)
 8017212:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017214:	4b67      	ldr	r3, [pc, #412]	; (80173b4 <icmp_input+0x1f0>)
 8017216:	695b      	ldr	r3, [r3, #20]
 8017218:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801721c:	2be0      	cmp	r3, #224	; 0xe0
 801721e:	f000 80bb 	beq.w	8017398 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017222:	4b64      	ldr	r3, [pc, #400]	; (80173b4 <icmp_input+0x1f0>)
 8017224:	695b      	ldr	r3, [r3, #20]
 8017226:	4a63      	ldr	r2, [pc, #396]	; (80173b4 <icmp_input+0x1f0>)
 8017228:	6812      	ldr	r2, [r2, #0]
 801722a:	4611      	mov	r1, r2
 801722c:	4618      	mov	r0, r3
 801722e:	f000 fbed 	bl	8017a0c <ip4_addr_isbroadcast_u32>
 8017232:	4603      	mov	r3, r0
 8017234:	2b00      	cmp	r3, #0
 8017236:	f040 80b1 	bne.w	801739c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	891b      	ldrh	r3, [r3, #8]
 801723e:	2b07      	cmp	r3, #7
 8017240:	f240 80a5 	bls.w	801738e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017244:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017246:	330e      	adds	r3, #14
 8017248:	4619      	mov	r1, r3
 801724a:	6878      	ldr	r0, [r7, #4]
 801724c:	f7f7 fcbc 	bl	800ebc8 <pbuf_add_header>
 8017250:	4603      	mov	r3, r0
 8017252:	2b00      	cmp	r3, #0
 8017254:	d04b      	beq.n	80172ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	891a      	ldrh	r2, [r3, #8]
 801725a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801725c:	4413      	add	r3, r2
 801725e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	891b      	ldrh	r3, [r3, #8]
 8017264:	8b7a      	ldrh	r2, [r7, #26]
 8017266:	429a      	cmp	r2, r3
 8017268:	f0c0 809a 	bcc.w	80173a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801726c:	8b7b      	ldrh	r3, [r7, #26]
 801726e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017272:	4619      	mov	r1, r3
 8017274:	200e      	movs	r0, #14
 8017276:	f7f7 fa59 	bl	800e72c <pbuf_alloc>
 801727a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801727c:	697b      	ldr	r3, [r7, #20]
 801727e:	2b00      	cmp	r3, #0
 8017280:	f000 8090 	beq.w	80173a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	895b      	ldrh	r3, [r3, #10]
 8017288:	461a      	mov	r2, r3
 801728a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801728c:	3308      	adds	r3, #8
 801728e:	429a      	cmp	r2, r3
 8017290:	d203      	bcs.n	801729a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017292:	6978      	ldr	r0, [r7, #20]
 8017294:	f7f7 fd60 	bl	800ed58 <pbuf_free>
          goto icmperr;
 8017298:	e085      	b.n	80173a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801729a:	697b      	ldr	r3, [r7, #20]
 801729c:	685b      	ldr	r3, [r3, #4]
 801729e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80172a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80172a2:	4618      	mov	r0, r3
 80172a4:	f001 fcf2 	bl	8018c8c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80172a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172aa:	4619      	mov	r1, r3
 80172ac:	6978      	ldr	r0, [r7, #20]
 80172ae:	f7f7 fc9b 	bl	800ebe8 <pbuf_remove_header>
 80172b2:	4603      	mov	r3, r0
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d009      	beq.n	80172cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80172b8:	4b40      	ldr	r3, [pc, #256]	; (80173bc <icmp_input+0x1f8>)
 80172ba:	22b6      	movs	r2, #182	; 0xb6
 80172bc:	4940      	ldr	r1, [pc, #256]	; (80173c0 <icmp_input+0x1fc>)
 80172be:	4841      	ldr	r0, [pc, #260]	; (80173c4 <icmp_input+0x200>)
 80172c0:	f001 fda4 	bl	8018e0c <iprintf>
          pbuf_free(r);
 80172c4:	6978      	ldr	r0, [r7, #20]
 80172c6:	f7f7 fd47 	bl	800ed58 <pbuf_free>
          goto icmperr;
 80172ca:	e06c      	b.n	80173a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80172cc:	6879      	ldr	r1, [r7, #4]
 80172ce:	6978      	ldr	r0, [r7, #20]
 80172d0:	f7f7 fe76 	bl	800efc0 <pbuf_copy>
 80172d4:	4603      	mov	r3, r0
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d003      	beq.n	80172e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80172da:	6978      	ldr	r0, [r7, #20]
 80172dc:	f7f7 fd3c 	bl	800ed58 <pbuf_free>
          goto icmperr;
 80172e0:	e061      	b.n	80173a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80172e2:	6878      	ldr	r0, [r7, #4]
 80172e4:	f7f7 fd38 	bl	800ed58 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80172e8:	697b      	ldr	r3, [r7, #20]
 80172ea:	607b      	str	r3, [r7, #4]
 80172ec:	e00f      	b.n	801730e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80172ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80172f0:	330e      	adds	r3, #14
 80172f2:	4619      	mov	r1, r3
 80172f4:	6878      	ldr	r0, [r7, #4]
 80172f6:	f7f7 fc77 	bl	800ebe8 <pbuf_remove_header>
 80172fa:	4603      	mov	r3, r0
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d006      	beq.n	801730e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017300:	4b2e      	ldr	r3, [pc, #184]	; (80173bc <icmp_input+0x1f8>)
 8017302:	22c7      	movs	r2, #199	; 0xc7
 8017304:	4930      	ldr	r1, [pc, #192]	; (80173c8 <icmp_input+0x204>)
 8017306:	482f      	ldr	r0, [pc, #188]	; (80173c4 <icmp_input+0x200>)
 8017308:	f001 fd80 	bl	8018e0c <iprintf>
          goto icmperr;
 801730c:	e04b      	b.n	80173a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	685b      	ldr	r3, [r3, #4]
 8017312:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017316:	4619      	mov	r1, r3
 8017318:	6878      	ldr	r0, [r7, #4]
 801731a:	f7f7 fc55 	bl	800ebc8 <pbuf_add_header>
 801731e:	4603      	mov	r3, r0
 8017320:	2b00      	cmp	r3, #0
 8017322:	d12b      	bne.n	801737c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	685b      	ldr	r3, [r3, #4]
 8017328:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801732a:	69fb      	ldr	r3, [r7, #28]
 801732c:	681a      	ldr	r2, [r3, #0]
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017332:	4b20      	ldr	r3, [pc, #128]	; (80173b4 <icmp_input+0x1f0>)
 8017334:	691a      	ldr	r2, [r3, #16]
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801733a:	693b      	ldr	r3, [r7, #16]
 801733c:	2200      	movs	r2, #0
 801733e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017340:	693b      	ldr	r3, [r7, #16]
 8017342:	2200      	movs	r2, #0
 8017344:	709a      	strb	r2, [r3, #2]
 8017346:	2200      	movs	r2, #0
 8017348:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	22ff      	movs	r2, #255	; 0xff
 801734e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017350:	68fb      	ldr	r3, [r7, #12]
 8017352:	2200      	movs	r2, #0
 8017354:	729a      	strb	r2, [r3, #10]
 8017356:	2200      	movs	r2, #0
 8017358:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801735a:	683b      	ldr	r3, [r7, #0]
 801735c:	9302      	str	r3, [sp, #8]
 801735e:	2301      	movs	r3, #1
 8017360:	9301      	str	r3, [sp, #4]
 8017362:	2300      	movs	r3, #0
 8017364:	9300      	str	r3, [sp, #0]
 8017366:	23ff      	movs	r3, #255	; 0xff
 8017368:	2200      	movs	r2, #0
 801736a:	69f9      	ldr	r1, [r7, #28]
 801736c:	6878      	ldr	r0, [r7, #4]
 801736e:	f000 fa75 	bl	801785c <ip4_output_if>
 8017372:	4603      	mov	r3, r0
 8017374:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017376:	e001      	b.n	801737c <icmp_input+0x1b8>
      break;
 8017378:	bf00      	nop
 801737a:	e000      	b.n	801737e <icmp_input+0x1ba>
      break;
 801737c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	f7f7 fcea 	bl	800ed58 <pbuf_free>
  return;
 8017384:	e013      	b.n	80173ae <icmp_input+0x1ea>
    goto lenerr;
 8017386:	bf00      	nop
 8017388:	e002      	b.n	8017390 <icmp_input+0x1cc>
    goto lenerr;
 801738a:	bf00      	nop
 801738c:	e000      	b.n	8017390 <icmp_input+0x1cc>
        goto lenerr;
 801738e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017390:	6878      	ldr	r0, [r7, #4]
 8017392:	f7f7 fce1 	bl	800ed58 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017396:	e00a      	b.n	80173ae <icmp_input+0x1ea>
        goto icmperr;
 8017398:	bf00      	nop
 801739a:	e004      	b.n	80173a6 <icmp_input+0x1e2>
        goto icmperr;
 801739c:	bf00      	nop
 801739e:	e002      	b.n	80173a6 <icmp_input+0x1e2>
          goto icmperr;
 80173a0:	bf00      	nop
 80173a2:	e000      	b.n	80173a6 <icmp_input+0x1e2>
          goto icmperr;
 80173a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80173a6:	6878      	ldr	r0, [r7, #4]
 80173a8:	f7f7 fcd6 	bl	800ed58 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80173ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80173ae:	3728      	adds	r7, #40	; 0x28
 80173b0:	46bd      	mov	sp, r7
 80173b2:	bd80      	pop	{r7, pc}
 80173b4:	2000844c 	.word	0x2000844c
 80173b8:	20008460 	.word	0x20008460
 80173bc:	0801d384 	.word	0x0801d384
 80173c0:	0801d3bc 	.word	0x0801d3bc
 80173c4:	0801d3f4 	.word	0x0801d3f4
 80173c8:	0801d41c 	.word	0x0801d41c

080173cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80173cc:	b580      	push	{r7, lr}
 80173ce:	b082      	sub	sp, #8
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	460b      	mov	r3, r1
 80173d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80173d8:	78fb      	ldrb	r3, [r7, #3]
 80173da:	461a      	mov	r2, r3
 80173dc:	2103      	movs	r1, #3
 80173de:	6878      	ldr	r0, [r7, #4]
 80173e0:	f000 f814 	bl	801740c <icmp_send_response>
}
 80173e4:	bf00      	nop
 80173e6:	3708      	adds	r7, #8
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd80      	pop	{r7, pc}

080173ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	b082      	sub	sp, #8
 80173f0:	af00      	add	r7, sp, #0
 80173f2:	6078      	str	r0, [r7, #4]
 80173f4:	460b      	mov	r3, r1
 80173f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80173f8:	78fb      	ldrb	r3, [r7, #3]
 80173fa:	461a      	mov	r2, r3
 80173fc:	210b      	movs	r1, #11
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f000 f804 	bl	801740c <icmp_send_response>
}
 8017404:	bf00      	nop
 8017406:	3708      	adds	r7, #8
 8017408:	46bd      	mov	sp, r7
 801740a:	bd80      	pop	{r7, pc}

0801740c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	b08c      	sub	sp, #48	; 0x30
 8017410:	af04      	add	r7, sp, #16
 8017412:	6078      	str	r0, [r7, #4]
 8017414:	460b      	mov	r3, r1
 8017416:	70fb      	strb	r3, [r7, #3]
 8017418:	4613      	mov	r3, r2
 801741a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801741c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017420:	2124      	movs	r1, #36	; 0x24
 8017422:	2022      	movs	r0, #34	; 0x22
 8017424:	f7f7 f982 	bl	800e72c <pbuf_alloc>
 8017428:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801742a:	69fb      	ldr	r3, [r7, #28]
 801742c:	2b00      	cmp	r3, #0
 801742e:	d04c      	beq.n	80174ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017430:	69fb      	ldr	r3, [r7, #28]
 8017432:	895b      	ldrh	r3, [r3, #10]
 8017434:	2b23      	cmp	r3, #35	; 0x23
 8017436:	d806      	bhi.n	8017446 <icmp_send_response+0x3a>
 8017438:	4b26      	ldr	r3, [pc, #152]	; (80174d4 <icmp_send_response+0xc8>)
 801743a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801743e:	4926      	ldr	r1, [pc, #152]	; (80174d8 <icmp_send_response+0xcc>)
 8017440:	4826      	ldr	r0, [pc, #152]	; (80174dc <icmp_send_response+0xd0>)
 8017442:	f001 fce3 	bl	8018e0c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	685b      	ldr	r3, [r3, #4]
 801744a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801744c:	69fb      	ldr	r3, [r7, #28]
 801744e:	685b      	ldr	r3, [r3, #4]
 8017450:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017452:	697b      	ldr	r3, [r7, #20]
 8017454:	78fa      	ldrb	r2, [r7, #3]
 8017456:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017458:	697b      	ldr	r3, [r7, #20]
 801745a:	78ba      	ldrb	r2, [r7, #2]
 801745c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801745e:	697b      	ldr	r3, [r7, #20]
 8017460:	2200      	movs	r2, #0
 8017462:	711a      	strb	r2, [r3, #4]
 8017464:	2200      	movs	r2, #0
 8017466:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017468:	697b      	ldr	r3, [r7, #20]
 801746a:	2200      	movs	r2, #0
 801746c:	719a      	strb	r2, [r3, #6]
 801746e:	2200      	movs	r2, #0
 8017470:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017472:	69fb      	ldr	r3, [r7, #28]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	f103 0008 	add.w	r0, r3, #8
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	685b      	ldr	r3, [r3, #4]
 801747e:	221c      	movs	r2, #28
 8017480:	4619      	mov	r1, r3
 8017482:	f001 fc03 	bl	8018c8c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017486:	69bb      	ldr	r3, [r7, #24]
 8017488:	68db      	ldr	r3, [r3, #12]
 801748a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801748c:	f107 030c 	add.w	r3, r7, #12
 8017490:	4618      	mov	r0, r3
 8017492:	f000 f825 	bl	80174e0 <ip4_route>
 8017496:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	2b00      	cmp	r3, #0
 801749c:	d011      	beq.n	80174c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801749e:	697b      	ldr	r3, [r7, #20]
 80174a0:	2200      	movs	r2, #0
 80174a2:	709a      	strb	r2, [r3, #2]
 80174a4:	2200      	movs	r2, #0
 80174a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80174a8:	f107 020c 	add.w	r2, r7, #12
 80174ac:	693b      	ldr	r3, [r7, #16]
 80174ae:	9302      	str	r3, [sp, #8]
 80174b0:	2301      	movs	r3, #1
 80174b2:	9301      	str	r3, [sp, #4]
 80174b4:	2300      	movs	r3, #0
 80174b6:	9300      	str	r3, [sp, #0]
 80174b8:	23ff      	movs	r3, #255	; 0xff
 80174ba:	2100      	movs	r1, #0
 80174bc:	69f8      	ldr	r0, [r7, #28]
 80174be:	f000 f9cd 	bl	801785c <ip4_output_if>
  }
  pbuf_free(q);
 80174c2:	69f8      	ldr	r0, [r7, #28]
 80174c4:	f7f7 fc48 	bl	800ed58 <pbuf_free>
 80174c8:	e000      	b.n	80174cc <icmp_send_response+0xc0>
    return;
 80174ca:	bf00      	nop
}
 80174cc:	3720      	adds	r7, #32
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}
 80174d2:	bf00      	nop
 80174d4:	0801d384 	.word	0x0801d384
 80174d8:	0801d450 	.word	0x0801d450
 80174dc:	0801d3f4 	.word	0x0801d3f4

080174e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80174e0:	b480      	push	{r7}
 80174e2:	b085      	sub	sp, #20
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80174e8:	4b33      	ldr	r3, [pc, #204]	; (80175b8 <ip4_route+0xd8>)
 80174ea:	681b      	ldr	r3, [r3, #0]
 80174ec:	60fb      	str	r3, [r7, #12]
 80174ee:	e036      	b.n	801755e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174f6:	f003 0301 	and.w	r3, r3, #1
 80174fa:	b2db      	uxtb	r3, r3
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d02b      	beq.n	8017558 <ip4_route+0x78>
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017506:	089b      	lsrs	r3, r3, #2
 8017508:	f003 0301 	and.w	r3, r3, #1
 801750c:	b2db      	uxtb	r3, r3
 801750e:	2b00      	cmp	r3, #0
 8017510:	d022      	beq.n	8017558 <ip4_route+0x78>
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	3304      	adds	r3, #4
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d01d      	beq.n	8017558 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	681a      	ldr	r2, [r3, #0]
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	3304      	adds	r3, #4
 8017524:	681b      	ldr	r3, [r3, #0]
 8017526:	405a      	eors	r2, r3
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	3308      	adds	r3, #8
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	4013      	ands	r3, r2
 8017530:	2b00      	cmp	r3, #0
 8017532:	d101      	bne.n	8017538 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	e038      	b.n	80175aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801753e:	f003 0302 	and.w	r3, r3, #2
 8017542:	2b00      	cmp	r3, #0
 8017544:	d108      	bne.n	8017558 <ip4_route+0x78>
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	681a      	ldr	r2, [r3, #0]
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	330c      	adds	r3, #12
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	429a      	cmp	r2, r3
 8017552:	d101      	bne.n	8017558 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	e028      	b.n	80175aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	60fb      	str	r3, [r7, #12]
 801755e:	68fb      	ldr	r3, [r7, #12]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d1c5      	bne.n	80174f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017564:	4b15      	ldr	r3, [pc, #84]	; (80175bc <ip4_route+0xdc>)
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d01a      	beq.n	80175a2 <ip4_route+0xc2>
 801756c:	4b13      	ldr	r3, [pc, #76]	; (80175bc <ip4_route+0xdc>)
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017574:	f003 0301 	and.w	r3, r3, #1
 8017578:	2b00      	cmp	r3, #0
 801757a:	d012      	beq.n	80175a2 <ip4_route+0xc2>
 801757c:	4b0f      	ldr	r3, [pc, #60]	; (80175bc <ip4_route+0xdc>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017584:	f003 0304 	and.w	r3, r3, #4
 8017588:	2b00      	cmp	r3, #0
 801758a:	d00a      	beq.n	80175a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801758c:	4b0b      	ldr	r3, [pc, #44]	; (80175bc <ip4_route+0xdc>)
 801758e:	681b      	ldr	r3, [r3, #0]
 8017590:	3304      	adds	r3, #4
 8017592:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017594:	2b00      	cmp	r3, #0
 8017596:	d004      	beq.n	80175a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	b2db      	uxtb	r3, r3
 801759e:	2b7f      	cmp	r3, #127	; 0x7f
 80175a0:	d101      	bne.n	80175a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80175a2:	2300      	movs	r3, #0
 80175a4:	e001      	b.n	80175aa <ip4_route+0xca>
  }

  return netif_default;
 80175a6:	4b05      	ldr	r3, [pc, #20]	; (80175bc <ip4_route+0xdc>)
 80175a8:	681b      	ldr	r3, [r3, #0]
}
 80175aa:	4618      	mov	r0, r3
 80175ac:	3714      	adds	r7, #20
 80175ae:	46bd      	mov	sp, r7
 80175b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b4:	4770      	bx	lr
 80175b6:	bf00      	nop
 80175b8:	2000bc98 	.word	0x2000bc98
 80175bc:	2000bc9c 	.word	0x2000bc9c

080175c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80175c0:	b580      	push	{r7, lr}
 80175c2:	b082      	sub	sp, #8
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80175ce:	f003 0301 	and.w	r3, r3, #1
 80175d2:	b2db      	uxtb	r3, r3
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d016      	beq.n	8017606 <ip4_input_accept+0x46>
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	3304      	adds	r3, #4
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d011      	beq.n	8017606 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80175e2:	4b0b      	ldr	r3, [pc, #44]	; (8017610 <ip4_input_accept+0x50>)
 80175e4:	695a      	ldr	r2, [r3, #20]
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	3304      	adds	r3, #4
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	429a      	cmp	r2, r3
 80175ee:	d008      	beq.n	8017602 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80175f0:	4b07      	ldr	r3, [pc, #28]	; (8017610 <ip4_input_accept+0x50>)
 80175f2:	695b      	ldr	r3, [r3, #20]
 80175f4:	6879      	ldr	r1, [r7, #4]
 80175f6:	4618      	mov	r0, r3
 80175f8:	f000 fa08 	bl	8017a0c <ip4_addr_isbroadcast_u32>
 80175fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d001      	beq.n	8017606 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017602:	2301      	movs	r3, #1
 8017604:	e000      	b.n	8017608 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017606:	2300      	movs	r3, #0
}
 8017608:	4618      	mov	r0, r3
 801760a:	3708      	adds	r7, #8
 801760c:	46bd      	mov	sp, r7
 801760e:	bd80      	pop	{r7, pc}
 8017610:	2000844c 	.word	0x2000844c

08017614 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b086      	sub	sp, #24
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	685b      	ldr	r3, [r3, #4]
 8017622:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8017624:	697b      	ldr	r3, [r7, #20]
 8017626:	781b      	ldrb	r3, [r3, #0]
 8017628:	091b      	lsrs	r3, r3, #4
 801762a:	b2db      	uxtb	r3, r3
 801762c:	2b04      	cmp	r3, #4
 801762e:	d004      	beq.n	801763a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017630:	6878      	ldr	r0, [r7, #4]
 8017632:	f7f7 fb91 	bl	800ed58 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017636:	2300      	movs	r3, #0
 8017638:	e107      	b.n	801784a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	781b      	ldrb	r3, [r3, #0]
 801763e:	f003 030f 	and.w	r3, r3, #15
 8017642:	b2db      	uxtb	r3, r3
 8017644:	009b      	lsls	r3, r3, #2
 8017646:	b2db      	uxtb	r3, r3
 8017648:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801764a:	697b      	ldr	r3, [r7, #20]
 801764c:	885b      	ldrh	r3, [r3, #2]
 801764e:	b29b      	uxth	r3, r3
 8017650:	4618      	mov	r0, r3
 8017652:	f7f5 fcd9 	bl	800d008 <lwip_htons>
 8017656:	4603      	mov	r3, r0
 8017658:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	891b      	ldrh	r3, [r3, #8]
 801765e:	89ba      	ldrh	r2, [r7, #12]
 8017660:	429a      	cmp	r2, r3
 8017662:	d204      	bcs.n	801766e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8017664:	89bb      	ldrh	r3, [r7, #12]
 8017666:	4619      	mov	r1, r3
 8017668:	6878      	ldr	r0, [r7, #4]
 801766a:	f7f7 f9bd 	bl	800e9e8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	895b      	ldrh	r3, [r3, #10]
 8017672:	89fa      	ldrh	r2, [r7, #14]
 8017674:	429a      	cmp	r2, r3
 8017676:	d807      	bhi.n	8017688 <ip4_input+0x74>
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	891b      	ldrh	r3, [r3, #8]
 801767c:	89ba      	ldrh	r2, [r7, #12]
 801767e:	429a      	cmp	r2, r3
 8017680:	d802      	bhi.n	8017688 <ip4_input+0x74>
 8017682:	89fb      	ldrh	r3, [r7, #14]
 8017684:	2b13      	cmp	r3, #19
 8017686:	d804      	bhi.n	8017692 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017688:	6878      	ldr	r0, [r7, #4]
 801768a:	f7f7 fb65 	bl	800ed58 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801768e:	2300      	movs	r3, #0
 8017690:	e0db      	b.n	801784a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017692:	697b      	ldr	r3, [r7, #20]
 8017694:	691b      	ldr	r3, [r3, #16]
 8017696:	4a6f      	ldr	r2, [pc, #444]	; (8017854 <ip4_input+0x240>)
 8017698:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801769a:	697b      	ldr	r3, [r7, #20]
 801769c:	68db      	ldr	r3, [r3, #12]
 801769e:	4a6d      	ldr	r2, [pc, #436]	; (8017854 <ip4_input+0x240>)
 80176a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80176a2:	4b6c      	ldr	r3, [pc, #432]	; (8017854 <ip4_input+0x240>)
 80176a4:	695b      	ldr	r3, [r3, #20]
 80176a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80176aa:	2be0      	cmp	r3, #224	; 0xe0
 80176ac:	d112      	bne.n	80176d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80176ae:	683b      	ldr	r3, [r7, #0]
 80176b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80176b4:	f003 0301 	and.w	r3, r3, #1
 80176b8:	b2db      	uxtb	r3, r3
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d007      	beq.n	80176ce <ip4_input+0xba>
 80176be:	683b      	ldr	r3, [r7, #0]
 80176c0:	3304      	adds	r3, #4
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d002      	beq.n	80176ce <ip4_input+0xba>
      netif = inp;
 80176c8:	683b      	ldr	r3, [r7, #0]
 80176ca:	613b      	str	r3, [r7, #16]
 80176cc:	e02a      	b.n	8017724 <ip4_input+0x110>
    } else {
      netif = NULL;
 80176ce:	2300      	movs	r3, #0
 80176d0:	613b      	str	r3, [r7, #16]
 80176d2:	e027      	b.n	8017724 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80176d4:	6838      	ldr	r0, [r7, #0]
 80176d6:	f7ff ff73 	bl	80175c0 <ip4_input_accept>
 80176da:	4603      	mov	r3, r0
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d002      	beq.n	80176e6 <ip4_input+0xd2>
      netif = inp;
 80176e0:	683b      	ldr	r3, [r7, #0]
 80176e2:	613b      	str	r3, [r7, #16]
 80176e4:	e01e      	b.n	8017724 <ip4_input+0x110>
    } else {
      netif = NULL;
 80176e6:	2300      	movs	r3, #0
 80176e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80176ea:	4b5a      	ldr	r3, [pc, #360]	; (8017854 <ip4_input+0x240>)
 80176ec:	695b      	ldr	r3, [r3, #20]
 80176ee:	b2db      	uxtb	r3, r3
 80176f0:	2b7f      	cmp	r3, #127	; 0x7f
 80176f2:	d017      	beq.n	8017724 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80176f4:	4b58      	ldr	r3, [pc, #352]	; (8017858 <ip4_input+0x244>)
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	613b      	str	r3, [r7, #16]
 80176fa:	e00e      	b.n	801771a <ip4_input+0x106>
          if (netif == inp) {
 80176fc:	693a      	ldr	r2, [r7, #16]
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	429a      	cmp	r2, r3
 8017702:	d006      	beq.n	8017712 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017704:	6938      	ldr	r0, [r7, #16]
 8017706:	f7ff ff5b 	bl	80175c0 <ip4_input_accept>
 801770a:	4603      	mov	r3, r0
 801770c:	2b00      	cmp	r3, #0
 801770e:	d108      	bne.n	8017722 <ip4_input+0x10e>
 8017710:	e000      	b.n	8017714 <ip4_input+0x100>
            continue;
 8017712:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017714:	693b      	ldr	r3, [r7, #16]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	613b      	str	r3, [r7, #16]
 801771a:	693b      	ldr	r3, [r7, #16]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d1ed      	bne.n	80176fc <ip4_input+0xe8>
 8017720:	e000      	b.n	8017724 <ip4_input+0x110>
            break;
 8017722:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017724:	4b4b      	ldr	r3, [pc, #300]	; (8017854 <ip4_input+0x240>)
 8017726:	691b      	ldr	r3, [r3, #16]
 8017728:	6839      	ldr	r1, [r7, #0]
 801772a:	4618      	mov	r0, r3
 801772c:	f000 f96e 	bl	8017a0c <ip4_addr_isbroadcast_u32>
 8017730:	4603      	mov	r3, r0
 8017732:	2b00      	cmp	r3, #0
 8017734:	d105      	bne.n	8017742 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017736:	4b47      	ldr	r3, [pc, #284]	; (8017854 <ip4_input+0x240>)
 8017738:	691b      	ldr	r3, [r3, #16]
 801773a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801773e:	2be0      	cmp	r3, #224	; 0xe0
 8017740:	d104      	bne.n	801774c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017742:	6878      	ldr	r0, [r7, #4]
 8017744:	f7f7 fb08 	bl	800ed58 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017748:	2300      	movs	r3, #0
 801774a:	e07e      	b.n	801784a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801774c:	693b      	ldr	r3, [r7, #16]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d104      	bne.n	801775c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017752:	6878      	ldr	r0, [r7, #4]
 8017754:	f7f7 fb00 	bl	800ed58 <pbuf_free>
    return ERR_OK;
 8017758:	2300      	movs	r3, #0
 801775a:	e076      	b.n	801784a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801775c:	697b      	ldr	r3, [r7, #20]
 801775e:	88db      	ldrh	r3, [r3, #6]
 8017760:	b29b      	uxth	r3, r3
 8017762:	461a      	mov	r2, r3
 8017764:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017768:	4013      	ands	r3, r2
 801776a:	2b00      	cmp	r3, #0
 801776c:	d00b      	beq.n	8017786 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801776e:	6878      	ldr	r0, [r7, #4]
 8017770:	f000 fc92 	bl	8018098 <ip4_reass>
 8017774:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d101      	bne.n	8017780 <ip4_input+0x16c>
      return ERR_OK;
 801777c:	2300      	movs	r3, #0
 801777e:	e064      	b.n	801784a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	685b      	ldr	r3, [r3, #4]
 8017784:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017786:	4a33      	ldr	r2, [pc, #204]	; (8017854 <ip4_input+0x240>)
 8017788:	693b      	ldr	r3, [r7, #16]
 801778a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801778c:	4a31      	ldr	r2, [pc, #196]	; (8017854 <ip4_input+0x240>)
 801778e:	683b      	ldr	r3, [r7, #0]
 8017790:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017792:	4a30      	ldr	r2, [pc, #192]	; (8017854 <ip4_input+0x240>)
 8017794:	697b      	ldr	r3, [r7, #20]
 8017796:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017798:	697b      	ldr	r3, [r7, #20]
 801779a:	781b      	ldrb	r3, [r3, #0]
 801779c:	f003 030f 	and.w	r3, r3, #15
 80177a0:	b2db      	uxtb	r3, r3
 80177a2:	009b      	lsls	r3, r3, #2
 80177a4:	b2db      	uxtb	r3, r3
 80177a6:	b29a      	uxth	r2, r3
 80177a8:	4b2a      	ldr	r3, [pc, #168]	; (8017854 <ip4_input+0x240>)
 80177aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80177ac:	89fb      	ldrh	r3, [r7, #14]
 80177ae:	4619      	mov	r1, r3
 80177b0:	6878      	ldr	r0, [r7, #4]
 80177b2:	f7f7 fa19 	bl	800ebe8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80177b6:	697b      	ldr	r3, [r7, #20]
 80177b8:	7a5b      	ldrb	r3, [r3, #9]
 80177ba:	2b11      	cmp	r3, #17
 80177bc:	d006      	beq.n	80177cc <ip4_input+0x1b8>
 80177be:	2b11      	cmp	r3, #17
 80177c0:	dc13      	bgt.n	80177ea <ip4_input+0x1d6>
 80177c2:	2b01      	cmp	r3, #1
 80177c4:	d00c      	beq.n	80177e0 <ip4_input+0x1cc>
 80177c6:	2b06      	cmp	r3, #6
 80177c8:	d005      	beq.n	80177d6 <ip4_input+0x1c2>
 80177ca:	e00e      	b.n	80177ea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80177cc:	6839      	ldr	r1, [r7, #0]
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f7fe f970 	bl	8015ab4 <udp_input>
        break;
 80177d4:	e026      	b.n	8017824 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80177d6:	6839      	ldr	r1, [r7, #0]
 80177d8:	6878      	ldr	r0, [r7, #4]
 80177da:	f7f9 fd2d 	bl	8011238 <tcp_input>
        break;
 80177de:	e021      	b.n	8017824 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80177e0:	6839      	ldr	r1, [r7, #0]
 80177e2:	6878      	ldr	r0, [r7, #4]
 80177e4:	f7ff fcee 	bl	80171c4 <icmp_input>
        break;
 80177e8:	e01c      	b.n	8017824 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80177ea:	4b1a      	ldr	r3, [pc, #104]	; (8017854 <ip4_input+0x240>)
 80177ec:	695b      	ldr	r3, [r3, #20]
 80177ee:	6939      	ldr	r1, [r7, #16]
 80177f0:	4618      	mov	r0, r3
 80177f2:	f000 f90b 	bl	8017a0c <ip4_addr_isbroadcast_u32>
 80177f6:	4603      	mov	r3, r0
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d10f      	bne.n	801781c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80177fc:	4b15      	ldr	r3, [pc, #84]	; (8017854 <ip4_input+0x240>)
 80177fe:	695b      	ldr	r3, [r3, #20]
 8017800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017804:	2be0      	cmp	r3, #224	; 0xe0
 8017806:	d009      	beq.n	801781c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017808:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801780c:	4619      	mov	r1, r3
 801780e:	6878      	ldr	r0, [r7, #4]
 8017810:	f7f7 fa5d 	bl	800ecce <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017814:	2102      	movs	r1, #2
 8017816:	6878      	ldr	r0, [r7, #4]
 8017818:	f7ff fdd8 	bl	80173cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801781c:	6878      	ldr	r0, [r7, #4]
 801781e:	f7f7 fa9b 	bl	800ed58 <pbuf_free>
        break;
 8017822:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017824:	4b0b      	ldr	r3, [pc, #44]	; (8017854 <ip4_input+0x240>)
 8017826:	2200      	movs	r2, #0
 8017828:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801782a:	4b0a      	ldr	r3, [pc, #40]	; (8017854 <ip4_input+0x240>)
 801782c:	2200      	movs	r2, #0
 801782e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017830:	4b08      	ldr	r3, [pc, #32]	; (8017854 <ip4_input+0x240>)
 8017832:	2200      	movs	r2, #0
 8017834:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017836:	4b07      	ldr	r3, [pc, #28]	; (8017854 <ip4_input+0x240>)
 8017838:	2200      	movs	r2, #0
 801783a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801783c:	4b05      	ldr	r3, [pc, #20]	; (8017854 <ip4_input+0x240>)
 801783e:	2200      	movs	r2, #0
 8017840:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017842:	4b04      	ldr	r3, [pc, #16]	; (8017854 <ip4_input+0x240>)
 8017844:	2200      	movs	r2, #0
 8017846:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017848:	2300      	movs	r3, #0
}
 801784a:	4618      	mov	r0, r3
 801784c:	3718      	adds	r7, #24
 801784e:	46bd      	mov	sp, r7
 8017850:	bd80      	pop	{r7, pc}
 8017852:	bf00      	nop
 8017854:	2000844c 	.word	0x2000844c
 8017858:	2000bc98 	.word	0x2000bc98

0801785c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b08a      	sub	sp, #40	; 0x28
 8017860:	af04      	add	r7, sp, #16
 8017862:	60f8      	str	r0, [r7, #12]
 8017864:	60b9      	str	r1, [r7, #8]
 8017866:	607a      	str	r2, [r7, #4]
 8017868:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801786a:	68bb      	ldr	r3, [r7, #8]
 801786c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d009      	beq.n	8017888 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017874:	68bb      	ldr	r3, [r7, #8]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d003      	beq.n	8017882 <ip4_output_if+0x26>
 801787a:	68bb      	ldr	r3, [r7, #8]
 801787c:	681b      	ldr	r3, [r3, #0]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d102      	bne.n	8017888 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017884:	3304      	adds	r3, #4
 8017886:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017888:	78fa      	ldrb	r2, [r7, #3]
 801788a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801788c:	9302      	str	r3, [sp, #8]
 801788e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017892:	9301      	str	r3, [sp, #4]
 8017894:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017898:	9300      	str	r3, [sp, #0]
 801789a:	4613      	mov	r3, r2
 801789c:	687a      	ldr	r2, [r7, #4]
 801789e:	6979      	ldr	r1, [r7, #20]
 80178a0:	68f8      	ldr	r0, [r7, #12]
 80178a2:	f000 f805 	bl	80178b0 <ip4_output_if_src>
 80178a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80178a8:	4618      	mov	r0, r3
 80178aa:	3718      	adds	r7, #24
 80178ac:	46bd      	mov	sp, r7
 80178ae:	bd80      	pop	{r7, pc}

080178b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b088      	sub	sp, #32
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	60f8      	str	r0, [r7, #12]
 80178b8:	60b9      	str	r1, [r7, #8]
 80178ba:	607a      	str	r2, [r7, #4]
 80178bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	7b9b      	ldrb	r3, [r3, #14]
 80178c2:	2b01      	cmp	r3, #1
 80178c4:	d006      	beq.n	80178d4 <ip4_output_if_src+0x24>
 80178c6:	4b4b      	ldr	r3, [pc, #300]	; (80179f4 <ip4_output_if_src+0x144>)
 80178c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80178cc:	494a      	ldr	r1, [pc, #296]	; (80179f8 <ip4_output_if_src+0x148>)
 80178ce:	484b      	ldr	r0, [pc, #300]	; (80179fc <ip4_output_if_src+0x14c>)
 80178d0:	f001 fa9c 	bl	8018e0c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d060      	beq.n	801799c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80178da:	2314      	movs	r3, #20
 80178dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80178de:	2114      	movs	r1, #20
 80178e0:	68f8      	ldr	r0, [r7, #12]
 80178e2:	f7f7 f971 	bl	800ebc8 <pbuf_add_header>
 80178e6:	4603      	mov	r3, r0
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d002      	beq.n	80178f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80178ec:	f06f 0301 	mvn.w	r3, #1
 80178f0:	e07c      	b.n	80179ec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80178f2:	68fb      	ldr	r3, [r7, #12]
 80178f4:	685b      	ldr	r3, [r3, #4]
 80178f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80178f8:	68fb      	ldr	r3, [r7, #12]
 80178fa:	895b      	ldrh	r3, [r3, #10]
 80178fc:	2b13      	cmp	r3, #19
 80178fe:	d806      	bhi.n	801790e <ip4_output_if_src+0x5e>
 8017900:	4b3c      	ldr	r3, [pc, #240]	; (80179f4 <ip4_output_if_src+0x144>)
 8017902:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017906:	493e      	ldr	r1, [pc, #248]	; (8017a00 <ip4_output_if_src+0x150>)
 8017908:	483c      	ldr	r0, [pc, #240]	; (80179fc <ip4_output_if_src+0x14c>)
 801790a:	f001 fa7f 	bl	8018e0c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801790e:	69fb      	ldr	r3, [r7, #28]
 8017910:	78fa      	ldrb	r2, [r7, #3]
 8017912:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017914:	69fb      	ldr	r3, [r7, #28]
 8017916:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801791a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681a      	ldr	r2, [r3, #0]
 8017920:	69fb      	ldr	r3, [r7, #28]
 8017922:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017924:	8b7b      	ldrh	r3, [r7, #26]
 8017926:	089b      	lsrs	r3, r3, #2
 8017928:	b29b      	uxth	r3, r3
 801792a:	b2db      	uxtb	r3, r3
 801792c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017930:	b2da      	uxtb	r2, r3
 8017932:	69fb      	ldr	r3, [r7, #28]
 8017934:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017936:	69fb      	ldr	r3, [r7, #28]
 8017938:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801793c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	891b      	ldrh	r3, [r3, #8]
 8017942:	4618      	mov	r0, r3
 8017944:	f7f5 fb60 	bl	800d008 <lwip_htons>
 8017948:	4603      	mov	r3, r0
 801794a:	461a      	mov	r2, r3
 801794c:	69fb      	ldr	r3, [r7, #28]
 801794e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017950:	69fb      	ldr	r3, [r7, #28]
 8017952:	2200      	movs	r2, #0
 8017954:	719a      	strb	r2, [r3, #6]
 8017956:	2200      	movs	r2, #0
 8017958:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801795a:	4b2a      	ldr	r3, [pc, #168]	; (8017a04 <ip4_output_if_src+0x154>)
 801795c:	881b      	ldrh	r3, [r3, #0]
 801795e:	4618      	mov	r0, r3
 8017960:	f7f5 fb52 	bl	800d008 <lwip_htons>
 8017964:	4603      	mov	r3, r0
 8017966:	461a      	mov	r2, r3
 8017968:	69fb      	ldr	r3, [r7, #28]
 801796a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801796c:	4b25      	ldr	r3, [pc, #148]	; (8017a04 <ip4_output_if_src+0x154>)
 801796e:	881b      	ldrh	r3, [r3, #0]
 8017970:	3301      	adds	r3, #1
 8017972:	b29a      	uxth	r2, r3
 8017974:	4b23      	ldr	r3, [pc, #140]	; (8017a04 <ip4_output_if_src+0x154>)
 8017976:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017978:	68bb      	ldr	r3, [r7, #8]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d104      	bne.n	8017988 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801797e:	4b22      	ldr	r3, [pc, #136]	; (8017a08 <ip4_output_if_src+0x158>)
 8017980:	681a      	ldr	r2, [r3, #0]
 8017982:	69fb      	ldr	r3, [r7, #28]
 8017984:	60da      	str	r2, [r3, #12]
 8017986:	e003      	b.n	8017990 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	681a      	ldr	r2, [r3, #0]
 801798c:	69fb      	ldr	r3, [r7, #28]
 801798e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017990:	69fb      	ldr	r3, [r7, #28]
 8017992:	2200      	movs	r2, #0
 8017994:	729a      	strb	r2, [r3, #10]
 8017996:	2200      	movs	r2, #0
 8017998:	72da      	strb	r2, [r3, #11]
 801799a:	e00f      	b.n	80179bc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	895b      	ldrh	r3, [r3, #10]
 80179a0:	2b13      	cmp	r3, #19
 80179a2:	d802      	bhi.n	80179aa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80179a4:	f06f 0301 	mvn.w	r3, #1
 80179a8:	e020      	b.n	80179ec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80179aa:	68fb      	ldr	r3, [r7, #12]
 80179ac:	685b      	ldr	r3, [r3, #4]
 80179ae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80179b0:	69fb      	ldr	r3, [r7, #28]
 80179b2:	691b      	ldr	r3, [r3, #16]
 80179b4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80179b6:	f107 0314 	add.w	r3, r7, #20
 80179ba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80179bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d00c      	beq.n	80179de <ip4_output_if_src+0x12e>
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	891a      	ldrh	r2, [r3, #8]
 80179c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80179cc:	429a      	cmp	r2, r3
 80179ce:	d906      	bls.n	80179de <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80179d0:	687a      	ldr	r2, [r7, #4]
 80179d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80179d4:	68f8      	ldr	r0, [r7, #12]
 80179d6:	f000 fd4d 	bl	8018474 <ip4_frag>
 80179da:	4603      	mov	r3, r0
 80179dc:	e006      	b.n	80179ec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80179de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e0:	695b      	ldr	r3, [r3, #20]
 80179e2:	687a      	ldr	r2, [r7, #4]
 80179e4:	68f9      	ldr	r1, [r7, #12]
 80179e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80179e8:	4798      	blx	r3
 80179ea:	4603      	mov	r3, r0
}
 80179ec:	4618      	mov	r0, r3
 80179ee:	3720      	adds	r7, #32
 80179f0:	46bd      	mov	sp, r7
 80179f2:	bd80      	pop	{r7, pc}
 80179f4:	0801d47c 	.word	0x0801d47c
 80179f8:	0801d4b0 	.word	0x0801d4b0
 80179fc:	0801d4bc 	.word	0x0801d4bc
 8017a00:	0801d4e4 	.word	0x0801d4e4
 8017a04:	2000500e 	.word	0x2000500e
 8017a08:	0801dd7c 	.word	0x0801dd7c

08017a0c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017a0c:	b480      	push	{r7}
 8017a0e:	b085      	sub	sp, #20
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
 8017a14:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a20:	d002      	beq.n	8017a28 <ip4_addr_isbroadcast_u32+0x1c>
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d101      	bne.n	8017a2c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017a28:	2301      	movs	r3, #1
 8017a2a:	e02a      	b.n	8017a82 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017a2c:	683b      	ldr	r3, [r7, #0]
 8017a2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017a32:	f003 0302 	and.w	r3, r3, #2
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d101      	bne.n	8017a3e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	e021      	b.n	8017a82 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017a3e:	683b      	ldr	r3, [r7, #0]
 8017a40:	3304      	adds	r3, #4
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	687a      	ldr	r2, [r7, #4]
 8017a46:	429a      	cmp	r2, r3
 8017a48:	d101      	bne.n	8017a4e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017a4a:	2300      	movs	r3, #0
 8017a4c:	e019      	b.n	8017a82 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017a4e:	68fa      	ldr	r2, [r7, #12]
 8017a50:	683b      	ldr	r3, [r7, #0]
 8017a52:	3304      	adds	r3, #4
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	405a      	eors	r2, r3
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	3308      	adds	r3, #8
 8017a5c:	681b      	ldr	r3, [r3, #0]
 8017a5e:	4013      	ands	r3, r2
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d10d      	bne.n	8017a80 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017a64:	683b      	ldr	r3, [r7, #0]
 8017a66:	3308      	adds	r3, #8
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	43da      	mvns	r2, r3
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017a70:	683b      	ldr	r3, [r7, #0]
 8017a72:	3308      	adds	r3, #8
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017a78:	429a      	cmp	r2, r3
 8017a7a:	d101      	bne.n	8017a80 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017a7c:	2301      	movs	r3, #1
 8017a7e:	e000      	b.n	8017a82 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017a80:	2300      	movs	r3, #0
  }
}
 8017a82:	4618      	mov	r0, r3
 8017a84:	3714      	adds	r7, #20
 8017a86:	46bd      	mov	sp, r7
 8017a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a8c:	4770      	bx	lr
	...

08017a90 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b084      	sub	sp, #16
 8017a94:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017a96:	2300      	movs	r3, #0
 8017a98:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017a9a:	4b12      	ldr	r3, [pc, #72]	; (8017ae4 <ip_reass_tmr+0x54>)
 8017a9c:	681b      	ldr	r3, [r3, #0]
 8017a9e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017aa0:	e018      	b.n	8017ad4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	7fdb      	ldrb	r3, [r3, #31]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d00b      	beq.n	8017ac2 <ip_reass_tmr+0x32>
      r->timer--;
 8017aaa:	68fb      	ldr	r3, [r7, #12]
 8017aac:	7fdb      	ldrb	r3, [r3, #31]
 8017aae:	3b01      	subs	r3, #1
 8017ab0:	b2da      	uxtb	r2, r3
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	681b      	ldr	r3, [r3, #0]
 8017abe:	60fb      	str	r3, [r7, #12]
 8017ac0:	e008      	b.n	8017ad4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017acc:	68b9      	ldr	r1, [r7, #8]
 8017ace:	6878      	ldr	r0, [r7, #4]
 8017ad0:	f000 f80a 	bl	8017ae8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d1e3      	bne.n	8017aa2 <ip_reass_tmr+0x12>
    }
  }
}
 8017ada:	bf00      	nop
 8017adc:	bf00      	nop
 8017ade:	3710      	adds	r7, #16
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	bd80      	pop	{r7, pc}
 8017ae4:	20005010 	.word	0x20005010

08017ae8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017ae8:	b580      	push	{r7, lr}
 8017aea:	b088      	sub	sp, #32
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
 8017af0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017af2:	2300      	movs	r3, #0
 8017af4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017af6:	683a      	ldr	r2, [r7, #0]
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	429a      	cmp	r2, r3
 8017afc:	d105      	bne.n	8017b0a <ip_reass_free_complete_datagram+0x22>
 8017afe:	4b45      	ldr	r3, [pc, #276]	; (8017c14 <ip_reass_free_complete_datagram+0x12c>)
 8017b00:	22ab      	movs	r2, #171	; 0xab
 8017b02:	4945      	ldr	r1, [pc, #276]	; (8017c18 <ip_reass_free_complete_datagram+0x130>)
 8017b04:	4845      	ldr	r0, [pc, #276]	; (8017c1c <ip_reass_free_complete_datagram+0x134>)
 8017b06:	f001 f981 	bl	8018e0c <iprintf>
  if (prev != NULL) {
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d00a      	beq.n	8017b26 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017b10:	683b      	ldr	r3, [r7, #0]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	687a      	ldr	r2, [r7, #4]
 8017b16:	429a      	cmp	r2, r3
 8017b18:	d005      	beq.n	8017b26 <ip_reass_free_complete_datagram+0x3e>
 8017b1a:	4b3e      	ldr	r3, [pc, #248]	; (8017c14 <ip_reass_free_complete_datagram+0x12c>)
 8017b1c:	22ad      	movs	r2, #173	; 0xad
 8017b1e:	4940      	ldr	r1, [pc, #256]	; (8017c20 <ip_reass_free_complete_datagram+0x138>)
 8017b20:	483e      	ldr	r0, [pc, #248]	; (8017c1c <ip_reass_free_complete_datagram+0x134>)
 8017b22:	f001 f973 	bl	8018e0c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	685b      	ldr	r3, [r3, #4]
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017b2e:	697b      	ldr	r3, [r7, #20]
 8017b30:	889b      	ldrh	r3, [r3, #4]
 8017b32:	b29b      	uxth	r3, r3
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d12a      	bne.n	8017b8e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	685b      	ldr	r3, [r3, #4]
 8017b3c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017b3e:	697b      	ldr	r3, [r7, #20]
 8017b40:	681a      	ldr	r2, [r3, #0]
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017b46:	69bb      	ldr	r3, [r7, #24]
 8017b48:	6858      	ldr	r0, [r3, #4]
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	3308      	adds	r3, #8
 8017b4e:	2214      	movs	r2, #20
 8017b50:	4619      	mov	r1, r3
 8017b52:	f001 f89b 	bl	8018c8c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017b56:	2101      	movs	r1, #1
 8017b58:	69b8      	ldr	r0, [r7, #24]
 8017b5a:	f7ff fc47 	bl	80173ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017b5e:	69b8      	ldr	r0, [r7, #24]
 8017b60:	f7f7 f988 	bl	800ee74 <pbuf_clen>
 8017b64:	4603      	mov	r3, r0
 8017b66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017b68:	8bfa      	ldrh	r2, [r7, #30]
 8017b6a:	8a7b      	ldrh	r3, [r7, #18]
 8017b6c:	4413      	add	r3, r2
 8017b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017b72:	db05      	blt.n	8017b80 <ip_reass_free_complete_datagram+0x98>
 8017b74:	4b27      	ldr	r3, [pc, #156]	; (8017c14 <ip_reass_free_complete_datagram+0x12c>)
 8017b76:	22bc      	movs	r2, #188	; 0xbc
 8017b78:	492a      	ldr	r1, [pc, #168]	; (8017c24 <ip_reass_free_complete_datagram+0x13c>)
 8017b7a:	4828      	ldr	r0, [pc, #160]	; (8017c1c <ip_reass_free_complete_datagram+0x134>)
 8017b7c:	f001 f946 	bl	8018e0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017b80:	8bfa      	ldrh	r2, [r7, #30]
 8017b82:	8a7b      	ldrh	r3, [r7, #18]
 8017b84:	4413      	add	r3, r2
 8017b86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017b88:	69b8      	ldr	r0, [r7, #24]
 8017b8a:	f7f7 f8e5 	bl	800ed58 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	685b      	ldr	r3, [r3, #4]
 8017b92:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017b94:	e01f      	b.n	8017bd6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017b96:	69bb      	ldr	r3, [r7, #24]
 8017b98:	685b      	ldr	r3, [r3, #4]
 8017b9a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017b9c:	69bb      	ldr	r3, [r7, #24]
 8017b9e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017ba0:	697b      	ldr	r3, [r7, #20]
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017ba6:	68f8      	ldr	r0, [r7, #12]
 8017ba8:	f7f7 f964 	bl	800ee74 <pbuf_clen>
 8017bac:	4603      	mov	r3, r0
 8017bae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017bb0:	8bfa      	ldrh	r2, [r7, #30]
 8017bb2:	8a7b      	ldrh	r3, [r7, #18]
 8017bb4:	4413      	add	r3, r2
 8017bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017bba:	db05      	blt.n	8017bc8 <ip_reass_free_complete_datagram+0xe0>
 8017bbc:	4b15      	ldr	r3, [pc, #84]	; (8017c14 <ip_reass_free_complete_datagram+0x12c>)
 8017bbe:	22cc      	movs	r2, #204	; 0xcc
 8017bc0:	4918      	ldr	r1, [pc, #96]	; (8017c24 <ip_reass_free_complete_datagram+0x13c>)
 8017bc2:	4816      	ldr	r0, [pc, #88]	; (8017c1c <ip_reass_free_complete_datagram+0x134>)
 8017bc4:	f001 f922 	bl	8018e0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017bc8:	8bfa      	ldrh	r2, [r7, #30]
 8017bca:	8a7b      	ldrh	r3, [r7, #18]
 8017bcc:	4413      	add	r3, r2
 8017bce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017bd0:	68f8      	ldr	r0, [r7, #12]
 8017bd2:	f7f7 f8c1 	bl	800ed58 <pbuf_free>
  while (p != NULL) {
 8017bd6:	69bb      	ldr	r3, [r7, #24]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d1dc      	bne.n	8017b96 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017bdc:	6839      	ldr	r1, [r7, #0]
 8017bde:	6878      	ldr	r0, [r7, #4]
 8017be0:	f000 f8c2 	bl	8017d68 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017be4:	4b10      	ldr	r3, [pc, #64]	; (8017c28 <ip_reass_free_complete_datagram+0x140>)
 8017be6:	881b      	ldrh	r3, [r3, #0]
 8017be8:	8bfa      	ldrh	r2, [r7, #30]
 8017bea:	429a      	cmp	r2, r3
 8017bec:	d905      	bls.n	8017bfa <ip_reass_free_complete_datagram+0x112>
 8017bee:	4b09      	ldr	r3, [pc, #36]	; (8017c14 <ip_reass_free_complete_datagram+0x12c>)
 8017bf0:	22d2      	movs	r2, #210	; 0xd2
 8017bf2:	490e      	ldr	r1, [pc, #56]	; (8017c2c <ip_reass_free_complete_datagram+0x144>)
 8017bf4:	4809      	ldr	r0, [pc, #36]	; (8017c1c <ip_reass_free_complete_datagram+0x134>)
 8017bf6:	f001 f909 	bl	8018e0c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017bfa:	4b0b      	ldr	r3, [pc, #44]	; (8017c28 <ip_reass_free_complete_datagram+0x140>)
 8017bfc:	881a      	ldrh	r2, [r3, #0]
 8017bfe:	8bfb      	ldrh	r3, [r7, #30]
 8017c00:	1ad3      	subs	r3, r2, r3
 8017c02:	b29a      	uxth	r2, r3
 8017c04:	4b08      	ldr	r3, [pc, #32]	; (8017c28 <ip_reass_free_complete_datagram+0x140>)
 8017c06:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017c08:	8bfb      	ldrh	r3, [r7, #30]
}
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	3720      	adds	r7, #32
 8017c0e:	46bd      	mov	sp, r7
 8017c10:	bd80      	pop	{r7, pc}
 8017c12:	bf00      	nop
 8017c14:	0801d514 	.word	0x0801d514
 8017c18:	0801d550 	.word	0x0801d550
 8017c1c:	0801d55c 	.word	0x0801d55c
 8017c20:	0801d584 	.word	0x0801d584
 8017c24:	0801d598 	.word	0x0801d598
 8017c28:	20005014 	.word	0x20005014
 8017c2c:	0801d5b8 	.word	0x0801d5b8

08017c30 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017c30:	b580      	push	{r7, lr}
 8017c32:	b08a      	sub	sp, #40	; 0x28
 8017c34:	af00      	add	r7, sp, #0
 8017c36:	6078      	str	r0, [r7, #4]
 8017c38:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017c3a:	2300      	movs	r3, #0
 8017c3c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017c3e:	2300      	movs	r3, #0
 8017c40:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017c42:	2300      	movs	r3, #0
 8017c44:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017c46:	2300      	movs	r3, #0
 8017c48:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017c4a:	2300      	movs	r3, #0
 8017c4c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017c4e:	4b28      	ldr	r3, [pc, #160]	; (8017cf0 <ip_reass_remove_oldest_datagram+0xc0>)
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017c54:	e030      	b.n	8017cb8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c58:	695a      	ldr	r2, [r3, #20]
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	68db      	ldr	r3, [r3, #12]
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	d10c      	bne.n	8017c7c <ip_reass_remove_oldest_datagram+0x4c>
 8017c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c64:	699a      	ldr	r2, [r3, #24]
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	691b      	ldr	r3, [r3, #16]
 8017c6a:	429a      	cmp	r2, r3
 8017c6c:	d106      	bne.n	8017c7c <ip_reass_remove_oldest_datagram+0x4c>
 8017c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c70:	899a      	ldrh	r2, [r3, #12]
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	889b      	ldrh	r3, [r3, #4]
 8017c76:	b29b      	uxth	r3, r3
 8017c78:	429a      	cmp	r2, r3
 8017c7a:	d014      	beq.n	8017ca6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017c7c:	693b      	ldr	r3, [r7, #16]
 8017c7e:	3301      	adds	r3, #1
 8017c80:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017c82:	6a3b      	ldr	r3, [r7, #32]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d104      	bne.n	8017c92 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c8a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017c8c:	69fb      	ldr	r3, [r7, #28]
 8017c8e:	61bb      	str	r3, [r7, #24]
 8017c90:	e009      	b.n	8017ca6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c94:	7fda      	ldrb	r2, [r3, #31]
 8017c96:	6a3b      	ldr	r3, [r7, #32]
 8017c98:	7fdb      	ldrb	r3, [r3, #31]
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	d803      	bhi.n	8017ca6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017ca2:	69fb      	ldr	r3, [r7, #28]
 8017ca4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ca8:	681b      	ldr	r3, [r3, #0]
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d001      	beq.n	8017cb2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d1cb      	bne.n	8017c56 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017cbe:	6a3b      	ldr	r3, [r7, #32]
 8017cc0:	2b00      	cmp	r3, #0
 8017cc2:	d008      	beq.n	8017cd6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017cc4:	69b9      	ldr	r1, [r7, #24]
 8017cc6:	6a38      	ldr	r0, [r7, #32]
 8017cc8:	f7ff ff0e 	bl	8017ae8 <ip_reass_free_complete_datagram>
 8017ccc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017cce:	697a      	ldr	r2, [r7, #20]
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	4413      	add	r3, r2
 8017cd4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017cd6:	697a      	ldr	r2, [r7, #20]
 8017cd8:	683b      	ldr	r3, [r7, #0]
 8017cda:	429a      	cmp	r2, r3
 8017cdc:	da02      	bge.n	8017ce4 <ip_reass_remove_oldest_datagram+0xb4>
 8017cde:	693b      	ldr	r3, [r7, #16]
 8017ce0:	2b01      	cmp	r3, #1
 8017ce2:	dcac      	bgt.n	8017c3e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017ce4:	697b      	ldr	r3, [r7, #20]
}
 8017ce6:	4618      	mov	r0, r3
 8017ce8:	3728      	adds	r7, #40	; 0x28
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}
 8017cee:	bf00      	nop
 8017cf0:	20005010 	.word	0x20005010

08017cf4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b084      	sub	sp, #16
 8017cf8:	af00      	add	r7, sp, #0
 8017cfa:	6078      	str	r0, [r7, #4]
 8017cfc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017cfe:	2004      	movs	r0, #4
 8017d00:	f7f6 f902 	bl	800df08 <memp_malloc>
 8017d04:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d110      	bne.n	8017d2e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017d0c:	6839      	ldr	r1, [r7, #0]
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f7ff ff8e 	bl	8017c30 <ip_reass_remove_oldest_datagram>
 8017d14:	4602      	mov	r2, r0
 8017d16:	683b      	ldr	r3, [r7, #0]
 8017d18:	4293      	cmp	r3, r2
 8017d1a:	dc03      	bgt.n	8017d24 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017d1c:	2004      	movs	r0, #4
 8017d1e:	f7f6 f8f3 	bl	800df08 <memp_malloc>
 8017d22:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	2b00      	cmp	r3, #0
 8017d28:	d101      	bne.n	8017d2e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	e016      	b.n	8017d5c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017d2e:	2220      	movs	r2, #32
 8017d30:	2100      	movs	r1, #0
 8017d32:	68f8      	ldr	r0, [r7, #12]
 8017d34:	f000 ffb8 	bl	8018ca8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	220f      	movs	r2, #15
 8017d3c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017d3e:	4b09      	ldr	r3, [pc, #36]	; (8017d64 <ip_reass_enqueue_new_datagram+0x70>)
 8017d40:	681a      	ldr	r2, [r3, #0]
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017d46:	4a07      	ldr	r2, [pc, #28]	; (8017d64 <ip_reass_enqueue_new_datagram+0x70>)
 8017d48:	68fb      	ldr	r3, [r7, #12]
 8017d4a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	3308      	adds	r3, #8
 8017d50:	2214      	movs	r2, #20
 8017d52:	6879      	ldr	r1, [r7, #4]
 8017d54:	4618      	mov	r0, r3
 8017d56:	f000 ff99 	bl	8018c8c <memcpy>
  return ipr;
 8017d5a:	68fb      	ldr	r3, [r7, #12]
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	3710      	adds	r7, #16
 8017d60:	46bd      	mov	sp, r7
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	20005010 	.word	0x20005010

08017d68 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017d68:	b580      	push	{r7, lr}
 8017d6a:	b082      	sub	sp, #8
 8017d6c:	af00      	add	r7, sp, #0
 8017d6e:	6078      	str	r0, [r7, #4]
 8017d70:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017d72:	4b10      	ldr	r3, [pc, #64]	; (8017db4 <ip_reass_dequeue_datagram+0x4c>)
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	687a      	ldr	r2, [r7, #4]
 8017d78:	429a      	cmp	r2, r3
 8017d7a:	d104      	bne.n	8017d86 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	4a0c      	ldr	r2, [pc, #48]	; (8017db4 <ip_reass_dequeue_datagram+0x4c>)
 8017d82:	6013      	str	r3, [r2, #0]
 8017d84:	e00d      	b.n	8017da2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017d86:	683b      	ldr	r3, [r7, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d106      	bne.n	8017d9a <ip_reass_dequeue_datagram+0x32>
 8017d8c:	4b0a      	ldr	r3, [pc, #40]	; (8017db8 <ip_reass_dequeue_datagram+0x50>)
 8017d8e:	f240 1245 	movw	r2, #325	; 0x145
 8017d92:	490a      	ldr	r1, [pc, #40]	; (8017dbc <ip_reass_dequeue_datagram+0x54>)
 8017d94:	480a      	ldr	r0, [pc, #40]	; (8017dc0 <ip_reass_dequeue_datagram+0x58>)
 8017d96:	f001 f839 	bl	8018e0c <iprintf>
    prev->next = ipr->next;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	681a      	ldr	r2, [r3, #0]
 8017d9e:	683b      	ldr	r3, [r7, #0]
 8017da0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017da2:	6879      	ldr	r1, [r7, #4]
 8017da4:	2004      	movs	r0, #4
 8017da6:	f7f6 f901 	bl	800dfac <memp_free>
}
 8017daa:	bf00      	nop
 8017dac:	3708      	adds	r7, #8
 8017dae:	46bd      	mov	sp, r7
 8017db0:	bd80      	pop	{r7, pc}
 8017db2:	bf00      	nop
 8017db4:	20005010 	.word	0x20005010
 8017db8:	0801d514 	.word	0x0801d514
 8017dbc:	0801d5dc 	.word	0x0801d5dc
 8017dc0:	0801d55c 	.word	0x0801d55c

08017dc4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b08c      	sub	sp, #48	; 0x30
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	60f8      	str	r0, [r7, #12]
 8017dcc:	60b9      	str	r1, [r7, #8]
 8017dce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017dd4:	2301      	movs	r3, #1
 8017dd6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017dd8:	68bb      	ldr	r3, [r7, #8]
 8017dda:	685b      	ldr	r3, [r3, #4]
 8017ddc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017dde:	69fb      	ldr	r3, [r7, #28]
 8017de0:	885b      	ldrh	r3, [r3, #2]
 8017de2:	b29b      	uxth	r3, r3
 8017de4:	4618      	mov	r0, r3
 8017de6:	f7f5 f90f 	bl	800d008 <lwip_htons>
 8017dea:	4603      	mov	r3, r0
 8017dec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017dee:	69fb      	ldr	r3, [r7, #28]
 8017df0:	781b      	ldrb	r3, [r3, #0]
 8017df2:	f003 030f 	and.w	r3, r3, #15
 8017df6:	b2db      	uxtb	r3, r3
 8017df8:	009b      	lsls	r3, r3, #2
 8017dfa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017dfc:	7e7b      	ldrb	r3, [r7, #25]
 8017dfe:	b29b      	uxth	r3, r3
 8017e00:	8b7a      	ldrh	r2, [r7, #26]
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d202      	bcs.n	8017e0c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e06:	f04f 33ff 	mov.w	r3, #4294967295
 8017e0a:	e135      	b.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017e0c:	7e7b      	ldrb	r3, [r7, #25]
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	8b7a      	ldrh	r2, [r7, #26]
 8017e12:	1ad3      	subs	r3, r2, r3
 8017e14:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017e16:	69fb      	ldr	r3, [r7, #28]
 8017e18:	88db      	ldrh	r3, [r3, #6]
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	4618      	mov	r0, r3
 8017e1e:	f7f5 f8f3 	bl	800d008 <lwip_htons>
 8017e22:	4603      	mov	r3, r0
 8017e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017e28:	b29b      	uxth	r3, r3
 8017e2a:	00db      	lsls	r3, r3, #3
 8017e2c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8017e2e:	68bb      	ldr	r3, [r7, #8]
 8017e30:	685b      	ldr	r3, [r3, #4]
 8017e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e36:	2200      	movs	r2, #0
 8017e38:	701a      	strb	r2, [r3, #0]
 8017e3a:	2200      	movs	r2, #0
 8017e3c:	705a      	strb	r2, [r3, #1]
 8017e3e:	2200      	movs	r2, #0
 8017e40:	709a      	strb	r2, [r3, #2]
 8017e42:	2200      	movs	r2, #0
 8017e44:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e48:	8afa      	ldrh	r2, [r7, #22]
 8017e4a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017e4c:	8afa      	ldrh	r2, [r7, #22]
 8017e4e:	8b7b      	ldrh	r3, [r7, #26]
 8017e50:	4413      	add	r3, r2
 8017e52:	b29a      	uxth	r2, r3
 8017e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e56:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e5a:	88db      	ldrh	r3, [r3, #6]
 8017e5c:	b29b      	uxth	r3, r3
 8017e5e:	8afa      	ldrh	r2, [r7, #22]
 8017e60:	429a      	cmp	r2, r3
 8017e62:	d902      	bls.n	8017e6a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017e64:	f04f 33ff 	mov.w	r3, #4294967295
 8017e68:	e106      	b.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	685b      	ldr	r3, [r3, #4]
 8017e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8017e70:	e068      	b.n	8017f44 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8017e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e74:	685b      	ldr	r3, [r3, #4]
 8017e76:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e7a:	889b      	ldrh	r3, [r3, #4]
 8017e7c:	b29a      	uxth	r2, r3
 8017e7e:	693b      	ldr	r3, [r7, #16]
 8017e80:	889b      	ldrh	r3, [r3, #4]
 8017e82:	b29b      	uxth	r3, r3
 8017e84:	429a      	cmp	r2, r3
 8017e86:	d235      	bcs.n	8017ef4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017e8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8017e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d020      	beq.n	8017ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e96:	889b      	ldrh	r3, [r3, #4]
 8017e98:	b29a      	uxth	r2, r3
 8017e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017e9c:	88db      	ldrh	r3, [r3, #6]
 8017e9e:	b29b      	uxth	r3, r3
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	d307      	bcc.n	8017eb4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ea6:	88db      	ldrh	r3, [r3, #6]
 8017ea8:	b29a      	uxth	r2, r3
 8017eaa:	693b      	ldr	r3, [r7, #16]
 8017eac:	889b      	ldrh	r3, [r3, #4]
 8017eae:	b29b      	uxth	r3, r3
 8017eb0:	429a      	cmp	r2, r3
 8017eb2:	d902      	bls.n	8017eba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8017eb8:	e0de      	b.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8017eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ebc:	68ba      	ldr	r2, [r7, #8]
 8017ebe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ec2:	88db      	ldrh	r3, [r3, #6]
 8017ec4:	b29a      	uxth	r2, r3
 8017ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ec8:	889b      	ldrh	r3, [r3, #4]
 8017eca:	b29b      	uxth	r3, r3
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d03d      	beq.n	8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017ed4:	e03a      	b.n	8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ed8:	88db      	ldrh	r3, [r3, #6]
 8017eda:	b29a      	uxth	r2, r3
 8017edc:	693b      	ldr	r3, [r7, #16]
 8017ede:	889b      	ldrh	r3, [r3, #4]
 8017ee0:	b29b      	uxth	r3, r3
 8017ee2:	429a      	cmp	r2, r3
 8017ee4:	d902      	bls.n	8017eec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8017eea:	e0c5      	b.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017eec:	68fb      	ldr	r3, [r7, #12]
 8017eee:	68ba      	ldr	r2, [r7, #8]
 8017ef0:	605a      	str	r2, [r3, #4]
      break;
 8017ef2:	e02b      	b.n	8017f4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ef6:	889b      	ldrh	r3, [r3, #4]
 8017ef8:	b29a      	uxth	r2, r3
 8017efa:	693b      	ldr	r3, [r7, #16]
 8017efc:	889b      	ldrh	r3, [r3, #4]
 8017efe:	b29b      	uxth	r3, r3
 8017f00:	429a      	cmp	r2, r3
 8017f02:	d102      	bne.n	8017f0a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f04:	f04f 33ff 	mov.w	r3, #4294967295
 8017f08:	e0b6      	b.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f0c:	889b      	ldrh	r3, [r3, #4]
 8017f0e:	b29a      	uxth	r2, r3
 8017f10:	693b      	ldr	r3, [r7, #16]
 8017f12:	88db      	ldrh	r3, [r3, #6]
 8017f14:	b29b      	uxth	r3, r3
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d202      	bcs.n	8017f20 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8017f1e:	e0ab      	b.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8017f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d009      	beq.n	8017f3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f28:	88db      	ldrh	r3, [r3, #6]
 8017f2a:	b29a      	uxth	r2, r3
 8017f2c:	693b      	ldr	r3, [r7, #16]
 8017f2e:	889b      	ldrh	r3, [r3, #4]
 8017f30:	b29b      	uxth	r3, r3
 8017f32:	429a      	cmp	r2, r3
 8017f34:	d001      	beq.n	8017f3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017f36:	2300      	movs	r3, #0
 8017f38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017f3a:	693b      	ldr	r3, [r7, #16]
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8017f40:	693b      	ldr	r3, [r7, #16]
 8017f42:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f46:	2b00      	cmp	r3, #0
 8017f48:	d193      	bne.n	8017e72 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017f4a:	e000      	b.n	8017f4e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017f4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8017f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d12d      	bne.n	8017fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d01c      	beq.n	8017f94 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f5c:	88db      	ldrh	r3, [r3, #6]
 8017f5e:	b29a      	uxth	r2, r3
 8017f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f62:	889b      	ldrh	r3, [r3, #4]
 8017f64:	b29b      	uxth	r3, r3
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d906      	bls.n	8017f78 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017f6a:	4b45      	ldr	r3, [pc, #276]	; (8018080 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f6c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8017f70:	4944      	ldr	r1, [pc, #272]	; (8018084 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017f72:	4845      	ldr	r0, [pc, #276]	; (8018088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017f74:	f000 ff4a 	bl	8018e0c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f7a:	68ba      	ldr	r2, [r7, #8]
 8017f7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8017f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f80:	88db      	ldrh	r3, [r3, #6]
 8017f82:	b29a      	uxth	r2, r3
 8017f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f86:	889b      	ldrh	r3, [r3, #4]
 8017f88:	b29b      	uxth	r3, r3
 8017f8a:	429a      	cmp	r2, r3
 8017f8c:	d010      	beq.n	8017fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8017f8e:	2300      	movs	r3, #0
 8017f90:	623b      	str	r3, [r7, #32]
 8017f92:	e00d      	b.n	8017fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	685b      	ldr	r3, [r3, #4]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d006      	beq.n	8017faa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8017f9c:	4b38      	ldr	r3, [pc, #224]	; (8018080 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017f9e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017fa2:	493a      	ldr	r1, [pc, #232]	; (801808c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017fa4:	4838      	ldr	r0, [pc, #224]	; (8018088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017fa6:	f000 ff31 	bl	8018e0c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	68ba      	ldr	r2, [r7, #8]
 8017fae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d105      	bne.n	8017fc2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	7f9b      	ldrb	r3, [r3, #30]
 8017fba:	f003 0301 	and.w	r3, r3, #1
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d059      	beq.n	8018076 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017fc2:	6a3b      	ldr	r3, [r7, #32]
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d04f      	beq.n	8018068 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	685b      	ldr	r3, [r3, #4]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d006      	beq.n	8017fde <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	685b      	ldr	r3, [r3, #4]
 8017fd4:	685b      	ldr	r3, [r3, #4]
 8017fd6:	889b      	ldrh	r3, [r3, #4]
 8017fd8:	b29b      	uxth	r3, r3
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d002      	beq.n	8017fe4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8017fde:	2300      	movs	r3, #0
 8017fe0:	623b      	str	r3, [r7, #32]
 8017fe2:	e041      	b.n	8018068 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fe6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017fee:	e012      	b.n	8018016 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff2:	685b      	ldr	r3, [r3, #4]
 8017ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017ff8:	88db      	ldrh	r3, [r3, #6]
 8017ffa:	b29a      	uxth	r2, r3
 8017ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ffe:	889b      	ldrh	r3, [r3, #4]
 8018000:	b29b      	uxth	r3, r3
 8018002:	429a      	cmp	r2, r3
 8018004:	d002      	beq.n	801800c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018006:	2300      	movs	r3, #0
 8018008:	623b      	str	r3, [r7, #32]
            break;
 801800a:	e007      	b.n	801801c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801800c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801800e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018018:	2b00      	cmp	r3, #0
 801801a:	d1e9      	bne.n	8017ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801801c:	6a3b      	ldr	r3, [r7, #32]
 801801e:	2b00      	cmp	r3, #0
 8018020:	d022      	beq.n	8018068 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018022:	68fb      	ldr	r3, [r7, #12]
 8018024:	685b      	ldr	r3, [r3, #4]
 8018026:	2b00      	cmp	r3, #0
 8018028:	d106      	bne.n	8018038 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801802a:	4b15      	ldr	r3, [pc, #84]	; (8018080 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801802c:	f240 12df 	movw	r2, #479	; 0x1df
 8018030:	4917      	ldr	r1, [pc, #92]	; (8018090 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018032:	4815      	ldr	r0, [pc, #84]	; (8018088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018034:	f000 feea 	bl	8018e0c <iprintf>
          LWIP_ASSERT("sanity check",
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	685b      	ldr	r3, [r3, #4]
 801803c:	685b      	ldr	r3, [r3, #4]
 801803e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018040:	429a      	cmp	r2, r3
 8018042:	d106      	bne.n	8018052 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018044:	4b0e      	ldr	r3, [pc, #56]	; (8018080 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018046:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801804a:	4911      	ldr	r1, [pc, #68]	; (8018090 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801804c:	480e      	ldr	r0, [pc, #56]	; (8018088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801804e:	f000 fedd 	bl	8018e0c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018054:	681b      	ldr	r3, [r3, #0]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d006      	beq.n	8018068 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801805a:	4b09      	ldr	r3, [pc, #36]	; (8018080 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801805c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018060:	490c      	ldr	r1, [pc, #48]	; (8018094 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018062:	4809      	ldr	r0, [pc, #36]	; (8018088 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018064:	f000 fed2 	bl	8018e0c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018068:	6a3b      	ldr	r3, [r7, #32]
 801806a:	2b00      	cmp	r3, #0
 801806c:	bf14      	ite	ne
 801806e:	2301      	movne	r3, #1
 8018070:	2300      	moveq	r3, #0
 8018072:	b2db      	uxtb	r3, r3
 8018074:	e000      	b.n	8018078 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018076:	2300      	movs	r3, #0
}
 8018078:	4618      	mov	r0, r3
 801807a:	3730      	adds	r7, #48	; 0x30
 801807c:	46bd      	mov	sp, r7
 801807e:	bd80      	pop	{r7, pc}
 8018080:	0801d514 	.word	0x0801d514
 8018084:	0801d5f8 	.word	0x0801d5f8
 8018088:	0801d55c 	.word	0x0801d55c
 801808c:	0801d618 	.word	0x0801d618
 8018090:	0801d650 	.word	0x0801d650
 8018094:	0801d660 	.word	0x0801d660

08018098 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b08e      	sub	sp, #56	; 0x38
 801809c:	af00      	add	r7, sp, #0
 801809e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	685b      	ldr	r3, [r3, #4]
 80180a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80180a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180a8:	781b      	ldrb	r3, [r3, #0]
 80180aa:	f003 030f 	and.w	r3, r3, #15
 80180ae:	b2db      	uxtb	r3, r3
 80180b0:	009b      	lsls	r3, r3, #2
 80180b2:	b2db      	uxtb	r3, r3
 80180b4:	2b14      	cmp	r3, #20
 80180b6:	f040 8167 	bne.w	8018388 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80180ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180bc:	88db      	ldrh	r3, [r3, #6]
 80180be:	b29b      	uxth	r3, r3
 80180c0:	4618      	mov	r0, r3
 80180c2:	f7f4 ffa1 	bl	800d008 <lwip_htons>
 80180c6:	4603      	mov	r3, r0
 80180c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80180cc:	b29b      	uxth	r3, r3
 80180ce:	00db      	lsls	r3, r3, #3
 80180d0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80180d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180d4:	885b      	ldrh	r3, [r3, #2]
 80180d6:	b29b      	uxth	r3, r3
 80180d8:	4618      	mov	r0, r3
 80180da:	f7f4 ff95 	bl	800d008 <lwip_htons>
 80180de:	4603      	mov	r3, r0
 80180e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80180e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180e4:	781b      	ldrb	r3, [r3, #0]
 80180e6:	f003 030f 	and.w	r3, r3, #15
 80180ea:	b2db      	uxtb	r3, r3
 80180ec:	009b      	lsls	r3, r3, #2
 80180ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80180f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180f6:	b29b      	uxth	r3, r3
 80180f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80180fa:	429a      	cmp	r2, r3
 80180fc:	f0c0 8146 	bcc.w	801838c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018100:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018104:	b29b      	uxth	r3, r3
 8018106:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018108:	1ad3      	subs	r3, r2, r3
 801810a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801810c:	6878      	ldr	r0, [r7, #4]
 801810e:	f7f6 feb1 	bl	800ee74 <pbuf_clen>
 8018112:	4603      	mov	r3, r0
 8018114:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018116:	4b9f      	ldr	r3, [pc, #636]	; (8018394 <ip4_reass+0x2fc>)
 8018118:	881b      	ldrh	r3, [r3, #0]
 801811a:	461a      	mov	r2, r3
 801811c:	8c3b      	ldrh	r3, [r7, #32]
 801811e:	4413      	add	r3, r2
 8018120:	2b0a      	cmp	r3, #10
 8018122:	dd10      	ble.n	8018146 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018124:	8c3b      	ldrh	r3, [r7, #32]
 8018126:	4619      	mov	r1, r3
 8018128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801812a:	f7ff fd81 	bl	8017c30 <ip_reass_remove_oldest_datagram>
 801812e:	4603      	mov	r3, r0
 8018130:	2b00      	cmp	r3, #0
 8018132:	f000 812d 	beq.w	8018390 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018136:	4b97      	ldr	r3, [pc, #604]	; (8018394 <ip4_reass+0x2fc>)
 8018138:	881b      	ldrh	r3, [r3, #0]
 801813a:	461a      	mov	r2, r3
 801813c:	8c3b      	ldrh	r3, [r7, #32]
 801813e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018140:	2b0a      	cmp	r3, #10
 8018142:	f300 8125 	bgt.w	8018390 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018146:	4b94      	ldr	r3, [pc, #592]	; (8018398 <ip4_reass+0x300>)
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	633b      	str	r3, [r7, #48]	; 0x30
 801814c:	e015      	b.n	801817a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801814e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018150:	695a      	ldr	r2, [r3, #20]
 8018152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018154:	68db      	ldr	r3, [r3, #12]
 8018156:	429a      	cmp	r2, r3
 8018158:	d10c      	bne.n	8018174 <ip4_reass+0xdc>
 801815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801815c:	699a      	ldr	r2, [r3, #24]
 801815e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018160:	691b      	ldr	r3, [r3, #16]
 8018162:	429a      	cmp	r2, r3
 8018164:	d106      	bne.n	8018174 <ip4_reass+0xdc>
 8018166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018168:	899a      	ldrh	r2, [r3, #12]
 801816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801816c:	889b      	ldrh	r3, [r3, #4]
 801816e:	b29b      	uxth	r3, r3
 8018170:	429a      	cmp	r2, r3
 8018172:	d006      	beq.n	8018182 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	633b      	str	r3, [r7, #48]	; 0x30
 801817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801817c:	2b00      	cmp	r3, #0
 801817e:	d1e6      	bne.n	801814e <ip4_reass+0xb6>
 8018180:	e000      	b.n	8018184 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018182:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018186:	2b00      	cmp	r3, #0
 8018188:	d109      	bne.n	801819e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801818a:	8c3b      	ldrh	r3, [r7, #32]
 801818c:	4619      	mov	r1, r3
 801818e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018190:	f7ff fdb0 	bl	8017cf4 <ip_reass_enqueue_new_datagram>
 8018194:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018198:	2b00      	cmp	r3, #0
 801819a:	d11c      	bne.n	80181d6 <ip4_reass+0x13e>
      goto nullreturn;
 801819c:	e109      	b.n	80183b2 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801819e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a0:	88db      	ldrh	r3, [r3, #6]
 80181a2:	b29b      	uxth	r3, r3
 80181a4:	4618      	mov	r0, r3
 80181a6:	f7f4 ff2f 	bl	800d008 <lwip_htons>
 80181aa:	4603      	mov	r3, r0
 80181ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d110      	bne.n	80181d6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80181b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b6:	89db      	ldrh	r3, [r3, #14]
 80181b8:	4618      	mov	r0, r3
 80181ba:	f7f4 ff25 	bl	800d008 <lwip_htons>
 80181be:	4603      	mov	r3, r0
 80181c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80181c4:	2b00      	cmp	r3, #0
 80181c6:	d006      	beq.n	80181d6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80181c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181ca:	3308      	adds	r3, #8
 80181cc:	2214      	movs	r2, #20
 80181ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80181d0:	4618      	mov	r0, r3
 80181d2:	f000 fd5b 	bl	8018c8c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80181d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d8:	88db      	ldrh	r3, [r3, #6]
 80181da:	b29b      	uxth	r3, r3
 80181dc:	f003 0320 	and.w	r3, r3, #32
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	bf0c      	ite	eq
 80181e4:	2301      	moveq	r3, #1
 80181e6:	2300      	movne	r3, #0
 80181e8:	b2db      	uxtb	r3, r3
 80181ea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80181ec:	69fb      	ldr	r3, [r7, #28]
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d00e      	beq.n	8018210 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80181f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80181f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80181f6:	4413      	add	r3, r2
 80181f8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80181fa:	8b7a      	ldrh	r2, [r7, #26]
 80181fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80181fe:	429a      	cmp	r2, r3
 8018200:	f0c0 80a0 	bcc.w	8018344 <ip4_reass+0x2ac>
 8018204:	8b7b      	ldrh	r3, [r7, #26]
 8018206:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801820a:	4293      	cmp	r3, r2
 801820c:	f200 809a 	bhi.w	8018344 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018210:	69fa      	ldr	r2, [r7, #28]
 8018212:	6879      	ldr	r1, [r7, #4]
 8018214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018216:	f7ff fdd5 	bl	8017dc4 <ip_reass_chain_frag_into_datagram_and_validate>
 801821a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801821c:	697b      	ldr	r3, [r7, #20]
 801821e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018222:	f000 8091 	beq.w	8018348 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018226:	4b5b      	ldr	r3, [pc, #364]	; (8018394 <ip4_reass+0x2fc>)
 8018228:	881a      	ldrh	r2, [r3, #0]
 801822a:	8c3b      	ldrh	r3, [r7, #32]
 801822c:	4413      	add	r3, r2
 801822e:	b29a      	uxth	r2, r3
 8018230:	4b58      	ldr	r3, [pc, #352]	; (8018394 <ip4_reass+0x2fc>)
 8018232:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018234:	69fb      	ldr	r3, [r7, #28]
 8018236:	2b00      	cmp	r3, #0
 8018238:	d00d      	beq.n	8018256 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801823a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801823c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801823e:	4413      	add	r3, r2
 8018240:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018244:	8a7a      	ldrh	r2, [r7, #18]
 8018246:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801824a:	7f9b      	ldrb	r3, [r3, #30]
 801824c:	f043 0301 	orr.w	r3, r3, #1
 8018250:	b2da      	uxtb	r2, r3
 8018252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018254:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018256:	697b      	ldr	r3, [r7, #20]
 8018258:	2b01      	cmp	r3, #1
 801825a:	d171      	bne.n	8018340 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801825c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801825e:	8b9b      	ldrh	r3, [r3, #28]
 8018260:	3314      	adds	r3, #20
 8018262:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018266:	685b      	ldr	r3, [r3, #4]
 8018268:	685b      	ldr	r3, [r3, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801826e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018270:	685b      	ldr	r3, [r3, #4]
 8018272:	685b      	ldr	r3, [r3, #4]
 8018274:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018278:	3308      	adds	r3, #8
 801827a:	2214      	movs	r2, #20
 801827c:	4619      	mov	r1, r3
 801827e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018280:	f000 fd04 	bl	8018c8c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018284:	8a3b      	ldrh	r3, [r7, #16]
 8018286:	4618      	mov	r0, r3
 8018288:	f7f4 febe 	bl	800d008 <lwip_htons>
 801828c:	4603      	mov	r3, r0
 801828e:	461a      	mov	r2, r3
 8018290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018292:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018296:	2200      	movs	r2, #0
 8018298:	719a      	strb	r2, [r3, #6]
 801829a:	2200      	movs	r2, #0
 801829c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182a0:	2200      	movs	r2, #0
 80182a2:	729a      	strb	r2, [r3, #10]
 80182a4:	2200      	movs	r2, #0
 80182a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80182a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182aa:	685b      	ldr	r3, [r3, #4]
 80182ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80182ae:	e00d      	b.n	80182cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80182b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182b2:	685b      	ldr	r3, [r3, #4]
 80182b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80182b6:	2114      	movs	r1, #20
 80182b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80182ba:	f7f6 fc95 	bl	800ebe8 <pbuf_remove_header>
      pbuf_cat(p, r);
 80182be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80182c0:	6878      	ldr	r0, [r7, #4]
 80182c2:	f7f6 fe17 	bl	800eef4 <pbuf_cat>
      r = iprh->next_pbuf;
 80182c6:	68fb      	ldr	r3, [r7, #12]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80182cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d1ee      	bne.n	80182b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80182d2:	4b31      	ldr	r3, [pc, #196]	; (8018398 <ip4_reass+0x300>)
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182d8:	429a      	cmp	r2, r3
 80182da:	d102      	bne.n	80182e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80182dc:	2300      	movs	r3, #0
 80182de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80182e0:	e010      	b.n	8018304 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80182e2:	4b2d      	ldr	r3, [pc, #180]	; (8018398 <ip4_reass+0x300>)
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80182e8:	e007      	b.n	80182fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80182ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80182f0:	429a      	cmp	r2, r3
 80182f2:	d006      	beq.n	8018302 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80182f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182f6:	681b      	ldr	r3, [r3, #0]
 80182f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80182fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80182fc:	2b00      	cmp	r3, #0
 80182fe:	d1f4      	bne.n	80182ea <ip4_reass+0x252>
 8018300:	e000      	b.n	8018304 <ip4_reass+0x26c>
          break;
 8018302:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018306:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018308:	f7ff fd2e 	bl	8017d68 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801830c:	6878      	ldr	r0, [r7, #4]
 801830e:	f7f6 fdb1 	bl	800ee74 <pbuf_clen>
 8018312:	4603      	mov	r3, r0
 8018314:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018316:	4b1f      	ldr	r3, [pc, #124]	; (8018394 <ip4_reass+0x2fc>)
 8018318:	881b      	ldrh	r3, [r3, #0]
 801831a:	8c3a      	ldrh	r2, [r7, #32]
 801831c:	429a      	cmp	r2, r3
 801831e:	d906      	bls.n	801832e <ip4_reass+0x296>
 8018320:	4b1e      	ldr	r3, [pc, #120]	; (801839c <ip4_reass+0x304>)
 8018322:	f240 229b 	movw	r2, #667	; 0x29b
 8018326:	491e      	ldr	r1, [pc, #120]	; (80183a0 <ip4_reass+0x308>)
 8018328:	481e      	ldr	r0, [pc, #120]	; (80183a4 <ip4_reass+0x30c>)
 801832a:	f000 fd6f 	bl	8018e0c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801832e:	4b19      	ldr	r3, [pc, #100]	; (8018394 <ip4_reass+0x2fc>)
 8018330:	881a      	ldrh	r2, [r3, #0]
 8018332:	8c3b      	ldrh	r3, [r7, #32]
 8018334:	1ad3      	subs	r3, r2, r3
 8018336:	b29a      	uxth	r2, r3
 8018338:	4b16      	ldr	r3, [pc, #88]	; (8018394 <ip4_reass+0x2fc>)
 801833a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	e03c      	b.n	80183ba <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018340:	2300      	movs	r3, #0
 8018342:	e03a      	b.n	80183ba <ip4_reass+0x322>
      goto nullreturn_ipr;
 8018344:	bf00      	nop
 8018346:	e000      	b.n	801834a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8018348:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801834c:	2b00      	cmp	r3, #0
 801834e:	d106      	bne.n	801835e <ip4_reass+0x2c6>
 8018350:	4b12      	ldr	r3, [pc, #72]	; (801839c <ip4_reass+0x304>)
 8018352:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018356:	4914      	ldr	r1, [pc, #80]	; (80183a8 <ip4_reass+0x310>)
 8018358:	4812      	ldr	r0, [pc, #72]	; (80183a4 <ip4_reass+0x30c>)
 801835a:	f000 fd57 	bl	8018e0c <iprintf>
  if (ipr->p == NULL) {
 801835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018360:	685b      	ldr	r3, [r3, #4]
 8018362:	2b00      	cmp	r3, #0
 8018364:	d124      	bne.n	80183b0 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018366:	4b0c      	ldr	r3, [pc, #48]	; (8018398 <ip4_reass+0x300>)
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801836c:	429a      	cmp	r2, r3
 801836e:	d006      	beq.n	801837e <ip4_reass+0x2e6>
 8018370:	4b0a      	ldr	r3, [pc, #40]	; (801839c <ip4_reass+0x304>)
 8018372:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018376:	490d      	ldr	r1, [pc, #52]	; (80183ac <ip4_reass+0x314>)
 8018378:	480a      	ldr	r0, [pc, #40]	; (80183a4 <ip4_reass+0x30c>)
 801837a:	f000 fd47 	bl	8018e0c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801837e:	2100      	movs	r1, #0
 8018380:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018382:	f7ff fcf1 	bl	8017d68 <ip_reass_dequeue_datagram>
 8018386:	e014      	b.n	80183b2 <ip4_reass+0x31a>
    goto nullreturn;
 8018388:	bf00      	nop
 801838a:	e012      	b.n	80183b2 <ip4_reass+0x31a>
    goto nullreturn;
 801838c:	bf00      	nop
 801838e:	e010      	b.n	80183b2 <ip4_reass+0x31a>
      goto nullreturn;
 8018390:	bf00      	nop
 8018392:	e00e      	b.n	80183b2 <ip4_reass+0x31a>
 8018394:	20005014 	.word	0x20005014
 8018398:	20005010 	.word	0x20005010
 801839c:	0801d514 	.word	0x0801d514
 80183a0:	0801d684 	.word	0x0801d684
 80183a4:	0801d55c 	.word	0x0801d55c
 80183a8:	0801d6a0 	.word	0x0801d6a0
 80183ac:	0801d6ac 	.word	0x0801d6ac
  }

nullreturn:
 80183b0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80183b2:	6878      	ldr	r0, [r7, #4]
 80183b4:	f7f6 fcd0 	bl	800ed58 <pbuf_free>
  return NULL;
 80183b8:	2300      	movs	r3, #0
}
 80183ba:	4618      	mov	r0, r3
 80183bc:	3738      	adds	r7, #56	; 0x38
 80183be:	46bd      	mov	sp, r7
 80183c0:	bd80      	pop	{r7, pc}
 80183c2:	bf00      	nop

080183c4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80183c4:	b580      	push	{r7, lr}
 80183c6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80183c8:	2005      	movs	r0, #5
 80183ca:	f7f5 fd9d 	bl	800df08 <memp_malloc>
 80183ce:	4603      	mov	r3, r0
}
 80183d0:	4618      	mov	r0, r3
 80183d2:	bd80      	pop	{r7, pc}

080183d4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b082      	sub	sp, #8
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d106      	bne.n	80183f0 <ip_frag_free_pbuf_custom_ref+0x1c>
 80183e2:	4b07      	ldr	r3, [pc, #28]	; (8018400 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80183e4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80183e8:	4906      	ldr	r1, [pc, #24]	; (8018404 <ip_frag_free_pbuf_custom_ref+0x30>)
 80183ea:	4807      	ldr	r0, [pc, #28]	; (8018408 <ip_frag_free_pbuf_custom_ref+0x34>)
 80183ec:	f000 fd0e 	bl	8018e0c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80183f0:	6879      	ldr	r1, [r7, #4]
 80183f2:	2005      	movs	r0, #5
 80183f4:	f7f5 fdda 	bl	800dfac <memp_free>
}
 80183f8:	bf00      	nop
 80183fa:	3708      	adds	r7, #8
 80183fc:	46bd      	mov	sp, r7
 80183fe:	bd80      	pop	{r7, pc}
 8018400:	0801d514 	.word	0x0801d514
 8018404:	0801d6cc 	.word	0x0801d6cc
 8018408:	0801d55c 	.word	0x0801d55c

0801840c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b084      	sub	sp, #16
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d106      	bne.n	801842c <ipfrag_free_pbuf_custom+0x20>
 801841e:	4b11      	ldr	r3, [pc, #68]	; (8018464 <ipfrag_free_pbuf_custom+0x58>)
 8018420:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018424:	4910      	ldr	r1, [pc, #64]	; (8018468 <ipfrag_free_pbuf_custom+0x5c>)
 8018426:	4811      	ldr	r0, [pc, #68]	; (801846c <ipfrag_free_pbuf_custom+0x60>)
 8018428:	f000 fcf0 	bl	8018e0c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801842c:	68fa      	ldr	r2, [r7, #12]
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	429a      	cmp	r2, r3
 8018432:	d006      	beq.n	8018442 <ipfrag_free_pbuf_custom+0x36>
 8018434:	4b0b      	ldr	r3, [pc, #44]	; (8018464 <ipfrag_free_pbuf_custom+0x58>)
 8018436:	f240 22cf 	movw	r2, #719	; 0x2cf
 801843a:	490d      	ldr	r1, [pc, #52]	; (8018470 <ipfrag_free_pbuf_custom+0x64>)
 801843c:	480b      	ldr	r0, [pc, #44]	; (801846c <ipfrag_free_pbuf_custom+0x60>)
 801843e:	f000 fce5 	bl	8018e0c <iprintf>
  if (pcr->original != NULL) {
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	695b      	ldr	r3, [r3, #20]
 8018446:	2b00      	cmp	r3, #0
 8018448:	d004      	beq.n	8018454 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	695b      	ldr	r3, [r3, #20]
 801844e:	4618      	mov	r0, r3
 8018450:	f7f6 fc82 	bl	800ed58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018454:	68f8      	ldr	r0, [r7, #12]
 8018456:	f7ff ffbd 	bl	80183d4 <ip_frag_free_pbuf_custom_ref>
}
 801845a:	bf00      	nop
 801845c:	3710      	adds	r7, #16
 801845e:	46bd      	mov	sp, r7
 8018460:	bd80      	pop	{r7, pc}
 8018462:	bf00      	nop
 8018464:	0801d514 	.word	0x0801d514
 8018468:	0801d6d8 	.word	0x0801d6d8
 801846c:	0801d55c 	.word	0x0801d55c
 8018470:	0801d6e4 	.word	0x0801d6e4

08018474 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b094      	sub	sp, #80	; 0x50
 8018478:	af02      	add	r7, sp, #8
 801847a:	60f8      	str	r0, [r7, #12]
 801847c:	60b9      	str	r1, [r7, #8]
 801847e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018480:	2300      	movs	r3, #0
 8018482:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018486:	68bb      	ldr	r3, [r7, #8]
 8018488:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801848a:	3b14      	subs	r3, #20
 801848c:	2b00      	cmp	r3, #0
 801848e:	da00      	bge.n	8018492 <ip4_frag+0x1e>
 8018490:	3307      	adds	r3, #7
 8018492:	10db      	asrs	r3, r3, #3
 8018494:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018496:	2314      	movs	r3, #20
 8018498:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	685b      	ldr	r3, [r3, #4]
 801849e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80184a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184a2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80184a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a6:	781b      	ldrb	r3, [r3, #0]
 80184a8:	f003 030f 	and.w	r3, r3, #15
 80184ac:	b2db      	uxtb	r3, r3
 80184ae:	009b      	lsls	r3, r3, #2
 80184b0:	b2db      	uxtb	r3, r3
 80184b2:	2b14      	cmp	r3, #20
 80184b4:	d002      	beq.n	80184bc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80184b6:	f06f 0305 	mvn.w	r3, #5
 80184ba:	e110      	b.n	80186de <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	895b      	ldrh	r3, [r3, #10]
 80184c0:	2b13      	cmp	r3, #19
 80184c2:	d809      	bhi.n	80184d8 <ip4_frag+0x64>
 80184c4:	4b88      	ldr	r3, [pc, #544]	; (80186e8 <ip4_frag+0x274>)
 80184c6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80184ca:	4988      	ldr	r1, [pc, #544]	; (80186ec <ip4_frag+0x278>)
 80184cc:	4888      	ldr	r0, [pc, #544]	; (80186f0 <ip4_frag+0x27c>)
 80184ce:	f000 fc9d 	bl	8018e0c <iprintf>
 80184d2:	f06f 0305 	mvn.w	r3, #5
 80184d6:	e102      	b.n	80186de <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80184d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184da:	88db      	ldrh	r3, [r3, #6]
 80184dc:	b29b      	uxth	r3, r3
 80184de:	4618      	mov	r0, r3
 80184e0:	f7f4 fd92 	bl	800d008 <lwip_htons>
 80184e4:	4603      	mov	r3, r0
 80184e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80184e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80184ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80184ee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80184f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80184f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80184f8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80184fa:	68fb      	ldr	r3, [r7, #12]
 80184fc:	891b      	ldrh	r3, [r3, #8]
 80184fe:	3b14      	subs	r3, #20
 8018500:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018504:	e0e1      	b.n	80186ca <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018506:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018508:	00db      	lsls	r3, r3, #3
 801850a:	b29b      	uxth	r3, r3
 801850c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018510:	4293      	cmp	r3, r2
 8018512:	bf28      	it	cs
 8018514:	4613      	movcs	r3, r2
 8018516:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018518:	f44f 7220 	mov.w	r2, #640	; 0x280
 801851c:	2114      	movs	r1, #20
 801851e:	200e      	movs	r0, #14
 8018520:	f7f6 f904 	bl	800e72c <pbuf_alloc>
 8018524:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018528:	2b00      	cmp	r3, #0
 801852a:	f000 80d5 	beq.w	80186d8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018530:	895b      	ldrh	r3, [r3, #10]
 8018532:	2b13      	cmp	r3, #19
 8018534:	d806      	bhi.n	8018544 <ip4_frag+0xd0>
 8018536:	4b6c      	ldr	r3, [pc, #432]	; (80186e8 <ip4_frag+0x274>)
 8018538:	f44f 7249 	mov.w	r2, #804	; 0x324
 801853c:	496d      	ldr	r1, [pc, #436]	; (80186f4 <ip4_frag+0x280>)
 801853e:	486c      	ldr	r0, [pc, #432]	; (80186f0 <ip4_frag+0x27c>)
 8018540:	f000 fc64 	bl	8018e0c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018546:	685b      	ldr	r3, [r3, #4]
 8018548:	2214      	movs	r2, #20
 801854a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801854c:	4618      	mov	r0, r3
 801854e:	f000 fb9d 	bl	8018c8c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018554:	685b      	ldr	r3, [r3, #4]
 8018556:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018558:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801855a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801855e:	e064      	b.n	801862a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018560:	68fb      	ldr	r3, [r7, #12]
 8018562:	895a      	ldrh	r2, [r3, #10]
 8018564:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018566:	1ad3      	subs	r3, r2, r3
 8018568:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	895b      	ldrh	r3, [r3, #10]
 801856e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018570:	429a      	cmp	r2, r3
 8018572:	d906      	bls.n	8018582 <ip4_frag+0x10e>
 8018574:	4b5c      	ldr	r3, [pc, #368]	; (80186e8 <ip4_frag+0x274>)
 8018576:	f240 322d 	movw	r2, #813	; 0x32d
 801857a:	495f      	ldr	r1, [pc, #380]	; (80186f8 <ip4_frag+0x284>)
 801857c:	485c      	ldr	r0, [pc, #368]	; (80186f0 <ip4_frag+0x27c>)
 801857e:	f000 fc45 	bl	8018e0c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018582:	8bfa      	ldrh	r2, [r7, #30]
 8018584:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018588:	4293      	cmp	r3, r2
 801858a:	bf28      	it	cs
 801858c:	4613      	movcs	r3, r2
 801858e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018592:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018596:	2b00      	cmp	r3, #0
 8018598:	d105      	bne.n	80185a6 <ip4_frag+0x132>
        poff = 0;
 801859a:	2300      	movs	r3, #0
 801859c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	60fb      	str	r3, [r7, #12]
        continue;
 80185a4:	e041      	b.n	801862a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80185a6:	f7ff ff0d 	bl	80183c4 <ip_frag_alloc_pbuf_custom_ref>
 80185aa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80185ac:	69bb      	ldr	r3, [r7, #24]
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d103      	bne.n	80185ba <ip4_frag+0x146>
        pbuf_free(rambuf);
 80185b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185b4:	f7f6 fbd0 	bl	800ed58 <pbuf_free>
        goto memerr;
 80185b8:	e08f      	b.n	80186da <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80185ba:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80185c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80185c2:	4413      	add	r3, r2
 80185c4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80185c8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80185cc:	9201      	str	r2, [sp, #4]
 80185ce:	9300      	str	r3, [sp, #0]
 80185d0:	4603      	mov	r3, r0
 80185d2:	2241      	movs	r2, #65	; 0x41
 80185d4:	2000      	movs	r0, #0
 80185d6:	f7f6 f9d3 	bl	800e980 <pbuf_alloced_custom>
 80185da:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80185dc:	697b      	ldr	r3, [r7, #20]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d106      	bne.n	80185f0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80185e2:	69b8      	ldr	r0, [r7, #24]
 80185e4:	f7ff fef6 	bl	80183d4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80185e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80185ea:	f7f6 fbb5 	bl	800ed58 <pbuf_free>
        goto memerr;
 80185ee:	e074      	b.n	80186da <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80185f0:	68f8      	ldr	r0, [r7, #12]
 80185f2:	f7f6 fc57 	bl	800eea4 <pbuf_ref>
      pcr->original = p;
 80185f6:	69bb      	ldr	r3, [r7, #24]
 80185f8:	68fa      	ldr	r2, [r7, #12]
 80185fa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80185fc:	69bb      	ldr	r3, [r7, #24]
 80185fe:	4a3f      	ldr	r2, [pc, #252]	; (80186fc <ip4_frag+0x288>)
 8018600:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018602:	6979      	ldr	r1, [r7, #20]
 8018604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018606:	f7f6 fc75 	bl	800eef4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801860a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801860e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018612:	1ad3      	subs	r3, r2, r3
 8018614:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018618:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801861c:	2b00      	cmp	r3, #0
 801861e:	d004      	beq.n	801862a <ip4_frag+0x1b6>
        poff = 0;
 8018620:	2300      	movs	r3, #0
 8018622:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801862a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801862e:	2b00      	cmp	r3, #0
 8018630:	d196      	bne.n	8018560 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018632:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018634:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018638:	4413      	add	r3, r2
 801863a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801863c:	68bb      	ldr	r3, [r7, #8]
 801863e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018640:	f1a3 0213 	sub.w	r2, r3, #19
 8018644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018648:	429a      	cmp	r2, r3
 801864a:	bfcc      	ite	gt
 801864c:	2301      	movgt	r3, #1
 801864e:	2300      	movle	r3, #0
 8018650:	b2db      	uxtb	r3, r3
 8018652:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018654:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801865c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801865e:	6a3b      	ldr	r3, [r7, #32]
 8018660:	2b00      	cmp	r3, #0
 8018662:	d002      	beq.n	801866a <ip4_frag+0x1f6>
 8018664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018666:	2b00      	cmp	r3, #0
 8018668:	d003      	beq.n	8018672 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801866a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801866c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018670:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018672:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018674:	4618      	mov	r0, r3
 8018676:	f7f4 fcc7 	bl	800d008 <lwip_htons>
 801867a:	4603      	mov	r3, r0
 801867c:	461a      	mov	r2, r3
 801867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018680:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018682:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018684:	3314      	adds	r3, #20
 8018686:	b29b      	uxth	r3, r3
 8018688:	4618      	mov	r0, r3
 801868a:	f7f4 fcbd 	bl	800d008 <lwip_htons>
 801868e:	4603      	mov	r3, r0
 8018690:	461a      	mov	r2, r3
 8018692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018694:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018698:	2200      	movs	r2, #0
 801869a:	729a      	strb	r2, [r3, #10]
 801869c:	2200      	movs	r2, #0
 801869e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80186a0:	68bb      	ldr	r3, [r7, #8]
 80186a2:	695b      	ldr	r3, [r3, #20]
 80186a4:	687a      	ldr	r2, [r7, #4]
 80186a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80186a8:	68b8      	ldr	r0, [r7, #8]
 80186aa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80186ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80186ae:	f7f6 fb53 	bl	800ed58 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80186b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80186b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80186b8:	1ad3      	subs	r3, r2, r3
 80186ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80186be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80186c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80186c4:	4413      	add	r3, r2
 80186c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80186ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80186ce:	2b00      	cmp	r3, #0
 80186d0:	f47f af19 	bne.w	8018506 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80186d4:	2300      	movs	r3, #0
 80186d6:	e002      	b.n	80186de <ip4_frag+0x26a>
      goto memerr;
 80186d8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80186da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80186de:	4618      	mov	r0, r3
 80186e0:	3748      	adds	r7, #72	; 0x48
 80186e2:	46bd      	mov	sp, r7
 80186e4:	bd80      	pop	{r7, pc}
 80186e6:	bf00      	nop
 80186e8:	0801d514 	.word	0x0801d514
 80186ec:	0801d6f0 	.word	0x0801d6f0
 80186f0:	0801d55c 	.word	0x0801d55c
 80186f4:	0801d70c 	.word	0x0801d70c
 80186f8:	0801d72c 	.word	0x0801d72c
 80186fc:	0801840d 	.word	0x0801840d

08018700 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018700:	b580      	push	{r7, lr}
 8018702:	b086      	sub	sp, #24
 8018704:	af00      	add	r7, sp, #0
 8018706:	6078      	str	r0, [r7, #4]
 8018708:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801870a:	230e      	movs	r3, #14
 801870c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	895b      	ldrh	r3, [r3, #10]
 8018712:	2b0e      	cmp	r3, #14
 8018714:	d96e      	bls.n	80187f4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	7bdb      	ldrb	r3, [r3, #15]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d106      	bne.n	801872c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801871e:	683b      	ldr	r3, [r7, #0]
 8018720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018724:	3301      	adds	r3, #1
 8018726:	b2da      	uxtb	r2, r3
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	685b      	ldr	r3, [r3, #4]
 8018730:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018732:	693b      	ldr	r3, [r7, #16]
 8018734:	7b1a      	ldrb	r2, [r3, #12]
 8018736:	7b5b      	ldrb	r3, [r3, #13]
 8018738:	021b      	lsls	r3, r3, #8
 801873a:	4313      	orrs	r3, r2
 801873c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801873e:	693b      	ldr	r3, [r7, #16]
 8018740:	781b      	ldrb	r3, [r3, #0]
 8018742:	f003 0301 	and.w	r3, r3, #1
 8018746:	2b00      	cmp	r3, #0
 8018748:	d023      	beq.n	8018792 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801874a:	693b      	ldr	r3, [r7, #16]
 801874c:	781b      	ldrb	r3, [r3, #0]
 801874e:	2b01      	cmp	r3, #1
 8018750:	d10f      	bne.n	8018772 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018752:	693b      	ldr	r3, [r7, #16]
 8018754:	785b      	ldrb	r3, [r3, #1]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d11b      	bne.n	8018792 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801875a:	693b      	ldr	r3, [r7, #16]
 801875c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801875e:	2b5e      	cmp	r3, #94	; 0x5e
 8018760:	d117      	bne.n	8018792 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	7b5b      	ldrb	r3, [r3, #13]
 8018766:	f043 0310 	orr.w	r3, r3, #16
 801876a:	b2da      	uxtb	r2, r3
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	735a      	strb	r2, [r3, #13]
 8018770:	e00f      	b.n	8018792 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018772:	693b      	ldr	r3, [r7, #16]
 8018774:	2206      	movs	r2, #6
 8018776:	4928      	ldr	r1, [pc, #160]	; (8018818 <ethernet_input+0x118>)
 8018778:	4618      	mov	r0, r3
 801877a:	f000 fa79 	bl	8018c70 <memcmp>
 801877e:	4603      	mov	r3, r0
 8018780:	2b00      	cmp	r3, #0
 8018782:	d106      	bne.n	8018792 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	7b5b      	ldrb	r3, [r3, #13]
 8018788:	f043 0308 	orr.w	r3, r3, #8
 801878c:	b2da      	uxtb	r2, r3
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018792:	89fb      	ldrh	r3, [r7, #14]
 8018794:	2b08      	cmp	r3, #8
 8018796:	d003      	beq.n	80187a0 <ethernet_input+0xa0>
 8018798:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801879c:	d014      	beq.n	80187c8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801879e:	e032      	b.n	8018806 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80187a0:	683b      	ldr	r3, [r7, #0]
 80187a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80187a6:	f003 0308 	and.w	r3, r3, #8
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d024      	beq.n	80187f8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80187ae:	8afb      	ldrh	r3, [r7, #22]
 80187b0:	4619      	mov	r1, r3
 80187b2:	6878      	ldr	r0, [r7, #4]
 80187b4:	f7f6 fa18 	bl	800ebe8 <pbuf_remove_header>
 80187b8:	4603      	mov	r3, r0
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d11e      	bne.n	80187fc <ethernet_input+0xfc>
        ip4_input(p, netif);
 80187be:	6839      	ldr	r1, [r7, #0]
 80187c0:	6878      	ldr	r0, [r7, #4]
 80187c2:	f7fe ff27 	bl	8017614 <ip4_input>
      break;
 80187c6:	e013      	b.n	80187f0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80187c8:	683b      	ldr	r3, [r7, #0]
 80187ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80187ce:	f003 0308 	and.w	r3, r3, #8
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d014      	beq.n	8018800 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80187d6:	8afb      	ldrh	r3, [r7, #22]
 80187d8:	4619      	mov	r1, r3
 80187da:	6878      	ldr	r0, [r7, #4]
 80187dc:	f7f6 fa04 	bl	800ebe8 <pbuf_remove_header>
 80187e0:	4603      	mov	r3, r0
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d10e      	bne.n	8018804 <ethernet_input+0x104>
        etharp_input(p, netif);
 80187e6:	6839      	ldr	r1, [r7, #0]
 80187e8:	6878      	ldr	r0, [r7, #4]
 80187ea:	f7fe f8c7 	bl	801697c <etharp_input>
      break;
 80187ee:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80187f0:	2300      	movs	r3, #0
 80187f2:	e00c      	b.n	801880e <ethernet_input+0x10e>
    goto free_and_return;
 80187f4:	bf00      	nop
 80187f6:	e006      	b.n	8018806 <ethernet_input+0x106>
        goto free_and_return;
 80187f8:	bf00      	nop
 80187fa:	e004      	b.n	8018806 <ethernet_input+0x106>
        goto free_and_return;
 80187fc:	bf00      	nop
 80187fe:	e002      	b.n	8018806 <ethernet_input+0x106>
        goto free_and_return;
 8018800:	bf00      	nop
 8018802:	e000      	b.n	8018806 <ethernet_input+0x106>
        goto free_and_return;
 8018804:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018806:	6878      	ldr	r0, [r7, #4]
 8018808:	f7f6 faa6 	bl	800ed58 <pbuf_free>
  return ERR_OK;
 801880c:	2300      	movs	r3, #0
}
 801880e:	4618      	mov	r0, r3
 8018810:	3718      	adds	r7, #24
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}
 8018816:	bf00      	nop
 8018818:	0801dd80 	.word	0x0801dd80

0801881c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801881c:	b580      	push	{r7, lr}
 801881e:	b086      	sub	sp, #24
 8018820:	af00      	add	r7, sp, #0
 8018822:	60f8      	str	r0, [r7, #12]
 8018824:	60b9      	str	r1, [r7, #8]
 8018826:	607a      	str	r2, [r7, #4]
 8018828:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801882a:	8c3b      	ldrh	r3, [r7, #32]
 801882c:	4618      	mov	r0, r3
 801882e:	f7f4 fbeb 	bl	800d008 <lwip_htons>
 8018832:	4603      	mov	r3, r0
 8018834:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018836:	210e      	movs	r1, #14
 8018838:	68b8      	ldr	r0, [r7, #8]
 801883a:	f7f6 f9c5 	bl	800ebc8 <pbuf_add_header>
 801883e:	4603      	mov	r3, r0
 8018840:	2b00      	cmp	r3, #0
 8018842:	d125      	bne.n	8018890 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018844:	68bb      	ldr	r3, [r7, #8]
 8018846:	685b      	ldr	r3, [r3, #4]
 8018848:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801884a:	693b      	ldr	r3, [r7, #16]
 801884c:	8afa      	ldrh	r2, [r7, #22]
 801884e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018850:	693b      	ldr	r3, [r7, #16]
 8018852:	2206      	movs	r2, #6
 8018854:	6839      	ldr	r1, [r7, #0]
 8018856:	4618      	mov	r0, r3
 8018858:	f000 fa18 	bl	8018c8c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801885c:	693b      	ldr	r3, [r7, #16]
 801885e:	3306      	adds	r3, #6
 8018860:	2206      	movs	r2, #6
 8018862:	6879      	ldr	r1, [r7, #4]
 8018864:	4618      	mov	r0, r3
 8018866:	f000 fa11 	bl	8018c8c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018870:	2b06      	cmp	r3, #6
 8018872:	d006      	beq.n	8018882 <ethernet_output+0x66>
 8018874:	4b0a      	ldr	r3, [pc, #40]	; (80188a0 <ethernet_output+0x84>)
 8018876:	f44f 7299 	mov.w	r2, #306	; 0x132
 801887a:	490a      	ldr	r1, [pc, #40]	; (80188a4 <ethernet_output+0x88>)
 801887c:	480a      	ldr	r0, [pc, #40]	; (80188a8 <ethernet_output+0x8c>)
 801887e:	f000 fac5 	bl	8018e0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	699b      	ldr	r3, [r3, #24]
 8018886:	68b9      	ldr	r1, [r7, #8]
 8018888:	68f8      	ldr	r0, [r7, #12]
 801888a:	4798      	blx	r3
 801888c:	4603      	mov	r3, r0
 801888e:	e002      	b.n	8018896 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018890:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018892:	f06f 0301 	mvn.w	r3, #1
}
 8018896:	4618      	mov	r0, r3
 8018898:	3718      	adds	r7, #24
 801889a:	46bd      	mov	sp, r7
 801889c:	bd80      	pop	{r7, pc}
 801889e:	bf00      	nop
 80188a0:	0801d73c 	.word	0x0801d73c
 80188a4:	0801d774 	.word	0x0801d774
 80188a8:	0801d7a8 	.word	0x0801d7a8

080188ac <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b082      	sub	sp, #8
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
 80188b4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80188b6:	683b      	ldr	r3, [r7, #0]
 80188b8:	2200      	movs	r2, #0
 80188ba:	2104      	movs	r1, #4
 80188bc:	4618      	mov	r0, r3
 80188be:	f7ed f9f5 	bl	8005cac <osMessageQueueNew>
 80188c2:	4602      	mov	r2, r0
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d102      	bne.n	80188d6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80188d0:	f04f 33ff 	mov.w	r3, #4294967295
 80188d4:	e000      	b.n	80188d8 <sys_mbox_new+0x2c>

  return ERR_OK;
 80188d6:	2300      	movs	r3, #0
}
 80188d8:	4618      	mov	r0, r3
 80188da:	3708      	adds	r7, #8
 80188dc:	46bd      	mov	sp, r7
 80188de:	bd80      	pop	{r7, pc}

080188e0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80188e0:	b580      	push	{r7, lr}
 80188e2:	b082      	sub	sp, #8
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	4618      	mov	r0, r3
 80188ee:	f7ed fb0f 	bl	8005f10 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	4618      	mov	r0, r3
 80188f8:	f7ed fb2a 	bl	8005f50 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80188fc:	bf00      	nop
 80188fe:	3708      	adds	r7, #8
 8018900:	46bd      	mov	sp, r7
 8018902:	bd80      	pop	{r7, pc}

08018904 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b084      	sub	sp, #16
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]
 801890c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	6818      	ldr	r0, [r3, #0]
 8018912:	4639      	mov	r1, r7
 8018914:	2300      	movs	r3, #0
 8018916:	2200      	movs	r2, #0
 8018918:	f7ed fa3c 	bl	8005d94 <osMessageQueuePut>
 801891c:	4603      	mov	r3, r0
 801891e:	2b00      	cmp	r3, #0
 8018920:	d102      	bne.n	8018928 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8018922:	2300      	movs	r3, #0
 8018924:	73fb      	strb	r3, [r7, #15]
 8018926:	e001      	b.n	801892c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018928:	23ff      	movs	r3, #255	; 0xff
 801892a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801892c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018930:	4618      	mov	r0, r3
 8018932:	3710      	adds	r7, #16
 8018934:	46bd      	mov	sp, r7
 8018936:	bd80      	pop	{r7, pc}

08018938 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018938:	b580      	push	{r7, lr}
 801893a:	b086      	sub	sp, #24
 801893c:	af00      	add	r7, sp, #0
 801893e:	60f8      	str	r0, [r7, #12]
 8018940:	60b9      	str	r1, [r7, #8]
 8018942:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8018944:	f7ec fe72 	bl	800562c <osKernelGetTickCount>
 8018948:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d013      	beq.n	8018978 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	6818      	ldr	r0, [r3, #0]
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	2200      	movs	r2, #0
 8018958:	68b9      	ldr	r1, [r7, #8]
 801895a:	f7ed fa7b 	bl	8005e54 <osMessageQueueGet>
 801895e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8018960:	693b      	ldr	r3, [r7, #16]
 8018962:	2b00      	cmp	r3, #0
 8018964:	d105      	bne.n	8018972 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8018966:	f7ec fe61 	bl	800562c <osKernelGetTickCount>
 801896a:	4602      	mov	r2, r0
 801896c:	697b      	ldr	r3, [r7, #20]
 801896e:	1ad3      	subs	r3, r2, r3
 8018970:	e00f      	b.n	8018992 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018972:	f04f 33ff 	mov.w	r3, #4294967295
 8018976:	e00c      	b.n	8018992 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8018978:	68fb      	ldr	r3, [r7, #12]
 801897a:	6818      	ldr	r0, [r3, #0]
 801897c:	f04f 33ff 	mov.w	r3, #4294967295
 8018980:	2200      	movs	r2, #0
 8018982:	68b9      	ldr	r1, [r7, #8]
 8018984:	f7ed fa66 	bl	8005e54 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018988:	f7ec fe50 	bl	800562c <osKernelGetTickCount>
 801898c:	4602      	mov	r2, r0
 801898e:	697b      	ldr	r3, [r7, #20]
 8018990:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018992:	4618      	mov	r0, r3
 8018994:	3718      	adds	r7, #24
 8018996:	46bd      	mov	sp, r7
 8018998:	bd80      	pop	{r7, pc}

0801899a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801899a:	b580      	push	{r7, lr}
 801899c:	b082      	sub	sp, #8
 801899e:	af00      	add	r7, sp, #0
 80189a0:	6078      	str	r0, [r7, #4]
 80189a2:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	6818      	ldr	r0, [r3, #0]
 80189a8:	2300      	movs	r3, #0
 80189aa:	2200      	movs	r2, #0
 80189ac:	6839      	ldr	r1, [r7, #0]
 80189ae:	f7ed fa51 	bl	8005e54 <osMessageQueueGet>
 80189b2:	4603      	mov	r3, r0
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d101      	bne.n	80189bc <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80189b8:	2300      	movs	r3, #0
 80189ba:	e001      	b.n	80189c0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80189bc:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80189c0:	4618      	mov	r0, r3
 80189c2:	3708      	adds	r7, #8
 80189c4:	46bd      	mov	sp, r7
 80189c6:	bd80      	pop	{r7, pc}

080189c8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80189c8:	b480      	push	{r7}
 80189ca:	b083      	sub	sp, #12
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d101      	bne.n	80189dc <sys_mbox_valid+0x14>
    return 0;
 80189d8:	2300      	movs	r3, #0
 80189da:	e000      	b.n	80189de <sys_mbox_valid+0x16>
  else
    return 1;
 80189dc:	2301      	movs	r3, #1
}
 80189de:	4618      	mov	r0, r3
 80189e0:	370c      	adds	r7, #12
 80189e2:	46bd      	mov	sp, r7
 80189e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189e8:	4770      	bx	lr

080189ea <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80189ea:	b480      	push	{r7}
 80189ec:	b083      	sub	sp, #12
 80189ee:	af00      	add	r7, sp, #0
 80189f0:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	2200      	movs	r2, #0
 80189f6:	601a      	str	r2, [r3, #0]
}
 80189f8:	bf00      	nop
 80189fa:	370c      	adds	r7, #12
 80189fc:	46bd      	mov	sp, r7
 80189fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a02:	4770      	bx	lr

08018a04 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b082      	sub	sp, #8
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	6078      	str	r0, [r7, #4]
 8018a0c:	460b      	mov	r3, r1
 8018a0e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8018a10:	78fb      	ldrb	r3, [r7, #3]
 8018a12:	2200      	movs	r2, #0
 8018a14:	4619      	mov	r1, r3
 8018a16:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018a1a:	f7ed f804 	bl	8005a26 <osSemaphoreNew>
 8018a1e:	4602      	mov	r2, r0
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d102      	bne.n	8018a32 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018a2c:	f04f 33ff 	mov.w	r3, #4294967295
 8018a30:	e009      	b.n	8018a46 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8018a32:	78fb      	ldrb	r3, [r7, #3]
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d105      	bne.n	8018a44 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2100      	movs	r1, #0
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f7ed f87a 	bl	8005b38 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018a44:	2300      	movs	r3, #0
}
 8018a46:	4618      	mov	r0, r3
 8018a48:	3708      	adds	r7, #8
 8018a4a:	46bd      	mov	sp, r7
 8018a4c:	bd80      	pop	{r7, pc}

08018a4e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018a4e:	b580      	push	{r7, lr}
 8018a50:	b084      	sub	sp, #16
 8018a52:	af00      	add	r7, sp, #0
 8018a54:	6078      	str	r0, [r7, #4]
 8018a56:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8018a58:	f7ec fde8 	bl	800562c <osKernelGetTickCount>
 8018a5c:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8018a5e:	683b      	ldr	r3, [r7, #0]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d011      	beq.n	8018a88 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	6839      	ldr	r1, [r7, #0]
 8018a6a:	4618      	mov	r0, r3
 8018a6c:	f7ed f864 	bl	8005b38 <osSemaphoreAcquire>
 8018a70:	4603      	mov	r3, r0
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	d105      	bne.n	8018a82 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8018a76:	f7ec fdd9 	bl	800562c <osKernelGetTickCount>
 8018a7a:	4602      	mov	r2, r0
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	1ad3      	subs	r3, r2, r3
 8018a80:	e012      	b.n	8018aa8 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018a82:	f04f 33ff 	mov.w	r3, #4294967295
 8018a86:	e00f      	b.n	8018aa8 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8018a88:	bf00      	nop
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	681b      	ldr	r3, [r3, #0]
 8018a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8018a92:	4618      	mov	r0, r3
 8018a94:	f7ed f850 	bl	8005b38 <osSemaphoreAcquire>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d1f5      	bne.n	8018a8a <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8018a9e:	f7ec fdc5 	bl	800562c <osKernelGetTickCount>
 8018aa2:	4602      	mov	r2, r0
 8018aa4:	68fb      	ldr	r3, [r7, #12]
 8018aa6:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3710      	adds	r7, #16
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}

08018ab0 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b082      	sub	sp, #8
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	4618      	mov	r0, r3
 8018abe:	f7ed f88d 	bl	8005bdc <osSemaphoreRelease>
}
 8018ac2:	bf00      	nop
 8018ac4:	3708      	adds	r7, #8
 8018ac6:	46bd      	mov	sp, r7
 8018ac8:	bd80      	pop	{r7, pc}

08018aca <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018aca:	b580      	push	{r7, lr}
 8018acc:	b082      	sub	sp, #8
 8018ace:	af00      	add	r7, sp, #0
 8018ad0:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f7ed f8c4 	bl	8005c64 <osSemaphoreDelete>
}
 8018adc:	bf00      	nop
 8018ade:	3708      	adds	r7, #8
 8018ae0:	46bd      	mov	sp, r7
 8018ae2:	bd80      	pop	{r7, pc}

08018ae4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018ae4:	b480      	push	{r7}
 8018ae6:	b083      	sub	sp, #12
 8018ae8:	af00      	add	r7, sp, #0
 8018aea:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	681b      	ldr	r3, [r3, #0]
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d101      	bne.n	8018af8 <sys_sem_valid+0x14>
    return 0;
 8018af4:	2300      	movs	r3, #0
 8018af6:	e000      	b.n	8018afa <sys_sem_valid+0x16>
  else
    return 1;
 8018af8:	2301      	movs	r3, #1
}
 8018afa:	4618      	mov	r0, r3
 8018afc:	370c      	adds	r7, #12
 8018afe:	46bd      	mov	sp, r7
 8018b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b04:	4770      	bx	lr

08018b06 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018b06:	b480      	push	{r7}
 8018b08:	b083      	sub	sp, #12
 8018b0a:	af00      	add	r7, sp, #0
 8018b0c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	2200      	movs	r2, #0
 8018b12:	601a      	str	r2, [r3, #0]
}
 8018b14:	bf00      	nop
 8018b16:	370c      	adds	r7, #12
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1e:	4770      	bx	lr

08018b20 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018b20:	b580      	push	{r7, lr}
 8018b22:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8018b24:	2000      	movs	r0, #0
 8018b26:	f7ec fe70 	bl	800580a <osMutexNew>
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	4a01      	ldr	r2, [pc, #4]	; (8018b34 <sys_init+0x14>)
 8018b2e:	6013      	str	r3, [r2, #0]
#endif
}
 8018b30:	bf00      	nop
 8018b32:	bd80      	pop	{r7, pc}
 8018b34:	2000bcc8 	.word	0x2000bcc8

08018b38 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018b38:	b580      	push	{r7, lr}
 8018b3a:	b082      	sub	sp, #8
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8018b40:	2000      	movs	r0, #0
 8018b42:	f7ec fe62 	bl	800580a <osMutexNew>
 8018b46:	4602      	mov	r2, r0
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d102      	bne.n	8018b5a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018b54:	f04f 33ff 	mov.w	r3, #4294967295
 8018b58:	e000      	b.n	8018b5c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018b5a:	2300      	movs	r3, #0
}
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	3708      	adds	r7, #8
 8018b60:	46bd      	mov	sp, r7
 8018b62:	bd80      	pop	{r7, pc}

08018b64 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018b64:	b580      	push	{r7, lr}
 8018b66:	b082      	sub	sp, #8
 8018b68:	af00      	add	r7, sp, #0
 8018b6a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	681b      	ldr	r3, [r3, #0]
 8018b70:	f04f 31ff 	mov.w	r1, #4294967295
 8018b74:	4618      	mov	r0, r3
 8018b76:	f7ec fece 	bl	8005916 <osMutexAcquire>
#endif
}
 8018b7a:	bf00      	nop
 8018b7c:	3708      	adds	r7, #8
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	bd80      	pop	{r7, pc}

08018b82 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018b82:	b580      	push	{r7, lr}
 8018b84:	b082      	sub	sp, #8
 8018b86:	af00      	add	r7, sp, #0
 8018b88:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	4618      	mov	r0, r3
 8018b90:	f7ec ff0c 	bl	80059ac <osMutexRelease>
}
 8018b94:	bf00      	nop
 8018b96:	3708      	adds	r7, #8
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}

08018b9c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018b9c:	b580      	push	{r7, lr}
 8018b9e:	b08e      	sub	sp, #56	; 0x38
 8018ba0:	af00      	add	r7, sp, #0
 8018ba2:	60f8      	str	r0, [r7, #12]
 8018ba4:	60b9      	str	r1, [r7, #8]
 8018ba6:	607a      	str	r2, [r7, #4]
 8018ba8:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8018baa:	f107 0314 	add.w	r3, r7, #20
 8018bae:	2224      	movs	r2, #36	; 0x24
 8018bb0:	2100      	movs	r1, #0
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	f000 f878 	bl	8018ca8 <memset>
 8018bb8:	68fb      	ldr	r3, [r7, #12]
 8018bba:	617b      	str	r3, [r7, #20]
 8018bbc:	683b      	ldr	r3, [r7, #0]
 8018bbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8018bc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018bc4:	f107 0314 	add.w	r3, r7, #20
 8018bc8:	461a      	mov	r2, r3
 8018bca:	6879      	ldr	r1, [r7, #4]
 8018bcc:	68b8      	ldr	r0, [r7, #8]
 8018bce:	f7ec fd42 	bl	8005656 <osThreadNew>
 8018bd2:	4603      	mov	r3, r0
#endif
}
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	3738      	adds	r7, #56	; 0x38
 8018bd8:	46bd      	mov	sp, r7
 8018bda:	bd80      	pop	{r7, pc}

08018bdc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018be0:	4b04      	ldr	r3, [pc, #16]	; (8018bf4 <sys_arch_protect+0x18>)
 8018be2:	681b      	ldr	r3, [r3, #0]
 8018be4:	f04f 31ff 	mov.w	r1, #4294967295
 8018be8:	4618      	mov	r0, r3
 8018bea:	f7ec fe94 	bl	8005916 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8018bee:	2301      	movs	r3, #1
}
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	bd80      	pop	{r7, pc}
 8018bf4:	2000bcc8 	.word	0x2000bcc8

08018bf8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018bf8:	b580      	push	{r7, lr}
 8018bfa:	b082      	sub	sp, #8
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018c00:	4b04      	ldr	r3, [pc, #16]	; (8018c14 <sys_arch_unprotect+0x1c>)
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	4618      	mov	r0, r3
 8018c06:	f7ec fed1 	bl	80059ac <osMutexRelease>
}
 8018c0a:	bf00      	nop
 8018c0c:	3708      	adds	r7, #8
 8018c0e:	46bd      	mov	sp, r7
 8018c10:	bd80      	pop	{r7, pc}
 8018c12:	bf00      	nop
 8018c14:	2000bcc8 	.word	0x2000bcc8

08018c18 <__libc_init_array>:
 8018c18:	b570      	push	{r4, r5, r6, lr}
 8018c1a:	4d0d      	ldr	r5, [pc, #52]	; (8018c50 <__libc_init_array+0x38>)
 8018c1c:	4c0d      	ldr	r4, [pc, #52]	; (8018c54 <__libc_init_array+0x3c>)
 8018c1e:	1b64      	subs	r4, r4, r5
 8018c20:	10a4      	asrs	r4, r4, #2
 8018c22:	2600      	movs	r6, #0
 8018c24:	42a6      	cmp	r6, r4
 8018c26:	d109      	bne.n	8018c3c <__libc_init_array+0x24>
 8018c28:	4d0b      	ldr	r5, [pc, #44]	; (8018c58 <__libc_init_array+0x40>)
 8018c2a:	4c0c      	ldr	r4, [pc, #48]	; (8018c5c <__libc_init_array+0x44>)
 8018c2c:	f001 f88c 	bl	8019d48 <_init>
 8018c30:	1b64      	subs	r4, r4, r5
 8018c32:	10a4      	asrs	r4, r4, #2
 8018c34:	2600      	movs	r6, #0
 8018c36:	42a6      	cmp	r6, r4
 8018c38:	d105      	bne.n	8018c46 <__libc_init_array+0x2e>
 8018c3a:	bd70      	pop	{r4, r5, r6, pc}
 8018c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c40:	4798      	blx	r3
 8018c42:	3601      	adds	r6, #1
 8018c44:	e7ee      	b.n	8018c24 <__libc_init_array+0xc>
 8018c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8018c4a:	4798      	blx	r3
 8018c4c:	3601      	adds	r6, #1
 8018c4e:	e7f2      	b.n	8018c36 <__libc_init_array+0x1e>
 8018c50:	0801dee4 	.word	0x0801dee4
 8018c54:	0801dee4 	.word	0x0801dee4
 8018c58:	0801dee4 	.word	0x0801dee4
 8018c5c:	0801dee8 	.word	0x0801dee8

08018c60 <malloc>:
 8018c60:	4b02      	ldr	r3, [pc, #8]	; (8018c6c <malloc+0xc>)
 8018c62:	4601      	mov	r1, r0
 8018c64:	6818      	ldr	r0, [r3, #0]
 8018c66:	f000 b877 	b.w	8018d58 <_malloc_r>
 8018c6a:	bf00      	nop
 8018c6c:	2000001c 	.word	0x2000001c

08018c70 <memcmp>:
 8018c70:	b530      	push	{r4, r5, lr}
 8018c72:	3901      	subs	r1, #1
 8018c74:	2400      	movs	r4, #0
 8018c76:	42a2      	cmp	r2, r4
 8018c78:	d101      	bne.n	8018c7e <memcmp+0xe>
 8018c7a:	2000      	movs	r0, #0
 8018c7c:	e005      	b.n	8018c8a <memcmp+0x1a>
 8018c7e:	5d03      	ldrb	r3, [r0, r4]
 8018c80:	3401      	adds	r4, #1
 8018c82:	5d0d      	ldrb	r5, [r1, r4]
 8018c84:	42ab      	cmp	r3, r5
 8018c86:	d0f6      	beq.n	8018c76 <memcmp+0x6>
 8018c88:	1b58      	subs	r0, r3, r5
 8018c8a:	bd30      	pop	{r4, r5, pc}

08018c8c <memcpy>:
 8018c8c:	440a      	add	r2, r1
 8018c8e:	4291      	cmp	r1, r2
 8018c90:	f100 33ff 	add.w	r3, r0, #4294967295
 8018c94:	d100      	bne.n	8018c98 <memcpy+0xc>
 8018c96:	4770      	bx	lr
 8018c98:	b510      	push	{r4, lr}
 8018c9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018c9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018ca2:	4291      	cmp	r1, r2
 8018ca4:	d1f9      	bne.n	8018c9a <memcpy+0xe>
 8018ca6:	bd10      	pop	{r4, pc}

08018ca8 <memset>:
 8018ca8:	4402      	add	r2, r0
 8018caa:	4603      	mov	r3, r0
 8018cac:	4293      	cmp	r3, r2
 8018cae:	d100      	bne.n	8018cb2 <memset+0xa>
 8018cb0:	4770      	bx	lr
 8018cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8018cb6:	e7f9      	b.n	8018cac <memset+0x4>

08018cb8 <_free_r>:
 8018cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018cba:	2900      	cmp	r1, #0
 8018cbc:	d048      	beq.n	8018d50 <_free_r+0x98>
 8018cbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cc2:	9001      	str	r0, [sp, #4]
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	f1a1 0404 	sub.w	r4, r1, #4
 8018cca:	bfb8      	it	lt
 8018ccc:	18e4      	addlt	r4, r4, r3
 8018cce:	f000 fa35 	bl	801913c <__malloc_lock>
 8018cd2:	4a20      	ldr	r2, [pc, #128]	; (8018d54 <_free_r+0x9c>)
 8018cd4:	9801      	ldr	r0, [sp, #4]
 8018cd6:	6813      	ldr	r3, [r2, #0]
 8018cd8:	4615      	mov	r5, r2
 8018cda:	b933      	cbnz	r3, 8018cea <_free_r+0x32>
 8018cdc:	6063      	str	r3, [r4, #4]
 8018cde:	6014      	str	r4, [r2, #0]
 8018ce0:	b003      	add	sp, #12
 8018ce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018ce6:	f000 ba2f 	b.w	8019148 <__malloc_unlock>
 8018cea:	42a3      	cmp	r3, r4
 8018cec:	d90b      	bls.n	8018d06 <_free_r+0x4e>
 8018cee:	6821      	ldr	r1, [r4, #0]
 8018cf0:	1862      	adds	r2, r4, r1
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	bf04      	itt	eq
 8018cf6:	681a      	ldreq	r2, [r3, #0]
 8018cf8:	685b      	ldreq	r3, [r3, #4]
 8018cfa:	6063      	str	r3, [r4, #4]
 8018cfc:	bf04      	itt	eq
 8018cfe:	1852      	addeq	r2, r2, r1
 8018d00:	6022      	streq	r2, [r4, #0]
 8018d02:	602c      	str	r4, [r5, #0]
 8018d04:	e7ec      	b.n	8018ce0 <_free_r+0x28>
 8018d06:	461a      	mov	r2, r3
 8018d08:	685b      	ldr	r3, [r3, #4]
 8018d0a:	b10b      	cbz	r3, 8018d10 <_free_r+0x58>
 8018d0c:	42a3      	cmp	r3, r4
 8018d0e:	d9fa      	bls.n	8018d06 <_free_r+0x4e>
 8018d10:	6811      	ldr	r1, [r2, #0]
 8018d12:	1855      	adds	r5, r2, r1
 8018d14:	42a5      	cmp	r5, r4
 8018d16:	d10b      	bne.n	8018d30 <_free_r+0x78>
 8018d18:	6824      	ldr	r4, [r4, #0]
 8018d1a:	4421      	add	r1, r4
 8018d1c:	1854      	adds	r4, r2, r1
 8018d1e:	42a3      	cmp	r3, r4
 8018d20:	6011      	str	r1, [r2, #0]
 8018d22:	d1dd      	bne.n	8018ce0 <_free_r+0x28>
 8018d24:	681c      	ldr	r4, [r3, #0]
 8018d26:	685b      	ldr	r3, [r3, #4]
 8018d28:	6053      	str	r3, [r2, #4]
 8018d2a:	4421      	add	r1, r4
 8018d2c:	6011      	str	r1, [r2, #0]
 8018d2e:	e7d7      	b.n	8018ce0 <_free_r+0x28>
 8018d30:	d902      	bls.n	8018d38 <_free_r+0x80>
 8018d32:	230c      	movs	r3, #12
 8018d34:	6003      	str	r3, [r0, #0]
 8018d36:	e7d3      	b.n	8018ce0 <_free_r+0x28>
 8018d38:	6825      	ldr	r5, [r4, #0]
 8018d3a:	1961      	adds	r1, r4, r5
 8018d3c:	428b      	cmp	r3, r1
 8018d3e:	bf04      	itt	eq
 8018d40:	6819      	ldreq	r1, [r3, #0]
 8018d42:	685b      	ldreq	r3, [r3, #4]
 8018d44:	6063      	str	r3, [r4, #4]
 8018d46:	bf04      	itt	eq
 8018d48:	1949      	addeq	r1, r1, r5
 8018d4a:	6021      	streq	r1, [r4, #0]
 8018d4c:	6054      	str	r4, [r2, #4]
 8018d4e:	e7c7      	b.n	8018ce0 <_free_r+0x28>
 8018d50:	b003      	add	sp, #12
 8018d52:	bd30      	pop	{r4, r5, pc}
 8018d54:	20005018 	.word	0x20005018

08018d58 <_malloc_r>:
 8018d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d5a:	1ccd      	adds	r5, r1, #3
 8018d5c:	f025 0503 	bic.w	r5, r5, #3
 8018d60:	3508      	adds	r5, #8
 8018d62:	2d0c      	cmp	r5, #12
 8018d64:	bf38      	it	cc
 8018d66:	250c      	movcc	r5, #12
 8018d68:	2d00      	cmp	r5, #0
 8018d6a:	4606      	mov	r6, r0
 8018d6c:	db01      	blt.n	8018d72 <_malloc_r+0x1a>
 8018d6e:	42a9      	cmp	r1, r5
 8018d70:	d903      	bls.n	8018d7a <_malloc_r+0x22>
 8018d72:	230c      	movs	r3, #12
 8018d74:	6033      	str	r3, [r6, #0]
 8018d76:	2000      	movs	r0, #0
 8018d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d7a:	f000 f9df 	bl	801913c <__malloc_lock>
 8018d7e:	4921      	ldr	r1, [pc, #132]	; (8018e04 <_malloc_r+0xac>)
 8018d80:	680a      	ldr	r2, [r1, #0]
 8018d82:	4614      	mov	r4, r2
 8018d84:	b99c      	cbnz	r4, 8018dae <_malloc_r+0x56>
 8018d86:	4f20      	ldr	r7, [pc, #128]	; (8018e08 <_malloc_r+0xb0>)
 8018d88:	683b      	ldr	r3, [r7, #0]
 8018d8a:	b923      	cbnz	r3, 8018d96 <_malloc_r+0x3e>
 8018d8c:	4621      	mov	r1, r4
 8018d8e:	4630      	mov	r0, r6
 8018d90:	f000 f89c 	bl	8018ecc <_sbrk_r>
 8018d94:	6038      	str	r0, [r7, #0]
 8018d96:	4629      	mov	r1, r5
 8018d98:	4630      	mov	r0, r6
 8018d9a:	f000 f897 	bl	8018ecc <_sbrk_r>
 8018d9e:	1c43      	adds	r3, r0, #1
 8018da0:	d123      	bne.n	8018dea <_malloc_r+0x92>
 8018da2:	230c      	movs	r3, #12
 8018da4:	6033      	str	r3, [r6, #0]
 8018da6:	4630      	mov	r0, r6
 8018da8:	f000 f9ce 	bl	8019148 <__malloc_unlock>
 8018dac:	e7e3      	b.n	8018d76 <_malloc_r+0x1e>
 8018dae:	6823      	ldr	r3, [r4, #0]
 8018db0:	1b5b      	subs	r3, r3, r5
 8018db2:	d417      	bmi.n	8018de4 <_malloc_r+0x8c>
 8018db4:	2b0b      	cmp	r3, #11
 8018db6:	d903      	bls.n	8018dc0 <_malloc_r+0x68>
 8018db8:	6023      	str	r3, [r4, #0]
 8018dba:	441c      	add	r4, r3
 8018dbc:	6025      	str	r5, [r4, #0]
 8018dbe:	e004      	b.n	8018dca <_malloc_r+0x72>
 8018dc0:	6863      	ldr	r3, [r4, #4]
 8018dc2:	42a2      	cmp	r2, r4
 8018dc4:	bf0c      	ite	eq
 8018dc6:	600b      	streq	r3, [r1, #0]
 8018dc8:	6053      	strne	r3, [r2, #4]
 8018dca:	4630      	mov	r0, r6
 8018dcc:	f000 f9bc 	bl	8019148 <__malloc_unlock>
 8018dd0:	f104 000b 	add.w	r0, r4, #11
 8018dd4:	1d23      	adds	r3, r4, #4
 8018dd6:	f020 0007 	bic.w	r0, r0, #7
 8018dda:	1ac2      	subs	r2, r0, r3
 8018ddc:	d0cc      	beq.n	8018d78 <_malloc_r+0x20>
 8018dde:	1a1b      	subs	r3, r3, r0
 8018de0:	50a3      	str	r3, [r4, r2]
 8018de2:	e7c9      	b.n	8018d78 <_malloc_r+0x20>
 8018de4:	4622      	mov	r2, r4
 8018de6:	6864      	ldr	r4, [r4, #4]
 8018de8:	e7cc      	b.n	8018d84 <_malloc_r+0x2c>
 8018dea:	1cc4      	adds	r4, r0, #3
 8018dec:	f024 0403 	bic.w	r4, r4, #3
 8018df0:	42a0      	cmp	r0, r4
 8018df2:	d0e3      	beq.n	8018dbc <_malloc_r+0x64>
 8018df4:	1a21      	subs	r1, r4, r0
 8018df6:	4630      	mov	r0, r6
 8018df8:	f000 f868 	bl	8018ecc <_sbrk_r>
 8018dfc:	3001      	adds	r0, #1
 8018dfe:	d1dd      	bne.n	8018dbc <_malloc_r+0x64>
 8018e00:	e7cf      	b.n	8018da2 <_malloc_r+0x4a>
 8018e02:	bf00      	nop
 8018e04:	20005018 	.word	0x20005018
 8018e08:	2000501c 	.word	0x2000501c

08018e0c <iprintf>:
 8018e0c:	b40f      	push	{r0, r1, r2, r3}
 8018e0e:	4b0a      	ldr	r3, [pc, #40]	; (8018e38 <iprintf+0x2c>)
 8018e10:	b513      	push	{r0, r1, r4, lr}
 8018e12:	681c      	ldr	r4, [r3, #0]
 8018e14:	b124      	cbz	r4, 8018e20 <iprintf+0x14>
 8018e16:	69a3      	ldr	r3, [r4, #24]
 8018e18:	b913      	cbnz	r3, 8018e20 <iprintf+0x14>
 8018e1a:	4620      	mov	r0, r4
 8018e1c:	f000 f8dc 	bl	8018fd8 <__sinit>
 8018e20:	ab05      	add	r3, sp, #20
 8018e22:	9a04      	ldr	r2, [sp, #16]
 8018e24:	68a1      	ldr	r1, [r4, #8]
 8018e26:	9301      	str	r3, [sp, #4]
 8018e28:	4620      	mov	r0, r4
 8018e2a:	f000 f9e3 	bl	80191f4 <_vfiprintf_r>
 8018e2e:	b002      	add	sp, #8
 8018e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e34:	b004      	add	sp, #16
 8018e36:	4770      	bx	lr
 8018e38:	2000001c 	.word	0x2000001c

08018e3c <rand>:
 8018e3c:	4b17      	ldr	r3, [pc, #92]	; (8018e9c <rand+0x60>)
 8018e3e:	b510      	push	{r4, lr}
 8018e40:	681c      	ldr	r4, [r3, #0]
 8018e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018e44:	b9b3      	cbnz	r3, 8018e74 <rand+0x38>
 8018e46:	2018      	movs	r0, #24
 8018e48:	f7ff ff0a 	bl	8018c60 <malloc>
 8018e4c:	63a0      	str	r0, [r4, #56]	; 0x38
 8018e4e:	b928      	cbnz	r0, 8018e5c <rand+0x20>
 8018e50:	4602      	mov	r2, r0
 8018e52:	4b13      	ldr	r3, [pc, #76]	; (8018ea0 <rand+0x64>)
 8018e54:	4813      	ldr	r0, [pc, #76]	; (8018ea4 <rand+0x68>)
 8018e56:	214e      	movs	r1, #78	; 0x4e
 8018e58:	f000 f848 	bl	8018eec <__assert_func>
 8018e5c:	4a12      	ldr	r2, [pc, #72]	; (8018ea8 <rand+0x6c>)
 8018e5e:	4b13      	ldr	r3, [pc, #76]	; (8018eac <rand+0x70>)
 8018e60:	e9c0 2300 	strd	r2, r3, [r0]
 8018e64:	4b12      	ldr	r3, [pc, #72]	; (8018eb0 <rand+0x74>)
 8018e66:	6083      	str	r3, [r0, #8]
 8018e68:	230b      	movs	r3, #11
 8018e6a:	8183      	strh	r3, [r0, #12]
 8018e6c:	2201      	movs	r2, #1
 8018e6e:	2300      	movs	r3, #0
 8018e70:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018e74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018e76:	480f      	ldr	r0, [pc, #60]	; (8018eb4 <rand+0x78>)
 8018e78:	690a      	ldr	r2, [r1, #16]
 8018e7a:	694b      	ldr	r3, [r1, #20]
 8018e7c:	4c0e      	ldr	r4, [pc, #56]	; (8018eb8 <rand+0x7c>)
 8018e7e:	4350      	muls	r0, r2
 8018e80:	fb04 0003 	mla	r0, r4, r3, r0
 8018e84:	fba2 3404 	umull	r3, r4, r2, r4
 8018e88:	1c5a      	adds	r2, r3, #1
 8018e8a:	4404      	add	r4, r0
 8018e8c:	f144 0000 	adc.w	r0, r4, #0
 8018e90:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018e94:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018e98:	bd10      	pop	{r4, pc}
 8018e9a:	bf00      	nop
 8018e9c:	2000001c 	.word	0x2000001c
 8018ea0:	0801dd94 	.word	0x0801dd94
 8018ea4:	0801ddab 	.word	0x0801ddab
 8018ea8:	abcd330e 	.word	0xabcd330e
 8018eac:	e66d1234 	.word	0xe66d1234
 8018eb0:	0005deec 	.word	0x0005deec
 8018eb4:	5851f42d 	.word	0x5851f42d
 8018eb8:	4c957f2d 	.word	0x4c957f2d

08018ebc <realloc>:
 8018ebc:	4b02      	ldr	r3, [pc, #8]	; (8018ec8 <realloc+0xc>)
 8018ebe:	460a      	mov	r2, r1
 8018ec0:	4601      	mov	r1, r0
 8018ec2:	6818      	ldr	r0, [r3, #0]
 8018ec4:	f000 b946 	b.w	8019154 <_realloc_r>
 8018ec8:	2000001c 	.word	0x2000001c

08018ecc <_sbrk_r>:
 8018ecc:	b538      	push	{r3, r4, r5, lr}
 8018ece:	4d06      	ldr	r5, [pc, #24]	; (8018ee8 <_sbrk_r+0x1c>)
 8018ed0:	2300      	movs	r3, #0
 8018ed2:	4604      	mov	r4, r0
 8018ed4:	4608      	mov	r0, r1
 8018ed6:	602b      	str	r3, [r5, #0]
 8018ed8:	f7e8 fc88 	bl	80017ec <_sbrk>
 8018edc:	1c43      	adds	r3, r0, #1
 8018ede:	d102      	bne.n	8018ee6 <_sbrk_r+0x1a>
 8018ee0:	682b      	ldr	r3, [r5, #0]
 8018ee2:	b103      	cbz	r3, 8018ee6 <_sbrk_r+0x1a>
 8018ee4:	6023      	str	r3, [r4, #0]
 8018ee6:	bd38      	pop	{r3, r4, r5, pc}
 8018ee8:	2000bcc4 	.word	0x2000bcc4

08018eec <__assert_func>:
 8018eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018eee:	4614      	mov	r4, r2
 8018ef0:	461a      	mov	r2, r3
 8018ef2:	4b09      	ldr	r3, [pc, #36]	; (8018f18 <__assert_func+0x2c>)
 8018ef4:	681b      	ldr	r3, [r3, #0]
 8018ef6:	4605      	mov	r5, r0
 8018ef8:	68d8      	ldr	r0, [r3, #12]
 8018efa:	b14c      	cbz	r4, 8018f10 <__assert_func+0x24>
 8018efc:	4b07      	ldr	r3, [pc, #28]	; (8018f1c <__assert_func+0x30>)
 8018efe:	9100      	str	r1, [sp, #0]
 8018f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018f04:	4906      	ldr	r1, [pc, #24]	; (8018f20 <__assert_func+0x34>)
 8018f06:	462b      	mov	r3, r5
 8018f08:	f000 f8e4 	bl	80190d4 <fiprintf>
 8018f0c:	f000 fd4c 	bl	80199a8 <abort>
 8018f10:	4b04      	ldr	r3, [pc, #16]	; (8018f24 <__assert_func+0x38>)
 8018f12:	461c      	mov	r4, r3
 8018f14:	e7f3      	b.n	8018efe <__assert_func+0x12>
 8018f16:	bf00      	nop
 8018f18:	2000001c 	.word	0x2000001c
 8018f1c:	0801de0a 	.word	0x0801de0a
 8018f20:	0801de17 	.word	0x0801de17
 8018f24:	0801de45 	.word	0x0801de45

08018f28 <std>:
 8018f28:	2300      	movs	r3, #0
 8018f2a:	b510      	push	{r4, lr}
 8018f2c:	4604      	mov	r4, r0
 8018f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8018f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018f36:	6083      	str	r3, [r0, #8]
 8018f38:	8181      	strh	r1, [r0, #12]
 8018f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8018f3c:	81c2      	strh	r2, [r0, #14]
 8018f3e:	6183      	str	r3, [r0, #24]
 8018f40:	4619      	mov	r1, r3
 8018f42:	2208      	movs	r2, #8
 8018f44:	305c      	adds	r0, #92	; 0x5c
 8018f46:	f7ff feaf 	bl	8018ca8 <memset>
 8018f4a:	4b05      	ldr	r3, [pc, #20]	; (8018f60 <std+0x38>)
 8018f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8018f4e:	4b05      	ldr	r3, [pc, #20]	; (8018f64 <std+0x3c>)
 8018f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8018f52:	4b05      	ldr	r3, [pc, #20]	; (8018f68 <std+0x40>)
 8018f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018f56:	4b05      	ldr	r3, [pc, #20]	; (8018f6c <std+0x44>)
 8018f58:	6224      	str	r4, [r4, #32]
 8018f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8018f5c:	bd10      	pop	{r4, pc}
 8018f5e:	bf00      	nop
 8018f60:	0801977d 	.word	0x0801977d
 8018f64:	0801979f 	.word	0x0801979f
 8018f68:	080197d7 	.word	0x080197d7
 8018f6c:	080197fb 	.word	0x080197fb

08018f70 <_cleanup_r>:
 8018f70:	4901      	ldr	r1, [pc, #4]	; (8018f78 <_cleanup_r+0x8>)
 8018f72:	f000 b8c1 	b.w	80190f8 <_fwalk_reent>
 8018f76:	bf00      	nop
 8018f78:	08019ae5 	.word	0x08019ae5

08018f7c <__sfmoreglue>:
 8018f7c:	b570      	push	{r4, r5, r6, lr}
 8018f7e:	1e4a      	subs	r2, r1, #1
 8018f80:	2568      	movs	r5, #104	; 0x68
 8018f82:	4355      	muls	r5, r2
 8018f84:	460e      	mov	r6, r1
 8018f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018f8a:	f7ff fee5 	bl	8018d58 <_malloc_r>
 8018f8e:	4604      	mov	r4, r0
 8018f90:	b140      	cbz	r0, 8018fa4 <__sfmoreglue+0x28>
 8018f92:	2100      	movs	r1, #0
 8018f94:	e9c0 1600 	strd	r1, r6, [r0]
 8018f98:	300c      	adds	r0, #12
 8018f9a:	60a0      	str	r0, [r4, #8]
 8018f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018fa0:	f7ff fe82 	bl	8018ca8 <memset>
 8018fa4:	4620      	mov	r0, r4
 8018fa6:	bd70      	pop	{r4, r5, r6, pc}

08018fa8 <__sfp_lock_acquire>:
 8018fa8:	4801      	ldr	r0, [pc, #4]	; (8018fb0 <__sfp_lock_acquire+0x8>)
 8018faa:	f000 b8c5 	b.w	8019138 <__retarget_lock_acquire_recursive>
 8018fae:	bf00      	nop
 8018fb0:	2000bcd4 	.word	0x2000bcd4

08018fb4 <__sfp_lock_release>:
 8018fb4:	4801      	ldr	r0, [pc, #4]	; (8018fbc <__sfp_lock_release+0x8>)
 8018fb6:	f000 b8c0 	b.w	801913a <__retarget_lock_release_recursive>
 8018fba:	bf00      	nop
 8018fbc:	2000bcd4 	.word	0x2000bcd4

08018fc0 <__sinit_lock_acquire>:
 8018fc0:	4801      	ldr	r0, [pc, #4]	; (8018fc8 <__sinit_lock_acquire+0x8>)
 8018fc2:	f000 b8b9 	b.w	8019138 <__retarget_lock_acquire_recursive>
 8018fc6:	bf00      	nop
 8018fc8:	2000bccf 	.word	0x2000bccf

08018fcc <__sinit_lock_release>:
 8018fcc:	4801      	ldr	r0, [pc, #4]	; (8018fd4 <__sinit_lock_release+0x8>)
 8018fce:	f000 b8b4 	b.w	801913a <__retarget_lock_release_recursive>
 8018fd2:	bf00      	nop
 8018fd4:	2000bccf 	.word	0x2000bccf

08018fd8 <__sinit>:
 8018fd8:	b510      	push	{r4, lr}
 8018fda:	4604      	mov	r4, r0
 8018fdc:	f7ff fff0 	bl	8018fc0 <__sinit_lock_acquire>
 8018fe0:	69a3      	ldr	r3, [r4, #24]
 8018fe2:	b11b      	cbz	r3, 8018fec <__sinit+0x14>
 8018fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018fe8:	f7ff bff0 	b.w	8018fcc <__sinit_lock_release>
 8018fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8018ff2:	4b13      	ldr	r3, [pc, #76]	; (8019040 <__sinit+0x68>)
 8018ff4:	4a13      	ldr	r2, [pc, #76]	; (8019044 <__sinit+0x6c>)
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8018ffa:	42a3      	cmp	r3, r4
 8018ffc:	bf04      	itt	eq
 8018ffe:	2301      	moveq	r3, #1
 8019000:	61a3      	streq	r3, [r4, #24]
 8019002:	4620      	mov	r0, r4
 8019004:	f000 f820 	bl	8019048 <__sfp>
 8019008:	6060      	str	r0, [r4, #4]
 801900a:	4620      	mov	r0, r4
 801900c:	f000 f81c 	bl	8019048 <__sfp>
 8019010:	60a0      	str	r0, [r4, #8]
 8019012:	4620      	mov	r0, r4
 8019014:	f000 f818 	bl	8019048 <__sfp>
 8019018:	2200      	movs	r2, #0
 801901a:	60e0      	str	r0, [r4, #12]
 801901c:	2104      	movs	r1, #4
 801901e:	6860      	ldr	r0, [r4, #4]
 8019020:	f7ff ff82 	bl	8018f28 <std>
 8019024:	68a0      	ldr	r0, [r4, #8]
 8019026:	2201      	movs	r2, #1
 8019028:	2109      	movs	r1, #9
 801902a:	f7ff ff7d 	bl	8018f28 <std>
 801902e:	68e0      	ldr	r0, [r4, #12]
 8019030:	2202      	movs	r2, #2
 8019032:	2112      	movs	r1, #18
 8019034:	f7ff ff78 	bl	8018f28 <std>
 8019038:	2301      	movs	r3, #1
 801903a:	61a3      	str	r3, [r4, #24]
 801903c:	e7d2      	b.n	8018fe4 <__sinit+0xc>
 801903e:	bf00      	nop
 8019040:	0801dd90 	.word	0x0801dd90
 8019044:	08018f71 	.word	0x08018f71

08019048 <__sfp>:
 8019048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801904a:	4607      	mov	r7, r0
 801904c:	f7ff ffac 	bl	8018fa8 <__sfp_lock_acquire>
 8019050:	4b1e      	ldr	r3, [pc, #120]	; (80190cc <__sfp+0x84>)
 8019052:	681e      	ldr	r6, [r3, #0]
 8019054:	69b3      	ldr	r3, [r6, #24]
 8019056:	b913      	cbnz	r3, 801905e <__sfp+0x16>
 8019058:	4630      	mov	r0, r6
 801905a:	f7ff ffbd 	bl	8018fd8 <__sinit>
 801905e:	3648      	adds	r6, #72	; 0x48
 8019060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019064:	3b01      	subs	r3, #1
 8019066:	d503      	bpl.n	8019070 <__sfp+0x28>
 8019068:	6833      	ldr	r3, [r6, #0]
 801906a:	b30b      	cbz	r3, 80190b0 <__sfp+0x68>
 801906c:	6836      	ldr	r6, [r6, #0]
 801906e:	e7f7      	b.n	8019060 <__sfp+0x18>
 8019070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019074:	b9d5      	cbnz	r5, 80190ac <__sfp+0x64>
 8019076:	4b16      	ldr	r3, [pc, #88]	; (80190d0 <__sfp+0x88>)
 8019078:	60e3      	str	r3, [r4, #12]
 801907a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801907e:	6665      	str	r5, [r4, #100]	; 0x64
 8019080:	f000 f859 	bl	8019136 <__retarget_lock_init_recursive>
 8019084:	f7ff ff96 	bl	8018fb4 <__sfp_lock_release>
 8019088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801908c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019090:	6025      	str	r5, [r4, #0]
 8019092:	61a5      	str	r5, [r4, #24]
 8019094:	2208      	movs	r2, #8
 8019096:	4629      	mov	r1, r5
 8019098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801909c:	f7ff fe04 	bl	8018ca8 <memset>
 80190a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80190a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80190a8:	4620      	mov	r0, r4
 80190aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190ac:	3468      	adds	r4, #104	; 0x68
 80190ae:	e7d9      	b.n	8019064 <__sfp+0x1c>
 80190b0:	2104      	movs	r1, #4
 80190b2:	4638      	mov	r0, r7
 80190b4:	f7ff ff62 	bl	8018f7c <__sfmoreglue>
 80190b8:	4604      	mov	r4, r0
 80190ba:	6030      	str	r0, [r6, #0]
 80190bc:	2800      	cmp	r0, #0
 80190be:	d1d5      	bne.n	801906c <__sfp+0x24>
 80190c0:	f7ff ff78 	bl	8018fb4 <__sfp_lock_release>
 80190c4:	230c      	movs	r3, #12
 80190c6:	603b      	str	r3, [r7, #0]
 80190c8:	e7ee      	b.n	80190a8 <__sfp+0x60>
 80190ca:	bf00      	nop
 80190cc:	0801dd90 	.word	0x0801dd90
 80190d0:	ffff0001 	.word	0xffff0001

080190d4 <fiprintf>:
 80190d4:	b40e      	push	{r1, r2, r3}
 80190d6:	b503      	push	{r0, r1, lr}
 80190d8:	4601      	mov	r1, r0
 80190da:	ab03      	add	r3, sp, #12
 80190dc:	4805      	ldr	r0, [pc, #20]	; (80190f4 <fiprintf+0x20>)
 80190de:	f853 2b04 	ldr.w	r2, [r3], #4
 80190e2:	6800      	ldr	r0, [r0, #0]
 80190e4:	9301      	str	r3, [sp, #4]
 80190e6:	f000 f885 	bl	80191f4 <_vfiprintf_r>
 80190ea:	b002      	add	sp, #8
 80190ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80190f0:	b003      	add	sp, #12
 80190f2:	4770      	bx	lr
 80190f4:	2000001c 	.word	0x2000001c

080190f8 <_fwalk_reent>:
 80190f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80190fc:	4606      	mov	r6, r0
 80190fe:	4688      	mov	r8, r1
 8019100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019104:	2700      	movs	r7, #0
 8019106:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801910a:	f1b9 0901 	subs.w	r9, r9, #1
 801910e:	d505      	bpl.n	801911c <_fwalk_reent+0x24>
 8019110:	6824      	ldr	r4, [r4, #0]
 8019112:	2c00      	cmp	r4, #0
 8019114:	d1f7      	bne.n	8019106 <_fwalk_reent+0xe>
 8019116:	4638      	mov	r0, r7
 8019118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801911c:	89ab      	ldrh	r3, [r5, #12]
 801911e:	2b01      	cmp	r3, #1
 8019120:	d907      	bls.n	8019132 <_fwalk_reent+0x3a>
 8019122:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019126:	3301      	adds	r3, #1
 8019128:	d003      	beq.n	8019132 <_fwalk_reent+0x3a>
 801912a:	4629      	mov	r1, r5
 801912c:	4630      	mov	r0, r6
 801912e:	47c0      	blx	r8
 8019130:	4307      	orrs	r7, r0
 8019132:	3568      	adds	r5, #104	; 0x68
 8019134:	e7e9      	b.n	801910a <_fwalk_reent+0x12>

08019136 <__retarget_lock_init_recursive>:
 8019136:	4770      	bx	lr

08019138 <__retarget_lock_acquire_recursive>:
 8019138:	4770      	bx	lr

0801913a <__retarget_lock_release_recursive>:
 801913a:	4770      	bx	lr

0801913c <__malloc_lock>:
 801913c:	4801      	ldr	r0, [pc, #4]	; (8019144 <__malloc_lock+0x8>)
 801913e:	f7ff bffb 	b.w	8019138 <__retarget_lock_acquire_recursive>
 8019142:	bf00      	nop
 8019144:	2000bcd0 	.word	0x2000bcd0

08019148 <__malloc_unlock>:
 8019148:	4801      	ldr	r0, [pc, #4]	; (8019150 <__malloc_unlock+0x8>)
 801914a:	f7ff bff6 	b.w	801913a <__retarget_lock_release_recursive>
 801914e:	bf00      	nop
 8019150:	2000bcd0 	.word	0x2000bcd0

08019154 <_realloc_r>:
 8019154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019156:	4607      	mov	r7, r0
 8019158:	4614      	mov	r4, r2
 801915a:	460e      	mov	r6, r1
 801915c:	b921      	cbnz	r1, 8019168 <_realloc_r+0x14>
 801915e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019162:	4611      	mov	r1, r2
 8019164:	f7ff bdf8 	b.w	8018d58 <_malloc_r>
 8019168:	b922      	cbnz	r2, 8019174 <_realloc_r+0x20>
 801916a:	f7ff fda5 	bl	8018cb8 <_free_r>
 801916e:	4625      	mov	r5, r4
 8019170:	4628      	mov	r0, r5
 8019172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019174:	f000 fd68 	bl	8019c48 <_malloc_usable_size_r>
 8019178:	42a0      	cmp	r0, r4
 801917a:	d20f      	bcs.n	801919c <_realloc_r+0x48>
 801917c:	4621      	mov	r1, r4
 801917e:	4638      	mov	r0, r7
 8019180:	f7ff fdea 	bl	8018d58 <_malloc_r>
 8019184:	4605      	mov	r5, r0
 8019186:	2800      	cmp	r0, #0
 8019188:	d0f2      	beq.n	8019170 <_realloc_r+0x1c>
 801918a:	4631      	mov	r1, r6
 801918c:	4622      	mov	r2, r4
 801918e:	f7ff fd7d 	bl	8018c8c <memcpy>
 8019192:	4631      	mov	r1, r6
 8019194:	4638      	mov	r0, r7
 8019196:	f7ff fd8f 	bl	8018cb8 <_free_r>
 801919a:	e7e9      	b.n	8019170 <_realloc_r+0x1c>
 801919c:	4635      	mov	r5, r6
 801919e:	e7e7      	b.n	8019170 <_realloc_r+0x1c>

080191a0 <__sfputc_r>:
 80191a0:	6893      	ldr	r3, [r2, #8]
 80191a2:	3b01      	subs	r3, #1
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	b410      	push	{r4}
 80191a8:	6093      	str	r3, [r2, #8]
 80191aa:	da08      	bge.n	80191be <__sfputc_r+0x1e>
 80191ac:	6994      	ldr	r4, [r2, #24]
 80191ae:	42a3      	cmp	r3, r4
 80191b0:	db01      	blt.n	80191b6 <__sfputc_r+0x16>
 80191b2:	290a      	cmp	r1, #10
 80191b4:	d103      	bne.n	80191be <__sfputc_r+0x1e>
 80191b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191ba:	f000 bb23 	b.w	8019804 <__swbuf_r>
 80191be:	6813      	ldr	r3, [r2, #0]
 80191c0:	1c58      	adds	r0, r3, #1
 80191c2:	6010      	str	r0, [r2, #0]
 80191c4:	7019      	strb	r1, [r3, #0]
 80191c6:	4608      	mov	r0, r1
 80191c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80191cc:	4770      	bx	lr

080191ce <__sfputs_r>:
 80191ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80191d0:	4606      	mov	r6, r0
 80191d2:	460f      	mov	r7, r1
 80191d4:	4614      	mov	r4, r2
 80191d6:	18d5      	adds	r5, r2, r3
 80191d8:	42ac      	cmp	r4, r5
 80191da:	d101      	bne.n	80191e0 <__sfputs_r+0x12>
 80191dc:	2000      	movs	r0, #0
 80191de:	e007      	b.n	80191f0 <__sfputs_r+0x22>
 80191e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80191e4:	463a      	mov	r2, r7
 80191e6:	4630      	mov	r0, r6
 80191e8:	f7ff ffda 	bl	80191a0 <__sfputc_r>
 80191ec:	1c43      	adds	r3, r0, #1
 80191ee:	d1f3      	bne.n	80191d8 <__sfputs_r+0xa>
 80191f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080191f4 <_vfiprintf_r>:
 80191f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191f8:	460d      	mov	r5, r1
 80191fa:	b09d      	sub	sp, #116	; 0x74
 80191fc:	4614      	mov	r4, r2
 80191fe:	4698      	mov	r8, r3
 8019200:	4606      	mov	r6, r0
 8019202:	b118      	cbz	r0, 801920c <_vfiprintf_r+0x18>
 8019204:	6983      	ldr	r3, [r0, #24]
 8019206:	b90b      	cbnz	r3, 801920c <_vfiprintf_r+0x18>
 8019208:	f7ff fee6 	bl	8018fd8 <__sinit>
 801920c:	4b89      	ldr	r3, [pc, #548]	; (8019434 <_vfiprintf_r+0x240>)
 801920e:	429d      	cmp	r5, r3
 8019210:	d11b      	bne.n	801924a <_vfiprintf_r+0x56>
 8019212:	6875      	ldr	r5, [r6, #4]
 8019214:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019216:	07d9      	lsls	r1, r3, #31
 8019218:	d405      	bmi.n	8019226 <_vfiprintf_r+0x32>
 801921a:	89ab      	ldrh	r3, [r5, #12]
 801921c:	059a      	lsls	r2, r3, #22
 801921e:	d402      	bmi.n	8019226 <_vfiprintf_r+0x32>
 8019220:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019222:	f7ff ff89 	bl	8019138 <__retarget_lock_acquire_recursive>
 8019226:	89ab      	ldrh	r3, [r5, #12]
 8019228:	071b      	lsls	r3, r3, #28
 801922a:	d501      	bpl.n	8019230 <_vfiprintf_r+0x3c>
 801922c:	692b      	ldr	r3, [r5, #16]
 801922e:	b9eb      	cbnz	r3, 801926c <_vfiprintf_r+0x78>
 8019230:	4629      	mov	r1, r5
 8019232:	4630      	mov	r0, r6
 8019234:	f000 fb4a 	bl	80198cc <__swsetup_r>
 8019238:	b1c0      	cbz	r0, 801926c <_vfiprintf_r+0x78>
 801923a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801923c:	07dc      	lsls	r4, r3, #31
 801923e:	d50e      	bpl.n	801925e <_vfiprintf_r+0x6a>
 8019240:	f04f 30ff 	mov.w	r0, #4294967295
 8019244:	b01d      	add	sp, #116	; 0x74
 8019246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801924a:	4b7b      	ldr	r3, [pc, #492]	; (8019438 <_vfiprintf_r+0x244>)
 801924c:	429d      	cmp	r5, r3
 801924e:	d101      	bne.n	8019254 <_vfiprintf_r+0x60>
 8019250:	68b5      	ldr	r5, [r6, #8]
 8019252:	e7df      	b.n	8019214 <_vfiprintf_r+0x20>
 8019254:	4b79      	ldr	r3, [pc, #484]	; (801943c <_vfiprintf_r+0x248>)
 8019256:	429d      	cmp	r5, r3
 8019258:	bf08      	it	eq
 801925a:	68f5      	ldreq	r5, [r6, #12]
 801925c:	e7da      	b.n	8019214 <_vfiprintf_r+0x20>
 801925e:	89ab      	ldrh	r3, [r5, #12]
 8019260:	0598      	lsls	r0, r3, #22
 8019262:	d4ed      	bmi.n	8019240 <_vfiprintf_r+0x4c>
 8019264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019266:	f7ff ff68 	bl	801913a <__retarget_lock_release_recursive>
 801926a:	e7e9      	b.n	8019240 <_vfiprintf_r+0x4c>
 801926c:	2300      	movs	r3, #0
 801926e:	9309      	str	r3, [sp, #36]	; 0x24
 8019270:	2320      	movs	r3, #32
 8019272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019276:	f8cd 800c 	str.w	r8, [sp, #12]
 801927a:	2330      	movs	r3, #48	; 0x30
 801927c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019440 <_vfiprintf_r+0x24c>
 8019280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019284:	f04f 0901 	mov.w	r9, #1
 8019288:	4623      	mov	r3, r4
 801928a:	469a      	mov	sl, r3
 801928c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019290:	b10a      	cbz	r2, 8019296 <_vfiprintf_r+0xa2>
 8019292:	2a25      	cmp	r2, #37	; 0x25
 8019294:	d1f9      	bne.n	801928a <_vfiprintf_r+0x96>
 8019296:	ebba 0b04 	subs.w	fp, sl, r4
 801929a:	d00b      	beq.n	80192b4 <_vfiprintf_r+0xc0>
 801929c:	465b      	mov	r3, fp
 801929e:	4622      	mov	r2, r4
 80192a0:	4629      	mov	r1, r5
 80192a2:	4630      	mov	r0, r6
 80192a4:	f7ff ff93 	bl	80191ce <__sfputs_r>
 80192a8:	3001      	adds	r0, #1
 80192aa:	f000 80aa 	beq.w	8019402 <_vfiprintf_r+0x20e>
 80192ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80192b0:	445a      	add	r2, fp
 80192b2:	9209      	str	r2, [sp, #36]	; 0x24
 80192b4:	f89a 3000 	ldrb.w	r3, [sl]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	f000 80a2 	beq.w	8019402 <_vfiprintf_r+0x20e>
 80192be:	2300      	movs	r3, #0
 80192c0:	f04f 32ff 	mov.w	r2, #4294967295
 80192c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80192c8:	f10a 0a01 	add.w	sl, sl, #1
 80192cc:	9304      	str	r3, [sp, #16]
 80192ce:	9307      	str	r3, [sp, #28]
 80192d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80192d4:	931a      	str	r3, [sp, #104]	; 0x68
 80192d6:	4654      	mov	r4, sl
 80192d8:	2205      	movs	r2, #5
 80192da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80192de:	4858      	ldr	r0, [pc, #352]	; (8019440 <_vfiprintf_r+0x24c>)
 80192e0:	f7e6 ff7e 	bl	80001e0 <memchr>
 80192e4:	9a04      	ldr	r2, [sp, #16]
 80192e6:	b9d8      	cbnz	r0, 8019320 <_vfiprintf_r+0x12c>
 80192e8:	06d1      	lsls	r1, r2, #27
 80192ea:	bf44      	itt	mi
 80192ec:	2320      	movmi	r3, #32
 80192ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192f2:	0713      	lsls	r3, r2, #28
 80192f4:	bf44      	itt	mi
 80192f6:	232b      	movmi	r3, #43	; 0x2b
 80192f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80192fc:	f89a 3000 	ldrb.w	r3, [sl]
 8019300:	2b2a      	cmp	r3, #42	; 0x2a
 8019302:	d015      	beq.n	8019330 <_vfiprintf_r+0x13c>
 8019304:	9a07      	ldr	r2, [sp, #28]
 8019306:	4654      	mov	r4, sl
 8019308:	2000      	movs	r0, #0
 801930a:	f04f 0c0a 	mov.w	ip, #10
 801930e:	4621      	mov	r1, r4
 8019310:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019314:	3b30      	subs	r3, #48	; 0x30
 8019316:	2b09      	cmp	r3, #9
 8019318:	d94e      	bls.n	80193b8 <_vfiprintf_r+0x1c4>
 801931a:	b1b0      	cbz	r0, 801934a <_vfiprintf_r+0x156>
 801931c:	9207      	str	r2, [sp, #28]
 801931e:	e014      	b.n	801934a <_vfiprintf_r+0x156>
 8019320:	eba0 0308 	sub.w	r3, r0, r8
 8019324:	fa09 f303 	lsl.w	r3, r9, r3
 8019328:	4313      	orrs	r3, r2
 801932a:	9304      	str	r3, [sp, #16]
 801932c:	46a2      	mov	sl, r4
 801932e:	e7d2      	b.n	80192d6 <_vfiprintf_r+0xe2>
 8019330:	9b03      	ldr	r3, [sp, #12]
 8019332:	1d19      	adds	r1, r3, #4
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	9103      	str	r1, [sp, #12]
 8019338:	2b00      	cmp	r3, #0
 801933a:	bfbb      	ittet	lt
 801933c:	425b      	neglt	r3, r3
 801933e:	f042 0202 	orrlt.w	r2, r2, #2
 8019342:	9307      	strge	r3, [sp, #28]
 8019344:	9307      	strlt	r3, [sp, #28]
 8019346:	bfb8      	it	lt
 8019348:	9204      	strlt	r2, [sp, #16]
 801934a:	7823      	ldrb	r3, [r4, #0]
 801934c:	2b2e      	cmp	r3, #46	; 0x2e
 801934e:	d10c      	bne.n	801936a <_vfiprintf_r+0x176>
 8019350:	7863      	ldrb	r3, [r4, #1]
 8019352:	2b2a      	cmp	r3, #42	; 0x2a
 8019354:	d135      	bne.n	80193c2 <_vfiprintf_r+0x1ce>
 8019356:	9b03      	ldr	r3, [sp, #12]
 8019358:	1d1a      	adds	r2, r3, #4
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	9203      	str	r2, [sp, #12]
 801935e:	2b00      	cmp	r3, #0
 8019360:	bfb8      	it	lt
 8019362:	f04f 33ff 	movlt.w	r3, #4294967295
 8019366:	3402      	adds	r4, #2
 8019368:	9305      	str	r3, [sp, #20]
 801936a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019450 <_vfiprintf_r+0x25c>
 801936e:	7821      	ldrb	r1, [r4, #0]
 8019370:	2203      	movs	r2, #3
 8019372:	4650      	mov	r0, sl
 8019374:	f7e6 ff34 	bl	80001e0 <memchr>
 8019378:	b140      	cbz	r0, 801938c <_vfiprintf_r+0x198>
 801937a:	2340      	movs	r3, #64	; 0x40
 801937c:	eba0 000a 	sub.w	r0, r0, sl
 8019380:	fa03 f000 	lsl.w	r0, r3, r0
 8019384:	9b04      	ldr	r3, [sp, #16]
 8019386:	4303      	orrs	r3, r0
 8019388:	3401      	adds	r4, #1
 801938a:	9304      	str	r3, [sp, #16]
 801938c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019390:	482c      	ldr	r0, [pc, #176]	; (8019444 <_vfiprintf_r+0x250>)
 8019392:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019396:	2206      	movs	r2, #6
 8019398:	f7e6 ff22 	bl	80001e0 <memchr>
 801939c:	2800      	cmp	r0, #0
 801939e:	d03f      	beq.n	8019420 <_vfiprintf_r+0x22c>
 80193a0:	4b29      	ldr	r3, [pc, #164]	; (8019448 <_vfiprintf_r+0x254>)
 80193a2:	bb1b      	cbnz	r3, 80193ec <_vfiprintf_r+0x1f8>
 80193a4:	9b03      	ldr	r3, [sp, #12]
 80193a6:	3307      	adds	r3, #7
 80193a8:	f023 0307 	bic.w	r3, r3, #7
 80193ac:	3308      	adds	r3, #8
 80193ae:	9303      	str	r3, [sp, #12]
 80193b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193b2:	443b      	add	r3, r7
 80193b4:	9309      	str	r3, [sp, #36]	; 0x24
 80193b6:	e767      	b.n	8019288 <_vfiprintf_r+0x94>
 80193b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80193bc:	460c      	mov	r4, r1
 80193be:	2001      	movs	r0, #1
 80193c0:	e7a5      	b.n	801930e <_vfiprintf_r+0x11a>
 80193c2:	2300      	movs	r3, #0
 80193c4:	3401      	adds	r4, #1
 80193c6:	9305      	str	r3, [sp, #20]
 80193c8:	4619      	mov	r1, r3
 80193ca:	f04f 0c0a 	mov.w	ip, #10
 80193ce:	4620      	mov	r0, r4
 80193d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80193d4:	3a30      	subs	r2, #48	; 0x30
 80193d6:	2a09      	cmp	r2, #9
 80193d8:	d903      	bls.n	80193e2 <_vfiprintf_r+0x1ee>
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d0c5      	beq.n	801936a <_vfiprintf_r+0x176>
 80193de:	9105      	str	r1, [sp, #20]
 80193e0:	e7c3      	b.n	801936a <_vfiprintf_r+0x176>
 80193e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80193e6:	4604      	mov	r4, r0
 80193e8:	2301      	movs	r3, #1
 80193ea:	e7f0      	b.n	80193ce <_vfiprintf_r+0x1da>
 80193ec:	ab03      	add	r3, sp, #12
 80193ee:	9300      	str	r3, [sp, #0]
 80193f0:	462a      	mov	r2, r5
 80193f2:	4b16      	ldr	r3, [pc, #88]	; (801944c <_vfiprintf_r+0x258>)
 80193f4:	a904      	add	r1, sp, #16
 80193f6:	4630      	mov	r0, r6
 80193f8:	f3af 8000 	nop.w
 80193fc:	4607      	mov	r7, r0
 80193fe:	1c78      	adds	r0, r7, #1
 8019400:	d1d6      	bne.n	80193b0 <_vfiprintf_r+0x1bc>
 8019402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019404:	07d9      	lsls	r1, r3, #31
 8019406:	d405      	bmi.n	8019414 <_vfiprintf_r+0x220>
 8019408:	89ab      	ldrh	r3, [r5, #12]
 801940a:	059a      	lsls	r2, r3, #22
 801940c:	d402      	bmi.n	8019414 <_vfiprintf_r+0x220>
 801940e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019410:	f7ff fe93 	bl	801913a <__retarget_lock_release_recursive>
 8019414:	89ab      	ldrh	r3, [r5, #12]
 8019416:	065b      	lsls	r3, r3, #25
 8019418:	f53f af12 	bmi.w	8019240 <_vfiprintf_r+0x4c>
 801941c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801941e:	e711      	b.n	8019244 <_vfiprintf_r+0x50>
 8019420:	ab03      	add	r3, sp, #12
 8019422:	9300      	str	r3, [sp, #0]
 8019424:	462a      	mov	r2, r5
 8019426:	4b09      	ldr	r3, [pc, #36]	; (801944c <_vfiprintf_r+0x258>)
 8019428:	a904      	add	r1, sp, #16
 801942a:	4630      	mov	r0, r6
 801942c:	f000 f880 	bl	8019530 <_printf_i>
 8019430:	e7e4      	b.n	80193fc <_vfiprintf_r+0x208>
 8019432:	bf00      	nop
 8019434:	0801de68 	.word	0x0801de68
 8019438:	0801de88 	.word	0x0801de88
 801943c:	0801de48 	.word	0x0801de48
 8019440:	0801dea8 	.word	0x0801dea8
 8019444:	0801deb2 	.word	0x0801deb2
 8019448:	00000000 	.word	0x00000000
 801944c:	080191cf 	.word	0x080191cf
 8019450:	0801deae 	.word	0x0801deae

08019454 <_printf_common>:
 8019454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019458:	4616      	mov	r6, r2
 801945a:	4699      	mov	r9, r3
 801945c:	688a      	ldr	r2, [r1, #8]
 801945e:	690b      	ldr	r3, [r1, #16]
 8019460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019464:	4293      	cmp	r3, r2
 8019466:	bfb8      	it	lt
 8019468:	4613      	movlt	r3, r2
 801946a:	6033      	str	r3, [r6, #0]
 801946c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019470:	4607      	mov	r7, r0
 8019472:	460c      	mov	r4, r1
 8019474:	b10a      	cbz	r2, 801947a <_printf_common+0x26>
 8019476:	3301      	adds	r3, #1
 8019478:	6033      	str	r3, [r6, #0]
 801947a:	6823      	ldr	r3, [r4, #0]
 801947c:	0699      	lsls	r1, r3, #26
 801947e:	bf42      	ittt	mi
 8019480:	6833      	ldrmi	r3, [r6, #0]
 8019482:	3302      	addmi	r3, #2
 8019484:	6033      	strmi	r3, [r6, #0]
 8019486:	6825      	ldr	r5, [r4, #0]
 8019488:	f015 0506 	ands.w	r5, r5, #6
 801948c:	d106      	bne.n	801949c <_printf_common+0x48>
 801948e:	f104 0a19 	add.w	sl, r4, #25
 8019492:	68e3      	ldr	r3, [r4, #12]
 8019494:	6832      	ldr	r2, [r6, #0]
 8019496:	1a9b      	subs	r3, r3, r2
 8019498:	42ab      	cmp	r3, r5
 801949a:	dc26      	bgt.n	80194ea <_printf_common+0x96>
 801949c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80194a0:	1e13      	subs	r3, r2, #0
 80194a2:	6822      	ldr	r2, [r4, #0]
 80194a4:	bf18      	it	ne
 80194a6:	2301      	movne	r3, #1
 80194a8:	0692      	lsls	r2, r2, #26
 80194aa:	d42b      	bmi.n	8019504 <_printf_common+0xb0>
 80194ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80194b0:	4649      	mov	r1, r9
 80194b2:	4638      	mov	r0, r7
 80194b4:	47c0      	blx	r8
 80194b6:	3001      	adds	r0, #1
 80194b8:	d01e      	beq.n	80194f8 <_printf_common+0xa4>
 80194ba:	6823      	ldr	r3, [r4, #0]
 80194bc:	68e5      	ldr	r5, [r4, #12]
 80194be:	6832      	ldr	r2, [r6, #0]
 80194c0:	f003 0306 	and.w	r3, r3, #6
 80194c4:	2b04      	cmp	r3, #4
 80194c6:	bf08      	it	eq
 80194c8:	1aad      	subeq	r5, r5, r2
 80194ca:	68a3      	ldr	r3, [r4, #8]
 80194cc:	6922      	ldr	r2, [r4, #16]
 80194ce:	bf0c      	ite	eq
 80194d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80194d4:	2500      	movne	r5, #0
 80194d6:	4293      	cmp	r3, r2
 80194d8:	bfc4      	itt	gt
 80194da:	1a9b      	subgt	r3, r3, r2
 80194dc:	18ed      	addgt	r5, r5, r3
 80194de:	2600      	movs	r6, #0
 80194e0:	341a      	adds	r4, #26
 80194e2:	42b5      	cmp	r5, r6
 80194e4:	d11a      	bne.n	801951c <_printf_common+0xc8>
 80194e6:	2000      	movs	r0, #0
 80194e8:	e008      	b.n	80194fc <_printf_common+0xa8>
 80194ea:	2301      	movs	r3, #1
 80194ec:	4652      	mov	r2, sl
 80194ee:	4649      	mov	r1, r9
 80194f0:	4638      	mov	r0, r7
 80194f2:	47c0      	blx	r8
 80194f4:	3001      	adds	r0, #1
 80194f6:	d103      	bne.n	8019500 <_printf_common+0xac>
 80194f8:	f04f 30ff 	mov.w	r0, #4294967295
 80194fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019500:	3501      	adds	r5, #1
 8019502:	e7c6      	b.n	8019492 <_printf_common+0x3e>
 8019504:	18e1      	adds	r1, r4, r3
 8019506:	1c5a      	adds	r2, r3, #1
 8019508:	2030      	movs	r0, #48	; 0x30
 801950a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801950e:	4422      	add	r2, r4
 8019510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019518:	3302      	adds	r3, #2
 801951a:	e7c7      	b.n	80194ac <_printf_common+0x58>
 801951c:	2301      	movs	r3, #1
 801951e:	4622      	mov	r2, r4
 8019520:	4649      	mov	r1, r9
 8019522:	4638      	mov	r0, r7
 8019524:	47c0      	blx	r8
 8019526:	3001      	adds	r0, #1
 8019528:	d0e6      	beq.n	80194f8 <_printf_common+0xa4>
 801952a:	3601      	adds	r6, #1
 801952c:	e7d9      	b.n	80194e2 <_printf_common+0x8e>
	...

08019530 <_printf_i>:
 8019530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019534:	460c      	mov	r4, r1
 8019536:	4691      	mov	r9, r2
 8019538:	7e27      	ldrb	r7, [r4, #24]
 801953a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801953c:	2f78      	cmp	r7, #120	; 0x78
 801953e:	4680      	mov	r8, r0
 8019540:	469a      	mov	sl, r3
 8019542:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019546:	d807      	bhi.n	8019558 <_printf_i+0x28>
 8019548:	2f62      	cmp	r7, #98	; 0x62
 801954a:	d80a      	bhi.n	8019562 <_printf_i+0x32>
 801954c:	2f00      	cmp	r7, #0
 801954e:	f000 80d8 	beq.w	8019702 <_printf_i+0x1d2>
 8019552:	2f58      	cmp	r7, #88	; 0x58
 8019554:	f000 80a3 	beq.w	801969e <_printf_i+0x16e>
 8019558:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801955c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019560:	e03a      	b.n	80195d8 <_printf_i+0xa8>
 8019562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019566:	2b15      	cmp	r3, #21
 8019568:	d8f6      	bhi.n	8019558 <_printf_i+0x28>
 801956a:	a001      	add	r0, pc, #4	; (adr r0, 8019570 <_printf_i+0x40>)
 801956c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019570:	080195c9 	.word	0x080195c9
 8019574:	080195dd 	.word	0x080195dd
 8019578:	08019559 	.word	0x08019559
 801957c:	08019559 	.word	0x08019559
 8019580:	08019559 	.word	0x08019559
 8019584:	08019559 	.word	0x08019559
 8019588:	080195dd 	.word	0x080195dd
 801958c:	08019559 	.word	0x08019559
 8019590:	08019559 	.word	0x08019559
 8019594:	08019559 	.word	0x08019559
 8019598:	08019559 	.word	0x08019559
 801959c:	080196e9 	.word	0x080196e9
 80195a0:	0801960d 	.word	0x0801960d
 80195a4:	080196cb 	.word	0x080196cb
 80195a8:	08019559 	.word	0x08019559
 80195ac:	08019559 	.word	0x08019559
 80195b0:	0801970b 	.word	0x0801970b
 80195b4:	08019559 	.word	0x08019559
 80195b8:	0801960d 	.word	0x0801960d
 80195bc:	08019559 	.word	0x08019559
 80195c0:	08019559 	.word	0x08019559
 80195c4:	080196d3 	.word	0x080196d3
 80195c8:	680b      	ldr	r3, [r1, #0]
 80195ca:	1d1a      	adds	r2, r3, #4
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	600a      	str	r2, [r1, #0]
 80195d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80195d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80195d8:	2301      	movs	r3, #1
 80195da:	e0a3      	b.n	8019724 <_printf_i+0x1f4>
 80195dc:	6825      	ldr	r5, [r4, #0]
 80195de:	6808      	ldr	r0, [r1, #0]
 80195e0:	062e      	lsls	r6, r5, #24
 80195e2:	f100 0304 	add.w	r3, r0, #4
 80195e6:	d50a      	bpl.n	80195fe <_printf_i+0xce>
 80195e8:	6805      	ldr	r5, [r0, #0]
 80195ea:	600b      	str	r3, [r1, #0]
 80195ec:	2d00      	cmp	r5, #0
 80195ee:	da03      	bge.n	80195f8 <_printf_i+0xc8>
 80195f0:	232d      	movs	r3, #45	; 0x2d
 80195f2:	426d      	negs	r5, r5
 80195f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195f8:	485e      	ldr	r0, [pc, #376]	; (8019774 <_printf_i+0x244>)
 80195fa:	230a      	movs	r3, #10
 80195fc:	e019      	b.n	8019632 <_printf_i+0x102>
 80195fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019602:	6805      	ldr	r5, [r0, #0]
 8019604:	600b      	str	r3, [r1, #0]
 8019606:	bf18      	it	ne
 8019608:	b22d      	sxthne	r5, r5
 801960a:	e7ef      	b.n	80195ec <_printf_i+0xbc>
 801960c:	680b      	ldr	r3, [r1, #0]
 801960e:	6825      	ldr	r5, [r4, #0]
 8019610:	1d18      	adds	r0, r3, #4
 8019612:	6008      	str	r0, [r1, #0]
 8019614:	0628      	lsls	r0, r5, #24
 8019616:	d501      	bpl.n	801961c <_printf_i+0xec>
 8019618:	681d      	ldr	r5, [r3, #0]
 801961a:	e002      	b.n	8019622 <_printf_i+0xf2>
 801961c:	0669      	lsls	r1, r5, #25
 801961e:	d5fb      	bpl.n	8019618 <_printf_i+0xe8>
 8019620:	881d      	ldrh	r5, [r3, #0]
 8019622:	4854      	ldr	r0, [pc, #336]	; (8019774 <_printf_i+0x244>)
 8019624:	2f6f      	cmp	r7, #111	; 0x6f
 8019626:	bf0c      	ite	eq
 8019628:	2308      	moveq	r3, #8
 801962a:	230a      	movne	r3, #10
 801962c:	2100      	movs	r1, #0
 801962e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019632:	6866      	ldr	r6, [r4, #4]
 8019634:	60a6      	str	r6, [r4, #8]
 8019636:	2e00      	cmp	r6, #0
 8019638:	bfa2      	ittt	ge
 801963a:	6821      	ldrge	r1, [r4, #0]
 801963c:	f021 0104 	bicge.w	r1, r1, #4
 8019640:	6021      	strge	r1, [r4, #0]
 8019642:	b90d      	cbnz	r5, 8019648 <_printf_i+0x118>
 8019644:	2e00      	cmp	r6, #0
 8019646:	d04d      	beq.n	80196e4 <_printf_i+0x1b4>
 8019648:	4616      	mov	r6, r2
 801964a:	fbb5 f1f3 	udiv	r1, r5, r3
 801964e:	fb03 5711 	mls	r7, r3, r1, r5
 8019652:	5dc7      	ldrb	r7, [r0, r7]
 8019654:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019658:	462f      	mov	r7, r5
 801965a:	42bb      	cmp	r3, r7
 801965c:	460d      	mov	r5, r1
 801965e:	d9f4      	bls.n	801964a <_printf_i+0x11a>
 8019660:	2b08      	cmp	r3, #8
 8019662:	d10b      	bne.n	801967c <_printf_i+0x14c>
 8019664:	6823      	ldr	r3, [r4, #0]
 8019666:	07df      	lsls	r7, r3, #31
 8019668:	d508      	bpl.n	801967c <_printf_i+0x14c>
 801966a:	6923      	ldr	r3, [r4, #16]
 801966c:	6861      	ldr	r1, [r4, #4]
 801966e:	4299      	cmp	r1, r3
 8019670:	bfde      	ittt	le
 8019672:	2330      	movle	r3, #48	; 0x30
 8019674:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019678:	f106 36ff 	addle.w	r6, r6, #4294967295
 801967c:	1b92      	subs	r2, r2, r6
 801967e:	6122      	str	r2, [r4, #16]
 8019680:	f8cd a000 	str.w	sl, [sp]
 8019684:	464b      	mov	r3, r9
 8019686:	aa03      	add	r2, sp, #12
 8019688:	4621      	mov	r1, r4
 801968a:	4640      	mov	r0, r8
 801968c:	f7ff fee2 	bl	8019454 <_printf_common>
 8019690:	3001      	adds	r0, #1
 8019692:	d14c      	bne.n	801972e <_printf_i+0x1fe>
 8019694:	f04f 30ff 	mov.w	r0, #4294967295
 8019698:	b004      	add	sp, #16
 801969a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801969e:	4835      	ldr	r0, [pc, #212]	; (8019774 <_printf_i+0x244>)
 80196a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80196a4:	6823      	ldr	r3, [r4, #0]
 80196a6:	680e      	ldr	r6, [r1, #0]
 80196a8:	061f      	lsls	r7, r3, #24
 80196aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80196ae:	600e      	str	r6, [r1, #0]
 80196b0:	d514      	bpl.n	80196dc <_printf_i+0x1ac>
 80196b2:	07d9      	lsls	r1, r3, #31
 80196b4:	bf44      	itt	mi
 80196b6:	f043 0320 	orrmi.w	r3, r3, #32
 80196ba:	6023      	strmi	r3, [r4, #0]
 80196bc:	b91d      	cbnz	r5, 80196c6 <_printf_i+0x196>
 80196be:	6823      	ldr	r3, [r4, #0]
 80196c0:	f023 0320 	bic.w	r3, r3, #32
 80196c4:	6023      	str	r3, [r4, #0]
 80196c6:	2310      	movs	r3, #16
 80196c8:	e7b0      	b.n	801962c <_printf_i+0xfc>
 80196ca:	6823      	ldr	r3, [r4, #0]
 80196cc:	f043 0320 	orr.w	r3, r3, #32
 80196d0:	6023      	str	r3, [r4, #0]
 80196d2:	2378      	movs	r3, #120	; 0x78
 80196d4:	4828      	ldr	r0, [pc, #160]	; (8019778 <_printf_i+0x248>)
 80196d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80196da:	e7e3      	b.n	80196a4 <_printf_i+0x174>
 80196dc:	065e      	lsls	r6, r3, #25
 80196de:	bf48      	it	mi
 80196e0:	b2ad      	uxthmi	r5, r5
 80196e2:	e7e6      	b.n	80196b2 <_printf_i+0x182>
 80196e4:	4616      	mov	r6, r2
 80196e6:	e7bb      	b.n	8019660 <_printf_i+0x130>
 80196e8:	680b      	ldr	r3, [r1, #0]
 80196ea:	6826      	ldr	r6, [r4, #0]
 80196ec:	6960      	ldr	r0, [r4, #20]
 80196ee:	1d1d      	adds	r5, r3, #4
 80196f0:	600d      	str	r5, [r1, #0]
 80196f2:	0635      	lsls	r5, r6, #24
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	d501      	bpl.n	80196fc <_printf_i+0x1cc>
 80196f8:	6018      	str	r0, [r3, #0]
 80196fa:	e002      	b.n	8019702 <_printf_i+0x1d2>
 80196fc:	0671      	lsls	r1, r6, #25
 80196fe:	d5fb      	bpl.n	80196f8 <_printf_i+0x1c8>
 8019700:	8018      	strh	r0, [r3, #0]
 8019702:	2300      	movs	r3, #0
 8019704:	6123      	str	r3, [r4, #16]
 8019706:	4616      	mov	r6, r2
 8019708:	e7ba      	b.n	8019680 <_printf_i+0x150>
 801970a:	680b      	ldr	r3, [r1, #0]
 801970c:	1d1a      	adds	r2, r3, #4
 801970e:	600a      	str	r2, [r1, #0]
 8019710:	681e      	ldr	r6, [r3, #0]
 8019712:	6862      	ldr	r2, [r4, #4]
 8019714:	2100      	movs	r1, #0
 8019716:	4630      	mov	r0, r6
 8019718:	f7e6 fd62 	bl	80001e0 <memchr>
 801971c:	b108      	cbz	r0, 8019722 <_printf_i+0x1f2>
 801971e:	1b80      	subs	r0, r0, r6
 8019720:	6060      	str	r0, [r4, #4]
 8019722:	6863      	ldr	r3, [r4, #4]
 8019724:	6123      	str	r3, [r4, #16]
 8019726:	2300      	movs	r3, #0
 8019728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801972c:	e7a8      	b.n	8019680 <_printf_i+0x150>
 801972e:	6923      	ldr	r3, [r4, #16]
 8019730:	4632      	mov	r2, r6
 8019732:	4649      	mov	r1, r9
 8019734:	4640      	mov	r0, r8
 8019736:	47d0      	blx	sl
 8019738:	3001      	adds	r0, #1
 801973a:	d0ab      	beq.n	8019694 <_printf_i+0x164>
 801973c:	6823      	ldr	r3, [r4, #0]
 801973e:	079b      	lsls	r3, r3, #30
 8019740:	d413      	bmi.n	801976a <_printf_i+0x23a>
 8019742:	68e0      	ldr	r0, [r4, #12]
 8019744:	9b03      	ldr	r3, [sp, #12]
 8019746:	4298      	cmp	r0, r3
 8019748:	bfb8      	it	lt
 801974a:	4618      	movlt	r0, r3
 801974c:	e7a4      	b.n	8019698 <_printf_i+0x168>
 801974e:	2301      	movs	r3, #1
 8019750:	4632      	mov	r2, r6
 8019752:	4649      	mov	r1, r9
 8019754:	4640      	mov	r0, r8
 8019756:	47d0      	blx	sl
 8019758:	3001      	adds	r0, #1
 801975a:	d09b      	beq.n	8019694 <_printf_i+0x164>
 801975c:	3501      	adds	r5, #1
 801975e:	68e3      	ldr	r3, [r4, #12]
 8019760:	9903      	ldr	r1, [sp, #12]
 8019762:	1a5b      	subs	r3, r3, r1
 8019764:	42ab      	cmp	r3, r5
 8019766:	dcf2      	bgt.n	801974e <_printf_i+0x21e>
 8019768:	e7eb      	b.n	8019742 <_printf_i+0x212>
 801976a:	2500      	movs	r5, #0
 801976c:	f104 0619 	add.w	r6, r4, #25
 8019770:	e7f5      	b.n	801975e <_printf_i+0x22e>
 8019772:	bf00      	nop
 8019774:	0801deb9 	.word	0x0801deb9
 8019778:	0801deca 	.word	0x0801deca

0801977c <__sread>:
 801977c:	b510      	push	{r4, lr}
 801977e:	460c      	mov	r4, r1
 8019780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019784:	f000 fa68 	bl	8019c58 <_read_r>
 8019788:	2800      	cmp	r0, #0
 801978a:	bfab      	itete	ge
 801978c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801978e:	89a3      	ldrhlt	r3, [r4, #12]
 8019790:	181b      	addge	r3, r3, r0
 8019792:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019796:	bfac      	ite	ge
 8019798:	6563      	strge	r3, [r4, #84]	; 0x54
 801979a:	81a3      	strhlt	r3, [r4, #12]
 801979c:	bd10      	pop	{r4, pc}

0801979e <__swrite>:
 801979e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80197a2:	461f      	mov	r7, r3
 80197a4:	898b      	ldrh	r3, [r1, #12]
 80197a6:	05db      	lsls	r3, r3, #23
 80197a8:	4605      	mov	r5, r0
 80197aa:	460c      	mov	r4, r1
 80197ac:	4616      	mov	r6, r2
 80197ae:	d505      	bpl.n	80197bc <__swrite+0x1e>
 80197b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197b4:	2302      	movs	r3, #2
 80197b6:	2200      	movs	r2, #0
 80197b8:	f000 f9d0 	bl	8019b5c <_lseek_r>
 80197bc:	89a3      	ldrh	r3, [r4, #12]
 80197be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80197c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80197c6:	81a3      	strh	r3, [r4, #12]
 80197c8:	4632      	mov	r2, r6
 80197ca:	463b      	mov	r3, r7
 80197cc:	4628      	mov	r0, r5
 80197ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197d2:	f000 b869 	b.w	80198a8 <_write_r>

080197d6 <__sseek>:
 80197d6:	b510      	push	{r4, lr}
 80197d8:	460c      	mov	r4, r1
 80197da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197de:	f000 f9bd 	bl	8019b5c <_lseek_r>
 80197e2:	1c43      	adds	r3, r0, #1
 80197e4:	89a3      	ldrh	r3, [r4, #12]
 80197e6:	bf15      	itete	ne
 80197e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80197ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80197ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80197f2:	81a3      	strheq	r3, [r4, #12]
 80197f4:	bf18      	it	ne
 80197f6:	81a3      	strhne	r3, [r4, #12]
 80197f8:	bd10      	pop	{r4, pc}

080197fa <__sclose>:
 80197fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197fe:	f000 b8db 	b.w	80199b8 <_close_r>
	...

08019804 <__swbuf_r>:
 8019804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019806:	460e      	mov	r6, r1
 8019808:	4614      	mov	r4, r2
 801980a:	4605      	mov	r5, r0
 801980c:	b118      	cbz	r0, 8019816 <__swbuf_r+0x12>
 801980e:	6983      	ldr	r3, [r0, #24]
 8019810:	b90b      	cbnz	r3, 8019816 <__swbuf_r+0x12>
 8019812:	f7ff fbe1 	bl	8018fd8 <__sinit>
 8019816:	4b21      	ldr	r3, [pc, #132]	; (801989c <__swbuf_r+0x98>)
 8019818:	429c      	cmp	r4, r3
 801981a:	d12b      	bne.n	8019874 <__swbuf_r+0x70>
 801981c:	686c      	ldr	r4, [r5, #4]
 801981e:	69a3      	ldr	r3, [r4, #24]
 8019820:	60a3      	str	r3, [r4, #8]
 8019822:	89a3      	ldrh	r3, [r4, #12]
 8019824:	071a      	lsls	r2, r3, #28
 8019826:	d52f      	bpl.n	8019888 <__swbuf_r+0x84>
 8019828:	6923      	ldr	r3, [r4, #16]
 801982a:	b36b      	cbz	r3, 8019888 <__swbuf_r+0x84>
 801982c:	6923      	ldr	r3, [r4, #16]
 801982e:	6820      	ldr	r0, [r4, #0]
 8019830:	1ac0      	subs	r0, r0, r3
 8019832:	6963      	ldr	r3, [r4, #20]
 8019834:	b2f6      	uxtb	r6, r6
 8019836:	4283      	cmp	r3, r0
 8019838:	4637      	mov	r7, r6
 801983a:	dc04      	bgt.n	8019846 <__swbuf_r+0x42>
 801983c:	4621      	mov	r1, r4
 801983e:	4628      	mov	r0, r5
 8019840:	f000 f950 	bl	8019ae4 <_fflush_r>
 8019844:	bb30      	cbnz	r0, 8019894 <__swbuf_r+0x90>
 8019846:	68a3      	ldr	r3, [r4, #8]
 8019848:	3b01      	subs	r3, #1
 801984a:	60a3      	str	r3, [r4, #8]
 801984c:	6823      	ldr	r3, [r4, #0]
 801984e:	1c5a      	adds	r2, r3, #1
 8019850:	6022      	str	r2, [r4, #0]
 8019852:	701e      	strb	r6, [r3, #0]
 8019854:	6963      	ldr	r3, [r4, #20]
 8019856:	3001      	adds	r0, #1
 8019858:	4283      	cmp	r3, r0
 801985a:	d004      	beq.n	8019866 <__swbuf_r+0x62>
 801985c:	89a3      	ldrh	r3, [r4, #12]
 801985e:	07db      	lsls	r3, r3, #31
 8019860:	d506      	bpl.n	8019870 <__swbuf_r+0x6c>
 8019862:	2e0a      	cmp	r6, #10
 8019864:	d104      	bne.n	8019870 <__swbuf_r+0x6c>
 8019866:	4621      	mov	r1, r4
 8019868:	4628      	mov	r0, r5
 801986a:	f000 f93b 	bl	8019ae4 <_fflush_r>
 801986e:	b988      	cbnz	r0, 8019894 <__swbuf_r+0x90>
 8019870:	4638      	mov	r0, r7
 8019872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019874:	4b0a      	ldr	r3, [pc, #40]	; (80198a0 <__swbuf_r+0x9c>)
 8019876:	429c      	cmp	r4, r3
 8019878:	d101      	bne.n	801987e <__swbuf_r+0x7a>
 801987a:	68ac      	ldr	r4, [r5, #8]
 801987c:	e7cf      	b.n	801981e <__swbuf_r+0x1a>
 801987e:	4b09      	ldr	r3, [pc, #36]	; (80198a4 <__swbuf_r+0xa0>)
 8019880:	429c      	cmp	r4, r3
 8019882:	bf08      	it	eq
 8019884:	68ec      	ldreq	r4, [r5, #12]
 8019886:	e7ca      	b.n	801981e <__swbuf_r+0x1a>
 8019888:	4621      	mov	r1, r4
 801988a:	4628      	mov	r0, r5
 801988c:	f000 f81e 	bl	80198cc <__swsetup_r>
 8019890:	2800      	cmp	r0, #0
 8019892:	d0cb      	beq.n	801982c <__swbuf_r+0x28>
 8019894:	f04f 37ff 	mov.w	r7, #4294967295
 8019898:	e7ea      	b.n	8019870 <__swbuf_r+0x6c>
 801989a:	bf00      	nop
 801989c:	0801de68 	.word	0x0801de68
 80198a0:	0801de88 	.word	0x0801de88
 80198a4:	0801de48 	.word	0x0801de48

080198a8 <_write_r>:
 80198a8:	b538      	push	{r3, r4, r5, lr}
 80198aa:	4d07      	ldr	r5, [pc, #28]	; (80198c8 <_write_r+0x20>)
 80198ac:	4604      	mov	r4, r0
 80198ae:	4608      	mov	r0, r1
 80198b0:	4611      	mov	r1, r2
 80198b2:	2200      	movs	r2, #0
 80198b4:	602a      	str	r2, [r5, #0]
 80198b6:	461a      	mov	r2, r3
 80198b8:	f7e7 ff47 	bl	800174a <_write>
 80198bc:	1c43      	adds	r3, r0, #1
 80198be:	d102      	bne.n	80198c6 <_write_r+0x1e>
 80198c0:	682b      	ldr	r3, [r5, #0]
 80198c2:	b103      	cbz	r3, 80198c6 <_write_r+0x1e>
 80198c4:	6023      	str	r3, [r4, #0]
 80198c6:	bd38      	pop	{r3, r4, r5, pc}
 80198c8:	2000bcc4 	.word	0x2000bcc4

080198cc <__swsetup_r>:
 80198cc:	4b32      	ldr	r3, [pc, #200]	; (8019998 <__swsetup_r+0xcc>)
 80198ce:	b570      	push	{r4, r5, r6, lr}
 80198d0:	681d      	ldr	r5, [r3, #0]
 80198d2:	4606      	mov	r6, r0
 80198d4:	460c      	mov	r4, r1
 80198d6:	b125      	cbz	r5, 80198e2 <__swsetup_r+0x16>
 80198d8:	69ab      	ldr	r3, [r5, #24]
 80198da:	b913      	cbnz	r3, 80198e2 <__swsetup_r+0x16>
 80198dc:	4628      	mov	r0, r5
 80198de:	f7ff fb7b 	bl	8018fd8 <__sinit>
 80198e2:	4b2e      	ldr	r3, [pc, #184]	; (801999c <__swsetup_r+0xd0>)
 80198e4:	429c      	cmp	r4, r3
 80198e6:	d10f      	bne.n	8019908 <__swsetup_r+0x3c>
 80198e8:	686c      	ldr	r4, [r5, #4]
 80198ea:	89a3      	ldrh	r3, [r4, #12]
 80198ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80198f0:	0719      	lsls	r1, r3, #28
 80198f2:	d42c      	bmi.n	801994e <__swsetup_r+0x82>
 80198f4:	06dd      	lsls	r5, r3, #27
 80198f6:	d411      	bmi.n	801991c <__swsetup_r+0x50>
 80198f8:	2309      	movs	r3, #9
 80198fa:	6033      	str	r3, [r6, #0]
 80198fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019900:	81a3      	strh	r3, [r4, #12]
 8019902:	f04f 30ff 	mov.w	r0, #4294967295
 8019906:	e03e      	b.n	8019986 <__swsetup_r+0xba>
 8019908:	4b25      	ldr	r3, [pc, #148]	; (80199a0 <__swsetup_r+0xd4>)
 801990a:	429c      	cmp	r4, r3
 801990c:	d101      	bne.n	8019912 <__swsetup_r+0x46>
 801990e:	68ac      	ldr	r4, [r5, #8]
 8019910:	e7eb      	b.n	80198ea <__swsetup_r+0x1e>
 8019912:	4b24      	ldr	r3, [pc, #144]	; (80199a4 <__swsetup_r+0xd8>)
 8019914:	429c      	cmp	r4, r3
 8019916:	bf08      	it	eq
 8019918:	68ec      	ldreq	r4, [r5, #12]
 801991a:	e7e6      	b.n	80198ea <__swsetup_r+0x1e>
 801991c:	0758      	lsls	r0, r3, #29
 801991e:	d512      	bpl.n	8019946 <__swsetup_r+0x7a>
 8019920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019922:	b141      	cbz	r1, 8019936 <__swsetup_r+0x6a>
 8019924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019928:	4299      	cmp	r1, r3
 801992a:	d002      	beq.n	8019932 <__swsetup_r+0x66>
 801992c:	4630      	mov	r0, r6
 801992e:	f7ff f9c3 	bl	8018cb8 <_free_r>
 8019932:	2300      	movs	r3, #0
 8019934:	6363      	str	r3, [r4, #52]	; 0x34
 8019936:	89a3      	ldrh	r3, [r4, #12]
 8019938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801993c:	81a3      	strh	r3, [r4, #12]
 801993e:	2300      	movs	r3, #0
 8019940:	6063      	str	r3, [r4, #4]
 8019942:	6923      	ldr	r3, [r4, #16]
 8019944:	6023      	str	r3, [r4, #0]
 8019946:	89a3      	ldrh	r3, [r4, #12]
 8019948:	f043 0308 	orr.w	r3, r3, #8
 801994c:	81a3      	strh	r3, [r4, #12]
 801994e:	6923      	ldr	r3, [r4, #16]
 8019950:	b94b      	cbnz	r3, 8019966 <__swsetup_r+0x9a>
 8019952:	89a3      	ldrh	r3, [r4, #12]
 8019954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801995c:	d003      	beq.n	8019966 <__swsetup_r+0x9a>
 801995e:	4621      	mov	r1, r4
 8019960:	4630      	mov	r0, r6
 8019962:	f000 f931 	bl	8019bc8 <__smakebuf_r>
 8019966:	89a0      	ldrh	r0, [r4, #12]
 8019968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801996c:	f010 0301 	ands.w	r3, r0, #1
 8019970:	d00a      	beq.n	8019988 <__swsetup_r+0xbc>
 8019972:	2300      	movs	r3, #0
 8019974:	60a3      	str	r3, [r4, #8]
 8019976:	6963      	ldr	r3, [r4, #20]
 8019978:	425b      	negs	r3, r3
 801997a:	61a3      	str	r3, [r4, #24]
 801997c:	6923      	ldr	r3, [r4, #16]
 801997e:	b943      	cbnz	r3, 8019992 <__swsetup_r+0xc6>
 8019980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019984:	d1ba      	bne.n	80198fc <__swsetup_r+0x30>
 8019986:	bd70      	pop	{r4, r5, r6, pc}
 8019988:	0781      	lsls	r1, r0, #30
 801998a:	bf58      	it	pl
 801998c:	6963      	ldrpl	r3, [r4, #20]
 801998e:	60a3      	str	r3, [r4, #8]
 8019990:	e7f4      	b.n	801997c <__swsetup_r+0xb0>
 8019992:	2000      	movs	r0, #0
 8019994:	e7f7      	b.n	8019986 <__swsetup_r+0xba>
 8019996:	bf00      	nop
 8019998:	2000001c 	.word	0x2000001c
 801999c:	0801de68 	.word	0x0801de68
 80199a0:	0801de88 	.word	0x0801de88
 80199a4:	0801de48 	.word	0x0801de48

080199a8 <abort>:
 80199a8:	b508      	push	{r3, lr}
 80199aa:	2006      	movs	r0, #6
 80199ac:	f000 f98e 	bl	8019ccc <raise>
 80199b0:	2001      	movs	r0, #1
 80199b2:	f7e7 fea3 	bl	80016fc <_exit>
	...

080199b8 <_close_r>:
 80199b8:	b538      	push	{r3, r4, r5, lr}
 80199ba:	4d06      	ldr	r5, [pc, #24]	; (80199d4 <_close_r+0x1c>)
 80199bc:	2300      	movs	r3, #0
 80199be:	4604      	mov	r4, r0
 80199c0:	4608      	mov	r0, r1
 80199c2:	602b      	str	r3, [r5, #0]
 80199c4:	f7e7 fedd 	bl	8001782 <_close>
 80199c8:	1c43      	adds	r3, r0, #1
 80199ca:	d102      	bne.n	80199d2 <_close_r+0x1a>
 80199cc:	682b      	ldr	r3, [r5, #0]
 80199ce:	b103      	cbz	r3, 80199d2 <_close_r+0x1a>
 80199d0:	6023      	str	r3, [r4, #0]
 80199d2:	bd38      	pop	{r3, r4, r5, pc}
 80199d4:	2000bcc4 	.word	0x2000bcc4

080199d8 <__sflush_r>:
 80199d8:	898a      	ldrh	r2, [r1, #12]
 80199da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199de:	4605      	mov	r5, r0
 80199e0:	0710      	lsls	r0, r2, #28
 80199e2:	460c      	mov	r4, r1
 80199e4:	d458      	bmi.n	8019a98 <__sflush_r+0xc0>
 80199e6:	684b      	ldr	r3, [r1, #4]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	dc05      	bgt.n	80199f8 <__sflush_r+0x20>
 80199ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	dc02      	bgt.n	80199f8 <__sflush_r+0x20>
 80199f2:	2000      	movs	r0, #0
 80199f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199fa:	2e00      	cmp	r6, #0
 80199fc:	d0f9      	beq.n	80199f2 <__sflush_r+0x1a>
 80199fe:	2300      	movs	r3, #0
 8019a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019a04:	682f      	ldr	r7, [r5, #0]
 8019a06:	602b      	str	r3, [r5, #0]
 8019a08:	d032      	beq.n	8019a70 <__sflush_r+0x98>
 8019a0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019a0c:	89a3      	ldrh	r3, [r4, #12]
 8019a0e:	075a      	lsls	r2, r3, #29
 8019a10:	d505      	bpl.n	8019a1e <__sflush_r+0x46>
 8019a12:	6863      	ldr	r3, [r4, #4]
 8019a14:	1ac0      	subs	r0, r0, r3
 8019a16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019a18:	b10b      	cbz	r3, 8019a1e <__sflush_r+0x46>
 8019a1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019a1c:	1ac0      	subs	r0, r0, r3
 8019a1e:	2300      	movs	r3, #0
 8019a20:	4602      	mov	r2, r0
 8019a22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019a24:	6a21      	ldr	r1, [r4, #32]
 8019a26:	4628      	mov	r0, r5
 8019a28:	47b0      	blx	r6
 8019a2a:	1c43      	adds	r3, r0, #1
 8019a2c:	89a3      	ldrh	r3, [r4, #12]
 8019a2e:	d106      	bne.n	8019a3e <__sflush_r+0x66>
 8019a30:	6829      	ldr	r1, [r5, #0]
 8019a32:	291d      	cmp	r1, #29
 8019a34:	d82c      	bhi.n	8019a90 <__sflush_r+0xb8>
 8019a36:	4a2a      	ldr	r2, [pc, #168]	; (8019ae0 <__sflush_r+0x108>)
 8019a38:	40ca      	lsrs	r2, r1
 8019a3a:	07d6      	lsls	r6, r2, #31
 8019a3c:	d528      	bpl.n	8019a90 <__sflush_r+0xb8>
 8019a3e:	2200      	movs	r2, #0
 8019a40:	6062      	str	r2, [r4, #4]
 8019a42:	04d9      	lsls	r1, r3, #19
 8019a44:	6922      	ldr	r2, [r4, #16]
 8019a46:	6022      	str	r2, [r4, #0]
 8019a48:	d504      	bpl.n	8019a54 <__sflush_r+0x7c>
 8019a4a:	1c42      	adds	r2, r0, #1
 8019a4c:	d101      	bne.n	8019a52 <__sflush_r+0x7a>
 8019a4e:	682b      	ldr	r3, [r5, #0]
 8019a50:	b903      	cbnz	r3, 8019a54 <__sflush_r+0x7c>
 8019a52:	6560      	str	r0, [r4, #84]	; 0x54
 8019a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a56:	602f      	str	r7, [r5, #0]
 8019a58:	2900      	cmp	r1, #0
 8019a5a:	d0ca      	beq.n	80199f2 <__sflush_r+0x1a>
 8019a5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a60:	4299      	cmp	r1, r3
 8019a62:	d002      	beq.n	8019a6a <__sflush_r+0x92>
 8019a64:	4628      	mov	r0, r5
 8019a66:	f7ff f927 	bl	8018cb8 <_free_r>
 8019a6a:	2000      	movs	r0, #0
 8019a6c:	6360      	str	r0, [r4, #52]	; 0x34
 8019a6e:	e7c1      	b.n	80199f4 <__sflush_r+0x1c>
 8019a70:	6a21      	ldr	r1, [r4, #32]
 8019a72:	2301      	movs	r3, #1
 8019a74:	4628      	mov	r0, r5
 8019a76:	47b0      	blx	r6
 8019a78:	1c41      	adds	r1, r0, #1
 8019a7a:	d1c7      	bne.n	8019a0c <__sflush_r+0x34>
 8019a7c:	682b      	ldr	r3, [r5, #0]
 8019a7e:	2b00      	cmp	r3, #0
 8019a80:	d0c4      	beq.n	8019a0c <__sflush_r+0x34>
 8019a82:	2b1d      	cmp	r3, #29
 8019a84:	d001      	beq.n	8019a8a <__sflush_r+0xb2>
 8019a86:	2b16      	cmp	r3, #22
 8019a88:	d101      	bne.n	8019a8e <__sflush_r+0xb6>
 8019a8a:	602f      	str	r7, [r5, #0]
 8019a8c:	e7b1      	b.n	80199f2 <__sflush_r+0x1a>
 8019a8e:	89a3      	ldrh	r3, [r4, #12]
 8019a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a94:	81a3      	strh	r3, [r4, #12]
 8019a96:	e7ad      	b.n	80199f4 <__sflush_r+0x1c>
 8019a98:	690f      	ldr	r7, [r1, #16]
 8019a9a:	2f00      	cmp	r7, #0
 8019a9c:	d0a9      	beq.n	80199f2 <__sflush_r+0x1a>
 8019a9e:	0793      	lsls	r3, r2, #30
 8019aa0:	680e      	ldr	r6, [r1, #0]
 8019aa2:	bf08      	it	eq
 8019aa4:	694b      	ldreq	r3, [r1, #20]
 8019aa6:	600f      	str	r7, [r1, #0]
 8019aa8:	bf18      	it	ne
 8019aaa:	2300      	movne	r3, #0
 8019aac:	eba6 0807 	sub.w	r8, r6, r7
 8019ab0:	608b      	str	r3, [r1, #8]
 8019ab2:	f1b8 0f00 	cmp.w	r8, #0
 8019ab6:	dd9c      	ble.n	80199f2 <__sflush_r+0x1a>
 8019ab8:	6a21      	ldr	r1, [r4, #32]
 8019aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019abc:	4643      	mov	r3, r8
 8019abe:	463a      	mov	r2, r7
 8019ac0:	4628      	mov	r0, r5
 8019ac2:	47b0      	blx	r6
 8019ac4:	2800      	cmp	r0, #0
 8019ac6:	dc06      	bgt.n	8019ad6 <__sflush_r+0xfe>
 8019ac8:	89a3      	ldrh	r3, [r4, #12]
 8019aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019ace:	81a3      	strh	r3, [r4, #12]
 8019ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8019ad4:	e78e      	b.n	80199f4 <__sflush_r+0x1c>
 8019ad6:	4407      	add	r7, r0
 8019ad8:	eba8 0800 	sub.w	r8, r8, r0
 8019adc:	e7e9      	b.n	8019ab2 <__sflush_r+0xda>
 8019ade:	bf00      	nop
 8019ae0:	20400001 	.word	0x20400001

08019ae4 <_fflush_r>:
 8019ae4:	b538      	push	{r3, r4, r5, lr}
 8019ae6:	690b      	ldr	r3, [r1, #16]
 8019ae8:	4605      	mov	r5, r0
 8019aea:	460c      	mov	r4, r1
 8019aec:	b913      	cbnz	r3, 8019af4 <_fflush_r+0x10>
 8019aee:	2500      	movs	r5, #0
 8019af0:	4628      	mov	r0, r5
 8019af2:	bd38      	pop	{r3, r4, r5, pc}
 8019af4:	b118      	cbz	r0, 8019afe <_fflush_r+0x1a>
 8019af6:	6983      	ldr	r3, [r0, #24]
 8019af8:	b90b      	cbnz	r3, 8019afe <_fflush_r+0x1a>
 8019afa:	f7ff fa6d 	bl	8018fd8 <__sinit>
 8019afe:	4b14      	ldr	r3, [pc, #80]	; (8019b50 <_fflush_r+0x6c>)
 8019b00:	429c      	cmp	r4, r3
 8019b02:	d11b      	bne.n	8019b3c <_fflush_r+0x58>
 8019b04:	686c      	ldr	r4, [r5, #4]
 8019b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d0ef      	beq.n	8019aee <_fflush_r+0xa>
 8019b0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019b10:	07d0      	lsls	r0, r2, #31
 8019b12:	d404      	bmi.n	8019b1e <_fflush_r+0x3a>
 8019b14:	0599      	lsls	r1, r3, #22
 8019b16:	d402      	bmi.n	8019b1e <_fflush_r+0x3a>
 8019b18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b1a:	f7ff fb0d 	bl	8019138 <__retarget_lock_acquire_recursive>
 8019b1e:	4628      	mov	r0, r5
 8019b20:	4621      	mov	r1, r4
 8019b22:	f7ff ff59 	bl	80199d8 <__sflush_r>
 8019b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019b28:	07da      	lsls	r2, r3, #31
 8019b2a:	4605      	mov	r5, r0
 8019b2c:	d4e0      	bmi.n	8019af0 <_fflush_r+0xc>
 8019b2e:	89a3      	ldrh	r3, [r4, #12]
 8019b30:	059b      	lsls	r3, r3, #22
 8019b32:	d4dd      	bmi.n	8019af0 <_fflush_r+0xc>
 8019b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b36:	f7ff fb00 	bl	801913a <__retarget_lock_release_recursive>
 8019b3a:	e7d9      	b.n	8019af0 <_fflush_r+0xc>
 8019b3c:	4b05      	ldr	r3, [pc, #20]	; (8019b54 <_fflush_r+0x70>)
 8019b3e:	429c      	cmp	r4, r3
 8019b40:	d101      	bne.n	8019b46 <_fflush_r+0x62>
 8019b42:	68ac      	ldr	r4, [r5, #8]
 8019b44:	e7df      	b.n	8019b06 <_fflush_r+0x22>
 8019b46:	4b04      	ldr	r3, [pc, #16]	; (8019b58 <_fflush_r+0x74>)
 8019b48:	429c      	cmp	r4, r3
 8019b4a:	bf08      	it	eq
 8019b4c:	68ec      	ldreq	r4, [r5, #12]
 8019b4e:	e7da      	b.n	8019b06 <_fflush_r+0x22>
 8019b50:	0801de68 	.word	0x0801de68
 8019b54:	0801de88 	.word	0x0801de88
 8019b58:	0801de48 	.word	0x0801de48

08019b5c <_lseek_r>:
 8019b5c:	b538      	push	{r3, r4, r5, lr}
 8019b5e:	4d07      	ldr	r5, [pc, #28]	; (8019b7c <_lseek_r+0x20>)
 8019b60:	4604      	mov	r4, r0
 8019b62:	4608      	mov	r0, r1
 8019b64:	4611      	mov	r1, r2
 8019b66:	2200      	movs	r2, #0
 8019b68:	602a      	str	r2, [r5, #0]
 8019b6a:	461a      	mov	r2, r3
 8019b6c:	f7e7 fe30 	bl	80017d0 <_lseek>
 8019b70:	1c43      	adds	r3, r0, #1
 8019b72:	d102      	bne.n	8019b7a <_lseek_r+0x1e>
 8019b74:	682b      	ldr	r3, [r5, #0]
 8019b76:	b103      	cbz	r3, 8019b7a <_lseek_r+0x1e>
 8019b78:	6023      	str	r3, [r4, #0]
 8019b7a:	bd38      	pop	{r3, r4, r5, pc}
 8019b7c:	2000bcc4 	.word	0x2000bcc4

08019b80 <__swhatbuf_r>:
 8019b80:	b570      	push	{r4, r5, r6, lr}
 8019b82:	460e      	mov	r6, r1
 8019b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019b88:	2900      	cmp	r1, #0
 8019b8a:	b096      	sub	sp, #88	; 0x58
 8019b8c:	4614      	mov	r4, r2
 8019b8e:	461d      	mov	r5, r3
 8019b90:	da07      	bge.n	8019ba2 <__swhatbuf_r+0x22>
 8019b92:	2300      	movs	r3, #0
 8019b94:	602b      	str	r3, [r5, #0]
 8019b96:	89b3      	ldrh	r3, [r6, #12]
 8019b98:	061a      	lsls	r2, r3, #24
 8019b9a:	d410      	bmi.n	8019bbe <__swhatbuf_r+0x3e>
 8019b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019ba0:	e00e      	b.n	8019bc0 <__swhatbuf_r+0x40>
 8019ba2:	466a      	mov	r2, sp
 8019ba4:	f000 f8ae 	bl	8019d04 <_fstat_r>
 8019ba8:	2800      	cmp	r0, #0
 8019baa:	dbf2      	blt.n	8019b92 <__swhatbuf_r+0x12>
 8019bac:	9a01      	ldr	r2, [sp, #4]
 8019bae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019bb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019bb6:	425a      	negs	r2, r3
 8019bb8:	415a      	adcs	r2, r3
 8019bba:	602a      	str	r2, [r5, #0]
 8019bbc:	e7ee      	b.n	8019b9c <__swhatbuf_r+0x1c>
 8019bbe:	2340      	movs	r3, #64	; 0x40
 8019bc0:	2000      	movs	r0, #0
 8019bc2:	6023      	str	r3, [r4, #0]
 8019bc4:	b016      	add	sp, #88	; 0x58
 8019bc6:	bd70      	pop	{r4, r5, r6, pc}

08019bc8 <__smakebuf_r>:
 8019bc8:	898b      	ldrh	r3, [r1, #12]
 8019bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019bcc:	079d      	lsls	r5, r3, #30
 8019bce:	4606      	mov	r6, r0
 8019bd0:	460c      	mov	r4, r1
 8019bd2:	d507      	bpl.n	8019be4 <__smakebuf_r+0x1c>
 8019bd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019bd8:	6023      	str	r3, [r4, #0]
 8019bda:	6123      	str	r3, [r4, #16]
 8019bdc:	2301      	movs	r3, #1
 8019bde:	6163      	str	r3, [r4, #20]
 8019be0:	b002      	add	sp, #8
 8019be2:	bd70      	pop	{r4, r5, r6, pc}
 8019be4:	ab01      	add	r3, sp, #4
 8019be6:	466a      	mov	r2, sp
 8019be8:	f7ff ffca 	bl	8019b80 <__swhatbuf_r>
 8019bec:	9900      	ldr	r1, [sp, #0]
 8019bee:	4605      	mov	r5, r0
 8019bf0:	4630      	mov	r0, r6
 8019bf2:	f7ff f8b1 	bl	8018d58 <_malloc_r>
 8019bf6:	b948      	cbnz	r0, 8019c0c <__smakebuf_r+0x44>
 8019bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019bfc:	059a      	lsls	r2, r3, #22
 8019bfe:	d4ef      	bmi.n	8019be0 <__smakebuf_r+0x18>
 8019c00:	f023 0303 	bic.w	r3, r3, #3
 8019c04:	f043 0302 	orr.w	r3, r3, #2
 8019c08:	81a3      	strh	r3, [r4, #12]
 8019c0a:	e7e3      	b.n	8019bd4 <__smakebuf_r+0xc>
 8019c0c:	4b0d      	ldr	r3, [pc, #52]	; (8019c44 <__smakebuf_r+0x7c>)
 8019c0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8019c10:	89a3      	ldrh	r3, [r4, #12]
 8019c12:	6020      	str	r0, [r4, #0]
 8019c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c18:	81a3      	strh	r3, [r4, #12]
 8019c1a:	9b00      	ldr	r3, [sp, #0]
 8019c1c:	6163      	str	r3, [r4, #20]
 8019c1e:	9b01      	ldr	r3, [sp, #4]
 8019c20:	6120      	str	r0, [r4, #16]
 8019c22:	b15b      	cbz	r3, 8019c3c <__smakebuf_r+0x74>
 8019c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c28:	4630      	mov	r0, r6
 8019c2a:	f000 f87d 	bl	8019d28 <_isatty_r>
 8019c2e:	b128      	cbz	r0, 8019c3c <__smakebuf_r+0x74>
 8019c30:	89a3      	ldrh	r3, [r4, #12]
 8019c32:	f023 0303 	bic.w	r3, r3, #3
 8019c36:	f043 0301 	orr.w	r3, r3, #1
 8019c3a:	81a3      	strh	r3, [r4, #12]
 8019c3c:	89a0      	ldrh	r0, [r4, #12]
 8019c3e:	4305      	orrs	r5, r0
 8019c40:	81a5      	strh	r5, [r4, #12]
 8019c42:	e7cd      	b.n	8019be0 <__smakebuf_r+0x18>
 8019c44:	08018f71 	.word	0x08018f71

08019c48 <_malloc_usable_size_r>:
 8019c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c4c:	1f18      	subs	r0, r3, #4
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	bfbc      	itt	lt
 8019c52:	580b      	ldrlt	r3, [r1, r0]
 8019c54:	18c0      	addlt	r0, r0, r3
 8019c56:	4770      	bx	lr

08019c58 <_read_r>:
 8019c58:	b538      	push	{r3, r4, r5, lr}
 8019c5a:	4d07      	ldr	r5, [pc, #28]	; (8019c78 <_read_r+0x20>)
 8019c5c:	4604      	mov	r4, r0
 8019c5e:	4608      	mov	r0, r1
 8019c60:	4611      	mov	r1, r2
 8019c62:	2200      	movs	r2, #0
 8019c64:	602a      	str	r2, [r5, #0]
 8019c66:	461a      	mov	r2, r3
 8019c68:	f7e7 fd52 	bl	8001710 <_read>
 8019c6c:	1c43      	adds	r3, r0, #1
 8019c6e:	d102      	bne.n	8019c76 <_read_r+0x1e>
 8019c70:	682b      	ldr	r3, [r5, #0]
 8019c72:	b103      	cbz	r3, 8019c76 <_read_r+0x1e>
 8019c74:	6023      	str	r3, [r4, #0]
 8019c76:	bd38      	pop	{r3, r4, r5, pc}
 8019c78:	2000bcc4 	.word	0x2000bcc4

08019c7c <_raise_r>:
 8019c7c:	291f      	cmp	r1, #31
 8019c7e:	b538      	push	{r3, r4, r5, lr}
 8019c80:	4604      	mov	r4, r0
 8019c82:	460d      	mov	r5, r1
 8019c84:	d904      	bls.n	8019c90 <_raise_r+0x14>
 8019c86:	2316      	movs	r3, #22
 8019c88:	6003      	str	r3, [r0, #0]
 8019c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8019c8e:	bd38      	pop	{r3, r4, r5, pc}
 8019c90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019c92:	b112      	cbz	r2, 8019c9a <_raise_r+0x1e>
 8019c94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019c98:	b94b      	cbnz	r3, 8019cae <_raise_r+0x32>
 8019c9a:	4620      	mov	r0, r4
 8019c9c:	f000 f830 	bl	8019d00 <_getpid_r>
 8019ca0:	462a      	mov	r2, r5
 8019ca2:	4601      	mov	r1, r0
 8019ca4:	4620      	mov	r0, r4
 8019ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019caa:	f000 b817 	b.w	8019cdc <_kill_r>
 8019cae:	2b01      	cmp	r3, #1
 8019cb0:	d00a      	beq.n	8019cc8 <_raise_r+0x4c>
 8019cb2:	1c59      	adds	r1, r3, #1
 8019cb4:	d103      	bne.n	8019cbe <_raise_r+0x42>
 8019cb6:	2316      	movs	r3, #22
 8019cb8:	6003      	str	r3, [r0, #0]
 8019cba:	2001      	movs	r0, #1
 8019cbc:	e7e7      	b.n	8019c8e <_raise_r+0x12>
 8019cbe:	2400      	movs	r4, #0
 8019cc0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019cc4:	4628      	mov	r0, r5
 8019cc6:	4798      	blx	r3
 8019cc8:	2000      	movs	r0, #0
 8019cca:	e7e0      	b.n	8019c8e <_raise_r+0x12>

08019ccc <raise>:
 8019ccc:	4b02      	ldr	r3, [pc, #8]	; (8019cd8 <raise+0xc>)
 8019cce:	4601      	mov	r1, r0
 8019cd0:	6818      	ldr	r0, [r3, #0]
 8019cd2:	f7ff bfd3 	b.w	8019c7c <_raise_r>
 8019cd6:	bf00      	nop
 8019cd8:	2000001c 	.word	0x2000001c

08019cdc <_kill_r>:
 8019cdc:	b538      	push	{r3, r4, r5, lr}
 8019cde:	4d07      	ldr	r5, [pc, #28]	; (8019cfc <_kill_r+0x20>)
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	4604      	mov	r4, r0
 8019ce4:	4608      	mov	r0, r1
 8019ce6:	4611      	mov	r1, r2
 8019ce8:	602b      	str	r3, [r5, #0]
 8019cea:	f7e7 fcf5 	bl	80016d8 <_kill>
 8019cee:	1c43      	adds	r3, r0, #1
 8019cf0:	d102      	bne.n	8019cf8 <_kill_r+0x1c>
 8019cf2:	682b      	ldr	r3, [r5, #0]
 8019cf4:	b103      	cbz	r3, 8019cf8 <_kill_r+0x1c>
 8019cf6:	6023      	str	r3, [r4, #0]
 8019cf8:	bd38      	pop	{r3, r4, r5, pc}
 8019cfa:	bf00      	nop
 8019cfc:	2000bcc4 	.word	0x2000bcc4

08019d00 <_getpid_r>:
 8019d00:	f7e7 bce2 	b.w	80016c8 <_getpid>

08019d04 <_fstat_r>:
 8019d04:	b538      	push	{r3, r4, r5, lr}
 8019d06:	4d07      	ldr	r5, [pc, #28]	; (8019d24 <_fstat_r+0x20>)
 8019d08:	2300      	movs	r3, #0
 8019d0a:	4604      	mov	r4, r0
 8019d0c:	4608      	mov	r0, r1
 8019d0e:	4611      	mov	r1, r2
 8019d10:	602b      	str	r3, [r5, #0]
 8019d12:	f7e7 fd42 	bl	800179a <_fstat>
 8019d16:	1c43      	adds	r3, r0, #1
 8019d18:	d102      	bne.n	8019d20 <_fstat_r+0x1c>
 8019d1a:	682b      	ldr	r3, [r5, #0]
 8019d1c:	b103      	cbz	r3, 8019d20 <_fstat_r+0x1c>
 8019d1e:	6023      	str	r3, [r4, #0]
 8019d20:	bd38      	pop	{r3, r4, r5, pc}
 8019d22:	bf00      	nop
 8019d24:	2000bcc4 	.word	0x2000bcc4

08019d28 <_isatty_r>:
 8019d28:	b538      	push	{r3, r4, r5, lr}
 8019d2a:	4d06      	ldr	r5, [pc, #24]	; (8019d44 <_isatty_r+0x1c>)
 8019d2c:	2300      	movs	r3, #0
 8019d2e:	4604      	mov	r4, r0
 8019d30:	4608      	mov	r0, r1
 8019d32:	602b      	str	r3, [r5, #0]
 8019d34:	f7e7 fd41 	bl	80017ba <_isatty>
 8019d38:	1c43      	adds	r3, r0, #1
 8019d3a:	d102      	bne.n	8019d42 <_isatty_r+0x1a>
 8019d3c:	682b      	ldr	r3, [r5, #0]
 8019d3e:	b103      	cbz	r3, 8019d42 <_isatty_r+0x1a>
 8019d40:	6023      	str	r3, [r4, #0]
 8019d42:	bd38      	pop	{r3, r4, r5, pc}
 8019d44:	2000bcc4 	.word	0x2000bcc4

08019d48 <_init>:
 8019d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d4a:	bf00      	nop
 8019d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d4e:	bc08      	pop	{r3}
 8019d50:	469e      	mov	lr, r3
 8019d52:	4770      	bx	lr

08019d54 <_fini>:
 8019d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d56:	bf00      	nop
 8019d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d5a:	bc08      	pop	{r3}
 8019d5c:	469e      	mov	lr, r3
 8019d5e:	4770      	bx	lr
