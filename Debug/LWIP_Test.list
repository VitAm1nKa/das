
LWIP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000193e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d88  08019574  08019574  00029574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d2fc  0801d2fc  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801d2fc  0801d2fc  0002d2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d304  0801d304  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d304  0801d304  0002d304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d308  0801d308  0002d308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801d30c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bd38  20000080  0801d38c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000bdb8  0801d38c  0003bdb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004e6f7  00000000  00000000  000300b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008dd6  00000000  00000000  0007e7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002628  00000000  00000000  00087580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002520  00000000  00000000  00089ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00011b22  00000000  00000000  0008c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003b95f  00000000  00000000  0009dbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000feb3d  00000000  00000000  000d9549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d8086  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a618  00000000  00000000  001d80dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801955c 	.word	0x0801955c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0801955c 	.word	0x0801955c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <DAS_Init>:
pulse_channel pulse_channels[2];
//--------------------------------------------------
int32_t max_requests;
//--------------------------------------------------
void DAS_Init(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	channels[0].id = 0;
 800059c:	4b24      	ldr	r3, [pc, #144]	; (8000630 <DAS_Init+0x98>)
 800059e:	2200      	movs	r2, #0
 80005a0:	701a      	strb	r2, [r3, #0]
	channels[0].mode = DAS_ANALOG_MODE_CURR; // DAS_ANALOG_MODE_OFF
 80005a2:	4b23      	ldr	r3, [pc, #140]	; (8000630 <DAS_Init+0x98>)
 80005a4:	2202      	movs	r2, #2
 80005a6:	705a      	strb	r2, [r3, #1]
	channels[0].value.value = 0.0;
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <DAS_Init+0x98>)
 80005aa:	f04f 0200 	mov.w	r2, #0
 80005ae:	605a      	str	r2, [r3, #4]
	channels[1].id = 1;
 80005b0:	4b1f      	ldr	r3, [pc, #124]	; (8000630 <DAS_Init+0x98>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	721a      	strb	r2, [r3, #8]
	channels[1].mode = DAS_ANALOG_MODE_CURR; // DAS_ANALOG_MODE_OFF
 80005b6:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <DAS_Init+0x98>)
 80005b8:	2202      	movs	r2, #2
 80005ba:	725a      	strb	r2, [r3, #9]
	channels[1].value.value = 0.0;
 80005bc:	4b1c      	ldr	r3, [pc, #112]	; (8000630 <DAS_Init+0x98>)
 80005be:	f04f 0200 	mov.w	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
	channels[2].id = 2;
 80005c4:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <DAS_Init+0x98>)
 80005c6:	2202      	movs	r2, #2
 80005c8:	741a      	strb	r2, [r3, #16]
	channels[2].mode = DAS_ANALOG_MODE_CURR; // DAS_ANALOG_MODE_OFF
 80005ca:	4b19      	ldr	r3, [pc, #100]	; (8000630 <DAS_Init+0x98>)
 80005cc:	2202      	movs	r2, #2
 80005ce:	745a      	strb	r2, [r3, #17]
	channels[2].value.value = 0.0;
 80005d0:	4b17      	ldr	r3, [pc, #92]	; (8000630 <DAS_Init+0x98>)
 80005d2:	f04f 0200 	mov.w	r2, #0
 80005d6:	615a      	str	r2, [r3, #20]
	channels[3].id = 3;
 80005d8:	4b15      	ldr	r3, [pc, #84]	; (8000630 <DAS_Init+0x98>)
 80005da:	2203      	movs	r2, #3
 80005dc:	761a      	strb	r2, [r3, #24]
	channels[3].mode = DAS_ANALOG_MODE_CURR; // DAS_ANALOG_MODE_OFF
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <DAS_Init+0x98>)
 80005e0:	2202      	movs	r2, #2
 80005e2:	765a      	strb	r2, [r3, #25]
	channels[3].value.value = 0.0;
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <DAS_Init+0x98>)
 80005e6:	f04f 0200 	mov.w	r2, #0
 80005ea:	61da      	str	r2, [r3, #28]

	pulse_channels[0].id = 0;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <DAS_Init+0x9c>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
	pulse_channels[0].mode = DAS_PULSE_MODE_COUNTER; // DAS_PULSE_MODE_OFF
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <DAS_Init+0x9c>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	705a      	strb	r2, [r3, #1]
	pulse_channels[0].frequency = 0.0f;
 80005f8:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <DAS_Init+0x9c>)
 80005fa:	f04f 0200 	mov.w	r2, #0
 80005fe:	609a      	str	r2, [r3, #8]
	pulse_channels[0].count = 0;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <DAS_Init+0x9c>)
 8000602:	2200      	movs	r2, #0
 8000604:	605a      	str	r2, [r3, #4]

	pulse_channels[1].id = 1;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <DAS_Init+0x9c>)
 8000608:	2201      	movs	r2, #1
 800060a:	731a      	strb	r2, [r3, #12]
	pulse_channels[1].mode = DAS_PULSE_MODE_COUNTER; // DAS_PULSE_MODE_OFF
 800060c:	4b09      	ldr	r3, [pc, #36]	; (8000634 <DAS_Init+0x9c>)
 800060e:	2201      	movs	r2, #1
 8000610:	735a      	strb	r2, [r3, #13]
	pulse_channels[1].frequency = 0.0f;
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <DAS_Init+0x9c>)
 8000614:	f04f 0200 	mov.w	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
	pulse_channels[1].count = 0;
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <DAS_Init+0x9c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]

	max_requests = 5;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <DAS_Init+0xa0>)
 8000622:	2205      	movs	r2, #5
 8000624:	601a      	str	r2, [r3, #0]
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062e:	4770      	bx	lr
 8000630:	20005184 	.word	0x20005184
 8000634:	200051a4 	.word	0x200051a4
 8000638:	20005020 	.word	0x20005020

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fd16 	bl	8001070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f81a 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f000 f91e 	bl	8000888 <MX_GPIO_Init>
  MX_DMA_Init();
 800064c:	f000 f8fc 	bl	8000848 <MX_DMA_Init>
  MX_ADC1_Init();
 8000650:	f000 f87e 	bl	8000750 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000654:	f004 fbdc 	bl	8004e10 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000658:	4a05      	ldr	r2, [pc, #20]	; (8000670 <main+0x34>)
 800065a:	2100      	movs	r1, #0
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <main+0x38>)
 800065e:	f004 fc36 	bl	8004ece <osThreadNew>
 8000662:	4603      	mov	r3, r0
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <main+0x3c>)
 8000666:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000668:	f004 fbf6 	bl	8004e58 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x30>
 800066e:	bf00      	nop
 8000670:	0801cfe8 	.word	0x0801cfe8
 8000674:	08000b29 	.word	0x08000b29
 8000678:	200051bc 	.word	0x200051bc

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f017 ff4c 	bl	8018528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80006ec:	2306      	movs	r3, #6
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f0:	23a8      	movs	r3, #168	; 0xa8
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f002 febf 	bl	8003484 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 fa50 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2105      	movs	r1, #5
 800072e:	4618      	mov	r0, r3
 8000730:	f003 f920 	bl	8003974 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073a:	f000 fa39 	bl	8000bb0 <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000762:	4b36      	ldr	r3, [pc, #216]	; (800083c <MX_ADC1_Init+0xec>)
 8000764:	4a36      	ldr	r2, [pc, #216]	; (8000840 <MX_ADC1_Init+0xf0>)
 8000766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000768:	4b34      	ldr	r3, [pc, #208]	; (800083c <MX_ADC1_Init+0xec>)
 800076a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800076e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_ADC1_Init+0xec>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <MX_ADC1_Init+0xec>)
 8000778:	2201      	movs	r2, #1
 800077a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800077c:	4b2f      	ldr	r3, [pc, #188]	; (800083c <MX_ADC1_Init+0xec>)
 800077e:	2200      	movs	r2, #0
 8000780:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000782:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_ADC1_Init+0xec>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <MX_ADC1_Init+0xec>)
 800078c:	2200      	movs	r2, #0
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000790:	4b2a      	ldr	r3, [pc, #168]	; (800083c <MX_ADC1_Init+0xec>)
 8000792:	4a2c      	ldr	r2, [pc, #176]	; (8000844 <MX_ADC1_Init+0xf4>)
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_ADC1_Init+0xec>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800079c:	4b27      	ldr	r3, [pc, #156]	; (800083c <MX_ADC1_Init+0xec>)
 800079e:	2204      	movs	r2, #4
 80007a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_ADC1_Init+0xec>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007aa:	4b24      	ldr	r3, [pc, #144]	; (800083c <MX_ADC1_Init+0xec>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b0:	4822      	ldr	r0, [pc, #136]	; (800083c <MX_ADC1_Init+0xec>)
 80007b2:	f000 fcc3 	bl	800113c <HAL_ADC_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007bc:	f000 f9f8 	bl	8000bb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007c0:	230a      	movs	r3, #10
 80007c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c4:	2301      	movs	r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007cc:	463b      	mov	r3, r7
 80007ce:	4619      	mov	r1, r3
 80007d0:	481a      	ldr	r0, [pc, #104]	; (800083c <MX_ADC1_Init+0xec>)
 80007d2:	f000 fcf7 	bl	80011c4 <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007dc:	f000 f9e8 	bl	8000bb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80007e0:	230c      	movs	r3, #12
 80007e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <MX_ADC1_Init+0xec>)
 80007ee:	f000 fce9 	bl	80011c4 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80007f8:	f000 f9da 	bl	8000bb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80007fc:	230d      	movs	r3, #13
 80007fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000800:	2303      	movs	r3, #3
 8000802:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000804:	463b      	mov	r3, r7
 8000806:	4619      	mov	r1, r3
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_ADC1_Init+0xec>)
 800080a:	f000 fcdb 	bl	80011c4 <HAL_ADC_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000814:	f000 f9cc 	bl	8000bb0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800081c:	2304      	movs	r3, #4
 800081e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_ADC1_Init+0xec>)
 8000826:	f000 fccd 	bl	80011c4 <HAL_ADC_ConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000830:	f000 f9be 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200051c4 	.word	0x200051c4
 8000840:	40012000 	.word	0x40012000
 8000844:	0f000001 	.word	0x0f000001

08000848 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_DMA_Init+0x3c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a0b      	ldr	r2, [pc, #44]	; (8000884 <MX_DMA_Init+0x3c>)
 8000858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_DMA_Init+0x3c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2105      	movs	r1, #5
 800086e:	2038      	movs	r0, #56	; 0x38
 8000870:	f000 ff7e 	bl	8001770 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000874:	2038      	movs	r0, #56	; 0x38
 8000876:	f000 ff97 	bl	80017a8 <HAL_NVIC_EnableIRQ>

}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b31      	ldr	r3, [pc, #196]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a30      	ldr	r2, [pc, #192]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b2e      	ldr	r3, [pc, #184]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	4b2a      	ldr	r3, [pc, #168]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a29      	ldr	r2, [pc, #164]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b27      	ldr	r3, [pc, #156]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a22      	ldr	r2, [pc, #136]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b20      	ldr	r3, [pc, #128]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b1c      	ldr	r3, [pc, #112]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <MX_GPIO_Init+0xe0>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_GPIO_Init+0xe0>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LedRed_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000914:	4815      	ldr	r0, [pc, #84]	; (800096c <MX_GPIO_Init+0xe4>)
 8000916:	f002 fd81 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LedGreen_Pin|LedBlue_Pin, GPIO_PIN_RESET);
 800091a:	2200      	movs	r2, #0
 800091c:	2103      	movs	r1, #3
 800091e:	4814      	ldr	r0, [pc, #80]	; (8000970 <MX_GPIO_Init+0xe8>)
 8000920:	f002 fd7c 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LedRed_Pin PA10 */
  GPIO_InitStruct.Pin = LedRed_Pin|GPIO_PIN_10;
 8000924:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 0314 	add.w	r3, r7, #20
 800093a:	4619      	mov	r1, r3
 800093c:	480b      	ldr	r0, [pc, #44]	; (800096c <MX_GPIO_Init+0xe4>)
 800093e:	f002 fbd1 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LedGreen_Pin LedBlue_Pin */
  GPIO_InitStruct.Pin = LedGreen_Pin|LedBlue_Pin;
 8000942:	2303      	movs	r3, #3
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_GPIO_Init+0xe8>)
 800095a:	f002 fbc3 	bl	80030e4 <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800
 800096c:	40020000 	.word	0x40020000
 8000970:	40020400 	.word	0x40020400

08000974 <client_socket_thread>:

unsigned char *out_buffer;
char buffer [150];

static void client_socket_thread(void *arg)
{
 8000974:	b590      	push	{r4, r7, lr}
 8000976:	b08f      	sub	sp, #60	; 0x3c
 8000978:	af02      	add	r7, sp, #8
 800097a:	6078      	str	r0, [r7, #4]
	int buflen = 150;
 800097c:	2396      	movs	r3, #150	; 0x96
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
	int ret, accept_sock;
	struct sockaddr_in remotehost;
	socklen_t sockaddrsize;
	struct_client_socket  *arg_client_socket;
	arg_client_socket = (struct_client_socket *) arg;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t das_len;

	remotehost = arg_client_socket->remotehost;
 8000984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000986:	f107 040c 	add.w	r4, r7, #12
 800098a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800098c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sockaddrsize = arg_client_socket->sockaddrsize;
 8000990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000992:	691b      	ldr	r3, [r3, #16]
 8000994:	60bb      	str	r3, [r7, #8]
	accept_sock = arg_client_socket->accept_sock;
 8000996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	627b      	str	r3, [r7, #36]	; 0x24

	for(;;)
	{
		ret = recvfrom(accept_sock, buffer, buflen, 0, (struct sockaddr *)&remotehost, &sockaddrsize);
 800099c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800099e:	f107 0308 	add.w	r3, r7, #8
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	9300      	str	r3, [sp, #0]
 80009aa:	2300      	movs	r3, #0
 80009ac:	4923      	ldr	r1, [pc, #140]	; (8000a3c <client_socket_thread+0xc8>)
 80009ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009b0:	f00b fa2c 	bl	800be0c <lwip_recvfrom>
 80009b4:	6238      	str	r0, [r7, #32]
		if(ret > 0)
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	ddef      	ble.n	800099c <client_socket_thread+0x28>
		{
			// HAL_GPIO_WritePin(GPIOB, LedGreen_Pin, GPIO_PIN_SET);
			out_buffer[ret] = 0;
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <client_socket_thread+0xcc>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	6a3b      	ldr	r3, [r7, #32]
 80009c2:	4413      	add	r3, r2
 80009c4:	2200      	movs	r2, #0
 80009c6:	701a      	strb	r2, [r3, #0]

			if(strcmp((char*)out_buffer, "-c") == 0)
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <client_socket_thread+0xcc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	491d      	ldr	r1, [pc, #116]	; (8000a44 <client_socket_thread+0xd0>)
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fbfe 	bl	80001d0 <strcmp>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d105      	bne.n	80009e6 <client_socket_thread+0x72>
			{
				// HAL_GPIO_WritePin(GPIOB, LedGreen_Pin, GPIO_PIN_RESET);
				close(accept_sock);
 80009da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009dc:	f00a fee8 	bl	800b7b0 <lwip_close>
				osThreadTerminate(NULL);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f004 fb06 	bl	8004ff2 <osThreadTerminate>
//
			// das_len = das_read(buffer, ret);
//
//			HAL_GPIO_WritePin(GPIOB, LedBlue_Pin, GPIO_PIN_SET);
//
			if(das_len > 0)
 80009e6:	8bfb      	ldrh	r3, [r7, #30]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d010      	beq.n	8000a0e <client_socket_thread+0x9a>
			{
			  HAL_GPIO_WritePin(GPIOB, LedBlue_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2102      	movs	r1, #2
 80009f0:	4815      	ldr	r0, [pc, #84]	; (8000a48 <client_socket_thread+0xd4>)
 80009f2:	f002 fd13 	bl	800341c <HAL_GPIO_WritePin>
			  sendto(accept_sock, buffer, das_len, 0, (struct sockaddr *)&remotehost, sockaddrsize);
 80009f6:	8bfa      	ldrh	r2, [r7, #30]
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2300      	movs	r3, #0
 8000a04:	490d      	ldr	r1, [pc, #52]	; (8000a3c <client_socket_thread+0xc8>)
 8000a06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a08:	f00b faf0 	bl	800bfec <lwip_sendto>
 8000a0c:	e00f      	b.n	8000a2e <client_socket_thread+0xba>
			}
			else
			{
			  HAL_GPIO_WritePin(GPIOA, LedRed_Pin, GPIO_PIN_SET);
 8000a0e:	2201      	movs	r2, #1
 8000a10:	2140      	movs	r1, #64	; 0x40
 8000a12:	480e      	ldr	r0, [pc, #56]	; (8000a4c <client_socket_thread+0xd8>)
 8000a14:	f002 fd02 	bl	800341c <HAL_GPIO_WritePin>
			  sendto(accept_sock, buffer, ret, 0, (struct sockaddr *)&remotehost, sockaddrsize);
 8000a18:	6a3a      	ldr	r2, [r7, #32]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	9301      	str	r3, [sp, #4]
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	9300      	str	r3, [sp, #0]
 8000a24:	2300      	movs	r3, #0
 8000a26:	4905      	ldr	r1, [pc, #20]	; (8000a3c <client_socket_thread+0xc8>)
 8000a28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a2a:	f00b fadf 	bl	800bfec <lwip_sendto>
			}

			close(accept_sock);
 8000a2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a30:	f00a febe 	bl	800b7b0 <lwip_close>
			osThreadTerminate(NULL);
 8000a34:	2000      	movs	r0, #0
 8000a36:	f004 fadc 	bl	8004ff2 <osThreadTerminate>
		ret = recvfrom(accept_sock, buffer, buflen, 0, (struct sockaddr *)&remotehost, &sockaddrsize);
 8000a3a:	e7af      	b.n	800099c <client_socket_thread+0x28>
 8000a3c:	2000520c 	.word	0x2000520c
 8000a40:	200051c0 	.word	0x200051c0
 8000a44:	08019580 	.word	0x08019580
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	40020000 	.word	0x40020000

08000a50 <tcp_thread>:
		}
	}
}

static void tcp_thread(void *arg)
{
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b091      	sub	sp, #68	; 0x44
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]
	struct_sock *arg_sock;
	int sock, accept_sock;
	struct sockaddr_in address, remotehost;
	socklen_t sockaddrsize;
	arg_sock = (struct_sock*) arg;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	637b      	str	r3, [r7, #52]	; 0x34

	if((sock = socket(AF_INET, SOCK_STREAM, 0)) >= 0)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2101      	movs	r1, #1
 8000a60:	2002      	movs	r0, #2
 8000a62:	f00b fb75 	bl	800c150 <lwip_socket>
 8000a66:	6338      	str	r0, [r7, #48]	; 0x30
 8000a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	db47      	blt.n	8000afe <tcp_thread+0xae>
	{
		address.sin_family = AF_INET;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	777b      	strb	r3, [r7, #29]
		address.sin_port = htons(8082);
 8000a72:	f641 7092 	movw	r0, #8082	; 0x1f92
 8000a76:	f00b ff07 	bl	800c888 <lwip_htons>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	83fb      	strh	r3, [r7, #30]
		address.sin_addr.s_addr = INADDR_ANY;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]

		if(bind(sock, (struct sockaddr *)&address, sizeof(address)) == 0)
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	2210      	movs	r2, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a8c:	f00a fe22 	bl	800b6d4 <lwip_bind>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d130      	bne.n	8000af8 <tcp_thread+0xa8>
		{
			// HAL_GPIO_WritePin(GPIOB, LedGreen_Pin, GPIO_PIN_SET);
			listen(sock, 5);
 8000a96:	2105      	movs	r1, #5
 8000a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a9a:	f00a fedf 	bl	800b85c <lwip_listen>
			for(;;)
			{
				accept_sock = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&sockaddrsize);
 8000a9e:	f107 0208 	add.w	r2, r7, #8
 8000aa2:	f107 030c 	add.w	r3, r7, #12
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aaa:	f00a fcf5 	bl	800b498 <lwip_accept>
 8000aae:	62f8      	str	r0, [r7, #44]	; 0x2c
				if(accept_sock >= 0)
 8000ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	dbf3      	blt.n	8000a9e <tcp_thread+0x4e>
				{
					client_socket01.accept_sock = accept_sock;
 8000ab6:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <tcp_thread+0xb4>)
 8000ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aba:	6153      	str	r3, [r2, #20]
					client_socket01.remotehost = remotehost;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <tcp_thread+0xb4>)
 8000abe:	461c      	mov	r4, r3
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					client_socket01.sockaddrsize = sockaddrsize;
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <tcp_thread+0xb4>)
 8000ace:	6113      	str	r3, [r2, #16]
					client_socket01.y_pos = arg_sock->y_pos;
 8000ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad2:	881a      	ldrh	r2, [r3, #0]
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <tcp_thread+0xb4>)
 8000ad6:	831a      	strh	r2, [r3, #24]
					sys_thread_new("client_socket_thread", client_socket_thread, (void*)&client_socket01, DEFAULT_THREAD_STACKSIZE, osPriorityNormal);
 8000ad8:	2318      	movs	r3, #24
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae0:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <tcp_thread+0xb4>)
 8000ae2:	4909      	ldr	r1, [pc, #36]	; (8000b08 <tcp_thread+0xb8>)
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <tcp_thread+0xbc>)
 8000ae6:	f017 fc99 	bl	801841c <sys_thread_new>

					close(sock);
 8000aea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000aec:	f00a fe60 	bl	800b7b0 <lwip_close>
					// HAL_GPIO_WritePin(GPIOB, LedGreen_Pin, GPIO_PIN_RESET);
					osThreadTerminate(NULL);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f004 fa7e 	bl	8004ff2 <osThreadTerminate>
				accept_sock = accept(sock, (struct sockaddr *)&remotehost, (socklen_t *)&sockaddrsize);
 8000af6:	e7d2      	b.n	8000a9e <tcp_thread+0x4e>
				}
			}
		}
		else
		{
			close(sock);
 8000af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000afa:	f00a fe59 	bl	800b7b0 <lwip_close>
			return;
		}
	}
}
 8000afe:	373c      	adds	r7, #60	; 0x3c
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd90      	pop	{r4, r7, pc}
 8000b04:	2000530c 	.word	0x2000530c
 8000b08:	08000975 	.word	0x08000975
 8000b0c:	08019584 	.word	0x08019584

08000b10 <myrg>:

static void myrg() {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	for(;;) {
		HAL_GPIO_TogglePin(GPIOB, LedGreen_Pin);
 8000b14:	2101      	movs	r1, #1
 8000b16:	4803      	ldr	r0, [pc, #12]	; (8000b24 <myrg+0x14>)
 8000b18:	f002 fc99 	bl	800344e <HAL_GPIO_TogglePin>
		osDelay(250);
 8000b1c:	20fa      	movs	r0, #250	; 0xfa
 8000b1e:	f004 fa95 	bl	800504c <osDelay>
		HAL_GPIO_TogglePin(GPIOB, LedGreen_Pin);
 8000b22:	e7f7      	b.n	8000b14 <myrg+0x4>
 8000b24:	40020400 	.word	0x40020400

08000b28 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b30:	f003 fbbc 	bl	80042ac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */

	// Init DAS
	DAS_Init();
 8000b34:	f7ff fd30 	bl	8000598 <DAS_Init>


	sock01.port = 8082;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <StartDefaultTask+0x50>)
 8000b3a:	f641 7292 	movw	r2, #8082	; 0x1f92
 8000b3e:	805a      	strh	r2, [r3, #2]
	sock01.y_pos = 60;
 8000b40:	4b0d      	ldr	r3, [pc, #52]	; (8000b78 <StartDefaultTask+0x50>)
 8000b42:	223c      	movs	r2, #60	; 0x3c
 8000b44:	801a      	strh	r2, [r3, #0]
	sys_thread_new("tcp_thread", tcp_thread, (void*)&sock01, DEFAULT_THREAD_STACKSIZE * 2, osPriorityNormal);
 8000b46:	2318      	movs	r3, #24
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <StartDefaultTask+0x50>)
 8000b50:	490a      	ldr	r1, [pc, #40]	; (8000b7c <StartDefaultTask+0x54>)
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <StartDefaultTask+0x58>)
 8000b54:	f017 fc62 	bl	801841c <sys_thread_new>

	sys_thread_new("myrg", myrg, NULL, DEFAULT_THREAD_STACKSIZE, osPriorityRealtime7);
 8000b58:	2337      	movs	r3, #55	; 0x37
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	2200      	movs	r2, #0
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <StartDefaultTask+0x5c>)
 8000b64:	4808      	ldr	r0, [pc, #32]	; (8000b88 <StartDefaultTask+0x60>)
 8000b66:	f017 fc59 	bl	801841c <sys_thread_new>
    // HAL_ADC_Start_DMA(&hadc1, value, 4);

  /* Infinite loop */
	for(;;)
	{
		osThreadTerminate(NULL);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f004 fa41 	bl	8004ff2 <osThreadTerminate>
//		DAS_SetAnalogChannelValue(0, value[0]);
//		DAS_SetAnalogChannelValue(1, value[1]);
//		DAS_SetAnalogChannelValue(2, value[2]);
//		DAS_SetAnalogChannelValue(3, value[3]);

		osDelay(1);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f004 fa6b 	bl	800504c <osDelay>
		osThreadTerminate(NULL);
 8000b76:	e7f8      	b.n	8000b6a <StartDefaultTask+0x42>
 8000b78:	20005304 	.word	0x20005304
 8000b7c:	08000a51 	.word	0x08000a51
 8000b80:	0801959c 	.word	0x0801959c
 8000b84:	08000b11 	.word	0x08000b11
 8000b88:	080195a8 	.word	0x080195a8

08000b8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d101      	bne.n	8000ba2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9e:	f000 fa89 	bl	80010b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40001000 	.word	0x40001000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_MspInit+0x54>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <HAL_MspInit+0x54>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_MspInit+0x54>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_MspInit+0x54>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_MspInit+0x54>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_MspInit+0x54>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	f06f 0001 	mvn.w	r0, #1
 8000c02:	f000 fdb5 	bl	8001770 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a3c      	ldr	r2, [pc, #240]	; (8000d24 <HAL_ADC_MspInit+0x110>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d171      	bne.n	8000d1a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	; (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a3a      	ldr	r2, [pc, #232]	; (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b38      	ldr	r3, [pc, #224]	; (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b34      	ldr	r3, [pc, #208]	; (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a33      	ldr	r2, [pc, #204]	; (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b31      	ldr	r3, [pc, #196]	; (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <HAL_ADC_MspInit+0x114>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC3_Pin;
 8000c8a:	230d      	movs	r3, #13
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4823      	ldr	r0, [pc, #140]	; (8000d2c <HAL_ADC_MspInit+0x118>)
 8000c9e:	f002 fa21 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC4_Pin;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ADC4_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481e      	ldr	r0, [pc, #120]	; (8000d30 <HAL_ADC_MspInit+0x11c>)
 8000cb6:	f002 fa15 	bl	80030e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cbc:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <HAL_ADC_MspInit+0x124>)
 8000cbe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc6:	4b1b      	ldr	r3, [pc, #108]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ccc:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cd2:	4b18      	ldr	r3, [pc, #96]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cd8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cdc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000ce4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ce8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cea:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cf0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cfe:	480d      	ldr	r0, [pc, #52]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000d00:	f000 fd60 	bl	80017c4 <HAL_DMA_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000d0a:	f7ff ff51 	bl	8000bb0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4a08      	ldr	r2, [pc, #32]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000d12:	639a      	str	r2, [r3, #56]	; 0x38
 8000d14:	4a07      	ldr	r2, [pc, #28]	; (8000d34 <HAL_ADC_MspInit+0x120>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3728      	adds	r7, #40	; 0x28
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40012000 	.word	0x40012000
 8000d28:	40023800 	.word	0x40023800
 8000d2c:	40020800 	.word	0x40020800
 8000d30:	40020000 	.word	0x40020000
 8000d34:	200052a4 	.word	0x200052a4
 8000d38:	40026410 	.word	0x40026410

08000d3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b08c      	sub	sp, #48	; 0x30
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	2036      	movs	r0, #54	; 0x36
 8000d52:	f000 fd0d 	bl	8001770 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d56:	2036      	movs	r0, #54	; 0x36
 8000d58:	f000 fd26 	bl	80017a8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <HAL_InitTick+0xa4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d78:	f107 0210 	add.w	r2, r7, #16
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f002 ffb2 	bl	8003cec <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d88:	f002 ff9c 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d94:	4a13      	ldr	r2, [pc, #76]	; (8000de4 <HAL_InitTick+0xa8>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	0c9b      	lsrs	r3, r3, #18
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <HAL_InitTick+0xac>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	; (8000dec <HAL_InitTick+0xb0>)
 8000da4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_InitTick+0xac>)
 8000da8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_InitTick+0xac>)
 8000db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <HAL_InitTick+0xac>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_InitTick+0xac>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dc0:	4809      	ldr	r0, [pc, #36]	; (8000de8 <HAL_InitTick+0xac>)
 8000dc2:	f002 ffc5 	bl	8003d50 <HAL_TIM_Base_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d104      	bne.n	8000dd6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <HAL_InitTick+0xac>)
 8000dce:	f003 f819 	bl	8003e04 <HAL_TIM_Base_Start_IT>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3730      	adds	r7, #48	; 0x30
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	431bde83 	.word	0x431bde83
 8000de8:	2000533c 	.word	0x2000533c
 8000dec:	40001000 	.word	0x40001000

08000df0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <NMI_Handler+0x4>

08000df6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0
	//NVIC_SystemReset();
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  break;
 8000dfa:	bf00      	nop
    /* USER CODE END W1_HardFault_IRQn 0 */
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <MemManage_Handler+0x4>

08000e0c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e10:	e7fe      	b.n	8000e10 <BusFault_Handler+0x4>

08000e12 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e16:	e7fe      	b.n	8000e16 <UsageFault_Handler+0x4>

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <TIM6_DAC_IRQHandler+0x10>)
 8000e2e:	f003 f859 	bl	8003ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	2000533c 	.word	0x2000533c

08000e3c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e40:	4802      	ldr	r0, [pc, #8]	; (8000e4c <DMA2_Stream0_IRQHandler+0x10>)
 8000e42:	f000 fd6d 	bl	8001920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200052a4 	.word	0x200052a4

08000e50 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e54:	4802      	ldr	r0, [pc, #8]	; (8000e60 <ETH_IRQHandler+0x10>)
 8000e56:	f001 fb83 	bl	8002560 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20006cd0 	.word	0x20006cd0

08000e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	return 1;
 8000e68:	2301      	movs	r3, #1
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <_kill>:

int _kill(int pid, int sig)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e7e:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <_kill+0x20>)
 8000e80:	2216      	movs	r2, #22
 8000e82:	601a      	str	r2, [r3, #0]
	return -1;
 8000e84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	2000bda4 	.word	0x2000bda4

08000e98 <_exit>:

void _exit (int status)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ffe5 	bl	8000e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eaa:	e7fe      	b.n	8000eaa <_exit+0x12>

08000eac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e00a      	b.n	8000ed4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ebe:	f3af 8000 	nop.w
 8000ec2:	4601      	mov	r1, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	b2ca      	uxtb	r2, r1
 8000ecc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697a      	ldr	r2, [r7, #20]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	dbf0      	blt.n	8000ebe <_read+0x12>
	}

return len;
 8000edc:	687b      	ldr	r3, [r7, #4]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	e009      	b.n	8000f0c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	1c5a      	adds	r2, r3, #1
 8000efc:	60ba      	str	r2, [r7, #8]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	dbf1      	blt.n	8000ef8 <_write+0x12>
	}
	return len;
 8000f14:	687b      	ldr	r3, [r7, #4]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_close>:

int _close(int file)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
	return -1;
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f46:	605a      	str	r2, [r3, #4]
	return 0;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <_isatty>:

int _isatty(int file)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b083      	sub	sp, #12
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
	return 0;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b087      	sub	sp, #28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f90:	4a14      	ldr	r2, [pc, #80]	; (8000fe4 <_sbrk+0x5c>)
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <_sbrk+0x60>)
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_sbrk+0x64>)
 8000fa6:	4a12      	ldr	r2, [pc, #72]	; (8000ff0 <_sbrk+0x68>)
 8000fa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d205      	bcs.n	8000fc4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000fb8:	4b0e      	ldr	r3, [pc, #56]	; (8000ff4 <_sbrk+0x6c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e009      	b.n	8000fd8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a06      	ldr	r2, [pc, #24]	; (8000fec <_sbrk+0x64>)
 8000fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	371c      	adds	r7, #28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	20020000 	.word	0x20020000
 8000fe8:	00000400 	.word	0x00000400
 8000fec:	2000009c 	.word	0x2000009c
 8000ff0:	2000bdb8 	.word	0x2000bdb8
 8000ff4:	2000bda4 	.word	0x2000bda4

08000ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <SystemInit+0x20>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemInit+0x20>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800101c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001022:	490e      	ldr	r1, [pc, #56]	; (800105c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001024:	4a0e      	ldr	r2, [pc, #56]	; (8001060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0b      	ldr	r2, [pc, #44]	; (8001064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001038:	4c0b      	ldr	r4, [pc, #44]	; (8001068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001046:	f7ff ffd7 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f017 fa25 	bl	8018498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104e:	f7ff faf5 	bl	800063c <main>
  bx  lr    
 8001052:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800105c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001060:	0801d30c 	.word	0x0801d30c
  ldr r2, =_sbss
 8001064:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001068:	2000bdb8 	.word	0x2000bdb8

0800106c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800106c:	e7fe      	b.n	800106c <ADC_IRQHandler>
	...

08001070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001074:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <HAL_Init+0x40>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0d      	ldr	r2, [pc, #52]	; (80010b0 <HAL_Init+0x40>)
 800107a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800107e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x40>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <HAL_Init+0x40>)
 8001086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800108a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <HAL_Init+0x40>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <HAL_Init+0x40>)
 8001092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 fb5e 	bl	800175a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800109e:	2000      	movs	r0, #0
 80010a0:	f7ff fe4c 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010a4:	f7ff fd8a 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023c00 	.word	0x40023c00

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20005384 	.word	0x20005384

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20005384 	.word	0x20005384

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000008 	.word	0x20000008

0800113c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001144:	2300      	movs	r3, #0
 8001146:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d101      	bne.n	8001152 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e033      	b.n	80011ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fd5a 	bl	8000c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 0310 	and.w	r3, r3, #16
 8001176:	2b00      	cmp	r3, #0
 8001178:	d118      	bne.n	80011ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001182:	f023 0302 	bic.w	r3, r3, #2
 8001186:	f043 0202 	orr.w	r2, r3, #2
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f93a 	bl	8001408 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2200      	movs	r2, #0
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f023 0303 	bic.w	r3, r3, #3
 80011a2:	f043 0201 	orr.w	r2, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40
 80011aa:	e001      	b.n	80011b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_ADC_ConfigChannel+0x1c>
 80011dc:	2302      	movs	r3, #2
 80011de:	e105      	b.n	80013ec <HAL_ADC_ConfigChannel+0x228>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b09      	cmp	r3, #9
 80011ee:	d925      	bls.n	800123c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68d9      	ldr	r1, [r3, #12]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	461a      	mov	r2, r3
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	3b1e      	subs	r3, #30
 8001206:	2207      	movs	r2, #7
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43da      	mvns	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	400a      	ands	r2, r1
 8001214:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68d9      	ldr	r1, [r3, #12]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	689a      	ldr	r2, [r3, #8]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	4618      	mov	r0, r3
 8001228:	4603      	mov	r3, r0
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4403      	add	r3, r0
 800122e:	3b1e      	subs	r3, #30
 8001230:	409a      	lsls	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	430a      	orrs	r2, r1
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	e022      	b.n	8001282 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	6919      	ldr	r1, [r3, #16]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	2207      	movs	r2, #7
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	400a      	ands	r2, r1
 800125e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6919      	ldr	r1, [r3, #16]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	4603      	mov	r3, r0
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4403      	add	r3, r0
 8001278:	409a      	lsls	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b06      	cmp	r3, #6
 8001288:	d824      	bhi.n	80012d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b05      	subs	r3, #5
 800129c:	221f      	movs	r2, #31
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	400a      	ands	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b05      	subs	r3, #5
 80012c6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
 80012d2:	e04c      	b.n	800136e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d824      	bhi.n	8001326 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	3b23      	subs	r3, #35	; 0x23
 80012ee:	221f      	movs	r2, #31
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43da      	mvns	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	400a      	ands	r2, r1
 80012fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685a      	ldr	r2, [r3, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	3b23      	subs	r3, #35	; 0x23
 8001318:	fa00 f203 	lsl.w	r2, r0, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	430a      	orrs	r2, r1
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
 8001324:	e023      	b.n	800136e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b41      	subs	r3, #65	; 0x41
 8001338:	221f      	movs	r2, #31
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b41      	subs	r3, #65	; 0x41
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800136e:	4b22      	ldr	r3, [pc, #136]	; (80013f8 <HAL_ADC_ConfigChannel+0x234>)
 8001370:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a21      	ldr	r2, [pc, #132]	; (80013fc <HAL_ADC_ConfigChannel+0x238>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d109      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1cc>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b12      	cmp	r3, #18
 8001382:	d105      	bne.n	8001390 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a19      	ldr	r2, [pc, #100]	; (80013fc <HAL_ADC_ConfigChannel+0x238>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d123      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x21e>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b10      	cmp	r3, #16
 80013a0:	d003      	beq.n	80013aa <HAL_ADC_ConfigChannel+0x1e6>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2b11      	cmp	r3, #17
 80013a8:	d11b      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d111      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_ADC_ConfigChannel+0x23c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_ADC_ConfigChannel+0x240>)
 80013c4:	fba2 2303 	umull	r2, r3, r2, r3
 80013c8:	0c9a      	lsrs	r2, r3, #18
 80013ca:	4613      	mov	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013d4:	e002      	b.n	80013dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	3b01      	subs	r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f9      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80013ea:	2300      	movs	r3, #0
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40012300 	.word	0x40012300
 80013fc:	40012000 	.word	0x40012000
 8001400:	20000000 	.word	0x20000000
 8001404:	431bde83 	.word	0x431bde83

08001408 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001410:	4b79      	ldr	r3, [pc, #484]	; (80015f8 <ADC_Init+0x1f0>)
 8001412:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	431a      	orrs	r2, r3
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800143c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6859      	ldr	r1, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	021a      	lsls	r2, r3, #8
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001460:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	689a      	ldr	r2, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001482:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6899      	ldr	r1, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149a:	4a58      	ldr	r2, [pc, #352]	; (80015fc <ADC_Init+0x1f4>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d022      	beq.n	80014e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6899      	ldr	r1, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6899      	ldr	r1, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	e00f      	b.n	8001506 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001504:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0202 	bic.w	r2, r2, #2
 8001514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6899      	ldr	r1, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	7e1b      	ldrb	r3, [r3, #24]
 8001520:	005a      	lsls	r2, r3, #1
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d01b      	beq.n	800156c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001542:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	685a      	ldr	r2, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001552:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6859      	ldr	r1, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155e:	3b01      	subs	r3, #1
 8001560:	035a      	lsls	r2, r3, #13
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	e007      	b.n	800157c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800157a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800158a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	69db      	ldr	r3, [r3, #28]
 8001596:	3b01      	subs	r3, #1
 8001598:	051a      	lsls	r2, r3, #20
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6899      	ldr	r1, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015be:	025a      	lsls	r2, r3, #9
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	430a      	orrs	r2, r1
 80015c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6899      	ldr	r1, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	029a      	lsls	r2, r3, #10
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]
}
 80015ec:	bf00      	nop
 80015ee:	3714      	adds	r7, #20
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40012300 	.word	0x40012300
 80015fc:	0f000001 	.word	0x0f000001

08001600 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800161c:	4013      	ands	r3, r2
 800161e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001628:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800162c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001630:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <__NVIC_SetPriorityGrouping+0x44>)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	60d3      	str	r3, [r2, #12]
}
 8001638:	bf00      	nop
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800164c:	4b04      	ldr	r3, [pc, #16]	; (8001660 <__NVIC_GetPriorityGrouping+0x18>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	0a1b      	lsrs	r3, r3, #8
 8001652:	f003 0307 	and.w	r3, r3, #7
}
 8001656:	4618      	mov	r0, r3
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0b      	blt.n	800168e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	f003 021f 	and.w	r2, r3, #31
 800167c:	4907      	ldr	r1, [pc, #28]	; (800169c <__NVIC_EnableIRQ+0x38>)
 800167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001682:	095b      	lsrs	r3, r3, #5
 8001684:	2001      	movs	r0, #1
 8001686:	fa00 f202 	lsl.w	r2, r0, r2
 800168a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	e000e100 	.word	0xe000e100

080016a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	6039      	str	r1, [r7, #0]
 80016aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	db0a      	blt.n	80016ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	490c      	ldr	r1, [pc, #48]	; (80016ec <__NVIC_SetPriority+0x4c>)
 80016ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016be:	0112      	lsls	r2, r2, #4
 80016c0:	b2d2      	uxtb	r2, r2
 80016c2:	440b      	add	r3, r1
 80016c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c8:	e00a      	b.n	80016e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4908      	ldr	r1, [pc, #32]	; (80016f0 <__NVIC_SetPriority+0x50>)
 80016d0:	79fb      	ldrb	r3, [r7, #7]
 80016d2:	f003 030f 	and.w	r3, r3, #15
 80016d6:	3b04      	subs	r3, #4
 80016d8:	0112      	lsls	r2, r2, #4
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	440b      	add	r3, r1
 80016de:	761a      	strb	r2, [r3, #24]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000e100 	.word	0xe000e100
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	; 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f1c3 0307 	rsb	r3, r3, #7
 800170e:	2b04      	cmp	r3, #4
 8001710:	bf28      	it	cs
 8001712:	2304      	movcs	r3, #4
 8001714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	3304      	adds	r3, #4
 800171a:	2b06      	cmp	r3, #6
 800171c:	d902      	bls.n	8001724 <NVIC_EncodePriority+0x30>
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3b03      	subs	r3, #3
 8001722:	e000      	b.n	8001726 <NVIC_EncodePriority+0x32>
 8001724:	2300      	movs	r3, #0
 8001726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	f04f 32ff 	mov.w	r2, #4294967295
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43da      	mvns	r2, r3
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	401a      	ands	r2, r3
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800173c:	f04f 31ff 	mov.w	r1, #4294967295
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa01 f303 	lsl.w	r3, r1, r3
 8001746:	43d9      	mvns	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800174c:	4313      	orrs	r3, r2
         );
}
 800174e:	4618      	mov	r0, r3
 8001750:	3724      	adds	r7, #36	; 0x24
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ff4c 	bl	8001600 <__NVIC_SetPriorityGrouping>
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001782:	f7ff ff61 	bl	8001648 <__NVIC_GetPriorityGrouping>
 8001786:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	6978      	ldr	r0, [r7, #20]
 800178e:	f7ff ffb1 	bl	80016f4 <NVIC_EncodePriority>
 8001792:	4602      	mov	r2, r0
 8001794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff ff80 	bl	80016a0 <__NVIC_SetPriority>
}
 80017a0:	bf00      	nop
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff54 	bl	8001664 <__NVIC_EnableIRQ>
}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff fc84 	bl	80010dc <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e099      	b.n	8001914 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 0201 	bic.w	r2, r2, #1
 80017fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001800:	e00f      	b.n	8001822 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001802:	f7ff fc6b 	bl	80010dc <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b05      	cmp	r3, #5
 800180e:	d908      	bls.n	8001822 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2220      	movs	r2, #32
 8001814:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2203      	movs	r2, #3
 800181a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e078      	b.n	8001914 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0301 	and.w	r3, r3, #1
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1e8      	bne.n	8001802 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_DMA_Init+0x158>)
 800183c:	4013      	ands	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685a      	ldr	r2, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800184e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001866:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800186e:	697a      	ldr	r2, [r7, #20]
 8001870:	4313      	orrs	r3, r2
 8001872:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	2b04      	cmp	r3, #4
 800187a:	d107      	bne.n	800188c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4313      	orrs	r3, r2
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	4313      	orrs	r3, r2
 800188a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f023 0307 	bic.w	r3, r3, #7
 80018a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	2b04      	cmp	r3, #4
 80018b4:	d117      	bne.n	80018e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4313      	orrs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00e      	beq.n	80018e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f9e9 	bl	8001ca0 <DMA_CheckFifoParam>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2240      	movs	r2, #64	; 0x40
 80018d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018e2:	2301      	movs	r3, #1
 80018e4:	e016      	b.n	8001914 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f9a0 	bl	8001c34 <DMA_CalcBaseAndBitshift>
 80018f4:	4603      	mov	r3, r0
 80018f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	223f      	movs	r2, #63	; 0x3f
 80018fe:	409a      	lsls	r2, r3
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	f010803f 	.word	0xf010803f

08001920 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800192c:	4b92      	ldr	r3, [pc, #584]	; (8001b78 <HAL_DMA_IRQHandler+0x258>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a92      	ldr	r2, [pc, #584]	; (8001b7c <HAL_DMA_IRQHandler+0x25c>)
 8001932:	fba2 2303 	umull	r2, r3, r2, r3
 8001936:	0a9b      	lsrs	r3, r3, #10
 8001938:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194a:	2208      	movs	r2, #8
 800194c:	409a      	lsls	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01a      	beq.n	800198c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d013      	beq.n	800198c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f022 0204 	bic.w	r2, r2, #4
 8001972:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001978:	2208      	movs	r2, #8
 800197a:	409a      	lsls	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	f043 0201 	orr.w	r2, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	2201      	movs	r2, #1
 8001992:	409a      	lsls	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d012      	beq.n	80019c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	2201      	movs	r2, #1
 80019b0:	409a      	lsls	r2, r3
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ba:	f043 0202 	orr.w	r2, r3, #2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	2204      	movs	r2, #4
 80019c8:	409a      	lsls	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d012      	beq.n	80019f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d00b      	beq.n	80019f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	2204      	movs	r2, #4
 80019e6:	409a      	lsls	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f0:	f043 0204 	orr.w	r2, r3, #4
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	2210      	movs	r2, #16
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d043      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d03c      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	409a      	lsls	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d018      	beq.n	8001a62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d108      	bne.n	8001a50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d024      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	4798      	blx	r3
 8001a4e:	e01f      	b.n	8001a90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01b      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	4798      	blx	r3
 8001a60:	e016      	b.n	8001a90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d107      	bne.n	8001a80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0208 	bic.w	r2, r2, #8
 8001a7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a94:	2220      	movs	r2, #32
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 808e 	beq.w	8001bbe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0310 	and.w	r3, r3, #16
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 8086 	beq.w	8001bbe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	409a      	lsls	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d136      	bne.n	8001b38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0216 	bic.w	r2, r2, #22
 8001ad8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ae8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d103      	bne.n	8001afa <HAL_DMA_IRQHandler+0x1da>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d007      	beq.n	8001b0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0208 	bic.w	r2, r2, #8
 8001b08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	223f      	movs	r2, #63	; 0x3f
 8001b10:	409a      	lsls	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2201      	movs	r2, #1
 8001b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d07d      	beq.n	8001c2a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	4798      	blx	r3
        }
        return;
 8001b36:	e078      	b.n	8001c2a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d01c      	beq.n	8001b80 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d108      	bne.n	8001b66 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d030      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	4798      	blx	r3
 8001b64:	e02b      	b.n	8001bbe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d027      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	4798      	blx	r3
 8001b76:	e022      	b.n	8001bbe <HAL_DMA_IRQHandler+0x29e>
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d10f      	bne.n	8001bae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f022 0210 	bic.w	r2, r2, #16
 8001b9c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d032      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d022      	beq.n	8001c18 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2205      	movs	r2, #5
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f022 0201 	bic.w	r2, r2, #1
 8001be8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	3301      	adds	r3, #1
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d307      	bcc.n	8001c06 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f2      	bne.n	8001bea <HAL_DMA_IRQHandler+0x2ca>
 8001c04:	e000      	b.n	8001c08 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c06:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d005      	beq.n	8001c2c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
 8001c28:	e000      	b.n	8001c2c <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c2a:	bf00      	nop
    }
  }
}
 8001c2c:	3718      	adds	r7, #24
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop

08001c34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b085      	sub	sp, #20
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	3b10      	subs	r3, #16
 8001c44:	4a14      	ldr	r2, [pc, #80]	; (8001c98 <DMA_CalcBaseAndBitshift+0x64>)
 8001c46:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4a:	091b      	lsrs	r3, r3, #4
 8001c4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c4e:	4a13      	ldr	r2, [pc, #76]	; (8001c9c <DMA_CalcBaseAndBitshift+0x68>)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	4413      	add	r3, r2
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d909      	bls.n	8001c76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c6a:	f023 0303 	bic.w	r3, r3, #3
 8001c6e:	1d1a      	adds	r2, r3, #4
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	659a      	str	r2, [r3, #88]	; 0x58
 8001c74:	e007      	b.n	8001c86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c7e:	f023 0303 	bic.w	r3, r3, #3
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3714      	adds	r7, #20
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	aaaaaaab 	.word	0xaaaaaaab
 8001c9c:	0801d024 	.word	0x0801d024

08001ca0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d11f      	bne.n	8001cfa <DMA_CheckFifoParam+0x5a>
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	2b03      	cmp	r3, #3
 8001cbe:	d856      	bhi.n	8001d6e <DMA_CheckFifoParam+0xce>
 8001cc0:	a201      	add	r2, pc, #4	; (adr r2, 8001cc8 <DMA_CheckFifoParam+0x28>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001cd9 	.word	0x08001cd9
 8001ccc:	08001ceb 	.word	0x08001ceb
 8001cd0:	08001cd9 	.word	0x08001cd9
 8001cd4:	08001d6f 	.word	0x08001d6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d046      	beq.n	8001d72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ce8:	e043      	b.n	8001d72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cf2:	d140      	bne.n	8001d76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cf8:	e03d      	b.n	8001d76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d02:	d121      	bne.n	8001d48 <DMA_CheckFifoParam+0xa8>
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d837      	bhi.n	8001d7a <DMA_CheckFifoParam+0xda>
 8001d0a:	a201      	add	r2, pc, #4	; (adr r2, 8001d10 <DMA_CheckFifoParam+0x70>)
 8001d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d10:	08001d21 	.word	0x08001d21
 8001d14:	08001d27 	.word	0x08001d27
 8001d18:	08001d21 	.word	0x08001d21
 8001d1c:	08001d39 	.word	0x08001d39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
      break;
 8001d24:	e030      	b.n	8001d88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d025      	beq.n	8001d7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d36:	e022      	b.n	8001d7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d40:	d11f      	bne.n	8001d82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d46:	e01c      	b.n	8001d82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d903      	bls.n	8001d56 <DMA_CheckFifoParam+0xb6>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d003      	beq.n	8001d5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d54:	e018      	b.n	8001d88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	73fb      	strb	r3, [r7, #15]
      break;
 8001d5a:	e015      	b.n	8001d88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00e      	beq.n	8001d86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d6c:	e00b      	b.n	8001d86 <DMA_CheckFifoParam+0xe6>
      break;
 8001d6e:	bf00      	nop
 8001d70:	e00a      	b.n	8001d88 <DMA_CheckFifoParam+0xe8>
      break;
 8001d72:	bf00      	nop
 8001d74:	e008      	b.n	8001d88 <DMA_CheckFifoParam+0xe8>
      break;
 8001d76:	bf00      	nop
 8001d78:	e006      	b.n	8001d88 <DMA_CheckFifoParam+0xe8>
      break;
 8001d7a:	bf00      	nop
 8001d7c:	e004      	b.n	8001d88 <DMA_CheckFifoParam+0xe8>
      break;
 8001d7e:	bf00      	nop
 8001d80:	e002      	b.n	8001d88 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d82:	bf00      	nop
 8001d84:	e000      	b.n	8001d88 <DMA_CheckFifoParam+0xe8>
      break;
 8001d86:	bf00      	nop
    }
  } 
  
  return status; 
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop

08001d98 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	2300      	movs	r3, #0
 8001da6:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001da8:	4baa      	ldr	r3, [pc, #680]	; (8002054 <HAL_ETH_Init+0x2bc>)
 8001daa:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001db0:	2300      	movs	r3, #0
 8001db2:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e183      	b.n	80020c6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f002 fbcc 	bl	8004570 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
 8001ddc:	4b9e      	ldr	r3, [pc, #632]	; (8002058 <HAL_ETH_Init+0x2c0>)
 8001dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de0:	4a9d      	ldr	r2, [pc, #628]	; (8002058 <HAL_ETH_Init+0x2c0>)
 8001de2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de6:	6453      	str	r3, [r2, #68]	; 0x44
 8001de8:	4b9b      	ldr	r3, [pc, #620]	; (8002058 <HAL_ETH_Init+0x2c0>)
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001df4:	4b99      	ldr	r3, [pc, #612]	; (800205c <HAL_ETH_Init+0x2c4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	4a98      	ldr	r2, [pc, #608]	; (800205c <HAL_ETH_Init+0x2c4>)
 8001dfa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001dfe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001e00:	4b96      	ldr	r3, [pc, #600]	; (800205c <HAL_ETH_Init+0x2c4>)
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4994      	ldr	r1, [pc, #592]	; (800205c <HAL_ETH_Init+0x2c4>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0201 	orr.w	r2, r2, #1
 8001e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e24:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001e26:	f7ff f959 	bl	80010dc <HAL_GetTick>
 8001e2a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e2c:	e011      	b.n	8001e52 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001e2e:	f7ff f955 	bl	80010dc <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e3c:	d909      	bls.n	8001e52 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2203      	movs	r2, #3
 8001e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e139      	b.n	80020c6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e4      	bne.n	8001e2e <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f023 031c 	bic.w	r3, r3, #28
 8001e72:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001e74:	f001 ff1a 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8001e78:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4a78      	ldr	r2, [pc, #480]	; (8002060 <HAL_ETH_Init+0x2c8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d908      	bls.n	8001e94 <HAL_ETH_Init+0xfc>
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	4a77      	ldr	r2, [pc, #476]	; (8002064 <HAL_ETH_Init+0x2cc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d804      	bhi.n	8001e94 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f043 0308 	orr.w	r3, r3, #8
 8001e90:	61fb      	str	r3, [r7, #28]
 8001e92:	e027      	b.n	8001ee4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4a73      	ldr	r2, [pc, #460]	; (8002064 <HAL_ETH_Init+0x2cc>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d908      	bls.n	8001eae <HAL_ETH_Init+0x116>
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	4a6d      	ldr	r2, [pc, #436]	; (8002054 <HAL_ETH_Init+0x2bc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d204      	bcs.n	8001eae <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	f043 030c 	orr.w	r3, r3, #12
 8001eaa:	61fb      	str	r3, [r7, #28]
 8001eac:	e01a      	b.n	8001ee4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	4a68      	ldr	r2, [pc, #416]	; (8002054 <HAL_ETH_Init+0x2bc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d303      	bcc.n	8001ebe <HAL_ETH_Init+0x126>
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	4a6b      	ldr	r2, [pc, #428]	; (8002068 <HAL_ETH_Init+0x2d0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d911      	bls.n	8001ee2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	4a69      	ldr	r2, [pc, #420]	; (8002068 <HAL_ETH_Init+0x2d0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d908      	bls.n	8001ed8 <HAL_ETH_Init+0x140>
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	4a68      	ldr	r2, [pc, #416]	; (800206c <HAL_ETH_Init+0x2d4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d804      	bhi.n	8001ed8 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	61fb      	str	r3, [r7, #28]
 8001ed6:	e005      	b.n	8001ee4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f043 0310 	orr.w	r3, r3, #16
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	e000      	b.n	8001ee4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001ee2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001eec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 fc17 	bl	8002726 <HAL_ETH_WritePHYRegister>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00b      	beq.n	8001f16 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001f02:	6939      	ldr	r1, [r7, #16]
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fdcd 	bl	8002aa4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e0d7      	b.n	80020c6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001f16:	20ff      	movs	r0, #255	; 0xff
 8001f18:	f7ff f8ec 	bl	80010f4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80a5 	beq.w	8002070 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f26:	f7ff f8d9 	bl	80010dc <HAL_GetTick>
 8001f2a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	461a      	mov	r2, r3
 8001f32:	2101      	movs	r1, #1
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 fb8e 	bl	8002656 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001f3a:	f7ff f8cf 	bl	80010dc <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d90f      	bls.n	8001f6c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001f50:	6939      	ldr	r1, [r7, #16]
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f000 fda6 	bl	8002aa4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0ac      	b.n	80020c6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0304 	and.w	r3, r3, #4
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0da      	beq.n	8001f2c <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001f76:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 fbd2 	bl	8002726 <HAL_ETH_WritePHYRegister>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001f8c:	6939      	ldr	r1, [r7, #16]
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fd88 	bl	8002aa4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e092      	b.n	80020c6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fa0:	f7ff f89c 	bl	80010dc <HAL_GetTick>
 8001fa4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	461a      	mov	r2, r3
 8001fac:	2101      	movs	r1, #1
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fb51 	bl	8002656 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001fb4:	f7ff f892 	bl	80010dc <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d90f      	bls.n	8001fe6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001fca:	6939      	ldr	r1, [r7, #16]
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fd69 	bl	8002aa4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e06f      	b.n	80020c6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f003 0320 	and.w	r3, r3, #32
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0da      	beq.n	8001fa6 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	2110      	movs	r1, #16
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fb2c 	bl	8002656 <HAL_ETH_ReadPHYRegister>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d00b      	beq.n	800201c <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002008:	6939      	ldr	r1, [r7, #16]
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fd4a 	bl	8002aa4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002018:	2301      	movs	r3, #1
 800201a:	e054      	b.n	80020c6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	2b00      	cmp	r3, #0
 8002024:	d004      	beq.n	8002030 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	e002      	b.n	8002036 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
 8002046:	e035      	b.n	80020b4 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	e030      	b.n	80020b4 <HAL_ETH_Init+0x31c>
 8002052:	bf00      	nop
 8002054:	03938700 	.word	0x03938700
 8002058:	40023800 	.word	0x40023800
 800205c:	40013800 	.word	0x40013800
 8002060:	01312cff 	.word	0x01312cff
 8002064:	02160ebf 	.word	0x02160ebf
 8002068:	05f5e0ff 	.word	0x05f5e0ff
 800206c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	08db      	lsrs	r3, r3, #3
 8002076:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	085b      	lsrs	r3, r3, #1
 800207e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002080:	4313      	orrs	r3, r2
 8002082:	b29b      	uxth	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	2100      	movs	r1, #0
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 fb4c 	bl	8002726 <HAL_ETH_WritePHYRegister>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00b      	beq.n	80020ac <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002098:	6939      	ldr	r1, [r7, #16]
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 fd02 	bl	8002aa4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e00c      	b.n	80020c6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80020ac:	f640 70ff 	movw	r0, #4095	; 0xfff
 80020b0:	f7ff f820 	bl	80010f4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80020b4:	6939      	ldr	r1, [r7, #16]
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fcf4 	bl	8002aa4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3720      	adds	r7, #32
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop

080020d0 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b087      	sub	sp, #28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_ETH_DMATxDescListInit+0x20>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e052      	b.n	8002196 <HAL_ETH_DMATxDescListInit+0xc6>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
 800210a:	e030      	b.n	800216e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	015b      	lsls	r3, r3, #5
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	4413      	add	r3, r2
 8002114:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800211c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002124:	fb02 f303 	mul.w	r3, r2, r3
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	4413      	add	r3, r2
 800212c:	461a      	mov	r2, r3
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d105      	bne.n	8002146 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	3b01      	subs	r3, #1
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	d208      	bcs.n	8002162 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	3301      	adds	r3, #1
 8002154:	015b      	lsls	r3, r3, #5
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	4413      	add	r3, r2
 800215a:	461a      	mov	r2, r3
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	60da      	str	r2, [r3, #12]
 8002160:	e002      	b.n	8002168 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3301      	adds	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d3ca      	bcc.n	800210c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002180:	3310      	adds	r3, #16
 8002182:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b087      	sub	sp, #28
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	60f8      	str	r0, [r7, #12]
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_ETH_DMARxDescListInit+0x20>
 80021be:	2302      	movs	r3, #2
 80021c0:	e056      	b.n	8002270 <HAL_ETH_DMARxDescListInit+0xce>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2202      	movs	r2, #2
 80021ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	e034      	b.n	8002248 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	015b      	lsls	r3, r3, #5
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	4413      	add	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80021ee:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80021f6:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	461a      	mov	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d105      	bne.n	8002220 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	3b01      	subs	r3, #1
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	429a      	cmp	r2, r3
 8002228:	d208      	bcs.n	800223c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	015b      	lsls	r3, r3, #5
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	4413      	add	r3, r2
 8002234:	461a      	mov	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	e002      	b.n	8002242 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800223c:	68ba      	ldr	r2, [r7, #8]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d3c6      	bcc.n	80021de <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225a:	330c      	adds	r3, #12
 800225c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800227c:	b480      	push	{r7}
 800227e:	b087      	sub	sp, #28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_ETH_TransmitFrame+0x24>
 800229c:	2302      	movs	r3, #2
 800229e:	e0cd      	b.n	800243c <HAL_ETH_TransmitFrame+0x1c0>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80022c6:	2301      	movs	r3, #1
 80022c8:	e0b8      	b.n	800243c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	da09      	bge.n	80022e8 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2212      	movs	r2, #18
 80022d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0a9      	b.n	800243c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d915      	bls.n	800231e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	4a54      	ldr	r2, [pc, #336]	; (8002448 <HAL_ETH_TransmitFrame+0x1cc>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0a9b      	lsrs	r3, r3, #10
 80022fc:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	4b51      	ldr	r3, [pc, #324]	; (8002448 <HAL_ETH_TransmitFrame+0x1cc>)
 8002302:	fba3 1302 	umull	r1, r3, r3, r2
 8002306:	0a9b      	lsrs	r3, r3, #10
 8002308:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d005      	beq.n	8002322 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	3301      	adds	r3, #1
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e001      	b.n	8002322 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800231e:	2301      	movs	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d11c      	bne.n	8002362 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002332:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8002336:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002342:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002352:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	461a      	mov	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002360:	e04b      	b.n	80023fa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	e044      	b.n	80023f2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002376:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800238c:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002392:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002396:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3b01      	subs	r3, #1
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d116      	bne.n	80023d0 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80023b0:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	4a25      	ldr	r2, [pc, #148]	; (800244c <HAL_ETH_TransmitFrame+0x1d0>)
 80023b6:	fb02 f203 	mul.w	r2, r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80023c2:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80023ce:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80023de:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	461a      	mov	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	3301      	adds	r3, #1
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d3b6      	bcc.n	8002368 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002402:	3314      	adds	r3, #20
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00d      	beq.n	800242a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002416:	3314      	adds	r3, #20
 8002418:	2204      	movs	r2, #4
 800241a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002424:	3304      	adds	r3, #4
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr
 8002448:	ac02b00b 	.word	0xac02b00b
 800244c:	fffffa0c 	.word	0xfffffa0c

08002450 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002466:	2302      	movs	r3, #2
 8002468:	e074      	b.n	8002554 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800247a:	e05a      	b.n	8002532 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002490:	d10d      	bne.n	80024ae <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	461a      	mov	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
 80024ac:	e041      	b.n	8002532 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10b      	bne.n	80024d4 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	461a      	mov	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	629a      	str	r2, [r3, #40]	; 0x28
 80024d2:	e02e      	b.n	8002532 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d103      	bne.n	80024f6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0c1b      	lsrs	r3, r3, #16
 80024fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002502:	1f1a      	subs	r2, r3, #4
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	461a      	mov	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 800252e:	2300      	movs	r3, #0
 8002530:	e010      	b.n	8002554 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	db02      	blt.n	8002542 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2b03      	cmp	r3, #3
 8002540:	d99c      	bls.n	800247c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002570:	3314      	adds	r3, #20
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d112      	bne.n	80025a2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f002 f8a5 	bl	80046cc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800258a:	3314      	adds	r3, #20
 800258c:	2240      	movs	r2, #64	; 0x40
 800258e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025a0:	e01b      	b.n	80025da <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025aa:	3314      	adds	r3, #20
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d111      	bne.n	80025da <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f839 	bl	800262e <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c4:	3314      	adds	r3, #20
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e2:	3314      	adds	r3, #20
 80025e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025e8:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f2:	3314      	adds	r3, #20
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025fe:	d112      	bne.n	8002626 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f81e 	bl	8002642 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800260e:	3314      	adds	r3, #20
 8002610:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002614:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8002626:	bf00      	nop
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800264a:	bf00      	nop
 800264c:	370c      	adds	r7, #12
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b086      	sub	sp, #24
 800265a:	af00      	add	r7, sp, #0
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	460b      	mov	r3, r1
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002664:	2300      	movs	r3, #0
 8002666:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b82      	cmp	r3, #130	; 0x82
 8002676:	d101      	bne.n	800267c <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
 800267a:	e050      	b.n	800271e <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2282      	movs	r2, #130	; 0x82
 8002680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 031c 	and.w	r3, r3, #28
 8002692:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8a1b      	ldrh	r3, [r3, #16]
 8002698:	02db      	lsls	r3, r3, #11
 800269a:	b29b      	uxth	r3, r3
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	4313      	orrs	r3, r2
 80026a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	019b      	lsls	r3, r3, #6
 80026a6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f023 0302 	bic.w	r3, r3, #2
 80026b6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80026c8:	f7fe fd08 	bl	80010dc <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026ce:	e015      	b.n	80026fc <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80026d0:	f7fe fd04 	bl	80010dc <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026de:	d309      	bcc.n	80026f4 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e014      	b.n	800271e <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e4      	bne.n	80026d0 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	b29b      	uxth	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	460b      	mov	r3, r1
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002738:	2300      	movs	r3, #0
 800273a:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b42      	cmp	r3, #66	; 0x42
 8002746:	d101      	bne.n	800274c <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
 800274a:	e04e      	b.n	80027ea <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2242      	movs	r2, #66	; 0x42
 8002750:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 031c 	and.w	r3, r3, #28
 8002762:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8a1b      	ldrh	r3, [r3, #16]
 8002768:	02db      	lsls	r3, r3, #11
 800276a:	b29b      	uxth	r3, r3
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	019b      	lsls	r3, r3, #6
 8002776:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f043 0302 	orr.w	r3, r3, #2
 8002786:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80027a2:	f7fe fc9b 	bl	80010dc <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027a8:	e015      	b.n	80027d6 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80027aa:	f7fe fc97 	bl	80010dc <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b8:	d309      	bcc.n	80027ce <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e00d      	b.n	80027ea <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e4      	bne.n	80027aa <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b082      	sub	sp, #8
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_ETH_Start+0x16>
 8002804:	2302      	movs	r3, #2
 8002806:	e01f      	b.n	8002848 <HAL_ETH_Start+0x56>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fb45 	bl	8002ea8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fb7c 	bl	8002f1c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fc13 	bl	8003050 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fbb0 	bl	8002f90 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fbdd 	bl	8002ff0 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_ETH_Stop+0x16>
 8002862:	2302      	movs	r3, #2
 8002864:	e01f      	b.n	80028a6 <HAL_ETH_Stop+0x56>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2202      	movs	r2, #2
 8002872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fba2 	bl	8002fc0 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f000 fbcf 	bl	8003020 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fb67 	bl	8002f56 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fbe1 	bl	8003050 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fb27 	bl	8002ee2 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3708      	adds	r7, #8
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_ETH_ConfigMAC+0x1c>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e0e4      	b.n	8002a96 <HAL_ETH_ConfigMAC+0x1e6>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80b1 	beq.w	8002a46 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4b6c      	ldr	r3, [pc, #432]	; (8002aa0 <HAL_ETH_ConfigMAC+0x1f0>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80028fc:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8002902:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8002908:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 800290e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8002914:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800291a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8002920:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8002926:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 800292c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8002932:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8002938:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 800293e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4313      	orrs	r3, r2
 8002944:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002956:	2001      	movs	r0, #1
 8002958:	f7fe fbcc 	bl	80010f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68fa      	ldr	r2, [r7, #12]
 8002962:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800296c:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002972:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002978:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800297e:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002984:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800298a:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002996:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8002998:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f7fe fba6 	bl	80010f4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029b8:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029c2:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	f64f 7341 	movw	r3, #65345	; 0xff41
 80029d2:	4013      	ands	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80029e0:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80029e6:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80029ec:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80029f2:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80029f8:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a10:	2001      	movs	r0, #1
 8002a12:	f7fe fb6f 	bl	80010f4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7fe fb5c 	bl	80010f4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	61da      	str	r2, [r3, #28]
 8002a44:	e01e      	b.n	8002a84 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002a54:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7fe fb3c 	bl	80010f4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	ff20810f 	.word	0xff20810f

08002aa4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b0b0      	sub	sp, #192	; 0xc0
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ac0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ac8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002aca:	2300      	movs	r3, #0
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002ada:	2300      	movs	r3, #0
 8002adc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aee:	663b      	str	r3, [r7, #96]	; 0x60
 8002af0:	e001      	b.n	8002af6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002af2:	2300      	movs	r3, #0
 8002af4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002af6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afa:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002afc:	2300      	movs	r3, #0
 8002afe:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b00:	2300      	movs	r3, #0
 8002b02:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002b04:	2300      	movs	r3, #0
 8002b06:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002b10:	2340      	movs	r3, #64	; 0x40
 8002b12:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002b20:	2300      	movs	r3, #0
 8002b22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002b26:	2300      	movs	r3, #0
 8002b28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002b44:	2380      	movs	r3, #128	; 0x80
 8002b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002b50:	2300      	movs	r3, #0
 8002b52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002b78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b7c:	4bac      	ldr	r3, [pc, #688]	; (8002e30 <ETH_MACDMAConfig+0x38c>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002b88:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002b8c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002b90:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002b96:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002b9a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002b9e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002ba4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002ba8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002baa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002bac:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002bae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002bb0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002bb4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002bb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002bb8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002bba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bcc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f7fe fa8b 	bl	80010f4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002be6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002be8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002bea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002bec:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002bee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002bf0:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002bf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002bf6:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002bf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002bfc:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002c02:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002c08:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002c0c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002c14:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002c16:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c22:	2001      	movs	r0, #1
 8002c24:	f7fe fa66 	bl	80010f4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c30:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002c3a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002c44:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	699b      	ldr	r3, [r3, #24]
 8002c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002c50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c54:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002c58:	4013      	ands	r3, r2
 8002c5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c62:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002c64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c68:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002c6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002c6e:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002c70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002c74:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002c76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002c7a:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002c7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002c80:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002c82:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c86:	4313      	orrs	r3, r2
 8002c88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c94:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	f7fe fa27 	bl	80010f4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cae:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cb0:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002cb4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cca:	2001      	movs	r0, #1
 8002ccc:	f7fe fa12 	bl	80010f4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002cd8:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002cde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ce2:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002ce8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002cec:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002cfe:	2304      	movs	r3, #4
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d06:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d0c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d12:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002d14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d18:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002d22:	2300      	movs	r3, #0
 8002d24:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d2e:	3318      	adds	r3, #24
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002d36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <ETH_MACDMAConfig+0x390>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d42:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002d44:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d46:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002d48:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002d4a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002d4c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002d4e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002d50:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002d52:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002d54:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002d56:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002d58:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002d5a:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002d5e:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002d62:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002d64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d76:	3318      	adds	r3, #24
 8002d78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d7c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d86:	3318      	adds	r3, #24
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f7fe f9b0 	bl	80010f4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d9c:	3318      	adds	r3, #24
 8002d9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002da2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002da8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002dac:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002db0:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002db4:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002db8:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002dba:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002dbe:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dcc:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ddc:	2001      	movs	r0, #1
 8002dde:	f7fe f989 	bl	80010f4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dee:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d10f      	bne.n	8002e18 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e00:	331c      	adds	r3, #28
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e14:	331c      	adds	r3, #28
 8002e16:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2100      	movs	r1, #0
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f809 	bl	8002e38 <ETH_MACAddressConfig>
}
 8002e26:	bf00      	nop
 8002e28:	37c0      	adds	r7, #192	; 0xc0
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	ff20810f 	.word	0xff20810f
 8002e34:	f8de3f23 	.word	0xf8de3f23

08002e38 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3305      	adds	r3, #5
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	3204      	adds	r2, #4
 8002e50:	7812      	ldrb	r2, [r2, #0]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <ETH_MACAddressConfig+0x68>)
 8002e5a:	4413      	add	r3, r2
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3303      	adds	r3, #3
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	061a      	lsls	r2, r3, #24
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	041b      	lsls	r3, r3, #16
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3301      	adds	r3, #1
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	021b      	lsls	r3, r3, #8
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <ETH_MACAddressConfig+0x6c>)
 8002e8a:	4413      	add	r3, r2
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	6013      	str	r3, [r2, #0]
}
 8002e92:	bf00      	nop
 8002e94:	371c      	adds	r7, #28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	40028040 	.word	0x40028040
 8002ea4:	40028044 	.word	0x40028044

08002ea8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0208 	orr.w	r2, r2, #8
 8002ec2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002ecc:	2001      	movs	r0, #1
 8002ece:	f000 f8e9 	bl	80030a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	601a      	str	r2, [r3, #0]
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0208 	bic.w	r2, r2, #8
 8002efc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f06:	2001      	movs	r0, #1
 8002f08:	f000 f8cc 	bl	80030a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	601a      	str	r2, [r3, #0]
}
 8002f14:	bf00      	nop
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0204 	orr.w	r2, r2, #4
 8002f36:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f40:	2001      	movs	r0, #1
 8002f42:	f000 f8af 	bl	80030a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	601a      	str	r2, [r3, #0]
}
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b084      	sub	sp, #16
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0204 	bic.w	r2, r2, #4
 8002f70:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002f7a:	2001      	movs	r0, #1
 8002f7c:	f000 f892 	bl	80030a4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	601a      	str	r2, [r3, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa0:	3318      	adds	r3, #24
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb0:	3318      	adds	r3, #24
 8002fb2:	601a      	str	r2, [r3, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fd0:	3318      	adds	r3, #24
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe0:	3318      	adds	r3, #24
 8002fe2:	601a      	str	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003000:	3318      	adds	r3, #24
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0202 	orr.w	r2, r2, #2
 800300c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003010:	3318      	adds	r3, #24
 8003012:	601a      	str	r2, [r3, #0]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003030:	3318      	adds	r3, #24
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0202 	bic.w	r2, r2, #2
 800303c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003040:	3318      	adds	r3, #24
 8003042:	601a      	str	r2, [r3, #0]
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003064:	3318      	adds	r3, #24
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003074:	3318      	adds	r3, #24
 8003076:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003080:	3318      	adds	r3, #24
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003086:	2001      	movs	r0, #1
 8003088:	f000 f80c 	bl	80030a4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003096:	3318      	adds	r3, #24
 8003098:	601a      	str	r2, [r3, #0]
}
 800309a:	bf00      	nop
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80030ac:	4b0b      	ldr	r3, [pc, #44]	; (80030dc <ETH_Delay+0x38>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0b      	ldr	r2, [pc, #44]	; (80030e0 <ETH_Delay+0x3c>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0a5b      	lsrs	r3, r3, #9
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80030c0:	bf00      	nop
  } 
  while (Delay --);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1e5a      	subs	r2, r3, #1
 80030c6:	60fa      	str	r2, [r7, #12]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1f9      	bne.n	80030c0 <ETH_Delay+0x1c>
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000000 	.word	0x20000000
 80030e0:	10624dd3 	.word	0x10624dd3

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e16b      	b.n	80033d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	f040 815a 	bne.w	80033d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003132:	2b02      	cmp	r3, #2
 8003134:	d130      	bne.n	8003198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d017      	beq.n	80031d4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d123      	bne.n	8003228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	08da      	lsrs	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3208      	adds	r2, #8
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80b4 	beq.w	80033d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <HAL_GPIO_Init+0x30c>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a5f      	ldr	r2, [pc, #380]	; (80033f0 <HAL_GPIO_Init+0x30c>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b5d      	ldr	r3, [pc, #372]	; (80033f0 <HAL_GPIO_Init+0x30c>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003286:	4a5b      	ldr	r2, [pc, #364]	; (80033f4 <HAL_GPIO_Init+0x310>)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_GPIO_Init+0x314>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02b      	beq.n	800330a <HAL_GPIO_Init+0x226>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a51      	ldr	r2, [pc, #324]	; (80033fc <HAL_GPIO_Init+0x318>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d025      	beq.n	8003306 <HAL_GPIO_Init+0x222>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a50      	ldr	r2, [pc, #320]	; (8003400 <HAL_GPIO_Init+0x31c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01f      	beq.n	8003302 <HAL_GPIO_Init+0x21e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4f      	ldr	r2, [pc, #316]	; (8003404 <HAL_GPIO_Init+0x320>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d019      	beq.n	80032fe <HAL_GPIO_Init+0x21a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4e      	ldr	r2, [pc, #312]	; (8003408 <HAL_GPIO_Init+0x324>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0x216>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4d      	ldr	r2, [pc, #308]	; (800340c <HAL_GPIO_Init+0x328>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00d      	beq.n	80032f6 <HAL_GPIO_Init+0x212>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4c      	ldr	r2, [pc, #304]	; (8003410 <HAL_GPIO_Init+0x32c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <HAL_GPIO_Init+0x20e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4b      	ldr	r2, [pc, #300]	; (8003414 <HAL_GPIO_Init+0x330>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_GPIO_Init+0x20a>
 80032ea:	2307      	movs	r3, #7
 80032ec:	e00e      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032ee:	2308      	movs	r3, #8
 80032f0:	e00c      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032f2:	2306      	movs	r3, #6
 80032f4:	e00a      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032f6:	2305      	movs	r3, #5
 80032f8:	e008      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e006      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032fe:	2303      	movs	r3, #3
 8003300:	e004      	b.n	800330c <HAL_GPIO_Init+0x228>
 8003302:	2302      	movs	r3, #2
 8003304:	e002      	b.n	800330c <HAL_GPIO_Init+0x228>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_GPIO_Init+0x228>
 800330a:	2300      	movs	r3, #0
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f002 0203 	and.w	r2, r2, #3
 8003312:	0092      	lsls	r2, r2, #2
 8003314:	4093      	lsls	r3, r2
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800331c:	4935      	ldr	r1, [pc, #212]	; (80033f4 <HAL_GPIO_Init+0x310>)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	3302      	adds	r3, #2
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_GPIO_Init+0x334>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800334e:	4a32      	ldr	r2, [pc, #200]	; (8003418 <HAL_GPIO_Init+0x334>)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003354:	4b30      	ldr	r3, [pc, #192]	; (8003418 <HAL_GPIO_Init+0x334>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <HAL_GPIO_Init+0x334>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <HAL_GPIO_Init+0x334>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033a2:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <HAL_GPIO_Init+0x334>)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_GPIO_Init+0x334>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033cc:	4a12      	ldr	r2, [pc, #72]	; (8003418 <HAL_GPIO_Init+0x334>)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	f67f ae90 	bls.w	8003100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3724      	adds	r7, #36	; 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40013800 	.word	0x40013800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	40020400 	.word	0x40020400
 8003400:	40020800 	.word	0x40020800
 8003404:	40020c00 	.word	0x40020c00
 8003408:	40021000 	.word	0x40021000
 800340c:	40021400 	.word	0x40021400
 8003410:	40021800 	.word	0x40021800
 8003414:	40021c00 	.word	0x40021c00
 8003418:	40013c00 	.word	0x40013c00

0800341c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
 8003428:	4613      	mov	r3, r2
 800342a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800342c:	787b      	ldrb	r3, [r7, #1]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003438:	e003      	b.n	8003442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800343a:	887b      	ldrh	r3, [r7, #2]
 800343c:	041a      	lsls	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	619a      	str	r2, [r3, #24]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003460:	887a      	ldrh	r2, [r7, #2]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	041a      	lsls	r2, r3, #16
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43d9      	mvns	r1, r3
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	400b      	ands	r3, r1
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	619a      	str	r2, [r3, #24]
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e264      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d075      	beq.n	800358e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034a2:	4ba3      	ldr	r3, [pc, #652]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d00c      	beq.n	80034c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ae:	4ba0      	ldr	r3, [pc, #640]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d112      	bne.n	80034e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ba:	4b9d      	ldr	r3, [pc, #628]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c6:	d10b      	bne.n	80034e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c8:	4b99      	ldr	r3, [pc, #612]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d05b      	beq.n	800358c <HAL_RCC_OscConfig+0x108>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d157      	bne.n	800358c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e23f      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e8:	d106      	bne.n	80034f8 <HAL_RCC_OscConfig+0x74>
 80034ea:	4b91      	ldr	r3, [pc, #580]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a90      	ldr	r2, [pc, #576]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80034f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	e01d      	b.n	8003534 <HAL_RCC_OscConfig+0xb0>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003500:	d10c      	bne.n	800351c <HAL_RCC_OscConfig+0x98>
 8003502:	4b8b      	ldr	r3, [pc, #556]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a8a      	ldr	r2, [pc, #552]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800350c:	6013      	str	r3, [r2, #0]
 800350e:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a87      	ldr	r2, [pc, #540]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	e00b      	b.n	8003534 <HAL_RCC_OscConfig+0xb0>
 800351c:	4b84      	ldr	r3, [pc, #528]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a83      	ldr	r2, [pc, #524]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b81      	ldr	r3, [pc, #516]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a80      	ldr	r2, [pc, #512]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 800352e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d013      	beq.n	8003564 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7fd fdce 	bl	80010dc <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003544:	f7fd fdca 	bl	80010dc <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	; 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e204      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003556:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f0      	beq.n	8003544 <HAL_RCC_OscConfig+0xc0>
 8003562:	e014      	b.n	800358e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fd fdba 	bl	80010dc <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800356c:	f7fd fdb6 	bl	80010dc <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	; 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e1f0      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357e:	4b6c      	ldr	r3, [pc, #432]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0xe8>
 800358a:	e000      	b.n	800358e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d063      	beq.n	8003662 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800359a:	4b65      	ldr	r3, [pc, #404]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035a6:	4b62      	ldr	r3, [pc, #392]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ae:	2b08      	cmp	r3, #8
 80035b0:	d11c      	bne.n	80035ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b2:	4b5f      	ldr	r3, [pc, #380]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d116      	bne.n	80035ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035be:	4b5c      	ldr	r3, [pc, #368]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <HAL_RCC_OscConfig+0x152>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d001      	beq.n	80035d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e1c4      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d6:	4b56      	ldr	r3, [pc, #344]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	4952      	ldr	r1, [pc, #328]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ea:	e03a      	b.n	8003662 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d020      	beq.n	8003636 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035f4:	4b4f      	ldr	r3, [pc, #316]	; (8003734 <HAL_RCC_OscConfig+0x2b0>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fa:	f7fd fd6f 	bl	80010dc <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003602:	f7fd fd6b 	bl	80010dc <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e1a5      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003614:	4b46      	ldr	r3, [pc, #280]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003620:	4b43      	ldr	r3, [pc, #268]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	4940      	ldr	r1, [pc, #256]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003630:	4313      	orrs	r3, r2
 8003632:	600b      	str	r3, [r1, #0]
 8003634:	e015      	b.n	8003662 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003636:	4b3f      	ldr	r3, [pc, #252]	; (8003734 <HAL_RCC_OscConfig+0x2b0>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fd fd4e 	bl	80010dc <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003644:	f7fd fd4a 	bl	80010dc <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e184      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003656:	4b36      	ldr	r3, [pc, #216]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0308 	and.w	r3, r3, #8
 800366a:	2b00      	cmp	r3, #0
 800366c:	d030      	beq.n	80036d0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d016      	beq.n	80036a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003676:	4b30      	ldr	r3, [pc, #192]	; (8003738 <HAL_RCC_OscConfig+0x2b4>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367c:	f7fd fd2e 	bl	80010dc <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003684:	f7fd fd2a 	bl	80010dc <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e164      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003696:	4b26      	ldr	r3, [pc, #152]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0x200>
 80036a2:	e015      	b.n	80036d0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_OscConfig+0x2b4>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036aa:	f7fd fd17 	bl	80010dc <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036b2:	f7fd fd13 	bl	80010dc <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e14d      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c4:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80036c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1f0      	bne.n	80036b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80a0 	beq.w	800381e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036de:	2300      	movs	r3, #0
 80036e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036e2:	4b13      	ldr	r3, [pc, #76]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	60bb      	str	r3, [r7, #8]
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	4a0e      	ldr	r2, [pc, #56]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 80036f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fc:	6413      	str	r3, [r2, #64]	; 0x40
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <HAL_RCC_OscConfig+0x2ac>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370a:	2301      	movs	r3, #1
 800370c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800370e:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_OscConfig+0x2b8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d121      	bne.n	800375e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800371a:	4b08      	ldr	r3, [pc, #32]	; (800373c <HAL_RCC_OscConfig+0x2b8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a07      	ldr	r2, [pc, #28]	; (800373c <HAL_RCC_OscConfig+0x2b8>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003726:	f7fd fcd9 	bl	80010dc <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372c:	e011      	b.n	8003752 <HAL_RCC_OscConfig+0x2ce>
 800372e:	bf00      	nop
 8003730:	40023800 	.word	0x40023800
 8003734:	42470000 	.word	0x42470000
 8003738:	42470e80 	.word	0x42470e80
 800373c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003740:	f7fd fccc 	bl	80010dc <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e106      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003752:	4b85      	ldr	r3, [pc, #532]	; (8003968 <HAL_RCC_OscConfig+0x4e4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d0f0      	beq.n	8003740 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d106      	bne.n	8003774 <HAL_RCC_OscConfig+0x2f0>
 8003766:	4b81      	ldr	r3, [pc, #516]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	4a80      	ldr	r2, [pc, #512]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	6713      	str	r3, [r2, #112]	; 0x70
 8003772:	e01c      	b.n	80037ae <HAL_RCC_OscConfig+0x32a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b05      	cmp	r3, #5
 800377a:	d10c      	bne.n	8003796 <HAL_RCC_OscConfig+0x312>
 800377c:	4b7b      	ldr	r3, [pc, #492]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 800377e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003780:	4a7a      	ldr	r2, [pc, #488]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	6713      	str	r3, [r2, #112]	; 0x70
 8003788:	4b78      	ldr	r3, [pc, #480]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	4a77      	ldr	r2, [pc, #476]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6713      	str	r3, [r2, #112]	; 0x70
 8003794:	e00b      	b.n	80037ae <HAL_RCC_OscConfig+0x32a>
 8003796:	4b75      	ldr	r3, [pc, #468]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	4a74      	ldr	r2, [pc, #464]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	6713      	str	r3, [r2, #112]	; 0x70
 80037a2:	4b72      	ldr	r3, [pc, #456]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a6:	4a71      	ldr	r2, [pc, #452]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 80037a8:	f023 0304 	bic.w	r3, r3, #4
 80037ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d015      	beq.n	80037e2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b6:	f7fd fc91 	bl	80010dc <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037bc:	e00a      	b.n	80037d4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037be:	f7fd fc8d 	bl	80010dc <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0c5      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d4:	4b65      	ldr	r3, [pc, #404]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0ee      	beq.n	80037be <HAL_RCC_OscConfig+0x33a>
 80037e0:	e014      	b.n	800380c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e2:	f7fd fc7b 	bl	80010dc <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e8:	e00a      	b.n	8003800 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ea:	f7fd fc77 	bl	80010dc <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e0af      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003800:	4b5a      	ldr	r3, [pc, #360]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 8003802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003804:	f003 0302 	and.w	r3, r3, #2
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ee      	bne.n	80037ea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800380c:	7dfb      	ldrb	r3, [r7, #23]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d105      	bne.n	800381e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003812:	4b56      	ldr	r3, [pc, #344]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a55      	ldr	r2, [pc, #340]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 8003818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 809b 	beq.w	800395e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b08      	cmp	r3, #8
 8003832:	d05c      	beq.n	80038ee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d141      	bne.n	80038c0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383c:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <HAL_RCC_OscConfig+0x4ec>)
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003842:	f7fd fc4b 	bl	80010dc <HAL_GetTick>
 8003846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003848:	e008      	b.n	800385c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800384a:	f7fd fc47 	bl	80010dc <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	2b02      	cmp	r3, #2
 8003856:	d901      	bls.n	800385c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e081      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385c:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1f0      	bne.n	800384a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	431a      	orrs	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	019b      	lsls	r3, r3, #6
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	085b      	lsrs	r3, r3, #1
 8003880:	3b01      	subs	r3, #1
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388a:	061b      	lsls	r3, r3, #24
 800388c:	4937      	ldr	r1, [pc, #220]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 800388e:	4313      	orrs	r3, r2
 8003890:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003892:	4b37      	ldr	r3, [pc, #220]	; (8003970 <HAL_RCC_OscConfig+0x4ec>)
 8003894:	2201      	movs	r2, #1
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fd fc20 	bl	80010dc <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fd fc1c 	bl	80010dc <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e056      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b2:	4b2e      	ldr	r3, [pc, #184]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x41c>
 80038be:	e04e      	b.n	800395e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c0:	4b2b      	ldr	r3, [pc, #172]	; (8003970 <HAL_RCC_OscConfig+0x4ec>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c6:	f7fd fc09 	bl	80010dc <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fd fc05 	bl	80010dc <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e03f      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038e0:	4b22      	ldr	r3, [pc, #136]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCC_OscConfig+0x44a>
 80038ec:	e037      	b.n	800395e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e032      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038fa:	4b1c      	ldr	r3, [pc, #112]	; (800396c <HAL_RCC_OscConfig+0x4e8>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d028      	beq.n	800395a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003912:	429a      	cmp	r2, r3
 8003914:	d121      	bne.n	800395a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003920:	429a      	cmp	r2, r3
 8003922:	d11a      	bne.n	800395a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003930:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003932:	4293      	cmp	r3, r2
 8003934:	d111      	bne.n	800395a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	085b      	lsrs	r3, r3, #1
 8003942:	3b01      	subs	r3, #1
 8003944:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d107      	bne.n	800395a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003954:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003956:	429a      	cmp	r2, r3
 8003958:	d001      	beq.n	800395e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40007000 	.word	0x40007000
 800396c:	40023800 	.word	0x40023800
 8003970:	42470060 	.word	0x42470060

08003974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0cc      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003988:	4b68      	ldr	r3, [pc, #416]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d90c      	bls.n	80039b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b65      	ldr	r3, [pc, #404]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800399e:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0307 	and.w	r3, r3, #7
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d001      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0b8      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0302 	and.w	r3, r3, #2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d020      	beq.n	80039fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c8:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	4a58      	ldr	r2, [pc, #352]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039e0:	4b53      	ldr	r3, [pc, #332]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	4a52      	ldr	r2, [pc, #328]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ec:	4b50      	ldr	r3, [pc, #320]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	494d      	ldr	r1, [pc, #308]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	4313      	orrs	r3, r2
 80039fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d044      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d107      	bne.n	8003a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a12:	4b47      	ldr	r3, [pc, #284]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d119      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e07f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d003      	beq.n	8003a32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a2e:	2b03      	cmp	r3, #3
 8003a30:	d107      	bne.n	8003a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a32:	4b3f      	ldr	r3, [pc, #252]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e06f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a42:	4b3b      	ldr	r3, [pc, #236]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e067      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a52:	4b37      	ldr	r3, [pc, #220]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f023 0203 	bic.w	r2, r3, #3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	4934      	ldr	r1, [pc, #208]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a64:	f7fd fb3a 	bl	80010dc <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a6c:	f7fd fb36 	bl	80010dc <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e04f      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a82:	4b2b      	ldr	r3, [pc, #172]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 020c 	and.w	r2, r3, #12
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d1eb      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a94:	4b25      	ldr	r3, [pc, #148]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d20c      	bcs.n	8003abc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	b2d2      	uxtb	r2, r2
 8003aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aaa:	4b20      	ldr	r3, [pc, #128]	; (8003b2c <HAL_RCC_ClockConfig+0x1b8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0307 	and.w	r3, r3, #7
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d001      	beq.n	8003abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e032      	b.n	8003b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0304 	and.w	r3, r3, #4
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ac8:	4b19      	ldr	r3, [pc, #100]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	4916      	ldr	r1, [pc, #88]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	490e      	ldr	r1, [pc, #56]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003afa:	f000 f821 	bl	8003b40 <HAL_RCC_GetSysClockFreq>
 8003afe:	4602      	mov	r2, r0
 8003b00:	4b0b      	ldr	r3, [pc, #44]	; (8003b30 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	f003 030f 	and.w	r3, r3, #15
 8003b0a:	490a      	ldr	r1, [pc, #40]	; (8003b34 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	5ccb      	ldrb	r3, [r1, r3]
 8003b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b12:	4a09      	ldr	r2, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <HAL_RCC_ClockConfig+0x1c8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd f90e 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8003b20:	2300      	movs	r3, #0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023c00 	.word	0x40023c00
 8003b30:	40023800 	.word	0x40023800
 8003b34:	0801d00c 	.word	0x0801d00c
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	20000004 	.word	0x20000004

08003b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b40:	b5b0      	push	{r4, r5, r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b46:	2100      	movs	r1, #0
 8003b48:	6079      	str	r1, [r7, #4]
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	60f9      	str	r1, [r7, #12]
 8003b4e:	2100      	movs	r1, #0
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003b52:	2100      	movs	r1, #0
 8003b54:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b56:	4952      	ldr	r1, [pc, #328]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b58:	6889      	ldr	r1, [r1, #8]
 8003b5a:	f001 010c 	and.w	r1, r1, #12
 8003b5e:	2908      	cmp	r1, #8
 8003b60:	d00d      	beq.n	8003b7e <HAL_RCC_GetSysClockFreq+0x3e>
 8003b62:	2908      	cmp	r1, #8
 8003b64:	f200 8094 	bhi.w	8003c90 <HAL_RCC_GetSysClockFreq+0x150>
 8003b68:	2900      	cmp	r1, #0
 8003b6a:	d002      	beq.n	8003b72 <HAL_RCC_GetSysClockFreq+0x32>
 8003b6c:	2904      	cmp	r1, #4
 8003b6e:	d003      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x38>
 8003b70:	e08e      	b.n	8003c90 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b72:	4b4c      	ldr	r3, [pc, #304]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b74:	60bb      	str	r3, [r7, #8]
       break;
 8003b76:	e08e      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b78:	4b4b      	ldr	r3, [pc, #300]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b7a:	60bb      	str	r3, [r7, #8]
      break;
 8003b7c:	e08b      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b7e:	4948      	ldr	r1, [pc, #288]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b80:	6849      	ldr	r1, [r1, #4]
 8003b82:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b86:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b88:	4945      	ldr	r1, [pc, #276]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b8a:	6849      	ldr	r1, [r1, #4]
 8003b8c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b90:	2900      	cmp	r1, #0
 8003b92:	d024      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b94:	4942      	ldr	r1, [pc, #264]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b96:	6849      	ldr	r1, [r1, #4]
 8003b98:	0989      	lsrs	r1, r1, #6
 8003b9a:	4608      	mov	r0, r1
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003ba4:	f04f 0500 	mov.w	r5, #0
 8003ba8:	ea00 0204 	and.w	r2, r0, r4
 8003bac:	ea01 0305 	and.w	r3, r1, r5
 8003bb0:	493d      	ldr	r1, [pc, #244]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003bb2:	fb01 f003 	mul.w	r0, r1, r3
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	fb01 f102 	mul.w	r1, r1, r2
 8003bbc:	1844      	adds	r4, r0, r1
 8003bbe:	493a      	ldr	r1, [pc, #232]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003bc0:	fba2 0101 	umull	r0, r1, r2, r1
 8003bc4:	1863      	adds	r3, r4, r1
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	f7fc fb66 	bl	80002a0 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e04a      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bde:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	099b      	lsrs	r3, r3, #6
 8003be4:	461a      	mov	r2, r3
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	ea02 0400 	and.w	r4, r2, r0
 8003bf6:	ea03 0501 	and.w	r5, r3, r1
 8003bfa:	4620      	mov	r0, r4
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	014b      	lsls	r3, r1, #5
 8003c08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c0c:	0142      	lsls	r2, r0, #5
 8003c0e:	4610      	mov	r0, r2
 8003c10:	4619      	mov	r1, r3
 8003c12:	1b00      	subs	r0, r0, r4
 8003c14:	eb61 0105 	sbc.w	r1, r1, r5
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	018b      	lsls	r3, r1, #6
 8003c22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c26:	0182      	lsls	r2, r0, #6
 8003c28:	1a12      	subs	r2, r2, r0
 8003c2a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2e:	f04f 0000 	mov.w	r0, #0
 8003c32:	f04f 0100 	mov.w	r1, #0
 8003c36:	00d9      	lsls	r1, r3, #3
 8003c38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c3c:	00d0      	lsls	r0, r2, #3
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	1912      	adds	r2, r2, r4
 8003c44:	eb45 0303 	adc.w	r3, r5, r3
 8003c48:	f04f 0000 	mov.w	r0, #0
 8003c4c:	f04f 0100 	mov.w	r1, #0
 8003c50:	0299      	lsls	r1, r3, #10
 8003c52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c56:	0290      	lsls	r0, r2, #10
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4610      	mov	r0, r2
 8003c5e:	4619      	mov	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	461a      	mov	r2, r3
 8003c64:	f04f 0300 	mov.w	r3, #0
 8003c68:	f7fc fb1a 	bl	80002a0 <__aeabi_uldivmod>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	460b      	mov	r3, r1
 8003c70:	4613      	mov	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	3301      	adds	r3, #1
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c8c:	60bb      	str	r3, [r7, #8]
      break;
 8003c8e:	e002      	b.n	8003c96 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b04      	ldr	r3, [pc, #16]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c92:	60bb      	str	r3, [r7, #8]
      break;
 8003c94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c96:	68bb      	ldr	r3, [r7, #8]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	00b71b00 	.word	0x00b71b00

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000000 	.word	0x20000000

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff0 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0a9b      	lsrs	r3, r3, #10
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	0801d01c 	.word	0x0801d01c

08003cec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cfc:	4b12      	ldr	r3, [pc, #72]	; (8003d48 <HAL_RCC_GetClockConfig+0x5c>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0203 	and.w	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <HAL_RCC_GetClockConfig+0x5c>)
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <HAL_RCC_GetClockConfig+0x5c>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <HAL_RCC_GetClockConfig+0x5c>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <HAL_RCC_GetClockConfig+0x60>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0207 	and.w	r2, r3, #7
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	601a      	str	r2, [r3, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800
 8003d4c:	40023c00 	.word	0x40023c00

08003d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e041      	b.n	8003de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f839 	bl	8003dee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4610      	mov	r0, r2
 8003d90:	f000 f9d8 	bl	8004144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d001      	beq.n	8003e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e04e      	b.n	8003eba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a23      	ldr	r2, [pc, #140]	; (8003ec8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d022      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e46:	d01d      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a1f      	ldr	r2, [pc, #124]	; (8003ecc <HAL_TIM_Base_Start_IT+0xc8>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d018      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a1e      	ldr	r2, [pc, #120]	; (8003ed0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d00e      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d009      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a19      	ldr	r2, [pc, #100]	; (8003edc <HAL_TIM_Base_Start_IT+0xd8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d004      	beq.n	8003e84 <HAL_TIM_Base_Start_IT+0x80>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a18      	ldr	r2, [pc, #96]	; (8003ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d111      	bne.n	8003ea8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2b06      	cmp	r3, #6
 8003e94:	d010      	beq.n	8003eb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f042 0201 	orr.w	r2, r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	e007      	b.n	8003eb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0201 	orr.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	bf00      	nop
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40000800 	.word	0x40000800
 8003ed4:	40000c00 	.word	0x40000c00
 8003ed8:	40010400 	.word	0x40010400
 8003edc:	40014000 	.word	0x40014000
 8003ee0:	40001800 	.word	0x40001800

08003ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d122      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d11b      	bne.n	8003f40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f06f 0202 	mvn.w	r2, #2
 8003f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f003 0303 	and.w	r3, r3, #3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f8ee 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8003f2c:	e005      	b.n	8003f3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8e0 	bl	80040f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f8f1 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d122      	bne.n	8003f94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d11b      	bne.n	8003f94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0204 	mvn.w	r2, #4
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f8c4 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f8b6 	bl	80040f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f8c7 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	691b      	ldr	r3, [r3, #16]
 8003f9a:	f003 0308 	and.w	r3, r3, #8
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d122      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b08      	cmp	r3, #8
 8003fae:	d11b      	bne.n	8003fe8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0208 	mvn.w	r2, #8
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f89a 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f88c 	bl	80040f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f89d 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0310 	and.w	r3, r3, #16
 8003ff2:	2b10      	cmp	r3, #16
 8003ff4:	d122      	bne.n	800403c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b10      	cmp	r3, #16
 8004002:	d11b      	bne.n	800403c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f06f 0210 	mvn.w	r2, #16
 800400c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2208      	movs	r2, #8
 8004012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f870 	bl	8004108 <HAL_TIM_IC_CaptureCallback>
 8004028:	e005      	b.n	8004036 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f862 	bl	80040f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 f873 	bl	800411c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b01      	cmp	r3, #1
 8004048:	d10e      	bne.n	8004068 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0301 	and.w	r3, r3, #1
 8004054:	2b01      	cmp	r3, #1
 8004056:	d107      	bne.n	8004068 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0201 	mvn.w	r2, #1
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7fc fd92 	bl	8000b8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004072:	2b80      	cmp	r3, #128	; 0x80
 8004074:	d10e      	bne.n	8004094 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004080:	2b80      	cmp	r3, #128	; 0x80
 8004082:	d107      	bne.n	8004094 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800408c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f902 	bl	8004298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409e:	2b40      	cmp	r3, #64	; 0x40
 80040a0:	d10e      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d107      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f838 	bl	8004130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	d10e      	bne.n	80040ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d107      	bne.n	80040ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0220 	mvn.w	r2, #32
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f8cc 	bl	8004284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a40      	ldr	r2, [pc, #256]	; (8004258 <TIM_Base_SetConfig+0x114>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004162:	d00f      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3d      	ldr	r2, [pc, #244]	; (800425c <TIM_Base_SetConfig+0x118>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00b      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a3c      	ldr	r2, [pc, #240]	; (8004260 <TIM_Base_SetConfig+0x11c>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d007      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <TIM_Base_SetConfig+0x120>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d003      	beq.n	8004184 <TIM_Base_SetConfig+0x40>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a3a      	ldr	r2, [pc, #232]	; (8004268 <TIM_Base_SetConfig+0x124>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d108      	bne.n	8004196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2f      	ldr	r2, [pc, #188]	; (8004258 <TIM_Base_SetConfig+0x114>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d02b      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a4:	d027      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a2c      	ldr	r2, [pc, #176]	; (800425c <TIM_Base_SetConfig+0x118>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d023      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <TIM_Base_SetConfig+0x11c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d01f      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <TIM_Base_SetConfig+0x120>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01b      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a29      	ldr	r2, [pc, #164]	; (8004268 <TIM_Base_SetConfig+0x124>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d017      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a28      	ldr	r2, [pc, #160]	; (800426c <TIM_Base_SetConfig+0x128>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d013      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a27      	ldr	r2, [pc, #156]	; (8004270 <TIM_Base_SetConfig+0x12c>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d00f      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a26      	ldr	r2, [pc, #152]	; (8004274 <TIM_Base_SetConfig+0x130>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d00b      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a25      	ldr	r2, [pc, #148]	; (8004278 <TIM_Base_SetConfig+0x134>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d007      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a24      	ldr	r2, [pc, #144]	; (800427c <TIM_Base_SetConfig+0x138>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d003      	beq.n	80041f6 <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a23      	ldr	r2, [pc, #140]	; (8004280 <TIM_Base_SetConfig+0x13c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d108      	bne.n	8004208 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a0a      	ldr	r2, [pc, #40]	; (8004258 <TIM_Base_SetConfig+0x114>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d003      	beq.n	800423c <TIM_Base_SetConfig+0xf8>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <TIM_Base_SetConfig+0x124>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d103      	bne.n	8004244 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	615a      	str	r2, [r3, #20]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000
 800425c:	40000400 	.word	0x40000400
 8004260:	40000800 	.word	0x40000800
 8004264:	40000c00 	.word	0x40000c00
 8004268:	40010400 	.word	0x40010400
 800426c:	40014000 	.word	0x40014000
 8004270:	40014400 	.word	0x40014400
 8004274:	40014800 	.word	0x40014800
 8004278:	40001800 	.word	0x40001800
 800427c:	40001c00 	.word	0x40001c00
 8004280:	40002000 	.word	0x40002000

08004284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80042b2:	4ba0      	ldr	r3, [pc, #640]	; (8004534 <MX_LWIP_Init+0x288>)
 80042b4:	22c0      	movs	r2, #192	; 0xc0
 80042b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80042b8:	4b9e      	ldr	r3, [pc, #632]	; (8004534 <MX_LWIP_Init+0x288>)
 80042ba:	22a8      	movs	r2, #168	; 0xa8
 80042bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80042be:	4b9d      	ldr	r3, [pc, #628]	; (8004534 <MX_LWIP_Init+0x288>)
 80042c0:	2201      	movs	r2, #1
 80042c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 80042c4:	4b9b      	ldr	r3, [pc, #620]	; (8004534 <MX_LWIP_Init+0x288>)
 80042c6:	220a      	movs	r2, #10
 80042c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80042ca:	4b9b      	ldr	r3, [pc, #620]	; (8004538 <MX_LWIP_Init+0x28c>)
 80042cc:	22ff      	movs	r2, #255	; 0xff
 80042ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80042d0:	4b99      	ldr	r3, [pc, #612]	; (8004538 <MX_LWIP_Init+0x28c>)
 80042d2:	22ff      	movs	r2, #255	; 0xff
 80042d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80042d6:	4b98      	ldr	r3, [pc, #608]	; (8004538 <MX_LWIP_Init+0x28c>)
 80042d8:	22ff      	movs	r2, #255	; 0xff
 80042da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80042dc:	4b96      	ldr	r3, [pc, #600]	; (8004538 <MX_LWIP_Init+0x28c>)
 80042de:	2200      	movs	r2, #0
 80042e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80042e2:	4b96      	ldr	r3, [pc, #600]	; (800453c <MX_LWIP_Init+0x290>)
 80042e4:	22c0      	movs	r2, #192	; 0xc0
 80042e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80042e8:	4b94      	ldr	r3, [pc, #592]	; (800453c <MX_LWIP_Init+0x290>)
 80042ea:	22a8      	movs	r2, #168	; 0xa8
 80042ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80042ee:	4b93      	ldr	r3, [pc, #588]	; (800453c <MX_LWIP_Init+0x290>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80042f4:	4b91      	ldr	r3, [pc, #580]	; (800453c <MX_LWIP_Init+0x290>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80042fa:	2100      	movs	r1, #0
 80042fc:	2000      	movs	r0, #0
 80042fe:	f008 fa79 	bl	800c7f4 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004302:	4b8c      	ldr	r3, [pc, #560]	; (8004534 <MX_LWIP_Init+0x288>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	061a      	lsls	r2, r3, #24
 8004308:	4b8a      	ldr	r3, [pc, #552]	; (8004534 <MX_LWIP_Init+0x288>)
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	041b      	lsls	r3, r3, #16
 800430e:	431a      	orrs	r2, r3
 8004310:	4b88      	ldr	r3, [pc, #544]	; (8004534 <MX_LWIP_Init+0x288>)
 8004312:	789b      	ldrb	r3, [r3, #2]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	4313      	orrs	r3, r2
 8004318:	4a86      	ldr	r2, [pc, #536]	; (8004534 <MX_LWIP_Init+0x288>)
 800431a:	78d2      	ldrb	r2, [r2, #3]
 800431c:	4313      	orrs	r3, r2
 800431e:	061a      	lsls	r2, r3, #24
 8004320:	4b84      	ldr	r3, [pc, #528]	; (8004534 <MX_LWIP_Init+0x288>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	0619      	lsls	r1, r3, #24
 8004326:	4b83      	ldr	r3, [pc, #524]	; (8004534 <MX_LWIP_Init+0x288>)
 8004328:	785b      	ldrb	r3, [r3, #1]
 800432a:	041b      	lsls	r3, r3, #16
 800432c:	4319      	orrs	r1, r3
 800432e:	4b81      	ldr	r3, [pc, #516]	; (8004534 <MX_LWIP_Init+0x288>)
 8004330:	789b      	ldrb	r3, [r3, #2]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	430b      	orrs	r3, r1
 8004336:	497f      	ldr	r1, [pc, #508]	; (8004534 <MX_LWIP_Init+0x288>)
 8004338:	78c9      	ldrb	r1, [r1, #3]
 800433a:	430b      	orrs	r3, r1
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004342:	431a      	orrs	r2, r3
 8004344:	4b7b      	ldr	r3, [pc, #492]	; (8004534 <MX_LWIP_Init+0x288>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	0619      	lsls	r1, r3, #24
 800434a:	4b7a      	ldr	r3, [pc, #488]	; (8004534 <MX_LWIP_Init+0x288>)
 800434c:	785b      	ldrb	r3, [r3, #1]
 800434e:	041b      	lsls	r3, r3, #16
 8004350:	4319      	orrs	r1, r3
 8004352:	4b78      	ldr	r3, [pc, #480]	; (8004534 <MX_LWIP_Init+0x288>)
 8004354:	789b      	ldrb	r3, [r3, #2]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	430b      	orrs	r3, r1
 800435a:	4976      	ldr	r1, [pc, #472]	; (8004534 <MX_LWIP_Init+0x288>)
 800435c:	78c9      	ldrb	r1, [r1, #3]
 800435e:	430b      	orrs	r3, r1
 8004360:	0a1b      	lsrs	r3, r3, #8
 8004362:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004366:	431a      	orrs	r2, r3
 8004368:	4b72      	ldr	r3, [pc, #456]	; (8004534 <MX_LWIP_Init+0x288>)
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	0619      	lsls	r1, r3, #24
 800436e:	4b71      	ldr	r3, [pc, #452]	; (8004534 <MX_LWIP_Init+0x288>)
 8004370:	785b      	ldrb	r3, [r3, #1]
 8004372:	041b      	lsls	r3, r3, #16
 8004374:	4319      	orrs	r1, r3
 8004376:	4b6f      	ldr	r3, [pc, #444]	; (8004534 <MX_LWIP_Init+0x288>)
 8004378:	789b      	ldrb	r3, [r3, #2]
 800437a:	021b      	lsls	r3, r3, #8
 800437c:	430b      	orrs	r3, r1
 800437e:	496d      	ldr	r1, [pc, #436]	; (8004534 <MX_LWIP_Init+0x288>)
 8004380:	78c9      	ldrb	r1, [r1, #3]
 8004382:	430b      	orrs	r3, r1
 8004384:	0e1b      	lsrs	r3, r3, #24
 8004386:	4313      	orrs	r3, r2
 8004388:	4a6d      	ldr	r2, [pc, #436]	; (8004540 <MX_LWIP_Init+0x294>)
 800438a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800438c:	4b6a      	ldr	r3, [pc, #424]	; (8004538 <MX_LWIP_Init+0x28c>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	061a      	lsls	r2, r3, #24
 8004392:	4b69      	ldr	r3, [pc, #420]	; (8004538 <MX_LWIP_Init+0x28c>)
 8004394:	785b      	ldrb	r3, [r3, #1]
 8004396:	041b      	lsls	r3, r3, #16
 8004398:	431a      	orrs	r2, r3
 800439a:	4b67      	ldr	r3, [pc, #412]	; (8004538 <MX_LWIP_Init+0x28c>)
 800439c:	789b      	ldrb	r3, [r3, #2]
 800439e:	021b      	lsls	r3, r3, #8
 80043a0:	4313      	orrs	r3, r2
 80043a2:	4a65      	ldr	r2, [pc, #404]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043a4:	78d2      	ldrb	r2, [r2, #3]
 80043a6:	4313      	orrs	r3, r2
 80043a8:	061a      	lsls	r2, r3, #24
 80043aa:	4b63      	ldr	r3, [pc, #396]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	0619      	lsls	r1, r3, #24
 80043b0:	4b61      	ldr	r3, [pc, #388]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043b2:	785b      	ldrb	r3, [r3, #1]
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	4319      	orrs	r1, r3
 80043b8:	4b5f      	ldr	r3, [pc, #380]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043ba:	789b      	ldrb	r3, [r3, #2]
 80043bc:	021b      	lsls	r3, r3, #8
 80043be:	430b      	orrs	r3, r1
 80043c0:	495d      	ldr	r1, [pc, #372]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043c2:	78c9      	ldrb	r1, [r1, #3]
 80043c4:	430b      	orrs	r3, r1
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80043cc:	431a      	orrs	r2, r3
 80043ce:	4b5a      	ldr	r3, [pc, #360]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	0619      	lsls	r1, r3, #24
 80043d4:	4b58      	ldr	r3, [pc, #352]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043d6:	785b      	ldrb	r3, [r3, #1]
 80043d8:	041b      	lsls	r3, r3, #16
 80043da:	4319      	orrs	r1, r3
 80043dc:	4b56      	ldr	r3, [pc, #344]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043de:	789b      	ldrb	r3, [r3, #2]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	430b      	orrs	r3, r1
 80043e4:	4954      	ldr	r1, [pc, #336]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043e6:	78c9      	ldrb	r1, [r1, #3]
 80043e8:	430b      	orrs	r3, r1
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80043f0:	431a      	orrs	r2, r3
 80043f2:	4b51      	ldr	r3, [pc, #324]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	0619      	lsls	r1, r3, #24
 80043f8:	4b4f      	ldr	r3, [pc, #316]	; (8004538 <MX_LWIP_Init+0x28c>)
 80043fa:	785b      	ldrb	r3, [r3, #1]
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	4319      	orrs	r1, r3
 8004400:	4b4d      	ldr	r3, [pc, #308]	; (8004538 <MX_LWIP_Init+0x28c>)
 8004402:	789b      	ldrb	r3, [r3, #2]
 8004404:	021b      	lsls	r3, r3, #8
 8004406:	430b      	orrs	r3, r1
 8004408:	494b      	ldr	r1, [pc, #300]	; (8004538 <MX_LWIP_Init+0x28c>)
 800440a:	78c9      	ldrb	r1, [r1, #3]
 800440c:	430b      	orrs	r3, r1
 800440e:	0e1b      	lsrs	r3, r3, #24
 8004410:	4313      	orrs	r3, r2
 8004412:	4a4c      	ldr	r2, [pc, #304]	; (8004544 <MX_LWIP_Init+0x298>)
 8004414:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004416:	4b49      	ldr	r3, [pc, #292]	; (800453c <MX_LWIP_Init+0x290>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	061a      	lsls	r2, r3, #24
 800441c:	4b47      	ldr	r3, [pc, #284]	; (800453c <MX_LWIP_Init+0x290>)
 800441e:	785b      	ldrb	r3, [r3, #1]
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	431a      	orrs	r2, r3
 8004424:	4b45      	ldr	r3, [pc, #276]	; (800453c <MX_LWIP_Init+0x290>)
 8004426:	789b      	ldrb	r3, [r3, #2]
 8004428:	021b      	lsls	r3, r3, #8
 800442a:	4313      	orrs	r3, r2
 800442c:	4a43      	ldr	r2, [pc, #268]	; (800453c <MX_LWIP_Init+0x290>)
 800442e:	78d2      	ldrb	r2, [r2, #3]
 8004430:	4313      	orrs	r3, r2
 8004432:	061a      	lsls	r2, r3, #24
 8004434:	4b41      	ldr	r3, [pc, #260]	; (800453c <MX_LWIP_Init+0x290>)
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	0619      	lsls	r1, r3, #24
 800443a:	4b40      	ldr	r3, [pc, #256]	; (800453c <MX_LWIP_Init+0x290>)
 800443c:	785b      	ldrb	r3, [r3, #1]
 800443e:	041b      	lsls	r3, r3, #16
 8004440:	4319      	orrs	r1, r3
 8004442:	4b3e      	ldr	r3, [pc, #248]	; (800453c <MX_LWIP_Init+0x290>)
 8004444:	789b      	ldrb	r3, [r3, #2]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	430b      	orrs	r3, r1
 800444a:	493c      	ldr	r1, [pc, #240]	; (800453c <MX_LWIP_Init+0x290>)
 800444c:	78c9      	ldrb	r1, [r1, #3]
 800444e:	430b      	orrs	r3, r1
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004456:	431a      	orrs	r2, r3
 8004458:	4b38      	ldr	r3, [pc, #224]	; (800453c <MX_LWIP_Init+0x290>)
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	0619      	lsls	r1, r3, #24
 800445e:	4b37      	ldr	r3, [pc, #220]	; (800453c <MX_LWIP_Init+0x290>)
 8004460:	785b      	ldrb	r3, [r3, #1]
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	4319      	orrs	r1, r3
 8004466:	4b35      	ldr	r3, [pc, #212]	; (800453c <MX_LWIP_Init+0x290>)
 8004468:	789b      	ldrb	r3, [r3, #2]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	430b      	orrs	r3, r1
 800446e:	4933      	ldr	r1, [pc, #204]	; (800453c <MX_LWIP_Init+0x290>)
 8004470:	78c9      	ldrb	r1, [r1, #3]
 8004472:	430b      	orrs	r3, r1
 8004474:	0a1b      	lsrs	r3, r3, #8
 8004476:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800447a:	431a      	orrs	r2, r3
 800447c:	4b2f      	ldr	r3, [pc, #188]	; (800453c <MX_LWIP_Init+0x290>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	0619      	lsls	r1, r3, #24
 8004482:	4b2e      	ldr	r3, [pc, #184]	; (800453c <MX_LWIP_Init+0x290>)
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	041b      	lsls	r3, r3, #16
 8004488:	4319      	orrs	r1, r3
 800448a:	4b2c      	ldr	r3, [pc, #176]	; (800453c <MX_LWIP_Init+0x290>)
 800448c:	789b      	ldrb	r3, [r3, #2]
 800448e:	021b      	lsls	r3, r3, #8
 8004490:	430b      	orrs	r3, r1
 8004492:	492a      	ldr	r1, [pc, #168]	; (800453c <MX_LWIP_Init+0x290>)
 8004494:	78c9      	ldrb	r1, [r1, #3]
 8004496:	430b      	orrs	r3, r1
 8004498:	0e1b      	lsrs	r3, r3, #24
 800449a:	4313      	orrs	r3, r2
 800449c:	4a2a      	ldr	r2, [pc, #168]	; (8004548 <MX_LWIP_Init+0x29c>)
 800449e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80044a0:	4b2a      	ldr	r3, [pc, #168]	; (800454c <MX_LWIP_Init+0x2a0>)
 80044a2:	9302      	str	r3, [sp, #8]
 80044a4:	4b2a      	ldr	r3, [pc, #168]	; (8004550 <MX_LWIP_Init+0x2a4>)
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	2300      	movs	r3, #0
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	4b26      	ldr	r3, [pc, #152]	; (8004548 <MX_LWIP_Init+0x29c>)
 80044ae:	4a25      	ldr	r2, [pc, #148]	; (8004544 <MX_LWIP_Init+0x298>)
 80044b0:	4923      	ldr	r1, [pc, #140]	; (8004540 <MX_LWIP_Init+0x294>)
 80044b2:	4828      	ldr	r0, [pc, #160]	; (8004554 <MX_LWIP_Init+0x2a8>)
 80044b4:	f009 f9ec 	bl	800d890 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80044b8:	4826      	ldr	r0, [pc, #152]	; (8004554 <MX_LWIP_Init+0x2a8>)
 80044ba:	f009 fb9b 	bl	800dbf4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80044be:	4b25      	ldr	r3, [pc, #148]	; (8004554 <MX_LWIP_Init+0x2a8>)
 80044c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80044c4:	089b      	lsrs	r3, r3, #2
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80044d0:	4820      	ldr	r0, [pc, #128]	; (8004554 <MX_LWIP_Init+0x2a8>)
 80044d2:	f009 fb9f 	bl	800dc14 <netif_set_up>
 80044d6:	e002      	b.n	80044de <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80044d8:	481e      	ldr	r0, [pc, #120]	; (8004554 <MX_LWIP_Init+0x2a8>)
 80044da:	f009 fc07 	bl	800dcec <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80044de:	491e      	ldr	r1, [pc, #120]	; (8004558 <MX_LWIP_Init+0x2ac>)
 80044e0:	481c      	ldr	r0, [pc, #112]	; (8004554 <MX_LWIP_Init+0x2a8>)
 80044e2:	f009 fc99 	bl	800de18 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  Netif_LinkSemaphore = osSemaphoreNew(1, 1, NULL);
 80044e6:	2200      	movs	r2, #0
 80044e8:	2101      	movs	r1, #1
 80044ea:	2001      	movs	r0, #1
 80044ec:	f000 fed7 	bl	800529e <osSemaphoreNew>
 80044f0:	4603      	mov	r3, r0
 80044f2:	4a1a      	ldr	r2, [pc, #104]	; (800455c <MX_LWIP_Init+0x2b0>)
 80044f4:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80044f6:	4b1a      	ldr	r3, [pc, #104]	; (8004560 <MX_LWIP_Init+0x2b4>)
 80044f8:	4a16      	ldr	r2, [pc, #88]	; (8004554 <MX_LWIP_Init+0x2a8>)
 80044fa:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80044fc:	4b17      	ldr	r3, [pc, #92]	; (800455c <MX_LWIP_Init+0x2b0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a17      	ldr	r2, [pc, #92]	; (8004560 <MX_LWIP_Init+0x2b4>)
 8004502:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004504:	2224      	movs	r2, #36	; 0x24
 8004506:	2100      	movs	r1, #0
 8004508:	4816      	ldr	r0, [pc, #88]	; (8004564 <MX_LWIP_Init+0x2b8>)
 800450a:	f014 f80d 	bl	8018528 <memset>
  attributes.name = "LinkThr";
 800450e:	4b15      	ldr	r3, [pc, #84]	; (8004564 <MX_LWIP_Init+0x2b8>)
 8004510:	4a15      	ldr	r2, [pc, #84]	; (8004568 <MX_LWIP_Init+0x2bc>)
 8004512:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <MX_LWIP_Init+0x2b8>)
 8004516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800451a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800451c:	4b11      	ldr	r3, [pc, #68]	; (8004564 <MX_LWIP_Init+0x2b8>)
 800451e:	2210      	movs	r2, #16
 8004520:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernetif_set_link, &link_arg, &attributes);
 8004522:	4a10      	ldr	r2, [pc, #64]	; (8004564 <MX_LWIP_Init+0x2b8>)
 8004524:	490e      	ldr	r1, [pc, #56]	; (8004560 <MX_LWIP_Init+0x2b4>)
 8004526:	4811      	ldr	r0, [pc, #68]	; (800456c <MX_LWIP_Init+0x2c0>)
 8004528:	f000 fcd1 	bl	8004ece <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800452c:	bf00      	nop
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	200053f4 	.word	0x200053f4
 8004538:	200053f0 	.word	0x200053f0
 800453c:	20005390 	.word	0x20005390
 8004540:	200053ec 	.word	0x200053ec
 8004544:	200053f8 	.word	0x200053f8
 8004548:	200053fc 	.word	0x200053fc
 800454c:	0800c705 	.word	0x0800c705
 8004550:	08004b99 	.word	0x08004b99
 8004554:	200053b8 	.word	0x200053b8
 8004558:	08004c7d 	.word	0x08004c7d
 800455c:	200000a0 	.word	0x200000a0
 8004560:	20005388 	.word	0x20005388
 8004564:	20005394 	.word	0x20005394
 8004568:	080195b0 	.word	0x080195b0
 800456c:	08004c05 	.word	0x08004c05

08004570 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08e      	sub	sp, #56	; 0x38
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800457c:	2200      	movs	r2, #0
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	60da      	str	r2, [r3, #12]
 8004586:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a4a      	ldr	r2, [pc, #296]	; (80046b8 <HAL_ETH_MspInit+0x148>)
 800458e:	4293      	cmp	r3, r2
 8004590:	f040 808d 	bne.w	80046ae <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8004594:	2300      	movs	r3, #0
 8004596:	623b      	str	r3, [r7, #32]
 8004598:	4b48      	ldr	r3, [pc, #288]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 800459a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459c:	4a47      	ldr	r2, [pc, #284]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 800459e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045a2:	6313      	str	r3, [r2, #48]	; 0x30
 80045a4:	4b45      	ldr	r3, [pc, #276]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	623b      	str	r3, [r7, #32]
 80045ae:	6a3b      	ldr	r3, [r7, #32]
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	4a40      	ldr	r2, [pc, #256]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 80045ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045be:	6313      	str	r3, [r2, #48]	; 0x30
 80045c0:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
 80045d0:	4b3a      	ldr	r3, [pc, #232]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	4a39      	ldr	r2, [pc, #228]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 80045d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045da:	6313      	str	r3, [r2, #48]	; 0x30
 80045dc:	4b37      	ldr	r3, [pc, #220]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	4b33      	ldr	r3, [pc, #204]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	4a32      	ldr	r2, [pc, #200]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 80045f2:	f043 0304 	orr.w	r3, r3, #4
 80045f6:	6313      	str	r3, [r2, #48]	; 0x30
 80045f8:	4b30      	ldr	r3, [pc, #192]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	f003 0304 	and.w	r3, r3, #4
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004604:	2300      	movs	r3, #0
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	4b2c      	ldr	r3, [pc, #176]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	4a2b      	ldr	r2, [pc, #172]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 800460e:	f043 0301 	orr.w	r3, r3, #1
 8004612:	6313      	str	r3, [r2, #48]	; 0x30
 8004614:	4b29      	ldr	r3, [pc, #164]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 8004616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 8004626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004628:	4a24      	ldr	r2, [pc, #144]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 800462a:	f043 0302 	orr.w	r3, r3, #2
 800462e:	6313      	str	r3, [r2, #48]	; 0x30
 8004630:	4b22      	ldr	r3, [pc, #136]	; (80046bc <HAL_ETH_MspInit+0x14c>)
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	f003 0302 	and.w	r3, r3, #2
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800463c:	2332      	movs	r3, #50	; 0x32
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004640:	2302      	movs	r3, #2
 8004642:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004644:	2301      	movs	r3, #1
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004648:	2303      	movs	r3, #3
 800464a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800464c:	230b      	movs	r3, #11
 800464e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004654:	4619      	mov	r1, r3
 8004656:	481a      	ldr	r0, [pc, #104]	; (80046c0 <HAL_ETH_MspInit+0x150>)
 8004658:	f7fe fd44 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800465c:	2386      	movs	r3, #134	; 0x86
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004660:	2302      	movs	r3, #2
 8004662:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004664:	2301      	movs	r3, #1
 8004666:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004668:	2303      	movs	r3, #3
 800466a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800466c:	230b      	movs	r3, #11
 800466e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004674:	4619      	mov	r1, r3
 8004676:	4813      	ldr	r0, [pc, #76]	; (80046c4 <HAL_ETH_MspInit+0x154>)
 8004678:	f7fe fd34 	bl	80030e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800467c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004682:	2302      	movs	r3, #2
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004686:	2301      	movs	r3, #1
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800468a:	2303      	movs	r3, #3
 800468c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800468e:	230b      	movs	r3, #11
 8004690:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004696:	4619      	mov	r1, r3
 8004698:	480b      	ldr	r0, [pc, #44]	; (80046c8 <HAL_ETH_MspInit+0x158>)
 800469a:	f7fe fd23 	bl	80030e4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800469e:	2200      	movs	r2, #0
 80046a0:	2105      	movs	r1, #5
 80046a2:	203d      	movs	r0, #61	; 0x3d
 80046a4:	f7fd f864 	bl	8001770 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80046a8:	203d      	movs	r0, #61	; 0x3d
 80046aa:	f7fd f87d 	bl	80017a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80046ae:	bf00      	nop
 80046b0:	3738      	adds	r7, #56	; 0x38
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40028000 	.word	0x40028000
 80046bc:	40023800 	.word	0x40023800
 80046c0:	40020800 	.word	0x40020800
 80046c4:	40020000 	.word	0x40020000
 80046c8:	40020400 	.word	0x40020400

080046cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80046d4:	4b04      	ldr	r3, [pc, #16]	; (80046e8 <HAL_ETH_RxCpltCallback+0x1c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 febb 	bl	8005454 <osSemaphoreRelease>
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	200000a4 	.word	0x200000a4

080046ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b090      	sub	sp, #64	; 0x40
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	63bb      	str	r3, [r7, #56]	; 0x38
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80046f8:	4b5d      	ldr	r3, [pc, #372]	; (8004870 <low_level_init+0x184>)
 80046fa:	4a5e      	ldr	r2, [pc, #376]	; (8004874 <low_level_init+0x188>)
 80046fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80046fe:	4b5c      	ldr	r3, [pc, #368]	; (8004870 <low_level_init+0x184>)
 8004700:	2201      	movs	r2, #1
 8004702:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8004704:	4b5a      	ldr	r3, [pc, #360]	; (8004870 <low_level_init+0x184>)
 8004706:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800470a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800470c:	4b58      	ldr	r3, [pc, #352]	; (8004870 <low_level_init+0x184>)
 800470e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004712:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004714:	4b56      	ldr	r3, [pc, #344]	; (8004870 <low_level_init+0x184>)
 8004716:	2201      	movs	r2, #1
 8004718:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800471a:	2300      	movs	r3, #0
 800471c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800471e:	2380      	movs	r3, #128	; 0x80
 8004720:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8004722:	23e1      	movs	r3, #225	; 0xe1
 8004724:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8004726:	2300      	movs	r3, #0
 8004728:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800472a:	2300      	movs	r3, #0
 800472c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800472e:	2300      	movs	r3, #0
 8004730:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8004732:	4a4f      	ldr	r2, [pc, #316]	; (8004870 <low_level_init+0x184>)
 8004734:	f107 030c 	add.w	r3, r7, #12
 8004738:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800473a:	4b4d      	ldr	r3, [pc, #308]	; (8004870 <low_level_init+0x184>)
 800473c:	2201      	movs	r2, #1
 800473e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004740:	4b4b      	ldr	r3, [pc, #300]	; (8004870 <low_level_init+0x184>)
 8004742:	2200      	movs	r2, #0
 8004744:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004746:	4b4a      	ldr	r3, [pc, #296]	; (8004870 <low_level_init+0x184>)
 8004748:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800474c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800474e:	4848      	ldr	r0, [pc, #288]	; (8004870 <low_level_init+0x184>)
 8004750:	f7fd fb22 	bl	8001d98 <HAL_ETH_Init>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800475a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800475e:	2b00      	cmp	r3, #0
 8004760:	d108      	bne.n	8004774 <low_level_init+0x88>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004768:	f043 0304 	orr.w	r3, r3, #4
 800476c:	b2da      	uxtb	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004774:	2304      	movs	r3, #4
 8004776:	4a40      	ldr	r2, [pc, #256]	; (8004878 <low_level_init+0x18c>)
 8004778:	4940      	ldr	r1, [pc, #256]	; (800487c <low_level_init+0x190>)
 800477a:	483d      	ldr	r0, [pc, #244]	; (8004870 <low_level_init+0x184>)
 800477c:	f7fd fca8 	bl	80020d0 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004780:	2304      	movs	r3, #4
 8004782:	4a3f      	ldr	r2, [pc, #252]	; (8004880 <low_level_init+0x194>)
 8004784:	493f      	ldr	r1, [pc, #252]	; (8004884 <low_level_init+0x198>)
 8004786:	483a      	ldr	r0, [pc, #232]	; (8004870 <low_level_init+0x184>)
 8004788:	f7fd fd0b 	bl	80021a2 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2206      	movs	r2, #6
 8004790:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004794:	4b36      	ldr	r3, [pc, #216]	; (8004870 <low_level_init+0x184>)
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	781a      	ldrb	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80047a0:	4b33      	ldr	r3, [pc, #204]	; (8004870 <low_level_init+0x184>)
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	785a      	ldrb	r2, [r3, #1]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80047ac:	4b30      	ldr	r3, [pc, #192]	; (8004870 <low_level_init+0x184>)
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	789a      	ldrb	r2, [r3, #2]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80047b8:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <low_level_init+0x184>)
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	78da      	ldrb	r2, [r3, #3]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80047c4:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <low_level_init+0x184>)
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	791a      	ldrb	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80047d0:	4b27      	ldr	r3, [pc, #156]	; (8004870 <low_level_init+0x184>)
 80047d2:	695b      	ldr	r3, [r3, #20]
 80047d4:	795a      	ldrb	r2, [r3, #5]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80047e2:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047ea:	f043 030a 	orr.w	r3, r3, #10
 80047ee:	b2da      	uxtb	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 80047f6:	2200      	movs	r2, #0
 80047f8:	2101      	movs	r1, #1
 80047fa:	2001      	movs	r0, #1
 80047fc:	f000 fd4f 	bl	800529e <osSemaphoreNew>
 8004800:	4603      	mov	r3, r0
 8004802:	4a21      	ldr	r2, [pc, #132]	; (8004888 <low_level_init+0x19c>)
 8004804:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004806:	f107 0314 	add.w	r3, r7, #20
 800480a:	2224      	movs	r2, #36	; 0x24
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f013 fe8a 	bl	8018528 <memset>
  attributes.name = "EthIf";
 8004814:	4b1d      	ldr	r3, [pc, #116]	; (800488c <low_level_init+0x1a0>)
 8004816:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004818:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800481c:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 800481e:	2330      	movs	r3, #48	; 0x30
 8004820:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8004822:	f107 0314 	add.w	r3, r7, #20
 8004826:	461a      	mov	r2, r3
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4819      	ldr	r0, [pc, #100]	; (8004890 <low_level_init+0x1a4>)
 800482c:	f000 fb4f 	bl	8004ece <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8004830:	480f      	ldr	r0, [pc, #60]	; (8004870 <low_level_init+0x184>)
 8004832:	f7fd ffde 	bl	80027f2 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800483a:	461a      	mov	r2, r3
 800483c:	211d      	movs	r1, #29
 800483e:	480c      	ldr	r0, [pc, #48]	; (8004870 <low_level_init+0x184>)
 8004840:	f7fd ff09 	bl	8002656 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8004844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004846:	f043 030b 	orr.w	r3, r3, #11
 800484a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800484c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484e:	461a      	mov	r2, r3
 8004850:	211d      	movs	r1, #29
 8004852:	4807      	ldr	r0, [pc, #28]	; (8004870 <low_level_init+0x184>)
 8004854:	f7fd ff67 	bl	8002726 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8004858:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800485c:	461a      	mov	r2, r3
 800485e:	211d      	movs	r1, #29
 8004860:	4803      	ldr	r0, [pc, #12]	; (8004870 <low_level_init+0x184>)
 8004862:	f7fd fef8 	bl	8002656 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8004866:	bf00      	nop
 8004868:	3740      	adds	r7, #64	; 0x40
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	20006cd0 	.word	0x20006cd0
 8004874:	40028000 	.word	0x40028000
 8004878:	20006d18 	.word	0x20006d18
 800487c:	20005400 	.word	0x20005400
 8004880:	20005480 	.word	0x20005480
 8004884:	20006c50 	.word	0x20006c50
 8004888:	200000a4 	.word	0x200000a4
 800488c:	080195b8 	.word	0x080195b8
 8004890:	08004b39 	.word	0x08004b39

08004894 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	; 0x28
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800489e:	4b4b      	ldr	r3, [pc, #300]	; (80049cc <low_level_output+0x138>)
 80048a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80048aa:	2300      	movs	r3, #0
 80048ac:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80048b2:	2300      	movs	r3, #0
 80048b4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80048b6:	4b45      	ldr	r3, [pc, #276]	; (80049cc <low_level_output+0x138>)
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80048bc:	2300      	movs	r3, #0
 80048be:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	623b      	str	r3, [r7, #32]
 80048c4:	e05a      	b.n	800497c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	da03      	bge.n	80048d6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80048ce:	23f8      	movs	r3, #248	; 0xf8
 80048d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80048d4:	e05c      	b.n	8004990 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80048d6:	6a3b      	ldr	r3, [r7, #32]
 80048d8:	895b      	ldrh	r3, [r3, #10]
 80048da:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80048e0:	e02f      	b.n	8004942 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	18d0      	adds	r0, r2, r3
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	18d1      	adds	r1, r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80048f6:	3304      	adds	r3, #4
 80048f8:	461a      	mov	r2, r3
 80048fa:	f013 fe07 	bl	801850c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	da03      	bge.n	8004914 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800490c:	23f8      	movs	r3, #248	; 0xf8
 800490e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004912:	e03d      	b.n	8004990 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4413      	add	r3, r2
 8004920:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004924:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004926:	68ba      	ldr	r2, [r7, #8]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004930:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800493c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4413      	add	r3, r2
 8004948:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800494c:	4293      	cmp	r3, r2
 800494e:	d8c8      	bhi.n	80048e2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	18d0      	adds	r0, r2, r3
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	685a      	ldr	r2, [r3, #4]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4413      	add	r3, r2
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4619      	mov	r1, r3
 8004962:	f013 fdd3 	bl	801850c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8004976:	6a3b      	ldr	r3, [r7, #32]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	623b      	str	r3, [r7, #32]
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1a1      	bne.n	80048c6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	4811      	ldr	r0, [pc, #68]	; (80049cc <low_level_output+0x138>)
 8004986:	f7fd fc79 	bl	800227c <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004990:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <low_level_output+0x138>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004998:	3314      	adds	r3, #20
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0320 	and.w	r3, r3, #32
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <low_level_output+0x138>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ac:	3314      	adds	r3, #20
 80049ae:	2220      	movs	r2, #32
 80049b0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <low_level_output+0x138>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ba:	3304      	adds	r3, #4
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80049c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3728      	adds	r7, #40	; 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20006cd0 	.word	0x20006cd0

080049d0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08c      	sub	sp, #48	; 0x30
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80049f4:	484f      	ldr	r0, [pc, #316]	; (8004b34 <low_level_input+0x164>)
 80049f6:	f7fd fd2b 	bl	8002450 <HAL_ETH_GetReceivedFrame_IT>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <low_level_input+0x34>

    return NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e092      	b.n	8004b2a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004a04:	4b4b      	ldr	r3, [pc, #300]	; (8004b34 <low_level_input+0x164>)
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8004a0a:	4b4a      	ldr	r3, [pc, #296]	; (8004b34 <low_level_input+0x164>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004a10:	89fb      	ldrh	r3, [r7, #14]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004a16:	89fb      	ldrh	r3, [r7, #14]
 8004a18:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	2000      	movs	r0, #0
 8004a20:	f009 fac4 	bl	800dfac <pbuf_alloc>
 8004a24:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d04b      	beq.n	8004ac4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004a2c:	4b41      	ldr	r3, [pc, #260]	; (8004b34 <low_level_input+0x164>)
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a3a:	e040      	b.n	8004abe <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	895b      	ldrh	r3, [r3, #10]
 8004a40:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004a46:	e021      	b.n	8004a8c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	18d0      	adds	r0, r2, r3
 8004a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	18d1      	adds	r1, r2, r3
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f013 fd54 	bl	801850c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	4413      	add	r3, r2
 8004a76:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004a7a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004a86:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d8d6      	bhi.n	8004a48 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	18d0      	adds	r0, r2, r3
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4619      	mov	r1, r3
 8004aac:	f013 fd2e 	bl	801850c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1bb      	bne.n	8004a3c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <low_level_input+0x164>)
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	e00b      	b.n	8004ae8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004ad8:	6a3b      	ldr	r3, [r7, #32]
 8004ada:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <low_level_input+0x164>)
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d3ee      	bcc.n	8004ad0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004af2:	4b10      	ldr	r3, [pc, #64]	; (8004b34 <low_level_input+0x164>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004af8:	4b0e      	ldr	r3, [pc, #56]	; (8004b34 <low_level_input+0x164>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b00:	3314      	adds	r3, #20
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004b0c:	4b09      	ldr	r3, [pc, #36]	; (8004b34 <low_level_input+0x164>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b14:	3314      	adds	r3, #20
 8004b16:	2280      	movs	r2, #128	; 0x80
 8004b18:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <low_level_input+0x164>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b22:	3308      	adds	r3, #8
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3730      	adds	r7, #48	; 0x30
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20006cd0 	.word	0x20006cd0

08004b38 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b44:	4b12      	ldr	r3, [pc, #72]	; (8004b90 <ethernetif_input+0x58>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f04f 31ff 	mov.w	r1, #4294967295
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fc2f 	bl	80053b0 <osSemaphoreAcquire>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1f5      	bne.n	8004b44 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8004b58:	480e      	ldr	r0, [pc, #56]	; (8004b94 <ethernetif_input+0x5c>)
 8004b5a:	f013 fc43 	bl	80183e4 <sys_mutex_lock>
        p = low_level_input( netif );
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff ff36 	bl	80049d0 <low_level_input>
 8004b64:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00a      	beq.n	8004b82 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	68f9      	ldr	r1, [r7, #12]
 8004b72:	68b8      	ldr	r0, [r7, #8]
 8004b74:	4798      	blx	r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8004b7c:	68b8      	ldr	r0, [r7, #8]
 8004b7e:	f009 fd2b 	bl	800e5d8 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8004b82:	4804      	ldr	r0, [pc, #16]	; (8004b94 <ethernetif_input+0x5c>)
 8004b84:	f013 fc3d 	bl	8018402 <sys_mutex_unlock>
      } while(p!=NULL);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e4      	bne.n	8004b58 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004b8e:	e7d9      	b.n	8004b44 <ethernetif_input+0xc>
 8004b90:	200000a4 	.word	0x200000a4
 8004b94:	20008528 	.word	0x20008528

08004b98 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <ethernetif_init+0x1c>
 8004ba6:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <ethernetif_init+0x48>)
 8004ba8:	f44f 720c 	mov.w	r2, #560	; 0x230
 8004bac:	490d      	ldr	r1, [pc, #52]	; (8004be4 <ethernetif_init+0x4c>)
 8004bae:	480e      	ldr	r0, [pc, #56]	; (8004be8 <ethernetif_init+0x50>)
 8004bb0:	f013 fd6c 	bl	801868c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2273      	movs	r2, #115	; 0x73
 8004bb8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2274      	movs	r2, #116	; 0x74
 8004bc0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a09      	ldr	r2, [pc, #36]	; (8004bec <ethernetif_init+0x54>)
 8004bc8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a08      	ldr	r2, [pc, #32]	; (8004bf0 <ethernetif_init+0x58>)
 8004bce:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fd8b 	bl	80046ec <low_level_init>

  return ERR_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	080195c0 	.word	0x080195c0
 8004be4:	080195dc 	.word	0x080195dc
 8004be8:	080195ec 	.word	0x080195ec
 8004bec:	08016445 	.word	0x08016445
 8004bf0:	08004895 	.word	0x08004895

08004bf4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004bf8:	f7fc fa70 	bl	80010dc <HAL_GetTick>
 8004bfc:	4603      	mov	r3, r0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void* argument)

{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004c14:	f107 0308 	add.w	r3, r7, #8
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	4816      	ldr	r0, [pc, #88]	; (8004c78 <ethernetif_set_link+0x74>)
 8004c1e:	f7fd fd1a 	bl	8002656 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f003 0304 	and.w	r3, r3, #4
 8004c28:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d108      	bne.n	8004c4c <ethernetif_set_link+0x48>
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f009 f883 	bl	800dd50 <netif_set_link_up>
 8004c4a:	e011      	b.n	8004c70 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c54:	089b      	lsrs	r3, r3, #2
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <ethernetif_set_link+0x6c>
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d104      	bne.n	8004c70 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f009 f8a4 	bl	800ddb8 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8004c70:	20c8      	movs	r0, #200	; 0xc8
 8004c72:	f000 f9eb 	bl	800504c <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004c76:	e7cd      	b.n	8004c14 <ethernetif_set_link+0x10>
 8004c78:	20006cd0 	.word	0x20006cd0

08004c7c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d05d      	beq.n	8004d5a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004c9e:	4b34      	ldr	r3, [pc, #208]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d03f      	beq.n	8004d26 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004ca6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004caa:	2100      	movs	r1, #0
 8004cac:	4830      	ldr	r0, [pc, #192]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004cae:	f7fd fd3a 	bl	8002726 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004cb2:	f7fc fa13 	bl	80010dc <HAL_GetTick>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004cba:	f107 0308 	add.w	r3, r7, #8
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	482b      	ldr	r0, [pc, #172]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004cc4:	f7fd fcc7 	bl	8002656 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004cc8:	f7fc fa08 	bl	80010dc <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cd6:	d828      	bhi.n	8004d2a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0eb      	beq.n	8004cba <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004ce2:	f107 0308 	add.w	r3, r7, #8
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	2110      	movs	r1, #16
 8004cea:	4821      	ldr	r0, [pc, #132]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004cec:	f7fd fcb3 	bl	8002656 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d00:	60da      	str	r2, [r3, #12]
 8004d02:	e002      	b.n	8004d0a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004d04:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d003      	beq.n	8004d1c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004d14:	4b16      	ldr	r3, [pc, #88]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	609a      	str	r2, [r3, #8]
 8004d1a:	e016      	b.n	8004d4a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8004d1c:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d22:	609a      	str	r2, [r3, #8]
 8004d24:	e011      	b.n	8004d4a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <ethernetif_update_config+0xb0>
          goto error;
 8004d2a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004d2c:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	08db      	lsrs	r3, r3, #3
 8004d32:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8004d34:	4b0e      	ldr	r3, [pc, #56]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	085b      	lsrs	r3, r3, #1
 8004d3a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	2100      	movs	r1, #0
 8004d44:	480a      	ldr	r0, [pc, #40]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004d46:	f7fd fcee 	bl	8002726 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4808      	ldr	r0, [pc, #32]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004d4e:	f7fd fdaf 	bl	80028b0 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8004d52:	4807      	ldr	r0, [pc, #28]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004d54:	f7fd fd4d 	bl	80027f2 <HAL_ETH_Start>
 8004d58:	e002      	b.n	8004d60 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8004d5a:	4805      	ldr	r0, [pc, #20]	; (8004d70 <ethernetif_update_config+0xf4>)
 8004d5c:	f7fd fd78 	bl	8002850 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f807 	bl	8004d74 <ethernetif_notify_conn_changed>
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20006cd0 	.word	0x20006cd0

08004d74 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <__NVIC_SetPriority>:
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	4603      	mov	r3, r0
 8004d90:	6039      	str	r1, [r7, #0]
 8004d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	db0a      	blt.n	8004db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	490c      	ldr	r1, [pc, #48]	; (8004dd4 <__NVIC_SetPriority+0x4c>)
 8004da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da6:	0112      	lsls	r2, r2, #4
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	440b      	add	r3, r1
 8004dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004db0:	e00a      	b.n	8004dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	b2da      	uxtb	r2, r3
 8004db6:	4908      	ldr	r1, [pc, #32]	; (8004dd8 <__NVIC_SetPriority+0x50>)
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	3b04      	subs	r3, #4
 8004dc0:	0112      	lsls	r2, r2, #4
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	761a      	strb	r2, [r3, #24]
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	e000e100 	.word	0xe000e100
 8004dd8:	e000ed00 	.word	0xe000ed00

08004ddc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004de0:	4b05      	ldr	r3, [pc, #20]	; (8004df8 <SysTick_Handler+0x1c>)
 8004de2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004de4:	f002 fe14 	bl	8007a10 <xTaskGetSchedulerState>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d001      	beq.n	8004df2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004dee:	f003 fcfb 	bl	80087e8 <xPortSysTickHandler>
  }
}
 8004df2:	bf00      	nop
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	e000e010 	.word	0xe000e010

08004dfc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e00:	2100      	movs	r1, #0
 8004e02:	f06f 0004 	mvn.w	r0, #4
 8004e06:	f7ff ffbf 	bl	8004d88 <__NVIC_SetPriority>
#endif
}
 8004e0a:	bf00      	nop
 8004e0c:	bd80      	pop	{r7, pc}
	...

08004e10 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e16:	f3ef 8305 	mrs	r3, IPSR
 8004e1a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e22:	f06f 0305 	mvn.w	r3, #5
 8004e26:	607b      	str	r3, [r7, #4]
 8004e28:	e00c      	b.n	8004e44 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <osKernelInitialize+0x44>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d105      	bne.n	8004e3e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e32:	4b08      	ldr	r3, [pc, #32]	; (8004e54 <osKernelInitialize+0x44>)
 8004e34:	2201      	movs	r2, #1
 8004e36:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	e002      	b.n	8004e44 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e44:	687b      	ldr	r3, [r7, #4]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	200000a8 	.word	0x200000a8

08004e58 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e5e:	f3ef 8305 	mrs	r3, IPSR
 8004e62:	603b      	str	r3, [r7, #0]
  return(result);
 8004e64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d003      	beq.n	8004e72 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004e6a:	f06f 0305 	mvn.w	r3, #5
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	e010      	b.n	8004e94 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <osKernelStart+0x48>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d109      	bne.n	8004e8e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004e7a:	f7ff ffbf 	bl	8004dfc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <osKernelStart+0x48>)
 8004e80:	2202      	movs	r2, #2
 8004e82:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004e84:	f002 f95a 	bl	800713c <vTaskStartScheduler>
      stat = osOK;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	607b      	str	r3, [r7, #4]
 8004e8c:	e002      	b.n	8004e94 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004e94:	687b      	ldr	r3, [r7, #4]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	200000a8 	.word	0x200000a8

08004ea4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eaa:	f3ef 8305 	mrs	r3, IPSR
 8004eae:	603b      	str	r3, [r7, #0]
  return(result);
 8004eb0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8004eb6:	f002 fa63 	bl	8007380 <xTaskGetTickCountFromISR>
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	e002      	b.n	8004ec4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8004ebe:	f002 fa4f 	bl	8007360 <xTaskGetTickCount>
 8004ec2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8004ec4:	687b      	ldr	r3, [r7, #4]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b08e      	sub	sp, #56	; 0x38
 8004ed2:	af04      	add	r7, sp, #16
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ede:	f3ef 8305 	mrs	r3, IPSR
 8004ee2:	617b      	str	r3, [r7, #20]
  return(result);
 8004ee4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d17e      	bne.n	8004fe8 <osThreadNew+0x11a>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d07b      	beq.n	8004fe8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004ef0:	2380      	movs	r3, #128	; 0x80
 8004ef2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004ef4:	2318      	movs	r3, #24
 8004ef6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004efc:	f04f 33ff 	mov.w	r3, #4294967295
 8004f00:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d045      	beq.n	8004f94 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <osThreadNew+0x48>
        name = attr->name;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d002      	beq.n	8004f24 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <osThreadNew+0x6e>
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	2b38      	cmp	r3, #56	; 0x38
 8004f2e:	d805      	bhi.n	8004f3c <osThreadNew+0x6e>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <osThreadNew+0x72>
        return (NULL);
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e054      	b.n	8004fea <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d003      	beq.n	8004f50 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	695b      	ldr	r3, [r3, #20]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00e      	beq.n	8004f76 <osThreadNew+0xa8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	2b5b      	cmp	r3, #91	; 0x5b
 8004f5e:	d90a      	bls.n	8004f76 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d006      	beq.n	8004f76 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <osThreadNew+0xa8>
        mem = 1;
 8004f70:	2301      	movs	r3, #1
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	e010      	b.n	8004f98 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10c      	bne.n	8004f98 <osThreadNew+0xca>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d108      	bne.n	8004f98 <osThreadNew+0xca>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d104      	bne.n	8004f98 <osThreadNew+0xca>
          mem = 0;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61bb      	str	r3, [r7, #24]
 8004f92:	e001      	b.n	8004f98 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d110      	bne.n	8004fc0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fa6:	9202      	str	r2, [sp, #8]
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	9300      	str	r3, [sp, #0]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	6a3a      	ldr	r2, [r7, #32]
 8004fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f001 fe13 	bl	8006be0 <xTaskCreateStatic>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	e013      	b.n	8004fe8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d110      	bne.n	8004fe8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	f107 0310 	add.w	r3, r7, #16
 8004fce:	9301      	str	r3, [sp, #4]
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	9300      	str	r3, [sp, #0]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f001 fe5e 	bl	8006c9a <xTaskCreate>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d001      	beq.n	8004fe8 <osThreadNew+0x11a>
            hTask = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004fe8:	693b      	ldr	r3, [r7, #16]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3728      	adds	r7, #40	; 0x28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ffe:	f3ef 8305 	mrs	r3, IPSR
 8005002:	60bb      	str	r3, [r7, #8]
  return(result);
 8005004:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8005006:	2b00      	cmp	r3, #0
 8005008:	d003      	beq.n	8005012 <osThreadTerminate+0x20>
    stat = osErrorISR;
 800500a:	f06f 0305 	mvn.w	r3, #5
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	e017      	b.n	8005042 <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8005018:	f06f 0303 	mvn.w	r3, #3
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	e010      	b.n	8005042 <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8005020:	6938      	ldr	r0, [r7, #16]
 8005022:	f002 f825 	bl	8007070 <eTaskGetState>
 8005026:	4603      	mov	r3, r0
 8005028:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	2b04      	cmp	r3, #4
 800502e:	d005      	beq.n	800503c <osThreadTerminate+0x4a>
      stat = osOK;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8005034:	6938      	ldr	r0, [r7, #16]
 8005036:	f001 ff75 	bl	8006f24 <vTaskDelete>
 800503a:	e002      	b.n	8005042 <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 800503c:	f06f 0302 	mvn.w	r3, #2
 8005040:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8005042:	697b      	ldr	r3, [r7, #20]
}
 8005044:	4618      	mov	r0, r3
 8005046:	3718      	adds	r7, #24
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}

0800504c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005054:	f3ef 8305 	mrs	r3, IPSR
 8005058:	60bb      	str	r3, [r7, #8]
  return(result);
 800505a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <osDelay+0x1c>
    stat = osErrorISR;
 8005060:	f06f 0305 	mvn.w	r3, #5
 8005064:	60fb      	str	r3, [r7, #12]
 8005066:	e007      	b.n	8005078 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005068:	2300      	movs	r3, #0
 800506a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f001 ffc8 	bl	8007008 <vTaskDelay>
    }
  }

  return (stat);
 8005078:	68fb      	ldr	r3, [r7, #12]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005082:	b580      	push	{r7, lr}
 8005084:	b088      	sub	sp, #32
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800508a:	2300      	movs	r3, #0
 800508c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800508e:	f3ef 8305 	mrs	r3, IPSR
 8005092:	60bb      	str	r3, [r7, #8]
  return(result);
 8005094:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005096:	2b00      	cmp	r3, #0
 8005098:	d174      	bne.n	8005184 <osMutexNew+0x102>
    if (attr != NULL) {
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d003      	beq.n	80050a8 <osMutexNew+0x26>
      type = attr->attr_bits;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	e001      	b.n	80050ac <osMutexNew+0x2a>
    } else {
      type = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <osMutexNew+0x3a>
      rmtx = 1U;
 80050b6:	2301      	movs	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e001      	b.n	80050c0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d15c      	bne.n	8005184 <osMutexNew+0x102>
      mem = -1;
 80050ca:	f04f 33ff 	mov.w	r3, #4294967295
 80050ce:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d015      	beq.n	8005102 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d006      	beq.n	80050ec <osMutexNew+0x6a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	2b4f      	cmp	r3, #79	; 0x4f
 80050e4:	d902      	bls.n	80050ec <osMutexNew+0x6a>
          mem = 1;
 80050e6:	2301      	movs	r3, #1
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	e00c      	b.n	8005106 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d108      	bne.n	8005106 <osMutexNew+0x84>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d104      	bne.n	8005106 <osMutexNew+0x84>
            mem = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	e001      	b.n	8005106 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d112      	bne.n	8005132 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d007      	beq.n	8005122 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	4619      	mov	r1, r3
 8005118:	2004      	movs	r0, #4
 800511a:	f000 fdd0 	bl	8005cbe <xQueueCreateMutexStatic>
 800511e:	61f8      	str	r0, [r7, #28]
 8005120:	e016      	b.n	8005150 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	4619      	mov	r1, r3
 8005128:	2001      	movs	r0, #1
 800512a:	f000 fdc8 	bl	8005cbe <xQueueCreateMutexStatic>
 800512e:	61f8      	str	r0, [r7, #28]
 8005130:	e00e      	b.n	8005150 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10b      	bne.n	8005150 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800513e:	2004      	movs	r0, #4
 8005140:	f000 fda5 	bl	8005c8e <xQueueCreateMutex>
 8005144:	61f8      	str	r0, [r7, #28]
 8005146:	e003      	b.n	8005150 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005148:	2001      	movs	r0, #1
 800514a:	f000 fda0 	bl	8005c8e <xQueueCreateMutex>
 800514e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00c      	beq.n	8005170 <osMutexNew+0xee>
        if (attr != NULL) {
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <osMutexNew+0xe2>
          name = attr->name;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e001      	b.n	8005168 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005168:	68f9      	ldr	r1, [r7, #12]
 800516a:	69f8      	ldr	r0, [r7, #28]
 800516c:	f001 fcb0 	bl	8006ad0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d006      	beq.n	8005184 <osMutexNew+0x102>
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005184:	69fb      	ldr	r3, [r7, #28]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3720      	adds	r7, #32
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800518e:	b580      	push	{r7, lr}
 8005190:	b086      	sub	sp, #24
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
 8005196:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f023 0301 	bic.w	r3, r3, #1
 800519e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ac:	f3ef 8305 	mrs	r3, IPSR
 80051b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80051b2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80051b8:	f06f 0305 	mvn.w	r3, #5
 80051bc:	617b      	str	r3, [r7, #20]
 80051be:	e02c      	b.n	800521a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80051c6:	f06f 0303 	mvn.w	r3, #3
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	e025      	b.n	800521a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d011      	beq.n	80051f8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6938      	ldr	r0, [r7, #16]
 80051d8:	f000 fdc0 	bl	8005d5c <xQueueTakeMutexRecursive>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d01b      	beq.n	800521a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d003      	beq.n	80051f0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80051e8:	f06f 0301 	mvn.w	r3, #1
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	e014      	b.n	800521a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80051f0:	f06f 0302 	mvn.w	r3, #2
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	e010      	b.n	800521a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80051f8:	6839      	ldr	r1, [r7, #0]
 80051fa:	6938      	ldr	r0, [r7, #16]
 80051fc:	f001 f954 	bl	80064a8 <xQueueSemaphoreTake>
 8005200:	4603      	mov	r3, r0
 8005202:	2b01      	cmp	r3, #1
 8005204:	d009      	beq.n	800521a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800520c:	f06f 0301 	mvn.w	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
 8005212:	e002      	b.n	800521a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005214:	f06f 0302 	mvn.w	r3, #2
 8005218:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800521a:	697b      	ldr	r3, [r7, #20]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005224:	b580      	push	{r7, lr}
 8005226:	b086      	sub	sp, #24
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f023 0301 	bic.w	r3, r3, #1
 8005232:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005240:	f3ef 8305 	mrs	r3, IPSR
 8005244:	60bb      	str	r3, [r7, #8]
  return(result);
 8005246:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <osMutexRelease+0x30>
    stat = osErrorISR;
 800524c:	f06f 0305 	mvn.w	r3, #5
 8005250:	617b      	str	r3, [r7, #20]
 8005252:	e01f      	b.n	8005294 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800525a:	f06f 0303 	mvn.w	r3, #3
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	e018      	b.n	8005294 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d009      	beq.n	800527c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005268:	6938      	ldr	r0, [r7, #16]
 800526a:	f000 fd43 	bl	8005cf4 <xQueueGiveMutexRecursive>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d00f      	beq.n	8005294 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005274:	f06f 0302 	mvn.w	r3, #2
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	e00b      	b.n	8005294 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800527c:	2300      	movs	r3, #0
 800527e:	2200      	movs	r2, #0
 8005280:	2100      	movs	r1, #0
 8005282:	6938      	ldr	r0, [r7, #16]
 8005284:	f000 fe0a 	bl	8005e9c <xQueueGenericSend>
 8005288:	4603      	mov	r3, r0
 800528a:	2b01      	cmp	r3, #1
 800528c:	d002      	beq.n	8005294 <osMutexRelease+0x70>
        stat = osErrorResource;
 800528e:	f06f 0302 	mvn.w	r3, #2
 8005292:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005294:	697b      	ldr	r3, [r7, #20]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3718      	adds	r7, #24
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800529e:	b580      	push	{r7, lr}
 80052a0:	b08a      	sub	sp, #40	; 0x28
 80052a2:	af02      	add	r7, sp, #8
 80052a4:	60f8      	str	r0, [r7, #12]
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ae:	f3ef 8305 	mrs	r3, IPSR
 80052b2:	613b      	str	r3, [r7, #16]
  return(result);
 80052b4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d175      	bne.n	80053a6 <osSemaphoreNew+0x108>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d072      	beq.n	80053a6 <osSemaphoreNew+0x108>
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d86e      	bhi.n	80053a6 <osSemaphoreNew+0x108>
    mem = -1;
 80052c8:	f04f 33ff 	mov.w	r3, #4294967295
 80052cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d015      	beq.n	8005300 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d006      	beq.n	80052ea <osSemaphoreNew+0x4c>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	2b4f      	cmp	r3, #79	; 0x4f
 80052e2:	d902      	bls.n	80052ea <osSemaphoreNew+0x4c>
        mem = 1;
 80052e4:	2301      	movs	r3, #1
 80052e6:	61bb      	str	r3, [r7, #24]
 80052e8:	e00c      	b.n	8005304 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d108      	bne.n	8005304 <osSemaphoreNew+0x66>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d104      	bne.n	8005304 <osSemaphoreNew+0x66>
          mem = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	e001      	b.n	8005304 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530a:	d04c      	beq.n	80053a6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d128      	bne.n	8005364 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	2b01      	cmp	r3, #1
 8005316:	d10a      	bne.n	800532e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2203      	movs	r2, #3
 800531e:	9200      	str	r2, [sp, #0]
 8005320:	2200      	movs	r2, #0
 8005322:	2100      	movs	r1, #0
 8005324:	2001      	movs	r0, #1
 8005326:	f000 fbc3 	bl	8005ab0 <xQueueGenericCreateStatic>
 800532a:	61f8      	str	r0, [r7, #28]
 800532c:	e005      	b.n	800533a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800532e:	2203      	movs	r2, #3
 8005330:	2100      	movs	r1, #0
 8005332:	2001      	movs	r0, #1
 8005334:	f000 fc34 	bl	8005ba0 <xQueueGenericCreate>
 8005338:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d022      	beq.n	8005386 <osSemaphoreNew+0xe8>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d01f      	beq.n	8005386 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005346:	2300      	movs	r3, #0
 8005348:	2200      	movs	r2, #0
 800534a:	2100      	movs	r1, #0
 800534c:	69f8      	ldr	r0, [r7, #28]
 800534e:	f000 fda5 	bl	8005e9c <xQueueGenericSend>
 8005352:	4603      	mov	r3, r0
 8005354:	2b01      	cmp	r3, #1
 8005356:	d016      	beq.n	8005386 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005358:	69f8      	ldr	r0, [r7, #28]
 800535a:	f001 fa6d 	bl	8006838 <vQueueDelete>
            hSemaphore = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	e010      	b.n	8005386 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d108      	bne.n	800537c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	461a      	mov	r2, r3
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fd28 	bl	8005dc8 <xQueueCreateCountingSemaphoreStatic>
 8005378:	61f8      	str	r0, [r7, #28]
 800537a:	e004      	b.n	8005386 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fd59 	bl	8005e36 <xQueueCreateCountingSemaphore>
 8005384:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00c      	beq.n	80053a6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d003      	beq.n	800539a <osSemaphoreNew+0xfc>
          name = attr->name;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	e001      	b.n	800539e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800539e:	6979      	ldr	r1, [r7, #20]
 80053a0:	69f8      	ldr	r0, [r7, #28]
 80053a2:	f001 fb95 	bl	8006ad0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80053a6:	69fb      	ldr	r3, [r7, #28]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3720      	adds	r7, #32
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d103      	bne.n	80053d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80053c8:	f06f 0303 	mvn.w	r3, #3
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	e039      	b.n	8005444 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053d0:	f3ef 8305 	mrs	r3, IPSR
 80053d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80053d6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d022      	beq.n	8005422 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80053e2:	f06f 0303 	mvn.w	r3, #3
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e02c      	b.n	8005444 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	461a      	mov	r2, r3
 80053f4:	2100      	movs	r1, #0
 80053f6:	6938      	ldr	r0, [r7, #16]
 80053f8:	f001 f962 	bl	80066c0 <xQueueReceiveFromISR>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d003      	beq.n	800540a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005402:	f06f 0302 	mvn.w	r3, #2
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	e01c      	b.n	8005444 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d019      	beq.n	8005444 <osSemaphoreAcquire+0x94>
 8005410:	4b0f      	ldr	r3, [pc, #60]	; (8005450 <osSemaphoreAcquire+0xa0>)
 8005412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
 8005420:	e010      	b.n	8005444 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005422:	6839      	ldr	r1, [r7, #0]
 8005424:	6938      	ldr	r0, [r7, #16]
 8005426:	f001 f83f 	bl	80064a8 <xQueueSemaphoreTake>
 800542a:	4603      	mov	r3, r0
 800542c:	2b01      	cmp	r3, #1
 800542e:	d009      	beq.n	8005444 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005436:	f06f 0301 	mvn.w	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	e002      	b.n	8005444 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800543e:	f06f 0302 	mvn.w	r3, #2
 8005442:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005444:	697b      	ldr	r3, [r7, #20]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	e000ed04 	.word	0xe000ed04

08005454 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b086      	sub	sp, #24
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005460:	2300      	movs	r3, #0
 8005462:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d103      	bne.n	8005472 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800546a:	f06f 0303 	mvn.w	r3, #3
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	e02c      	b.n	80054cc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005472:	f3ef 8305 	mrs	r3, IPSR
 8005476:	60fb      	str	r3, [r7, #12]
  return(result);
 8005478:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01a      	beq.n	80054b4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800547e:	2300      	movs	r3, #0
 8005480:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005482:	f107 0308 	add.w	r3, r7, #8
 8005486:	4619      	mov	r1, r3
 8005488:	6938      	ldr	r0, [r7, #16]
 800548a:	f000 fea0 	bl	80061ce <xQueueGiveFromISR>
 800548e:	4603      	mov	r3, r0
 8005490:	2b01      	cmp	r3, #1
 8005492:	d003      	beq.n	800549c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005494:	f06f 0302 	mvn.w	r3, #2
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	e017      	b.n	80054cc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d014      	beq.n	80054cc <osSemaphoreRelease+0x78>
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <osSemaphoreRelease+0x84>)
 80054a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	e00b      	b.n	80054cc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80054b4:	2300      	movs	r3, #0
 80054b6:	2200      	movs	r2, #0
 80054b8:	2100      	movs	r1, #0
 80054ba:	6938      	ldr	r0, [r7, #16]
 80054bc:	f000 fcee 	bl	8005e9c <xQueueGenericSend>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d002      	beq.n	80054cc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80054c6:	f06f 0302 	mvn.w	r3, #2
 80054ca:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80054cc:	697b      	ldr	r3, [r7, #20]
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e8:	f3ef 8305 	mrs	r3, IPSR
 80054ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80054ee:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80054f4:	f06f 0305 	mvn.w	r3, #5
 80054f8:	617b      	str	r3, [r7, #20]
 80054fa:	e00e      	b.n	800551a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d103      	bne.n	800550a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005502:	f06f 0303 	mvn.w	r3, #3
 8005506:	617b      	str	r3, [r7, #20]
 8005508:	e007      	b.n	800551a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800550a:	6938      	ldr	r0, [r7, #16]
 800550c:	f001 fb0a 	bl	8006b24 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005514:	6938      	ldr	r0, [r7, #16]
 8005516:	f001 f98f 	bl	8006838 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800551a:	697b      	ldr	r3, [r7, #20]
}
 800551c:	4618      	mov	r0, r3
 800551e:	3718      	adds	r7, #24
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	; 0x28
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005534:	f3ef 8305 	mrs	r3, IPSR
 8005538:	613b      	str	r3, [r7, #16]
  return(result);
 800553a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800553c:	2b00      	cmp	r3, #0
 800553e:	d15f      	bne.n	8005600 <osMessageQueueNew+0xdc>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d05c      	beq.n	8005600 <osMessageQueueNew+0xdc>
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d059      	beq.n	8005600 <osMessageQueueNew+0xdc>
    mem = -1;
 800554c:	f04f 33ff 	mov.w	r3, #4294967295
 8005550:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d029      	beq.n	80055ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d012      	beq.n	8005586 <osMessageQueueNew+0x62>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	2b4f      	cmp	r3, #79	; 0x4f
 8005566:	d90e      	bls.n	8005586 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695a      	ldr	r2, [r3, #20]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68b9      	ldr	r1, [r7, #8]
 8005578:	fb01 f303 	mul.w	r3, r1, r3
 800557c:	429a      	cmp	r2, r3
 800557e:	d302      	bcc.n	8005586 <osMessageQueueNew+0x62>
        mem = 1;
 8005580:	2301      	movs	r3, #1
 8005582:	61bb      	str	r3, [r7, #24]
 8005584:	e014      	b.n	80055b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d110      	bne.n	80055b0 <osMessageQueueNew+0x8c>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d10c      	bne.n	80055b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800559a:	2b00      	cmp	r3, #0
 800559c:	d108      	bne.n	80055b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d104      	bne.n	80055b0 <osMessageQueueNew+0x8c>
          mem = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	e001      	b.n	80055b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d10b      	bne.n	80055ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	691a      	ldr	r2, [r3, #16]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2100      	movs	r1, #0
 80055c0:	9100      	str	r1, [sp, #0]
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	68f8      	ldr	r0, [r7, #12]
 80055c6:	f000 fa73 	bl	8005ab0 <xQueueGenericCreateStatic>
 80055ca:	61f8      	str	r0, [r7, #28]
 80055cc:	e008      	b.n	80055e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d105      	bne.n	80055e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80055d4:	2200      	movs	r2, #0
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f000 fae1 	bl	8005ba0 <xQueueGenericCreate>
 80055de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00c      	beq.n	8005600 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d003      	beq.n	80055f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	e001      	b.n	80055f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80055f8:	6979      	ldr	r1, [r7, #20]
 80055fa:	69f8      	ldr	r0, [r7, #28]
 80055fc:	f001 fa68 	bl	8006ad0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005600:	69fb      	ldr	r3, [r7, #28]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3720      	adds	r7, #32
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	4613      	mov	r3, r2
 800561a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005620:	2300      	movs	r3, #0
 8005622:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005624:	f3ef 8305 	mrs	r3, IPSR
 8005628:	617b      	str	r3, [r7, #20]
  return(result);
 800562a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800562c:	2b00      	cmp	r3, #0
 800562e:	d028      	beq.n	8005682 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d005      	beq.n	8005642 <osMessageQueuePut+0x36>
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d002      	beq.n	8005642 <osMessageQueuePut+0x36>
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005642:	f06f 0303 	mvn.w	r3, #3
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	e038      	b.n	80056bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800564a:	2300      	movs	r3, #0
 800564c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800564e:	f107 0210 	add.w	r2, r7, #16
 8005652:	2300      	movs	r3, #0
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	69b8      	ldr	r0, [r7, #24]
 8005658:	f000 fd1e 	bl	8006098 <xQueueGenericSendFromISR>
 800565c:	4603      	mov	r3, r0
 800565e:	2b01      	cmp	r3, #1
 8005660:	d003      	beq.n	800566a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005662:	f06f 0302 	mvn.w	r3, #2
 8005666:	61fb      	str	r3, [r7, #28]
 8005668:	e028      	b.n	80056bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d025      	beq.n	80056bc <osMessageQueuePut+0xb0>
 8005670:	4b15      	ldr	r3, [pc, #84]	; (80056c8 <osMessageQueuePut+0xbc>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	e01c      	b.n	80056bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <osMessageQueuePut+0x82>
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800568e:	f06f 0303 	mvn.w	r3, #3
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	e012      	b.n	80056bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005696:	2300      	movs	r3, #0
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	68b9      	ldr	r1, [r7, #8]
 800569c:	69b8      	ldr	r0, [r7, #24]
 800569e:	f000 fbfd 	bl	8005e9c <xQueueGenericSend>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d009      	beq.n	80056bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80056ae:	f06f 0301 	mvn.w	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	e002      	b.n	80056bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80056b6:	f06f 0302 	mvn.w	r3, #2
 80056ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80056bc:	69fb      	ldr	r3, [r7, #28]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3720      	adds	r7, #32
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	e000ed04 	.word	0xe000ed04

080056cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b088      	sub	sp, #32
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
 80056d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056e2:	f3ef 8305 	mrs	r3, IPSR
 80056e6:	617b      	str	r3, [r7, #20]
  return(result);
 80056e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d028      	beq.n	8005740 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <osMessageQueueGet+0x34>
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d002      	beq.n	8005700 <osMessageQueueGet+0x34>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005700:	f06f 0303 	mvn.w	r3, #3
 8005704:	61fb      	str	r3, [r7, #28]
 8005706:	e037      	b.n	8005778 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005708:	2300      	movs	r3, #0
 800570a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800570c:	f107 0310 	add.w	r3, r7, #16
 8005710:	461a      	mov	r2, r3
 8005712:	68b9      	ldr	r1, [r7, #8]
 8005714:	69b8      	ldr	r0, [r7, #24]
 8005716:	f000 ffd3 	bl	80066c0 <xQueueReceiveFromISR>
 800571a:	4603      	mov	r3, r0
 800571c:	2b01      	cmp	r3, #1
 800571e:	d003      	beq.n	8005728 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005720:	f06f 0302 	mvn.w	r3, #2
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	e027      	b.n	8005778 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d024      	beq.n	8005778 <osMessageQueueGet+0xac>
 800572e:	4b15      	ldr	r3, [pc, #84]	; (8005784 <osMessageQueueGet+0xb8>)
 8005730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	f3bf 8f4f 	dsb	sy
 800573a:	f3bf 8f6f 	isb	sy
 800573e:	e01b      	b.n	8005778 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <osMessageQueueGet+0x80>
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d103      	bne.n	8005754 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800574c:	f06f 0303 	mvn.w	r3, #3
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e011      	b.n	8005778 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	68b9      	ldr	r1, [r7, #8]
 8005758:	69b8      	ldr	r0, [r7, #24]
 800575a:	f000 fdc5 	bl	80062e8 <xQueueReceive>
 800575e:	4603      	mov	r3, r0
 8005760:	2b01      	cmp	r3, #1
 8005762:	d009      	beq.n	8005778 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800576a:	f06f 0301 	mvn.w	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	e002      	b.n	8005778 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005772:	f06f 0302 	mvn.w	r3, #2
 8005776:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005778:	69fb      	ldr	r3, [r7, #28]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	e000ed04 	.word	0xe000ed04

08005788 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d102      	bne.n	80057a0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	e00e      	b.n	80057be <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057a0:	f3ef 8305 	mrs	r3, IPSR
 80057a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80057a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d004      	beq.n	80057b6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80057ac:	6938      	ldr	r0, [r7, #16]
 80057ae:	f001 f825 	bl	80067fc <uxQueueMessagesWaitingFromISR>
 80057b2:	6178      	str	r0, [r7, #20]
 80057b4:	e003      	b.n	80057be <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80057b6:	6938      	ldr	r0, [r7, #16]
 80057b8:	f001 f802 	bl	80067c0 <uxQueueMessagesWaiting>
 80057bc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80057be:	697b      	ldr	r3, [r7, #20]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b086      	sub	sp, #24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057d4:	f3ef 8305 	mrs	r3, IPSR
 80057d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80057da:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d003      	beq.n	80057e8 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 80057e0:	f06f 0305 	mvn.w	r3, #5
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	e00e      	b.n	8005806 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d103      	bne.n	80057f6 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 80057ee:	f06f 0303 	mvn.w	r3, #3
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e007      	b.n	8005806 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80057f6:	6938      	ldr	r0, [r7, #16]
 80057f8:	f001 f994 	bl	8006b24 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8005800:	6938      	ldr	r0, [r7, #16]
 8005802:	f001 f819 	bl	8006838 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005806:	697b      	ldr	r3, [r7, #20]
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4a07      	ldr	r2, [pc, #28]	; (800583c <vApplicationGetIdleTaskMemory+0x2c>)
 8005820:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4a06      	ldr	r2, [pc, #24]	; (8005840 <vApplicationGetIdleTaskMemory+0x30>)
 8005826:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2280      	movs	r2, #128	; 0x80
 800582c:	601a      	str	r2, [r3, #0]
}
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	200000ac 	.word	0x200000ac
 8005840:	20000108 	.word	0x20000108

08005844 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4a07      	ldr	r2, [pc, #28]	; (8005870 <vApplicationGetTimerTaskMemory+0x2c>)
 8005854:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	4a06      	ldr	r2, [pc, #24]	; (8005874 <vApplicationGetTimerTaskMemory+0x30>)
 800585a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005862:	601a      	str	r2, [r3, #0]
}
 8005864:	bf00      	nop
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	20000308 	.word	0x20000308
 8005874:	20000364 	.word	0x20000364

08005878 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f103 0208 	add.w	r2, r3, #8
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f04f 32ff 	mov.w	r2, #4294967295
 8005890:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f103 0208 	add.w	r2, r3, #8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f103 0208 	add.w	r2, r3, #8
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80058c6:	bf00      	nop
 80058c8:	370c      	adds	r7, #12
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr

080058d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80058d2:	b480      	push	{r7}
 80058d4:	b085      	sub	sp, #20
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	689a      	ldr	r2, [r3, #8]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	683a      	ldr	r2, [r7, #0]
 80058f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	1c5a      	adds	r2, r3, #1
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	601a      	str	r2, [r3, #0]
}
 800590e:	bf00      	nop
 8005910:	3714      	adds	r7, #20
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d103      	bne.n	800593a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	e00c      	b.n	8005954 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3308      	adds	r3, #8
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	e002      	b.n	8005948 <vListInsert+0x2e>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	429a      	cmp	r2, r3
 8005952:	d2f6      	bcs.n	8005942 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685a      	ldr	r2, [r3, #4]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	1c5a      	adds	r2, r3, #1
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	601a      	str	r2, [r3, #0]
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6892      	ldr	r2, [r2, #8]
 80059a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	6852      	ldr	r2, [r2, #4]
 80059ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d103      	bne.n	80059c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	1e5a      	subs	r2, r3, #1
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10a      	bne.n	8005a0a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a06:	bf00      	nop
 8005a08:	e7fe      	b.n	8005a08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a0a:	f002 fe5b 	bl	80086c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a1a:	fb01 f303 	mul.w	r3, r1, r3
 8005a1e:	441a      	add	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	68f9      	ldr	r1, [r7, #12]
 8005a3e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a40:	fb01 f303 	mul.w	r3, r1, r3
 8005a44:	441a      	add	r2, r3
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	22ff      	movs	r2, #255	; 0xff
 8005a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	22ff      	movs	r2, #255	; 0xff
 8005a56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d114      	bne.n	8005a8a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01a      	beq.n	8005a9e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3310      	adds	r3, #16
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 fe01 	bl	8007674 <xTaskRemoveFromEventList>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d012      	beq.n	8005a9e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005a78:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <xQueueGenericReset+0xcc>)
 8005a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	e009      	b.n	8005a9e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	3310      	adds	r3, #16
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff fef2 	bl	8005878 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	3324      	adds	r3, #36	; 0x24
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff feed 	bl	8005878 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005a9e:	f002 fe41 	bl	8008724 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005aa2:	2301      	movs	r3, #1
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	e000ed04 	.word	0xe000ed04

08005ab0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08e      	sub	sp, #56	; 0x38
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	607a      	str	r2, [r7, #4]
 8005abc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10a      	bne.n	8005ada <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ad6:	bf00      	nop
 8005ad8:	e7fe      	b.n	8005ad8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005af2:	bf00      	nop
 8005af4:	e7fe      	b.n	8005af4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <xQueueGenericCreateStatic+0x52>
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <xQueueGenericCreateStatic+0x56>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <xQueueGenericCreateStatic+0x58>
 8005b06:	2300      	movs	r3, #0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	623b      	str	r3, [r7, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <xQueueGenericCreateStatic+0x7e>
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <xQueueGenericCreateStatic+0x82>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e000      	b.n	8005b34 <xQueueGenericCreateStatic+0x84>
 8005b32:	2300      	movs	r3, #0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10a      	bne.n	8005b4e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3c:	f383 8811 	msr	BASEPRI, r3
 8005b40:	f3bf 8f6f 	isb	sy
 8005b44:	f3bf 8f4f 	dsb	sy
 8005b48:	61fb      	str	r3, [r7, #28]
}
 8005b4a:	bf00      	nop
 8005b4c:	e7fe      	b.n	8005b4c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005b4e:	2350      	movs	r3, #80	; 0x50
 8005b50:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b50      	cmp	r3, #80	; 0x50
 8005b56:	d00a      	beq.n	8005b6e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b5c:	f383 8811 	msr	BASEPRI, r3
 8005b60:	f3bf 8f6f 	isb	sy
 8005b64:	f3bf 8f4f 	dsb	sy
 8005b68:	61bb      	str	r3, [r7, #24]
}
 8005b6a:	bf00      	nop
 8005b6c:	e7fe      	b.n	8005b6c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005b6e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b82:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f000 f83f 	bl	8005c14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3730      	adds	r7, #48	; 0x30
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b08a      	sub	sp, #40	; 0x28
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	4613      	mov	r3, r2
 8005bac:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <xQueueGenericCreate+0x2a>
	__asm volatile
 8005bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bb8:	f383 8811 	msr	BASEPRI, r3
 8005bbc:	f3bf 8f6f 	isb	sy
 8005bc0:	f3bf 8f4f 	dsb	sy
 8005bc4:	613b      	str	r3, [r7, #16]
}
 8005bc6:	bf00      	nop
 8005bc8:	e7fe      	b.n	8005bc8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	3350      	adds	r3, #80	; 0x50
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f002 fe95 	bl	8008908 <pvPortMalloc>
 8005bde:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d011      	beq.n	8005c0a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	3350      	adds	r3, #80	; 0x50
 8005bee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005bf8:	79fa      	ldrb	r2, [r7, #7]
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	697a      	ldr	r2, [r7, #20]
 8005c02:	68b9      	ldr	r1, [r7, #8]
 8005c04:	68f8      	ldr	r0, [r7, #12]
 8005c06:	f000 f805 	bl	8005c14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
	}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d103      	bne.n	8005c30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	69ba      	ldr	r2, [r7, #24]
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	e002      	b.n	8005c36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	68ba      	ldr	r2, [r7, #8]
 8005c40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c42:	2101      	movs	r1, #1
 8005c44:	69b8      	ldr	r0, [r7, #24]
 8005c46:	f7ff fecb 	bl	80059e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	78fa      	ldrb	r2, [r7, #3]
 8005c4e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c52:	bf00      	nop
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b082      	sub	sp, #8
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00e      	beq.n	8005c86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	2100      	movs	r1, #0
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 f90b 	bl	8005e9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	4603      	mov	r3, r0
 8005c96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	617b      	str	r3, [r7, #20]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6939      	ldr	r1, [r7, #16]
 8005ca6:	6978      	ldr	r0, [r7, #20]
 8005ca8:	f7ff ff7a 	bl	8005ba0 <xQueueGenericCreate>
 8005cac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005cae:	68f8      	ldr	r0, [r7, #12]
 8005cb0:	f7ff ffd3 	bl	8005c5a <prvInitialiseMutex>

		return xNewQueue;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
	}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	3718      	adds	r7, #24
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b088      	sub	sp, #32
 8005cc2:	af02      	add	r7, sp, #8
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	6039      	str	r1, [r7, #0]
 8005cc8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	6939      	ldr	r1, [r7, #16]
 8005cdc:	6978      	ldr	r0, [r7, #20]
 8005cde:	f7ff fee7 	bl	8005ab0 <xQueueGenericCreateStatic>
 8005ce2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ce4:	68f8      	ldr	r0, [r7, #12]
 8005ce6:	f7ff ffb8 	bl	8005c5a <prvInitialiseMutex>

		return xNewQueue;
 8005cea:	68fb      	ldr	r3, [r7, #12]
	}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005cf4:	b590      	push	{r4, r7, lr}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10a      	bne.n	8005d1c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d0a:	f383 8811 	msr	BASEPRI, r3
 8005d0e:	f3bf 8f6f 	isb	sy
 8005d12:	f3bf 8f4f 	dsb	sy
 8005d16:	60fb      	str	r3, [r7, #12]
}
 8005d18:	bf00      	nop
 8005d1a:	e7fe      	b.n	8005d1a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	689c      	ldr	r4, [r3, #8]
 8005d20:	f001 fe66 	bl	80079f0 <xTaskGetCurrentTaskHandle>
 8005d24:	4603      	mov	r3, r0
 8005d26:	429c      	cmp	r4, r3
 8005d28:	d111      	bne.n	8005d4e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	1e5a      	subs	r2, r3, #1
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d105      	bne.n	8005d48 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2100      	movs	r1, #0
 8005d42:	6938      	ldr	r0, [r7, #16]
 8005d44:	f000 f8aa 	bl	8005e9c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	e001      	b.n	8005d52 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005d52:	697b      	ldr	r3, [r7, #20]
	}
 8005d54:	4618      	mov	r0, r3
 8005d56:	371c      	adds	r7, #28
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd90      	pop	{r4, r7, pc}

08005d5c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005d5c:	b590      	push	{r4, r7, lr}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	60fb      	str	r3, [r7, #12]
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	689c      	ldr	r4, [r3, #8]
 8005d8a:	f001 fe31 	bl	80079f0 <xTaskGetCurrentTaskHandle>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	429c      	cmp	r4, r3
 8005d92:	d107      	bne.n	8005da4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	617b      	str	r3, [r7, #20]
 8005da2:	e00c      	b.n	8005dbe <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6938      	ldr	r0, [r7, #16]
 8005da8:	f000 fb7e 	bl	80064a8 <xQueueSemaphoreTake>
 8005dac:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d004      	beq.n	8005dbe <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005dbe:	697b      	ldr	r3, [r7, #20]
	}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd90      	pop	{r4, r7, pc}

08005dc8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af02      	add	r7, sp, #8
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	60b9      	str	r1, [r7, #8]
 8005dd2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d10a      	bne.n	8005df0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dde:	f383 8811 	msr	BASEPRI, r3
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	f3bf 8f4f 	dsb	sy
 8005dea:	61bb      	str	r3, [r7, #24]
}
 8005dec:	bf00      	nop
 8005dee:	e7fe      	b.n	8005dee <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d90a      	bls.n	8005e0e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	617b      	str	r3, [r7, #20]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005e0e:	2302      	movs	r3, #2
 8005e10:	9300      	str	r3, [sp, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2200      	movs	r2, #0
 8005e16:	2100      	movs	r1, #0
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7ff fe49 	bl	8005ab0 <xQueueGenericCreateStatic>
 8005e1e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005e2c:	69fb      	ldr	r3, [r7, #28]
	}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3720      	adds	r7, #32
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b086      	sub	sp, #24
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
 8005e3e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10a      	bne.n	8005e5c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	613b      	str	r3, [r7, #16]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d90a      	bls.n	8005e7a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60fb      	str	r3, [r7, #12]
}
 8005e76:	bf00      	nop
 8005e78:	e7fe      	b.n	8005e78 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff fe8e 	bl	8005ba0 <xQueueGenericCreate>
 8005e84:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005e92:	697b      	ldr	r3, [r7, #20]
	}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3718      	adds	r7, #24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08e      	sub	sp, #56	; 0x38
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <xQueueGenericSend+0x32>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d103      	bne.n	8005edc <xQueueGenericSend+0x40>
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <xQueueGenericSend+0x44>
 8005edc:	2301      	movs	r3, #1
 8005ede:	e000      	b.n	8005ee2 <xQueueGenericSend+0x46>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <xQueueGenericSend+0x60>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ef8:	bf00      	nop
 8005efa:	e7fe      	b.n	8005efa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d103      	bne.n	8005f0a <xQueueGenericSend+0x6e>
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d101      	bne.n	8005f0e <xQueueGenericSend+0x72>
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e000      	b.n	8005f10 <xQueueGenericSend+0x74>
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <xQueueGenericSend+0x8e>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	623b      	str	r3, [r7, #32]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f2a:	f001 fd71 	bl	8007a10 <xTaskGetSchedulerState>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <xQueueGenericSend+0x9e>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <xQueueGenericSend+0xa2>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <xQueueGenericSend+0xa4>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <xQueueGenericSend+0xbe>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	61fb      	str	r3, [r7, #28]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f5a:	f002 fbb3 	bl	80086c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d302      	bcc.n	8005f70 <xQueueGenericSend+0xd4>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d129      	bne.n	8005fc4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	68b9      	ldr	r1, [r7, #8]
 8005f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005f76:	f000 fc9a 	bl	80068ae <prvCopyDataToQueue>
 8005f7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d010      	beq.n	8005fa6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	3324      	adds	r3, #36	; 0x24
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f001 fb73 	bl	8007674 <xTaskRemoveFromEventList>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d013      	beq.n	8005fbc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f94:	4b3f      	ldr	r3, [pc, #252]	; (8006094 <xQueueGenericSend+0x1f8>)
 8005f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	f3bf 8f4f 	dsb	sy
 8005fa0:	f3bf 8f6f 	isb	sy
 8005fa4:	e00a      	b.n	8005fbc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d007      	beq.n	8005fbc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fac:	4b39      	ldr	r3, [pc, #228]	; (8006094 <xQueueGenericSend+0x1f8>)
 8005fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fbc:	f002 fbb2 	bl	8008724 <vPortExitCritical>
				return pdPASS;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e063      	b.n	800608c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d103      	bne.n	8005fd2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fca:	f002 fbab 	bl	8008724 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	e05c      	b.n	800608c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d106      	bne.n	8005fe6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fd8:	f107 0314 	add.w	r3, r7, #20
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f001 fbad 	bl	800773c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fe6:	f002 fb9d 	bl	8008724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fea:	f001 f90d 	bl	8007208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fee:	f002 fb69 	bl	80086c4 <vPortEnterCritical>
 8005ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ff8:	b25b      	sxtb	r3, r3
 8005ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffe:	d103      	bne.n	8006008 <xQueueGenericSend+0x16c>
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800600e:	b25b      	sxtb	r3, r3
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d103      	bne.n	800601e <xQueueGenericSend+0x182>
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	2200      	movs	r2, #0
 800601a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800601e:	f002 fb81 	bl	8008724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006022:	1d3a      	adds	r2, r7, #4
 8006024:	f107 0314 	add.w	r3, r7, #20
 8006028:	4611      	mov	r1, r2
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fb9c 	bl	8007768 <xTaskCheckForTimeOut>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d124      	bne.n	8006080 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006038:	f000 fd31 	bl	8006a9e <prvIsQueueFull>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d018      	beq.n	8006074 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006044:	3310      	adds	r3, #16
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4611      	mov	r1, r2
 800604a:	4618      	mov	r0, r3
 800604c:	f001 fac2 	bl	80075d4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006052:	f000 fcbc 	bl	80069ce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006056:	f001 f8e5 	bl	8007224 <xTaskResumeAll>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	f47f af7c 	bne.w	8005f5a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006062:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <xQueueGenericSend+0x1f8>)
 8006064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006068:	601a      	str	r2, [r3, #0]
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	e772      	b.n	8005f5a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006076:	f000 fcaa 	bl	80069ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800607a:	f001 f8d3 	bl	8007224 <xTaskResumeAll>
 800607e:	e76c      	b.n	8005f5a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006082:	f000 fca4 	bl	80069ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006086:	f001 f8cd 	bl	8007224 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800608a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800608c:	4618      	mov	r0, r3
 800608e:	3738      	adds	r7, #56	; 0x38
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	e000ed04 	.word	0xe000ed04

08006098 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b090      	sub	sp, #64	; 0x40
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d103      	bne.n	80060d4 <xQueueGenericSendFromISR+0x3c>
 80060cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d101      	bne.n	80060d8 <xQueueGenericSendFromISR+0x40>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <xQueueGenericSendFromISR+0x42>
 80060d8:	2300      	movs	r3, #0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80060de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e2:	f383 8811 	msr	BASEPRI, r3
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060f0:	bf00      	nop
 80060f2:	e7fe      	b.n	80060f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d103      	bne.n	8006102 <xQueueGenericSendFromISR+0x6a>
 80060fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d101      	bne.n	8006106 <xQueueGenericSendFromISR+0x6e>
 8006102:	2301      	movs	r3, #1
 8006104:	e000      	b.n	8006108 <xQueueGenericSendFromISR+0x70>
 8006106:	2300      	movs	r3, #0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10a      	bne.n	8006122 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800610c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006110:	f383 8811 	msr	BASEPRI, r3
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	623b      	str	r3, [r7, #32]
}
 800611e:	bf00      	nop
 8006120:	e7fe      	b.n	8006120 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006122:	f002 fbb1 	bl	8008888 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006126:	f3ef 8211 	mrs	r2, BASEPRI
 800612a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	61fa      	str	r2, [r7, #28]
 800613c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800613e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006140:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614a:	429a      	cmp	r2, r3
 800614c:	d302      	bcc.n	8006154 <xQueueGenericSendFromISR+0xbc>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b02      	cmp	r3, #2
 8006152:	d12f      	bne.n	80061b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800615a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800615e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006164:	683a      	ldr	r2, [r7, #0]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800616a:	f000 fba0 	bl	80068ae <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800616e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d112      	bne.n	800619e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	d016      	beq.n	80061ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006182:	3324      	adds	r3, #36	; 0x24
 8006184:	4618      	mov	r0, r3
 8006186:	f001 fa75 	bl	8007674 <xTaskRemoveFromEventList>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00e      	beq.n	80061ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00b      	beq.n	80061ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	e007      	b.n	80061ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800619e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061a2:	3301      	adds	r3, #1
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	b25a      	sxtb	r2, r3
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061ae:	2301      	movs	r3, #1
 80061b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80061b2:	e001      	b.n	80061b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061b4:	2300      	movs	r3, #0
 80061b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3740      	adds	r7, #64	; 0x40
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b08e      	sub	sp, #56	; 0x38
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80061dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d10a      	bne.n	80061f8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80061e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e6:	f383 8811 	msr	BASEPRI, r3
 80061ea:	f3bf 8f6f 	isb	sy
 80061ee:	f3bf 8f4f 	dsb	sy
 80061f2:	623b      	str	r3, [r7, #32]
}
 80061f4:	bf00      	nop
 80061f6:	e7fe      	b.n	80061f6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <xQueueGiveFromISR+0x48>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	61fb      	str	r3, [r7, #28]
}
 8006212:	bf00      	nop
 8006214:	e7fe      	b.n	8006214 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <xQueueGiveFromISR+0x58>
 800621e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <xQueueGiveFromISR+0x5c>
 8006226:	2301      	movs	r3, #1
 8006228:	e000      	b.n	800622c <xQueueGiveFromISR+0x5e>
 800622a:	2300      	movs	r3, #0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <xQueueGiveFromISR+0x78>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	61bb      	str	r3, [r7, #24]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006246:	f002 fb1f 	bl	8008888 <vPortValidateInterruptPriority>
	__asm volatile
 800624a:	f3ef 8211 	mrs	r2, BASEPRI
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	617a      	str	r2, [r7, #20]
 8006260:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006262:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006264:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800626c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006272:	429a      	cmp	r2, r3
 8006274:	d22b      	bcs.n	80062ce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800627c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800628c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006290:	d112      	bne.n	80062b8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	2b00      	cmp	r3, #0
 8006298:	d016      	beq.n	80062c8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629c:	3324      	adds	r3, #36	; 0x24
 800629e:	4618      	mov	r0, r3
 80062a0:	f001 f9e8 	bl	8007674 <xTaskRemoveFromEventList>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00e      	beq.n	80062c8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00b      	beq.n	80062c8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2201      	movs	r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	e007      	b.n	80062c8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80062b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062bc:	3301      	adds	r3, #1
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	b25a      	sxtb	r2, r3
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80062c8:	2301      	movs	r3, #1
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
 80062cc:	e001      	b.n	80062d2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	637b      	str	r3, [r7, #52]	; 0x34
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f383 8811 	msr	BASEPRI, r3
}
 80062dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3738      	adds	r7, #56	; 0x38
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	; 0x30
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80062f4:	2300      	movs	r3, #0
 80062f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <xQueueReceive+0x30>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	623b      	str	r3, [r7, #32]
}
 8006314:	bf00      	nop
 8006316:	e7fe      	b.n	8006316 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d103      	bne.n	8006326 <xQueueReceive+0x3e>
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	2b00      	cmp	r3, #0
 8006324:	d101      	bne.n	800632a <xQueueReceive+0x42>
 8006326:	2301      	movs	r3, #1
 8006328:	e000      	b.n	800632c <xQueueReceive+0x44>
 800632a:	2300      	movs	r3, #0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <xQueueReceive+0x5e>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	61fb      	str	r3, [r7, #28]
}
 8006342:	bf00      	nop
 8006344:	e7fe      	b.n	8006344 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006346:	f001 fb63 	bl	8007a10 <xTaskGetSchedulerState>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d102      	bne.n	8006356 <xQueueReceive+0x6e>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <xQueueReceive+0x72>
 8006356:	2301      	movs	r3, #1
 8006358:	e000      	b.n	800635c <xQueueReceive+0x74>
 800635a:	2300      	movs	r3, #0
 800635c:	2b00      	cmp	r3, #0
 800635e:	d10a      	bne.n	8006376 <xQueueReceive+0x8e>
	__asm volatile
 8006360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006364:	f383 8811 	msr	BASEPRI, r3
 8006368:	f3bf 8f6f 	isb	sy
 800636c:	f3bf 8f4f 	dsb	sy
 8006370:	61bb      	str	r3, [r7, #24]
}
 8006372:	bf00      	nop
 8006374:	e7fe      	b.n	8006374 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006376:	f002 f9a5 	bl	80086c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	2b00      	cmp	r3, #0
 8006384:	d01f      	beq.n	80063c6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006386:	68b9      	ldr	r1, [r7, #8]
 8006388:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638a:	f000 fafa 	bl	8006982 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	1e5a      	subs	r2, r3, #1
 8006392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006394:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00f      	beq.n	80063be <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a0:	3310      	adds	r3, #16
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 f966 	bl	8007674 <xTaskRemoveFromEventList>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d007      	beq.n	80063be <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80063ae:	4b3d      	ldr	r3, [pc, #244]	; (80064a4 <xQueueReceive+0x1bc>)
 80063b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b4:	601a      	str	r2, [r3, #0]
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80063be:	f002 f9b1 	bl	8008724 <vPortExitCritical>
				return pdPASS;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e069      	b.n	800649a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d103      	bne.n	80063d4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80063cc:	f002 f9aa 	bl	8008724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80063d0:	2300      	movs	r3, #0
 80063d2:	e062      	b.n	800649a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80063da:	f107 0310 	add.w	r3, r7, #16
 80063de:	4618      	mov	r0, r3
 80063e0:	f001 f9ac 	bl	800773c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063e4:	2301      	movs	r3, #1
 80063e6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063e8:	f002 f99c 	bl	8008724 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063ec:	f000 ff0c 	bl	8007208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063f0:	f002 f968 	bl	80086c4 <vPortEnterCritical>
 80063f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063fa:	b25b      	sxtb	r3, r3
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006400:	d103      	bne.n	800640a <xQueueReceive+0x122>
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	2200      	movs	r2, #0
 8006406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800640a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006410:	b25b      	sxtb	r3, r3
 8006412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006416:	d103      	bne.n	8006420 <xQueueReceive+0x138>
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	2200      	movs	r2, #0
 800641c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006420:	f002 f980 	bl	8008724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006424:	1d3a      	adds	r2, r7, #4
 8006426:	f107 0310 	add.w	r3, r7, #16
 800642a:	4611      	mov	r1, r2
 800642c:	4618      	mov	r0, r3
 800642e:	f001 f99b 	bl	8007768 <xTaskCheckForTimeOut>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d123      	bne.n	8006480 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006438:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800643a:	f000 fb1a 	bl	8006a72 <prvIsQueueEmpty>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d017      	beq.n	8006474 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	3324      	adds	r3, #36	; 0x24
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	4611      	mov	r1, r2
 800644c:	4618      	mov	r0, r3
 800644e:	f001 f8c1 	bl	80075d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006454:	f000 fabb 	bl	80069ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006458:	f000 fee4 	bl	8007224 <xTaskResumeAll>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d189      	bne.n	8006376 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006462:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <xQueueReceive+0x1bc>)
 8006464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006468:	601a      	str	r2, [r3, #0]
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	e780      	b.n	8006376 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006476:	f000 faaa 	bl	80069ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800647a:	f000 fed3 	bl	8007224 <xTaskResumeAll>
 800647e:	e77a      	b.n	8006376 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006482:	f000 faa4 	bl	80069ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006486:	f000 fecd 	bl	8007224 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800648a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800648c:	f000 faf1 	bl	8006a72 <prvIsQueueEmpty>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	f43f af6f 	beq.w	8006376 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006498:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800649a:	4618      	mov	r0, r3
 800649c:	3730      	adds	r7, #48	; 0x30
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	e000ed04 	.word	0xe000ed04

080064a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08e      	sub	sp, #56	; 0x38
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80064b2:	2300      	movs	r3, #0
 80064b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80064ba:	2300      	movs	r3, #0
 80064bc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <xQueueSemaphoreTake+0x32>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	623b      	str	r3, [r7, #32]
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80064da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00a      	beq.n	80064f8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	61fb      	str	r3, [r7, #28]
}
 80064f4:	bf00      	nop
 80064f6:	e7fe      	b.n	80064f6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064f8:	f001 fa8a 	bl	8007a10 <xTaskGetSchedulerState>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d102      	bne.n	8006508 <xQueueSemaphoreTake+0x60>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <xQueueSemaphoreTake+0x64>
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <xQueueSemaphoreTake+0x66>
 800650c:	2300      	movs	r3, #0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10a      	bne.n	8006528 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	61bb      	str	r3, [r7, #24]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006528:	f002 f8cc 	bl	80086c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006530:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	2b00      	cmp	r3, #0
 8006536:	d024      	beq.n	8006582 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	1e5a      	subs	r2, r3, #1
 800653c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800653e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006548:	f001 fbd8 	bl	8007cfc <pvTaskIncrementMutexHeldCount>
 800654c:	4602      	mov	r2, r0
 800654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006550:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00f      	beq.n	800657a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800655c:	3310      	adds	r3, #16
 800655e:	4618      	mov	r0, r3
 8006560:	f001 f888 	bl	8007674 <xTaskRemoveFromEventList>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d007      	beq.n	800657a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800656a:	4b54      	ldr	r3, [pc, #336]	; (80066bc <xQueueSemaphoreTake+0x214>)
 800656c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800657a:	f002 f8d3 	bl	8008724 <vPortExitCritical>
				return pdPASS;
 800657e:	2301      	movs	r3, #1
 8006580:	e097      	b.n	80066b2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d111      	bne.n	80065ac <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00a      	beq.n	80065a4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	617b      	str	r3, [r7, #20]
}
 80065a0:	bf00      	nop
 80065a2:	e7fe      	b.n	80065a2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80065a4:	f002 f8be 	bl	8008724 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065a8:	2300      	movs	r3, #0
 80065aa:	e082      	b.n	80066b2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065b2:	f107 030c 	add.w	r3, r7, #12
 80065b6:	4618      	mov	r0, r3
 80065b8:	f001 f8c0 	bl	800773c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065bc:	2301      	movs	r3, #1
 80065be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065c0:	f002 f8b0 	bl	8008724 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065c4:	f000 fe20 	bl	8007208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065c8:	f002 f87c 	bl	80086c4 <vPortEnterCritical>
 80065cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065d2:	b25b      	sxtb	r3, r3
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d103      	bne.n	80065e2 <xQueueSemaphoreTake+0x13a>
 80065da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065e8:	b25b      	sxtb	r3, r3
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d103      	bne.n	80065f8 <xQueueSemaphoreTake+0x150>
 80065f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065f8:	f002 f894 	bl	8008724 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065fc:	463a      	mov	r2, r7
 80065fe:	f107 030c 	add.w	r3, r7, #12
 8006602:	4611      	mov	r1, r2
 8006604:	4618      	mov	r0, r3
 8006606:	f001 f8af 	bl	8007768 <xTaskCheckForTimeOut>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d132      	bne.n	8006676 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006610:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006612:	f000 fa2e 	bl	8006a72 <prvIsQueueEmpty>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d026      	beq.n	800666a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006624:	f002 f84e 	bl	80086c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	4618      	mov	r0, r3
 800662e:	f001 fa0d 	bl	8007a4c <xTaskPriorityInherit>
 8006632:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006634:	f002 f876 	bl	8008724 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663a:	3324      	adds	r3, #36	; 0x24
 800663c:	683a      	ldr	r2, [r7, #0]
 800663e:	4611      	mov	r1, r2
 8006640:	4618      	mov	r0, r3
 8006642:	f000 ffc7 	bl	80075d4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006648:	f000 f9c1 	bl	80069ce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800664c:	f000 fdea 	bl	8007224 <xTaskResumeAll>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	f47f af68 	bne.w	8006528 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006658:	4b18      	ldr	r3, [pc, #96]	; (80066bc <xQueueSemaphoreTake+0x214>)
 800665a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800665e:	601a      	str	r2, [r3, #0]
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	e75e      	b.n	8006528 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800666a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800666c:	f000 f9af 	bl	80069ce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006670:	f000 fdd8 	bl	8007224 <xTaskResumeAll>
 8006674:	e758      	b.n	8006528 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006676:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006678:	f000 f9a9 	bl	80069ce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800667c:	f000 fdd2 	bl	8007224 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006680:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006682:	f000 f9f6 	bl	8006a72 <prvIsQueueEmpty>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	f43f af4d 	beq.w	8006528 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2b00      	cmp	r3, #0
 8006692:	d00d      	beq.n	80066b0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006694:	f002 f816 	bl	80086c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800669a:	f000 f8f0 	bl	800687e <prvGetDisinheritPriorityAfterTimeout>
 800669e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066a6:	4618      	mov	r0, r3
 80066a8:	f001 faa6 	bl	8007bf8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80066ac:	f002 f83a 	bl	8008724 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3738      	adds	r7, #56	; 0x38
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b08e      	sub	sp, #56	; 0x38
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10a      	bne.n	80066ec <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	623b      	str	r3, [r7, #32]
}
 80066e8:	bf00      	nop
 80066ea:	e7fe      	b.n	80066ea <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d103      	bne.n	80066fa <xQueueReceiveFromISR+0x3a>
 80066f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <xQueueReceiveFromISR+0x3e>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <xQueueReceiveFromISR+0x40>
 80066fe:	2300      	movs	r3, #0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	61fb      	str	r3, [r7, #28]
}
 8006716:	bf00      	nop
 8006718:	e7fe      	b.n	8006718 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800671a:	f002 f8b5 	bl	8008888 <vPortValidateInterruptPriority>
	__asm volatile
 800671e:	f3ef 8211 	mrs	r2, BASEPRI
 8006722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006726:	f383 8811 	msr	BASEPRI, r3
 800672a:	f3bf 8f6f 	isb	sy
 800672e:	f3bf 8f4f 	dsb	sy
 8006732:	61ba      	str	r2, [r7, #24]
 8006734:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006736:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800673a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	2b00      	cmp	r3, #0
 8006744:	d02f      	beq.n	80067a6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006748:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800674c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006754:	f000 f915 	bl	8006982 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	1e5a      	subs	r2, r3, #1
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006760:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006768:	d112      	bne.n	8006790 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d016      	beq.n	80067a0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006774:	3310      	adds	r3, #16
 8006776:	4618      	mov	r0, r3
 8006778:	f000 ff7c 	bl	8007674 <xTaskRemoveFromEventList>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d00e      	beq.n	80067a0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00b      	beq.n	80067a0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	e007      	b.n	80067a0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006794:	3301      	adds	r3, #1
 8006796:	b2db      	uxtb	r3, r3
 8006798:	b25a      	sxtb	r2, r3
 800679a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80067a0:	2301      	movs	r3, #1
 80067a2:	637b      	str	r3, [r7, #52]	; 0x34
 80067a4:	e001      	b.n	80067aa <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	637b      	str	r3, [r7, #52]	; 0x34
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	613b      	str	r3, [r7, #16]
	__asm volatile
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	f383 8811 	msr	BASEPRI, r3
}
 80067b4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3738      	adds	r7, #56	; 0x38
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	60bb      	str	r3, [r7, #8]
}
 80067e0:	bf00      	nop
 80067e2:	e7fe      	b.n	80067e2 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80067e4:	f001 ff6e 	bl	80086c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80067ee:	f001 ff99 	bl	8008724 <vPortExitCritical>

	return uxReturn;
 80067f2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80067fc:	b480      	push	{r7}
 80067fe:	b087      	sub	sp, #28
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10a      	bne.n	8006824 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	60fb      	str	r3, [r7, #12]
}
 8006820:	bf00      	nop
 8006822:	e7fe      	b.n	8006822 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006828:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800682a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800682c:	4618      	mov	r0, r3
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b084      	sub	sp, #16
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10a      	bne.n	8006860 <vQueueDelete+0x28>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	60bb      	str	r3, [r7, #8]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 f95f 	bl	8006b24 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800686c:	2b00      	cmp	r3, #0
 800686e:	d102      	bne.n	8006876 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f002 f915 	bl	8008aa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006876:	bf00      	nop
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800687e:	b480      	push	{r7}
 8006880:	b085      	sub	sp, #20
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	2b00      	cmp	r3, #0
 800688c:	d006      	beq.n	800689c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	e001      	b.n	80068a0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800689c:	2300      	movs	r3, #0
 800689e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80068a0:	68fb      	ldr	r3, [r7, #12]
	}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr

080068ae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b086      	sub	sp, #24
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	60f8      	str	r0, [r7, #12]
 80068b6:	60b9      	str	r1, [r7, #8]
 80068b8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10d      	bne.n	80068e8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d14d      	bne.n	8006970 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 f91f 	bl	8007b1c <xTaskPriorityDisinherit>
 80068de:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	609a      	str	r2, [r3, #8]
 80068e6:	e043      	b.n	8006970 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d119      	bne.n	8006922 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6858      	ldr	r0, [r3, #4]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	461a      	mov	r2, r3
 80068f8:	68b9      	ldr	r1, [r7, #8]
 80068fa:	f011 fe07 	bl	801850c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	685a      	ldr	r2, [r3, #4]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	441a      	add	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	d32b      	bcc.n	8006970 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	605a      	str	r2, [r3, #4]
 8006920:	e026      	b.n	8006970 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	68d8      	ldr	r0, [r3, #12]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	461a      	mov	r2, r3
 800692c:	68b9      	ldr	r1, [r7, #8]
 800692e:	f011 fded 	bl	801850c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	68da      	ldr	r2, [r3, #12]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	425b      	negs	r3, r3
 800693c:	441a      	add	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	429a      	cmp	r2, r3
 800694c:	d207      	bcs.n	800695e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	689a      	ldr	r2, [r3, #8]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	425b      	negs	r3, r3
 8006958:	441a      	add	r2, r3
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b02      	cmp	r3, #2
 8006962:	d105      	bne.n	8006970 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d002      	beq.n	8006970 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	3b01      	subs	r3, #1
 800696e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006978:	697b      	ldr	r3, [r7, #20]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b082      	sub	sp, #8
 8006986:	af00      	add	r7, sp, #0
 8006988:	6078      	str	r0, [r7, #4]
 800698a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	d018      	beq.n	80069c6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699c:	441a      	add	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	68da      	ldr	r2, [r3, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d303      	bcc.n	80069b6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68d9      	ldr	r1, [r3, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	461a      	mov	r2, r3
 80069c0:	6838      	ldr	r0, [r7, #0]
 80069c2:	f011 fda3 	bl	801850c <memcpy>
	}
}
 80069c6:	bf00      	nop
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b084      	sub	sp, #16
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80069d6:	f001 fe75 	bl	80086c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069e0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069e2:	e011      	b.n	8006a08 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d012      	beq.n	8006a12 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3324      	adds	r3, #36	; 0x24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fe3f 	bl	8007674 <xTaskRemoveFromEventList>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d001      	beq.n	8006a00 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80069fc:	f000 ff16 	bl	800782c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a00:	7bfb      	ldrb	r3, [r7, #15]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dce9      	bgt.n	80069e4 <prvUnlockQueue+0x16>
 8006a10:	e000      	b.n	8006a14 <prvUnlockQueue+0x46>
					break;
 8006a12:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	22ff      	movs	r2, #255	; 0xff
 8006a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a1c:	f001 fe82 	bl	8008724 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a20:	f001 fe50 	bl	80086c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a2a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a2c:	e011      	b.n	8006a52 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d012      	beq.n	8006a5c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	3310      	adds	r3, #16
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f000 fe1a 	bl	8007674 <xTaskRemoveFromEventList>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d001      	beq.n	8006a4a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a46:	f000 fef1 	bl	800782c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a4a:	7bbb      	ldrb	r3, [r7, #14]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	b2db      	uxtb	r3, r3
 8006a50:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	dce9      	bgt.n	8006a2e <prvUnlockQueue+0x60>
 8006a5a:	e000      	b.n	8006a5e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a5c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	22ff      	movs	r2, #255	; 0xff
 8006a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a66:	f001 fe5d 	bl	8008724 <vPortExitCritical>
}
 8006a6a:	bf00      	nop
 8006a6c:	3710      	adds	r7, #16
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a72:	b580      	push	{r7, lr}
 8006a74:	b084      	sub	sp, #16
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a7a:	f001 fe23 	bl	80086c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d102      	bne.n	8006a8c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a86:	2301      	movs	r3, #1
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	e001      	b.n	8006a90 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a90:	f001 fe48 	bl	8008724 <vPortExitCritical>

	return xReturn;
 8006a94:	68fb      	ldr	r3, [r7, #12]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aa6:	f001 fe0d 	bl	80086c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d102      	bne.n	8006abc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	e001      	b.n	8006ac0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ac0:	f001 fe30 	bl	8008724 <vPortExitCritical>

	return xReturn;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006ada:	2300      	movs	r3, #0
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e014      	b.n	8006b0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ae0:	4a0f      	ldr	r2, [pc, #60]	; (8006b20 <vQueueAddToRegistry+0x50>)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10b      	bne.n	8006b04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006aec:	490c      	ldr	r1, [pc, #48]	; (8006b20 <vQueueAddToRegistry+0x50>)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006af6:	4a0a      	ldr	r2, [pc, #40]	; (8006b20 <vQueueAddToRegistry+0x50>)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	00db      	lsls	r3, r3, #3
 8006afc:	4413      	add	r3, r2
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b02:	e006      	b.n	8006b12 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	3301      	adds	r3, #1
 8006b08:	60fb      	str	r3, [r7, #12]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2b07      	cmp	r3, #7
 8006b0e:	d9e7      	bls.n	8006ae0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b10:	bf00      	nop
 8006b12:	bf00      	nop
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	200084e8 	.word	0x200084e8

08006b24 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e016      	b.n	8006b60 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006b32:	4a10      	ldr	r2, [pc, #64]	; (8006b74 <vQueueUnregisterQueue+0x50>)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	4413      	add	r3, r2
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d10b      	bne.n	8006b5a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006b42:	4a0c      	ldr	r2, [pc, #48]	; (8006b74 <vQueueUnregisterQueue+0x50>)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2100      	movs	r1, #0
 8006b48:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006b4c:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <vQueueUnregisterQueue+0x50>)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	00db      	lsls	r3, r3, #3
 8006b52:	4413      	add	r3, r2
 8006b54:	2200      	movs	r2, #0
 8006b56:	605a      	str	r2, [r3, #4]
				break;
 8006b58:	e006      	b.n	8006b68 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b07      	cmp	r3, #7
 8006b64:	d9e5      	bls.n	8006b32 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	200084e8 	.word	0x200084e8

08006b78 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b086      	sub	sp, #24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b88:	f001 fd9c 	bl	80086c4 <vPortEnterCritical>
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b92:	b25b      	sxtb	r3, r3
 8006b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b98:	d103      	bne.n	8006ba2 <vQueueWaitForMessageRestricted+0x2a>
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba8:	b25b      	sxtb	r3, r3
 8006baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bae:	d103      	bne.n	8006bb8 <vQueueWaitForMessageRestricted+0x40>
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006bb8:	f001 fdb4 	bl	8008724 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	3324      	adds	r3, #36	; 0x24
 8006bc8:	687a      	ldr	r2, [r7, #4]
 8006bca:	68b9      	ldr	r1, [r7, #8]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fd25 	bl	800761c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bd2:	6978      	ldr	r0, [r7, #20]
 8006bd4:	f7ff fefb 	bl	80069ce <prvUnlockQueue>
	}
 8006bd8:	bf00      	nop
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08e      	sub	sp, #56	; 0x38
 8006be4:	af04      	add	r7, sp, #16
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10a      	bne.n	8006c0a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	623b      	str	r3, [r7, #32]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xTaskCreateStatic+0x46>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	61fb      	str	r3, [r7, #28]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c26:	235c      	movs	r3, #92	; 0x5c
 8006c28:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b5c      	cmp	r3, #92	; 0x5c
 8006c2e:	d00a      	beq.n	8006c46 <xTaskCreateStatic+0x66>
	__asm volatile
 8006c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	61bb      	str	r3, [r7, #24]
}
 8006c42:	bf00      	nop
 8006c44:	e7fe      	b.n	8006c44 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c46:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d01e      	beq.n	8006c8c <xTaskCreateStatic+0xac>
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d01b      	beq.n	8006c8c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c5c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	2202      	movs	r2, #2
 8006c62:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c66:	2300      	movs	r3, #0
 8006c68:	9303      	str	r3, [sp, #12]
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	9302      	str	r3, [sp, #8]
 8006c6e:	f107 0314 	add.w	r3, r7, #20
 8006c72:	9301      	str	r3, [sp, #4]
 8006c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c76:	9300      	str	r3, [sp, #0]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	68b9      	ldr	r1, [r7, #8]
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f000 f850 	bl	8006d24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c86:	f000 f8dd 	bl	8006e44 <prvAddNewTaskToReadyList>
 8006c8a:	e001      	b.n	8006c90 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c90:	697b      	ldr	r3, [r7, #20]
	}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3728      	adds	r7, #40	; 0x28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b08c      	sub	sp, #48	; 0x30
 8006c9e:	af04      	add	r7, sp, #16
 8006ca0:	60f8      	str	r0, [r7, #12]
 8006ca2:	60b9      	str	r1, [r7, #8]
 8006ca4:	603b      	str	r3, [r7, #0]
 8006ca6:	4613      	mov	r3, r2
 8006ca8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006caa:	88fb      	ldrh	r3, [r7, #6]
 8006cac:	009b      	lsls	r3, r3, #2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f001 fe2a 	bl	8008908 <pvPortMalloc>
 8006cb4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00e      	beq.n	8006cda <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cbc:	205c      	movs	r0, #92	; 0x5c
 8006cbe:	f001 fe23 	bl	8008908 <pvPortMalloc>
 8006cc2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cca:	69fb      	ldr	r3, [r7, #28]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	631a      	str	r2, [r3, #48]	; 0x30
 8006cd0:	e005      	b.n	8006cde <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cd2:	6978      	ldr	r0, [r7, #20]
 8006cd4:	f001 fee4 	bl	8008aa0 <vPortFree>
 8006cd8:	e001      	b.n	8006cde <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d017      	beq.n	8006d14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cec:	88fa      	ldrh	r2, [r7, #6]
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	9302      	str	r3, [sp, #8]
 8006cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf8:	9301      	str	r3, [sp, #4]
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68b9      	ldr	r1, [r7, #8]
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f80e 	bl	8006d24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d08:	69f8      	ldr	r0, [r7, #28]
 8006d0a:	f000 f89b 	bl	8006e44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d0e:	2301      	movs	r3, #1
 8006d10:	61bb      	str	r3, [r7, #24]
 8006d12:	e002      	b.n	8006d1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d14:	f04f 33ff 	mov.w	r3, #4294967295
 8006d18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d1a:	69bb      	ldr	r3, [r7, #24]
	}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b088      	sub	sp, #32
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	21a5      	movs	r1, #165	; 0xa5
 8006d3e:	f011 fbf3 	bl	8018528 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	f023 0307 	bic.w	r3, r3, #7
 8006d5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	f003 0307 	and.w	r3, r3, #7
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00a      	beq.n	8006d7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	617b      	str	r3, [r7, #20]
}
 8006d78:	bf00      	nop
 8006d7a:	e7fe      	b.n	8006d7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d01f      	beq.n	8006dc2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
 8006d86:	e012      	b.n	8006dae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	7819      	ldrb	r1, [r3, #0]
 8006d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	4413      	add	r3, r2
 8006d96:	3334      	adds	r3, #52	; 0x34
 8006d98:	460a      	mov	r2, r1
 8006d9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	4413      	add	r3, r2
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d006      	beq.n	8006db6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	3301      	adds	r3, #1
 8006dac:	61fb      	str	r3, [r7, #28]
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	2b0f      	cmp	r3, #15
 8006db2:	d9e9      	bls.n	8006d88 <prvInitialiseNewTask+0x64>
 8006db4:	e000      	b.n	8006db8 <prvInitialiseNewTask+0x94>
			{
				break;
 8006db6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006dc0:	e003      	b.n	8006dca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	2b37      	cmp	r3, #55	; 0x37
 8006dce:	d901      	bls.n	8006dd4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006dd0:	2337      	movs	r3, #55	; 0x37
 8006dd2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dde:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de2:	2200      	movs	r2, #0
 8006de4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de8:	3304      	adds	r3, #4
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fe fd64 	bl	80058b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006df2:	3318      	adds	r3, #24
 8006df4:	4618      	mov	r0, r3
 8006df6:	f7fe fd5f 	bl	80058b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dfe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	2200      	movs	r2, #0
 8006e14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	68f9      	ldr	r1, [r7, #12]
 8006e22:	69b8      	ldr	r0, [r7, #24]
 8006e24:	f001 fb20 	bl	8008468 <pxPortInitialiseStack>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e3a:	bf00      	nop
 8006e3c:	3720      	adds	r7, #32
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e4c:	f001 fc3a 	bl	80086c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e50:	4b2d      	ldr	r3, [pc, #180]	; (8006f08 <prvAddNewTaskToReadyList+0xc4>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3301      	adds	r3, #1
 8006e56:	4a2c      	ldr	r2, [pc, #176]	; (8006f08 <prvAddNewTaskToReadyList+0xc4>)
 8006e58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e5a:	4b2c      	ldr	r3, [pc, #176]	; (8006f0c <prvAddNewTaskToReadyList+0xc8>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d109      	bne.n	8006e76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e62:	4a2a      	ldr	r2, [pc, #168]	; (8006f0c <prvAddNewTaskToReadyList+0xc8>)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e68:	4b27      	ldr	r3, [pc, #156]	; (8006f08 <prvAddNewTaskToReadyList+0xc4>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d110      	bne.n	8006e92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e70:	f000 fd00 	bl	8007874 <prvInitialiseTaskLists>
 8006e74:	e00d      	b.n	8006e92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e76:	4b26      	ldr	r3, [pc, #152]	; (8006f10 <prvAddNewTaskToReadyList+0xcc>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d109      	bne.n	8006e92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e7e:	4b23      	ldr	r3, [pc, #140]	; (8006f0c <prvAddNewTaskToReadyList+0xc8>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d802      	bhi.n	8006e92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006e8c:	4a1f      	ldr	r2, [pc, #124]	; (8006f0c <prvAddNewTaskToReadyList+0xc8>)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006e92:	4b20      	ldr	r3, [pc, #128]	; (8006f14 <prvAddNewTaskToReadyList+0xd0>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3301      	adds	r3, #1
 8006e98:	4a1e      	ldr	r2, [pc, #120]	; (8006f14 <prvAddNewTaskToReadyList+0xd0>)
 8006e9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006e9c:	4b1d      	ldr	r3, [pc, #116]	; (8006f14 <prvAddNewTaskToReadyList+0xd0>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea8:	4b1b      	ldr	r3, [pc, #108]	; (8006f18 <prvAddNewTaskToReadyList+0xd4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d903      	bls.n	8006eb8 <prvAddNewTaskToReadyList+0x74>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb4:	4a18      	ldr	r2, [pc, #96]	; (8006f18 <prvAddNewTaskToReadyList+0xd4>)
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4413      	add	r3, r2
 8006ec2:	009b      	lsls	r3, r3, #2
 8006ec4:	4a15      	ldr	r2, [pc, #84]	; (8006f1c <prvAddNewTaskToReadyList+0xd8>)
 8006ec6:	441a      	add	r2, r3
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	4610      	mov	r0, r2
 8006ed0:	f7fe fcff 	bl	80058d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ed4:	f001 fc26 	bl	8008724 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ed8:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <prvAddNewTaskToReadyList+0xcc>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00e      	beq.n	8006efe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ee0:	4b0a      	ldr	r3, [pc, #40]	; (8006f0c <prvAddNewTaskToReadyList+0xc8>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d207      	bcs.n	8006efe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006eee:	4b0c      	ldr	r3, [pc, #48]	; (8006f20 <prvAddNewTaskToReadyList+0xdc>)
 8006ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef4:	601a      	str	r2, [r3, #0]
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006efe:	bf00      	nop
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	20000c38 	.word	0x20000c38
 8006f0c:	20000764 	.word	0x20000764
 8006f10:	20000c44 	.word	0x20000c44
 8006f14:	20000c54 	.word	0x20000c54
 8006f18:	20000c40 	.word	0x20000c40
 8006f1c:	20000768 	.word	0x20000768
 8006f20:	e000ed04 	.word	0xe000ed04

08006f24 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006f2c:	f001 fbca 	bl	80086c4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d102      	bne.n	8006f3c <vTaskDelete+0x18>
 8006f36:	4b2c      	ldr	r3, [pc, #176]	; (8006fe8 <vTaskDelete+0xc4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	e000      	b.n	8006f3e <vTaskDelete+0x1a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	3304      	adds	r3, #4
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7fe fd21 	bl	800598c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d004      	beq.n	8006f5c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3318      	adds	r3, #24
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe fd18 	bl	800598c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006f5c:	4b23      	ldr	r3, [pc, #140]	; (8006fec <vTaskDelete+0xc8>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3301      	adds	r3, #1
 8006f62:	4a22      	ldr	r2, [pc, #136]	; (8006fec <vTaskDelete+0xc8>)
 8006f64:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006f66:	4b20      	ldr	r3, [pc, #128]	; (8006fe8 <vTaskDelete+0xc4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d10b      	bne.n	8006f88 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	481e      	ldr	r0, [pc, #120]	; (8006ff0 <vTaskDelete+0xcc>)
 8006f78:	f7fe fcab 	bl	80058d2 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006f7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <vTaskDelete+0xd0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a1c      	ldr	r2, [pc, #112]	; (8006ff4 <vTaskDelete+0xd0>)
 8006f84:	6013      	str	r3, [r2, #0]
 8006f86:	e009      	b.n	8006f9c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006f88:	4b1b      	ldr	r3, [pc, #108]	; (8006ff8 <vTaskDelete+0xd4>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	4a1a      	ldr	r2, [pc, #104]	; (8006ff8 <vTaskDelete+0xd4>)
 8006f90:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fcdc 	bl	8007950 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006f98:	f000 fd0a 	bl	80079b0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006f9c:	f001 fbc2 	bl	8008724 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006fa0:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <vTaskDelete+0xd8>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01b      	beq.n	8006fe0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8006fa8:	4b0f      	ldr	r3, [pc, #60]	; (8006fe8 <vTaskDelete+0xc4>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d116      	bne.n	8006fe0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006fb2:	4b13      	ldr	r3, [pc, #76]	; (8007000 <vTaskDelete+0xdc>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <vTaskDelete+0xac>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	60bb      	str	r3, [r7, #8]
}
 8006fcc:	bf00      	nop
 8006fce:	e7fe      	b.n	8006fce <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8006fd0:	4b0c      	ldr	r3, [pc, #48]	; (8007004 <vTaskDelete+0xe0>)
 8006fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	f3bf 8f4f 	dsb	sy
 8006fdc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006fe0:	bf00      	nop
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000764 	.word	0x20000764
 8006fec:	20000c54 	.word	0x20000c54
 8006ff0:	20000c0c 	.word	0x20000c0c
 8006ff4:	20000c20 	.word	0x20000c20
 8006ff8:	20000c38 	.word	0x20000c38
 8006ffc:	20000c44 	.word	0x20000c44
 8007000:	20000c60 	.word	0x20000c60
 8007004:	e000ed04 	.word	0xe000ed04

08007008 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d017      	beq.n	800704a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <vTaskDelay+0x60>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00a      	beq.n	8007038 <vTaskDelay+0x30>
	__asm volatile
 8007022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007026:	f383 8811 	msr	BASEPRI, r3
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	f3bf 8f4f 	dsb	sy
 8007032:	60bb      	str	r3, [r7, #8]
}
 8007034:	bf00      	nop
 8007036:	e7fe      	b.n	8007036 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007038:	f000 f8e6 	bl	8007208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fe70 	bl	8007d24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007044:	f000 f8ee 	bl	8007224 <xTaskResumeAll>
 8007048:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d107      	bne.n	8007060 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <vTaskDelay+0x64>)
 8007052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007060:	bf00      	nop
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	20000c60 	.word	0x20000c60
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007070:	b580      	push	{r7, lr}
 8007072:	b088      	sub	sp, #32
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10a      	bne.n	8007098 <eTaskGetState+0x28>
	__asm volatile
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	60bb      	str	r3, [r7, #8]
}
 8007094:	bf00      	nop
 8007096:	e7fe      	b.n	8007096 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007098:	4b23      	ldr	r3, [pc, #140]	; (8007128 <eTaskGetState+0xb8>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d102      	bne.n	80070a8 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80070a2:	2300      	movs	r3, #0
 80070a4:	77fb      	strb	r3, [r7, #31]
 80070a6:	e03a      	b.n	800711e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80070a8:	f001 fb0c 	bl	80086c4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80070b2:	4b1e      	ldr	r3, [pc, #120]	; (800712c <eTaskGetState+0xbc>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80070b8:	4b1d      	ldr	r3, [pc, #116]	; (8007130 <eTaskGetState+0xc0>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80070be:	f001 fb31 	bl	8008724 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	429a      	cmp	r2, r3
 80070c8:	d003      	beq.n	80070d2 <eTaskGetState+0x62>
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d102      	bne.n	80070d8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80070d2:	2302      	movs	r3, #2
 80070d4:	77fb      	strb	r3, [r7, #31]
 80070d6:	e022      	b.n	800711e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	4a16      	ldr	r2, [pc, #88]	; (8007134 <eTaskGetState+0xc4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d112      	bne.n	8007106 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d102      	bne.n	80070fa <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80070f4:	2302      	movs	r3, #2
 80070f6:	77fb      	strb	r3, [r7, #31]
 80070f8:	e011      	b.n	800711e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80070fa:	2303      	movs	r3, #3
 80070fc:	77fb      	strb	r3, [r7, #31]
 80070fe:	e00e      	b.n	800711e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8007100:	2302      	movs	r3, #2
 8007102:	77fb      	strb	r3, [r7, #31]
 8007104:	e00b      	b.n	800711e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	4a0b      	ldr	r2, [pc, #44]	; (8007138 <eTaskGetState+0xc8>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d002      	beq.n	8007114 <eTaskGetState+0xa4>
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8007114:	2304      	movs	r3, #4
 8007116:	77fb      	strb	r3, [r7, #31]
 8007118:	e001      	b.n	800711e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800711a:	2301      	movs	r3, #1
 800711c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 800711e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007120:	4618      	mov	r0, r3
 8007122:	3720      	adds	r7, #32
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20000764 	.word	0x20000764
 800712c:	20000bf0 	.word	0x20000bf0
 8007130:	20000bf4 	.word	0x20000bf4
 8007134:	20000c24 	.word	0x20000c24
 8007138:	20000c0c 	.word	0x20000c0c

0800713c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08a      	sub	sp, #40	; 0x28
 8007140:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007142:	2300      	movs	r3, #0
 8007144:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007146:	2300      	movs	r3, #0
 8007148:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800714a:	463a      	mov	r2, r7
 800714c:	1d39      	adds	r1, r7, #4
 800714e:	f107 0308 	add.w	r3, r7, #8
 8007152:	4618      	mov	r0, r3
 8007154:	f7fe fb5c 	bl	8005810 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	9202      	str	r2, [sp, #8]
 8007160:	9301      	str	r3, [sp, #4]
 8007162:	2300      	movs	r3, #0
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	2300      	movs	r3, #0
 8007168:	460a      	mov	r2, r1
 800716a:	4921      	ldr	r1, [pc, #132]	; (80071f0 <vTaskStartScheduler+0xb4>)
 800716c:	4821      	ldr	r0, [pc, #132]	; (80071f4 <vTaskStartScheduler+0xb8>)
 800716e:	f7ff fd37 	bl	8006be0 <xTaskCreateStatic>
 8007172:	4603      	mov	r3, r0
 8007174:	4a20      	ldr	r2, [pc, #128]	; (80071f8 <vTaskStartScheduler+0xbc>)
 8007176:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007178:	4b1f      	ldr	r3, [pc, #124]	; (80071f8 <vTaskStartScheduler+0xbc>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007180:	2301      	movs	r3, #1
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	e001      	b.n	800718a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b01      	cmp	r3, #1
 800718e:	d102      	bne.n	8007196 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007190:	f000 fe1c 	bl	8007dcc <xTimerCreateTimerTask>
 8007194:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d116      	bne.n	80071ca <vTaskStartScheduler+0x8e>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	613b      	str	r3, [r7, #16]
}
 80071ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80071b0:	4b12      	ldr	r3, [pc, #72]	; (80071fc <vTaskStartScheduler+0xc0>)
 80071b2:	f04f 32ff 	mov.w	r2, #4294967295
 80071b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071b8:	4b11      	ldr	r3, [pc, #68]	; (8007200 <vTaskStartScheduler+0xc4>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071be:	4b11      	ldr	r3, [pc, #68]	; (8007204 <vTaskStartScheduler+0xc8>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071c4:	f001 f9dc 	bl	8008580 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071c8:	e00e      	b.n	80071e8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d0:	d10a      	bne.n	80071e8 <vTaskStartScheduler+0xac>
	__asm volatile
 80071d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d6:	f383 8811 	msr	BASEPRI, r3
 80071da:	f3bf 8f6f 	isb	sy
 80071de:	f3bf 8f4f 	dsb	sy
 80071e2:	60fb      	str	r3, [r7, #12]
}
 80071e4:	bf00      	nop
 80071e6:	e7fe      	b.n	80071e6 <vTaskStartScheduler+0xaa>
}
 80071e8:	bf00      	nop
 80071ea:	3718      	adds	r7, #24
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}
 80071f0:	08019614 	.word	0x08019614
 80071f4:	08007845 	.word	0x08007845
 80071f8:	20000c5c 	.word	0x20000c5c
 80071fc:	20000c58 	.word	0x20000c58
 8007200:	20000c44 	.word	0x20000c44
 8007204:	20000c3c 	.word	0x20000c3c

08007208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800720c:	4b04      	ldr	r3, [pc, #16]	; (8007220 <vTaskSuspendAll+0x18>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	4a03      	ldr	r2, [pc, #12]	; (8007220 <vTaskSuspendAll+0x18>)
 8007214:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007216:	bf00      	nop
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	20000c60 	.word	0x20000c60

08007224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800722e:	2300      	movs	r3, #0
 8007230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007232:	4b42      	ldr	r3, [pc, #264]	; (800733c <xTaskResumeAll+0x118>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10a      	bne.n	8007250 <xTaskResumeAll+0x2c>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	603b      	str	r3, [r7, #0]
}
 800724c:	bf00      	nop
 800724e:	e7fe      	b.n	800724e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007250:	f001 fa38 	bl	80086c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007254:	4b39      	ldr	r3, [pc, #228]	; (800733c <xTaskResumeAll+0x118>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3b01      	subs	r3, #1
 800725a:	4a38      	ldr	r2, [pc, #224]	; (800733c <xTaskResumeAll+0x118>)
 800725c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800725e:	4b37      	ldr	r3, [pc, #220]	; (800733c <xTaskResumeAll+0x118>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d162      	bne.n	800732c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007266:	4b36      	ldr	r3, [pc, #216]	; (8007340 <xTaskResumeAll+0x11c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d05e      	beq.n	800732c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800726e:	e02f      	b.n	80072d0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007270:	4b34      	ldr	r3, [pc, #208]	; (8007344 <xTaskResumeAll+0x120>)
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3318      	adds	r3, #24
 800727c:	4618      	mov	r0, r3
 800727e:	f7fe fb85 	bl	800598c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3304      	adds	r3, #4
 8007286:	4618      	mov	r0, r3
 8007288:	f7fe fb80 	bl	800598c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007290:	4b2d      	ldr	r3, [pc, #180]	; (8007348 <xTaskResumeAll+0x124>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	429a      	cmp	r2, r3
 8007296:	d903      	bls.n	80072a0 <xTaskResumeAll+0x7c>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	4a2a      	ldr	r2, [pc, #168]	; (8007348 <xTaskResumeAll+0x124>)
 800729e:	6013      	str	r3, [r2, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4a27      	ldr	r2, [pc, #156]	; (800734c <xTaskResumeAll+0x128>)
 80072ae:	441a      	add	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3304      	adds	r3, #4
 80072b4:	4619      	mov	r1, r3
 80072b6:	4610      	mov	r0, r2
 80072b8:	f7fe fb0b 	bl	80058d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	4b23      	ldr	r3, [pc, #140]	; (8007350 <xTaskResumeAll+0x12c>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d302      	bcc.n	80072d0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80072ca:	4b22      	ldr	r3, [pc, #136]	; (8007354 <xTaskResumeAll+0x130>)
 80072cc:	2201      	movs	r2, #1
 80072ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072d0:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <xTaskResumeAll+0x120>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1cb      	bne.n	8007270 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072de:	f000 fb67 	bl	80079b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80072e2:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <xTaskResumeAll+0x134>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d010      	beq.n	8007310 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072ee:	f000 f859 	bl	80073a4 <xTaskIncrementTick>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d002      	beq.n	80072fe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80072f8:	4b16      	ldr	r3, [pc, #88]	; (8007354 <xTaskResumeAll+0x130>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	3b01      	subs	r3, #1
 8007302:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d1f1      	bne.n	80072ee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800730a:	4b13      	ldr	r3, [pc, #76]	; (8007358 <xTaskResumeAll+0x134>)
 800730c:	2200      	movs	r2, #0
 800730e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007310:	4b10      	ldr	r3, [pc, #64]	; (8007354 <xTaskResumeAll+0x130>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d009      	beq.n	800732c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007318:	2301      	movs	r3, #1
 800731a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800731c:	4b0f      	ldr	r3, [pc, #60]	; (800735c <xTaskResumeAll+0x138>)
 800731e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800732c:	f001 f9fa 	bl	8008724 <vPortExitCritical>

	return xAlreadyYielded;
 8007330:	68bb      	ldr	r3, [r7, #8]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	20000c60 	.word	0x20000c60
 8007340:	20000c38 	.word	0x20000c38
 8007344:	20000bf8 	.word	0x20000bf8
 8007348:	20000c40 	.word	0x20000c40
 800734c:	20000768 	.word	0x20000768
 8007350:	20000764 	.word	0x20000764
 8007354:	20000c4c 	.word	0x20000c4c
 8007358:	20000c48 	.word	0x20000c48
 800735c:	e000ed04 	.word	0xe000ed04

08007360 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007366:	4b05      	ldr	r3, [pc, #20]	; (800737c <xTaskGetTickCount+0x1c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800736c:	687b      	ldr	r3, [r7, #4]
}
 800736e:	4618      	mov	r0, r3
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000c3c 	.word	0x20000c3c

08007380 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007386:	f001 fa7f 	bl	8008888 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800738a:	2300      	movs	r3, #0
 800738c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800738e:	4b04      	ldr	r3, [pc, #16]	; (80073a0 <xTaskGetTickCountFromISR+0x20>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007394:	683b      	ldr	r3, [r7, #0]
}
 8007396:	4618      	mov	r0, r3
 8007398:	3708      	adds	r7, #8
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop
 80073a0:	20000c3c 	.word	0x20000c3c

080073a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073ae:	4b4f      	ldr	r3, [pc, #316]	; (80074ec <xTaskIncrementTick+0x148>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f040 808f 	bne.w	80074d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80073b8:	4b4d      	ldr	r3, [pc, #308]	; (80074f0 <xTaskIncrementTick+0x14c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3301      	adds	r3, #1
 80073be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80073c0:	4a4b      	ldr	r2, [pc, #300]	; (80074f0 <xTaskIncrementTick+0x14c>)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d120      	bne.n	800740e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80073cc:	4b49      	ldr	r3, [pc, #292]	; (80074f4 <xTaskIncrementTick+0x150>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <xTaskIncrementTick+0x48>
	__asm volatile
 80073d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073da:	f383 8811 	msr	BASEPRI, r3
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f3bf 8f4f 	dsb	sy
 80073e6:	603b      	str	r3, [r7, #0]
}
 80073e8:	bf00      	nop
 80073ea:	e7fe      	b.n	80073ea <xTaskIncrementTick+0x46>
 80073ec:	4b41      	ldr	r3, [pc, #260]	; (80074f4 <xTaskIncrementTick+0x150>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	60fb      	str	r3, [r7, #12]
 80073f2:	4b41      	ldr	r3, [pc, #260]	; (80074f8 <xTaskIncrementTick+0x154>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a3f      	ldr	r2, [pc, #252]	; (80074f4 <xTaskIncrementTick+0x150>)
 80073f8:	6013      	str	r3, [r2, #0]
 80073fa:	4a3f      	ldr	r2, [pc, #252]	; (80074f8 <xTaskIncrementTick+0x154>)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6013      	str	r3, [r2, #0]
 8007400:	4b3e      	ldr	r3, [pc, #248]	; (80074fc <xTaskIncrementTick+0x158>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	4a3d      	ldr	r2, [pc, #244]	; (80074fc <xTaskIncrementTick+0x158>)
 8007408:	6013      	str	r3, [r2, #0]
 800740a:	f000 fad1 	bl	80079b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800740e:	4b3c      	ldr	r3, [pc, #240]	; (8007500 <xTaskIncrementTick+0x15c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	429a      	cmp	r2, r3
 8007416:	d349      	bcc.n	80074ac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007418:	4b36      	ldr	r3, [pc, #216]	; (80074f4 <xTaskIncrementTick+0x150>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d104      	bne.n	800742c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007422:	4b37      	ldr	r3, [pc, #220]	; (8007500 <xTaskIncrementTick+0x15c>)
 8007424:	f04f 32ff 	mov.w	r2, #4294967295
 8007428:	601a      	str	r2, [r3, #0]
					break;
 800742a:	e03f      	b.n	80074ac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800742c:	4b31      	ldr	r3, [pc, #196]	; (80074f4 <xTaskIncrementTick+0x150>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	429a      	cmp	r2, r3
 8007442:	d203      	bcs.n	800744c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007444:	4a2e      	ldr	r2, [pc, #184]	; (8007500 <xTaskIncrementTick+0x15c>)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800744a:	e02f      	b.n	80074ac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	3304      	adds	r3, #4
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe fa9b 	bl	800598c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d004      	beq.n	8007468 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3318      	adds	r3, #24
 8007462:	4618      	mov	r0, r3
 8007464:	f7fe fa92 	bl	800598c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800746c:	4b25      	ldr	r3, [pc, #148]	; (8007504 <xTaskIncrementTick+0x160>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	429a      	cmp	r2, r3
 8007472:	d903      	bls.n	800747c <xTaskIncrementTick+0xd8>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007478:	4a22      	ldr	r2, [pc, #136]	; (8007504 <xTaskIncrementTick+0x160>)
 800747a:	6013      	str	r3, [r2, #0]
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007480:	4613      	mov	r3, r2
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4a1f      	ldr	r2, [pc, #124]	; (8007508 <xTaskIncrementTick+0x164>)
 800748a:	441a      	add	r2, r3
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	3304      	adds	r3, #4
 8007490:	4619      	mov	r1, r3
 8007492:	4610      	mov	r0, r2
 8007494:	f7fe fa1d 	bl	80058d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800749c:	4b1b      	ldr	r3, [pc, #108]	; (800750c <xTaskIncrementTick+0x168>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d3b8      	bcc.n	8007418 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80074a6:	2301      	movs	r3, #1
 80074a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074aa:	e7b5      	b.n	8007418 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80074ac:	4b17      	ldr	r3, [pc, #92]	; (800750c <xTaskIncrementTick+0x168>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074b2:	4915      	ldr	r1, [pc, #84]	; (8007508 <xTaskIncrementTick+0x164>)
 80074b4:	4613      	mov	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d901      	bls.n	80074c8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80074c4:	2301      	movs	r3, #1
 80074c6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80074c8:	4b11      	ldr	r3, [pc, #68]	; (8007510 <xTaskIncrementTick+0x16c>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80074d0:	2301      	movs	r3, #1
 80074d2:	617b      	str	r3, [r7, #20]
 80074d4:	e004      	b.n	80074e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80074d6:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <xTaskIncrementTick+0x170>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	4a0d      	ldr	r2, [pc, #52]	; (8007514 <xTaskIncrementTick+0x170>)
 80074de:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80074e0:	697b      	ldr	r3, [r7, #20]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3718      	adds	r7, #24
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	20000c60 	.word	0x20000c60
 80074f0:	20000c3c 	.word	0x20000c3c
 80074f4:	20000bf0 	.word	0x20000bf0
 80074f8:	20000bf4 	.word	0x20000bf4
 80074fc:	20000c50 	.word	0x20000c50
 8007500:	20000c58 	.word	0x20000c58
 8007504:	20000c40 	.word	0x20000c40
 8007508:	20000768 	.word	0x20000768
 800750c:	20000764 	.word	0x20000764
 8007510:	20000c4c 	.word	0x20000c4c
 8007514:	20000c48 	.word	0x20000c48

08007518 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800751e:	4b28      	ldr	r3, [pc, #160]	; (80075c0 <vTaskSwitchContext+0xa8>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d003      	beq.n	800752e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007526:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <vTaskSwitchContext+0xac>)
 8007528:	2201      	movs	r2, #1
 800752a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800752c:	e041      	b.n	80075b2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800752e:	4b25      	ldr	r3, [pc, #148]	; (80075c4 <vTaskSwitchContext+0xac>)
 8007530:	2200      	movs	r2, #0
 8007532:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007534:	4b24      	ldr	r3, [pc, #144]	; (80075c8 <vTaskSwitchContext+0xb0>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e010      	b.n	800755e <vTaskSwitchContext+0x46>
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10a      	bne.n	8007558 <vTaskSwitchContext+0x40>
	__asm volatile
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	607b      	str	r3, [r7, #4]
}
 8007554:	bf00      	nop
 8007556:	e7fe      	b.n	8007556 <vTaskSwitchContext+0x3e>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3b01      	subs	r3, #1
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	491b      	ldr	r1, [pc, #108]	; (80075cc <vTaskSwitchContext+0xb4>)
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	4613      	mov	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	4413      	add	r3, r2
 8007568:	009b      	lsls	r3, r3, #2
 800756a:	440b      	add	r3, r1
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d0e4      	beq.n	800753c <vTaskSwitchContext+0x24>
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4a13      	ldr	r2, [pc, #76]	; (80075cc <vTaskSwitchContext+0xb4>)
 800757e:	4413      	add	r3, r2
 8007580:	60bb      	str	r3, [r7, #8]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	605a      	str	r2, [r3, #4]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	685a      	ldr	r2, [r3, #4]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	3308      	adds	r3, #8
 8007594:	429a      	cmp	r2, r3
 8007596:	d104      	bne.n	80075a2 <vTaskSwitchContext+0x8a>
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	605a      	str	r2, [r3, #4]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	4a09      	ldr	r2, [pc, #36]	; (80075d0 <vTaskSwitchContext+0xb8>)
 80075aa:	6013      	str	r3, [r2, #0]
 80075ac:	4a06      	ldr	r2, [pc, #24]	; (80075c8 <vTaskSwitchContext+0xb0>)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6013      	str	r3, [r2, #0]
}
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	20000c60 	.word	0x20000c60
 80075c4:	20000c4c 	.word	0x20000c4c
 80075c8:	20000c40 	.word	0x20000c40
 80075cc:	20000768 	.word	0x20000768
 80075d0:	20000764 	.word	0x20000764

080075d4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10a      	bne.n	80075fa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	60fb      	str	r3, [r7, #12]
}
 80075f6:	bf00      	nop
 80075f8:	e7fe      	b.n	80075f8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075fa:	4b07      	ldr	r3, [pc, #28]	; (8007618 <vTaskPlaceOnEventList+0x44>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3318      	adds	r3, #24
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f7fe f989 	bl	800591a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007608:	2101      	movs	r1, #1
 800760a:	6838      	ldr	r0, [r7, #0]
 800760c:	f000 fb8a 	bl	8007d24 <prvAddCurrentTaskToDelayedList>
}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20000764 	.word	0x20000764

0800761c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10a      	bne.n	8007644 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800762e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007632:	f383 8811 	msr	BASEPRI, r3
 8007636:	f3bf 8f6f 	isb	sy
 800763a:	f3bf 8f4f 	dsb	sy
 800763e:	617b      	str	r3, [r7, #20]
}
 8007640:	bf00      	nop
 8007642:	e7fe      	b.n	8007642 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007644:	4b0a      	ldr	r3, [pc, #40]	; (8007670 <vTaskPlaceOnEventListRestricted+0x54>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3318      	adds	r3, #24
 800764a:	4619      	mov	r1, r3
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7fe f940 	bl	80058d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007658:	f04f 33ff 	mov.w	r3, #4294967295
 800765c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800765e:	6879      	ldr	r1, [r7, #4]
 8007660:	68b8      	ldr	r0, [r7, #8]
 8007662:	f000 fb5f 	bl	8007d24 <prvAddCurrentTaskToDelayedList>
	}
 8007666:	bf00      	nop
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000764 	.word	0x20000764

08007674 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10a      	bne.n	80076a0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	60fb      	str	r3, [r7, #12]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	3318      	adds	r3, #24
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe f971 	bl	800598c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076aa:	4b1e      	ldr	r3, [pc, #120]	; (8007724 <xTaskRemoveFromEventList+0xb0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d11d      	bne.n	80076ee <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	3304      	adds	r3, #4
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7fe f968 	bl	800598c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c0:	4b19      	ldr	r3, [pc, #100]	; (8007728 <xTaskRemoveFromEventList+0xb4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d903      	bls.n	80076d0 <xTaskRemoveFromEventList+0x5c>
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076cc:	4a16      	ldr	r2, [pc, #88]	; (8007728 <xTaskRemoveFromEventList+0xb4>)
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076d4:	4613      	mov	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	4413      	add	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4a13      	ldr	r2, [pc, #76]	; (800772c <xTaskRemoveFromEventList+0xb8>)
 80076de:	441a      	add	r2, r3
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	3304      	adds	r3, #4
 80076e4:	4619      	mov	r1, r3
 80076e6:	4610      	mov	r0, r2
 80076e8:	f7fe f8f3 	bl	80058d2 <vListInsertEnd>
 80076ec:	e005      	b.n	80076fa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	3318      	adds	r3, #24
 80076f2:	4619      	mov	r1, r3
 80076f4:	480e      	ldr	r0, [pc, #56]	; (8007730 <xTaskRemoveFromEventList+0xbc>)
 80076f6:	f7fe f8ec 	bl	80058d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <xTaskRemoveFromEventList+0xc0>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	429a      	cmp	r2, r3
 8007706:	d905      	bls.n	8007714 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007708:	2301      	movs	r3, #1
 800770a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <xTaskRemoveFromEventList+0xc4>)
 800770e:	2201      	movs	r2, #1
 8007710:	601a      	str	r2, [r3, #0]
 8007712:	e001      	b.n	8007718 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007718:	697b      	ldr	r3, [r7, #20]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	20000c60 	.word	0x20000c60
 8007728:	20000c40 	.word	0x20000c40
 800772c:	20000768 	.word	0x20000768
 8007730:	20000bf8 	.word	0x20000bf8
 8007734:	20000764 	.word	0x20000764
 8007738:	20000c4c 	.word	0x20000c4c

0800773c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007744:	4b06      	ldr	r3, [pc, #24]	; (8007760 <vTaskInternalSetTimeOutState+0x24>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800774c:	4b05      	ldr	r3, [pc, #20]	; (8007764 <vTaskInternalSetTimeOutState+0x28>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	605a      	str	r2, [r3, #4]
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	20000c50 	.word	0x20000c50
 8007764:	20000c3c 	.word	0x20000c3c

08007768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10a      	bne.n	800778e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	613b      	str	r3, [r7, #16]
}
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10a      	bne.n	80077aa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	60fb      	str	r3, [r7, #12]
}
 80077a6:	bf00      	nop
 80077a8:	e7fe      	b.n	80077a8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80077aa:	f000 ff8b 	bl	80086c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077ae:	4b1d      	ldr	r3, [pc, #116]	; (8007824 <xTaskCheckForTimeOut+0xbc>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	69ba      	ldr	r2, [r7, #24]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077c6:	d102      	bne.n	80077ce <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	e023      	b.n	8007816 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4b15      	ldr	r3, [pc, #84]	; (8007828 <xTaskCheckForTimeOut+0xc0>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d007      	beq.n	80077ea <xTaskCheckForTimeOut+0x82>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	69ba      	ldr	r2, [r7, #24]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d302      	bcc.n	80077ea <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	61fb      	str	r3, [r7, #28]
 80077e8:	e015      	b.n	8007816 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d20b      	bcs.n	800780c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ff9b 	bl	800773c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007806:	2300      	movs	r3, #0
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	e004      	b.n	8007816 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	2200      	movs	r2, #0
 8007810:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007812:	2301      	movs	r3, #1
 8007814:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007816:	f000 ff85 	bl	8008724 <vPortExitCritical>

	return xReturn;
 800781a:	69fb      	ldr	r3, [r7, #28]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3720      	adds	r7, #32
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000c3c 	.word	0x20000c3c
 8007828:	20000c50 	.word	0x20000c50

0800782c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <vTaskMissedYield+0x14>)
 8007832:	2201      	movs	r2, #1
 8007834:	601a      	str	r2, [r3, #0]
}
 8007836:	bf00      	nop
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr
 8007840:	20000c4c 	.word	0x20000c4c

08007844 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b082      	sub	sp, #8
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800784c:	f000 f852 	bl	80078f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007850:	4b06      	ldr	r3, [pc, #24]	; (800786c <prvIdleTask+0x28>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d9f9      	bls.n	800784c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007858:	4b05      	ldr	r3, [pc, #20]	; (8007870 <prvIdleTask+0x2c>)
 800785a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785e:	601a      	str	r2, [r3, #0]
 8007860:	f3bf 8f4f 	dsb	sy
 8007864:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007868:	e7f0      	b.n	800784c <prvIdleTask+0x8>
 800786a:	bf00      	nop
 800786c:	20000768 	.word	0x20000768
 8007870:	e000ed04 	.word	0xe000ed04

08007874 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800787a:	2300      	movs	r3, #0
 800787c:	607b      	str	r3, [r7, #4]
 800787e:	e00c      	b.n	800789a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	4613      	mov	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	4413      	add	r3, r2
 8007888:	009b      	lsls	r3, r3, #2
 800788a:	4a12      	ldr	r2, [pc, #72]	; (80078d4 <prvInitialiseTaskLists+0x60>)
 800788c:	4413      	add	r3, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7fd fff2 	bl	8005878 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3301      	adds	r3, #1
 8007898:	607b      	str	r3, [r7, #4]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2b37      	cmp	r3, #55	; 0x37
 800789e:	d9ef      	bls.n	8007880 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078a0:	480d      	ldr	r0, [pc, #52]	; (80078d8 <prvInitialiseTaskLists+0x64>)
 80078a2:	f7fd ffe9 	bl	8005878 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078a6:	480d      	ldr	r0, [pc, #52]	; (80078dc <prvInitialiseTaskLists+0x68>)
 80078a8:	f7fd ffe6 	bl	8005878 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078ac:	480c      	ldr	r0, [pc, #48]	; (80078e0 <prvInitialiseTaskLists+0x6c>)
 80078ae:	f7fd ffe3 	bl	8005878 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078b2:	480c      	ldr	r0, [pc, #48]	; (80078e4 <prvInitialiseTaskLists+0x70>)
 80078b4:	f7fd ffe0 	bl	8005878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078b8:	480b      	ldr	r0, [pc, #44]	; (80078e8 <prvInitialiseTaskLists+0x74>)
 80078ba:	f7fd ffdd 	bl	8005878 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078be:	4b0b      	ldr	r3, [pc, #44]	; (80078ec <prvInitialiseTaskLists+0x78>)
 80078c0:	4a05      	ldr	r2, [pc, #20]	; (80078d8 <prvInitialiseTaskLists+0x64>)
 80078c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <prvInitialiseTaskLists+0x7c>)
 80078c6:	4a05      	ldr	r2, [pc, #20]	; (80078dc <prvInitialiseTaskLists+0x68>)
 80078c8:	601a      	str	r2, [r3, #0]
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20000768 	.word	0x20000768
 80078d8:	20000bc8 	.word	0x20000bc8
 80078dc:	20000bdc 	.word	0x20000bdc
 80078e0:	20000bf8 	.word	0x20000bf8
 80078e4:	20000c0c 	.word	0x20000c0c
 80078e8:	20000c24 	.word	0x20000c24
 80078ec:	20000bf0 	.word	0x20000bf0
 80078f0:	20000bf4 	.word	0x20000bf4

080078f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078fa:	e019      	b.n	8007930 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80078fc:	f000 fee2 	bl	80086c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007900:	4b10      	ldr	r3, [pc, #64]	; (8007944 <prvCheckTasksWaitingTermination+0x50>)
 8007902:	68db      	ldr	r3, [r3, #12]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	3304      	adds	r3, #4
 800790c:	4618      	mov	r0, r3
 800790e:	f7fe f83d 	bl	800598c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007912:	4b0d      	ldr	r3, [pc, #52]	; (8007948 <prvCheckTasksWaitingTermination+0x54>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3b01      	subs	r3, #1
 8007918:	4a0b      	ldr	r2, [pc, #44]	; (8007948 <prvCheckTasksWaitingTermination+0x54>)
 800791a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800791c:	4b0b      	ldr	r3, [pc, #44]	; (800794c <prvCheckTasksWaitingTermination+0x58>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	3b01      	subs	r3, #1
 8007922:	4a0a      	ldr	r2, [pc, #40]	; (800794c <prvCheckTasksWaitingTermination+0x58>)
 8007924:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007926:	f000 fefd 	bl	8008724 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 f810 	bl	8007950 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007930:	4b06      	ldr	r3, [pc, #24]	; (800794c <prvCheckTasksWaitingTermination+0x58>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e1      	bne.n	80078fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007938:	bf00      	nop
 800793a:	bf00      	nop
 800793c:	3708      	adds	r7, #8
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	20000c0c 	.word	0x20000c0c
 8007948:	20000c38 	.word	0x20000c38
 800794c:	20000c20 	.word	0x20000c20

08007950 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800795e:	2b00      	cmp	r3, #0
 8007960:	d108      	bne.n	8007974 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007966:	4618      	mov	r0, r3
 8007968:	f001 f89a 	bl	8008aa0 <vPortFree>
				vPortFree( pxTCB );
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 f897 	bl	8008aa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007972:	e018      	b.n	80079a6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800797a:	2b01      	cmp	r3, #1
 800797c:	d103      	bne.n	8007986 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 f88e 	bl	8008aa0 <vPortFree>
	}
 8007984:	e00f      	b.n	80079a6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800798c:	2b02      	cmp	r3, #2
 800798e:	d00a      	beq.n	80079a6 <prvDeleteTCB+0x56>
	__asm volatile
 8007990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	60fb      	str	r3, [r7, #12]
}
 80079a2:	bf00      	nop
 80079a4:	e7fe      	b.n	80079a4 <prvDeleteTCB+0x54>
	}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079b6:	4b0c      	ldr	r3, [pc, #48]	; (80079e8 <prvResetNextTaskUnblockTime+0x38>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d104      	bne.n	80079ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079c0:	4b0a      	ldr	r3, [pc, #40]	; (80079ec <prvResetNextTaskUnblockTime+0x3c>)
 80079c2:	f04f 32ff 	mov.w	r2, #4294967295
 80079c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079c8:	e008      	b.n	80079dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <prvResetNextTaskUnblockTime+0x38>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	4a04      	ldr	r2, [pc, #16]	; (80079ec <prvResetNextTaskUnblockTime+0x3c>)
 80079da:	6013      	str	r3, [r2, #0]
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	20000bf0 	.word	0x20000bf0
 80079ec:	20000c58 	.word	0x20000c58

080079f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80079f6:	4b05      	ldr	r3, [pc, #20]	; (8007a0c <xTaskGetCurrentTaskHandle+0x1c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80079fc:	687b      	ldr	r3, [r7, #4]
	}
 80079fe:	4618      	mov	r0, r3
 8007a00:	370c      	adds	r7, #12
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	20000764 	.word	0x20000764

08007a10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a16:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <xTaskGetSchedulerState+0x34>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d102      	bne.n	8007a24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	607b      	str	r3, [r7, #4]
 8007a22:	e008      	b.n	8007a36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a24:	4b08      	ldr	r3, [pc, #32]	; (8007a48 <xTaskGetSchedulerState+0x38>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d102      	bne.n	8007a32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	607b      	str	r3, [r7, #4]
 8007a30:	e001      	b.n	8007a36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a32:	2300      	movs	r3, #0
 8007a34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a36:	687b      	ldr	r3, [r7, #4]
	}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr
 8007a44:	20000c44 	.word	0x20000c44
 8007a48:	20000c60 	.word	0x20000c60

08007a4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d051      	beq.n	8007b06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a66:	4b2a      	ldr	r3, [pc, #168]	; (8007b10 <xTaskPriorityInherit+0xc4>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d241      	bcs.n	8007af4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	db06      	blt.n	8007a86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a78:	4b25      	ldr	r3, [pc, #148]	; (8007b10 <xTaskPriorityInherit+0xc4>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6959      	ldr	r1, [r3, #20]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4a1f      	ldr	r2, [pc, #124]	; (8007b14 <xTaskPriorityInherit+0xc8>)
 8007a98:	4413      	add	r3, r2
 8007a9a:	4299      	cmp	r1, r3
 8007a9c:	d122      	bne.n	8007ae4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fd ff72 	bl	800598c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007aa8:	4b19      	ldr	r3, [pc, #100]	; (8007b10 <xTaskPriorityInherit+0xc4>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <xTaskPriorityInherit+0xcc>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d903      	bls.n	8007ac6 <xTaskPriorityInherit+0x7a>
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ac2:	4a15      	ldr	r2, [pc, #84]	; (8007b18 <xTaskPriorityInherit+0xcc>)
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4a10      	ldr	r2, [pc, #64]	; (8007b14 <xTaskPriorityInherit+0xc8>)
 8007ad4:	441a      	add	r2, r3
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f7fd fef8 	bl	80058d2 <vListInsertEnd>
 8007ae2:	e004      	b.n	8007aee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <xTaskPriorityInherit+0xc4>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007aee:	2301      	movs	r3, #1
 8007af0:	60fb      	str	r3, [r7, #12]
 8007af2:	e008      	b.n	8007b06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007af8:	4b05      	ldr	r3, [pc, #20]	; (8007b10 <xTaskPriorityInherit+0xc4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d201      	bcs.n	8007b06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007b02:	2301      	movs	r3, #1
 8007b04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b06:	68fb      	ldr	r3, [r7, #12]
	}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	20000764 	.word	0x20000764
 8007b14:	20000768 	.word	0x20000768
 8007b18:	20000c40 	.word	0x20000c40

08007b1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d056      	beq.n	8007be0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007b32:	4b2e      	ldr	r3, [pc, #184]	; (8007bec <xTaskPriorityDisinherit+0xd0>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d00a      	beq.n	8007b52 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b40:	f383 8811 	msr	BASEPRI, r3
 8007b44:	f3bf 8f6f 	isb	sy
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	60fb      	str	r3, [r7, #12]
}
 8007b4e:	bf00      	nop
 8007b50:	e7fe      	b.n	8007b50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	60bb      	str	r3, [r7, #8]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b74:	1e5a      	subs	r2, r3, #1
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d02c      	beq.n	8007be0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d128      	bne.n	8007be0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	3304      	adds	r3, #4
 8007b92:	4618      	mov	r0, r3
 8007b94:	f7fd fefa 	bl	800598c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b98:	693b      	ldr	r3, [r7, #16]
 8007b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb0:	4b0f      	ldr	r3, [pc, #60]	; (8007bf0 <xTaskPriorityDisinherit+0xd4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d903      	bls.n	8007bc0 <xTaskPriorityDisinherit+0xa4>
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	4a0c      	ldr	r2, [pc, #48]	; (8007bf0 <xTaskPriorityDisinherit+0xd4>)
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4a09      	ldr	r2, [pc, #36]	; (8007bf4 <xTaskPriorityDisinherit+0xd8>)
 8007bce:	441a      	add	r2, r3
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7fd fe7b 	bl	80058d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007be0:	697b      	ldr	r3, [r7, #20]
	}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3718      	adds	r7, #24
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000764 	.word	0x20000764
 8007bf0:	20000c40 	.word	0x20000c40
 8007bf4:	20000768 	.word	0x20000768

08007bf8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b088      	sub	sp, #32
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007c06:	2301      	movs	r3, #1
 8007c08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d06a      	beq.n	8007ce6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1c:	f383 8811 	msr	BASEPRI, r3
 8007c20:	f3bf 8f6f 	isb	sy
 8007c24:	f3bf 8f4f 	dsb	sy
 8007c28:	60fb      	str	r3, [r7, #12]
}
 8007c2a:	bf00      	nop
 8007c2c:	e7fe      	b.n	8007c2c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007c2e:	69bb      	ldr	r3, [r7, #24]
 8007c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d902      	bls.n	8007c3e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	e002      	b.n	8007c44 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007c3e:	69bb      	ldr	r3, [r7, #24]
 8007c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c42:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c48:	69fa      	ldr	r2, [r7, #28]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d04b      	beq.n	8007ce6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d146      	bne.n	8007ce6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007c58:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d10a      	bne.n	8007c78 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c66:	f383 8811 	msr	BASEPRI, r3
 8007c6a:	f3bf 8f6f 	isb	sy
 8007c6e:	f3bf 8f4f 	dsb	sy
 8007c72:	60bb      	str	r3, [r7, #8]
}
 8007c74:	bf00      	nop
 8007c76:	e7fe      	b.n	8007c76 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	69fa      	ldr	r2, [r7, #28]
 8007c82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	db04      	blt.n	8007c96 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	6959      	ldr	r1, [r3, #20]
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4a13      	ldr	r2, [pc, #76]	; (8007cf4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ca6:	4413      	add	r3, r2
 8007ca8:	4299      	cmp	r1, r3
 8007caa:	d11c      	bne.n	8007ce6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	3304      	adds	r3, #4
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7fd fe6b 	bl	800598c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007cb6:	69bb      	ldr	r3, [r7, #24]
 8007cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cba:	4b0f      	ldr	r3, [pc, #60]	; (8007cf8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d903      	bls.n	8007cca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007cc2:	69bb      	ldr	r3, [r7, #24]
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	4a0c      	ldr	r2, [pc, #48]	; (8007cf8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007cc8:	6013      	str	r3, [r2, #0]
 8007cca:	69bb      	ldr	r3, [r7, #24]
 8007ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cce:	4613      	mov	r3, r2
 8007cd0:	009b      	lsls	r3, r3, #2
 8007cd2:	4413      	add	r3, r2
 8007cd4:	009b      	lsls	r3, r3, #2
 8007cd6:	4a07      	ldr	r2, [pc, #28]	; (8007cf4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007cd8:	441a      	add	r2, r3
 8007cda:	69bb      	ldr	r3, [r7, #24]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4610      	mov	r0, r2
 8007ce2:	f7fd fdf6 	bl	80058d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ce6:	bf00      	nop
 8007ce8:	3720      	adds	r7, #32
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	20000764 	.word	0x20000764
 8007cf4:	20000768 	.word	0x20000768
 8007cf8:	20000c40 	.word	0x20000c40

08007cfc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007d00:	4b07      	ldr	r3, [pc, #28]	; (8007d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d004      	beq.n	8007d12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007d08:	4b05      	ldr	r3, [pc, #20]	; (8007d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007d0e:	3201      	adds	r2, #1
 8007d10:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007d12:	4b03      	ldr	r3, [pc, #12]	; (8007d20 <pvTaskIncrementMutexHeldCount+0x24>)
 8007d14:	681b      	ldr	r3, [r3, #0]
	}
 8007d16:	4618      	mov	r0, r3
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	20000764 	.word	0x20000764

08007d24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d2e:	4b21      	ldr	r3, [pc, #132]	; (8007db4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d34:	4b20      	ldr	r3, [pc, #128]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	3304      	adds	r3, #4
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fd fe26 	bl	800598c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d10a      	bne.n	8007d5e <prvAddCurrentTaskToDelayedList+0x3a>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d007      	beq.n	8007d5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d4e:	4b1a      	ldr	r3, [pc, #104]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	3304      	adds	r3, #4
 8007d54:	4619      	mov	r1, r3
 8007d56:	4819      	ldr	r0, [pc, #100]	; (8007dbc <prvAddCurrentTaskToDelayedList+0x98>)
 8007d58:	f7fd fdbb 	bl	80058d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d5c:	e026      	b.n	8007dac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	4413      	add	r3, r2
 8007d64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d66:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d209      	bcs.n	8007d8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d76:	4b12      	ldr	r3, [pc, #72]	; (8007dc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4b0f      	ldr	r3, [pc, #60]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	4619      	mov	r1, r3
 8007d82:	4610      	mov	r0, r2
 8007d84:	f7fd fdc9 	bl	800591a <vListInsert>
}
 8007d88:	e010      	b.n	8007dac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d8a:	4b0e      	ldr	r3, [pc, #56]	; (8007dc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	4b0a      	ldr	r3, [pc, #40]	; (8007db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3304      	adds	r3, #4
 8007d94:	4619      	mov	r1, r3
 8007d96:	4610      	mov	r0, r2
 8007d98:	f7fd fdbf 	bl	800591a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d202      	bcs.n	8007dac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007da6:	4a08      	ldr	r2, [pc, #32]	; (8007dc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	6013      	str	r3, [r2, #0]
}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	20000c3c 	.word	0x20000c3c
 8007db8:	20000764 	.word	0x20000764
 8007dbc:	20000c24 	.word	0x20000c24
 8007dc0:	20000bf4 	.word	0x20000bf4
 8007dc4:	20000bf0 	.word	0x20000bf0
 8007dc8:	20000c58 	.word	0x20000c58

08007dcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08a      	sub	sp, #40	; 0x28
 8007dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007dd6:	f000 fb07 	bl	80083e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007dda:	4b1c      	ldr	r3, [pc, #112]	; (8007e4c <xTimerCreateTimerTask+0x80>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d021      	beq.n	8007e26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007de2:	2300      	movs	r3, #0
 8007de4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007de6:	2300      	movs	r3, #0
 8007de8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007dea:	1d3a      	adds	r2, r7, #4
 8007dec:	f107 0108 	add.w	r1, r7, #8
 8007df0:	f107 030c 	add.w	r3, r7, #12
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fd fd25 	bl	8005844 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	9202      	str	r2, [sp, #8]
 8007e02:	9301      	str	r3, [sp, #4]
 8007e04:	2302      	movs	r3, #2
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	4910      	ldr	r1, [pc, #64]	; (8007e50 <xTimerCreateTimerTask+0x84>)
 8007e0e:	4811      	ldr	r0, [pc, #68]	; (8007e54 <xTimerCreateTimerTask+0x88>)
 8007e10:	f7fe fee6 	bl	8006be0 <xTaskCreateStatic>
 8007e14:	4603      	mov	r3, r0
 8007e16:	4a10      	ldr	r2, [pc, #64]	; (8007e58 <xTimerCreateTimerTask+0x8c>)
 8007e18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e1a:	4b0f      	ldr	r3, [pc, #60]	; (8007e58 <xTimerCreateTimerTask+0x8c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e22:	2301      	movs	r3, #1
 8007e24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10a      	bne.n	8007e42 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	613b      	str	r3, [r7, #16]
}
 8007e3e:	bf00      	nop
 8007e40:	e7fe      	b.n	8007e40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e42:	697b      	ldr	r3, [r7, #20]
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	20000c94 	.word	0x20000c94
 8007e50:	0801961c 	.word	0x0801961c
 8007e54:	08007f91 	.word	0x08007f91
 8007e58:	20000c98 	.word	0x20000c98

08007e5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b08a      	sub	sp, #40	; 0x28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	60f8      	str	r0, [r7, #12]
 8007e64:	60b9      	str	r1, [r7, #8]
 8007e66:	607a      	str	r2, [r7, #4]
 8007e68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	623b      	str	r3, [r7, #32]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e8a:	4b1a      	ldr	r3, [pc, #104]	; (8007ef4 <xTimerGenericCommand+0x98>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d02a      	beq.n	8007ee8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	2b05      	cmp	r3, #5
 8007ea2:	dc18      	bgt.n	8007ed6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ea4:	f7ff fdb4 	bl	8007a10 <xTaskGetSchedulerState>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d109      	bne.n	8007ec2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007eae:	4b11      	ldr	r3, [pc, #68]	; (8007ef4 <xTimerGenericCommand+0x98>)
 8007eb0:	6818      	ldr	r0, [r3, #0]
 8007eb2:	f107 0110 	add.w	r1, r7, #16
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eba:	f7fd ffef 	bl	8005e9c <xQueueGenericSend>
 8007ebe:	6278      	str	r0, [r7, #36]	; 0x24
 8007ec0:	e012      	b.n	8007ee8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ec2:	4b0c      	ldr	r3, [pc, #48]	; (8007ef4 <xTimerGenericCommand+0x98>)
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	f107 0110 	add.w	r1, r7, #16
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f7fd ffe5 	bl	8005e9c <xQueueGenericSend>
 8007ed2:	6278      	str	r0, [r7, #36]	; 0x24
 8007ed4:	e008      	b.n	8007ee8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ed6:	4b07      	ldr	r3, [pc, #28]	; (8007ef4 <xTimerGenericCommand+0x98>)
 8007ed8:	6818      	ldr	r0, [r3, #0]
 8007eda:	f107 0110 	add.w	r1, r7, #16
 8007ede:	2300      	movs	r3, #0
 8007ee0:	683a      	ldr	r2, [r7, #0]
 8007ee2:	f7fe f8d9 	bl	8006098 <xQueueGenericSendFromISR>
 8007ee6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3728      	adds	r7, #40	; 0x28
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000c94 	.word	0x20000c94

08007ef8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f02:	4b22      	ldr	r3, [pc, #136]	; (8007f8c <prvProcessExpiredTimer+0x94>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fd fd3b 	bl	800598c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d022      	beq.n	8007f6a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	699a      	ldr	r2, [r3, #24]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	18d1      	adds	r1, r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	6978      	ldr	r0, [r7, #20]
 8007f32:	f000 f8d1 	bl	80080d8 <prvInsertTimerInActiveList>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d01f      	beq.n	8007f7c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	2300      	movs	r3, #0
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	2100      	movs	r1, #0
 8007f46:	6978      	ldr	r0, [r7, #20]
 8007f48:	f7ff ff88 	bl	8007e5c <xTimerGenericCommand>
 8007f4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d113      	bne.n	8007f7c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	60fb      	str	r3, [r7, #12]
}
 8007f66:	bf00      	nop
 8007f68:	e7fe      	b.n	8007f68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f70:	f023 0301 	bic.w	r3, r3, #1
 8007f74:	b2da      	uxtb	r2, r3
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	6a1b      	ldr	r3, [r3, #32]
 8007f80:	6978      	ldr	r0, [r7, #20]
 8007f82:	4798      	blx	r3
}
 8007f84:	bf00      	nop
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}
 8007f8c:	20000c8c 	.word	0x20000c8c

08007f90 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f98:	f107 0308 	add.w	r3, r7, #8
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f857 	bl	8008050 <prvGetNextExpireTime>
 8007fa2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 f803 	bl	8007fb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007fae:	f000 f8d5 	bl	800815c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fb2:	e7f1      	b.n	8007f98 <prvTimerTask+0x8>

08007fb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007fbe:	f7ff f923 	bl	8007208 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fc2:	f107 0308 	add.w	r3, r7, #8
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 f866 	bl	8008098 <prvSampleTimeNow>
 8007fcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d130      	bne.n	8008036 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <prvProcessTimerOrBlockTask+0x3c>
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d806      	bhi.n	8007ff0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007fe2:	f7ff f91f 	bl	8007224 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007fe6:	68f9      	ldr	r1, [r7, #12]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f7ff ff85 	bl	8007ef8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007fee:	e024      	b.n	800803a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d008      	beq.n	8008008 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007ff6:	4b13      	ldr	r3, [pc, #76]	; (8008044 <prvProcessTimerOrBlockTask+0x90>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <prvProcessTimerOrBlockTask+0x50>
 8008000:	2301      	movs	r3, #1
 8008002:	e000      	b.n	8008006 <prvProcessTimerOrBlockTask+0x52>
 8008004:	2300      	movs	r3, #0
 8008006:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008008:	4b0f      	ldr	r3, [pc, #60]	; (8008048 <prvProcessTimerOrBlockTask+0x94>)
 800800a:	6818      	ldr	r0, [r3, #0]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4619      	mov	r1, r3
 8008016:	f7fe fdaf 	bl	8006b78 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800801a:	f7ff f903 	bl	8007224 <xTaskResumeAll>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10a      	bne.n	800803a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008024:	4b09      	ldr	r3, [pc, #36]	; (800804c <prvProcessTimerOrBlockTask+0x98>)
 8008026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	f3bf 8f6f 	isb	sy
}
 8008034:	e001      	b.n	800803a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008036:	f7ff f8f5 	bl	8007224 <xTaskResumeAll>
}
 800803a:	bf00      	nop
 800803c:	3710      	adds	r7, #16
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20000c90 	.word	0x20000c90
 8008048:	20000c94 	.word	0x20000c94
 800804c:	e000ed04 	.word	0xe000ed04

08008050 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008058:	4b0e      	ldr	r3, [pc, #56]	; (8008094 <prvGetNextExpireTime+0x44>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d101      	bne.n	8008066 <prvGetNextExpireTime+0x16>
 8008062:	2201      	movs	r2, #1
 8008064:	e000      	b.n	8008068 <prvGetNextExpireTime+0x18>
 8008066:	2200      	movs	r2, #0
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d105      	bne.n	8008080 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008074:	4b07      	ldr	r3, [pc, #28]	; (8008094 <prvGetNextExpireTime+0x44>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	e001      	b.n	8008084 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008080:	2300      	movs	r3, #0
 8008082:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008084:	68fb      	ldr	r3, [r7, #12]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3714      	adds	r7, #20
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20000c8c 	.word	0x20000c8c

08008098 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080a0:	f7ff f95e 	bl	8007360 <xTaskGetTickCount>
 80080a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080a6:	4b0b      	ldr	r3, [pc, #44]	; (80080d4 <prvSampleTimeNow+0x3c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	68fa      	ldr	r2, [r7, #12]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d205      	bcs.n	80080bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080b0:	f000 f936 	bl	8008320 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	601a      	str	r2, [r3, #0]
 80080ba:	e002      	b.n	80080c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80080c2:	4a04      	ldr	r2, [pc, #16]	; (80080d4 <prvSampleTimeNow+0x3c>)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80080c8:	68fb      	ldr	r3, [r7, #12]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3710      	adds	r7, #16
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	20000c9c 	.word	0x20000c9c

080080d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	607a      	str	r2, [r7, #4]
 80080e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80080f6:	68ba      	ldr	r2, [r7, #8]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d812      	bhi.n	8008124 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	1ad2      	subs	r2, r2, r3
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	699b      	ldr	r3, [r3, #24]
 8008108:	429a      	cmp	r2, r3
 800810a:	d302      	bcc.n	8008112 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800810c:	2301      	movs	r3, #1
 800810e:	617b      	str	r3, [r7, #20]
 8008110:	e01b      	b.n	800814a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008112:	4b10      	ldr	r3, [pc, #64]	; (8008154 <prvInsertTimerInActiveList+0x7c>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	3304      	adds	r3, #4
 800811a:	4619      	mov	r1, r3
 800811c:	4610      	mov	r0, r2
 800811e:	f7fd fbfc 	bl	800591a <vListInsert>
 8008122:	e012      	b.n	800814a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d206      	bcs.n	800813a <prvInsertTimerInActiveList+0x62>
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d302      	bcc.n	800813a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008134:	2301      	movs	r3, #1
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	e007      	b.n	800814a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800813a:	4b07      	ldr	r3, [pc, #28]	; (8008158 <prvInsertTimerInActiveList+0x80>)
 800813c:	681a      	ldr	r2, [r3, #0]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	3304      	adds	r3, #4
 8008142:	4619      	mov	r1, r3
 8008144:	4610      	mov	r0, r2
 8008146:	f7fd fbe8 	bl	800591a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800814a:	697b      	ldr	r3, [r7, #20]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20000c90 	.word	0x20000c90
 8008158:	20000c8c 	.word	0x20000c8c

0800815c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b08e      	sub	sp, #56	; 0x38
 8008160:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008162:	e0ca      	b.n	80082fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2b00      	cmp	r3, #0
 8008168:	da18      	bge.n	800819c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800816a:	1d3b      	adds	r3, r7, #4
 800816c:	3304      	adds	r3, #4
 800816e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	61fb      	str	r3, [r7, #28]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800818c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008192:	6850      	ldr	r0, [r2, #4]
 8008194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008196:	6892      	ldr	r2, [r2, #8]
 8008198:	4611      	mov	r1, r2
 800819a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f2c0 80aa 	blt.w	80082f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	695b      	ldr	r3, [r3, #20]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d004      	beq.n	80081ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b2:	3304      	adds	r3, #4
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fd fbe9 	bl	800598c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081ba:	463b      	mov	r3, r7
 80081bc:	4618      	mov	r0, r3
 80081be:	f7ff ff6b 	bl	8008098 <prvSampleTimeNow>
 80081c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b09      	cmp	r3, #9
 80081c8:	f200 8097 	bhi.w	80082fa <prvProcessReceivedCommands+0x19e>
 80081cc:	a201      	add	r2, pc, #4	; (adr r2, 80081d4 <prvProcessReceivedCommands+0x78>)
 80081ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d2:	bf00      	nop
 80081d4:	080081fd 	.word	0x080081fd
 80081d8:	080081fd 	.word	0x080081fd
 80081dc:	080081fd 	.word	0x080081fd
 80081e0:	08008271 	.word	0x08008271
 80081e4:	08008285 	.word	0x08008285
 80081e8:	080082cf 	.word	0x080082cf
 80081ec:	080081fd 	.word	0x080081fd
 80081f0:	080081fd 	.word	0x080081fd
 80081f4:	08008271 	.word	0x08008271
 80081f8:	08008285 	.word	0x08008285
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008202:	f043 0301 	orr.w	r3, r3, #1
 8008206:	b2da      	uxtb	r2, r3
 8008208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800820a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	18d1      	adds	r1, r2, r3
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800821c:	f7ff ff5c 	bl	80080d8 <prvInsertTimerInActiveList>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d069      	beq.n	80082fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800822c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008234:	f003 0304 	and.w	r3, r3, #4
 8008238:	2b00      	cmp	r3, #0
 800823a:	d05e      	beq.n	80082fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	441a      	add	r2, r3
 8008244:	2300      	movs	r3, #0
 8008246:	9300      	str	r3, [sp, #0]
 8008248:	2300      	movs	r3, #0
 800824a:	2100      	movs	r1, #0
 800824c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800824e:	f7ff fe05 	bl	8007e5c <xTimerGenericCommand>
 8008252:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d14f      	bne.n	80082fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	61bb      	str	r3, [r7, #24]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008276:	f023 0301 	bic.w	r3, r3, #1
 800827a:	b2da      	uxtb	r2, r3
 800827c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800827e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008282:	e03a      	b.n	80082fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800828a:	f043 0301 	orr.w	r3, r3, #1
 800828e:	b2da      	uxtb	r2, r3
 8008290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800829c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	617b      	str	r3, [r7, #20]
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	18d1      	adds	r1, r2, r3
 80082c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082c8:	f7ff ff06 	bl	80080d8 <prvInsertTimerInActiveList>
					break;
 80082cc:	e015      	b.n	80082fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082d4:	f003 0302 	and.w	r3, r3, #2
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d103      	bne.n	80082e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80082dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80082de:	f000 fbdf 	bl	8008aa0 <vPortFree>
 80082e2:	e00a      	b.n	80082fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082ea:	f023 0301 	bic.w	r3, r3, #1
 80082ee:	b2da      	uxtb	r2, r3
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80082f6:	e000      	b.n	80082fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80082f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082fa:	4b08      	ldr	r3, [pc, #32]	; (800831c <prvProcessReceivedCommands+0x1c0>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	1d39      	adds	r1, r7, #4
 8008300:	2200      	movs	r2, #0
 8008302:	4618      	mov	r0, r3
 8008304:	f7fd fff0 	bl	80062e8 <xQueueReceive>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	f47f af2a 	bne.w	8008164 <prvProcessReceivedCommands+0x8>
	}
}
 8008310:	bf00      	nop
 8008312:	bf00      	nop
 8008314:	3730      	adds	r7, #48	; 0x30
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000c94 	.word	0x20000c94

08008320 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b088      	sub	sp, #32
 8008324:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008326:	e048      	b.n	80083ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008328:	4b2d      	ldr	r3, [pc, #180]	; (80083e0 <prvSwitchTimerLists+0xc0>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008332:	4b2b      	ldr	r3, [pc, #172]	; (80083e0 <prvSwitchTimerLists+0xc0>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68db      	ldr	r3, [r3, #12]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	3304      	adds	r3, #4
 8008340:	4618      	mov	r0, r3
 8008342:	f7fd fb23 	bl	800598c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008354:	f003 0304 	and.w	r3, r3, #4
 8008358:	2b00      	cmp	r3, #0
 800835a:	d02e      	beq.n	80083ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	699b      	ldr	r3, [r3, #24]
 8008360:	693a      	ldr	r2, [r7, #16]
 8008362:	4413      	add	r3, r2
 8008364:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008366:	68ba      	ldr	r2, [r7, #8]
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	429a      	cmp	r2, r3
 800836c:	d90e      	bls.n	800838c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800837a:	4b19      	ldr	r3, [pc, #100]	; (80083e0 <prvSwitchTimerLists+0xc0>)
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	3304      	adds	r3, #4
 8008382:	4619      	mov	r1, r3
 8008384:	4610      	mov	r0, r2
 8008386:	f7fd fac8 	bl	800591a <vListInsert>
 800838a:	e016      	b.n	80083ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800838c:	2300      	movs	r3, #0
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	2300      	movs	r3, #0
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	2100      	movs	r1, #0
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f7ff fd60 	bl	8007e5c <xTimerGenericCommand>
 800839c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10a      	bne.n	80083ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	603b      	str	r3, [r7, #0]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80083ba:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <prvSwitchTimerLists+0xc0>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1b1      	bne.n	8008328 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80083c4:	4b06      	ldr	r3, [pc, #24]	; (80083e0 <prvSwitchTimerLists+0xc0>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80083ca:	4b06      	ldr	r3, [pc, #24]	; (80083e4 <prvSwitchTimerLists+0xc4>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a04      	ldr	r2, [pc, #16]	; (80083e0 <prvSwitchTimerLists+0xc0>)
 80083d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80083d2:	4a04      	ldr	r2, [pc, #16]	; (80083e4 <prvSwitchTimerLists+0xc4>)
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	6013      	str	r3, [r2, #0]
}
 80083d8:	bf00      	nop
 80083da:	3718      	adds	r7, #24
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}
 80083e0:	20000c8c 	.word	0x20000c8c
 80083e4:	20000c90 	.word	0x20000c90

080083e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80083ee:	f000 f969 	bl	80086c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80083f2:	4b15      	ldr	r3, [pc, #84]	; (8008448 <prvCheckForValidListAndQueue+0x60>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d120      	bne.n	800843c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80083fa:	4814      	ldr	r0, [pc, #80]	; (800844c <prvCheckForValidListAndQueue+0x64>)
 80083fc:	f7fd fa3c 	bl	8005878 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008400:	4813      	ldr	r0, [pc, #76]	; (8008450 <prvCheckForValidListAndQueue+0x68>)
 8008402:	f7fd fa39 	bl	8005878 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008406:	4b13      	ldr	r3, [pc, #76]	; (8008454 <prvCheckForValidListAndQueue+0x6c>)
 8008408:	4a10      	ldr	r2, [pc, #64]	; (800844c <prvCheckForValidListAndQueue+0x64>)
 800840a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800840c:	4b12      	ldr	r3, [pc, #72]	; (8008458 <prvCheckForValidListAndQueue+0x70>)
 800840e:	4a10      	ldr	r2, [pc, #64]	; (8008450 <prvCheckForValidListAndQueue+0x68>)
 8008410:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008412:	2300      	movs	r3, #0
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	4b11      	ldr	r3, [pc, #68]	; (800845c <prvCheckForValidListAndQueue+0x74>)
 8008418:	4a11      	ldr	r2, [pc, #68]	; (8008460 <prvCheckForValidListAndQueue+0x78>)
 800841a:	2110      	movs	r1, #16
 800841c:	200a      	movs	r0, #10
 800841e:	f7fd fb47 	bl	8005ab0 <xQueueGenericCreateStatic>
 8008422:	4603      	mov	r3, r0
 8008424:	4a08      	ldr	r2, [pc, #32]	; (8008448 <prvCheckForValidListAndQueue+0x60>)
 8008426:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008428:	4b07      	ldr	r3, [pc, #28]	; (8008448 <prvCheckForValidListAndQueue+0x60>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <prvCheckForValidListAndQueue+0x60>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	490b      	ldr	r1, [pc, #44]	; (8008464 <prvCheckForValidListAndQueue+0x7c>)
 8008436:	4618      	mov	r0, r3
 8008438:	f7fe fb4a 	bl	8006ad0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800843c:	f000 f972 	bl	8008724 <vPortExitCritical>
}
 8008440:	bf00      	nop
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	20000c94 	.word	0x20000c94
 800844c:	20000c64 	.word	0x20000c64
 8008450:	20000c78 	.word	0x20000c78
 8008454:	20000c8c 	.word	0x20000c8c
 8008458:	20000c90 	.word	0x20000c90
 800845c:	20000d40 	.word	0x20000d40
 8008460:	20000ca0 	.word	0x20000ca0
 8008464:	08019624 	.word	0x08019624

08008468 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	3b04      	subs	r3, #4
 8008478:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008480:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3b04      	subs	r3, #4
 8008486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	f023 0201 	bic.w	r2, r3, #1
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3b04      	subs	r3, #4
 8008496:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008498:	4a0c      	ldr	r2, [pc, #48]	; (80084cc <pxPortInitialiseStack+0x64>)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3b14      	subs	r3, #20
 80084a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3b04      	subs	r3, #4
 80084ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f06f 0202 	mvn.w	r2, #2
 80084b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	3b20      	subs	r3, #32
 80084bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084be:	68fb      	ldr	r3, [r7, #12]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3714      	adds	r7, #20
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr
 80084cc:	080084d1 	.word	0x080084d1

080084d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084da:	4b12      	ldr	r3, [pc, #72]	; (8008524 <prvTaskExitError+0x54>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e2:	d00a      	beq.n	80084fa <prvTaskExitError+0x2a>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	60fb      	str	r3, [r7, #12]
}
 80084f6:	bf00      	nop
 80084f8:	e7fe      	b.n	80084f8 <prvTaskExitError+0x28>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	60bb      	str	r3, [r7, #8]
}
 800850c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800850e:	bf00      	nop
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0fc      	beq.n	8008510 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008516:	bf00      	nop
 8008518:	bf00      	nop
 800851a:	3714      	adds	r7, #20
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr
 8008524:	2000000c 	.word	0x2000000c
	...

08008530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008530:	4b07      	ldr	r3, [pc, #28]	; (8008550 <pxCurrentTCBConst2>)
 8008532:	6819      	ldr	r1, [r3, #0]
 8008534:	6808      	ldr	r0, [r1, #0]
 8008536:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800853a:	f380 8809 	msr	PSP, r0
 800853e:	f3bf 8f6f 	isb	sy
 8008542:	f04f 0000 	mov.w	r0, #0
 8008546:	f380 8811 	msr	BASEPRI, r0
 800854a:	4770      	bx	lr
 800854c:	f3af 8000 	nop.w

08008550 <pxCurrentTCBConst2>:
 8008550:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008554:	bf00      	nop
 8008556:	bf00      	nop

08008558 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008558:	4808      	ldr	r0, [pc, #32]	; (800857c <prvPortStartFirstTask+0x24>)
 800855a:	6800      	ldr	r0, [r0, #0]
 800855c:	6800      	ldr	r0, [r0, #0]
 800855e:	f380 8808 	msr	MSP, r0
 8008562:	f04f 0000 	mov.w	r0, #0
 8008566:	f380 8814 	msr	CONTROL, r0
 800856a:	b662      	cpsie	i
 800856c:	b661      	cpsie	f
 800856e:	f3bf 8f4f 	dsb	sy
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	df00      	svc	0
 8008578:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800857a:	bf00      	nop
 800857c:	e000ed08 	.word	0xe000ed08

08008580 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008586:	4b46      	ldr	r3, [pc, #280]	; (80086a0 <xPortStartScheduler+0x120>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a46      	ldr	r2, [pc, #280]	; (80086a4 <xPortStartScheduler+0x124>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d10a      	bne.n	80085a6 <xPortStartScheduler+0x26>
	__asm volatile
 8008590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008594:	f383 8811 	msr	BASEPRI, r3
 8008598:	f3bf 8f6f 	isb	sy
 800859c:	f3bf 8f4f 	dsb	sy
 80085a0:	613b      	str	r3, [r7, #16]
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085a6:	4b3e      	ldr	r3, [pc, #248]	; (80086a0 <xPortStartScheduler+0x120>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a3f      	ldr	r2, [pc, #252]	; (80086a8 <xPortStartScheduler+0x128>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d10a      	bne.n	80085c6 <xPortStartScheduler+0x46>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	60fb      	str	r3, [r7, #12]
}
 80085c2:	bf00      	nop
 80085c4:	e7fe      	b.n	80085c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085c6:	4b39      	ldr	r3, [pc, #228]	; (80086ac <xPortStartScheduler+0x12c>)
 80085c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	22ff      	movs	r2, #255	; 0xff
 80085d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	b2db      	uxtb	r3, r3
 80085de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	b2db      	uxtb	r3, r3
 80085e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80085e8:	b2da      	uxtb	r2, r3
 80085ea:	4b31      	ldr	r3, [pc, #196]	; (80086b0 <xPortStartScheduler+0x130>)
 80085ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80085ee:	4b31      	ldr	r3, [pc, #196]	; (80086b4 <xPortStartScheduler+0x134>)
 80085f0:	2207      	movs	r2, #7
 80085f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80085f4:	e009      	b.n	800860a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80085f6:	4b2f      	ldr	r3, [pc, #188]	; (80086b4 <xPortStartScheduler+0x134>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3b01      	subs	r3, #1
 80085fc:	4a2d      	ldr	r2, [pc, #180]	; (80086b4 <xPortStartScheduler+0x134>)
 80085fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	b2db      	uxtb	r3, r3
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	b2db      	uxtb	r3, r3
 8008608:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008612:	2b80      	cmp	r3, #128	; 0x80
 8008614:	d0ef      	beq.n	80085f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008616:	4b27      	ldr	r3, [pc, #156]	; (80086b4 <xPortStartScheduler+0x134>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f1c3 0307 	rsb	r3, r3, #7
 800861e:	2b04      	cmp	r3, #4
 8008620:	d00a      	beq.n	8008638 <xPortStartScheduler+0xb8>
	__asm volatile
 8008622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	60bb      	str	r3, [r7, #8]
}
 8008634:	bf00      	nop
 8008636:	e7fe      	b.n	8008636 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008638:	4b1e      	ldr	r3, [pc, #120]	; (80086b4 <xPortStartScheduler+0x134>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	021b      	lsls	r3, r3, #8
 800863e:	4a1d      	ldr	r2, [pc, #116]	; (80086b4 <xPortStartScheduler+0x134>)
 8008640:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008642:	4b1c      	ldr	r3, [pc, #112]	; (80086b4 <xPortStartScheduler+0x134>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800864a:	4a1a      	ldr	r2, [pc, #104]	; (80086b4 <xPortStartScheduler+0x134>)
 800864c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	b2da      	uxtb	r2, r3
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008656:	4b18      	ldr	r3, [pc, #96]	; (80086b8 <xPortStartScheduler+0x138>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a17      	ldr	r2, [pc, #92]	; (80086b8 <xPortStartScheduler+0x138>)
 800865c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008662:	4b15      	ldr	r3, [pc, #84]	; (80086b8 <xPortStartScheduler+0x138>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a14      	ldr	r2, [pc, #80]	; (80086b8 <xPortStartScheduler+0x138>)
 8008668:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800866c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800866e:	f000 f8dd 	bl	800882c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008672:	4b12      	ldr	r3, [pc, #72]	; (80086bc <xPortStartScheduler+0x13c>)
 8008674:	2200      	movs	r2, #0
 8008676:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008678:	f000 f8fc 	bl	8008874 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800867c:	4b10      	ldr	r3, [pc, #64]	; (80086c0 <xPortStartScheduler+0x140>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a0f      	ldr	r2, [pc, #60]	; (80086c0 <xPortStartScheduler+0x140>)
 8008682:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008686:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008688:	f7ff ff66 	bl	8008558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800868c:	f7fe ff44 	bl	8007518 <vTaskSwitchContext>
	prvTaskExitError();
 8008690:	f7ff ff1e 	bl	80084d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	e000ed00 	.word	0xe000ed00
 80086a4:	410fc271 	.word	0x410fc271
 80086a8:	410fc270 	.word	0x410fc270
 80086ac:	e000e400 	.word	0xe000e400
 80086b0:	20000d90 	.word	0x20000d90
 80086b4:	20000d94 	.word	0x20000d94
 80086b8:	e000ed20 	.word	0xe000ed20
 80086bc:	2000000c 	.word	0x2000000c
 80086c0:	e000ef34 	.word	0xe000ef34

080086c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
	__asm volatile
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	607b      	str	r3, [r7, #4]
}
 80086dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086de:	4b0f      	ldr	r3, [pc, #60]	; (800871c <vPortEnterCritical+0x58>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3301      	adds	r3, #1
 80086e4:	4a0d      	ldr	r2, [pc, #52]	; (800871c <vPortEnterCritical+0x58>)
 80086e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80086e8:	4b0c      	ldr	r3, [pc, #48]	; (800871c <vPortEnterCritical+0x58>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d10f      	bne.n	8008710 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <vPortEnterCritical+0x5c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <vPortEnterCritical+0x4c>
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	603b      	str	r3, [r7, #0]
}
 800870c:	bf00      	nop
 800870e:	e7fe      	b.n	800870e <vPortEnterCritical+0x4a>
	}
}
 8008710:	bf00      	nop
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	2000000c 	.word	0x2000000c
 8008720:	e000ed04 	.word	0xe000ed04

08008724 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800872a:	4b12      	ldr	r3, [pc, #72]	; (8008774 <vPortExitCritical+0x50>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10a      	bne.n	8008748 <vPortExitCritical+0x24>
	__asm volatile
 8008732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	607b      	str	r3, [r7, #4]
}
 8008744:	bf00      	nop
 8008746:	e7fe      	b.n	8008746 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008748:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <vPortExitCritical+0x50>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3b01      	subs	r3, #1
 800874e:	4a09      	ldr	r2, [pc, #36]	; (8008774 <vPortExitCritical+0x50>)
 8008750:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008752:	4b08      	ldr	r3, [pc, #32]	; (8008774 <vPortExitCritical+0x50>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <vPortExitCritical+0x42>
 800875a:	2300      	movs	r3, #0
 800875c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	f383 8811 	msr	BASEPRI, r3
}
 8008764:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	2000000c 	.word	0x2000000c
	...

08008780 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008780:	f3ef 8009 	mrs	r0, PSP
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	4b15      	ldr	r3, [pc, #84]	; (80087e0 <pxCurrentTCBConst>)
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	f01e 0f10 	tst.w	lr, #16
 8008790:	bf08      	it	eq
 8008792:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008796:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879a:	6010      	str	r0, [r2, #0]
 800879c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087a4:	f380 8811 	msr	BASEPRI, r0
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	f3bf 8f6f 	isb	sy
 80087b0:	f7fe feb2 	bl	8007518 <vTaskSwitchContext>
 80087b4:	f04f 0000 	mov.w	r0, #0
 80087b8:	f380 8811 	msr	BASEPRI, r0
 80087bc:	bc09      	pop	{r0, r3}
 80087be:	6819      	ldr	r1, [r3, #0]
 80087c0:	6808      	ldr	r0, [r1, #0]
 80087c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c6:	f01e 0f10 	tst.w	lr, #16
 80087ca:	bf08      	it	eq
 80087cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087d0:	f380 8809 	msr	PSP, r0
 80087d4:	f3bf 8f6f 	isb	sy
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	f3af 8000 	nop.w

080087e0 <pxCurrentTCBConst>:
 80087e0:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop

080087e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	607b      	str	r3, [r7, #4]
}
 8008800:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008802:	f7fe fdcf 	bl	80073a4 <xTaskIncrementTick>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800880c:	4b06      	ldr	r3, [pc, #24]	; (8008828 <xPortSysTickHandler+0x40>)
 800880e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	2300      	movs	r3, #0
 8008816:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	f383 8811 	msr	BASEPRI, r3
}
 800881e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008830:	4b0b      	ldr	r3, [pc, #44]	; (8008860 <vPortSetupTimerInterrupt+0x34>)
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008836:	4b0b      	ldr	r3, [pc, #44]	; (8008864 <vPortSetupTimerInterrupt+0x38>)
 8008838:	2200      	movs	r2, #0
 800883a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800883c:	4b0a      	ldr	r3, [pc, #40]	; (8008868 <vPortSetupTimerInterrupt+0x3c>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a0a      	ldr	r2, [pc, #40]	; (800886c <vPortSetupTimerInterrupt+0x40>)
 8008842:	fba2 2303 	umull	r2, r3, r2, r3
 8008846:	099b      	lsrs	r3, r3, #6
 8008848:	4a09      	ldr	r2, [pc, #36]	; (8008870 <vPortSetupTimerInterrupt+0x44>)
 800884a:	3b01      	subs	r3, #1
 800884c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800884e:	4b04      	ldr	r3, [pc, #16]	; (8008860 <vPortSetupTimerInterrupt+0x34>)
 8008850:	2207      	movs	r2, #7
 8008852:	601a      	str	r2, [r3, #0]
}
 8008854:	bf00      	nop
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	e000e010 	.word	0xe000e010
 8008864:	e000e018 	.word	0xe000e018
 8008868:	20000000 	.word	0x20000000
 800886c:	10624dd3 	.word	0x10624dd3
 8008870:	e000e014 	.word	0xe000e014

08008874 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008874:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008884 <vPortEnableVFP+0x10>
 8008878:	6801      	ldr	r1, [r0, #0]
 800887a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800887e:	6001      	str	r1, [r0, #0]
 8008880:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008882:	bf00      	nop
 8008884:	e000ed88 	.word	0xe000ed88

08008888 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008888:	b480      	push	{r7}
 800888a:	b085      	sub	sp, #20
 800888c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800888e:	f3ef 8305 	mrs	r3, IPSR
 8008892:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b0f      	cmp	r3, #15
 8008898:	d914      	bls.n	80088c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800889a:	4a17      	ldr	r2, [pc, #92]	; (80088f8 <vPortValidateInterruptPriority+0x70>)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	4413      	add	r3, r2
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088a4:	4b15      	ldr	r3, [pc, #84]	; (80088fc <vPortValidateInterruptPriority+0x74>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	7afa      	ldrb	r2, [r7, #11]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d20a      	bcs.n	80088c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	607b      	str	r3, [r7, #4]
}
 80088c0:	bf00      	nop
 80088c2:	e7fe      	b.n	80088c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088c4:	4b0e      	ldr	r3, [pc, #56]	; (8008900 <vPortValidateInterruptPriority+0x78>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088cc:	4b0d      	ldr	r3, [pc, #52]	; (8008904 <vPortValidateInterruptPriority+0x7c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d90a      	bls.n	80088ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	603b      	str	r3, [r7, #0]
}
 80088e6:	bf00      	nop
 80088e8:	e7fe      	b.n	80088e8 <vPortValidateInterruptPriority+0x60>
	}
 80088ea:	bf00      	nop
 80088ec:	3714      	adds	r7, #20
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	e000e3f0 	.word	0xe000e3f0
 80088fc:	20000d90 	.word	0x20000d90
 8008900:	e000ed0c 	.word	0xe000ed0c
 8008904:	20000d94 	.word	0x20000d94

08008908 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08a      	sub	sp, #40	; 0x28
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008910:	2300      	movs	r3, #0
 8008912:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008914:	f7fe fc78 	bl	8007208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008918:	4b5b      	ldr	r3, [pc, #364]	; (8008a88 <pvPortMalloc+0x180>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d101      	bne.n	8008924 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008920:	f000 f920 	bl	8008b64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008924:	4b59      	ldr	r3, [pc, #356]	; (8008a8c <pvPortMalloc+0x184>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4013      	ands	r3, r2
 800892c:	2b00      	cmp	r3, #0
 800892e:	f040 8093 	bne.w	8008a58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01d      	beq.n	8008974 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008938:	2208      	movs	r2, #8
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4413      	add	r3, r2
 800893e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	2b00      	cmp	r3, #0
 8008948:	d014      	beq.n	8008974 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f023 0307 	bic.w	r3, r3, #7
 8008950:	3308      	adds	r3, #8
 8008952:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f003 0307 	and.w	r3, r3, #7
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00a      	beq.n	8008974 <pvPortMalloc+0x6c>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	617b      	str	r3, [r7, #20]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d06e      	beq.n	8008a58 <pvPortMalloc+0x150>
 800897a:	4b45      	ldr	r3, [pc, #276]	; (8008a90 <pvPortMalloc+0x188>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	429a      	cmp	r2, r3
 8008982:	d869      	bhi.n	8008a58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008984:	4b43      	ldr	r3, [pc, #268]	; (8008a94 <pvPortMalloc+0x18c>)
 8008986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008988:	4b42      	ldr	r3, [pc, #264]	; (8008a94 <pvPortMalloc+0x18c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800898e:	e004      	b.n	800899a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	687a      	ldr	r2, [r7, #4]
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d903      	bls.n	80089ac <pvPortMalloc+0xa4>
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1f1      	bne.n	8008990 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80089ac:	4b36      	ldr	r3, [pc, #216]	; (8008a88 <pvPortMalloc+0x180>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d050      	beq.n	8008a58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80089b6:	6a3b      	ldr	r3, [r7, #32]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2208      	movs	r2, #8
 80089bc:	4413      	add	r3, r2
 80089be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	6a3b      	ldr	r3, [r7, #32]
 80089c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80089c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	1ad2      	subs	r2, r2, r3
 80089d0:	2308      	movs	r3, #8
 80089d2:	005b      	lsls	r3, r3, #1
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d91f      	bls.n	8008a18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80089d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4413      	add	r3, r2
 80089de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	f003 0307 	and.w	r3, r3, #7
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d00a      	beq.n	8008a00 <pvPortMalloc+0xf8>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	613b      	str	r3, [r7, #16]
}
 80089fc:	bf00      	nop
 80089fe:	e7fe      	b.n	80089fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	685a      	ldr	r2, [r3, #4]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	69bb      	ldr	r3, [r7, #24]
 8008a0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0e:	687a      	ldr	r2, [r7, #4]
 8008a10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008a12:	69b8      	ldr	r0, [r7, #24]
 8008a14:	f000 f908 	bl	8008c28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008a18:	4b1d      	ldr	r3, [pc, #116]	; (8008a90 <pvPortMalloc+0x188>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	4a1b      	ldr	r2, [pc, #108]	; (8008a90 <pvPortMalloc+0x188>)
 8008a24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008a26:	4b1a      	ldr	r3, [pc, #104]	; (8008a90 <pvPortMalloc+0x188>)
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	4b1b      	ldr	r3, [pc, #108]	; (8008a98 <pvPortMalloc+0x190>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	d203      	bcs.n	8008a3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008a32:	4b17      	ldr	r3, [pc, #92]	; (8008a90 <pvPortMalloc+0x188>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a18      	ldr	r2, [pc, #96]	; (8008a98 <pvPortMalloc+0x190>)
 8008a38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	685a      	ldr	r2, [r3, #4]
 8008a3e:	4b13      	ldr	r3, [pc, #76]	; (8008a8c <pvPortMalloc+0x184>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	431a      	orrs	r2, r3
 8008a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008a4e:	4b13      	ldr	r3, [pc, #76]	; (8008a9c <pvPortMalloc+0x194>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3301      	adds	r3, #1
 8008a54:	4a11      	ldr	r2, [pc, #68]	; (8008a9c <pvPortMalloc+0x194>)
 8008a56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008a58:	f7fe fbe4 	bl	8007224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d00a      	beq.n	8008a7c <pvPortMalloc+0x174>
	__asm volatile
 8008a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	60fb      	str	r3, [r7, #12]
}
 8008a78:	bf00      	nop
 8008a7a:	e7fe      	b.n	8008a7a <pvPortMalloc+0x172>
	return pvReturn;
 8008a7c:	69fb      	ldr	r3, [r7, #28]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3728      	adds	r7, #40	; 0x28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	200049a0 	.word	0x200049a0
 8008a8c:	200049b4 	.word	0x200049b4
 8008a90:	200049a4 	.word	0x200049a4
 8008a94:	20004998 	.word	0x20004998
 8008a98:	200049a8 	.word	0x200049a8
 8008a9c:	200049ac 	.word	0x200049ac

08008aa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d04d      	beq.n	8008b4e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ab2:	2308      	movs	r3, #8
 8008ab4:	425b      	negs	r3, r3
 8008ab6:	697a      	ldr	r2, [r7, #20]
 8008ab8:	4413      	add	r3, r2
 8008aba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	685a      	ldr	r2, [r3, #4]
 8008ac4:	4b24      	ldr	r3, [pc, #144]	; (8008b58 <vPortFree+0xb8>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4013      	ands	r3, r2
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10a      	bne.n	8008ae4 <vPortFree+0x44>
	__asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	60fb      	str	r3, [r7, #12]
}
 8008ae0:	bf00      	nop
 8008ae2:	e7fe      	b.n	8008ae2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d00a      	beq.n	8008b02 <vPortFree+0x62>
	__asm volatile
 8008aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af0:	f383 8811 	msr	BASEPRI, r3
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	60bb      	str	r3, [r7, #8]
}
 8008afe:	bf00      	nop
 8008b00:	e7fe      	b.n	8008b00 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	685a      	ldr	r2, [r3, #4]
 8008b06:	4b14      	ldr	r3, [pc, #80]	; (8008b58 <vPortFree+0xb8>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4013      	ands	r3, r2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d01e      	beq.n	8008b4e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d11a      	bne.n	8008b4e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	4b0e      	ldr	r3, [pc, #56]	; (8008b58 <vPortFree+0xb8>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008b28:	f7fe fb6e 	bl	8007208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <vPortFree+0xbc>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4413      	add	r3, r2
 8008b36:	4a09      	ldr	r2, [pc, #36]	; (8008b5c <vPortFree+0xbc>)
 8008b38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008b3a:	6938      	ldr	r0, [r7, #16]
 8008b3c:	f000 f874 	bl	8008c28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008b40:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <vPortFree+0xc0>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3301      	adds	r3, #1
 8008b46:	4a06      	ldr	r2, [pc, #24]	; (8008b60 <vPortFree+0xc0>)
 8008b48:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008b4a:	f7fe fb6b 	bl	8007224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008b4e:	bf00      	nop
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	200049b4 	.word	0x200049b4
 8008b5c:	200049a4 	.word	0x200049a4
 8008b60:	200049b0 	.word	0x200049b0

08008b64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008b64:	b480      	push	{r7}
 8008b66:	b085      	sub	sp, #20
 8008b68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008b6a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008b6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008b70:	4b27      	ldr	r3, [pc, #156]	; (8008c10 <prvHeapInit+0xac>)
 8008b72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f003 0307 	and.w	r3, r3, #7
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00c      	beq.n	8008b98 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3307      	adds	r3, #7
 8008b82:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0307 	bic.w	r3, r3, #7
 8008b8a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008b8c:	68ba      	ldr	r2, [r7, #8]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	4a1f      	ldr	r2, [pc, #124]	; (8008c10 <prvHeapInit+0xac>)
 8008b94:	4413      	add	r3, r2
 8008b96:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008b9c:	4a1d      	ldr	r2, [pc, #116]	; (8008c14 <prvHeapInit+0xb0>)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008ba2:	4b1c      	ldr	r3, [pc, #112]	; (8008c14 <prvHeapInit+0xb0>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68ba      	ldr	r2, [r7, #8]
 8008bac:	4413      	add	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1a9b      	subs	r3, r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	4a15      	ldr	r2, [pc, #84]	; (8008c18 <prvHeapInit+0xb4>)
 8008bc4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008bc6:	4b14      	ldr	r3, [pc, #80]	; (8008c18 <prvHeapInit+0xb4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008bce:	4b12      	ldr	r3, [pc, #72]	; (8008c18 <prvHeapInit+0xb4>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	68fa      	ldr	r2, [r7, #12]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008be4:	4b0c      	ldr	r3, [pc, #48]	; (8008c18 <prvHeapInit+0xb4>)
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4a0a      	ldr	r2, [pc, #40]	; (8008c1c <prvHeapInit+0xb8>)
 8008bf2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	4a09      	ldr	r2, [pc, #36]	; (8008c20 <prvHeapInit+0xbc>)
 8008bfa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008bfc:	4b09      	ldr	r3, [pc, #36]	; (8008c24 <prvHeapInit+0xc0>)
 8008bfe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008c02:	601a      	str	r2, [r3, #0]
}
 8008c04:	bf00      	nop
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	20000d98 	.word	0x20000d98
 8008c14:	20004998 	.word	0x20004998
 8008c18:	200049a0 	.word	0x200049a0
 8008c1c:	200049a8 	.word	0x200049a8
 8008c20:	200049a4 	.word	0x200049a4
 8008c24:	200049b4 	.word	0x200049b4

08008c28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b085      	sub	sp, #20
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008c30:	4b28      	ldr	r3, [pc, #160]	; (8008cd4 <prvInsertBlockIntoFreeList+0xac>)
 8008c32:	60fb      	str	r3, [r7, #12]
 8008c34:	e002      	b.n	8008c3c <prvInsertBlockIntoFreeList+0x14>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d8f7      	bhi.n	8008c36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	4413      	add	r3, r2
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d108      	bne.n	8008c6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	441a      	add	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	68ba      	ldr	r2, [r7, #8]
 8008c74:	441a      	add	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d118      	bne.n	8008cb0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b15      	ldr	r3, [pc, #84]	; (8008cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d00d      	beq.n	8008ca6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	685a      	ldr	r2, [r3, #4]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	441a      	add	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	601a      	str	r2, [r3, #0]
 8008ca4:	e008      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ca6:	4b0c      	ldr	r3, [pc, #48]	; (8008cd8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	601a      	str	r2, [r3, #0]
 8008cae:	e003      	b.n	8008cb8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d002      	beq.n	8008cc6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	687a      	ldr	r2, [r7, #4]
 8008cc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc6:	bf00      	nop
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr
 8008cd2:	bf00      	nop
 8008cd4:	20004998 	.word	0x20004998
 8008cd8:	200049a0 	.word	0x200049a0

08008cdc <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b084      	sub	sp, #16
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	330c      	adds	r3, #12
 8008cec:	461a      	mov	r2, r3
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f003 fd69 	bl	800c7c8 <tcpip_send_msg_wait_sem>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d103      	bne.n	8008d0a <netconn_apimsg+0x2e>
    return apimsg->err;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008d08:	e001      	b.n	8008d0e <netconn_apimsg+0x32>
  }
  return err;
 8008d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3710      	adds	r7, #16
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
	...

08008d18 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b08c      	sub	sp, #48	; 0x30
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	603a      	str	r2, [r7, #0]
 8008d22:	71fb      	strb	r3, [r7, #7]
 8008d24:	460b      	mov	r3, r1
 8008d26:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	6839      	ldr	r1, [r7, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 f9a3 	bl	800a078 <netconn_alloc>
 8008d32:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d054      	beq.n	8008de4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008d3a:	79bb      	ldrb	r3, [r7, #6]
 8008d3c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d40:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008d42:	f107 0308 	add.w	r3, r7, #8
 8008d46:	4619      	mov	r1, r3
 8008d48:	4829      	ldr	r0, [pc, #164]	; (8008df0 <netconn_new_with_proto_and_callback+0xd8>)
 8008d4a:	f7ff ffc7 	bl	8008cdc <netconn_apimsg>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008d54:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d043      	beq.n	8008de4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <netconn_new_with_proto_and_callback+0x58>
 8008d64:	4b23      	ldr	r3, [pc, #140]	; (8008df4 <netconn_new_with_proto_and_callback+0xdc>)
 8008d66:	22a3      	movs	r2, #163	; 0xa3
 8008d68:	4923      	ldr	r1, [pc, #140]	; (8008df8 <netconn_new_with_proto_and_callback+0xe0>)
 8008d6a:	4824      	ldr	r0, [pc, #144]	; (8008dfc <netconn_new_with_proto_and_callback+0xe4>)
 8008d6c:	f00f fc8e 	bl	801868c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d72:	3310      	adds	r3, #16
 8008d74:	4618      	mov	r0, r3
 8008d76:	f00f fa67 	bl	8018248 <sys_mbox_valid>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d105      	bne.n	8008d8c <netconn_new_with_proto_and_callback+0x74>
 8008d80:	4b1c      	ldr	r3, [pc, #112]	; (8008df4 <netconn_new_with_proto_and_callback+0xdc>)
 8008d82:	22a4      	movs	r2, #164	; 0xa4
 8008d84:	491e      	ldr	r1, [pc, #120]	; (8008e00 <netconn_new_with_proto_and_callback+0xe8>)
 8008d86:	481d      	ldr	r0, [pc, #116]	; (8008dfc <netconn_new_with_proto_and_callback+0xe4>)
 8008d88:	f00f fc80 	bl	801868c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8e:	3314      	adds	r3, #20
 8008d90:	4618      	mov	r0, r3
 8008d92:	f00f fa59 	bl	8018248 <sys_mbox_valid>
 8008d96:	4603      	mov	r3, r0
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d005      	beq.n	8008da8 <netconn_new_with_proto_and_callback+0x90>
 8008d9c:	4b15      	ldr	r3, [pc, #84]	; (8008df4 <netconn_new_with_proto_and_callback+0xdc>)
 8008d9e:	22a6      	movs	r2, #166	; 0xa6
 8008da0:	4918      	ldr	r1, [pc, #96]	; (8008e04 <netconn_new_with_proto_and_callback+0xec>)
 8008da2:	4816      	ldr	r0, [pc, #88]	; (8008dfc <netconn_new_with_proto_and_callback+0xe4>)
 8008da4:	f00f fc72 	bl	801868c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	330c      	adds	r3, #12
 8008dac:	4618      	mov	r0, r3
 8008dae:	f00f fad9 	bl	8018364 <sys_sem_valid>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d105      	bne.n	8008dc4 <netconn_new_with_proto_and_callback+0xac>
 8008db8:	4b0e      	ldr	r3, [pc, #56]	; (8008df4 <netconn_new_with_proto_and_callback+0xdc>)
 8008dba:	22a9      	movs	r2, #169	; 0xa9
 8008dbc:	4912      	ldr	r1, [pc, #72]	; (8008e08 <netconn_new_with_proto_and_callback+0xf0>)
 8008dbe:	480f      	ldr	r0, [pc, #60]	; (8008dfc <netconn_new_with_proto_and_callback+0xe4>)
 8008dc0:	f00f fc64 	bl	801868c <iprintf>
      sys_sem_free(&conn->op_completed);
 8008dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc6:	330c      	adds	r3, #12
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f00f fabe 	bl	801834a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd0:	3310      	adds	r3, #16
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f00f f9c4 	bl	8018160 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008dd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dda:	2007      	movs	r0, #7
 8008ddc:	f004 fd26 	bl	800d82c <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008de0:	2300      	movs	r3, #0
 8008de2:	e000      	b.n	8008de6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3730      	adds	r7, #48	; 0x30
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	0800a04d 	.word	0x0800a04d
 8008df4:	0801962c 	.word	0x0801962c
 8008df8:	08019660 	.word	0x08019660
 8008dfc:	08019684 	.word	0x08019684
 8008e00:	080196ac 	.word	0x080196ac
 8008e04:	080196c4 	.word	0x080196c4
 8008e08:	080196e8 	.word	0x080196e8

08008e0c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b08c      	sub	sp, #48	; 0x30
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e014      	b.n	8008e48 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008e22:	2329      	movs	r3, #41	; 0x29
 8008e24:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008e26:	f107 030c 	add.w	r3, r7, #12
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	4808      	ldr	r0, [pc, #32]	; (8008e50 <netconn_prepare_delete+0x44>)
 8008e2e:	f7ff ff55 	bl	8008cdc <netconn_apimsg>
 8008e32:	4603      	mov	r3, r0
 8008e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008e38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d002      	beq.n	8008e46 <netconn_prepare_delete+0x3a>
    return err;
 8008e40:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e44:	e000      	b.n	8008e48 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3730      	adds	r7, #48	; 0x30
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	0800a5b1 	.word	0x0800a5b1

08008e54 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d101      	bne.n	8008e66 <netconn_delete+0x12>
    return ERR_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	e00d      	b.n	8008e82 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7ff ffd0 	bl	8008e0c <netconn_prepare_delete>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d102      	bne.n	8008e7e <netconn_delete+0x2a>
    netconn_free(conn);
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f001 f96b 	bl	800a154 <netconn_free>
  }
  return err;
 8008e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08e      	sub	sp, #56	; 0x38
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d109      	bne.n	8008eb4 <netconn_getaddr+0x28>
 8008ea0:	4b1d      	ldr	r3, [pc, #116]	; (8008f18 <netconn_getaddr+0x8c>)
 8008ea2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008ea6:	491d      	ldr	r1, [pc, #116]	; (8008f1c <netconn_getaddr+0x90>)
 8008ea8:	481d      	ldr	r0, [pc, #116]	; (8008f20 <netconn_getaddr+0x94>)
 8008eaa:	f00f fbef 	bl	801868c <iprintf>
 8008eae:	f06f 030f 	mvn.w	r3, #15
 8008eb2:	e02d      	b.n	8008f10 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d109      	bne.n	8008ece <netconn_getaddr+0x42>
 8008eba:	4b17      	ldr	r3, [pc, #92]	; (8008f18 <netconn_getaddr+0x8c>)
 8008ebc:	f240 1213 	movw	r2, #275	; 0x113
 8008ec0:	4918      	ldr	r1, [pc, #96]	; (8008f24 <netconn_getaddr+0x98>)
 8008ec2:	4817      	ldr	r0, [pc, #92]	; (8008f20 <netconn_getaddr+0x94>)
 8008ec4:	f00f fbe2 	bl	801868c <iprintf>
 8008ec8:	f06f 030f 	mvn.w	r3, #15
 8008ecc:	e020      	b.n	8008f10 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d109      	bne.n	8008ee8 <netconn_getaddr+0x5c>
 8008ed4:	4b10      	ldr	r3, [pc, #64]	; (8008f18 <netconn_getaddr+0x8c>)
 8008ed6:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008eda:	4913      	ldr	r1, [pc, #76]	; (8008f28 <netconn_getaddr+0x9c>)
 8008edc:	4810      	ldr	r0, [pc, #64]	; (8008f20 <netconn_getaddr+0x94>)
 8008ede:	f00f fbd5 	bl	801868c <iprintf>
 8008ee2:	f06f 030f 	mvn.w	r3, #15
 8008ee6:	e013      	b.n	8008f10 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8008eec:	78fb      	ldrb	r3, [r7, #3]
 8008eee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8008efa:	f107 0314 	add.w	r3, r7, #20
 8008efe:	4619      	mov	r1, r3
 8008f00:	480a      	ldr	r0, [pc, #40]	; (8008f2c <netconn_getaddr+0xa0>)
 8008f02:	f7ff feeb 	bl	8008cdc <netconn_apimsg>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8008f0c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3738      	adds	r7, #56	; 0x38
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	0801962c 	.word	0x0801962c
 8008f1c:	08019704 	.word	0x08019704
 8008f20:	08019684 	.word	0x08019684
 8008f24:	08019724 	.word	0x08019724
 8008f28:	08019744 	.word	0x08019744
 8008f2c:	0800aed1 	.word	0x0800aed1

08008f30 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08e      	sub	sp, #56	; 0x38
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d109      	bne.n	8008f58 <netconn_bind+0x28>
 8008f44:	4b11      	ldr	r3, [pc, #68]	; (8008f8c <netconn_bind+0x5c>)
 8008f46:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008f4a:	4911      	ldr	r1, [pc, #68]	; (8008f90 <netconn_bind+0x60>)
 8008f4c:	4811      	ldr	r0, [pc, #68]	; (8008f94 <netconn_bind+0x64>)
 8008f4e:	f00f fb9d 	bl	801868c <iprintf>
 8008f52:	f06f 030f 	mvn.w	r3, #15
 8008f56:	e015      	b.n	8008f84 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008f5e:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <netconn_bind+0x68>)
 8008f60:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008f6a:	88fb      	ldrh	r3, [r7, #6]
 8008f6c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008f6e:	f107 0314 	add.w	r3, r7, #20
 8008f72:	4619      	mov	r1, r3
 8008f74:	4809      	ldr	r0, [pc, #36]	; (8008f9c <netconn_bind+0x6c>)
 8008f76:	f7ff feb1 	bl	8008cdc <netconn_apimsg>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008f80:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3738      	adds	r7, #56	; 0x38
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	0801962c 	.word	0x0801962c
 8008f90:	08019764 	.word	0x08019764
 8008f94:	08019684 	.word	0x08019684
 8008f98:	0801d19c 	.word	0x0801d19c
 8008f9c:	0800a779 	.word	0x0800a779

08008fa0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08c      	sub	sp, #48	; 0x30
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	460b      	mov	r3, r1
 8008faa:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d109      	bne.n	8008fc6 <netconn_listen_with_backlog+0x26>
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	; (8008fe8 <netconn_listen_with_backlog+0x48>)
 8008fb4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008fb8:	490c      	ldr	r1, [pc, #48]	; (8008fec <netconn_listen_with_backlog+0x4c>)
 8008fba:	480d      	ldr	r0, [pc, #52]	; (8008ff0 <netconn_listen_with_backlog+0x50>)
 8008fbc:	f00f fb66 	bl	801868c <iprintf>
 8008fc0:	f06f 030f 	mvn.w	r3, #15
 8008fc4:	e00c      	b.n	8008fe0 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008fca:	f107 030c 	add.w	r3, r7, #12
 8008fce:	4619      	mov	r1, r3
 8008fd0:	4808      	ldr	r0, [pc, #32]	; (8008ff4 <netconn_listen_with_backlog+0x54>)
 8008fd2:	f7ff fe83 	bl	8008cdc <netconn_apimsg>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008fdc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3730      	adds	r7, #48	; 0x30
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	0801962c 	.word	0x0801962c
 8008fec:	080197e4 	.word	0x080197e4
 8008ff0:	08019684 	.word	0x08019684
 8008ff4:	0800a7ed 	.word	0x0800a7ed

08008ff8 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b086      	sub	sp, #24
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d109      	bne.n	800901c <netconn_accept+0x24>
 8009008:	4b3d      	ldr	r3, [pc, #244]	; (8009100 <netconn_accept+0x108>)
 800900a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800900e:	493d      	ldr	r1, [pc, #244]	; (8009104 <netconn_accept+0x10c>)
 8009010:	483d      	ldr	r0, [pc, #244]	; (8009108 <netconn_accept+0x110>)
 8009012:	f00f fb3b 	bl	801868c <iprintf>
 8009016:	f06f 030f 	mvn.w	r3, #15
 800901a:	e06c      	b.n	80090f6 <netconn_accept+0xfe>
  *new_conn = NULL;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d109      	bne.n	800903c <netconn_accept+0x44>
 8009028:	4b35      	ldr	r3, [pc, #212]	; (8009100 <netconn_accept+0x108>)
 800902a:	f240 12e3 	movw	r2, #483	; 0x1e3
 800902e:	4937      	ldr	r1, [pc, #220]	; (800910c <netconn_accept+0x114>)
 8009030:	4835      	ldr	r0, [pc, #212]	; (8009108 <netconn_accept+0x110>)
 8009032:	f00f fb2b 	bl	801868c <iprintf>
 8009036:	f06f 030f 	mvn.w	r3, #15
 800903a:	e05c      	b.n	80090f6 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fb99 	bl	8009774 <netconn_err>
 8009042:	4603      	mov	r3, r0
 8009044:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8009046:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d002      	beq.n	8009054 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800904e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009052:	e050      	b.n	80090f6 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	3314      	adds	r3, #20
 8009058:	4618      	mov	r0, r3
 800905a:	f00f f8f5 	bl	8018248 <sys_mbox_valid>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d005      	beq.n	8009070 <netconn_accept+0x78>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	7f1b      	ldrb	r3, [r3, #28]
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	d002      	beq.n	8009076 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8009070:	f06f 030e 	mvn.w	r3, #14
 8009074:	e03f      	b.n	80090f6 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	7f1b      	ldrb	r3, [r3, #28]
 800907a:	f003 0302 	and.w	r3, r3, #2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00e      	beq.n	80090a0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	3314      	adds	r3, #20
 8009086:	f107 020c 	add.w	r2, r7, #12
 800908a:	4611      	mov	r1, r2
 800908c:	4618      	mov	r0, r3
 800908e:	f00f f8c4 	bl	801821a <sys_arch_mbox_tryfetch>
 8009092:	4603      	mov	r3, r0
 8009094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009098:	d10a      	bne.n	80090b0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 800909a:	f06f 0306 	mvn.w	r3, #6
 800909e:	e02a      	b.n	80090f6 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	3314      	adds	r3, #20
 80090a4:	f107 010c 	add.w	r1, r7, #12
 80090a8:	2200      	movs	r2, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f00f f884 	bl	80181b8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <netconn_accept+0xcc>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090bc:	2200      	movs	r2, #0
 80090be:	2101      	movs	r1, #1
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	f107 0213 	add.w	r2, r7, #19
 80090ca:	4611      	mov	r1, r2
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 fba3 	bl	8009818 <lwip_netconn_is_err_msg>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80090d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090dc:	e00b      	b.n	80090f6 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d102      	bne.n	80090ea <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 80090e4:	f06f 030e 	mvn.w	r3, #14
 80090e8:	e005      	b.n	80090f6 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	697a      	ldr	r2, [r7, #20]
 80090f2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80090f4:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	0801962c 	.word	0x0801962c
 8009104:	08019804 	.word	0x08019804
 8009108:	08019684 	.word	0x08019684
 800910c:	08019824 	.word	0x08019824

08009110 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b088      	sub	sp, #32
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	4613      	mov	r3, r2
 800911c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800911e:	2300      	movs	r3, #0
 8009120:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d109      	bne.n	800913c <netconn_recv_data+0x2c>
 8009128:	4b58      	ldr	r3, [pc, #352]	; (800928c <netconn_recv_data+0x17c>)
 800912a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800912e:	4958      	ldr	r1, [pc, #352]	; (8009290 <netconn_recv_data+0x180>)
 8009130:	4858      	ldr	r0, [pc, #352]	; (8009294 <netconn_recv_data+0x184>)
 8009132:	f00f faab 	bl	801868c <iprintf>
 8009136:	f06f 030f 	mvn.w	r3, #15
 800913a:	e0a2      	b.n	8009282 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	2200      	movs	r2, #0
 8009140:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d109      	bne.n	800915c <netconn_recv_data+0x4c>
 8009148:	4b50      	ldr	r3, [pc, #320]	; (800928c <netconn_recv_data+0x17c>)
 800914a:	f240 224a 	movw	r2, #586	; 0x24a
 800914e:	4952      	ldr	r1, [pc, #328]	; (8009298 <netconn_recv_data+0x188>)
 8009150:	4850      	ldr	r0, [pc, #320]	; (8009294 <netconn_recv_data+0x184>)
 8009152:	f00f fa9b 	bl	801868c <iprintf>
 8009156:	f06f 030f 	mvn.w	r3, #15
 800915a:	e092      	b.n	8009282 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	3310      	adds	r3, #16
 8009160:	4618      	mov	r0, r3
 8009162:	f00f f871 	bl	8018248 <sys_mbox_valid>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10e      	bne.n	800918a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fb01 	bl	8009774 <netconn_err>
 8009172:	4603      	mov	r3, r0
 8009174:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009176:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800917e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009182:	e07e      	b.n	8009282 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009184:	f06f 030a 	mvn.w	r3, #10
 8009188:	e07b      	b.n	8009282 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	7f1b      	ldrb	r3, [r3, #28]
 800918e:	f003 0302 	and.w	r3, r3, #2
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10f      	bne.n	80091b6 <netconn_recv_data+0xa6>
 8009196:	79fb      	ldrb	r3, [r7, #7]
 8009198:	f003 0304 	and.w	r3, r3, #4
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10a      	bne.n	80091b6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	7f1b      	ldrb	r3, [r3, #28]
 80091a4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d104      	bne.n	80091b6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d023      	beq.n	80091fe <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	3310      	adds	r3, #16
 80091ba:	f107 0218 	add.w	r2, r7, #24
 80091be:	4611      	mov	r1, r2
 80091c0:	4618      	mov	r0, r3
 80091c2:	f00f f82a 	bl	801821a <sys_arch_mbox_tryfetch>
 80091c6:	4603      	mov	r3, r0
 80091c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091cc:	d11f      	bne.n	800920e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 fad0 	bl	8009774 <netconn_err>
 80091d4:	4603      	mov	r3, r0
 80091d6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80091d8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80091e0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80091e4:	e04d      	b.n	8009282 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	7f1b      	ldrb	r3, [r3, #28]
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d002      	beq.n	80091f8 <netconn_recv_data+0xe8>
        return ERR_CONN;
 80091f2:	f06f 030a 	mvn.w	r3, #10
 80091f6:	e044      	b.n	8009282 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80091f8:	f06f 0306 	mvn.w	r3, #6
 80091fc:	e041      	b.n	8009282 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3310      	adds	r3, #16
 8009202:	f107 0118 	add.w	r1, r7, #24
 8009206:	2200      	movs	r2, #0
 8009208:	4618      	mov	r0, r3
 800920a:	f00e ffd5 	bl	80181b8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	781b      	ldrb	r3, [r3, #0]
 8009212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009216:	2b10      	cmp	r3, #16
 8009218:	d117      	bne.n	800924a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	f107 0217 	add.w	r2, r7, #23
 8009220:	4611      	mov	r1, r2
 8009222:	4618      	mov	r0, r3
 8009224:	f000 faf8 	bl	8009818 <lwip_netconn_is_err_msg>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d009      	beq.n	8009242 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800922e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009232:	f113 0f0f 	cmn.w	r3, #15
 8009236:	d101      	bne.n	800923c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	e022      	b.n	8009282 <netconn_recv_data+0x172>
      }
      return err;
 800923c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009240:	e01f      	b.n	8009282 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	891b      	ldrh	r3, [r3, #8]
 8009246:	83fb      	strh	r3, [r7, #30]
 8009248:	e00d      	b.n	8009266 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800924a:	69bb      	ldr	r3, [r7, #24]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d106      	bne.n	800925e <netconn_recv_data+0x14e>
 8009250:	4b0e      	ldr	r3, [pc, #56]	; (800928c <netconn_recv_data+0x17c>)
 8009252:	f240 2291 	movw	r2, #657	; 0x291
 8009256:	4911      	ldr	r1, [pc, #68]	; (800929c <netconn_recv_data+0x18c>)
 8009258:	480e      	ldr	r0, [pc, #56]	; (8009294 <netconn_recv_data+0x184>)
 800925a:	f00f fa17 	bl	801868c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	891b      	ldrh	r3, [r3, #8]
 8009264:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	2b00      	cmp	r3, #0
 800926c:	d005      	beq.n	800927a <netconn_recv_data+0x16a>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009272:	8bfa      	ldrh	r2, [r7, #30]
 8009274:	2101      	movs	r1, #1
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800927a:	69ba      	ldr	r2, [r7, #24]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3720      	adds	r7, #32
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	0801962c 	.word	0x0801962c
 8009290:	08019844 	.word	0x08019844
 8009294:	08019684 	.word	0x08019684
 8009298:	08019864 	.word	0x08019864
 800929c:	08019880 	.word	0x08019880

080092a0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d005      	beq.n	80092be <netconn_tcp_recvd_msg+0x1e>
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092ba:	2b10      	cmp	r3, #16
 80092bc:	d009      	beq.n	80092d2 <netconn_tcp_recvd_msg+0x32>
 80092be:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <netconn_tcp_recvd_msg+0x50>)
 80092c0:	f240 22a7 	movw	r2, #679	; 0x2a7
 80092c4:	490b      	ldr	r1, [pc, #44]	; (80092f4 <netconn_tcp_recvd_msg+0x54>)
 80092c6:	480c      	ldr	r0, [pc, #48]	; (80092f8 <netconn_tcp_recvd_msg+0x58>)
 80092c8:	f00f f9e0 	bl	801868c <iprintf>
 80092cc:	f06f 030f 	mvn.w	r3, #15
 80092d0:	e00a      	b.n	80092e8 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80092de:	6879      	ldr	r1, [r7, #4]
 80092e0:	4806      	ldr	r0, [pc, #24]	; (80092fc <netconn_tcp_recvd_msg+0x5c>)
 80092e2:	f7ff fcfb 	bl	8008cdc <netconn_apimsg>
 80092e6:	4603      	mov	r3, r0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}
 80092f0:	0801962c 	.word	0x0801962c
 80092f4:	0801988c 	.word	0x0801988c
 80092f8:	08019684 	.word	0x08019684
 80092fc:	0800a9b7 	.word	0x0800a9b7

08009300 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b08c      	sub	sp, #48	; 0x30
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <netconn_tcp_recvd+0x1c>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009318:	2b10      	cmp	r3, #16
 800931a:	d009      	beq.n	8009330 <netconn_tcp_recvd+0x30>
 800931c:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <netconn_tcp_recvd+0x50>)
 800931e:	f240 22b5 	movw	r2, #693	; 0x2b5
 8009322:	490c      	ldr	r1, [pc, #48]	; (8009354 <netconn_tcp_recvd+0x54>)
 8009324:	480c      	ldr	r0, [pc, #48]	; (8009358 <netconn_tcp_recvd+0x58>)
 8009326:	f00f f9b1 	bl	801868c <iprintf>
 800932a:	f06f 030f 	mvn.w	r3, #15
 800932e:	e00b      	b.n	8009348 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8009330:	f107 030c 	add.w	r3, r7, #12
 8009334:	461a      	mov	r2, r3
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff ffb1 	bl	80092a0 <netconn_tcp_recvd_msg>
 800933e:	4603      	mov	r3, r0
 8009340:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8009344:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009348:	4618      	mov	r0, r3
 800934a:	3730      	adds	r7, #48	; 0x30
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}
 8009350:	0801962c 	.word	0x0801962c
 8009354:	0801988c 	.word	0x0801988c
 8009358:	08019684 	.word	0x08019684

0800935c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b090      	sub	sp, #64	; 0x40
 8009360:	af00      	add	r7, sp, #0
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	4613      	mov	r3, r2
 8009368:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	3310      	adds	r3, #16
 800936e:	4618      	mov	r0, r3
 8009370:	f00e ff6a 	bl	8018248 <sys_mbox_valid>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d102      	bne.n	8009380 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800937a:	f06f 030a 	mvn.w	r3, #10
 800937e:	e06d      	b.n	800945c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	7f1b      	ldrb	r3, [r3, #28]
 8009384:	b25b      	sxtb	r3, r3
 8009386:	2b00      	cmp	r3, #0
 8009388:	da07      	bge.n	800939a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	7f1b      	ldrb	r3, [r3, #28]
 800938e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009392:	b2da      	uxtb	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009398:	e039      	b.n	800940e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800939a:	79fb      	ldrb	r3, [r7, #7]
 800939c:	461a      	mov	r2, r3
 800939e:	68b9      	ldr	r1, [r7, #8]
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f7ff feb5 	bl	8009110 <netconn_recv_data>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80093ac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d002      	beq.n	80093ba <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80093b4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80093b8:	e050      	b.n	800945c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	f003 0308 	and.w	r3, r3, #8
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d10e      	bne.n	80093e8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d002      	beq.n	80093d6 <netconn_recv_data_tcp+0x7a>
 80093d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d2:	891b      	ldrh	r3, [r3, #8]
 80093d4:	e000      	b.n	80093d8 <netconn_recv_data_tcp+0x7c>
 80093d6:	2301      	movs	r3, #1
 80093d8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80093da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093dc:	f107 0214 	add.w	r2, r7, #20
 80093e0:	4619      	mov	r1, r3
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f7ff ff5c 	bl	80092a0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80093e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d134      	bne.n	8009458 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80093ee:	79fb      	ldrb	r3, [r7, #7]
 80093f0:	f003 0310 	and.w	r3, r3, #16
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d009      	beq.n	800940c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	7f1b      	ldrb	r3, [r3, #28]
 80093fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009400:	b2da      	uxtb	r2, r3
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009406:	f06f 0306 	mvn.w	r3, #6
 800940a:	e027      	b.n	800945c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800940c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	2b00      	cmp	r3, #0
 8009414:	d005      	beq.n	8009422 <netconn_recv_data_tcp+0xc6>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	2200      	movs	r2, #0
 800941c:	2101      	movs	r1, #1
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10f      	bne.n	800944a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f000 f9a2 	bl	8009774 <netconn_err>
 8009430:	4603      	mov	r3, r0
 8009432:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009436:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800943a:	2b00      	cmp	r3, #0
 800943c:	d002      	beq.n	8009444 <netconn_recv_data_tcp+0xe8>
          return err;
 800943e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009442:	e00b      	b.n	800945c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009444:	f06f 030d 	mvn.w	r3, #13
 8009448:	e008      	b.n	800945c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800944a:	2101      	movs	r1, #1
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f000 f961 	bl	8009714 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009452:	f06f 030e 	mvn.w	r3, #14
 8009456:	e001      	b.n	800945c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009458:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800945c:	4618      	mov	r0, r3
 800945e:	3740      	adds	r7, #64	; 0x40
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b084      	sub	sp, #16
 8009468:	af00      	add	r7, sp, #0
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	4613      	mov	r3, r2
 8009470:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d005      	beq.n	8009484 <netconn_recv_tcp_pbuf_flags+0x20>
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009480:	2b10      	cmp	r3, #16
 8009482:	d009      	beq.n	8009498 <netconn_recv_tcp_pbuf_flags+0x34>
 8009484:	4b0a      	ldr	r3, [pc, #40]	; (80094b0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 8009486:	f240 3225 	movw	r2, #805	; 0x325
 800948a:	490a      	ldr	r1, [pc, #40]	; (80094b4 <netconn_recv_tcp_pbuf_flags+0x50>)
 800948c:	480a      	ldr	r0, [pc, #40]	; (80094b8 <netconn_recv_tcp_pbuf_flags+0x54>)
 800948e:	f00f f8fd 	bl	801868c <iprintf>
 8009492:	f06f 030f 	mvn.w	r3, #15
 8009496:	e006      	b.n	80094a6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	461a      	mov	r2, r3
 800949c:	68b9      	ldr	r1, [r7, #8]
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff ff5c 	bl	800935c <netconn_recv_data_tcp>
 80094a4:	4603      	mov	r3, r0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	0801962c 	.word	0x0801962c
 80094b4:	0801988c 	.word	0x0801988c
 80094b8:	08019684 	.word	0x08019684

080094bc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b084      	sub	sp, #16
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	60b9      	str	r1, [r7, #8]
 80094c6:	4613      	mov	r3, r2
 80094c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d005      	beq.n	80094dc <netconn_recv_udp_raw_netbuf_flags+0x20>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	781b      	ldrb	r3, [r3, #0]
 80094d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094d8:	2b10      	cmp	r3, #16
 80094da:	d109      	bne.n	80094f0 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80094dc:	4b0a      	ldr	r3, [pc, #40]	; (8009508 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80094de:	f44f 7253 	mov.w	r2, #844	; 0x34c
 80094e2:	490a      	ldr	r1, [pc, #40]	; (800950c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 80094e4:	480a      	ldr	r0, [pc, #40]	; (8009510 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 80094e6:	f00f f8d1 	bl	801868c <iprintf>
 80094ea:	f06f 030f 	mvn.w	r3, #15
 80094ee:	e006      	b.n	80094fe <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	461a      	mov	r2, r3
 80094f4:	68b9      	ldr	r1, [r7, #8]
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	f7ff fe0a 	bl	8009110 <netconn_recv_data>
 80094fc:	4603      	mov	r3, r0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop
 8009508:	0801962c 	.word	0x0801962c
 800950c:	080198b0 	.word	0x080198b0
 8009510:	08019684 	.word	0x08019684

08009514 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08c      	sub	sp, #48	; 0x30
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d109      	bne.n	8009538 <netconn_send+0x24>
 8009524:	4b0e      	ldr	r3, [pc, #56]	; (8009560 <netconn_send+0x4c>)
 8009526:	f240 32b2 	movw	r2, #946	; 0x3b2
 800952a:	490e      	ldr	r1, [pc, #56]	; (8009564 <netconn_send+0x50>)
 800952c:	480e      	ldr	r0, [pc, #56]	; (8009568 <netconn_send+0x54>)
 800952e:	f00f f8ad 	bl	801868c <iprintf>
 8009532:	f06f 030f 	mvn.w	r3, #15
 8009536:	e00e      	b.n	8009556 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009540:	f107 030c 	add.w	r3, r7, #12
 8009544:	4619      	mov	r1, r3
 8009546:	4809      	ldr	r0, [pc, #36]	; (800956c <netconn_send+0x58>)
 8009548:	f7ff fbc8 	bl	8008cdc <netconn_apimsg>
 800954c:	4603      	mov	r3, r0
 800954e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009552:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009556:	4618      	mov	r0, r3
 8009558:	3730      	adds	r7, #48	; 0x30
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	0801962c 	.word	0x0801962c
 8009564:	080198e8 	.word	0x080198e8
 8009568:	08019684 	.word	0x08019684
 800956c:	0800a91d 	.word	0x0800a91d

08009570 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b088      	sub	sp, #32
 8009574:	af02      	add	r7, sp, #8
 8009576:	60f8      	str	r0, [r7, #12]
 8009578:	60b9      	str	r1, [r7, #8]
 800957a:	607a      	str	r2, [r7, #4]
 800957c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009586:	78fa      	ldrb	r2, [r7, #3]
 8009588:	f107 0110 	add.w	r1, r7, #16
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	9300      	str	r3, [sp, #0]
 8009590:	4613      	mov	r3, r2
 8009592:	2201      	movs	r2, #1
 8009594:	68f8      	ldr	r0, [r7, #12]
 8009596:	f000 f805 	bl	80095a4 <netconn_write_vectors_partly>
 800959a:	4603      	mov	r3, r0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b092      	sub	sp, #72	; 0x48
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	60f8      	str	r0, [r7, #12]
 80095ac:	60b9      	str	r1, [r7, #8]
 80095ae:	4611      	mov	r1, r2
 80095b0:	461a      	mov	r2, r3
 80095b2:	460b      	mov	r3, r1
 80095b4:	80fb      	strh	r3, [r7, #6]
 80095b6:	4613      	mov	r3, r2
 80095b8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d109      	bne.n	80095d4 <netconn_write_vectors_partly+0x30>
 80095c0:	4b4e      	ldr	r3, [pc, #312]	; (80096fc <netconn_write_vectors_partly+0x158>)
 80095c2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80095c6:	494e      	ldr	r1, [pc, #312]	; (8009700 <netconn_write_vectors_partly+0x15c>)
 80095c8:	484e      	ldr	r0, [pc, #312]	; (8009704 <netconn_write_vectors_partly+0x160>)
 80095ca:	f00f f85f 	bl	801868c <iprintf>
 80095ce:	f06f 030f 	mvn.w	r3, #15
 80095d2:	e08e      	b.n	80096f2 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095dc:	2b10      	cmp	r3, #16
 80095de:	d009      	beq.n	80095f4 <netconn_write_vectors_partly+0x50>
 80095e0:	4b46      	ldr	r3, [pc, #280]	; (80096fc <netconn_write_vectors_partly+0x158>)
 80095e2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80095e6:	4948      	ldr	r1, [pc, #288]	; (8009708 <netconn_write_vectors_partly+0x164>)
 80095e8:	4846      	ldr	r0, [pc, #280]	; (8009704 <netconn_write_vectors_partly+0x160>)
 80095ea:	f00f f84f 	bl	801868c <iprintf>
 80095ee:	f06f 0305 	mvn.w	r3, #5
 80095f2:	e07e      	b.n	80096f2 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	7f1b      	ldrb	r3, [r3, #28]
 80095f8:	f003 0302 	and.w	r3, r3, #2
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d104      	bne.n	800960a <netconn_write_vectors_partly+0x66>
 8009600:	797b      	ldrb	r3, [r7, #5]
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <netconn_write_vectors_partly+0x6a>
 800960a:	2301      	movs	r3, #1
 800960c:	e000      	b.n	8009610 <netconn_write_vectors_partly+0x6c>
 800960e:	2300      	movs	r3, #0
 8009610:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009614:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009618:	2b00      	cmp	r3, #0
 800961a:	d005      	beq.n	8009628 <netconn_write_vectors_partly+0x84>
 800961c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800961e:	2b00      	cmp	r3, #0
 8009620:	d102      	bne.n	8009628 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009622:	f06f 0305 	mvn.w	r3, #5
 8009626:	e064      	b.n	80096f2 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009628:	2300      	movs	r3, #0
 800962a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800962c:	2300      	movs	r3, #0
 800962e:	643b      	str	r3, [r7, #64]	; 0x40
 8009630:	e015      	b.n	800965e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009632:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009634:	00db      	lsls	r3, r3, #3
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	4413      	add	r3, r2
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800963e:	4413      	add	r3, r2
 8009640:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009644:	00db      	lsls	r3, r3, #3
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	4413      	add	r3, r2
 800964a:	685b      	ldr	r3, [r3, #4]
 800964c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800964e:	429a      	cmp	r2, r3
 8009650:	d202      	bcs.n	8009658 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009652:	f06f 0305 	mvn.w	r3, #5
 8009656:	e04c      	b.n	80096f2 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800965a:	3301      	adds	r3, #1
 800965c:	643b      	str	r3, [r7, #64]	; 0x40
 800965e:	88fb      	ldrh	r3, [r7, #6]
 8009660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009662:	429a      	cmp	r2, r3
 8009664:	dbe5      	blt.n	8009632 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800966c:	2300      	movs	r3, #0
 800966e:	e040      	b.n	80096f2 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009672:	2b00      	cmp	r3, #0
 8009674:	da0a      	bge.n	800968c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009678:	2b00      	cmp	r3, #0
 800967a:	d102      	bne.n	8009682 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800967c:	f06f 0305 	mvn.w	r3, #5
 8009680:	e037      	b.n	80096f2 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009682:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009686:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009694:	88fb      	ldrh	r3, [r7, #6]
 8009696:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009698:	2300      	movs	r3, #0
 800969a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800969c:	797b      	ldrb	r3, [r7, #5]
 800969e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80096a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096a4:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80096a6:	2300      	movs	r3, #0
 80096a8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80096aa:	f107 0314 	add.w	r3, r7, #20
 80096ae:	4619      	mov	r1, r3
 80096b0:	4816      	ldr	r0, [pc, #88]	; (800970c <netconn_write_vectors_partly+0x168>)
 80096b2:	f7ff fb13 	bl	8008cdc <netconn_apimsg>
 80096b6:	4603      	mov	r3, r0
 80096b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80096bc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d114      	bne.n	80096ee <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80096c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d002      	beq.n	80096d0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80096ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096ce:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80096d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d10a      	bne.n	80096ee <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096dc:	429a      	cmp	r2, r3
 80096de:	d006      	beq.n	80096ee <netconn_write_vectors_partly+0x14a>
 80096e0:	4b06      	ldr	r3, [pc, #24]	; (80096fc <netconn_write_vectors_partly+0x158>)
 80096e2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80096e6:	490a      	ldr	r1, [pc, #40]	; (8009710 <netconn_write_vectors_partly+0x16c>)
 80096e8:	4806      	ldr	r0, [pc, #24]	; (8009704 <netconn_write_vectors_partly+0x160>)
 80096ea:	f00e ffcf 	bl	801868c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80096ee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3748      	adds	r7, #72	; 0x48
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	0801962c 	.word	0x0801962c
 8009700:	08019904 	.word	0x08019904
 8009704:	08019684 	.word	0x08019684
 8009708:	08019920 	.word	0x08019920
 800970c:	0800adb9 	.word	0x0800adb9
 8009710:	08019944 	.word	0x08019944

08009714 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b08c      	sub	sp, #48	; 0x30
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d109      	bne.n	800973a <netconn_close_shutdown+0x26>
 8009726:	4b0f      	ldr	r3, [pc, #60]	; (8009764 <netconn_close_shutdown+0x50>)
 8009728:	f240 4247 	movw	r2, #1095	; 0x447
 800972c:	490e      	ldr	r1, [pc, #56]	; (8009768 <netconn_close_shutdown+0x54>)
 800972e:	480f      	ldr	r0, [pc, #60]	; (800976c <netconn_close_shutdown+0x58>)
 8009730:	f00e ffac 	bl	801868c <iprintf>
 8009734:	f06f 030f 	mvn.w	r3, #15
 8009738:	e010      	b.n	800975c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800973e:	78fb      	ldrb	r3, [r7, #3]
 8009740:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009742:	2329      	movs	r3, #41	; 0x29
 8009744:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009746:	f107 030c 	add.w	r3, r7, #12
 800974a:	4619      	mov	r1, r3
 800974c:	4808      	ldr	r0, [pc, #32]	; (8009770 <netconn_close_shutdown+0x5c>)
 800974e:	f7ff fac5 	bl	8008cdc <netconn_apimsg>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009758:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800975c:	4618      	mov	r0, r3
 800975e:	3730      	adds	r7, #48	; 0x30
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}
 8009764:	0801962c 	.word	0x0801962c
 8009768:	08019968 	.word	0x08019968
 800976c:	08019684 	.word	0x08019684
 8009770:	0800afdd 	.word	0x0800afdd

08009774 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <netconn_err+0x12>
    return ERR_OK;
 8009782:	2300      	movs	r3, #0
 8009784:	e00d      	b.n	80097a2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009786:	f00e fe69 	bl	801845c <sys_arch_protect>
 800978a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	7a1b      	ldrb	r3, [r3, #8]
 8009790:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f00e fe6d 	bl	8018478 <sys_arch_unprotect>
  return err;
 800979e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80097b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097ba:	f113 0f0d 	cmn.w	r3, #13
 80097be:	d009      	beq.n	80097d4 <lwip_netconn_err_to_msg+0x28>
 80097c0:	f113 0f0d 	cmn.w	r3, #13
 80097c4:	dc0c      	bgt.n	80097e0 <lwip_netconn_err_to_msg+0x34>
 80097c6:	f113 0f0f 	cmn.w	r3, #15
 80097ca:	d007      	beq.n	80097dc <lwip_netconn_err_to_msg+0x30>
 80097cc:	f113 0f0e 	cmn.w	r3, #14
 80097d0:	d002      	beq.n	80097d8 <lwip_netconn_err_to_msg+0x2c>
 80097d2:	e005      	b.n	80097e0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80097d4:	4b0a      	ldr	r3, [pc, #40]	; (8009800 <lwip_netconn_err_to_msg+0x54>)
 80097d6:	e00e      	b.n	80097f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80097d8:	4b0a      	ldr	r3, [pc, #40]	; (8009804 <lwip_netconn_err_to_msg+0x58>)
 80097da:	e00c      	b.n	80097f6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <lwip_netconn_err_to_msg+0x5c>)
 80097de:	e00a      	b.n	80097f6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80097e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d005      	beq.n	80097f4 <lwip_netconn_err_to_msg+0x48>
 80097e8:	4b08      	ldr	r3, [pc, #32]	; (800980c <lwip_netconn_err_to_msg+0x60>)
 80097ea:	227d      	movs	r2, #125	; 0x7d
 80097ec:	4908      	ldr	r1, [pc, #32]	; (8009810 <lwip_netconn_err_to_msg+0x64>)
 80097ee:	4809      	ldr	r0, [pc, #36]	; (8009814 <lwip_netconn_err_to_msg+0x68>)
 80097f0:	f00e ff4c 	bl	801868c <iprintf>
      return NULL;
 80097f4:	2300      	movs	r3, #0
  }
}
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}
 80097fe:	bf00      	nop
 8009800:	0801d02c 	.word	0x0801d02c
 8009804:	0801d02d 	.word	0x0801d02d
 8009808:	0801d02e 	.word	0x0801d02e
 800980c:	080199cc 	.word	0x080199cc
 8009810:	08019a00 	.word	0x08019a00
 8009814:	08019a10 	.word	0x08019a10

08009818 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d105      	bne.n	8009834 <lwip_netconn_is_err_msg+0x1c>
 8009828:	4b12      	ldr	r3, [pc, #72]	; (8009874 <lwip_netconn_is_err_msg+0x5c>)
 800982a:	2285      	movs	r2, #133	; 0x85
 800982c:	4912      	ldr	r1, [pc, #72]	; (8009878 <lwip_netconn_is_err_msg+0x60>)
 800982e:	4813      	ldr	r0, [pc, #76]	; (800987c <lwip_netconn_is_err_msg+0x64>)
 8009830:	f00e ff2c 	bl	801868c <iprintf>

  if (msg == &netconn_aborted) {
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	4a12      	ldr	r2, [pc, #72]	; (8009880 <lwip_netconn_is_err_msg+0x68>)
 8009838:	4293      	cmp	r3, r2
 800983a:	d104      	bne.n	8009846 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	22f3      	movs	r2, #243	; 0xf3
 8009840:	701a      	strb	r2, [r3, #0]
    return 1;
 8009842:	2301      	movs	r3, #1
 8009844:	e012      	b.n	800986c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a0e      	ldr	r2, [pc, #56]	; (8009884 <lwip_netconn_is_err_msg+0x6c>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d104      	bne.n	8009858 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	22f2      	movs	r2, #242	; 0xf2
 8009852:	701a      	strb	r2, [r3, #0]
    return 1;
 8009854:	2301      	movs	r3, #1
 8009856:	e009      	b.n	800986c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a0b      	ldr	r2, [pc, #44]	; (8009888 <lwip_netconn_is_err_msg+0x70>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d104      	bne.n	800986a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	22f1      	movs	r2, #241	; 0xf1
 8009864:	701a      	strb	r2, [r3, #0]
    return 1;
 8009866:	2301      	movs	r3, #1
 8009868:	e000      	b.n	800986c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3708      	adds	r7, #8
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	080199cc 	.word	0x080199cc
 8009878:	08019a38 	.word	0x08019a38
 800987c:	08019a10 	.word	0x08019a10
 8009880:	0801d02c 	.word	0x0801d02c
 8009884:	0801d02d 	.word	0x0801d02d
 8009888:	0801d02e 	.word	0x0801d02e

0800988c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
 8009898:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d105      	bne.n	80098ac <recv_udp+0x20>
 80098a0:	4b34      	ldr	r3, [pc, #208]	; (8009974 <recv_udp+0xe8>)
 80098a2:	22e5      	movs	r2, #229	; 0xe5
 80098a4:	4934      	ldr	r1, [pc, #208]	; (8009978 <recv_udp+0xec>)
 80098a6:	4835      	ldr	r0, [pc, #212]	; (800997c <recv_udp+0xf0>)
 80098a8:	f00e fef0 	bl	801868c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d105      	bne.n	80098be <recv_udp+0x32>
 80098b2:	4b30      	ldr	r3, [pc, #192]	; (8009974 <recv_udp+0xe8>)
 80098b4:	22e6      	movs	r2, #230	; 0xe6
 80098b6:	4932      	ldr	r1, [pc, #200]	; (8009980 <recv_udp+0xf4>)
 80098b8:	4830      	ldr	r0, [pc, #192]	; (800997c <recv_udp+0xf0>)
 80098ba:	f00e fee7 	bl	801868c <iprintf>
  conn = (struct netconn *)arg;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80098c2:	69fb      	ldr	r3, [r7, #28]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d103      	bne.n	80098d0 <recv_udp+0x44>
    pbuf_free(p);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f004 fe85 	bl	800e5d8 <pbuf_free>
    return;
 80098ce:	e04d      	b.n	800996c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d005      	beq.n	80098e6 <recv_udp+0x5a>
 80098da:	4b26      	ldr	r3, [pc, #152]	; (8009974 <recv_udp+0xe8>)
 80098dc:	22ee      	movs	r2, #238	; 0xee
 80098de:	4929      	ldr	r1, [pc, #164]	; (8009984 <recv_udp+0xf8>)
 80098e0:	4826      	ldr	r0, [pc, #152]	; (800997c <recv_udp+0xf0>)
 80098e2:	f00e fed3 	bl	801868c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	3310      	adds	r3, #16
 80098ea:	4618      	mov	r0, r3
 80098ec:	f00e fcac 	bl	8018248 <sys_mbox_valid>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d103      	bne.n	80098fe <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f004 fe6e 	bl	800e5d8 <pbuf_free>
    return;
 80098fc:	e036      	b.n	800996c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80098fe:	2006      	movs	r0, #6
 8009900:	f003 ff42 	bl	800d788 <memp_malloc>
 8009904:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d103      	bne.n	8009914 <recv_udp+0x88>
    pbuf_free(p);
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f004 fe63 	bl	800e5d8 <pbuf_free>
    return;
 8009912:	e02b      	b.n	800996c <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009914:	69bb      	ldr	r3, [r7, #24]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d002      	beq.n	800992c <recv_udp+0xa0>
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	e000      	b.n	800992e <recv_udp+0xa2>
 800992c:	2300      	movs	r3, #0
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009936:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	891b      	ldrh	r3, [r3, #8]
 800993c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	3310      	adds	r3, #16
 8009942:	69b9      	ldr	r1, [r7, #24]
 8009944:	4618      	mov	r0, r3
 8009946:	f00e fc1d 	bl	8018184 <sys_mbox_trypost>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d003      	beq.n	8009958 <recv_udp+0xcc>
    netbuf_delete(buf);
 8009950:	69b8      	ldr	r0, [r7, #24]
 8009952:	f001 fbed 	bl	800b130 <netbuf_delete>
    return;
 8009956:	e009      	b.n	800996c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009958:	69fb      	ldr	r3, [r7, #28]
 800995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <recv_udp+0xe0>
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	8afa      	ldrh	r2, [r7, #22]
 8009966:	2100      	movs	r1, #0
 8009968:	69f8      	ldr	r0, [r7, #28]
 800996a:	4798      	blx	r3
  }
}
 800996c:	3720      	adds	r7, #32
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	080199cc 	.word	0x080199cc
 8009978:	08019a44 	.word	0x08019a44
 800997c:	08019a10 	.word	0x08019a10
 8009980:	08019a68 	.word	0x08019a68
 8009984:	08019a88 	.word	0x08019a88

08009988 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d106      	bne.n	80099aa <recv_tcp+0x22>
 800999c:	4b36      	ldr	r3, [pc, #216]	; (8009a78 <recv_tcp+0xf0>)
 800999e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80099a2:	4936      	ldr	r1, [pc, #216]	; (8009a7c <recv_tcp+0xf4>)
 80099a4:	4836      	ldr	r0, [pc, #216]	; (8009a80 <recv_tcp+0xf8>)
 80099a6:	f00e fe71 	bl	801868c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d106      	bne.n	80099be <recv_tcp+0x36>
 80099b0:	4b31      	ldr	r3, [pc, #196]	; (8009a78 <recv_tcp+0xf0>)
 80099b2:	f240 122d 	movw	r2, #301	; 0x12d
 80099b6:	4933      	ldr	r1, [pc, #204]	; (8009a84 <recv_tcp+0xfc>)
 80099b8:	4831      	ldr	r0, [pc, #196]	; (8009a80 <recv_tcp+0xf8>)
 80099ba:	f00e fe67 	bl	801868c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80099be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d006      	beq.n	80099d4 <recv_tcp+0x4c>
 80099c6:	4b2c      	ldr	r3, [pc, #176]	; (8009a78 <recv_tcp+0xf0>)
 80099c8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80099cc:	492e      	ldr	r1, [pc, #184]	; (8009a88 <recv_tcp+0x100>)
 80099ce:	482c      	ldr	r0, [pc, #176]	; (8009a80 <recv_tcp+0xf8>)
 80099d0:	f00e fe5c 	bl	801868c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d102      	bne.n	80099e4 <recv_tcp+0x5c>
    return ERR_VAL;
 80099de:	f06f 0305 	mvn.w	r3, #5
 80099e2:	e045      	b.n	8009a70 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d006      	beq.n	80099fc <recv_tcp+0x74>
 80099ee:	4b22      	ldr	r3, [pc, #136]	; (8009a78 <recv_tcp+0xf0>)
 80099f0:	f240 1235 	movw	r2, #309	; 0x135
 80099f4:	4925      	ldr	r1, [pc, #148]	; (8009a8c <recv_tcp+0x104>)
 80099f6:	4822      	ldr	r0, [pc, #136]	; (8009a80 <recv_tcp+0xf8>)
 80099f8:	f00e fe48 	bl	801868c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	3310      	adds	r3, #16
 8009a00:	4618      	mov	r0, r3
 8009a02:	f00e fc21 	bl	8018248 <sys_mbox_valid>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10d      	bne.n	8009a28 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d008      	beq.n	8009a24 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	891b      	ldrh	r3, [r3, #8]
 8009a16:	4619      	mov	r1, r3
 8009a18:	68b8      	ldr	r0, [r7, #8]
 8009a1a:	f005 feff 	bl	800f81c <tcp_recved>
      pbuf_free(p);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f004 fdda 	bl	800e5d8 <pbuf_free>
    }
    return ERR_OK;
 8009a24:	2300      	movs	r3, #0
 8009a26:	e023      	b.n	8009a70 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d005      	beq.n	8009a3a <recv_tcp+0xb2>
    msg = p;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	891b      	ldrh	r3, [r3, #8]
 8009a36:	83fb      	strh	r3, [r7, #30]
 8009a38:	e003      	b.n	8009a42 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009a3a:	4b15      	ldr	r3, [pc, #84]	; (8009a90 <recv_tcp+0x108>)
 8009a3c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009a3e:	2300      	movs	r3, #0
 8009a40:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	3310      	adds	r3, #16
 8009a46:	69b9      	ldr	r1, [r7, #24]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f00e fb9b 	bl	8018184 <sys_mbox_trypost>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d002      	beq.n	8009a5a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009a54:	f04f 33ff 	mov.w	r3, #4294967295
 8009a58:	e00a      	b.n	8009a70 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d005      	beq.n	8009a6e <recv_tcp+0xe6>
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	8bfa      	ldrh	r2, [r7, #30]
 8009a68:	2100      	movs	r1, #0
 8009a6a:	6978      	ldr	r0, [r7, #20]
 8009a6c:	4798      	blx	r3
  }

  return ERR_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3720      	adds	r7, #32
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	080199cc 	.word	0x080199cc
 8009a7c:	08019aa8 	.word	0x08019aa8
 8009a80:	08019a10 	.word	0x08019a10
 8009a84:	08019acc 	.word	0x08019acc
 8009a88:	08019aec 	.word	0x08019aec
 8009a8c:	08019b04 	.word	0x08019b04
 8009a90:	0801d02e 	.word	0x0801d02e

08009a94 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b084      	sub	sp, #16
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d106      	bne.n	8009ab6 <poll_tcp+0x22>
 8009aa8:	4b29      	ldr	r3, [pc, #164]	; (8009b50 <poll_tcp+0xbc>)
 8009aaa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009aae:	4929      	ldr	r1, [pc, #164]	; (8009b54 <poll_tcp+0xc0>)
 8009ab0:	4829      	ldr	r0, [pc, #164]	; (8009b58 <poll_tcp+0xc4>)
 8009ab2:	f00e fdeb 	bl	801868c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	785b      	ldrb	r3, [r3, #1]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d104      	bne.n	8009ac8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009abe:	2101      	movs	r1, #1
 8009ac0:	68f8      	ldr	r0, [r7, #12]
 8009ac2:	f000 ffad 	bl	800aa20 <lwip_netconn_do_writemore>
 8009ac6:	e016      	b.n	8009af6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	2b04      	cmp	r3, #4
 8009ace:	d112      	bne.n	8009af6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6a1b      	ldr	r3, [r3, #32]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00a      	beq.n	8009aee <poll_tcp+0x5a>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a1b      	ldr	r3, [r3, #32]
 8009adc:	7a5b      	ldrb	r3, [r3, #9]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d005      	beq.n	8009aee <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	7a5a      	ldrb	r2, [r3, #9]
 8009ae8:	3a01      	subs	r2, #1
 8009aea:	b2d2      	uxtb	r2, r2
 8009aec:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009aee:	2101      	movs	r1, #1
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 fbf7 	bl	800a2e4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	7f1b      	ldrb	r3, [r3, #28]
 8009afa:	f003 0310 	and.w	r3, r3, #16
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d021      	beq.n	8009b46 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d01d      	beq.n	8009b46 <poll_tcp+0xb2>
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b12:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009b16:	d316      	bcc.n	8009b46 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009b20:	2b04      	cmp	r3, #4
 8009b22:	d810      	bhi.n	8009b46 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	7f1b      	ldrb	r3, [r3, #28]
 8009b28:	f023 0310 	bic.w	r3, r3, #16
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <poll_tcp+0xb2>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b3e:	2200      	movs	r2, #0
 8009b40:	2102      	movs	r1, #2
 8009b42:	68f8      	ldr	r0, [r7, #12]
 8009b44:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009b46:	2300      	movs	r3, #0
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}
 8009b50:	080199cc 	.word	0x080199cc
 8009b54:	08019b24 	.word	0x08019b24
 8009b58:	08019a10 	.word	0x08019a10

08009b5c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b086      	sub	sp, #24
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	4613      	mov	r3, r2
 8009b68:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d106      	bne.n	8009b82 <sent_tcp+0x26>
 8009b74:	4b20      	ldr	r3, [pc, #128]	; (8009bf8 <sent_tcp+0x9c>)
 8009b76:	f240 1293 	movw	r2, #403	; 0x193
 8009b7a:	4920      	ldr	r1, [pc, #128]	; (8009bfc <sent_tcp+0xa0>)
 8009b7c:	4820      	ldr	r0, [pc, #128]	; (8009c00 <sent_tcp+0xa4>)
 8009b7e:	f00e fd85 	bl	801868c <iprintf>

  if (conn) {
 8009b82:	697b      	ldr	r3, [r7, #20]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d032      	beq.n	8009bee <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	785b      	ldrb	r3, [r3, #1]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d104      	bne.n	8009b9a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009b90:	2101      	movs	r1, #1
 8009b92:	6978      	ldr	r0, [r7, #20]
 8009b94:	f000 ff44 	bl	800aa20 <lwip_netconn_do_writemore>
 8009b98:	e007      	b.n	8009baa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	785b      	ldrb	r3, [r3, #1]
 8009b9e:	2b04      	cmp	r3, #4
 8009ba0:	d103      	bne.n	8009baa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009ba2:	2101      	movs	r1, #1
 8009ba4:	6978      	ldr	r0, [r7, #20]
 8009ba6:	f000 fb9d 	bl	800a2e4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d01d      	beq.n	8009bee <sent_tcp+0x92>
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009bba:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8009bbe:	d316      	bcc.n	8009bee <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d810      	bhi.n	8009bee <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	7f1b      	ldrb	r3, [r3, #28]
 8009bd0:	f023 0310 	bic.w	r3, r3, #16
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d005      	beq.n	8009bee <sent_tcp+0x92>
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009be6:	88fa      	ldrh	r2, [r7, #6]
 8009be8:	2102      	movs	r1, #2
 8009bea:	6978      	ldr	r0, [r7, #20]
 8009bec:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3718      	adds	r7, #24
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	080199cc 	.word	0x080199cc
 8009bfc:	08019b24 	.word	0x08019b24
 8009c00:	08019a10 	.word	0x08019a10

08009c04 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009c14:	69fb      	ldr	r3, [r7, #28]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d106      	bne.n	8009c28 <err_tcp+0x24>
 8009c1a:	4b5f      	ldr	r3, [pc, #380]	; (8009d98 <err_tcp+0x194>)
 8009c1c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009c20:	495e      	ldr	r1, [pc, #376]	; (8009d9c <err_tcp+0x198>)
 8009c22:	485f      	ldr	r0, [pc, #380]	; (8009da0 <err_tcp+0x19c>)
 8009c24:	f00e fd32 	bl	801868c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009c28:	f00e fc18 	bl	801845c <sys_arch_protect>
 8009c2c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	2200      	movs	r2, #0
 8009c32:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	78fa      	ldrb	r2, [r7, #3]
 8009c38:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009c3a:	69fb      	ldr	r3, [r7, #28]
 8009c3c:	7f1b      	ldrb	r3, [r3, #28]
 8009c3e:	f043 0301 	orr.w	r3, r3, #1
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	785b      	ldrb	r3, [r3, #1]
 8009c4c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	2200      	movs	r2, #0
 8009c52:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009c54:	69b8      	ldr	r0, [r7, #24]
 8009c56:	f00e fc0f 	bl	8018478 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d005      	beq.n	8009c6e <err_tcp+0x6a>
 8009c62:	69fb      	ldr	r3, [r7, #28]
 8009c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c66:	2200      	movs	r2, #0
 8009c68:	2104      	movs	r1, #4
 8009c6a:	69f8      	ldr	r0, [r7, #28]
 8009c6c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d005      	beq.n	8009c82 <err_tcp+0x7e>
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	69f8      	ldr	r0, [r7, #28]
 8009c80:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009c82:	69fb      	ldr	r3, [r7, #28]
 8009c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d005      	beq.n	8009c96 <err_tcp+0x92>
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c8e:	2200      	movs	r2, #0
 8009c90:	2102      	movs	r1, #2
 8009c92:	69f8      	ldr	r0, [r7, #28]
 8009c94:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009c96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff fd86 	bl	80097ac <lwip_netconn_err_to_msg>
 8009ca0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	3310      	adds	r3, #16
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f00e face 	bl	8018248 <sys_mbox_valid>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d005      	beq.n	8009cbe <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	3310      	adds	r3, #16
 8009cb6:	6939      	ldr	r1, [r7, #16]
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f00e fa63 	bl	8018184 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	3314      	adds	r3, #20
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f00e fac0 	bl	8018248 <sys_mbox_valid>
 8009cc8:	4603      	mov	r3, r0
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d005      	beq.n	8009cda <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	3314      	adds	r3, #20
 8009cd2:	6939      	ldr	r1, [r7, #16]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f00e fa55 	bl	8018184 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009cda:	7dfb      	ldrb	r3, [r7, #23]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d005      	beq.n	8009cec <err_tcp+0xe8>
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
 8009ce2:	2b04      	cmp	r3, #4
 8009ce4:	d002      	beq.n	8009cec <err_tcp+0xe8>
 8009ce6:	7dfb      	ldrb	r3, [r7, #23]
 8009ce8:	2b03      	cmp	r3, #3
 8009cea:	d143      	bne.n	8009d74 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009cec:	69fb      	ldr	r3, [r7, #28]
 8009cee:	7f1b      	ldrb	r3, [r3, #28]
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	bf14      	ite	ne
 8009cf8:	2301      	movne	r3, #1
 8009cfa:	2300      	moveq	r3, #0
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	7f1b      	ldrb	r3, [r3, #28]
 8009d04:	f023 0304 	bic.w	r3, r3, #4
 8009d08:	b2da      	uxtb	r2, r3
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d13b      	bne.n	8009d8c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009d14:	69fb      	ldr	r3, [r7, #28]
 8009d16:	6a1b      	ldr	r3, [r3, #32]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d106      	bne.n	8009d2a <err_tcp+0x126>
 8009d1c:	4b1e      	ldr	r3, [pc, #120]	; (8009d98 <err_tcp+0x194>)
 8009d1e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009d22:	4920      	ldr	r1, [pc, #128]	; (8009da4 <err_tcp+0x1a0>)
 8009d24:	481e      	ldr	r0, [pc, #120]	; (8009da0 <err_tcp+0x19c>)
 8009d26:	f00e fcb1 	bl	801868c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009d2a:	7dfb      	ldrb	r3, [r7, #23]
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	d104      	bne.n	8009d3a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	2200      	movs	r2, #0
 8009d36:	711a      	strb	r2, [r3, #4]
 8009d38:	e003      	b.n	8009d42 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	78fa      	ldrb	r2, [r7, #3]
 8009d40:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	6a1b      	ldr	r3, [r3, #32]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	330c      	adds	r3, #12
 8009d4a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009d4c:	68b8      	ldr	r0, [r7, #8]
 8009d4e:	f00e fb09 	bl	8018364 <sys_sem_valid>
 8009d52:	4603      	mov	r3, r0
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d106      	bne.n	8009d66 <err_tcp+0x162>
 8009d58:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <err_tcp+0x194>)
 8009d5a:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009d5e:	4912      	ldr	r1, [pc, #72]	; (8009da8 <err_tcp+0x1a4>)
 8009d60:	480f      	ldr	r0, [pc, #60]	; (8009da0 <err_tcp+0x19c>)
 8009d62:	f00e fc93 	bl	801868c <iprintf>
      conn->current_msg = NULL;
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009d6c:	68b8      	ldr	r0, [r7, #8]
 8009d6e:	f00e fadf 	bl	8018330 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009d72:	e00b      	b.n	8009d8c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	6a1b      	ldr	r3, [r3, #32]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d008      	beq.n	8009d8e <err_tcp+0x18a>
 8009d7c:	4b06      	ldr	r3, [pc, #24]	; (8009d98 <err_tcp+0x194>)
 8009d7e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009d82:	490a      	ldr	r1, [pc, #40]	; (8009dac <err_tcp+0x1a8>)
 8009d84:	4806      	ldr	r0, [pc, #24]	; (8009da0 <err_tcp+0x19c>)
 8009d86:	f00e fc81 	bl	801868c <iprintf>
  }
}
 8009d8a:	e000      	b.n	8009d8e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009d8c:	bf00      	nop
}
 8009d8e:	bf00      	nop
 8009d90:	3720      	adds	r7, #32
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	080199cc 	.word	0x080199cc
 8009d9c:	08019b24 	.word	0x08019b24
 8009da0:	08019a10 	.word	0x08019a10
 8009da4:	08019b34 	.word	0x08019b34
 8009da8:	08019b50 	.word	0x08019b50
 8009dac:	08019b6c 	.word	0x08019b6c

08009db0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	68f8      	ldr	r0, [r7, #12]
 8009dc2:	f006 fbf1 	bl	80105a8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009dc6:	490a      	ldr	r1, [pc, #40]	; (8009df0 <setup_tcp+0x40>)
 8009dc8:	68f8      	ldr	r0, [r7, #12]
 8009dca:	f006 fbff 	bl	80105cc <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009dce:	4909      	ldr	r1, [pc, #36]	; (8009df4 <setup_tcp+0x44>)
 8009dd0:	68f8      	ldr	r0, [r7, #12]
 8009dd2:	f006 fc1d 	bl	8010610 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	4907      	ldr	r1, [pc, #28]	; (8009df8 <setup_tcp+0x48>)
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	f006 fc74 	bl	80106c8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009de0:	4906      	ldr	r1, [pc, #24]	; (8009dfc <setup_tcp+0x4c>)
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f006 fc36 	bl	8010654 <tcp_err>
}
 8009de8:	bf00      	nop
 8009dea:	3710      	adds	r7, #16
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	08009989 	.word	0x08009989
 8009df4:	08009b5d 	.word	0x08009b5d
 8009df8:	08009a95 	.word	0x08009a95
 8009dfc:	08009c05 	.word	0x08009c05

08009e00 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009e00:	b590      	push	{r4, r7, lr}
 8009e02:	b089      	sub	sp, #36	; 0x24
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	60f8      	str	r0, [r7, #12]
 8009e08:	60b9      	str	r1, [r7, #8]
 8009e0a:	4613      	mov	r3, r2
 8009e0c:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009e12:	69fb      	ldr	r3, [r7, #28]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d102      	bne.n	8009e1e <accept_function+0x1e>
    return ERR_VAL;
 8009e18:	f06f 0305 	mvn.w	r3, #5
 8009e1c:	e0a1      	b.n	8009f62 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	3314      	adds	r3, #20
 8009e22:	4618      	mov	r0, r3
 8009e24:	f00e fa10 	bl	8018248 <sys_mbox_valid>
 8009e28:	4603      	mov	r3, r0
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d102      	bne.n	8009e34 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009e2e:	f06f 0305 	mvn.w	r3, #5
 8009e32:	e096      	b.n	8009f62 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d11b      	bne.n	8009e72 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	f103 0414 	add.w	r4, r3, #20
 8009e40:	f06f 000c 	mvn.w	r0, #12
 8009e44:	f7ff fcb2 	bl	80097ac <lwip_netconn_err_to_msg>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	4620      	mov	r0, r4
 8009e4e:	f00e f999 	bl	8018184 <sys_mbox_trypost>
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d109      	bne.n	8009e6c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009e58:	69fb      	ldr	r3, [r7, #28]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d005      	beq.n	8009e6c <accept_function+0x6c>
 8009e60:	69fb      	ldr	r3, [r7, #28]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	2200      	movs	r2, #0
 8009e66:	2100      	movs	r1, #0
 8009e68:	69f8      	ldr	r0, [r7, #28]
 8009e6a:	4798      	blx	r3
    }
    return ERR_VAL;
 8009e6c:	f06f 0305 	mvn.w	r3, #5
 8009e70:	e077      	b.n	8009f62 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d006      	beq.n	8009e88 <accept_function+0x88>
 8009e7a:	4b3c      	ldr	r3, [pc, #240]	; (8009f6c <accept_function+0x16c>)
 8009e7c:	f240 222a 	movw	r2, #554	; 0x22a
 8009e80:	493b      	ldr	r1, [pc, #236]	; (8009f70 <accept_function+0x170>)
 8009e82:	483c      	ldr	r0, [pc, #240]	; (8009f74 <accept_function+0x174>)
 8009e84:	f00e fc02 	bl	801868c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	781a      	ldrb	r2, [r3, #0]
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	4619      	mov	r1, r3
 8009e92:	4610      	mov	r0, r2
 8009e94:	f000 f8f0 	bl	800a078 <netconn_alloc>
 8009e98:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d11b      	bne.n	8009ed8 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	f103 0414 	add.w	r4, r3, #20
 8009ea6:	f06f 000c 	mvn.w	r0, #12
 8009eaa:	f7ff fc7f 	bl	80097ac <lwip_netconn_err_to_msg>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	4620      	mov	r0, r4
 8009eb4:	f00e f966 	bl	8018184 <sys_mbox_trypost>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d109      	bne.n	8009ed2 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d005      	beq.n	8009ed2 <accept_function+0xd2>
 8009ec6:	69fb      	ldr	r3, [r7, #28]
 8009ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2100      	movs	r1, #0
 8009ece:	69f8      	ldr	r0, [r7, #28]
 8009ed0:	4798      	blx	r3
    }
    return ERR_MEM;
 8009ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed6:	e044      	b.n	8009f62 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009ede:	69b8      	ldr	r0, [r7, #24]
 8009ee0:	f7ff ff66 	bl	8009db0 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	3314      	adds	r3, #20
 8009ee8:	69b9      	ldr	r1, [r7, #24]
 8009eea:	4618      	mov	r0, r3
 8009eec:	f00e f94a 	bl	8018184 <sys_mbox_trypost>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d02a      	beq.n	8009f4c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009efc:	2100      	movs	r1, #0
 8009efe:	6978      	ldr	r0, [r7, #20]
 8009f00:	f006 fb52 	bl	80105a8 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009f04:	2100      	movs	r1, #0
 8009f06:	6978      	ldr	r0, [r7, #20]
 8009f08:	f006 fb60 	bl	80105cc <tcp_recv>
    tcp_sent(pcb, NULL);
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	6978      	ldr	r0, [r7, #20]
 8009f10:	f006 fb7e 	bl	8010610 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009f14:	2200      	movs	r2, #0
 8009f16:	2100      	movs	r1, #0
 8009f18:	6978      	ldr	r0, [r7, #20]
 8009f1a:	f006 fbd5 	bl	80106c8 <tcp_poll>
    tcp_err(pcb, NULL);
 8009f1e:	2100      	movs	r1, #0
 8009f20:	6978      	ldr	r0, [r7, #20]
 8009f22:	f006 fb97 	bl	8010654 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009f2c:	69bb      	ldr	r3, [r7, #24]
 8009f2e:	3310      	adds	r3, #16
 8009f30:	4618      	mov	r0, r3
 8009f32:	f00e f915 	bl	8018160 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009f36:	69bb      	ldr	r3, [r7, #24]
 8009f38:	3310      	adds	r3, #16
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f00e f995 	bl	801826a <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009f40:	69b8      	ldr	r0, [r7, #24]
 8009f42:	f000 f907 	bl	800a154 <netconn_free>
    return ERR_MEM;
 8009f46:	f04f 33ff 	mov.w	r3, #4294967295
 8009f4a:	e00a      	b.n	8009f62 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d005      	beq.n	8009f60 <accept_function+0x160>
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	2200      	movs	r2, #0
 8009f5a:	2100      	movs	r1, #0
 8009f5c:	69f8      	ldr	r0, [r7, #28]
 8009f5e:	4798      	blx	r3
  }

  return ERR_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3724      	adds	r7, #36	; 0x24
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd90      	pop	{r4, r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	080199cc 	.word	0x080199cc
 8009f70:	08019b88 	.word	0x08019b88
 8009f74:	08019a10 	.word	0x08019a10

08009f78 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009f78:	b590      	push	{r4, r7, lr}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009f80:	2300      	movs	r3, #0
 8009f82:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d006      	beq.n	8009f9c <pcb_new+0x24>
 8009f8e:	4b2b      	ldr	r3, [pc, #172]	; (800a03c <pcb_new+0xc4>)
 8009f90:	f240 2265 	movw	r2, #613	; 0x265
 8009f94:	492a      	ldr	r1, [pc, #168]	; (800a040 <pcb_new+0xc8>)
 8009f96:	482b      	ldr	r0, [pc, #172]	; (800a044 <pcb_new+0xcc>)
 8009f98:	f00e fb78 	bl	801868c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fa6:	2b10      	cmp	r3, #16
 8009fa8:	d022      	beq.n	8009ff0 <pcb_new+0x78>
 8009faa:	2b20      	cmp	r3, #32
 8009fac:	d133      	bne.n	800a016 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681c      	ldr	r4, [r3, #0]
 8009fb2:	7bfb      	ldrb	r3, [r7, #15]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f00b fdbc 	bl	8015b32 <udp_new_ip_type>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d02a      	beq.n	800a01e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	781b      	ldrb	r3, [r3, #0]
 8009fce:	2b22      	cmp	r3, #34	; 0x22
 8009fd0:	d104      	bne.n	8009fdc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6858      	ldr	r0, [r3, #4]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	4917      	ldr	r1, [pc, #92]	; (800a048 <pcb_new+0xd0>)
 8009fea:	f00b fd29 	bl	8015a40 <udp_recv>
      }
      break;
 8009fee:	e016      	b.n	800a01e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681c      	ldr	r4, [r3, #0]
 8009ff4:	7bfb      	ldrb	r3, [r7, #15]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f006 fac8 	bl	801058c <tcp_new_ip_type>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00b      	beq.n	800a022 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fece 	bl	8009db0 <setup_tcp>
      }
      break;
 800a014:	e005      	b.n	800a022 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	22fa      	movs	r2, #250	; 0xfa
 800a01a:	711a      	strb	r2, [r3, #4]
      return;
 800a01c:	e00a      	b.n	800a034 <pcb_new+0xbc>
      break;
 800a01e:	bf00      	nop
 800a020:	e000      	b.n	800a024 <pcb_new+0xac>
      break;
 800a022:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d102      	bne.n	800a034 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	22ff      	movs	r2, #255	; 0xff
 800a032:	711a      	strb	r2, [r3, #4]
  }
}
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	bd90      	pop	{r4, r7, pc}
 800a03a:	bf00      	nop
 800a03c:	080199cc 	.word	0x080199cc
 800a040:	08019bb0 	.word	0x08019bb0
 800a044:	08019a10 	.word	0x08019a10
 800a048:	0800988d 	.word	0x0800988d

0800a04c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2200      	movs	r2, #0
 800a05c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d102      	bne.n	800a06e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7ff ff85 	bl	8009f78 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a06e:	bf00      	nop
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	4603      	mov	r3, r0
 800a080:	6039      	str	r1, [r7, #0]
 800a082:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a088:	2007      	movs	r0, #7
 800a08a:	f003 fb7d 	bl	800d788 <memp_malloc>
 800a08e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <netconn_alloc+0x22>
    return NULL;
 800a096:	2300      	movs	r3, #0
 800a098:	e052      	b.n	800a140 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	79fa      	ldrb	r2, [r7, #7]
 800a0a4:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a0ac:	79fb      	ldrb	r3, [r7, #7]
 800a0ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0b2:	2b10      	cmp	r3, #16
 800a0b4:	d004      	beq.n	800a0c0 <netconn_alloc+0x48>
 800a0b6:	2b20      	cmp	r3, #32
 800a0b8:	d105      	bne.n	800a0c6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a0ba:	2306      	movs	r3, #6
 800a0bc:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a0be:	e00a      	b.n	800a0d6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a0c0:	2306      	movs	r3, #6
 800a0c2:	617b      	str	r3, [r7, #20]
      break;
 800a0c4:	e007      	b.n	800a0d6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a0c6:	4b20      	ldr	r3, [pc, #128]	; (800a148 <netconn_alloc+0xd0>)
 800a0c8:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a0cc:	491f      	ldr	r1, [pc, #124]	; (800a14c <netconn_alloc+0xd4>)
 800a0ce:	4820      	ldr	r0, [pc, #128]	; (800a150 <netconn_alloc+0xd8>)
 800a0d0:	f00e fadc 	bl	801868c <iprintf>
      goto free_and_return;
 800a0d4:	e02f      	b.n	800a136 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	3310      	adds	r3, #16
 800a0da:	6979      	ldr	r1, [r7, #20]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f00e f825 	bl	801812c <sys_mbox_new>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d125      	bne.n	800a134 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	330c      	adds	r3, #12
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	f00e f8c8 	bl	8018284 <sys_sem_new>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d005      	beq.n	800a106 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	3310      	adds	r3, #16
 800a0fe:	4618      	mov	r0, r3
 800a100:	f00e f82e 	bl	8018160 <sys_mbox_free>
    goto free_and_return;
 800a104:	e017      	b.n	800a136 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	3314      	adds	r3, #20
 800a10a:	4618      	mov	r0, r3
 800a10c:	f00e f8ad 	bl	801826a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f04f 32ff 	mov.w	r2, #4294967295
 800a11c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2200      	movs	r2, #0
 800a128:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	7cfa      	ldrb	r2, [r7, #19]
 800a12e:	771a      	strb	r2, [r3, #28]
  return conn;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	e005      	b.n	800a140 <netconn_alloc+0xc8>
    goto free_and_return;
 800a134:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a136:	68f9      	ldr	r1, [r7, #12]
 800a138:	2007      	movs	r0, #7
 800a13a:	f003 fb77 	bl	800d82c <memp_free>
  return NULL;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	080199cc 	.word	0x080199cc
 800a14c:	08019bd0 	.word	0x08019bd0
 800a150:	08019a10 	.word	0x08019a10

0800a154 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b082      	sub	sp, #8
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d006      	beq.n	800a172 <netconn_free+0x1e>
 800a164:	4b1b      	ldr	r3, [pc, #108]	; (800a1d4 <netconn_free+0x80>)
 800a166:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a16a:	491b      	ldr	r1, [pc, #108]	; (800a1d8 <netconn_free+0x84>)
 800a16c:	481b      	ldr	r0, [pc, #108]	; (800a1dc <netconn_free+0x88>)
 800a16e:	f00e fa8d 	bl	801868c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	3310      	adds	r3, #16
 800a176:	4618      	mov	r0, r3
 800a178:	f00e f866 	bl	8018248 <sys_mbox_valid>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d006      	beq.n	800a190 <netconn_free+0x3c>
 800a182:	4b14      	ldr	r3, [pc, #80]	; (800a1d4 <netconn_free+0x80>)
 800a184:	f240 3223 	movw	r2, #803	; 0x323
 800a188:	4915      	ldr	r1, [pc, #84]	; (800a1e0 <netconn_free+0x8c>)
 800a18a:	4814      	ldr	r0, [pc, #80]	; (800a1dc <netconn_free+0x88>)
 800a18c:	f00e fa7e 	bl	801868c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	3314      	adds	r3, #20
 800a194:	4618      	mov	r0, r3
 800a196:	f00e f857 	bl	8018248 <sys_mbox_valid>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d006      	beq.n	800a1ae <netconn_free+0x5a>
 800a1a0:	4b0c      	ldr	r3, [pc, #48]	; (800a1d4 <netconn_free+0x80>)
 800a1a2:	f240 3226 	movw	r2, #806	; 0x326
 800a1a6:	490f      	ldr	r1, [pc, #60]	; (800a1e4 <netconn_free+0x90>)
 800a1a8:	480c      	ldr	r0, [pc, #48]	; (800a1dc <netconn_free+0x88>)
 800a1aa:	f00e fa6f 	bl	801868c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	330c      	adds	r3, #12
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f00e f8c9 	bl	801834a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	330c      	adds	r3, #12
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f00e f8e2 	bl	8018386 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	2007      	movs	r0, #7
 800a1c6:	f003 fb31 	bl	800d82c <memp_free>
}
 800a1ca:	bf00      	nop
 800a1cc:	3708      	adds	r7, #8
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	080199cc 	.word	0x080199cc
 800a1d8:	08019bf8 	.word	0x08019bf8
 800a1dc:	08019a10 	.word	0x08019a10
 800a1e0:	08019c28 	.word	0x08019c28
 800a1e4:	08019c64 	.word	0x08019c64

0800a1e8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3310      	adds	r3, #16
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f00e f827 	bl	8018248 <sys_mbox_valid>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d02f      	beq.n	800a260 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a200:	e018      	b.n	800a234 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a20a:	2b10      	cmp	r3, #16
 800a20c:	d10e      	bne.n	800a22c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a20e:	693b      	ldr	r3, [r7, #16]
 800a210:	f107 020f 	add.w	r2, r7, #15
 800a214:	4611      	mov	r1, r2
 800a216:	4618      	mov	r0, r3
 800a218:	f7ff fafe 	bl	8009818 <lwip_netconn_is_err_msg>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d108      	bne.n	800a234 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	4618      	mov	r0, r3
 800a226:	f004 f9d7 	bl	800e5d8 <pbuf_free>
 800a22a:	e003      	b.n	800a234 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	4618      	mov	r0, r3
 800a230:	f000 ff7e 	bl	800b130 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3310      	adds	r3, #16
 800a238:	f107 0210 	add.w	r2, r7, #16
 800a23c:	4611      	mov	r1, r2
 800a23e:	4618      	mov	r0, r3
 800a240:	f00d ffeb 	bl	801821a <sys_arch_mbox_tryfetch>
 800a244:	4603      	mov	r3, r0
 800a246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24a:	d1da      	bne.n	800a202 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3310      	adds	r3, #16
 800a250:	4618      	mov	r0, r3
 800a252:	f00d ff85 	bl	8018160 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3310      	adds	r3, #16
 800a25a:	4618      	mov	r0, r3
 800a25c:	f00e f805 	bl	801826a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	3314      	adds	r3, #20
 800a264:	4618      	mov	r0, r3
 800a266:	f00d ffef 	bl	8018248 <sys_mbox_valid>
 800a26a:	4603      	mov	r3, r0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d034      	beq.n	800a2da <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a270:	e01d      	b.n	800a2ae <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	f107 020e 	add.w	r2, r7, #14
 800a278:	4611      	mov	r1, r2
 800a27a:	4618      	mov	r0, r3
 800a27c:	f7ff facc 	bl	8009818 <lwip_netconn_is_err_msg>
 800a280:	4603      	mov	r3, r0
 800a282:	2b00      	cmp	r3, #0
 800a284:	d113      	bne.n	800a2ae <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a28a:	6978      	ldr	r0, [r7, #20]
 800a28c:	f7ff ffac 	bl	800a1e8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d007      	beq.n	800a2a8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f005 f8f5 	bl	800f48c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a2a8:	6978      	ldr	r0, [r7, #20]
 800a2aa:	f7ff ff53 	bl	800a154 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	3314      	adds	r3, #20
 800a2b2:	f107 0210 	add.w	r2, r7, #16
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f00d ffae 	bl	801821a <sys_arch_mbox_tryfetch>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2c4:	d1d5      	bne.n	800a272 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3314      	adds	r3, #20
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f00d ff48 	bl	8018160 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3314      	adds	r3, #20
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f00d ffc8 	bl	801826a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a2da:	bf00      	nop
 800a2dc:	3718      	adds	r7, #24
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
	...

0800a2e4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b086      	sub	sp, #24
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d106      	bne.n	800a308 <lwip_netconn_do_close_internal+0x24>
 800a2fa:	4ba1      	ldr	r3, [pc, #644]	; (800a580 <lwip_netconn_do_close_internal+0x29c>)
 800a2fc:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a300:	49a0      	ldr	r1, [pc, #640]	; (800a584 <lwip_netconn_do_close_internal+0x2a0>)
 800a302:	48a1      	ldr	r0, [pc, #644]	; (800a588 <lwip_netconn_do_close_internal+0x2a4>)
 800a304:	f00e f9c2 	bl	801868c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a310:	2b10      	cmp	r3, #16
 800a312:	d006      	beq.n	800a322 <lwip_netconn_do_close_internal+0x3e>
 800a314:	4b9a      	ldr	r3, [pc, #616]	; (800a580 <lwip_netconn_do_close_internal+0x29c>)
 800a316:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a31a:	499c      	ldr	r1, [pc, #624]	; (800a58c <lwip_netconn_do_close_internal+0x2a8>)
 800a31c:	489a      	ldr	r0, [pc, #616]	; (800a588 <lwip_netconn_do_close_internal+0x2a4>)
 800a31e:	f00e f9b5 	bl	801868c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	785b      	ldrb	r3, [r3, #1]
 800a326:	2b04      	cmp	r3, #4
 800a328:	d006      	beq.n	800a338 <lwip_netconn_do_close_internal+0x54>
 800a32a:	4b95      	ldr	r3, [pc, #596]	; (800a580 <lwip_netconn_do_close_internal+0x29c>)
 800a32c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a330:	4997      	ldr	r1, [pc, #604]	; (800a590 <lwip_netconn_do_close_internal+0x2ac>)
 800a332:	4895      	ldr	r0, [pc, #596]	; (800a588 <lwip_netconn_do_close_internal+0x2a4>)
 800a334:	f00e f9aa 	bl	801868c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d106      	bne.n	800a34e <lwip_netconn_do_close_internal+0x6a>
 800a340:	4b8f      	ldr	r3, [pc, #572]	; (800a580 <lwip_netconn_do_close_internal+0x29c>)
 800a342:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a346:	4993      	ldr	r1, [pc, #588]	; (800a594 <lwip_netconn_do_close_internal+0x2b0>)
 800a348:	488f      	ldr	r0, [pc, #572]	; (800a588 <lwip_netconn_do_close_internal+0x2a4>)
 800a34a:	f00e f99f 	bl	801868c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d106      	bne.n	800a364 <lwip_netconn_do_close_internal+0x80>
 800a356:	4b8a      	ldr	r3, [pc, #552]	; (800a580 <lwip_netconn_do_close_internal+0x29c>)
 800a358:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a35c:	498e      	ldr	r1, [pc, #568]	; (800a598 <lwip_netconn_do_close_internal+0x2b4>)
 800a35e:	488a      	ldr	r0, [pc, #552]	; (800a588 <lwip_netconn_do_close_internal+0x2a4>)
 800a360:	f00e f994 	bl	801868c <iprintf>

  tpcb = conn->pcb.tcp;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	7a1b      	ldrb	r3, [r3, #8]
 800a370:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a372:	7bfb      	ldrb	r3, [r7, #15]
 800a374:	f003 0301 	and.w	r3, r3, #1
 800a378:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
 800a37c:	f003 0302 	and.w	r3, r3, #2
 800a380:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a382:	7bfb      	ldrb	r3, [r7, #15]
 800a384:	2b03      	cmp	r3, #3
 800a386:	d102      	bne.n	800a38e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a388:	2301      	movs	r3, #1
 800a38a:	75bb      	strb	r3, [r7, #22]
 800a38c:	e01f      	b.n	800a3ce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a38e:	7bbb      	ldrb	r3, [r7, #14]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00e      	beq.n	800a3b2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a394:	693b      	ldr	r3, [r7, #16]
 800a396:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a398:	2b05      	cmp	r3, #5
 800a39a:	d007      	beq.n	800a3ac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a3a0:	2b06      	cmp	r3, #6
 800a3a2:	d003      	beq.n	800a3ac <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a3a8:	2b08      	cmp	r3, #8
 800a3aa:	d102      	bne.n	800a3b2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	75bb      	strb	r3, [r7, #22]
 800a3b0:	e00d      	b.n	800a3ce <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a3b2:	7b7b      	ldrb	r3, [r7, #13]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d008      	beq.n	800a3ca <lwip_netconn_do_close_internal+0xe6>
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	8b5b      	ldrh	r3, [r3, #26]
 800a3bc:	f003 0310 	and.w	r3, r3, #16
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	75bb      	strb	r3, [r7, #22]
 800a3c8:	e001      	b.n	800a3ce <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a3ce:	7dbb      	ldrb	r3, [r7, #22]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d003      	beq.n	800a3dc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	6938      	ldr	r0, [r7, #16]
 800a3d8:	f006 f8e6 	bl	80105a8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	7d1b      	ldrb	r3, [r3, #20]
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d104      	bne.n	800a3ee <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a3e4:	2100      	movs	r1, #0
 800a3e6:	6938      	ldr	r0, [r7, #16]
 800a3e8:	f006 f956 	bl	8010698 <tcp_accept>
 800a3ec:	e01d      	b.n	800a42a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a3ee:	7bbb      	ldrb	r3, [r7, #14]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d007      	beq.n	800a404 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	6938      	ldr	r0, [r7, #16]
 800a3f8:	f006 f8e8 	bl	80105cc <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	6938      	ldr	r0, [r7, #16]
 800a400:	f006 f94a 	bl	8010698 <tcp_accept>
    }
    if (shut_tx) {
 800a404:	7b7b      	ldrb	r3, [r7, #13]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d003      	beq.n	800a412 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a40a:	2100      	movs	r1, #0
 800a40c:	6938      	ldr	r0, [r7, #16]
 800a40e:	f006 f8ff 	bl	8010610 <tcp_sent>
    }
    if (shut_close) {
 800a412:	7dbb      	ldrb	r3, [r7, #22]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d008      	beq.n	800a42a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a418:	2200      	movs	r2, #0
 800a41a:	2100      	movs	r1, #0
 800a41c:	6938      	ldr	r0, [r7, #16]
 800a41e:	f006 f953 	bl	80106c8 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a422:	2100      	movs	r1, #0
 800a424:	6938      	ldr	r0, [r7, #16]
 800a426:	f006 f915 	bl	8010654 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a42a:	7dbb      	ldrb	r3, [r7, #22]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d005      	beq.n	800a43c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a430:	6938      	ldr	r0, [r7, #16]
 800a432:	f004 fee5 	bl	800f200 <tcp_close>
 800a436:	4603      	mov	r3, r0
 800a438:	75fb      	strb	r3, [r7, #23]
 800a43a:	e007      	b.n	800a44c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	7b7a      	ldrb	r2, [r7, #13]
 800a440:	4619      	mov	r1, r3
 800a442:	6938      	ldr	r0, [r7, #16]
 800a444:	f004 ff08 	bl	800f258 <tcp_shutdown>
 800a448:	4603      	mov	r3, r0
 800a44a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a44c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d102      	bne.n	800a45a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a454:	2301      	movs	r3, #1
 800a456:	757b      	strb	r3, [r7, #21]
 800a458:	e016      	b.n	800a488 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a45a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a45e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a462:	d10f      	bne.n	800a484 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	7a5b      	ldrb	r3, [r3, #9]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10c      	bne.n	800a488 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a46e:	2301      	movs	r3, #1
 800a470:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a472:	7dbb      	ldrb	r3, [r7, #22]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d007      	beq.n	800a488 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a478:	6938      	ldr	r0, [r7, #16]
 800a47a:	f005 f807 	bl	800f48c <tcp_abort>
          err = ERR_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	75fb      	strb	r3, [r7, #23]
 800a482:	e001      	b.n	800a488 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a484:	2301      	movs	r3, #1
 800a486:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a488:	7d7b      	ldrb	r3, [r7, #21]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d044      	beq.n	800a518 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	330c      	adds	r3, #12
 800a496:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	7dfa      	ldrb	r2, [r7, #23]
 800a49e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a4ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d129      	bne.n	800a508 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a4b4:	7dbb      	ldrb	r3, [r7, #22]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00c      	beq.n	800a4d4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <lwip_netconn_do_close_internal+0x1f0>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	2104      	movs	r1, #4
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3
      }
      if (shut_rx) {
 800a4d4:	7bbb      	ldrb	r3, [r7, #14]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d009      	beq.n	800a4ee <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d005      	beq.n	800a4ee <lwip_netconn_do_close_internal+0x20a>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	2100      	movs	r1, #0
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	4798      	blx	r3
      }
      if (shut_tx) {
 800a4ee:	7b7b      	ldrb	r3, [r7, #13]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d009      	beq.n	800a508 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d005      	beq.n	800a508 <lwip_netconn_do_close_internal+0x224>
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	2200      	movs	r2, #0
 800a502:	2102      	movs	r1, #2
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a508:	78fb      	ldrb	r3, [r7, #3]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a50e:	68b8      	ldr	r0, [r7, #8]
 800a510:	f00d ff0e 	bl	8018330 <sys_sem_signal>
    }
    return ERR_OK;
 800a514:	2300      	movs	r3, #0
 800a516:	e02e      	b.n	800a576 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a518:	7d7b      	ldrb	r3, [r7, #21]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d11e      	bne.n	800a55c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	7d1b      	ldrb	r3, [r3, #20]
 800a522:	2b01      	cmp	r3, #1
 800a524:	d106      	bne.n	800a534 <lwip_netconn_do_close_internal+0x250>
 800a526:	4b16      	ldr	r3, [pc, #88]	; (800a580 <lwip_netconn_do_close_internal+0x29c>)
 800a528:	f240 4241 	movw	r2, #1089	; 0x441
 800a52c:	491b      	ldr	r1, [pc, #108]	; (800a59c <lwip_netconn_do_close_internal+0x2b8>)
 800a52e:	4816      	ldr	r0, [pc, #88]	; (800a588 <lwip_netconn_do_close_internal+0x2a4>)
 800a530:	f00e f8ac 	bl	801868c <iprintf>
    if (shut_tx) {
 800a534:	7b7b      	ldrb	r3, [r7, #13]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a53a:	4919      	ldr	r1, [pc, #100]	; (800a5a0 <lwip_netconn_do_close_internal+0x2bc>)
 800a53c:	6938      	ldr	r0, [r7, #16]
 800a53e:	f006 f867 	bl	8010610 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a542:	2201      	movs	r2, #1
 800a544:	4917      	ldr	r1, [pc, #92]	; (800a5a4 <lwip_netconn_do_close_internal+0x2c0>)
 800a546:	6938      	ldr	r0, [r7, #16]
 800a548:	f006 f8be 	bl	80106c8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a54c:	4916      	ldr	r1, [pc, #88]	; (800a5a8 <lwip_netconn_do_close_internal+0x2c4>)
 800a54e:	6938      	ldr	r0, [r7, #16]
 800a550:	f006 f880 	bl	8010654 <tcp_err>
    tcp_arg(tpcb, conn);
 800a554:	6879      	ldr	r1, [r7, #4]
 800a556:	6938      	ldr	r0, [r7, #16]
 800a558:	f006 f826 	bl	80105a8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a55c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d106      	bne.n	800a572 <lwip_netconn_do_close_internal+0x28e>
 800a564:	4b06      	ldr	r3, [pc, #24]	; (800a580 <lwip_netconn_do_close_internal+0x29c>)
 800a566:	f240 424d 	movw	r2, #1101	; 0x44d
 800a56a:	4910      	ldr	r1, [pc, #64]	; (800a5ac <lwip_netconn_do_close_internal+0x2c8>)
 800a56c:	4806      	ldr	r0, [pc, #24]	; (800a588 <lwip_netconn_do_close_internal+0x2a4>)
 800a56e:	f00e f88d 	bl	801868c <iprintf>
  return err;
 800a572:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
 800a57e:	bf00      	nop
 800a580:	080199cc 	.word	0x080199cc
 800a584:	08019ca0 	.word	0x08019ca0
 800a588:	08019a10 	.word	0x08019a10
 800a58c:	08019cb0 	.word	0x08019cb0
 800a590:	08019cd0 	.word	0x08019cd0
 800a594:	08019cf4 	.word	0x08019cf4
 800a598:	08019b34 	.word	0x08019b34
 800a59c:	08019d08 	.word	0x08019d08
 800a5a0:	08009b5d 	.word	0x08009b5d
 800a5a4:	08009a95 	.word	0x08009a95
 800a5a8:	08009c05 	.word	0x08009c05
 800a5ac:	08019d2c 	.word	0x08019d2c

0800a5b0 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b084      	sub	sp, #16
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	785b      	ldrb	r3, [r3, #1]
 800a5c2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a5c4:	7afb      	ldrb	r3, [r7, #11]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00d      	beq.n	800a5e6 <lwip_netconn_do_delconn+0x36>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5d4:	2b10      	cmp	r3, #16
 800a5d6:	d006      	beq.n	800a5e6 <lwip_netconn_do_delconn+0x36>
 800a5d8:	4b60      	ldr	r3, [pc, #384]	; (800a75c <lwip_netconn_do_delconn+0x1ac>)
 800a5da:	f240 425e 	movw	r2, #1118	; 0x45e
 800a5de:	4960      	ldr	r1, [pc, #384]	; (800a760 <lwip_netconn_do_delconn+0x1b0>)
 800a5e0:	4860      	ldr	r0, [pc, #384]	; (800a764 <lwip_netconn_do_delconn+0x1b4>)
 800a5e2:	f00e f853 	bl	801868c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a5e6:	7afb      	ldrb	r3, [r7, #11]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d005      	beq.n	800a5f8 <lwip_netconn_do_delconn+0x48>
 800a5ec:	7afb      	ldrb	r3, [r7, #11]
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d002      	beq.n	800a5f8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a5f2:	7afb      	ldrb	r3, [r7, #11]
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	d109      	bne.n	800a60c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a5f8:	7afb      	ldrb	r3, [r7, #11]
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d10a      	bne.n	800a614 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	7f1b      	ldrb	r3, [r3, #28]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d103      	bne.n	800a614 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	22fb      	movs	r2, #251	; 0xfb
 800a610:	711a      	strb	r2, [r3, #4]
 800a612:	e097      	b.n	800a744 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a614:	7afb      	ldrb	r3, [r7, #11]
 800a616:	2b03      	cmp	r3, #3
 800a618:	d10d      	bne.n	800a636 <lwip_netconn_do_delconn+0x86>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	7f1b      	ldrb	r3, [r3, #28]
 800a620:	f003 0304 	and.w	r3, r3, #4
 800a624:	2b00      	cmp	r3, #0
 800a626:	d106      	bne.n	800a636 <lwip_netconn_do_delconn+0x86>
 800a628:	4b4c      	ldr	r3, [pc, #304]	; (800a75c <lwip_netconn_do_delconn+0x1ac>)
 800a62a:	f240 427a 	movw	r2, #1146	; 0x47a
 800a62e:	494e      	ldr	r1, [pc, #312]	; (800a768 <lwip_netconn_do_delconn+0x1b8>)
 800a630:	484c      	ldr	r0, [pc, #304]	; (800a764 <lwip_netconn_do_delconn+0x1b4>)
 800a632:	f00e f82b 	bl	801868c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	4618      	mov	r0, r3
 800a642:	f7ff fdd1 	bl	800a1e8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d05f      	beq.n	800a710 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a65a:	2b10      	cmp	r3, #16
 800a65c:	d00d      	beq.n	800a67a <lwip_netconn_do_delconn+0xca>
 800a65e:	2b20      	cmp	r3, #32
 800a660:	d151      	bne.n	800a706 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	4618      	mov	r0, r3
 800a674:	f00b fa04 	bl	8015a80 <udp_remove>
          break;
 800a678:	e046      	b.n	800a708 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6a1b      	ldr	r3, [r3, #32]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d006      	beq.n	800a692 <lwip_netconn_do_delconn+0xe2>
 800a684:	4b35      	ldr	r3, [pc, #212]	; (800a75c <lwip_netconn_do_delconn+0x1ac>)
 800a686:	f240 4294 	movw	r2, #1172	; 0x494
 800a68a:	4938      	ldr	r1, [pc, #224]	; (800a76c <lwip_netconn_do_delconn+0x1bc>)
 800a68c:	4835      	ldr	r0, [pc, #212]	; (800a764 <lwip_netconn_do_delconn+0x1b4>)
 800a68e:	f00d fffd 	bl	801868c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	2204      	movs	r2, #4
 800a698:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2203      	movs	r2, #3
 800a69e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2100      	movs	r1, #0
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	f7ff fe18 	bl	800a2e4 <lwip_netconn_do_close_internal>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d04b      	beq.n	800a752 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	785b      	ldrb	r3, [r3, #1]
 800a6c0:	2b04      	cmp	r3, #4
 800a6c2:	d006      	beq.n	800a6d2 <lwip_netconn_do_delconn+0x122>
 800a6c4:	4b25      	ldr	r3, [pc, #148]	; (800a75c <lwip_netconn_do_delconn+0x1ac>)
 800a6c6:	f240 429a 	movw	r2, #1178	; 0x49a
 800a6ca:	4929      	ldr	r1, [pc, #164]	; (800a770 <lwip_netconn_do_delconn+0x1c0>)
 800a6cc:	4825      	ldr	r0, [pc, #148]	; (800a764 <lwip_netconn_do_delconn+0x1b4>)
 800a6ce:	f00d ffdd 	bl	801868c <iprintf>
            UNLOCK_TCPIP_CORE();
 800a6d2:	4828      	ldr	r0, [pc, #160]	; (800a774 <lwip_netconn_do_delconn+0x1c4>)
 800a6d4:	f00d fe95 	bl	8018402 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	330c      	adds	r3, #12
 800a6de:	2100      	movs	r1, #0
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f00d fdf4 	bl	80182ce <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a6e6:	4823      	ldr	r0, [pc, #140]	; (800a774 <lwip_netconn_do_delconn+0x1c4>)
 800a6e8:	f00d fe7c 	bl	80183e4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	785b      	ldrb	r3, [r3, #1]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d02d      	beq.n	800a752 <lwip_netconn_do_delconn+0x1a2>
 800a6f6:	4b19      	ldr	r3, [pc, #100]	; (800a75c <lwip_netconn_do_delconn+0x1ac>)
 800a6f8:	f240 429e 	movw	r2, #1182	; 0x49e
 800a6fc:	491c      	ldr	r1, [pc, #112]	; (800a770 <lwip_netconn_do_delconn+0x1c0>)
 800a6fe:	4819      	ldr	r0, [pc, #100]	; (800a764 <lwip_netconn_do_delconn+0x1b4>)
 800a700:	f00d ffc4 	bl	801868c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a704:	e025      	b.n	800a752 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800a706:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	2200      	movs	r2, #0
 800a70e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a716:	2b00      	cmp	r3, #0
 800a718:	d007      	beq.n	800a72a <lwip_netconn_do_delconn+0x17a>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	6810      	ldr	r0, [r2, #0]
 800a724:	2200      	movs	r2, #0
 800a726:	2100      	movs	r1, #0
 800a728:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a730:	2b00      	cmp	r3, #0
 800a732:	d007      	beq.n	800a744 <lwip_netconn_do_delconn+0x194>
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73a:	68fa      	ldr	r2, [r7, #12]
 800a73c:	6810      	ldr	r0, [r2, #0]
 800a73e:	2200      	movs	r2, #0
 800a740:	2102      	movs	r1, #2
 800a742:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	330c      	adds	r3, #12
 800a74a:	4618      	mov	r0, r3
 800a74c:	f00d fe0a 	bl	8018364 <sys_sem_valid>
 800a750:	e000      	b.n	800a754 <lwip_netconn_do_delconn+0x1a4>
          return;
 800a752:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	080199cc 	.word	0x080199cc
 800a760:	08019d3c 	.word	0x08019d3c
 800a764:	08019a10 	.word	0x08019a10
 800a768:	08019d50 	.word	0x08019d50
 800a76c:	08019d70 	.word	0x08019d70
 800a770:	08019d8c 	.word	0x08019d8c
 800a774:	20008528 	.word	0x20008528

0800a778 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685b      	ldr	r3, [r3, #4]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d025      	beq.n	800a7da <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a798:	2b10      	cmp	r3, #16
 800a79a:	d00e      	beq.n	800a7ba <lwip_netconn_do_bind+0x42>
 800a79c:	2b20      	cmp	r3, #32
 800a79e:	d119      	bne.n	800a7d4 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	6858      	ldr	r0, [r3, #4]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	6899      	ldr	r1, [r3, #8]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	899b      	ldrh	r3, [r3, #12]
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	f00b f8be 	bl	8015930 <udp_bind>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	73fb      	strb	r3, [r7, #15]
        break;
 800a7b8:	e011      	b.n	800a7de <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	6858      	ldr	r0, [r3, #4]
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	6899      	ldr	r1, [r3, #8]
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	899b      	ldrh	r3, [r3, #12]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	f004 fe6b 	bl	800f4a4 <tcp_bind>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73fb      	strb	r3, [r7, #15]
        break;
 800a7d2:	e004      	b.n	800a7de <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a7d4:	23fa      	movs	r3, #250	; 0xfa
 800a7d6:	73fb      	strb	r3, [r7, #15]
        break;
 800a7d8:	e001      	b.n	800a7de <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a7da:	23fa      	movs	r3, #250	; 0xfa
 800a7dc:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	7bfa      	ldrb	r2, [r7, #15]
 800a7e2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a7e4:	bf00      	nop
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d07f      	beq.n	800a902 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	781b      	ldrb	r3, [r3, #0]
 800a808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a80c:	2b10      	cmp	r3, #16
 800a80e:	d175      	bne.n	800a8fc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a810:	697b      	ldr	r3, [r7, #20]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	785b      	ldrb	r3, [r3, #1]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d165      	bne.n	800a8e6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	7d1b      	ldrb	r3, [r3, #20]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a826:	23fa      	movs	r3, #250	; 0xfa
 800a828:	72fb      	strb	r3, [r7, #11]
 800a82a:	e06c      	b.n	800a906 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a82c:	23ff      	movs	r3, #255	; 0xff
 800a82e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f107 020b 	add.w	r2, r7, #11
 800a83a:	7cf9      	ldrb	r1, [r7, #19]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f004 fee9 	bl	800f614 <tcp_listen_with_backlog_and_err>
 800a842:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d05d      	beq.n	800a906 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3310      	adds	r3, #16
 800a850:	4618      	mov	r0, r3
 800a852:	f00d fcf9 	bl	8018248 <sys_mbox_valid>
 800a856:	4603      	mov	r3, r0
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00b      	beq.n	800a874 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	3310      	adds	r3, #16
 800a862:	4618      	mov	r0, r3
 800a864:	f00d fc7c 	bl	8018160 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	3310      	adds	r3, #16
 800a86e:	4618      	mov	r0, r3
 800a870:	f00d fcfb 	bl	801826a <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a874:	2300      	movs	r3, #0
 800a876:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	3314      	adds	r3, #20
 800a87e:	4618      	mov	r0, r3
 800a880:	f00d fce2 	bl	8018248 <sys_mbox_valid>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d108      	bne.n	800a89c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3314      	adds	r3, #20
 800a890:	2106      	movs	r1, #6
 800a892:	4618      	mov	r0, r3
 800a894:	f00d fc4a 	bl	801812c <sys_mbox_new>
 800a898:	4603      	mov	r3, r0
 800a89a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a89c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d118      	bne.n	800a8d6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	68fa      	ldr	r2, [r7, #12]
 800a8b2:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	685a      	ldr	r2, [r3, #4]
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	4610      	mov	r0, r2
 800a8c2:	f005 fe71 	bl	80105a8 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	685b      	ldr	r3, [r3, #4]
 800a8cc:	4912      	ldr	r1, [pc, #72]	; (800a918 <lwip_netconn_do_listen+0x12c>)
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f005 fee2 	bl	8010698 <tcp_accept>
 800a8d4:	e017      	b.n	800a906 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f004 fc92 	bl	800f200 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	605a      	str	r2, [r3, #4]
 800a8e4:	e00f      	b.n	800a906 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	785b      	ldrb	r3, [r3, #1]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d102      	bne.n	800a8f6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	72fb      	strb	r3, [r7, #11]
 800a8f4:	e007      	b.n	800a906 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a8f6:	23f5      	movs	r3, #245	; 0xf5
 800a8f8:	72fb      	strb	r3, [r7, #11]
 800a8fa:	e004      	b.n	800a906 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a8fc:	23f0      	movs	r3, #240	; 0xf0
 800a8fe:	72fb      	strb	r3, [r7, #11]
 800a900:	e001      	b.n	800a906 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a902:	23f5      	movs	r3, #245	; 0xf5
 800a904:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a906:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a90e:	bf00      	nop
 800a910:	3718      	adds	r7, #24
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	08009e01 	.word	0x08009e01

0800a91c <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	4618      	mov	r0, r3
 800a92e:	f7fe ff21 	bl	8009774 <netconn_err>
 800a932:	4603      	mov	r3, r0
 800a934:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d134      	bne.n	800a9a8 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d02d      	beq.n	800a9a4 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a952:	2b20      	cmp	r3, #32
 800a954:	d123      	bne.n	800a99e <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d10c      	bne.n	800a97a <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	685a      	ldr	r2, [r3, #4]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4619      	mov	r1, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	f00a fdf4 	bl	801555c <udp_send>
 800a974:	4603      	mov	r3, r0
 800a976:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800a978:	e016      	b.n	800a9a8 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6858      	ldr	r0, [r3, #4]
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	6819      	ldr	r1, [r3, #0]
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	f103 0208 	add.w	r2, r3, #8
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	899b      	ldrh	r3, [r3, #12]
 800a994:	f00a fe16 	bl	80155c4 <udp_sendto>
 800a998:	4603      	mov	r3, r0
 800a99a:	73fb      	strb	r3, [r7, #15]
          break;
 800a99c:	e004      	b.n	800a9a8 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800a99e:	23f5      	movs	r3, #245	; 0xf5
 800a9a0:	73fb      	strb	r3, [r7, #15]
          break;
 800a9a2:	e001      	b.n	800a9a8 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800a9a4:	23f5      	movs	r3, #245	; 0xf5
 800a9a6:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	7bfa      	ldrb	r2, [r7, #15]
 800a9ac:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}

0800a9b6 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a9b6:	b580      	push	{r7, lr}
 800a9b8:	b086      	sub	sp, #24
 800a9ba:	af00      	add	r7, sp, #0
 800a9bc:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a9c2:	693b      	ldr	r3, [r7, #16]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d022      	beq.n	800aa18 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a9d2:	693b      	ldr	r3, [r7, #16]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9dc:	2b10      	cmp	r3, #16
 800a9de:	d11b      	bne.n	800aa18 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ec:	d202      	bcs.n	800a9f4 <lwip_netconn_do_recv+0x3e>
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	e001      	b.n	800a9f8 <lwip_netconn_do_recv+0x42>
 800a9f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9f8:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	89fa      	ldrh	r2, [r7, #14]
 800aa02:	4611      	mov	r1, r2
 800aa04:	4618      	mov	r0, r3
 800aa06:	f004 ff09 	bl	800f81c <tcp_recved>
        remaining -= recved;
 800aa0a:	89fb      	ldrh	r3, [r7, #14]
 800aa0c:	697a      	ldr	r2, [r7, #20]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d1e6      	bne.n	800a9e6 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aa18:	bf00      	nop
 800aa1a:	3718      	adds	r7, #24
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	460b      	mov	r3, r1
 800aa2a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d106      	bne.n	800aa44 <lwip_netconn_do_writemore+0x24>
 800aa36:	4b96      	ldr	r3, [pc, #600]	; (800ac90 <lwip_netconn_do_writemore+0x270>)
 800aa38:	f240 6273 	movw	r2, #1651	; 0x673
 800aa3c:	4995      	ldr	r1, [pc, #596]	; (800ac94 <lwip_netconn_do_writemore+0x274>)
 800aa3e:	4896      	ldr	r0, [pc, #600]	; (800ac98 <lwip_netconn_do_writemore+0x278>)
 800aa40:	f00d fe24 	bl	801868c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	785b      	ldrb	r3, [r3, #1]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d006      	beq.n	800aa5a <lwip_netconn_do_writemore+0x3a>
 800aa4c:	4b90      	ldr	r3, [pc, #576]	; (800ac90 <lwip_netconn_do_writemore+0x270>)
 800aa4e:	f240 6274 	movw	r2, #1652	; 0x674
 800aa52:	4992      	ldr	r1, [pc, #584]	; (800ac9c <lwip_netconn_do_writemore+0x27c>)
 800aa54:	4890      	ldr	r0, [pc, #576]	; (800ac98 <lwip_netconn_do_writemore+0x278>)
 800aa56:	f00d fe19 	bl	801868c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d106      	bne.n	800aa70 <lwip_netconn_do_writemore+0x50>
 800aa62:	4b8b      	ldr	r3, [pc, #556]	; (800ac90 <lwip_netconn_do_writemore+0x270>)
 800aa64:	f240 6275 	movw	r2, #1653	; 0x675
 800aa68:	498d      	ldr	r1, [pc, #564]	; (800aca0 <lwip_netconn_do_writemore+0x280>)
 800aa6a:	488b      	ldr	r0, [pc, #556]	; (800ac98 <lwip_netconn_do_writemore+0x278>)
 800aa6c:	f00d fe0e 	bl	801868c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d106      	bne.n	800aa86 <lwip_netconn_do_writemore+0x66>
 800aa78:	4b85      	ldr	r3, [pc, #532]	; (800ac90 <lwip_netconn_do_writemore+0x270>)
 800aa7a:	f240 6276 	movw	r2, #1654	; 0x676
 800aa7e:	4989      	ldr	r1, [pc, #548]	; (800aca4 <lwip_netconn_do_writemore+0x284>)
 800aa80:	4885      	ldr	r0, [pc, #532]	; (800ac98 <lwip_netconn_do_writemore+0x278>)
 800aa82:	f00d fe03 	bl	801868c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6a1b      	ldr	r3, [r3, #32]
 800aa8a:	699a      	ldr	r2, [r3, #24]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6a1b      	ldr	r3, [r3, #32]
 800aa90:	695b      	ldr	r3, [r3, #20]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d306      	bcc.n	800aaa4 <lwip_netconn_do_writemore+0x84>
 800aa96:	4b7e      	ldr	r3, [pc, #504]	; (800ac90 <lwip_netconn_do_writemore+0x270>)
 800aa98:	f240 6277 	movw	r2, #1655	; 0x677
 800aa9c:	4982      	ldr	r1, [pc, #520]	; (800aca8 <lwip_netconn_do_writemore+0x288>)
 800aa9e:	487e      	ldr	r0, [pc, #504]	; (800ac98 <lwip_netconn_do_writemore+0x278>)
 800aaa0:	f00d fdf4 	bl	801868c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6a1b      	ldr	r3, [r3, #32]
 800aaa8:	899b      	ldrh	r3, [r3, #12]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d106      	bne.n	800aabc <lwip_netconn_do_writemore+0x9c>
 800aaae:	4b78      	ldr	r3, [pc, #480]	; (800ac90 <lwip_netconn_do_writemore+0x270>)
 800aab0:	f240 6279 	movw	r2, #1657	; 0x679
 800aab4:	497d      	ldr	r1, [pc, #500]	; (800acac <lwip_netconn_do_writemore+0x28c>)
 800aab6:	4878      	ldr	r0, [pc, #480]	; (800ac98 <lwip_netconn_do_writemore+0x278>)
 800aab8:	f00d fde8 	bl	801868c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a1b      	ldr	r3, [r3, #32]
 800aac0:	7f1b      	ldrb	r3, [r3, #28]
 800aac2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	7f1b      	ldrb	r3, [r3, #28]
 800aac8:	f003 0302 	and.w	r3, r3, #2
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d104      	bne.n	800aada <lwip_netconn_do_writemore+0xba>
 800aad0:	7ebb      	ldrb	r3, [r7, #26]
 800aad2:	f003 0304 	and.w	r3, r3, #4
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d001      	beq.n	800aade <lwip_netconn_do_writemore+0xbe>
 800aada:	2301      	movs	r3, #1
 800aadc:	e000      	b.n	800aae0 <lwip_netconn_do_writemore+0xc0>
 800aade:	2300      	movs	r3, #0
 800aae0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a1b      	ldr	r3, [r3, #32]
 800aaee:	691b      	ldr	r3, [r3, #16]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	685a      	ldr	r2, [r3, #4]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6a1b      	ldr	r3, [r3, #32]
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	1ad3      	subs	r3, r2, r3
 800ab04:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab0c:	d307      	bcc.n	800ab1e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ab0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab12:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ab14:	7ebb      	ldrb	r3, [r7, #26]
 800ab16:	f043 0302 	orr.w	r3, r3, #2
 800ab1a:	76bb      	strb	r3, [r7, #26]
 800ab1c:	e001      	b.n	800ab22 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab2a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ab2c:	89fa      	ldrh	r2, [r7, #14]
 800ab2e:	8bbb      	ldrh	r3, [r7, #28]
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d216      	bcs.n	800ab62 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ab34:	89fb      	ldrh	r3, [r7, #14]
 800ab36:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ab38:	7e3b      	ldrb	r3, [r7, #24]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d00d      	beq.n	800ab5a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ab3e:	8bbb      	ldrh	r3, [r7, #28]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10e      	bne.n	800ab62 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a1b      	ldr	r3, [r3, #32]
 800ab48:	699b      	ldr	r3, [r3, #24]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d102      	bne.n	800ab54 <lwip_netconn_do_writemore+0x134>
 800ab4e:	f06f 0306 	mvn.w	r3, #6
 800ab52:	e000      	b.n	800ab56 <lwip_netconn_do_writemore+0x136>
 800ab54:	2300      	movs	r3, #0
 800ab56:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ab58:	e07d      	b.n	800ac56 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ab5a:	7ebb      	ldrb	r3, [r7, #26]
 800ab5c:	f043 0302 	orr.w	r3, r3, #2
 800ab60:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6a1b      	ldr	r3, [r3, #32]
 800ab66:	691a      	ldr	r2, [r3, #16]
 800ab68:	8bbb      	ldrh	r3, [r7, #28]
 800ab6a:	441a      	add	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a1b      	ldr	r3, [r3, #32]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d906      	bls.n	800ab86 <lwip_netconn_do_writemore+0x166>
 800ab78:	4b45      	ldr	r3, [pc, #276]	; (800ac90 <lwip_netconn_do_writemore+0x270>)
 800ab7a:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ab7e:	494c      	ldr	r1, [pc, #304]	; (800acb0 <lwip_netconn_do_writemore+0x290>)
 800ab80:	4845      	ldr	r0, [pc, #276]	; (800ac98 <lwip_netconn_do_writemore+0x278>)
 800ab82:	f00d fd83 	bl	801868c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ab86:	8bbb      	ldrh	r3, [r7, #28]
 800ab88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d103      	bne.n	800ab98 <lwip_netconn_do_writemore+0x178>
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab96:	d209      	bcs.n	800abac <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ab9c:	8bba      	ldrh	r2, [r7, #28]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d10b      	bne.n	800abba <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a1b      	ldr	r3, [r3, #32]
 800aba6:	899b      	ldrh	r3, [r3, #12]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d906      	bls.n	800abba <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800abac:	2301      	movs	r3, #1
 800abae:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800abb0:	7ebb      	ldrb	r3, [r7, #26]
 800abb2:	f043 0302 	orr.w	r3, r3, #2
 800abb6:	76bb      	strb	r3, [r7, #26]
 800abb8:	e001      	b.n	800abbe <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6858      	ldr	r0, [r3, #4]
 800abc2:	7ebb      	ldrb	r3, [r7, #26]
 800abc4:	8bba      	ldrh	r2, [r7, #28]
 800abc6:	6979      	ldr	r1, [r7, #20]
 800abc8:	f008 fc2c 	bl	8013424 <tcp_write>
 800abcc:	4603      	mov	r3, r0
 800abce:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800abd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d12c      	bne.n	800ac32 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	6999      	ldr	r1, [r3, #24]
 800abde:	8bba      	ldrh	r2, [r7, #28]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6a1b      	ldr	r3, [r3, #32]
 800abe4:	440a      	add	r2, r1
 800abe6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6a1b      	ldr	r3, [r3, #32]
 800abec:	6919      	ldr	r1, [r3, #16]
 800abee:	8bba      	ldrh	r2, [r7, #28]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6a1b      	ldr	r3, [r3, #32]
 800abf4:	440a      	add	r2, r1
 800abf6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	6a1b      	ldr	r3, [r3, #32]
 800abfc:	691a      	ldr	r2, [r3, #16]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	d113      	bne.n	800ac32 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6a1b      	ldr	r3, [r3, #32]
 800ac0e:	899a      	ldrh	r2, [r3, #12]
 800ac10:	3a01      	subs	r2, #1
 800ac12:	b292      	uxth	r2, r2
 800ac14:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6a1b      	ldr	r3, [r3, #32]
 800ac1a:	899b      	ldrh	r3, [r3, #12]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d008      	beq.n	800ac32 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	689a      	ldr	r2, [r3, #8]
 800ac26:	3208      	adds	r2, #8
 800ac28:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6a1b      	ldr	r3, [r3, #32]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ac32:	7e7b      	ldrb	r3, [r7, #25]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d004      	beq.n	800ac42 <lwip_netconn_do_writemore+0x222>
 800ac38:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f43f af50 	beq.w	800aae2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ac42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d004      	beq.n	800ac54 <lwip_netconn_do_writemore+0x234>
 800ac4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac52:	d146      	bne.n	800ace2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800ac54:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ac56:	7e3b      	ldrb	r3, [r7, #24]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d02b      	beq.n	800acb4 <lwip_netconn_do_writemore+0x294>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6a1b      	ldr	r3, [r3, #32]
 800ac60:	699a      	ldr	r2, [r3, #24]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	695b      	ldr	r3, [r3, #20]
 800ac68:	429a      	cmp	r2, r3
 800ac6a:	d223      	bcs.n	800acb4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d005      	beq.n	800ac80 <lwip_netconn_do_writemore+0x260>
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac78:	2200      	movs	r2, #0
 800ac7a:	2103      	movs	r1, #3
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	7f1b      	ldrb	r3, [r3, #28]
 800ac84:	f043 0310 	orr.w	r3, r3, #16
 800ac88:	b2da      	uxtb	r2, r3
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	771a      	strb	r2, [r3, #28]
 800ac8e:	e028      	b.n	800ace2 <lwip_netconn_do_writemore+0x2c2>
 800ac90:	080199cc 	.word	0x080199cc
 800ac94:	08019b24 	.word	0x08019b24
 800ac98:	08019a10 	.word	0x08019a10
 800ac9c:	08019e2c 	.word	0x08019e2c
 800aca0:	08019b34 	.word	0x08019b34
 800aca4:	08019e4c 	.word	0x08019e4c
 800aca8:	08019e64 	.word	0x08019e64
 800acac:	08019ea4 	.word	0x08019ea4
 800acb0:	08019ecc 	.word	0x08019ecc
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800acbc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800acc0:	d305      	bcc.n	800acce <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800acca:	2b04      	cmp	r3, #4
 800accc:	d909      	bls.n	800ace2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d005      	beq.n	800ace2 <lwip_netconn_do_writemore+0x2c2>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acda:	2200      	movs	r2, #0
 800acdc:	2103      	movs	r1, #3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ace2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d11d      	bne.n	800ad26 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	6a1b      	ldr	r3, [r3, #32]
 800acee:	699a      	ldr	r2, [r3, #24]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a1b      	ldr	r3, [r3, #32]
 800acf4:	695b      	ldr	r3, [r3, #20]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d002      	beq.n	800ad00 <lwip_netconn_do_writemore+0x2e0>
 800acfa:	7e3b      	ldrb	r3, [r7, #24]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ad00:	2301      	movs	r3, #1
 800ad02:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f009 f975 	bl	8013ff8 <tcp_output>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ad12:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ad16:	f113 0f04 	cmn.w	r3, #4
 800ad1a:	d12c      	bne.n	800ad76 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ad1c:	7b3b      	ldrb	r3, [r7, #12]
 800ad1e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ad20:	2301      	movs	r3, #1
 800ad22:	76fb      	strb	r3, [r7, #27]
 800ad24:	e027      	b.n	800ad76 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800ad26:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2e:	d120      	bne.n	800ad72 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	4618      	mov	r0, r3
 800ad36:	f009 f95f 	bl	8013ff8 <tcp_output>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ad3e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ad42:	f113 0f04 	cmn.w	r3, #4
 800ad46:	d104      	bne.n	800ad52 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ad48:	7b7b      	ldrb	r3, [r7, #13]
 800ad4a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	76fb      	strb	r3, [r7, #27]
 800ad50:	e011      	b.n	800ad76 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800ad52:	7e3b      	ldrb	r3, [r7, #24]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00e      	beq.n	800ad76 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6a1b      	ldr	r3, [r3, #32]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d102      	bne.n	800ad68 <lwip_netconn_do_writemore+0x348>
 800ad62:	f06f 0306 	mvn.w	r3, #6
 800ad66:	e000      	b.n	800ad6a <lwip_netconn_do_writemore+0x34a>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	76fb      	strb	r3, [r7, #27]
 800ad70:	e001      	b.n	800ad76 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ad72:	2301      	movs	r3, #1
 800ad74:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ad76:	7efb      	ldrb	r3, [r7, #27]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d015      	beq.n	800ada8 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6a1b      	ldr	r3, [r3, #32]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	330c      	adds	r3, #12
 800ad84:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	7ffa      	ldrb	r2, [r7, #31]
 800ad8c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ad9a:	78fb      	ldrb	r3, [r7, #3]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d006      	beq.n	800adae <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ada0:	68b8      	ldr	r0, [r7, #8]
 800ada2:	f00d fac5 	bl	8018330 <sys_sem_signal>
 800ada6:	e002      	b.n	800adae <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ada8:	f04f 33ff 	mov.w	r3, #4294967295
 800adac:	e000      	b.n	800adb0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3720      	adds	r7, #32
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	4618      	mov	r0, r3
 800adca:	f7fe fcd3 	bl	8009774 <netconn_err>
 800adce:	4603      	mov	r3, r0
 800add0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800add2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d166      	bne.n	800aea8 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ade4:	2b10      	cmp	r3, #16
 800ade6:	d15d      	bne.n	800aea4 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	785b      	ldrb	r3, [r3, #1]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d002      	beq.n	800adf8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800adf2:	23fb      	movs	r3, #251	; 0xfb
 800adf4:	73fb      	strb	r3, [r7, #15]
 800adf6:	e057      	b.n	800aea8 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d04d      	beq.n	800ae9e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2201      	movs	r2, #1
 800ae08:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	6a1b      	ldr	r3, [r3, #32]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d006      	beq.n	800ae22 <lwip_netconn_do_write+0x6a>
 800ae14:	4b28      	ldr	r3, [pc, #160]	; (800aeb8 <lwip_netconn_do_write+0x100>)
 800ae16:	f240 7223 	movw	r2, #1827	; 0x723
 800ae1a:	4928      	ldr	r1, [pc, #160]	; (800aebc <lwip_netconn_do_write+0x104>)
 800ae1c:	4828      	ldr	r0, [pc, #160]	; (800aec0 <lwip_netconn_do_write+0x108>)
 800ae1e:	f00d fc35 	bl	801868c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d106      	bne.n	800ae38 <lwip_netconn_do_write+0x80>
 800ae2a:	4b23      	ldr	r3, [pc, #140]	; (800aeb8 <lwip_netconn_do_write+0x100>)
 800ae2c:	f240 7224 	movw	r2, #1828	; 0x724
 800ae30:	4924      	ldr	r1, [pc, #144]	; (800aec4 <lwip_netconn_do_write+0x10c>)
 800ae32:	4823      	ldr	r0, [pc, #140]	; (800aec0 <lwip_netconn_do_write+0x108>)
 800ae34:	f00d fc2a 	bl	801868c <iprintf>
        msg->conn->current_msg = msg;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68ba      	ldr	r2, [r7, #8]
 800ae3e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2100      	movs	r1, #0
 800ae46:	4618      	mov	r0, r3
 800ae48:	f7ff fdea 	bl	800aa20 <lwip_netconn_do_writemore>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d02e      	beq.n	800aeb0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ae52:	68bb      	ldr	r3, [r7, #8]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	785b      	ldrb	r3, [r3, #1]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d006      	beq.n	800ae6a <lwip_netconn_do_write+0xb2>
 800ae5c:	4b16      	ldr	r3, [pc, #88]	; (800aeb8 <lwip_netconn_do_write+0x100>)
 800ae5e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ae62:	4919      	ldr	r1, [pc, #100]	; (800aec8 <lwip_netconn_do_write+0x110>)
 800ae64:	4816      	ldr	r0, [pc, #88]	; (800aec0 <lwip_netconn_do_write+0x108>)
 800ae66:	f00d fc11 	bl	801868c <iprintf>
          UNLOCK_TCPIP_CORE();
 800ae6a:	4818      	ldr	r0, [pc, #96]	; (800aecc <lwip_netconn_do_write+0x114>)
 800ae6c:	f00d fac9 	bl	8018402 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	330c      	adds	r3, #12
 800ae76:	2100      	movs	r1, #0
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f00d fa28 	bl	80182ce <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ae7e:	4813      	ldr	r0, [pc, #76]	; (800aecc <lwip_netconn_do_write+0x114>)
 800ae80:	f00d fab0 	bl	80183e4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	785b      	ldrb	r3, [r3, #1]
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d110      	bne.n	800aeb0 <lwip_netconn_do_write+0xf8>
 800ae8e:	4b0a      	ldr	r3, [pc, #40]	; (800aeb8 <lwip_netconn_do_write+0x100>)
 800ae90:	f240 722c 	movw	r2, #1836	; 0x72c
 800ae94:	490c      	ldr	r1, [pc, #48]	; (800aec8 <lwip_netconn_do_write+0x110>)
 800ae96:	480a      	ldr	r0, [pc, #40]	; (800aec0 <lwip_netconn_do_write+0x108>)
 800ae98:	f00d fbf8 	bl	801868c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ae9c:	e008      	b.n	800aeb0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ae9e:	23f5      	movs	r3, #245	; 0xf5
 800aea0:	73fb      	strb	r3, [r7, #15]
 800aea2:	e001      	b.n	800aea8 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800aea4:	23fa      	movs	r3, #250	; 0xfa
 800aea6:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	7bfa      	ldrb	r2, [r7, #15]
 800aeac:	711a      	strb	r2, [r3, #4]
 800aeae:	e000      	b.n	800aeb2 <lwip_netconn_do_write+0xfa>
        return;
 800aeb0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	080199cc 	.word	0x080199cc
 800aebc:	08019d70 	.word	0x08019d70
 800aec0:	08019a10 	.word	0x08019a10
 800aec4:	08019ef8 	.word	0x08019ef8
 800aec8:	08019d8c 	.word	0x08019d8c
 800aecc:	20008528 	.word	0x20008528

0800aed0 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d06b      	beq.n	800afbe <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	7c1b      	ldrb	r3, [r3, #16]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d007      	beq.n	800aefe <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	6812      	ldr	r2, [r2, #0]
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	e006      	b.n	800af0c <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	685a      	ldr	r2, [r3, #4]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	689b      	ldr	r3, [r3, #8]
 800af08:	6852      	ldr	r2, [r2, #4]
 800af0a:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800af1c:	2b10      	cmp	r3, #16
 800af1e:	d021      	beq.n	800af64 <lwip_netconn_do_getaddr+0x94>
 800af20:	2b20      	cmp	r3, #32
 800af22:	d144      	bne.n	800afae <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	7c1b      	ldrb	r3, [r3, #16]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d007      	beq.n	800af3c <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	8a52      	ldrh	r2, [r2, #18]
 800af38:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800af3a:	e044      	b.n	800afc6 <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	7c1b      	ldrb	r3, [r3, #16]
 800af44:	f003 0304 	and.w	r3, r3, #4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d103      	bne.n	800af54 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	22f5      	movs	r2, #245	; 0xf5
 800af50:	711a      	strb	r2, [r3, #4]
        break;
 800af52:	e038      	b.n	800afc6 <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	8a92      	ldrh	r2, [r2, #20]
 800af60:	801a      	strh	r2, [r3, #0]
        break;
 800af62:	e030      	b.n	800afc6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	7c1b      	ldrb	r3, [r3, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10f      	bne.n	800af8c <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	685b      	ldr	r3, [r3, #4]
 800af72:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800af74:	2b00      	cmp	r3, #0
 800af76:	d005      	beq.n	800af84 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	7d1b      	ldrb	r3, [r3, #20]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d103      	bne.n	800af8c <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	22f5      	movs	r2, #245	; 0xf5
 800af88:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800af8a:	e01c      	b.n	800afc6 <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	7c1b      	ldrb	r3, [r3, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d004      	beq.n	800af9e <lwip_netconn_do_getaddr+0xce>
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	8adb      	ldrh	r3, [r3, #22]
 800af9c:	e003      	b.n	800afa6 <lwip_netconn_do_getaddr+0xd6>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	8b1b      	ldrh	r3, [r3, #24]
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	68d2      	ldr	r2, [r2, #12]
 800afaa:	8013      	strh	r3, [r2, #0]
        break;
 800afac:	e00b      	b.n	800afc6 <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800afae:	4b08      	ldr	r3, [pc, #32]	; (800afd0 <lwip_netconn_do_getaddr+0x100>)
 800afb0:	f240 727d 	movw	r2, #1917	; 0x77d
 800afb4:	4907      	ldr	r1, [pc, #28]	; (800afd4 <lwip_netconn_do_getaddr+0x104>)
 800afb6:	4808      	ldr	r0, [pc, #32]	; (800afd8 <lwip_netconn_do_getaddr+0x108>)
 800afb8:	f00d fb68 	bl	801868c <iprintf>
        break;
 800afbc:	e003      	b.n	800afc6 <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	22f5      	movs	r2, #245	; 0xf5
 800afc2:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800afc4:	bf00      	nop
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	080199cc 	.word	0x080199cc
 800afd4:	08019f0c 	.word	0x08019f0c
 800afd8:	08019a10 	.word	0x08019a10

0800afdc <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	785b      	ldrb	r3, [r3, #1]
 800afee:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d069      	beq.n	800b0ce <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	781b      	ldrb	r3, [r3, #0]
 800b000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b004:	2b10      	cmp	r3, #16
 800b006:	d162      	bne.n	800b0ce <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b00c:	2b03      	cmp	r3, #3
 800b00e:	d002      	beq.n	800b016 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b010:	7afb      	ldrb	r3, [r7, #11]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d05b      	beq.n	800b0ce <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b016:	7afb      	ldrb	r3, [r7, #11]
 800b018:	2b03      	cmp	r3, #3
 800b01a:	d103      	bne.n	800b024 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	22f5      	movs	r2, #245	; 0xf5
 800b020:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b022:	e059      	b.n	800b0d8 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b024:	7afb      	ldrb	r3, [r7, #11]
 800b026:	2b01      	cmp	r3, #1
 800b028:	d103      	bne.n	800b032 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	22fb      	movs	r2, #251	; 0xfb
 800b02e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b030:	e052      	b.n	800b0d8 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	7a1b      	ldrb	r3, [r3, #8]
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d004      	beq.n	800b048 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff f8d0 	bl	800a1e8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	6a1b      	ldr	r3, [r3, #32]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d006      	beq.n	800b060 <lwip_netconn_do_close+0x84>
 800b052:	4b23      	ldr	r3, [pc, #140]	; (800b0e0 <lwip_netconn_do_close+0x104>)
 800b054:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b058:	4922      	ldr	r1, [pc, #136]	; (800b0e4 <lwip_netconn_do_close+0x108>)
 800b05a:	4823      	ldr	r0, [pc, #140]	; (800b0e8 <lwip_netconn_do_close+0x10c>)
 800b05c:	f00d fb16 	bl	801868c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2204      	movs	r2, #4
 800b066:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2100      	movs	r1, #0
 800b076:	4618      	mov	r0, r3
 800b078:	f7ff f934 	bl	800a2e4 <lwip_netconn_do_close_internal>
 800b07c:	4603      	mov	r3, r0
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d029      	beq.n	800b0d6 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	785b      	ldrb	r3, [r3, #1]
 800b088:	2b04      	cmp	r3, #4
 800b08a:	d006      	beq.n	800b09a <lwip_netconn_do_close+0xbe>
 800b08c:	4b14      	ldr	r3, [pc, #80]	; (800b0e0 <lwip_netconn_do_close+0x104>)
 800b08e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b092:	4916      	ldr	r1, [pc, #88]	; (800b0ec <lwip_netconn_do_close+0x110>)
 800b094:	4814      	ldr	r0, [pc, #80]	; (800b0e8 <lwip_netconn_do_close+0x10c>)
 800b096:	f00d faf9 	bl	801868c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b09a:	4815      	ldr	r0, [pc, #84]	; (800b0f0 <lwip_netconn_do_close+0x114>)
 800b09c:	f00d f9b1 	bl	8018402 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	330c      	adds	r3, #12
 800b0a6:	2100      	movs	r1, #0
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f00d f910 	bl	80182ce <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b0ae:	4810      	ldr	r0, [pc, #64]	; (800b0f0 <lwip_netconn_do_close+0x114>)
 800b0b0:	f00d f998 	bl	80183e4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	785b      	ldrb	r3, [r3, #1]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00b      	beq.n	800b0d6 <lwip_netconn_do_close+0xfa>
 800b0be:	4b08      	ldr	r3, [pc, #32]	; (800b0e0 <lwip_netconn_do_close+0x104>)
 800b0c0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b0c4:	4909      	ldr	r1, [pc, #36]	; (800b0ec <lwip_netconn_do_close+0x110>)
 800b0c6:	4808      	ldr	r0, [pc, #32]	; (800b0e8 <lwip_netconn_do_close+0x10c>)
 800b0c8:	f00d fae0 	bl	801868c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b0cc:	e003      	b.n	800b0d6 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	22f5      	movs	r2, #245	; 0xf5
 800b0d2:	711a      	strb	r2, [r3, #4]
 800b0d4:	e000      	b.n	800b0d8 <lwip_netconn_do_close+0xfc>
      return;
 800b0d6:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	080199cc 	.word	0x080199cc
 800b0e4:	08019d70 	.word	0x08019d70
 800b0e8:	08019a10 	.word	0x08019a10
 800b0ec:	08019d8c 	.word	0x08019d8c
 800b0f0:	20008528 	.word	0x20008528

0800b0f4 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800b0f4:	b480      	push	{r7}
 800b0f6:	b083      	sub	sp, #12
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b0fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b102:	2b00      	cmp	r3, #0
 800b104:	dc04      	bgt.n	800b110 <err_to_errno+0x1c>
 800b106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b10a:	f113 0f10 	cmn.w	r3, #16
 800b10e:	da01      	bge.n	800b114 <err_to_errno+0x20>
    return EIO;
 800b110:	2305      	movs	r3, #5
 800b112:	e005      	b.n	800b120 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b118:	425b      	negs	r3, r3
 800b11a:	4a04      	ldr	r2, [pc, #16]	; (800b12c <err_to_errno+0x38>)
 800b11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b120:	4618      	mov	r0, r3
 800b122:	370c      	adds	r7, #12
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	0801d030 	.word	0x0801d030

0800b130 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d013      	beq.n	800b166 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d00b      	beq.n	800b15e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f003 fa44 	bl	800e5d8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	605a      	str	r2, [r3, #4]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685a      	ldr	r2, [r3, #4]
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	2006      	movs	r0, #6
 800b162:	f002 fb63 	bl	800d82c <memp_free>
  }
}
 800b166:	bf00      	nop
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
	...

0800b170 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b082      	sub	sp, #8
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d106      	bne.n	800b18c <netbuf_free+0x1c>
 800b17e:	4b0d      	ldr	r3, [pc, #52]	; (800b1b4 <netbuf_free+0x44>)
 800b180:	2281      	movs	r2, #129	; 0x81
 800b182:	490d      	ldr	r1, [pc, #52]	; (800b1b8 <netbuf_free+0x48>)
 800b184:	480d      	ldr	r0, [pc, #52]	; (800b1bc <netbuf_free+0x4c>)
 800b186:	f00d fa81 	bl	801868c <iprintf>
 800b18a:	e00f      	b.n	800b1ac <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d004      	beq.n	800b19e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4618      	mov	r0, r3
 800b19a:	f003 fa1d 	bl	800e5d8 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	605a      	str	r2, [r3, #4]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800b1ac:	3708      	adds	r7, #8
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	08019f4c 	.word	0x08019f4c
 800b1b8:	08019fe8 	.word	0x08019fe8
 800b1bc:	08019f9c 	.word	0x08019f9c

0800b1c0 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d108      	bne.n	800b1e6 <netbuf_ref+0x26>
 800b1d4:	4b1c      	ldr	r3, [pc, #112]	; (800b248 <netbuf_ref+0x88>)
 800b1d6:	2299      	movs	r2, #153	; 0x99
 800b1d8:	491c      	ldr	r1, [pc, #112]	; (800b24c <netbuf_ref+0x8c>)
 800b1da:	481d      	ldr	r0, [pc, #116]	; (800b250 <netbuf_ref+0x90>)
 800b1dc:	f00d fa56 	bl	801868c <iprintf>
 800b1e0:	f06f 030f 	mvn.w	r3, #15
 800b1e4:	e02b      	b.n	800b23e <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d004      	beq.n	800b1f8 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f003 f9f0 	bl	800e5d8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b1f8:	2241      	movs	r2, #65	; 0x41
 800b1fa:	2100      	movs	r1, #0
 800b1fc:	2036      	movs	r0, #54	; 0x36
 800b1fe:	f002 fed5 	bl	800dfac <pbuf_alloc>
 800b202:	4602      	mov	r2, r0
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d105      	bne.n	800b21c <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b216:	f04f 33ff 	mov.w	r3, #4294967295
 800b21a:	e010      	b.n	800b23e <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68ba      	ldr	r2, [r7, #8]
 800b222:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	88fa      	ldrh	r2, [r7, #6]
 800b22a:	811a      	strh	r2, [r3, #8]
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	6812      	ldr	r2, [r2, #0]
 800b230:	891b      	ldrh	r3, [r3, #8]
 800b232:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b23c:	2300      	movs	r3, #0
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	08019f4c 	.word	0x08019f4c
 800b24c:	0801a004 	.word	0x0801a004
 800b250:	08019f9c 	.word	0x08019f9c

0800b254 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b254:	b480      	push	{r7}
 800b256:	b085      	sub	sp, #20
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	db02      	blt.n	800b26c <tryget_socket_unconn_nouse+0x18>
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	2b03      	cmp	r3, #3
 800b26a:	dd01      	ble.n	800b270 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b26c:	2300      	movs	r3, #0
 800b26e:	e003      	b.n	800b278 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	011b      	lsls	r3, r3, #4
 800b274:	4a03      	ldr	r2, [pc, #12]	; (800b284 <tryget_socket_unconn_nouse+0x30>)
 800b276:	4413      	add	r3, r2
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	200049b8 	.word	0x200049b8

0800b288 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7ff ffdf 	bl	800b254 <tryget_socket_unconn_nouse>
 800b296:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800b298:	68fb      	ldr	r3, [r7, #12]
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800b2a2:	b580      	push	{r7, lr}
 800b2a4:	b084      	sub	sp, #16
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff ffec 	bl	800b288 <tryget_socket_unconn>
 800b2b0:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d005      	beq.n	800b2c4 <tryget_socket+0x22>
    if (sock->conn) {
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <tryget_socket+0x22>
      return sock;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	e000      	b.n	800b2c6 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800b2c4:	2300      	movs	r3, #0
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
	...

0800b2d0 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f7ff ffe2 	bl	800b2a2 <tryget_socket>
 800b2de:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d104      	bne.n	800b2f0 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800b2e6:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <get_socket+0x2c>)
 800b2e8:	2209      	movs	r2, #9
 800b2ea:	601a      	str	r2, [r3, #0]
    return NULL;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	e000      	b.n	800b2f2 <get_socket+0x22>
  }
  return sock;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	2000bda4 	.word	0x2000bda4

0800b300 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
 800b308:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b30a:	2300      	movs	r3, #0
 800b30c:	60fb      	str	r3, [r7, #12]
 800b30e:	e052      	b.n	800b3b6 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800b310:	f00d f8a4 	bl	801845c <sys_arch_protect>
 800b314:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800b316:	4a2c      	ldr	r2, [pc, #176]	; (800b3c8 <alloc_socket+0xc8>)
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	011b      	lsls	r3, r3, #4
 800b31c:	4413      	add	r3, r2
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d142      	bne.n	800b3aa <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800b324:	4a28      	ldr	r2, [pc, #160]	; (800b3c8 <alloc_socket+0xc8>)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	011b      	lsls	r3, r3, #4
 800b32a:	4413      	add	r3, r2
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800b330:	68b8      	ldr	r0, [r7, #8]
 800b332:	f00d f8a1 	bl	8018478 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800b336:	4a24      	ldr	r2, [pc, #144]	; (800b3c8 <alloc_socket+0xc8>)
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	011b      	lsls	r3, r3, #4
 800b33c:	4413      	add	r3, r2
 800b33e:	3304      	adds	r3, #4
 800b340:	2200      	movs	r2, #0
 800b342:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800b344:	4a20      	ldr	r2, [pc, #128]	; (800b3c8 <alloc_socket+0xc8>)
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	011b      	lsls	r3, r3, #4
 800b34a:	4413      	add	r3, r2
 800b34c:	330e      	adds	r3, #14
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d006      	beq.n	800b362 <alloc_socket+0x62>
 800b354:	4b1d      	ldr	r3, [pc, #116]	; (800b3cc <alloc_socket+0xcc>)
 800b356:	f240 220e 	movw	r2, #526	; 0x20e
 800b35a:	491d      	ldr	r1, [pc, #116]	; (800b3d0 <alloc_socket+0xd0>)
 800b35c:	481d      	ldr	r0, [pc, #116]	; (800b3d4 <alloc_socket+0xd4>)
 800b35e:	f00d f995 	bl	801868c <iprintf>
      sockets[i].rcvevent   = 0;
 800b362:	4a19      	ldr	r2, [pc, #100]	; (800b3c8 <alloc_socket+0xc8>)
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	011b      	lsls	r3, r3, #4
 800b368:	4413      	add	r3, r2
 800b36a:	3308      	adds	r3, #8
 800b36c:	2200      	movs	r2, #0
 800b36e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b378:	2b10      	cmp	r3, #16
 800b37a:	d102      	bne.n	800b382 <alloc_socket+0x82>
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <alloc_socket+0x86>
 800b382:	2301      	movs	r3, #1
 800b384:	e000      	b.n	800b388 <alloc_socket+0x88>
 800b386:	2300      	movs	r3, #0
 800b388:	b299      	uxth	r1, r3
 800b38a:	4a0f      	ldr	r2, [pc, #60]	; (800b3c8 <alloc_socket+0xc8>)
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	011b      	lsls	r3, r3, #4
 800b390:	4413      	add	r3, r2
 800b392:	330a      	adds	r3, #10
 800b394:	460a      	mov	r2, r1
 800b396:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800b398:	4a0b      	ldr	r2, [pc, #44]	; (800b3c8 <alloc_socket+0xc8>)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	011b      	lsls	r3, r3, #4
 800b39e:	4413      	add	r3, r2
 800b3a0:	330c      	adds	r3, #12
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	e00a      	b.n	800b3c0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800b3aa:	68b8      	ldr	r0, [r7, #8]
 800b3ac:	f00d f864 	bl	8018478 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	60fb      	str	r3, [r7, #12]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2b03      	cmp	r3, #3
 800b3ba:	dda9      	ble.n	800b310 <alloc_socket+0x10>
  }
  return -1;
 800b3bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	200049b8 	.word	0x200049b8
 800b3cc:	0801a0e4 	.word	0x0801a0e4
 800b3d0:	0801a118 	.word	0x0801a118
 800b3d4:	0801a138 	.word	0x0801a138

0800b3d8 <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	607a      	str	r2, [r7, #4]
 800b3e4:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	6852      	ldr	r2, [r2, #4]
 800b3ec:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681a      	ldr	r2, [r3, #0]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2200      	movs	r2, #0
 800b400:	601a      	str	r2, [r3, #0]
  return 1;
 800b402:	2301      	movs	r3, #1
}
 800b404:	4618      	mov	r0, r3
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b084      	sub	sp, #16
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00d      	beq.n	800b440 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d005      	beq.n	800b436 <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4618      	mov	r0, r3
 800b430:	f003 f8d2 	bl	800e5d8 <pbuf_free>
 800b434:	e004      	b.n	800b440 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7ff fe78 	bl	800b130 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d002      	beq.n	800b44c <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800b446:	68b8      	ldr	r0, [r7, #8]
 800b448:	f7fd fd04 	bl	8008e54 <netconn_delete>
  }
}
 800b44c:	bf00      	nop
 800b44e:	3710      	adds	r7, #16
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b086      	sub	sp, #24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800b45e:	f00c fffd 	bl	801845c <sys_arch_protect>
 800b462:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800b464:	f107 0308 	add.w	r3, r7, #8
 800b468:	f107 020c 	add.w	r2, r7, #12
 800b46c:	6839      	ldr	r1, [r7, #0]
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f7ff ffb2 	bl	800b3d8 <free_socket_locked>
 800b474:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800b476:	6978      	ldr	r0, [r7, #20]
 800b478:	f00c fffe 	bl	8018478 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d006      	beq.n	800b490 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	f107 0208 	add.w	r2, r7, #8
 800b488:	4619      	mov	r1, r3
 800b48a:	6838      	ldr	r0, [r7, #0]
 800b48c:	f7ff ffc0 	bl	800b410 <free_socket_free_elements>
  }
}
 800b490:	bf00      	nop
 800b492:	3718      	adds	r7, #24
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <lwip_accept>:
 * Exceptions are documented!
 */

int
lwip_accept(int s, struct sockaddr *addr, socklen_t *addrlen)
{
 800b498:	b590      	push	{r4, r7, lr}
 800b49a:	b099      	sub	sp, #100	; 0x64
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock, *nsock;
  struct netconn *newconn;
  ip_addr_t naddr;
  u16_t port = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	84fb      	strh	r3, [r7, #38]	; 0x26
  err_t err;
  int recvevent;
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d)...\n", s));
  sock = get_socket(s);
 800b4a8:	68f8      	ldr	r0, [r7, #12]
 800b4aa:	f7ff ff11 	bl	800b2d0 <get_socket>
 800b4ae:	65b8      	str	r0, [r7, #88]	; 0x58
  if (!sock) {
 800b4b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d102      	bne.n	800b4bc <lwip_accept+0x24>
    return -1;
 800b4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ba:	e0f8      	b.n	800b6ae <lwip_accept+0x216>
  }

  /* wait for a new connection */
  err = netconn_accept(sock->conn, &newconn);
 800b4bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b4c4:	4611      	mov	r1, r2
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fd fd96 	bl	8008ff8 <netconn_accept>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (err != ERR_OK) {
 800b4d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d02c      	beq.n	800b534 <lwip_accept+0x9c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_acept failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b4da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b4e4:	2b10      	cmp	r3, #16
 800b4e6:	d008      	beq.n	800b4fa <lwip_accept+0x62>
      sock_set_errno(sock, EOPNOTSUPP);
 800b4e8:	235f      	movs	r3, #95	; 0x5f
 800b4ea:	633b      	str	r3, [r7, #48]	; 0x30
 800b4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d01d      	beq.n	800b52e <lwip_accept+0x96>
 800b4f2:	4a71      	ldr	r2, [pc, #452]	; (800b6b8 <lwip_accept+0x220>)
 800b4f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	e019      	b.n	800b52e <lwip_accept+0x96>
    } else if (err == ERR_CLSD) {
 800b4fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b4fe:	f113 0f0f 	cmn.w	r3, #15
 800b502:	d108      	bne.n	800b516 <lwip_accept+0x7e>
      sock_set_errno(sock, EINVAL);
 800b504:	2316      	movs	r3, #22
 800b506:	637b      	str	r3, [r7, #52]	; 0x34
 800b508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d00f      	beq.n	800b52e <lwip_accept+0x96>
 800b50e:	4a6a      	ldr	r2, [pc, #424]	; (800b6b8 <lwip_accept+0x220>)
 800b510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b512:	6013      	str	r3, [r2, #0]
 800b514:	e00b      	b.n	800b52e <lwip_accept+0x96>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800b516:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7ff fdea 	bl	800b0f4 <err_to_errno>
 800b520:	63b8      	str	r0, [r7, #56]	; 0x38
 800b522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <lwip_accept+0x96>
 800b528:	4a63      	ldr	r2, [pc, #396]	; (800b6b8 <lwip_accept+0x220>)
 800b52a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b52c:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800b52e:	f04f 33ff 	mov.w	r3, #4294967295
 800b532:	e0bc      	b.n	800b6ae <lwip_accept+0x216>
  }
  LWIP_ASSERT("newconn != NULL", newconn != NULL);
 800b534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d106      	bne.n	800b548 <lwip_accept+0xb0>
 800b53a:	4b60      	ldr	r3, [pc, #384]	; (800b6bc <lwip_accept+0x224>)
 800b53c:	f240 228b 	movw	r2, #651	; 0x28b
 800b540:	495f      	ldr	r1, [pc, #380]	; (800b6c0 <lwip_accept+0x228>)
 800b542:	4860      	ldr	r0, [pc, #384]	; (800b6c4 <lwip_accept+0x22c>)
 800b544:	f00d f8a2 	bl	801868c <iprintf>

  newsock = alloc_socket(newconn, 1);
 800b548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b54a:	2101      	movs	r1, #1
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7ff fed7 	bl	800b300 <alloc_socket>
 800b552:	6538      	str	r0, [r7, #80]	; 0x50
  if (newsock == -1) {
 800b554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55a:	d10e      	bne.n	800b57a <lwip_accept+0xe2>
    netconn_delete(newconn);
 800b55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fd fc78 	bl	8008e54 <netconn_delete>
    sock_set_errno(sock, ENFILE);
 800b564:	2317      	movs	r3, #23
 800b566:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d002      	beq.n	800b574 <lwip_accept+0xdc>
 800b56e:	4a52      	ldr	r2, [pc, #328]	; (800b6b8 <lwip_accept+0x220>)
 800b570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b572:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b574:	f04f 33ff 	mov.w	r3, #4294967295
 800b578:	e099      	b.n	800b6ae <lwip_accept+0x216>
  }
  LWIP_ASSERT("invalid socket index", (newsock >= LWIP_SOCKET_OFFSET) && (newsock < NUM_SOCKETS + LWIP_SOCKET_OFFSET));
 800b57a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	db02      	blt.n	800b586 <lwip_accept+0xee>
 800b580:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b582:	2b03      	cmp	r3, #3
 800b584:	dd06      	ble.n	800b594 <lwip_accept+0xfc>
 800b586:	4b4d      	ldr	r3, [pc, #308]	; (800b6bc <lwip_accept+0x224>)
 800b588:	f44f 7225 	mov.w	r2, #660	; 0x294
 800b58c:	494e      	ldr	r1, [pc, #312]	; (800b6c8 <lwip_accept+0x230>)
 800b58e:	484d      	ldr	r0, [pc, #308]	; (800b6c4 <lwip_accept+0x22c>)
 800b590:	f00d f87c 	bl	801868c <iprintf>
  nsock = &sockets[newsock - LWIP_SOCKET_OFFSET];
 800b594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b596:	011b      	lsls	r3, r3, #4
 800b598:	4a4c      	ldr	r2, [pc, #304]	; (800b6cc <lwip_accept+0x234>)
 800b59a:	4413      	add	r3, r2
 800b59c:	64fb      	str	r3, [r7, #76]	; 0x4c
  /* See event_callback: If data comes in right away after an accept, even
   * though the server task might not have created a new socket yet.
   * In that case, newconn->socket is counted down (newconn->socket--),
   * so nsock->rcvevent is >= 1 here!
   */
  SYS_ARCH_PROTECT(lev);
 800b59e:	f00c ff5d 	bl	801845c <sys_arch_protect>
 800b5a2:	64b8      	str	r0, [r7, #72]	; 0x48
  recvevent = (s16_t)(-1 - newconn->socket);
 800b5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	b21b      	sxth	r3, r3
 800b5aa:	43db      	mvns	r3, r3
 800b5ac:	b21b      	sxth	r3, r3
 800b5ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  newconn->socket = newsock;
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5b4:	619a      	str	r2, [r3, #24]
  SYS_ARCH_UNPROTECT(lev);
 800b5b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b5b8:	f00c ff5e 	bl	8018478 <sys_arch_unprotect>

  if (newconn->callback) {
 800b5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d012      	beq.n	800b5ea <lwip_accept+0x152>
    LOCK_TCPIP_CORE();
 800b5c4:	4842      	ldr	r0, [pc, #264]	; (800b6d0 <lwip_accept+0x238>)
 800b5c6:	f00c ff0d 	bl	80183e4 <sys_mutex_lock>
    while (recvevent > 0) {
 800b5ca:	e008      	b.n	800b5de <lwip_accept+0x146>
      recvevent--;
 800b5cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	65fb      	str	r3, [r7, #92]	; 0x5c
      newconn->callback(newconn, NETCONN_EVT_RCVPLUS, 0);
 800b5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5d8:	2200      	movs	r2, #0
 800b5da:	2100      	movs	r1, #0
 800b5dc:	4798      	blx	r3
    while (recvevent > 0) {
 800b5de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	dcf3      	bgt.n	800b5cc <lwip_accept+0x134>
    }
    UNLOCK_TCPIP_CORE();
 800b5e4:	483a      	ldr	r0, [pc, #232]	; (800b6d0 <lwip_accept+0x238>)
 800b5e6:	f00c ff0c 	bl	8018402 <sys_mutex_unlock>
  }

  /* Note that POSIX only requires us to check addr is non-NULL. addrlen must
   * not be NULL if addr is valid.
   */
  if ((addr != NULL) && (addrlen != NULL)) {
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d055      	beq.n	800b69c <lwip_accept+0x204>
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d052      	beq.n	800b69c <lwip_accept+0x204>
    union sockaddr_aligned tempaddr;
    /* get the IP address and port of the remote host */
    err = netconn_peer(newconn, &naddr, &port);
 800b5f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b5f8:	f107 0226 	add.w	r2, r7, #38	; 0x26
 800b5fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800b600:	2300      	movs	r3, #0
 800b602:	f7fd fc43 	bl	8008e8c <netconn_getaddr>
 800b606:	4603      	mov	r3, r0
 800b608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    if (err != ERR_OK) {
 800b60c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b610:	2b00      	cmp	r3, #0
 800b612:	d016      	beq.n	800b642 <lwip_accept+0x1aa>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d): netconn_peer failed, err=%d\n", s, err));
      netconn_delete(newconn);
 800b614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b616:	4618      	mov	r0, r3
 800b618:	f7fd fc1c 	bl	8008e54 <netconn_delete>
      free_socket(nsock, 1);
 800b61c:	2101      	movs	r1, #1
 800b61e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800b620:	f7ff ff18 	bl	800b454 <free_socket>
      sock_set_errno(sock, err_to_errno(err));
 800b624:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b628:	4618      	mov	r0, r3
 800b62a:	f7ff fd63 	bl	800b0f4 <err_to_errno>
 800b62e:	6478      	str	r0, [r7, #68]	; 0x44
 800b630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b632:	2b00      	cmp	r3, #0
 800b634:	d002      	beq.n	800b63c <lwip_accept+0x1a4>
 800b636:	4a20      	ldr	r2, [pc, #128]	; (800b6b8 <lwip_accept+0x220>)
 800b638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b63a:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800b63c:	f04f 33ff 	mov.w	r3, #4294967295
 800b640:	e035      	b.n	800b6ae <lwip_accept+0x216>
    }

    IPADDR_PORT_TO_SOCKADDR(&tempaddr, &naddr, port);
 800b642:	f107 0314 	add.w	r3, r7, #20
 800b646:	2210      	movs	r2, #16
 800b648:	701a      	strb	r2, [r3, #0]
 800b64a:	f107 0314 	add.w	r3, r7, #20
 800b64e:	2202      	movs	r2, #2
 800b650:	705a      	strb	r2, [r3, #1]
 800b652:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b654:	f107 0414 	add.w	r4, r7, #20
 800b658:	4618      	mov	r0, r3
 800b65a:	f001 f915 	bl	800c888 <lwip_htons>
 800b65e:	4603      	mov	r3, r0
 800b660:	8063      	strh	r3, [r4, #2]
 800b662:	f107 0314 	add.w	r3, r7, #20
 800b666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b668:	605a      	str	r2, [r3, #4]
 800b66a:	f107 0314 	add.w	r3, r7, #20
 800b66e:	3308      	adds	r3, #8
 800b670:	2208      	movs	r2, #8
 800b672:	2100      	movs	r1, #0
 800b674:	4618      	mov	r0, r3
 800b676:	f00c ff57 	bl	8018528 <memset>
    if (*addrlen > tempaddr.sa.sa_len) {
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	7d3a      	ldrb	r2, [r7, #20]
 800b680:	4293      	cmp	r3, r2
 800b682:	d903      	bls.n	800b68c <lwip_accept+0x1f4>
      *addrlen = tempaddr.sa.sa_len;
 800b684:	7d3b      	ldrb	r3, [r7, #20]
 800b686:	461a      	mov	r2, r3
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	601a      	str	r2, [r3, #0]
    }
    MEMCPY(addr, &tempaddr, *addrlen);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	f107 0314 	add.w	r3, r7, #20
 800b694:	4619      	mov	r1, r3
 800b696:	68b8      	ldr	r0, [r7, #8]
 800b698:	f00c ff38 	bl	801850c <memcpy>
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F"\n", port));
  } else {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_accept(%d) returning new sock=%d", s, newsock));
  }

  sock_set_errno(sock, 0);
 800b69c:	2300      	movs	r3, #0
 800b69e:	643b      	str	r3, [r7, #64]	; 0x40
 800b6a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d002      	beq.n	800b6ac <lwip_accept+0x214>
 800b6a6:	4a04      	ldr	r2, [pc, #16]	; (800b6b8 <lwip_accept+0x220>)
 800b6a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6aa:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  done_socket(nsock);
  return newsock;
 800b6ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	3764      	adds	r7, #100	; 0x64
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd90      	pop	{r4, r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	2000bda4 	.word	0x2000bda4
 800b6bc:	0801a0e4 	.word	0x0801a0e4
 800b6c0:	0801a160 	.word	0x0801a160
 800b6c4:	0801a138 	.word	0x0801a138
 800b6c8:	0801a170 	.word	0x0801a170
 800b6cc:	200049b8 	.word	0x200049b8
 800b6d0:	20008528 	.word	0x20008528

0800b6d4 <lwip_bind>:

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08a      	sub	sp, #40	; 0x28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	f7ff fdf5 	bl	800b2d0 <get_socket>
 800b6e6:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d102      	bne.n	800b6f4 <lwip_bind+0x20>
    return -1;
 800b6ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b6f2:	e051      	b.n	800b798 <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b10      	cmp	r3, #16
 800b6f8:	d108      	bne.n	800b70c <lwip_bind+0x38>
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	785b      	ldrb	r3, [r3, #1]
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d104      	bne.n	800b70c <lwip_bind+0x38>
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	f003 0303 	and.w	r3, r3, #3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d014      	beq.n	800b736 <lwip_bind+0x62>
 800b70c:	4b24      	ldr	r3, [pc, #144]	; (800b7a0 <lwip_bind+0xcc>)
 800b70e:	f240 22e2 	movw	r2, #738	; 0x2e2
 800b712:	4924      	ldr	r1, [pc, #144]	; (800b7a4 <lwip_bind+0xd0>)
 800b714:	4824      	ldr	r0, [pc, #144]	; (800b7a8 <lwip_bind+0xd4>)
 800b716:	f00c ffb9 	bl	801868c <iprintf>
 800b71a:	f06f 000f 	mvn.w	r0, #15
 800b71e:	f7ff fce9 	bl	800b0f4 <err_to_errno>
 800b722:	6178      	str	r0, [r7, #20]
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d002      	beq.n	800b730 <lwip_bind+0x5c>
 800b72a:	4a20      	ldr	r2, [pc, #128]	; (800b7ac <lwip_bind+0xd8>)
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	6013      	str	r3, [r2, #0]
 800b730:	f04f 33ff 	mov.w	r3, #4294967295
 800b734:	e030      	b.n	800b798 <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	613b      	str	r3, [r7, #16]
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	885b      	ldrh	r3, [r3, #2]
 800b740:	4618      	mov	r0, r3
 800b742:	f001 f8a1 	bl	800c888 <lwip_htons>
 800b746:	4603      	mov	r3, r0
 800b748:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800b74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b750:	f107 0110 	add.w	r1, r7, #16
 800b754:	4618      	mov	r0, r3
 800b756:	f7fd fbeb 	bl	8008f30 <netconn_bind>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800b760:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00e      	beq.n	800b786 <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800b768:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7ff fcc1 	bl	800b0f4 <err_to_errno>
 800b772:	61b8      	str	r0, [r7, #24]
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d002      	beq.n	800b780 <lwip_bind+0xac>
 800b77a:	4a0c      	ldr	r2, [pc, #48]	; (800b7ac <lwip_bind+0xd8>)
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b780:	f04f 33ff 	mov.w	r3, #4294967295
 800b784:	e008      	b.n	800b798 <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800b786:	2300      	movs	r3, #0
 800b788:	61fb      	str	r3, [r7, #28]
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d002      	beq.n	800b796 <lwip_bind+0xc2>
 800b790:	4a06      	ldr	r2, [pc, #24]	; (800b7ac <lwip_bind+0xd8>)
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3728      	adds	r7, #40	; 0x28
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}
 800b7a0:	0801a0e4 	.word	0x0801a0e4
 800b7a4:	0801a188 	.word	0x0801a188
 800b7a8:	0801a138 	.word	0x0801a138
 800b7ac:	2000bda4 	.word	0x2000bda4

0800b7b0 <lwip_close>:

int
lwip_close(int s)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f7ff fd87 	bl	800b2d0 <get_socket>
 800b7c2:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800b7c4:	693b      	ldr	r3, [r7, #16]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d102      	bne.n	800b7d0 <lwip_close+0x20>
    return -1;
 800b7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ce:	e039      	b.n	800b844 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800b7d0:	693b      	ldr	r3, [r7, #16]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d00b      	beq.n	800b7f0 <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7e2:	2b10      	cmp	r3, #16
 800b7e4:	bf0c      	ite	eq
 800b7e6:	2301      	moveq	r3, #1
 800b7e8:	2300      	movne	r3, #0
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	617b      	str	r3, [r7, #20]
 800b7ee:	e00a      	b.n	800b806 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d006      	beq.n	800b806 <lwip_close+0x56>
 800b7f8:	4b14      	ldr	r3, [pc, #80]	; (800b84c <lwip_close+0x9c>)
 800b7fa:	f44f 7245 	mov.w	r2, #788	; 0x314
 800b7fe:	4914      	ldr	r1, [pc, #80]	; (800b850 <lwip_close+0xa0>)
 800b800:	4814      	ldr	r0, [pc, #80]	; (800b854 <lwip_close+0xa4>)
 800b802:	f00c ff43 	bl	801868c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7fd fafe 	bl	8008e0c <netconn_prepare_delete>
 800b810:	4603      	mov	r3, r0
 800b812:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00e      	beq.n	800b83a <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800b81c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b820:	4618      	mov	r0, r3
 800b822:	f7ff fc67 	bl	800b0f4 <err_to_errno>
 800b826:	60b8      	str	r0, [r7, #8]
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d002      	beq.n	800b834 <lwip_close+0x84>
 800b82e:	4a0a      	ldr	r2, [pc, #40]	; (800b858 <lwip_close+0xa8>)
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b834:	f04f 33ff 	mov.w	r3, #4294967295
 800b838:	e004      	b.n	800b844 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800b83a:	6979      	ldr	r1, [r7, #20]
 800b83c:	6938      	ldr	r0, [r7, #16]
 800b83e:	f7ff fe09 	bl	800b454 <free_socket>
  set_errno(0);
  return 0;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3718      	adds	r7, #24
 800b848:	46bd      	mov	sp, r7
 800b84a:	bd80      	pop	{r7, pc}
 800b84c:	0801a0e4 	.word	0x0801a0e4
 800b850:	0801a1a4 	.word	0x0801a1a4
 800b854:	0801a138 	.word	0x0801a138
 800b858:	2000bda4 	.word	0x2000bda4

0800b85c <lwip_listen>:
 * @param backlog (ATTENTION: needs TCP_LISTEN_BACKLOG=1)
 * @return 0 on success, non-zero on failure
 */
int
lwip_listen(int s, int backlog)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
  struct lwip_sock *sock;
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d, backlog=%d)\n", s, backlog));

  sock = get_socket(s);
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff fd32 	bl	800b2d0 <get_socket>
 800b86c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800b86e:	69fb      	ldr	r3, [r7, #28]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d102      	bne.n	800b87a <lwip_listen+0x1e>
    return -1;
 800b874:	f04f 33ff 	mov.w	r3, #4294967295
 800b878:	e03e      	b.n	800b8f8 <lwip_listen+0x9c>
  }

  /* limit the "backlog" parameter to fit in an u8_t */
  backlog = LWIP_MIN(LWIP_MAX(backlog, 0), 0xff);
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2bfe      	cmp	r3, #254	; 0xfe
 800b87e:	dc03      	bgt.n	800b888 <lwip_listen+0x2c>
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b886:	e000      	b.n	800b88a <lwip_listen+0x2e>
 800b888:	23ff      	movs	r3, #255	; 0xff
 800b88a:	603b      	str	r3, [r7, #0]

  err = netconn_listen_with_backlog(sock->conn, (u8_t)backlog);
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	683a      	ldr	r2, [r7, #0]
 800b892:	b2d2      	uxtb	r2, r2
 800b894:	4611      	mov	r1, r2
 800b896:	4618      	mov	r0, r3
 800b898:	f7fd fb82 	bl	8008fa0 <netconn_listen_with_backlog>
 800b89c:	4603      	mov	r3, r0
 800b89e:	76fb      	strb	r3, [r7, #27]

  if (err != ERR_OK) {
 800b8a0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d01e      	beq.n	800b8e6 <lwip_listen+0x8a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_listen(%d) failed, err=%d\n", s, err));
    if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8b2:	2b10      	cmp	r3, #16
 800b8b4:	d008      	beq.n	800b8c8 <lwip_listen+0x6c>
      sock_set_errno(sock, EOPNOTSUPP);
 800b8b6:	235f      	movs	r3, #95	; 0x5f
 800b8b8:	60fb      	str	r3, [r7, #12]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00f      	beq.n	800b8e0 <lwip_listen+0x84>
 800b8c0:	4a0f      	ldr	r2, [pc, #60]	; (800b900 <lwip_listen+0xa4>)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	e00b      	b.n	800b8e0 <lwip_listen+0x84>
    } else {
      sock_set_errno(sock, err_to_errno(err));
 800b8c8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7ff fc11 	bl	800b0f4 <err_to_errno>
 800b8d2:	6138      	str	r0, [r7, #16]
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <lwip_listen+0x84>
 800b8da:	4a09      	ldr	r2, [pc, #36]	; (800b900 <lwip_listen+0xa4>)
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	6013      	str	r3, [r2, #0]
    }
    done_socket(sock);
    return -1;
 800b8e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b8e4:	e008      	b.n	800b8f8 <lwip_listen+0x9c>
  }

  sock_set_errno(sock, 0);
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <lwip_listen+0x9a>
 800b8f0:	4a03      	ldr	r2, [pc, #12]	; (800b900 <lwip_listen+0xa4>)
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3720      	adds	r7, #32
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	2000bda4 	.word	0x2000bda4

0800b904 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08c      	sub	sp, #48	; 0x30
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800b912:	2308      	movs	r3, #8
 800b914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800b918:	2300      	movs	r3, #0
 800b91a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	db01      	blt.n	800b926 <lwip_recv_tcp+0x22>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	e001      	b.n	800b92a <lwip_recv_tcp+0x26>
 800b926:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b92a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d106      	bne.n	800b940 <lwip_recv_tcp+0x3c>
 800b932:	4b74      	ldr	r3, [pc, #464]	; (800bb04 <lwip_recv_tcp+0x200>)
 800b934:	f240 329e 	movw	r2, #926	; 0x39e
 800b938:	4973      	ldr	r1, [pc, #460]	; (800bb08 <lwip_recv_tcp+0x204>)
 800b93a:	4874      	ldr	r0, [pc, #464]	; (800bb0c <lwip_recv_tcp+0x208>)
 800b93c:	f00c fea6 	bl	801868c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	781b      	ldrb	r3, [r3, #0]
 800b946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b94a:	2b10      	cmp	r3, #16
 800b94c:	d006      	beq.n	800b95c <lwip_recv_tcp+0x58>
 800b94e:	4b6d      	ldr	r3, [pc, #436]	; (800bb04 <lwip_recv_tcp+0x200>)
 800b950:	f240 329f 	movw	r2, #927	; 0x39f
 800b954:	496e      	ldr	r1, [pc, #440]	; (800bb10 <lwip_recv_tcp+0x20c>)
 800b956:	486d      	ldr	r0, [pc, #436]	; (800bb0c <lwip_recv_tcp+0x208>)
 800b958:	f00c fe98 	bl	801868c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	f003 0308 	and.w	r3, r3, #8
 800b962:	2b00      	cmp	r3, #0
 800b964:	d005      	beq.n	800b972 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800b966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b96a:	f043 0304 	orr.w	r3, r3, #4
 800b96e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	685b      	ldr	r3, [r3, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d003      	beq.n	800b982 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	617b      	str	r3, [r7, #20]
 800b980:	e036      	b.n	800b9f0 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b98a:	f107 0114 	add.w	r1, r7, #20
 800b98e:	4618      	mov	r0, r3
 800b990:	f7fd fd68 	bl	8009464 <netconn_recv_tcp_pbuf_flags>
 800b994:	4603      	mov	r3, r0
 800b996:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800b99a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d019      	beq.n	800b9d6 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800b9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f300 808d 	bgt.w	800bac4 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800b9aa:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f7ff fba0 	bl	800b0f4 <err_to_errno>
 800b9b4:	61f8      	str	r0, [r7, #28]
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d002      	beq.n	800b9c2 <lwip_recv_tcp+0xbe>
 800b9bc:	4a55      	ldr	r2, [pc, #340]	; (800bb14 <lwip_recv_tcp+0x210>)
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800b9c2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800b9c6:	f113 0f0f 	cmn.w	r3, #15
 800b9ca:	d101      	bne.n	800b9d0 <lwip_recv_tcp+0xcc>
          return 0;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	e094      	b.n	800bafa <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800b9d0:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d4:	e091      	b.n	800bafa <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <lwip_recv_tcp+0xe6>
 800b9dc:	4b49      	ldr	r3, [pc, #292]	; (800bb04 <lwip_recv_tcp+0x200>)
 800b9de:	f240 32c5 	movw	r2, #965	; 0x3c5
 800b9e2:	494d      	ldr	r1, [pc, #308]	; (800bb18 <lwip_recv_tcp+0x214>)
 800b9e4:	4849      	ldr	r0, [pc, #292]	; (800bb0c <lwip_recv_tcp+0x208>)
 800b9e6:	f00c fe51 	bl	801868c <iprintf>
      sock->lastdata.pbuf = p;
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	891b      	ldrh	r3, [r3, #8]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	dd03      	ble.n	800ba04 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	891b      	ldrh	r3, [r3, #8]
 800ba00:	847b      	strh	r3, [r7, #34]	; 0x22
 800ba02:	e001      	b.n	800ba08 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800ba08:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	4413      	add	r3, r2
 800ba0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba10:	429a      	cmp	r2, r3
 800ba12:	dd03      	ble.n	800ba1c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800ba14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	43db      	mvns	r3, r3
 800ba1a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800ba1c:	6978      	ldr	r0, [r7, #20]
 800ba1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba20:	68ba      	ldr	r2, [r7, #8]
 800ba22:	18d1      	adds	r1, r2, r3
 800ba24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba26:	2300      	movs	r3, #0
 800ba28:	f002 ffdc 	bl	800e9e4 <pbuf_copy_partial>

    recvd += copylen;
 800ba2c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba30:	4413      	add	r3, r2
 800ba32:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800ba34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	da06      	bge.n	800ba4a <lwip_recv_tcp+0x146>
 800ba3c:	4b31      	ldr	r3, [pc, #196]	; (800bb04 <lwip_recv_tcp+0x200>)
 800ba3e:	f240 32dd 	movw	r2, #989	; 0x3dd
 800ba42:	4936      	ldr	r1, [pc, #216]	; (800bb1c <lwip_recv_tcp+0x218>)
 800ba44:	4831      	ldr	r0, [pc, #196]	; (800bb0c <lwip_recv_tcp+0x208>)
 800ba46:	f00c fe21 	bl	801868c <iprintf>
    recv_left -= copylen;
 800ba4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba4e:	1ad3      	subs	r3, r2, r3
 800ba50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d123      	bne.n	800baa4 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	891b      	ldrh	r3, [r3, #8]
 800ba60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d906      	bls.n	800ba74 <lwip_recv_tcp+0x170>
 800ba66:	4b27      	ldr	r3, [pc, #156]	; (800bb04 <lwip_recv_tcp+0x200>)
 800ba68:	f240 32e3 	movw	r2, #995	; 0x3e3
 800ba6c:	492c      	ldr	r1, [pc, #176]	; (800bb20 <lwip_recv_tcp+0x21c>)
 800ba6e:	4827      	ldr	r0, [pc, #156]	; (800bb0c <lwip_recv_tcp+0x208>)
 800ba70:	f00c fe0c 	bl	801868c <iprintf>
      if (p->tot_len - copylen > 0) {
 800ba74:	697b      	ldr	r3, [r7, #20]
 800ba76:	891b      	ldrh	r3, [r3, #8]
 800ba78:	461a      	mov	r2, r3
 800ba7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	dd09      	ble.n	800ba96 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ba86:	4611      	mov	r1, r2
 800ba88:	4618      	mov	r0, r3
 800ba8a:	f002 fd72 	bl	800e572 <pbuf_free_header>
 800ba8e:	4602      	mov	r2, r0
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	605a      	str	r2, [r3, #4]
 800ba94:	e006      	b.n	800baa4 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f002 fd9a 	bl	800e5d8 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800baa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800baa8:	f043 0314 	orr.w	r3, r3, #20
 800baac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	dd08      	ble.n	800bac8 <lwip_recv_tcp+0x1c4>
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	2b00      	cmp	r3, #0
 800babe:	f43f af58 	beq.w	800b972 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800bac2:	e001      	b.n	800bac8 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800bac4:	bf00      	nop
 800bac6:	e000      	b.n	800baca <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800bac8:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800baca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bacc:	2b00      	cmp	r3, #0
 800bace:	dd0b      	ble.n	800bae8 <lwip_recv_tcp+0x1e4>
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	f003 0301 	and.w	r3, r3, #1
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d106      	bne.n	800bae8 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae0:	4611      	mov	r1, r2
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7fd fc0c 	bl	8009300 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800bae8:	2300      	movs	r3, #0
 800baea:	61bb      	str	r3, [r7, #24]
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d002      	beq.n	800baf8 <lwip_recv_tcp+0x1f4>
 800baf2:	4a08      	ldr	r2, [pc, #32]	; (800bb14 <lwip_recv_tcp+0x210>)
 800baf4:	69bb      	ldr	r3, [r7, #24]
 800baf6:	6013      	str	r3, [r2, #0]
  return recvd;
 800baf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3730      	adds	r7, #48	; 0x30
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	0801a0e4 	.word	0x0801a0e4
 800bb08:	0801a1dc 	.word	0x0801a1dc
 800bb0c:	0801a138 	.word	0x0801a138
 800bb10:	0801a1ec 	.word	0x0801a1ec
 800bb14:	2000bda4 	.word	0x2000bda4
 800bb18:	0801a210 	.word	0x0801a210
 800bb1c:	0801a21c 	.word	0x0801a21c
 800bb20:	0801a244 	.word	0x0801a244

0800bb24 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800bb24:	b590      	push	{r4, r7, lr}
 800bb26:	b08b      	sub	sp, #44	; 0x2c
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	603b      	str	r3, [r7, #0]
 800bb30:	4613      	mov	r3, r2
 800bb32:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d106      	bne.n	800bb4c <lwip_sock_make_addr+0x28>
 800bb3e:	4b2b      	ldr	r3, [pc, #172]	; (800bbec <lwip_sock_make_addr+0xc8>)
 800bb40:	f240 4207 	movw	r2, #1031	; 0x407
 800bb44:	492a      	ldr	r1, [pc, #168]	; (800bbf0 <lwip_sock_make_addr+0xcc>)
 800bb46:	482b      	ldr	r0, [pc, #172]	; (800bbf4 <lwip_sock_make_addr+0xd0>)
 800bb48:	f00c fda0 	bl	801868c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d106      	bne.n	800bb60 <lwip_sock_make_addr+0x3c>
 800bb52:	4b26      	ldr	r3, [pc, #152]	; (800bbec <lwip_sock_make_addr+0xc8>)
 800bb54:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800bb58:	4927      	ldr	r1, [pc, #156]	; (800bbf8 <lwip_sock_make_addr+0xd4>)
 800bb5a:	4826      	ldr	r0, [pc, #152]	; (800bbf4 <lwip_sock_make_addr+0xd0>)
 800bb5c:	f00c fd96 	bl	801868c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800bb60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d106      	bne.n	800bb74 <lwip_sock_make_addr+0x50>
 800bb66:	4b21      	ldr	r3, [pc, #132]	; (800bbec <lwip_sock_make_addr+0xc8>)
 800bb68:	f240 4209 	movw	r2, #1033	; 0x409
 800bb6c:	4923      	ldr	r1, [pc, #140]	; (800bbfc <lwip_sock_make_addr+0xd8>)
 800bb6e:	4821      	ldr	r0, [pc, #132]	; (800bbf4 <lwip_sock_make_addr+0xd0>)
 800bb70:	f00c fd8c 	bl	801868c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800bb74:	f107 0314 	add.w	r3, r7, #20
 800bb78:	2210      	movs	r2, #16
 800bb7a:	701a      	strb	r2, [r3, #0]
 800bb7c:	f107 0314 	add.w	r3, r7, #20
 800bb80:	2202      	movs	r2, #2
 800bb82:	705a      	strb	r2, [r3, #1]
 800bb84:	f107 0414 	add.w	r4, r7, #20
 800bb88:	88fb      	ldrh	r3, [r7, #6]
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 fe7c 	bl	800c888 <lwip_htons>
 800bb90:	4603      	mov	r3, r0
 800bb92:	8063      	strh	r3, [r4, #2]
 800bb94:	f107 0314 	add.w	r3, r7, #20
 800bb98:	68ba      	ldr	r2, [r7, #8]
 800bb9a:	6812      	ldr	r2, [r2, #0]
 800bb9c:	605a      	str	r2, [r3, #4]
 800bb9e:	f107 0314 	add.w	r3, r7, #20
 800bba2:	3308      	adds	r3, #8
 800bba4:	2208      	movs	r2, #8
 800bba6:	2100      	movs	r1, #0
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f00c fcbd 	bl	8018528 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800bbae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	7d3a      	ldrb	r2, [r7, #20]
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d202      	bcs.n	800bbbe <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	627b      	str	r3, [r7, #36]	; 0x24
 800bbbc:	e008      	b.n	800bbd0 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800bbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	7d3a      	ldrb	r2, [r7, #20]
 800bbc4:	4293      	cmp	r3, r2
 800bbc6:	d903      	bls.n	800bbd0 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800bbc8:	7d3b      	ldrb	r3, [r7, #20]
 800bbca:	461a      	mov	r2, r3
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbce:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	f107 0314 	add.w	r3, r7, #20
 800bbd8:	4619      	mov	r1, r3
 800bbda:	6838      	ldr	r0, [r7, #0]
 800bbdc:	f00c fc96 	bl	801850c <memcpy>
  return truncated;
 800bbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	372c      	adds	r7, #44	; 0x2c
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd90      	pop	{r4, r7, pc}
 800bbea:	bf00      	nop
 800bbec:	0801a0e4 	.word	0x0801a0e4
 800bbf0:	0801a254 	.word	0x0801a254
 800bbf4:	0801a138 	.word	0x0801a138
 800bbf8:	0801a268 	.word	0x0801a268
 800bbfc:	0801a278 	.word	0x0801a278

0800bc00 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b088      	sub	sp, #32
 800bc04:	af02      	add	r7, sp, #8
 800bc06:	60f8      	str	r0, [r7, #12]
 800bc08:	60b9      	str	r1, [r7, #8]
 800bc0a:	607a      	str	r2, [r7, #4]
 800bc0c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d101      	bne.n	800bc18 <lwip_recv_tcp_from+0x18>
    return 0;
 800bc14:	2300      	movs	r3, #0
 800bc16:	e021      	b.n	800bc5c <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d01d      	beq.n	800bc5a <lwip_recv_tcp_from+0x5a>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d01a      	beq.n	800bc5a <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	f107 0216 	add.w	r2, r7, #22
 800bc2c:	f107 0110 	add.w	r1, r7, #16
 800bc30:	2300      	movs	r3, #0
 800bc32:	f7fd f92b 	bl	8008e8c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d00e      	beq.n	800bc5a <lwip_recv_tcp_from+0x5a>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00b      	beq.n	800bc5a <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6818      	ldr	r0, [r3, #0]
 800bc46:	8afa      	ldrh	r2, [r7, #22]
 800bc48:	f107 0110 	add.w	r1, r7, #16
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	9300      	str	r3, [sp, #0]
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	f7ff ff67 	bl	800bb24 <lwip_sock_make_addr>
 800bc56:	4603      	mov	r3, r0
 800bc58:	e000      	b.n	800bc5c <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3718      	adds	r7, #24
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800bc64:	b590      	push	{r4, r7, lr}
 800bc66:	b08d      	sub	sp, #52	; 0x34
 800bc68:	af02      	add	r7, sp, #8
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]
 800bc70:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d10d      	bne.n	800bc96 <lwip_recvfrom_udp_raw+0x32>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	dd09      	ble.n	800bc96 <lwip_recvfrom_udp_raw+0x32>
 800bc82:	4b5e      	ldr	r3, [pc, #376]	; (800bdfc <lwip_recvfrom_udp_raw+0x198>)
 800bc84:	f240 4249 	movw	r2, #1097	; 0x449
 800bc88:	495d      	ldr	r1, [pc, #372]	; (800be00 <lwip_recvfrom_udp_raw+0x19c>)
 800bc8a:	485e      	ldr	r0, [pc, #376]	; (800be04 <lwip_recvfrom_udp_raw+0x1a0>)
 800bc8c:	f00c fcfe 	bl	801868c <iprintf>
 800bc90:	f06f 030f 	mvn.w	r3, #15
 800bc94:	e0ad      	b.n	800bdf2 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	f003 0308 	and.w	r3, r3, #8
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d003      	beq.n	800bca8 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800bca0:	2304      	movs	r3, #4
 800bca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bca6:	e002      	b.n	800bcae <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d11e      	bne.n	800bcf8 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bcc2:	f107 0110 	add.w	r1, r7, #16
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f7fd fbf8 	bl	80094bc <netconn_recv_udp_raw_netbuf_flags>
 800bccc:	4603      	mov	r3, r0
 800bcce:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800bcd0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d002      	beq.n	800bcde <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800bcd8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bcdc:	e089      	b.n	800bdf2 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d106      	bne.n	800bcf2 <lwip_recvfrom_udp_raw+0x8e>
 800bce4:	4b45      	ldr	r3, [pc, #276]	; (800bdfc <lwip_recvfrom_udp_raw+0x198>)
 800bce6:	f240 425e 	movw	r2, #1118	; 0x45e
 800bcea:	4947      	ldr	r1, [pc, #284]	; (800be08 <lwip_recvfrom_udp_raw+0x1a4>)
 800bcec:	4845      	ldr	r0, [pc, #276]	; (800be04 <lwip_recvfrom_udp_raw+0x1a0>)
 800bcee:	f00c fccd 	bl	801868c <iprintf>
    sock->lastdata.netbuf = buf;
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	891b      	ldrh	r3, [r3, #8]
 800bcfe:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800bd00:	2300      	movs	r3, #0
 800bd02:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800bd04:	2300      	movs	r3, #0
 800bd06:	61fb      	str	r3, [r7, #28]
 800bd08:	e029      	b.n	800bd5e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800bd0a:	8b3a      	ldrh	r2, [r7, #24]
 800bd0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	689a      	ldr	r2, [r3, #8]
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	00db      	lsls	r3, r3, #3
 800bd1a:	4413      	add	r3, r2
 800bd1c:	685a      	ldr	r2, [r3, #4]
 800bd1e:	8afb      	ldrh	r3, [r7, #22]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d902      	bls.n	800bd2a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800bd24:	8afb      	ldrh	r3, [r7, #22]
 800bd26:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bd28:	e006      	b.n	800bd38 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	689a      	ldr	r2, [r3, #8]
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	00db      	lsls	r3, r3, #3
 800bd32:	4413      	add	r3, r2
 800bd34:	685b      	ldr	r3, [r3, #4]
 800bd36:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	6818      	ldr	r0, [r3, #0]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	689a      	ldr	r2, [r3, #8]
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	00db      	lsls	r3, r3, #3
 800bd44:	4413      	add	r3, r2
 800bd46:	6819      	ldr	r1, [r3, #0]
 800bd48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800bd4c:	f002 fe4a 	bl	800e9e4 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800bd50:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bd52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bd54:	4413      	add	r3, r2
 800bd56:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	61fb      	str	r3, [r7, #28]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	68db      	ldr	r3, [r3, #12]
 800bd62:	69fa      	ldr	r2, [r7, #28]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	da03      	bge.n	800bd70 <lwip_recvfrom_udp_raw+0x10c>
 800bd68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bd6a:	8b3b      	ldrh	r3, [r7, #24]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d3cc      	bcc.n	800bd0a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d01a      	beq.n	800bdae <lwip_recvfrom_udp_raw+0x14a>
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d016      	beq.n	800bdae <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d012      	beq.n	800bdae <lwip_recvfrom_udp_raw+0x14a>
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d00e      	beq.n	800bdae <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6818      	ldr	r0, [r3, #0]
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	f103 0108 	add.w	r1, r3, #8
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	3304      	adds	r3, #4
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	4623      	mov	r3, r4
 800bdaa:	f7ff febb 	bl	800bb24 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	691b      	ldr	r3, [r3, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d007      	beq.n	800bdcc <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800bdc0:	7d7b      	ldrb	r3, [r7, #21]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d102      	bne.n	800bdcc <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	f003 0301 	and.w	r3, r3, #1
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d106      	bne.n	800bde4 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7ff f9a6 	bl	800b130 <netbuf_delete>
  }
  if (datagram_len) {
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	8b3a      	ldrh	r2, [r7, #24]
 800bdee:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	372c      	adds	r7, #44	; 0x2c
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd90      	pop	{r4, r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	0801a0e4 	.word	0x0801a0e4
 800be00:	0801a288 	.word	0x0801a288
 800be04:	0801a138 	.word	0x0801a138
 800be08:	0801a2b4 	.word	0x0801a2b4

0800be0c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b096      	sub	sp, #88	; 0x58
 800be10:	af02      	add	r7, sp, #8
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	607a      	str	r2, [r7, #4]
 800be18:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800be1a:	68f8      	ldr	r0, [r7, #12]
 800be1c:	f7ff fa58 	bl	800b2d0 <get_socket>
 800be20:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800be22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be24:	2b00      	cmp	r3, #0
 800be26:	d102      	bne.n	800be2e <lwip_recvfrom+0x22>
    return -1;
 800be28:	f04f 33ff 	mov.w	r3, #4294967295
 800be2c:	e078      	b.n	800bf20 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800be2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be38:	2b10      	cmp	r3, #16
 800be3a:	d112      	bne.n	800be62 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	687a      	ldr	r2, [r7, #4]
 800be40:	68b9      	ldr	r1, [r7, #8]
 800be42:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800be44:	f7ff fd5e 	bl	800b904 <lwip_recv_tcp>
 800be48:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800be4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be4c:	9301      	str	r3, [sp, #4]
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	9300      	str	r3, [sp, #0]
 800be52:	4b35      	ldr	r3, [pc, #212]	; (800bf28 <lwip_recvfrom+0x11c>)
 800be54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be58:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800be5a:	f7ff fed1 	bl	800bc00 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800be5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be60:	e05e      	b.n	800bf20 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800be62:	2300      	movs	r3, #0
 800be64:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800be6e:	2300      	movs	r3, #0
 800be70:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800be76:	2300      	movs	r3, #0
 800be78:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800be7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be7e:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800be80:	2301      	movs	r3, #1
 800be82:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800be84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800be86:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800be88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d002      	beq.n	800be94 <lwip_recvfrom+0x88>
 800be8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	e000      	b.n	800be96 <lwip_recvfrom+0x8a>
 800be94:	2300      	movs	r3, #0
 800be96:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800be98:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800be9c:	f107 0214 	add.w	r2, r7, #20
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	9300      	str	r3, [sp, #0]
 800bea4:	460b      	mov	r3, r1
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800beaa:	f7ff fedb 	bl	800bc64 <lwip_recvfrom_udp_raw>
 800beae:	4603      	mov	r3, r0
 800beb0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800beb4:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00e      	beq.n	800beda <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800bebc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7ff f917 	bl	800b0f4 <err_to_errno>
 800bec6:	63f8      	str	r0, [r7, #60]	; 0x3c
 800bec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beca:	2b00      	cmp	r3, #0
 800becc:	d002      	beq.n	800bed4 <lwip_recvfrom+0xc8>
 800bece:	4a17      	ldr	r2, [pc, #92]	; (800bf2c <lwip_recvfrom+0x120>)
 800bed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bed2:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800bed4:	f04f 33ff 	mov.w	r3, #4294967295
 800bed8:	e022      	b.n	800bf20 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800beda:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bedc:	461a      	mov	r2, r3
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4293      	cmp	r3, r2
 800bee2:	bf28      	it	cs
 800bee4:	4613      	movcs	r3, r2
 800bee6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800beea:	4293      	cmp	r3, r2
 800beec:	d206      	bcs.n	800befc <lwip_recvfrom+0xf0>
 800beee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bef0:	461a      	mov	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	4293      	cmp	r3, r2
 800bef6:	bf28      	it	cs
 800bef8:	4613      	movcs	r3, r2
 800befa:	e001      	b.n	800bf00 <lwip_recvfrom+0xf4>
 800befc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800bf00:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800bf02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d002      	beq.n	800bf0e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800bf08:	69ba      	ldr	r2, [r7, #24]
 800bf0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf0c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800bf0e:	2300      	movs	r3, #0
 800bf10:	643b      	str	r3, [r7, #64]	; 0x40
 800bf12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d002      	beq.n	800bf1e <lwip_recvfrom+0x112>
 800bf18:	4a04      	ldr	r2, [pc, #16]	; (800bf2c <lwip_recvfrom+0x120>)
 800bf1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf1c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800bf1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3750      	adds	r7, #80	; 0x50
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}
 800bf28:	0801a2c0 	.word	0x0801a2c0
 800bf2c:	2000bda4 	.word	0x2000bda4

0800bf30 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08a      	sub	sp, #40	; 0x28
 800bf34:	af02      	add	r7, sp, #8
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	607a      	str	r2, [r7, #4]
 800bf3c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f7ff f9c6 	bl	800b2d0 <get_socket>
 800bf44:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d102      	bne.n	800bf52 <lwip_send+0x22>
    return -1;
 800bf4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf50:	e046      	b.n	800bfe0 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf5c:	2b10      	cmp	r3, #16
 800bf5e:	d00b      	beq.n	800bf78 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800bf60:	2300      	movs	r3, #0
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	2300      	movs	r3, #0
 800bf66:	9300      	str	r3, [sp, #0]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	687a      	ldr	r2, [r7, #4]
 800bf6c:	68b9      	ldr	r1, [r7, #8]
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	f000 f83c 	bl	800bfec <lwip_sendto>
 800bf74:	4603      	mov	r3, r0
 800bf76:	e033      	b.n	800bfe0 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d001      	beq.n	800bf86 <lwip_send+0x56>
 800bf82:	2203      	movs	r2, #3
 800bf84:	e000      	b.n	800bf88 <lwip_send+0x58>
 800bf86:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	105b      	asrs	r3, r3, #1
 800bf8c:	b25b      	sxtb	r3, r3
 800bf8e:	f003 0304 	and.w	r3, r3, #4
 800bf92:	b25b      	sxtb	r3, r3
 800bf94:	4313      	orrs	r3, r2
 800bf96:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800bf98:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800bf9e:	69fb      	ldr	r3, [r7, #28]
 800bfa0:	6818      	ldr	r0, [r3, #0]
 800bfa2:	7efa      	ldrb	r2, [r7, #27]
 800bfa4:	f107 0310 	add.w	r3, r7, #16
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	4613      	mov	r3, r2
 800bfac:	687a      	ldr	r2, [r7, #4]
 800bfae:	68b9      	ldr	r1, [r7, #8]
 800bfb0:	f7fd fade 	bl	8009570 <netconn_write_partly>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800bfb8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7ff f899 	bl	800b0f4 <err_to_errno>
 800bfc2:	6178      	str	r0, [r7, #20]
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d002      	beq.n	800bfd0 <lwip_send+0xa0>
 800bfca:	4a07      	ldr	r2, [pc, #28]	; (800bfe8 <lwip_send+0xb8>)
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800bfd0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d101      	bne.n	800bfdc <lwip_send+0xac>
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	e001      	b.n	800bfe0 <lwip_send+0xb0>
 800bfdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3720      	adds	r7, #32
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}
 800bfe8:	2000bda4 	.word	0x2000bda4

0800bfec <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08e      	sub	sp, #56	; 0x38
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
 800bff8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f7ff f968 	bl	800b2d0 <get_socket>
 800c000:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800c002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c004:	2b00      	cmp	r3, #0
 800c006:	d102      	bne.n	800c00e <lwip_sendto+0x22>
    return -1;
 800c008:	f04f 33ff 	mov.w	r3, #4294967295
 800c00c:	e093      	b.n	800c136 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c018:	2b10      	cmp	r3, #16
 800c01a:	d107      	bne.n	800c02c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	687a      	ldr	r2, [r7, #4]
 800c020:	68b9      	ldr	r1, [r7, #8]
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f7ff ff84 	bl	800bf30 <lwip_send>
 800c028:	4603      	mov	r3, r0
 800c02a:	e084      	b.n	800c136 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c032:	d30a      	bcc.n	800c04a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800c034:	235a      	movs	r3, #90	; 0x5a
 800c036:	623b      	str	r3, [r7, #32]
 800c038:	6a3b      	ldr	r3, [r7, #32]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d002      	beq.n	800c044 <lwip_sendto+0x58>
 800c03e:	4a40      	ldr	r2, [pc, #256]	; (800c140 <lwip_sendto+0x154>)
 800c040:	6a3b      	ldr	r3, [r7, #32]
 800c042:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c044:	f04f 33ff 	mov.w	r3, #4294967295
 800c048:	e075      	b.n	800c136 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800c04e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c050:	2b00      	cmp	r3, #0
 800c052:	d102      	bne.n	800c05a <lwip_sendto+0x6e>
 800c054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c056:	2b00      	cmp	r3, #0
 800c058:	d023      	beq.n	800c0a2 <lwip_sendto+0xb6>
 800c05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c05c:	2b10      	cmp	r3, #16
 800c05e:	d10b      	bne.n	800c078 <lwip_sendto+0x8c>
 800c060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c062:	2b00      	cmp	r3, #0
 800c064:	d008      	beq.n	800c078 <lwip_sendto+0x8c>
 800c066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c068:	785b      	ldrb	r3, [r3, #1]
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d104      	bne.n	800c078 <lwip_sendto+0x8c>
 800c06e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c070:	f003 0303 	and.w	r3, r3, #3
 800c074:	2b00      	cmp	r3, #0
 800c076:	d014      	beq.n	800c0a2 <lwip_sendto+0xb6>
 800c078:	4b32      	ldr	r3, [pc, #200]	; (800c144 <lwip_sendto+0x158>)
 800c07a:	f240 6252 	movw	r2, #1618	; 0x652
 800c07e:	4932      	ldr	r1, [pc, #200]	; (800c148 <lwip_sendto+0x15c>)
 800c080:	4832      	ldr	r0, [pc, #200]	; (800c14c <lwip_sendto+0x160>)
 800c082:	f00c fb03 	bl	801868c <iprintf>
 800c086:	f06f 000f 	mvn.w	r0, #15
 800c08a:	f7ff f833 	bl	800b0f4 <err_to_errno>
 800c08e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c092:	2b00      	cmp	r3, #0
 800c094:	d002      	beq.n	800c09c <lwip_sendto+0xb0>
 800c096:	4a2a      	ldr	r2, [pc, #168]	; (800c140 <lwip_sendto+0x154>)
 800c098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c09a:	6013      	str	r3, [r2, #0]
 800c09c:	f04f 33ff 	mov.w	r3, #4294967295
 800c0a0:	e049      	b.n	800c136 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	617b      	str	r3, [r7, #20]
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800c0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00a      	beq.n	800c0c6 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800c0b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	61bb      	str	r3, [r7, #24]
 800c0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0b8:	885b      	ldrh	r3, [r3, #2]
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 fbe4 	bl	800c888 <lwip_htons>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	86bb      	strh	r3, [r7, #52]	; 0x34
 800c0c4:	e003      	b.n	800c0ce <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800c0ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c0d0:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800c0d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c0d4:	f107 0310 	add.w	r3, r7, #16
 800c0d8:	68b9      	ldr	r1, [r7, #8]
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7ff f870 	bl	800b1c0 <netbuf_ref>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800c0e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d10a      	bne.n	800c104 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	f107 0210 	add.w	r2, r7, #16
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fd fa0b 	bl	8009514 <netconn_send>
 800c0fe:	4603      	mov	r3, r0
 800c100:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800c104:	f107 0310 	add.w	r3, r7, #16
 800c108:	4618      	mov	r0, r3
 800c10a:	f7ff f831 	bl	800b170 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800c10e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c112:	4618      	mov	r0, r3
 800c114:	f7fe ffee 	bl	800b0f4 <err_to_errno>
 800c118:	6278      	str	r0, [r7, #36]	; 0x24
 800c11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d002      	beq.n	800c126 <lwip_sendto+0x13a>
 800c120:	4a07      	ldr	r2, [pc, #28]	; (800c140 <lwip_sendto+0x154>)
 800c122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c124:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800c126:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d101      	bne.n	800c132 <lwip_sendto+0x146>
 800c12e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c130:	e001      	b.n	800c136 <lwip_sendto+0x14a>
 800c132:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c136:	4618      	mov	r0, r3
 800c138:	3738      	adds	r7, #56	; 0x38
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
 800c13e:	bf00      	nop
 800c140:	2000bda4 	.word	0x2000bda4
 800c144:	0801a0e4 	.word	0x0801a0e4
 800c148:	0801a3c4 	.word	0x0801a3c4
 800c14c:	0801a138 	.word	0x0801a138

0800c150 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	2b03      	cmp	r3, #3
 800c160:	d009      	beq.n	800c176 <lwip_socket+0x26>
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	2b03      	cmp	r3, #3
 800c166:	dc23      	bgt.n	800c1b0 <lwip_socket+0x60>
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d019      	beq.n	800c1a2 <lwip_socket+0x52>
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	2b02      	cmp	r3, #2
 800c172:	d009      	beq.n	800c188 <lwip_socket+0x38>
 800c174:	e01c      	b.n	800c1b0 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	4a22      	ldr	r2, [pc, #136]	; (800c204 <lwip_socket+0xb4>)
 800c17c:	4619      	mov	r1, r3
 800c17e:	2040      	movs	r0, #64	; 0x40
 800c180:	f7fc fdca 	bl	8008d18 <netconn_new_with_proto_and_callback>
 800c184:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c186:	e019      	b.n	800c1bc <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b88      	cmp	r3, #136	; 0x88
 800c18c:	d101      	bne.n	800c192 <lwip_socket+0x42>
 800c18e:	2321      	movs	r3, #33	; 0x21
 800c190:	e000      	b.n	800c194 <lwip_socket+0x44>
 800c192:	2320      	movs	r3, #32
 800c194:	4a1b      	ldr	r2, [pc, #108]	; (800c204 <lwip_socket+0xb4>)
 800c196:	2100      	movs	r1, #0
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fc fdbd 	bl	8008d18 <netconn_new_with_proto_and_callback>
 800c19e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c1a0:	e00c      	b.n	800c1bc <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800c1a2:	4a18      	ldr	r2, [pc, #96]	; (800c204 <lwip_socket+0xb4>)
 800c1a4:	2100      	movs	r1, #0
 800c1a6:	2010      	movs	r0, #16
 800c1a8:	f7fc fdb6 	bl	8008d18 <netconn_new_with_proto_and_callback>
 800c1ac:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c1ae:	e005      	b.n	800c1bc <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800c1b0:	4b15      	ldr	r3, [pc, #84]	; (800c208 <lwip_socket+0xb8>)
 800c1b2:	2216      	movs	r2, #22
 800c1b4:	601a      	str	r2, [r3, #0]
      return -1;
 800c1b6:	f04f 33ff 	mov.w	r3, #4294967295
 800c1ba:	e01e      	b.n	800c1fa <lwip_socket+0xaa>
  }

  if (!conn) {
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d105      	bne.n	800c1ce <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800c1c2:	4b11      	ldr	r3, [pc, #68]	; (800c208 <lwip_socket+0xb8>)
 800c1c4:	2269      	movs	r2, #105	; 0x69
 800c1c6:	601a      	str	r2, [r3, #0]
    return -1;
 800c1c8:	f04f 33ff 	mov.w	r3, #4294967295
 800c1cc:	e015      	b.n	800c1fa <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	6978      	ldr	r0, [r7, #20]
 800c1d2:	f7ff f895 	bl	800b300 <alloc_socket>
 800c1d6:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1de:	d108      	bne.n	800c1f2 <lwip_socket+0xa2>
    netconn_delete(conn);
 800c1e0:	6978      	ldr	r0, [r7, #20]
 800c1e2:	f7fc fe37 	bl	8008e54 <netconn_delete>
    set_errno(ENFILE);
 800c1e6:	4b08      	ldr	r3, [pc, #32]	; (800c208 <lwip_socket+0xb8>)
 800c1e8:	2217      	movs	r2, #23
 800c1ea:	601a      	str	r2, [r3, #0]
    return -1;
 800c1ec:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f0:	e003      	b.n	800c1fa <lwip_socket+0xaa>
  }
  conn->socket = i;
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	693a      	ldr	r2, [r7, #16]
 800c1f6:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800c1f8:	693b      	ldr	r3, [r7, #16]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3718      	adds	r7, #24
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	0800c295 	.word	0x0800c295
 800c208:	2000bda4 	.word	0x2000bda4

0800c20c <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
 800c218:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c21a:	2300      	movs	r3, #0
 800c21c:	617b      	str	r3, [r7, #20]
 800c21e:	e02c      	b.n	800c27a <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	695a      	ldr	r2, [r3, #20]
 800c224:	697b      	ldr	r3, [r7, #20]
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	4413      	add	r3, r2
 800c22a:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68ba      	ldr	r2, [r7, #8]
 800c232:	429a      	cmp	r2, r3
 800c234:	d11e      	bne.n	800c274 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d009      	beq.n	800c250 <lwip_poll_should_wake+0x44>
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c242:	b29b      	uxth	r3, r3
 800c244:	f003 0301 	and.w	r3, r3, #1
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d001      	beq.n	800c250 <lwip_poll_should_wake+0x44>
        return 1;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e01a      	b.n	800c286 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d009      	beq.n	800c26a <lwip_poll_should_wake+0x5e>
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	f003 0302 	and.w	r3, r3, #2
 800c262:	2b00      	cmp	r3, #0
 800c264:	d001      	beq.n	800c26a <lwip_poll_should_wake+0x5e>
        return 1;
 800c266:	2301      	movs	r3, #1
 800c268:	e00d      	b.n	800c286 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800c26a:	6a3b      	ldr	r3, [r7, #32]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d001      	beq.n	800c274 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800c270:	2301      	movs	r3, #1
 800c272:	e008      	b.n	800c286 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	3301      	adds	r3, #1
 800c278:	617b      	str	r3, [r7, #20]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	429a      	cmp	r2, r3
 800c282:	d3cd      	bcc.n	800c220 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800c284:	2300      	movs	r3, #0
}
 800c286:	4618      	mov	r0, r3
 800c288:	371c      	adds	r7, #28
 800c28a:	46bd      	mov	sp, r7
 800c28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c290:	4770      	bx	lr
	...

0800c294 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b08a      	sub	sp, #40	; 0x28
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	70fb      	strb	r3, [r7, #3]
 800c2a0:	4613      	mov	r3, r2
 800c2a2:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f000 80a4 	beq.w	800c3f4 <event_callback+0x160>
    s = conn->socket;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	da18      	bge.n	800c2ea <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800c2b8:	f00c f8d0 	bl	801845c <sys_arch_protect>
 800c2bc:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	699b      	ldr	r3, [r3, #24]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	da0b      	bge.n	800c2de <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800c2c6:	78fb      	ldrb	r3, [r7, #3]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d104      	bne.n	800c2d6 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	699b      	ldr	r3, [r3, #24]
 800c2d0:	1e5a      	subs	r2, r3, #1
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800c2d6:	69f8      	ldr	r0, [r7, #28]
 800c2d8:	f00c f8ce 	bl	8018478 <sys_arch_unprotect>
        return;
 800c2dc:	e08d      	b.n	800c3fa <event_callback+0x166>
      }
      s = conn->socket;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	699b      	ldr	r3, [r3, #24]
 800c2e2:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800c2e4:	69f8      	ldr	r0, [r7, #28]
 800c2e6:	f00c f8c7 	bl	8018478 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800c2ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2ec:	f7fe fff0 	bl	800b2d0 <get_socket>
 800c2f0:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d07f      	beq.n	800c3f8 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800c2fc:	f00c f8ae 	bl	801845c <sys_arch_protect>
 800c300:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800c302:	78fb      	ldrb	r3, [r7, #3]
 800c304:	2b04      	cmp	r3, #4
 800c306:	d83e      	bhi.n	800c386 <event_callback+0xf2>
 800c308:	a201      	add	r2, pc, #4	; (adr r2, 800c310 <event_callback+0x7c>)
 800c30a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30e:	bf00      	nop
 800c310:	0800c325 	.word	0x0800c325
 800c314:	0800c347 	.word	0x0800c347
 800c318:	0800c35f 	.word	0x0800c35f
 800c31c:	0800c373 	.word	0x0800c373
 800c320:	0800c37f 	.word	0x0800c37f
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800c324:	69bb      	ldr	r3, [r7, #24]
 800c326:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	3301      	adds	r3, #1
 800c32e:	b29b      	uxth	r3, r3
 800c330:	b21a      	sxth	r2, r3
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800c336:	69bb      	ldr	r3, [r7, #24]
 800c338:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c33c:	2b01      	cmp	r3, #1
 800c33e:	dd2a      	ble.n	800c396 <event_callback+0x102>
        check_waiters = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	623b      	str	r3, [r7, #32]
      }
      break;
 800c344:	e027      	b.n	800c396 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	3b01      	subs	r3, #1
 800c350:	b29b      	uxth	r3, r3
 800c352:	b21a      	sxth	r2, r3
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800c358:	2300      	movs	r3, #0
 800c35a:	623b      	str	r3, [r7, #32]
      break;
 800c35c:	e01c      	b.n	800c398 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	895b      	ldrh	r3, [r3, #10]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d001      	beq.n	800c36a <event_callback+0xd6>
        check_waiters = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800c36a:	69bb      	ldr	r3, [r7, #24]
 800c36c:	2201      	movs	r2, #1
 800c36e:	815a      	strh	r2, [r3, #10]
      break;
 800c370:	e012      	b.n	800c398 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	2200      	movs	r2, #0
 800c376:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800c378:	2300      	movs	r3, #0
 800c37a:	623b      	str	r3, [r7, #32]
      break;
 800c37c:	e00c      	b.n	800c398 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	2201      	movs	r2, #1
 800c382:	819a      	strh	r2, [r3, #12]
      break;
 800c384:	e008      	b.n	800c398 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800c386:	4b1e      	ldr	r3, [pc, #120]	; (800c400 <event_callback+0x16c>)
 800c388:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800c38c:	491d      	ldr	r1, [pc, #116]	; (800c404 <event_callback+0x170>)
 800c38e:	481e      	ldr	r0, [pc, #120]	; (800c408 <event_callback+0x174>)
 800c390:	f00c f97c 	bl	801868c <iprintf>
      break;
 800c394:	e000      	b.n	800c398 <event_callback+0x104>
      break;
 800c396:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	7b9b      	ldrb	r3, [r3, #14]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d025      	beq.n	800c3ec <event_callback+0x158>
 800c3a0:	6a3b      	ldr	r3, [r7, #32]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d022      	beq.n	800c3ec <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	bfcc      	ite	gt
 800c3b0:	2301      	movgt	r3, #1
 800c3b2:	2300      	movle	r3, #0
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	895b      	ldrh	r3, [r3, #10]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bf14      	ite	ne
 800c3c0:	2301      	movne	r3, #1
 800c3c2:	2300      	moveq	r3, #0
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800c3c8:	69bb      	ldr	r3, [r7, #24]
 800c3ca:	899b      	ldrh	r3, [r3, #12]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	bf14      	ite	ne
 800c3d0:	2301      	movne	r3, #1
 800c3d2:	2300      	moveq	r3, #0
 800c3d4:	b2db      	uxtb	r3, r3
 800c3d6:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800c3d8:	69f8      	ldr	r0, [r7, #28]
 800c3da:	f00c f84d 	bl	8018478 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	693a      	ldr	r2, [r7, #16]
 800c3e2:	6979      	ldr	r1, [r7, #20]
 800c3e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c3e6:	f000 f811 	bl	800c40c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c3ea:	e006      	b.n	800c3fa <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c3ec:	69f8      	ldr	r0, [r7, #28]
 800c3ee:	f00c f843 	bl	8018478 <sys_arch_unprotect>
 800c3f2:	e002      	b.n	800c3fa <event_callback+0x166>
    return;
 800c3f4:	bf00      	nop
 800c3f6:	e000      	b.n	800c3fa <event_callback+0x166>
      return;
 800c3f8:	bf00      	nop
  }
  done_socket(sock);
}
 800c3fa:	3728      	adds	r7, #40	; 0x28
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	0801a0e4 	.word	0x0801a0e4
 800c404:	0801a460 	.word	0x0801a460
 800c408:	0801a138 	.word	0x0801a138

0800c40c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b088      	sub	sp, #32
 800c410:	af02      	add	r7, sp, #8
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	60b9      	str	r1, [r7, #8]
 800c416:	607a      	str	r2, [r7, #4]
 800c418:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c41a:	4b3e      	ldr	r3, [pc, #248]	; (800c514 <select_check_waiters+0x108>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	617b      	str	r3, [r7, #20]
 800c420:	e06f      	b.n	800c502 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	69db      	ldr	r3, [r3, #28]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d168      	bne.n	800c4fc <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d009      	beq.n	800c44a <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	9300      	str	r3, [sp, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	68f9      	ldr	r1, [r7, #12]
 800c440:	6978      	ldr	r0, [r7, #20]
 800c442:	f7ff fee3 	bl	800c20c <lwip_poll_should_wake>
 800c446:	6138      	str	r0, [r7, #16]
 800c448:	e04d      	b.n	800c4e6 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d014      	beq.n	800c47a <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d010      	beq.n	800c47a <select_check_waiters+0x6e>
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	0952      	lsrs	r2, r2, #5
 800c460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c464:	68fa      	ldr	r2, [r7, #12]
 800c466:	f002 021f 	and.w	r2, r2, #31
 800c46a:	2101      	movs	r1, #1
 800c46c:	fa01 f202 	lsl.w	r2, r1, r2
 800c470:	4013      	ands	r3, r2
 800c472:	2b00      	cmp	r3, #0
 800c474:	d001      	beq.n	800c47a <select_check_waiters+0x6e>
            do_signal = 1;
 800c476:	2301      	movs	r3, #1
 800c478:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d017      	beq.n	800c4b0 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d114      	bne.n	800c4b0 <select_check_waiters+0xa4>
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d010      	beq.n	800c4b0 <select_check_waiters+0xa4>
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	68db      	ldr	r3, [r3, #12]
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	0952      	lsrs	r2, r2, #5
 800c496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	f002 021f 	and.w	r2, r2, #31
 800c4a0:	2101      	movs	r1, #1
 800c4a2:	fa01 f202 	lsl.w	r2, r1, r2
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d001      	beq.n	800c4b0 <select_check_waiters+0xa4>
            do_signal = 1;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d017      	beq.n	800c4e6 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800c4b6:	693b      	ldr	r3, [r7, #16]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d114      	bne.n	800c4e6 <select_check_waiters+0xda>
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	691b      	ldr	r3, [r3, #16]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d010      	beq.n	800c4e6 <select_check_waiters+0xda>
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	691b      	ldr	r3, [r3, #16]
 800c4c8:	68fa      	ldr	r2, [r7, #12]
 800c4ca:	0952      	lsrs	r2, r2, #5
 800c4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4d0:	68fa      	ldr	r2, [r7, #12]
 800c4d2:	f002 021f 	and.w	r2, r2, #31
 800c4d6:	2101      	movs	r1, #1
 800c4d8:	fa01 f202 	lsl.w	r2, r1, r2
 800c4dc:	4013      	ands	r3, r2
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <select_check_waiters+0xda>
            do_signal = 1;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800c4e6:	693b      	ldr	r3, [r7, #16]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d007      	beq.n	800c4fc <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800c4ec:	697b      	ldr	r3, [r7, #20]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	3320      	adds	r3, #32
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f00b ff1a 	bl	8018330 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	617b      	str	r3, [r7, #20]
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d18c      	bne.n	800c422 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	3718      	adds	r7, #24
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	200049f8 	.word	0x200049f8

0800c518 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c522:	f008 fe21 	bl	8015168 <sys_timeouts_sleeptime>
 800c526:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c52e:	d10b      	bne.n	800c548 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c530:	4813      	ldr	r0, [pc, #76]	; (800c580 <tcpip_timeouts_mbox_fetch+0x68>)
 800c532:	f00b ff66 	bl	8018402 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c536:	2200      	movs	r2, #0
 800c538:	6839      	ldr	r1, [r7, #0]
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f00b fe3c 	bl	80181b8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c540:	480f      	ldr	r0, [pc, #60]	; (800c580 <tcpip_timeouts_mbox_fetch+0x68>)
 800c542:	f00b ff4f 	bl	80183e4 <sys_mutex_lock>
    return;
 800c546:	e018      	b.n	800c57a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d102      	bne.n	800c554 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c54e:	f008 fdd1 	bl	80150f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c552:	e7e6      	b.n	800c522 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c554:	480a      	ldr	r0, [pc, #40]	; (800c580 <tcpip_timeouts_mbox_fetch+0x68>)
 800c556:	f00b ff54 	bl	8018402 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c55a:	68fa      	ldr	r2, [r7, #12]
 800c55c:	6839      	ldr	r1, [r7, #0]
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f00b fe2a 	bl	80181b8 <sys_arch_mbox_fetch>
 800c564:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c566:	4806      	ldr	r0, [pc, #24]	; (800c580 <tcpip_timeouts_mbox_fetch+0x68>)
 800c568:	f00b ff3c 	bl	80183e4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c572:	d102      	bne.n	800c57a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c574:	f008 fdbe 	bl	80150f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c578:	e7d3      	b.n	800c522 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20008528 	.word	0x20008528

0800c584 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c58c:	4810      	ldr	r0, [pc, #64]	; (800c5d0 <tcpip_thread+0x4c>)
 800c58e:	f00b ff29 	bl	80183e4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c592:	4b10      	ldr	r3, [pc, #64]	; (800c5d4 <tcpip_thread+0x50>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d005      	beq.n	800c5a6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c59a:	4b0e      	ldr	r3, [pc, #56]	; (800c5d4 <tcpip_thread+0x50>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4a0e      	ldr	r2, [pc, #56]	; (800c5d8 <tcpip_thread+0x54>)
 800c5a0:	6812      	ldr	r2, [r2, #0]
 800c5a2:	4610      	mov	r0, r2
 800c5a4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c5a6:	f107 030c 	add.w	r3, r7, #12
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	480b      	ldr	r0, [pc, #44]	; (800c5dc <tcpip_thread+0x58>)
 800c5ae:	f7ff ffb3 	bl	800c518 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d106      	bne.n	800c5c6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c5b8:	4b09      	ldr	r3, [pc, #36]	; (800c5e0 <tcpip_thread+0x5c>)
 800c5ba:	2291      	movs	r2, #145	; 0x91
 800c5bc:	4909      	ldr	r1, [pc, #36]	; (800c5e4 <tcpip_thread+0x60>)
 800c5be:	480a      	ldr	r0, [pc, #40]	; (800c5e8 <tcpip_thread+0x64>)
 800c5c0:	f00c f864 	bl	801868c <iprintf>
      continue;
 800c5c4:	e003      	b.n	800c5ce <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 f80f 	bl	800c5ec <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c5ce:	e7ea      	b.n	800c5a6 <tcpip_thread+0x22>
 800c5d0:	20008528 	.word	0x20008528
 800c5d4:	200049fc 	.word	0x200049fc
 800c5d8:	20004a00 	.word	0x20004a00
 800c5dc:	20004a04 	.word	0x20004a04
 800c5e0:	0801a4b4 	.word	0x0801a4b4
 800c5e4:	0801a4e4 	.word	0x0801a4e4
 800c5e8:	0801a504 	.word	0x0801a504

0800c5ec <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b082      	sub	sp, #8
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	2b02      	cmp	r3, #2
 800c5fa:	d026      	beq.n	800c64a <tcpip_thread_handle_msg+0x5e>
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	dc2b      	bgt.n	800c658 <tcpip_thread_handle_msg+0x6c>
 800c600:	2b00      	cmp	r3, #0
 800c602:	d002      	beq.n	800c60a <tcpip_thread_handle_msg+0x1e>
 800c604:	2b01      	cmp	r3, #1
 800c606:	d015      	beq.n	800c634 <tcpip_thread_handle_msg+0x48>
 800c608:	e026      	b.n	800c658 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	6850      	ldr	r0, [r2, #4]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	6892      	ldr	r2, [r2, #8]
 800c616:	4611      	mov	r1, r2
 800c618:	4798      	blx	r3
 800c61a:	4603      	mov	r3, r0
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d004      	beq.n	800c62a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	4618      	mov	r0, r3
 800c626:	f001 ffd7 	bl	800e5d8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c62a:	6879      	ldr	r1, [r7, #4]
 800c62c:	2009      	movs	r0, #9
 800c62e:	f001 f8fd 	bl	800d82c <memp_free>
      break;
 800c632:	e018      	b.n	800c666 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	6892      	ldr	r2, [r2, #8]
 800c63c:	4610      	mov	r0, r2
 800c63e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c640:	6879      	ldr	r1, [r7, #4]
 800c642:	2008      	movs	r0, #8
 800c644:	f001 f8f2 	bl	800d82c <memp_free>
      break;
 800c648:	e00d      	b.n	800c666 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	6892      	ldr	r2, [r2, #8]
 800c652:	4610      	mov	r0, r2
 800c654:	4798      	blx	r3
      break;
 800c656:	e006      	b.n	800c666 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c658:	4b05      	ldr	r3, [pc, #20]	; (800c670 <tcpip_thread_handle_msg+0x84>)
 800c65a:	22cf      	movs	r2, #207	; 0xcf
 800c65c:	4905      	ldr	r1, [pc, #20]	; (800c674 <tcpip_thread_handle_msg+0x88>)
 800c65e:	4806      	ldr	r0, [pc, #24]	; (800c678 <tcpip_thread_handle_msg+0x8c>)
 800c660:	f00c f814 	bl	801868c <iprintf>
      break;
 800c664:	bf00      	nop
  }
}
 800c666:	bf00      	nop
 800c668:	3708      	adds	r7, #8
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	0801a4b4 	.word	0x0801a4b4
 800c674:	0801a4e4 	.word	0x0801a4e4
 800c678:	0801a504 	.word	0x0801a504

0800c67c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b086      	sub	sp, #24
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c688:	481a      	ldr	r0, [pc, #104]	; (800c6f4 <tcpip_inpkt+0x78>)
 800c68a:	f00b fddd 	bl	8018248 <sys_mbox_valid>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d105      	bne.n	800c6a0 <tcpip_inpkt+0x24>
 800c694:	4b18      	ldr	r3, [pc, #96]	; (800c6f8 <tcpip_inpkt+0x7c>)
 800c696:	22fc      	movs	r2, #252	; 0xfc
 800c698:	4918      	ldr	r1, [pc, #96]	; (800c6fc <tcpip_inpkt+0x80>)
 800c69a:	4819      	ldr	r0, [pc, #100]	; (800c700 <tcpip_inpkt+0x84>)
 800c69c:	f00b fff6 	bl	801868c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c6a0:	2009      	movs	r0, #9
 800c6a2:	f001 f871 	bl	800d788 <memp_malloc>
 800c6a6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d102      	bne.n	800c6b4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c6ae:	f04f 33ff 	mov.w	r3, #4294967295
 800c6b2:	e01a      	b.n	800c6ea <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	68fa      	ldr	r2, [r7, #12]
 800c6be:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c6c0:	697b      	ldr	r3, [r7, #20]
 800c6c2:	68ba      	ldr	r2, [r7, #8]
 800c6c4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c6cc:	6979      	ldr	r1, [r7, #20]
 800c6ce:	4809      	ldr	r0, [pc, #36]	; (800c6f4 <tcpip_inpkt+0x78>)
 800c6d0:	f00b fd58 	bl	8018184 <sys_mbox_trypost>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d006      	beq.n	800c6e8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c6da:	6979      	ldr	r1, [r7, #20]
 800c6dc:	2009      	movs	r0, #9
 800c6de:	f001 f8a5 	bl	800d82c <memp_free>
    return ERR_MEM;
 800c6e2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e6:	e000      	b.n	800c6ea <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c6e8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3718      	adds	r7, #24
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}
 800c6f2:	bf00      	nop
 800c6f4:	20004a04 	.word	0x20004a04
 800c6f8:	0801a4b4 	.word	0x0801a4b4
 800c6fc:	0801a52c 	.word	0x0801a52c
 800c700:	0801a504 	.word	0x0801a504

0800c704 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b082      	sub	sp, #8
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
 800c70c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c70e:	683b      	ldr	r3, [r7, #0]
 800c710:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c714:	f003 0318 	and.w	r3, r3, #24
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d006      	beq.n	800c72a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c71c:	4a08      	ldr	r2, [pc, #32]	; (800c740 <tcpip_input+0x3c>)
 800c71e:	6839      	ldr	r1, [r7, #0]
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff ffab 	bl	800c67c <tcpip_inpkt>
 800c726:	4603      	mov	r3, r0
 800c728:	e005      	b.n	800c736 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c72a:	4a06      	ldr	r2, [pc, #24]	; (800c744 <tcpip_input+0x40>)
 800c72c:	6839      	ldr	r1, [r7, #0]
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7ff ffa4 	bl	800c67c <tcpip_inpkt>
 800c734:	4603      	mov	r3, r0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3708      	adds	r7, #8
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	08017f81 	.word	0x08017f81
 800c744:	08016e95 	.word	0x08016e95

0800c748 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c752:	4819      	ldr	r0, [pc, #100]	; (800c7b8 <tcpip_try_callback+0x70>)
 800c754:	f00b fd78 	bl	8018248 <sys_mbox_valid>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d106      	bne.n	800c76c <tcpip_try_callback+0x24>
 800c75e:	4b17      	ldr	r3, [pc, #92]	; (800c7bc <tcpip_try_callback+0x74>)
 800c760:	f240 125d 	movw	r2, #349	; 0x15d
 800c764:	4916      	ldr	r1, [pc, #88]	; (800c7c0 <tcpip_try_callback+0x78>)
 800c766:	4817      	ldr	r0, [pc, #92]	; (800c7c4 <tcpip_try_callback+0x7c>)
 800c768:	f00b ff90 	bl	801868c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c76c:	2008      	movs	r0, #8
 800c76e:	f001 f80b 	bl	800d788 <memp_malloc>
 800c772:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d102      	bne.n	800c780 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800c77a:	f04f 33ff 	mov.w	r3, #4294967295
 800c77e:	e017      	b.n	800c7b0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	2201      	movs	r2, #1
 800c784:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	683a      	ldr	r2, [r7, #0]
 800c790:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c792:	68f9      	ldr	r1, [r7, #12]
 800c794:	4808      	ldr	r0, [pc, #32]	; (800c7b8 <tcpip_try_callback+0x70>)
 800c796:	f00b fcf5 	bl	8018184 <sys_mbox_trypost>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d006      	beq.n	800c7ae <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800c7a0:	68f9      	ldr	r1, [r7, #12]
 800c7a2:	2008      	movs	r0, #8
 800c7a4:	f001 f842 	bl	800d82c <memp_free>
    return ERR_MEM;
 800c7a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ac:	e000      	b.n	800c7b0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	3710      	adds	r7, #16
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	bd80      	pop	{r7, pc}
 800c7b8:	20004a04 	.word	0x20004a04
 800c7bc:	0801a4b4 	.word	0x0801a4b4
 800c7c0:	0801a52c 	.word	0x0801a52c
 800c7c4:	0801a504 	.word	0x0801a504

0800c7c8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c7d4:	4806      	ldr	r0, [pc, #24]	; (800c7f0 <tcpip_send_msg_wait_sem+0x28>)
 800c7d6:	f00b fe05 	bl	80183e4 <sys_mutex_lock>
  fn(apimsg);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	68b8      	ldr	r0, [r7, #8]
 800c7de:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c7e0:	4803      	ldr	r0, [pc, #12]	; (800c7f0 <tcpip_send_msg_wait_sem+0x28>)
 800c7e2:	f00b fe0e 	bl	8018402 <sys_mutex_unlock>
  return ERR_OK;
 800c7e6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	20008528 	.word	0x20008528

0800c7f4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af02      	add	r7, sp, #8
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c7fe:	f000 fb3a 	bl	800ce76 <lwip_init>

  tcpip_init_done = initfunc;
 800c802:	4a17      	ldr	r2, [pc, #92]	; (800c860 <tcpip_init+0x6c>)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c808:	4a16      	ldr	r2, [pc, #88]	; (800c864 <tcpip_init+0x70>)
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c80e:	2106      	movs	r1, #6
 800c810:	4815      	ldr	r0, [pc, #84]	; (800c868 <tcpip_init+0x74>)
 800c812:	f00b fc8b 	bl	801812c <sys_mbox_new>
 800c816:	4603      	mov	r3, r0
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d006      	beq.n	800c82a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c81c:	4b13      	ldr	r3, [pc, #76]	; (800c86c <tcpip_init+0x78>)
 800c81e:	f240 2261 	movw	r2, #609	; 0x261
 800c822:	4913      	ldr	r1, [pc, #76]	; (800c870 <tcpip_init+0x7c>)
 800c824:	4813      	ldr	r0, [pc, #76]	; (800c874 <tcpip_init+0x80>)
 800c826:	f00b ff31 	bl	801868c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c82a:	4813      	ldr	r0, [pc, #76]	; (800c878 <tcpip_init+0x84>)
 800c82c:	f00b fdc4 	bl	80183b8 <sys_mutex_new>
 800c830:	4603      	mov	r3, r0
 800c832:	2b00      	cmp	r3, #0
 800c834:	d006      	beq.n	800c844 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c836:	4b0d      	ldr	r3, [pc, #52]	; (800c86c <tcpip_init+0x78>)
 800c838:	f240 2265 	movw	r2, #613	; 0x265
 800c83c:	490f      	ldr	r1, [pc, #60]	; (800c87c <tcpip_init+0x88>)
 800c83e:	480d      	ldr	r0, [pc, #52]	; (800c874 <tcpip_init+0x80>)
 800c840:	f00b ff24 	bl	801868c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c844:	2318      	movs	r3, #24
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c84c:	2200      	movs	r2, #0
 800c84e:	490c      	ldr	r1, [pc, #48]	; (800c880 <tcpip_init+0x8c>)
 800c850:	480c      	ldr	r0, [pc, #48]	; (800c884 <tcpip_init+0x90>)
 800c852:	f00b fde3 	bl	801841c <sys_thread_new>
}
 800c856:	bf00      	nop
 800c858:	3708      	adds	r7, #8
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	200049fc 	.word	0x200049fc
 800c864:	20004a00 	.word	0x20004a00
 800c868:	20004a04 	.word	0x20004a04
 800c86c:	0801a4b4 	.word	0x0801a4b4
 800c870:	0801a53c 	.word	0x0801a53c
 800c874:	0801a504 	.word	0x0801a504
 800c878:	20008528 	.word	0x20008528
 800c87c:	0801a560 	.word	0x0801a560
 800c880:	0800c585 	.word	0x0800c585
 800c884:	0801a584 	.word	0x0801a584

0800c888 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	4603      	mov	r3, r0
 800c890:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c892:	88fb      	ldrh	r3, [r7, #6]
 800c894:	021b      	lsls	r3, r3, #8
 800c896:	b21a      	sxth	r2, r3
 800c898:	88fb      	ldrh	r3, [r7, #6]
 800c89a:	0a1b      	lsrs	r3, r3, #8
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	b21b      	sxth	r3, r3
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	b21b      	sxth	r3, r3
 800c8a4:	b29b      	uxth	r3, r3
}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	370c      	adds	r7, #12
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr

0800c8b2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c8b2:	b480      	push	{r7}
 800c8b4:	b083      	sub	sp, #12
 800c8b6:	af00      	add	r7, sp, #0
 800c8b8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	061a      	lsls	r2, r3, #24
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	021b      	lsls	r3, r3, #8
 800c8c2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c8c6:	431a      	orrs	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	0a1b      	lsrs	r3, r3, #8
 800c8cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c8d0:	431a      	orrs	r2, r3
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	0e1b      	lsrs	r3, r3, #24
 800c8d6:	4313      	orrs	r3, r2
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	370c      	adds	r7, #12
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800c8e8:	bf00      	nop
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr

0800c8f2 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800c8f6:	f000 faa9 	bl	800ce4c <dns_check_entries>
}
 800c8fa:	bf00      	nop
 800c8fc:	bd80      	pop	{r7, pc}
	...

0800c900 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b090      	sub	sp, #64	; 0x40
 800c904:	af00      	add	r7, sp, #0
 800c906:	4603      	mov	r3, r0
 800c908:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800c90a:	79fa      	ldrb	r2, [r7, #7]
 800c90c:	4613      	mov	r3, r2
 800c90e:	011b      	lsls	r3, r3, #4
 800c910:	4413      	add	r3, r2
 800c912:	011b      	lsls	r3, r3, #4
 800c914:	4a6c      	ldr	r2, [pc, #432]	; (800cac8 <dns_send+0x1c8>)
 800c916:	4413      	add	r3, r2
 800c918:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800c91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c91c:	7adb      	ldrb	r3, [r3, #11]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d906      	bls.n	800c930 <dns_send+0x30>
 800c922:	4b6a      	ldr	r3, [pc, #424]	; (800cacc <dns_send+0x1cc>)
 800c924:	f240 22fa 	movw	r2, #762	; 0x2fa
 800c928:	4969      	ldr	r1, [pc, #420]	; (800cad0 <dns_send+0x1d0>)
 800c92a:	486a      	ldr	r0, [pc, #424]	; (800cad4 <dns_send+0x1d4>)
 800c92c:	f00b feae 	bl	801868c <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800c930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c932:	7adb      	ldrb	r3, [r3, #11]
 800c934:	461a      	mov	r2, r3
 800c936:	4b68      	ldr	r3, [pc, #416]	; (800cad8 <dns_send+0x1d8>)
 800c938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d109      	bne.n	800c954 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800c940:	79fb      	ldrb	r3, [r7, #7]
 800c942:	2100      	movs	r1, #0
 800c944:	4618      	mov	r0, r3
 800c946:	f000 f8cb 	bl	800cae0 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800c94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c94c:	2200      	movs	r2, #0
 800c94e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	e0b4      	b.n	800cabe <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800c954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c956:	3310      	adds	r3, #16
 800c958:	4618      	mov	r0, r3
 800c95a:	f7f3 fc43 	bl	80001e4 <strlen>
 800c95e:	4603      	mov	r3, r0
 800c960:	b29b      	uxth	r3, r3
 800c962:	3312      	adds	r3, #18
 800c964:	b29b      	uxth	r3, r3
 800c966:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c96a:	4619      	mov	r1, r3
 800c96c:	2036      	movs	r0, #54	; 0x36
 800c96e:	f001 fb1d 	bl	800dfac <pbuf_alloc>
 800c972:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800c974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c976:	2b00      	cmp	r3, #0
 800c978:	f000 8095 	beq.w	800caa6 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800c97c:	f107 0310 	add.w	r3, r7, #16
 800c980:	220c      	movs	r2, #12
 800c982:	2100      	movs	r1, #0
 800c984:	4618      	mov	r0, r3
 800c986:	f00b fdcf 	bl	8018528 <memset>
    hdr.id = lwip_htons(entry->txid);
 800c98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c98c:	891b      	ldrh	r3, [r3, #8]
 800c98e:	4618      	mov	r0, r3
 800c990:	f7ff ff7a 	bl	800c888 <lwip_htons>
 800c994:	4603      	mov	r3, r0
 800c996:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800c998:	2301      	movs	r3, #1
 800c99a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800c99c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c9a0:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800c9a2:	f107 0310 	add.w	r3, r7, #16
 800c9a6:	220c      	movs	r2, #12
 800c9a8:	4619      	mov	r1, r3
 800c9aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9ac:	f002 f8c8 	bl	800eb40 <pbuf_take>
    hostname = entry->name;
 800c9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b2:	3310      	adds	r3, #16
 800c9b4:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800c9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800c9bc:	230c      	movs	r3, #12
 800c9be:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c2:	3301      	adds	r3, #1
 800c9c4:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800c9c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c9d0:	e007      	b.n	800c9e2 <dns_send+0xe2>
        ++n;
 800c9d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9de:	3301      	adds	r3, #1
 800c9e0:	63bb      	str	r3, [r7, #56]	; 0x38
 800c9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	2b2e      	cmp	r3, #46	; 0x2e
 800c9e8:	d003      	beq.n	800c9f2 <dns_send+0xf2>
 800c9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1ef      	bne.n	800c9d2 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800c9f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800c9fa:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800c9fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca00:	4413      	add	r3, r2
 800ca02:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ca06:	4293      	cmp	r3, r2
 800ca08:	dc53      	bgt.n	800cab2 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800ca0a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ca0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca10:	4619      	mov	r1, r3
 800ca12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca14:	f002 f9c2 	bl	800ed9c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800ca18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca1a:	3301      	adds	r3, #1
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ca20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca24:	f002 f91e 	bl	800ec64 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800ca28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca30:	4413      	add	r3, r2
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	3301      	adds	r3, #1
 800ca36:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca3a:	781b      	ldrb	r3, [r3, #0]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1bf      	bne.n	800c9c0 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800ca40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca42:	2200      	movs	r2, #0
 800ca44:	4619      	mov	r1, r3
 800ca46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca48:	f002 f9a8 	bl	800ed9c <pbuf_put_at>
    query_idx++;
 800ca4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca4e:	3301      	adds	r3, #1
 800ca50:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800ca52:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca56:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800ca58:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca5c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800ca5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ca60:	f107 010c 	add.w	r1, r7, #12
 800ca64:	2204      	movs	r2, #4
 800ca66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca68:	f002 f8fc 	bl	800ec64 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800ca6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca6e:	7bdb      	ldrb	r3, [r3, #15]
 800ca70:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800ca74:	2335      	movs	r3, #53	; 0x35
 800ca76:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	7adb      	ldrb	r3, [r3, #11]
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4a16      	ldr	r2, [pc, #88]	; (800cad8 <dns_send+0x1d8>)
 800ca80:	4413      	add	r3, r2
 800ca82:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800ca84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ca88:	4a14      	ldr	r2, [pc, #80]	; (800cadc <dns_send+0x1dc>)
 800ca8a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ca8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ca90:	69fa      	ldr	r2, [r7, #28]
 800ca92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca94:	f008 fd96 	bl	80155c4 <udp_sendto>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800ca9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caa0:	f001 fd9a 	bl	800e5d8 <pbuf_free>
 800caa4:	e002      	b.n	800caac <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800caa6:	23ff      	movs	r3, #255	; 0xff
 800caa8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800caac:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cab0:	e005      	b.n	800cabe <dns_send+0x1be>
        goto overflow_return;
 800cab2:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800cab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cab6:	f001 fd8f 	bl	800e5d8 <pbuf_free>
  return ERR_VAL;
 800caba:	f06f 0305 	mvn.w	r3, #5
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3740      	adds	r7, #64	; 0x40
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20004a18 	.word	0x20004a18
 800cacc:	0801a594 	.word	0x0801a594
 800cad0:	0801a5c4 	.word	0x0801a5c4
 800cad4:	0801a5dc 	.word	0x0801a5dc
 800cad8:	20004e88 	.word	0x20004e88
 800cadc:	20004a08 	.word	0x20004a08

0800cae0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800cae0:	b590      	push	{r4, r7, lr}
 800cae2:	b085      	sub	sp, #20
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	6039      	str	r1, [r7, #0]
 800caea:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800caec:	2300      	movs	r3, #0
 800caee:	73fb      	strb	r3, [r7, #15]
 800caf0:	e03d      	b.n	800cb6e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800caf2:	7bfa      	ldrb	r2, [r7, #15]
 800caf4:	4957      	ldr	r1, [pc, #348]	; (800cc54 <dns_call_found+0x174>)
 800caf6:	4613      	mov	r3, r2
 800caf8:	005b      	lsls	r3, r3, #1
 800cafa:	4413      	add	r3, r2
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	440b      	add	r3, r1
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d030      	beq.n	800cb68 <dns_call_found+0x88>
 800cb06:	7bfa      	ldrb	r2, [r7, #15]
 800cb08:	4952      	ldr	r1, [pc, #328]	; (800cc54 <dns_call_found+0x174>)
 800cb0a:	4613      	mov	r3, r2
 800cb0c:	005b      	lsls	r3, r3, #1
 800cb0e:	4413      	add	r3, r2
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	440b      	add	r3, r1
 800cb14:	3308      	adds	r3, #8
 800cb16:	781b      	ldrb	r3, [r3, #0]
 800cb18:	79fa      	ldrb	r2, [r7, #7]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d124      	bne.n	800cb68 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800cb1e:	7bfa      	ldrb	r2, [r7, #15]
 800cb20:	494c      	ldr	r1, [pc, #304]	; (800cc54 <dns_call_found+0x174>)
 800cb22:	4613      	mov	r3, r2
 800cb24:	005b      	lsls	r3, r3, #1
 800cb26:	4413      	add	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	440b      	add	r3, r1
 800cb2c:	681c      	ldr	r4, [r3, #0]
 800cb2e:	79fa      	ldrb	r2, [r7, #7]
 800cb30:	4613      	mov	r3, r2
 800cb32:	011b      	lsls	r3, r3, #4
 800cb34:	4413      	add	r3, r2
 800cb36:	011b      	lsls	r3, r3, #4
 800cb38:	3310      	adds	r3, #16
 800cb3a:	4a47      	ldr	r2, [pc, #284]	; (800cc58 <dns_call_found+0x178>)
 800cb3c:	1898      	adds	r0, r3, r2
 800cb3e:	7bfa      	ldrb	r2, [r7, #15]
 800cb40:	4944      	ldr	r1, [pc, #272]	; (800cc54 <dns_call_found+0x174>)
 800cb42:	4613      	mov	r3, r2
 800cb44:	005b      	lsls	r3, r3, #1
 800cb46:	4413      	add	r3, r2
 800cb48:	009b      	lsls	r3, r3, #2
 800cb4a:	440b      	add	r3, r1
 800cb4c:	3304      	adds	r3, #4
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	461a      	mov	r2, r3
 800cb52:	6839      	ldr	r1, [r7, #0]
 800cb54:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800cb56:	7bfa      	ldrb	r2, [r7, #15]
 800cb58:	493e      	ldr	r1, [pc, #248]	; (800cc54 <dns_call_found+0x174>)
 800cb5a:	4613      	mov	r3, r2
 800cb5c:	005b      	lsls	r3, r3, #1
 800cb5e:	4413      	add	r3, r2
 800cb60:	009b      	lsls	r3, r3, #2
 800cb62:	440b      	add	r3, r1
 800cb64:	2200      	movs	r2, #0
 800cb66:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800cb68:	7bfb      	ldrb	r3, [r7, #15]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	73fb      	strb	r3, [r7, #15]
 800cb6e:	7bfb      	ldrb	r3, [r7, #15]
 800cb70:	2b03      	cmp	r3, #3
 800cb72:	d9be      	bls.n	800caf2 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800cb74:	2300      	movs	r3, #0
 800cb76:	73fb      	strb	r3, [r7, #15]
 800cb78:	e031      	b.n	800cbde <dns_call_found+0xfe>
    if (i == idx) {
 800cb7a:	7bfa      	ldrb	r2, [r7, #15]
 800cb7c:	79fb      	ldrb	r3, [r7, #7]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d029      	beq.n	800cbd6 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800cb82:	7bfa      	ldrb	r2, [r7, #15]
 800cb84:	4934      	ldr	r1, [pc, #208]	; (800cc58 <dns_call_found+0x178>)
 800cb86:	4613      	mov	r3, r2
 800cb88:	011b      	lsls	r3, r3, #4
 800cb8a:	4413      	add	r3, r2
 800cb8c:	011b      	lsls	r3, r3, #4
 800cb8e:	440b      	add	r3, r1
 800cb90:	330a      	adds	r3, #10
 800cb92:	781b      	ldrb	r3, [r3, #0]
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d11f      	bne.n	800cbd8 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800cb98:	7bfa      	ldrb	r2, [r7, #15]
 800cb9a:	492f      	ldr	r1, [pc, #188]	; (800cc58 <dns_call_found+0x178>)
 800cb9c:	4613      	mov	r3, r2
 800cb9e:	011b      	lsls	r3, r3, #4
 800cba0:	4413      	add	r3, r2
 800cba2:	011b      	lsls	r3, r3, #4
 800cba4:	440b      	add	r3, r1
 800cba6:	330f      	adds	r3, #15
 800cba8:	7819      	ldrb	r1, [r3, #0]
 800cbaa:	79fa      	ldrb	r2, [r7, #7]
 800cbac:	482a      	ldr	r0, [pc, #168]	; (800cc58 <dns_call_found+0x178>)
 800cbae:	4613      	mov	r3, r2
 800cbb0:	011b      	lsls	r3, r3, #4
 800cbb2:	4413      	add	r3, r2
 800cbb4:	011b      	lsls	r3, r3, #4
 800cbb6:	4403      	add	r3, r0
 800cbb8:	330f      	adds	r3, #15
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	4299      	cmp	r1, r3
 800cbbe:	d10b      	bne.n	800cbd8 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800cbc0:	79fa      	ldrb	r2, [r7, #7]
 800cbc2:	4925      	ldr	r1, [pc, #148]	; (800cc58 <dns_call_found+0x178>)
 800cbc4:	4613      	mov	r3, r2
 800cbc6:	011b      	lsls	r3, r3, #4
 800cbc8:	4413      	add	r3, r2
 800cbca:	011b      	lsls	r3, r3, #4
 800cbcc:	440b      	add	r3, r1
 800cbce:	330f      	adds	r3, #15
 800cbd0:	2204      	movs	r2, #4
 800cbd2:	701a      	strb	r2, [r3, #0]
        break;
 800cbd4:	e006      	b.n	800cbe4 <dns_call_found+0x104>
      continue; /* only check other requests */
 800cbd6:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800cbd8:	7bfb      	ldrb	r3, [r7, #15]
 800cbda:	3301      	adds	r3, #1
 800cbdc:	73fb      	strb	r3, [r7, #15]
 800cbde:	7bfb      	ldrb	r3, [r7, #15]
 800cbe0:	2b03      	cmp	r3, #3
 800cbe2:	d9ca      	bls.n	800cb7a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800cbe4:	79fa      	ldrb	r2, [r7, #7]
 800cbe6:	491c      	ldr	r1, [pc, #112]	; (800cc58 <dns_call_found+0x178>)
 800cbe8:	4613      	mov	r3, r2
 800cbea:	011b      	lsls	r3, r3, #4
 800cbec:	4413      	add	r3, r2
 800cbee:	011b      	lsls	r3, r3, #4
 800cbf0:	440b      	add	r3, r1
 800cbf2:	330f      	adds	r3, #15
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d827      	bhi.n	800cc4a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800cbfa:	79fa      	ldrb	r2, [r7, #7]
 800cbfc:	4916      	ldr	r1, [pc, #88]	; (800cc58 <dns_call_found+0x178>)
 800cbfe:	4613      	mov	r3, r2
 800cc00:	011b      	lsls	r3, r3, #4
 800cc02:	4413      	add	r3, r2
 800cc04:	011b      	lsls	r3, r3, #4
 800cc06:	440b      	add	r3, r1
 800cc08:	330f      	adds	r3, #15
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	4b13      	ldr	r3, [pc, #76]	; (800cc5c <dns_call_found+0x17c>)
 800cc10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc14:	4618      	mov	r0, r3
 800cc16:	f008 ff33 	bl	8015a80 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800cc1a:	79fa      	ldrb	r2, [r7, #7]
 800cc1c:	490e      	ldr	r1, [pc, #56]	; (800cc58 <dns_call_found+0x178>)
 800cc1e:	4613      	mov	r3, r2
 800cc20:	011b      	lsls	r3, r3, #4
 800cc22:	4413      	add	r3, r2
 800cc24:	011b      	lsls	r3, r3, #4
 800cc26:	440b      	add	r3, r1
 800cc28:	330f      	adds	r3, #15
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	4b0b      	ldr	r3, [pc, #44]	; (800cc5c <dns_call_found+0x17c>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800cc36:	79fa      	ldrb	r2, [r7, #7]
 800cc38:	4907      	ldr	r1, [pc, #28]	; (800cc58 <dns_call_found+0x178>)
 800cc3a:	4613      	mov	r3, r2
 800cc3c:	011b      	lsls	r3, r3, #4
 800cc3e:	4413      	add	r3, r2
 800cc40:	011b      	lsls	r3, r3, #4
 800cc42:	440b      	add	r3, r1
 800cc44:	330f      	adds	r3, #15
 800cc46:	2204      	movs	r2, #4
 800cc48:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800cc4a:	bf00      	nop
 800cc4c:	3714      	adds	r7, #20
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd90      	pop	{r4, r7, pc}
 800cc52:	bf00      	nop
 800cc54:	20004e58 	.word	0x20004e58
 800cc58:	20004a18 	.word	0x20004a18
 800cc5c:	20004a08 	.word	0x20004a08

0800cc60 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800cc66:	f00b fd29 	bl	80186bc <rand>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800cc6e:	2300      	movs	r3, #0
 800cc70:	71fb      	strb	r3, [r7, #7]
 800cc72:	e01a      	b.n	800ccaa <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800cc74:	79fa      	ldrb	r2, [r7, #7]
 800cc76:	4911      	ldr	r1, [pc, #68]	; (800ccbc <dns_create_txid+0x5c>)
 800cc78:	4613      	mov	r3, r2
 800cc7a:	011b      	lsls	r3, r3, #4
 800cc7c:	4413      	add	r3, r2
 800cc7e:	011b      	lsls	r3, r3, #4
 800cc80:	440b      	add	r3, r1
 800cc82:	330a      	adds	r3, #10
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	d10c      	bne.n	800cca4 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800cc8a:	79fa      	ldrb	r2, [r7, #7]
 800cc8c:	490b      	ldr	r1, [pc, #44]	; (800ccbc <dns_create_txid+0x5c>)
 800cc8e:	4613      	mov	r3, r2
 800cc90:	011b      	lsls	r3, r3, #4
 800cc92:	4413      	add	r3, r2
 800cc94:	011b      	lsls	r3, r3, #4
 800cc96:	440b      	add	r3, r1
 800cc98:	3308      	adds	r3, #8
 800cc9a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800cc9c:	88ba      	ldrh	r2, [r7, #4]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d100      	bne.n	800cca4 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800cca2:	e7e0      	b.n	800cc66 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800cca4:	79fb      	ldrb	r3, [r7, #7]
 800cca6:	3301      	adds	r3, #1
 800cca8:	71fb      	strb	r3, [r7, #7]
 800ccaa:	79fb      	ldrb	r3, [r7, #7]
 800ccac:	2b03      	cmp	r3, #3
 800ccae:	d9e1      	bls.n	800cc74 <dns_create_txid+0x14>
    }
  }

  return txid;
 800ccb0:	88bb      	ldrh	r3, [r7, #4]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	20004a18 	.word	0x20004a18

0800ccc0 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b085      	sub	sp, #20
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d00d      	beq.n	800ccee <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	7adb      	ldrb	r3, [r3, #11]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d109      	bne.n	800ccee <dns_backupserver_available+0x2e>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	7adb      	ldrb	r3, [r3, #11]
 800ccde:	3301      	adds	r3, #1
 800cce0:	4a06      	ldr	r2, [pc, #24]	; (800ccfc <dns_backupserver_available+0x3c>)
 800cce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d001      	beq.n	800ccee <dns_backupserver_available+0x2e>
      ret = 1;
 800ccea:	2301      	movs	r3, #1
 800ccec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800ccee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3714      	adds	r7, #20
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	20004e88 	.word	0x20004e88

0800cd00 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	4603      	mov	r3, r0
 800cd08:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800cd0a:	79fa      	ldrb	r2, [r7, #7]
 800cd0c:	4613      	mov	r3, r2
 800cd0e:	011b      	lsls	r3, r3, #4
 800cd10:	4413      	add	r3, r2
 800cd12:	011b      	lsls	r3, r3, #4
 800cd14:	4a48      	ldr	r2, [pc, #288]	; (800ce38 <dns_check_entry+0x138>)
 800cd16:	4413      	add	r3, r2
 800cd18:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800cd1a:	79fb      	ldrb	r3, [r7, #7]
 800cd1c:	2b03      	cmp	r3, #3
 800cd1e:	d906      	bls.n	800cd2e <dns_check_entry+0x2e>
 800cd20:	4b46      	ldr	r3, [pc, #280]	; (800ce3c <dns_check_entry+0x13c>)
 800cd22:	f240 421c 	movw	r2, #1052	; 0x41c
 800cd26:	4946      	ldr	r1, [pc, #280]	; (800ce40 <dns_check_entry+0x140>)
 800cd28:	4846      	ldr	r0, [pc, #280]	; (800ce44 <dns_check_entry+0x144>)
 800cd2a:	f00b fcaf 	bl	801868c <iprintf>

  switch (entry->state) {
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	7a9b      	ldrb	r3, [r3, #10]
 800cd32:	2b03      	cmp	r3, #3
 800cd34:	d86f      	bhi.n	800ce16 <dns_check_entry+0x116>
 800cd36:	a201      	add	r2, pc, #4	; (adr r2, 800cd3c <dns_check_entry+0x3c>)
 800cd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3c:	0800ce27 	.word	0x0800ce27
 800cd40:	0800cd4d 	.word	0x0800cd4d
 800cd44:	0800cd7f 	.word	0x0800cd7f
 800cd48:	0800cdf5 	.word	0x0800cdf5
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800cd4c:	f7ff ff88 	bl	800cc60 <dns_create_txid>
 800cd50:	4603      	mov	r3, r0
 800cd52:	461a      	mov	r2, r3
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2201      	movs	r2, #1
 800cd68:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800cd70:	79fb      	ldrb	r3, [r7, #7]
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7ff fdc4 	bl	800c900 <dns_send>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800cd7c:	e058      	b.n	800ce30 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	7b1b      	ldrb	r3, [r3, #12]
 800cd82:	3b01      	subs	r3, #1
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	731a      	strb	r2, [r3, #12]
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	7b1b      	ldrb	r3, [r3, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d14b      	bne.n	800ce2a <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	7b5b      	ldrb	r3, [r3, #13]
 800cd96:	3301      	adds	r3, #1
 800cd98:	b2da      	uxtb	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	735a      	strb	r2, [r3, #13]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	7b5b      	ldrb	r3, [r3, #13]
 800cda2:	2b04      	cmp	r3, #4
 800cda4:	d11b      	bne.n	800cdde <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f7ff ff8a 	bl	800ccc0 <dns_backupserver_available>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d00c      	beq.n	800cdcc <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	7adb      	ldrb	r3, [r3, #11]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	735a      	strb	r2, [r3, #13]
 800cdca:	e00c      	b.n	800cde6 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800cdcc:	79fb      	ldrb	r3, [r7, #7]
 800cdce:	2100      	movs	r1, #0
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f7ff fe85 	bl	800cae0 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	729a      	strb	r2, [r3, #10]
            break;
 800cddc:	e028      	b.n	800ce30 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	7b5a      	ldrb	r2, [r3, #13]
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800cde6:	79fb      	ldrb	r3, [r7, #7]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7ff fd89 	bl	800c900 <dns_send>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800cdf2:	e01a      	b.n	800ce2a <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d008      	beq.n	800ce0e <dns_check_entry+0x10e>
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	1e5a      	subs	r2, r3, #1
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	601a      	str	r2, [r3, #0]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10f      	bne.n	800ce2e <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2200      	movs	r2, #0
 800ce12:	729a      	strb	r2, [r3, #10]
      }
      break;
 800ce14:	e00b      	b.n	800ce2e <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800ce16:	4b09      	ldr	r3, [pc, #36]	; (800ce3c <dns_check_entry+0x13c>)
 800ce18:	f240 425b 	movw	r2, #1115	; 0x45b
 800ce1c:	490a      	ldr	r1, [pc, #40]	; (800ce48 <dns_check_entry+0x148>)
 800ce1e:	4809      	ldr	r0, [pc, #36]	; (800ce44 <dns_check_entry+0x144>)
 800ce20:	f00b fc34 	bl	801868c <iprintf>
      break;
 800ce24:	e004      	b.n	800ce30 <dns_check_entry+0x130>
      break;
 800ce26:	bf00      	nop
 800ce28:	e002      	b.n	800ce30 <dns_check_entry+0x130>
      break;
 800ce2a:	bf00      	nop
 800ce2c:	e000      	b.n	800ce30 <dns_check_entry+0x130>
      break;
 800ce2e:	bf00      	nop
  }
}
 800ce30:	bf00      	nop
 800ce32:	3710      	adds	r7, #16
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	20004a18 	.word	0x20004a18
 800ce3c:	0801a594 	.word	0x0801a594
 800ce40:	0801a604 	.word	0x0801a604
 800ce44:	0801a5dc 	.word	0x0801a5dc
 800ce48:	0801a620 	.word	0x0801a620

0800ce4c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b082      	sub	sp, #8
 800ce50:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ce52:	2300      	movs	r3, #0
 800ce54:	71fb      	strb	r3, [r7, #7]
 800ce56:	e006      	b.n	800ce66 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800ce58:	79fb      	ldrb	r3, [r7, #7]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7ff ff50 	bl	800cd00 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800ce60:	79fb      	ldrb	r3, [r7, #7]
 800ce62:	3301      	adds	r3, #1
 800ce64:	71fb      	strb	r3, [r7, #7]
 800ce66:	79fb      	ldrb	r3, [r7, #7]
 800ce68:	2b03      	cmp	r3, #3
 800ce6a:	d9f5      	bls.n	800ce58 <dns_check_entries+0xc>
  }
}
 800ce6c:	bf00      	nop
 800ce6e:	bf00      	nop
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ce80:	f00b fa8e 	bl	80183a0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ce84:	f000 f8d6 	bl	800d034 <mem_init>
  memp_init();
 800ce88:	f000 fc32 	bl	800d6f0 <memp_init>
  pbuf_init();
  netif_init();
 800ce8c:	f000 fcf8 	bl	800d880 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ce90:	f008 f9a2 	bl	80151d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ce94:	f001 ffa4 	bl	800ede0 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800ce98:	f7ff fd24 	bl	800c8e4 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ce9c:	f008 f8e2 	bl	8015064 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800cea0:	bf00      	nop
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	4603      	mov	r3, r0
 800ceb0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ceb2:	4b05      	ldr	r3, [pc, #20]	; (800cec8 <ptr_to_mem+0x20>)
 800ceb4:	681a      	ldr	r2, [r3, #0]
 800ceb6:	88fb      	ldrh	r3, [r7, #6]
 800ceb8:	4413      	add	r3, r2
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	370c      	adds	r7, #12
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	20004e90 	.word	0x20004e90

0800cecc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800cecc:	b480      	push	{r7}
 800cece:	b083      	sub	sp, #12
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ced4:	4b05      	ldr	r3, [pc, #20]	; (800ceec <mem_to_ptr+0x20>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	1ad3      	subs	r3, r2, r3
 800cedc:	b29b      	uxth	r3, r3
}
 800cede:	4618      	mov	r0, r3
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	20004e90 	.word	0x20004e90

0800cef0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800cef0:	b590      	push	{r4, r7, lr}
 800cef2:	b085      	sub	sp, #20
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800cef8:	4b45      	ldr	r3, [pc, #276]	; (800d010 <plug_holes+0x120>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	687a      	ldr	r2, [r7, #4]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d206      	bcs.n	800cf10 <plug_holes+0x20>
 800cf02:	4b44      	ldr	r3, [pc, #272]	; (800d014 <plug_holes+0x124>)
 800cf04:	f240 12df 	movw	r2, #479	; 0x1df
 800cf08:	4943      	ldr	r1, [pc, #268]	; (800d018 <plug_holes+0x128>)
 800cf0a:	4844      	ldr	r0, [pc, #272]	; (800d01c <plug_holes+0x12c>)
 800cf0c:	f00b fbbe 	bl	801868c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800cf10:	4b43      	ldr	r3, [pc, #268]	; (800d020 <plug_holes+0x130>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d306      	bcc.n	800cf28 <plug_holes+0x38>
 800cf1a:	4b3e      	ldr	r3, [pc, #248]	; (800d014 <plug_holes+0x124>)
 800cf1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cf20:	4940      	ldr	r1, [pc, #256]	; (800d024 <plug_holes+0x134>)
 800cf22:	483e      	ldr	r0, [pc, #248]	; (800d01c <plug_holes+0x12c>)
 800cf24:	f00b fbb2 	bl	801868c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	791b      	ldrb	r3, [r3, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d006      	beq.n	800cf3e <plug_holes+0x4e>
 800cf30:	4b38      	ldr	r3, [pc, #224]	; (800d014 <plug_holes+0x124>)
 800cf32:	f240 12e1 	movw	r2, #481	; 0x1e1
 800cf36:	493c      	ldr	r1, [pc, #240]	; (800d028 <plug_holes+0x138>)
 800cf38:	4838      	ldr	r0, [pc, #224]	; (800d01c <plug_holes+0x12c>)
 800cf3a:	f00b fba7 	bl	801868c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	881b      	ldrh	r3, [r3, #0]
 800cf42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf46:	d906      	bls.n	800cf56 <plug_holes+0x66>
 800cf48:	4b32      	ldr	r3, [pc, #200]	; (800d014 <plug_holes+0x124>)
 800cf4a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800cf4e:	4937      	ldr	r1, [pc, #220]	; (800d02c <plug_holes+0x13c>)
 800cf50:	4832      	ldr	r0, [pc, #200]	; (800d01c <plug_holes+0x12c>)
 800cf52:	f00b fb9b 	bl	801868c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f7ff ffa4 	bl	800cea8 <ptr_to_mem>
 800cf60:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	429a      	cmp	r2, r3
 800cf68:	d024      	beq.n	800cfb4 <plug_holes+0xc4>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	791b      	ldrb	r3, [r3, #4]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d120      	bne.n	800cfb4 <plug_holes+0xc4>
 800cf72:	4b2b      	ldr	r3, [pc, #172]	; (800d020 <plug_holes+0x130>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d01b      	beq.n	800cfb4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800cf7c:	4b2c      	ldr	r3, [pc, #176]	; (800d030 <plug_holes+0x140>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	429a      	cmp	r2, r3
 800cf84:	d102      	bne.n	800cf8c <plug_holes+0x9c>
      lfree = mem;
 800cf86:	4a2a      	ldr	r2, [pc, #168]	; (800d030 <plug_holes+0x140>)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	881a      	ldrh	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	881b      	ldrh	r3, [r3, #0]
 800cf98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cf9c:	d00a      	beq.n	800cfb4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7ff ff80 	bl	800cea8 <ptr_to_mem>
 800cfa8:	4604      	mov	r4, r0
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f7ff ff8e 	bl	800cecc <mem_to_ptr>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	885b      	ldrh	r3, [r3, #2]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff ff75 	bl	800cea8 <ptr_to_mem>
 800cfbe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800cfc0:	68ba      	ldr	r2, [r7, #8]
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d01f      	beq.n	800d008 <plug_holes+0x118>
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	791b      	ldrb	r3, [r3, #4]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d11b      	bne.n	800d008 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800cfd0:	4b17      	ldr	r3, [pc, #92]	; (800d030 <plug_holes+0x140>)
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d102      	bne.n	800cfe0 <plug_holes+0xf0>
      lfree = pmem;
 800cfda:	4a15      	ldr	r2, [pc, #84]	; (800d030 <plug_holes+0x140>)
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	881a      	ldrh	r2, [r3, #0]
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	881b      	ldrh	r3, [r3, #0]
 800cfec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800cff0:	d00a      	beq.n	800d008 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	881b      	ldrh	r3, [r3, #0]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f7ff ff56 	bl	800cea8 <ptr_to_mem>
 800cffc:	4604      	mov	r4, r0
 800cffe:	68b8      	ldr	r0, [r7, #8]
 800d000:	f7ff ff64 	bl	800cecc <mem_to_ptr>
 800d004:	4603      	mov	r3, r0
 800d006:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d008:	bf00      	nop
 800d00a:	3714      	adds	r7, #20
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd90      	pop	{r4, r7, pc}
 800d010:	20004e90 	.word	0x20004e90
 800d014:	0801a640 	.word	0x0801a640
 800d018:	0801a670 	.word	0x0801a670
 800d01c:	0801a688 	.word	0x0801a688
 800d020:	20004e94 	.word	0x20004e94
 800d024:	0801a6b0 	.word	0x0801a6b0
 800d028:	0801a6cc 	.word	0x0801a6cc
 800d02c:	0801a6e8 	.word	0x0801a6e8
 800d030:	20004e9c 	.word	0x20004e9c

0800d034 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d03a:	4b1f      	ldr	r3, [pc, #124]	; (800d0b8 <mem_init+0x84>)
 800d03c:	3303      	adds	r3, #3
 800d03e:	f023 0303 	bic.w	r3, r3, #3
 800d042:	461a      	mov	r2, r3
 800d044:	4b1d      	ldr	r3, [pc, #116]	; (800d0bc <mem_init+0x88>)
 800d046:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d048:	4b1c      	ldr	r3, [pc, #112]	; (800d0bc <mem_init+0x88>)
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d054:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d062:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800d066:	f7ff ff1f 	bl	800cea8 <ptr_to_mem>
 800d06a:	4603      	mov	r3, r0
 800d06c:	4a14      	ldr	r2, [pc, #80]	; (800d0c0 <mem_init+0x8c>)
 800d06e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d070:	4b13      	ldr	r3, [pc, #76]	; (800d0c0 <mem_init+0x8c>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	2201      	movs	r2, #1
 800d076:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d078:	4b11      	ldr	r3, [pc, #68]	; (800d0c0 <mem_init+0x8c>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d080:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d082:	4b0f      	ldr	r3, [pc, #60]	; (800d0c0 <mem_init+0x8c>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800d08a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d08c:	4b0b      	ldr	r3, [pc, #44]	; (800d0bc <mem_init+0x88>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	4a0c      	ldr	r2, [pc, #48]	; (800d0c4 <mem_init+0x90>)
 800d092:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d094:	480c      	ldr	r0, [pc, #48]	; (800d0c8 <mem_init+0x94>)
 800d096:	f00b f98f 	bl	80183b8 <sys_mutex_new>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d006      	beq.n	800d0ae <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d0a0:	4b0a      	ldr	r3, [pc, #40]	; (800d0cc <mem_init+0x98>)
 800d0a2:	f240 221f 	movw	r2, #543	; 0x21f
 800d0a6:	490a      	ldr	r1, [pc, #40]	; (800d0d0 <mem_init+0x9c>)
 800d0a8:	480a      	ldr	r0, [pc, #40]	; (800d0d4 <mem_init+0xa0>)
 800d0aa:	f00b faef 	bl	801868c <iprintf>
  }
}
 800d0ae:	bf00      	nop
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20008544 	.word	0x20008544
 800d0bc:	20004e90 	.word	0x20004e90
 800d0c0:	20004e94 	.word	0x20004e94
 800d0c4:	20004e9c 	.word	0x20004e9c
 800d0c8:	20004e98 	.word	0x20004e98
 800d0cc:	0801a640 	.word	0x0801a640
 800d0d0:	0801a714 	.word	0x0801a714
 800d0d4:	0801a688 	.word	0x0801a688

0800d0d8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f7ff fef3 	bl	800cecc <mem_to_ptr>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	881b      	ldrh	r3, [r3, #0]
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	f7ff feda 	bl	800cea8 <ptr_to_mem>
 800d0f4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	885b      	ldrh	r3, [r3, #2]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7ff fed4 	bl	800cea8 <ptr_to_mem>
 800d100:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	881b      	ldrh	r3, [r3, #0]
 800d106:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d10a:	d818      	bhi.n	800d13e <mem_link_valid+0x66>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	885b      	ldrh	r3, [r3, #2]
 800d110:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d114:	d813      	bhi.n	800d13e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d11a:	8afa      	ldrh	r2, [r7, #22]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d004      	beq.n	800d12a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	8afa      	ldrh	r2, [r7, #22]
 800d126:	429a      	cmp	r2, r3
 800d128:	d109      	bne.n	800d13e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d12a:	4b08      	ldr	r3, [pc, #32]	; (800d14c <mem_link_valid+0x74>)
 800d12c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d12e:	693a      	ldr	r2, [r7, #16]
 800d130:	429a      	cmp	r2, r3
 800d132:	d006      	beq.n	800d142 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d134:	693b      	ldr	r3, [r7, #16]
 800d136:	885b      	ldrh	r3, [r3, #2]
 800d138:	8afa      	ldrh	r2, [r7, #22]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d001      	beq.n	800d142 <mem_link_valid+0x6a>
    return 0;
 800d13e:	2300      	movs	r3, #0
 800d140:	e000      	b.n	800d144 <mem_link_valid+0x6c>
  }
  return 1;
 800d142:	2301      	movs	r3, #1
}
 800d144:	4618      	mov	r0, r3
 800d146:	3718      	adds	r7, #24
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}
 800d14c:	20004e94 	.word	0x20004e94

0800d150 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b088      	sub	sp, #32
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d070      	beq.n	800d240 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f003 0303 	and.w	r3, r3, #3
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00d      	beq.n	800d184 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d168:	4b37      	ldr	r3, [pc, #220]	; (800d248 <mem_free+0xf8>)
 800d16a:	f240 2273 	movw	r2, #627	; 0x273
 800d16e:	4937      	ldr	r1, [pc, #220]	; (800d24c <mem_free+0xfc>)
 800d170:	4837      	ldr	r0, [pc, #220]	; (800d250 <mem_free+0x100>)
 800d172:	f00b fa8b 	bl	801868c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d176:	f00b f971 	bl	801845c <sys_arch_protect>
 800d17a:	60f8      	str	r0, [r7, #12]
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f00b f97b 	bl	8018478 <sys_arch_unprotect>
    return;
 800d182:	e05e      	b.n	800d242 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	3b08      	subs	r3, #8
 800d188:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d18a:	4b32      	ldr	r3, [pc, #200]	; (800d254 <mem_free+0x104>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	69fa      	ldr	r2, [r7, #28]
 800d190:	429a      	cmp	r2, r3
 800d192:	d306      	bcc.n	800d1a2 <mem_free+0x52>
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f103 020c 	add.w	r2, r3, #12
 800d19a:	4b2f      	ldr	r3, [pc, #188]	; (800d258 <mem_free+0x108>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	d90d      	bls.n	800d1be <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d1a2:	4b29      	ldr	r3, [pc, #164]	; (800d248 <mem_free+0xf8>)
 800d1a4:	f240 227f 	movw	r2, #639	; 0x27f
 800d1a8:	492c      	ldr	r1, [pc, #176]	; (800d25c <mem_free+0x10c>)
 800d1aa:	4829      	ldr	r0, [pc, #164]	; (800d250 <mem_free+0x100>)
 800d1ac:	f00b fa6e 	bl	801868c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d1b0:	f00b f954 	bl	801845c <sys_arch_protect>
 800d1b4:	6138      	str	r0, [r7, #16]
 800d1b6:	6938      	ldr	r0, [r7, #16]
 800d1b8:	f00b f95e 	bl	8018478 <sys_arch_unprotect>
    return;
 800d1bc:	e041      	b.n	800d242 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d1be:	4828      	ldr	r0, [pc, #160]	; (800d260 <mem_free+0x110>)
 800d1c0:	f00b f910 	bl	80183e4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	791b      	ldrb	r3, [r3, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d110      	bne.n	800d1ee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800d1cc:	4b1e      	ldr	r3, [pc, #120]	; (800d248 <mem_free+0xf8>)
 800d1ce:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800d1d2:	4924      	ldr	r1, [pc, #144]	; (800d264 <mem_free+0x114>)
 800d1d4:	481e      	ldr	r0, [pc, #120]	; (800d250 <mem_free+0x100>)
 800d1d6:	f00b fa59 	bl	801868c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d1da:	4821      	ldr	r0, [pc, #132]	; (800d260 <mem_free+0x110>)
 800d1dc:	f00b f911 	bl	8018402 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d1e0:	f00b f93c 	bl	801845c <sys_arch_protect>
 800d1e4:	6178      	str	r0, [r7, #20]
 800d1e6:	6978      	ldr	r0, [r7, #20]
 800d1e8:	f00b f946 	bl	8018478 <sys_arch_unprotect>
    return;
 800d1ec:	e029      	b.n	800d242 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800d1ee:	69f8      	ldr	r0, [r7, #28]
 800d1f0:	f7ff ff72 	bl	800d0d8 <mem_link_valid>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d110      	bne.n	800d21c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800d1fa:	4b13      	ldr	r3, [pc, #76]	; (800d248 <mem_free+0xf8>)
 800d1fc:	f240 2295 	movw	r2, #661	; 0x295
 800d200:	4919      	ldr	r1, [pc, #100]	; (800d268 <mem_free+0x118>)
 800d202:	4813      	ldr	r0, [pc, #76]	; (800d250 <mem_free+0x100>)
 800d204:	f00b fa42 	bl	801868c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800d208:	4815      	ldr	r0, [pc, #84]	; (800d260 <mem_free+0x110>)
 800d20a:	f00b f8fa 	bl	8018402 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d20e:	f00b f925 	bl	801845c <sys_arch_protect>
 800d212:	61b8      	str	r0, [r7, #24]
 800d214:	69b8      	ldr	r0, [r7, #24]
 800d216:	f00b f92f 	bl	8018478 <sys_arch_unprotect>
    return;
 800d21a:	e012      	b.n	800d242 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	2200      	movs	r2, #0
 800d220:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800d222:	4b12      	ldr	r3, [pc, #72]	; (800d26c <mem_free+0x11c>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	69fa      	ldr	r2, [r7, #28]
 800d228:	429a      	cmp	r2, r3
 800d22a:	d202      	bcs.n	800d232 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800d22c:	4a0f      	ldr	r2, [pc, #60]	; (800d26c <mem_free+0x11c>)
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800d232:	69f8      	ldr	r0, [r7, #28]
 800d234:	f7ff fe5c 	bl	800cef0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d238:	4809      	ldr	r0, [pc, #36]	; (800d260 <mem_free+0x110>)
 800d23a:	f00b f8e2 	bl	8018402 <sys_mutex_unlock>
 800d23e:	e000      	b.n	800d242 <mem_free+0xf2>
    return;
 800d240:	bf00      	nop
}
 800d242:	3720      	adds	r7, #32
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}
 800d248:	0801a640 	.word	0x0801a640
 800d24c:	0801a730 	.word	0x0801a730
 800d250:	0801a688 	.word	0x0801a688
 800d254:	20004e90 	.word	0x20004e90
 800d258:	20004e94 	.word	0x20004e94
 800d25c:	0801a754 	.word	0x0801a754
 800d260:	20004e98 	.word	0x20004e98
 800d264:	0801a770 	.word	0x0801a770
 800d268:	0801a798 	.word	0x0801a798
 800d26c:	20004e9c 	.word	0x20004e9c

0800d270 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	460b      	mov	r3, r1
 800d27a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800d27c:	887b      	ldrh	r3, [r7, #2]
 800d27e:	3303      	adds	r3, #3
 800d280:	b29b      	uxth	r3, r3
 800d282:	f023 0303 	bic.w	r3, r3, #3
 800d286:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800d288:	8bfb      	ldrh	r3, [r7, #30]
 800d28a:	2b0b      	cmp	r3, #11
 800d28c:	d801      	bhi.n	800d292 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800d28e:	230c      	movs	r3, #12
 800d290:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800d292:	8bfb      	ldrh	r3, [r7, #30]
 800d294:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d298:	d803      	bhi.n	800d2a2 <mem_trim+0x32>
 800d29a:	8bfa      	ldrh	r2, [r7, #30]
 800d29c:	887b      	ldrh	r3, [r7, #2]
 800d29e:	429a      	cmp	r2, r3
 800d2a0:	d201      	bcs.n	800d2a6 <mem_trim+0x36>
    return NULL;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	e0d8      	b.n	800d458 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800d2a6:	4b6e      	ldr	r3, [pc, #440]	; (800d460 <mem_trim+0x1f0>)
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d304      	bcc.n	800d2ba <mem_trim+0x4a>
 800d2b0:	4b6c      	ldr	r3, [pc, #432]	; (800d464 <mem_trim+0x1f4>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	429a      	cmp	r2, r3
 800d2b8:	d306      	bcc.n	800d2c8 <mem_trim+0x58>
 800d2ba:	4b6b      	ldr	r3, [pc, #428]	; (800d468 <mem_trim+0x1f8>)
 800d2bc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800d2c0:	496a      	ldr	r1, [pc, #424]	; (800d46c <mem_trim+0x1fc>)
 800d2c2:	486b      	ldr	r0, [pc, #428]	; (800d470 <mem_trim+0x200>)
 800d2c4:	f00b f9e2 	bl	801868c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800d2c8:	4b65      	ldr	r3, [pc, #404]	; (800d460 <mem_trim+0x1f0>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d304      	bcc.n	800d2dc <mem_trim+0x6c>
 800d2d2:	4b64      	ldr	r3, [pc, #400]	; (800d464 <mem_trim+0x1f4>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d307      	bcc.n	800d2ec <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d2dc:	f00b f8be 	bl	801845c <sys_arch_protect>
 800d2e0:	60b8      	str	r0, [r7, #8]
 800d2e2:	68b8      	ldr	r0, [r7, #8]
 800d2e4:	f00b f8c8 	bl	8018478 <sys_arch_unprotect>
    return rmem;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	e0b5      	b.n	800d458 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	3b08      	subs	r3, #8
 800d2f0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800d2f2:	69b8      	ldr	r0, [r7, #24]
 800d2f4:	f7ff fdea 	bl	800cecc <mem_to_ptr>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	881a      	ldrh	r2, [r3, #0]
 800d300:	8afb      	ldrh	r3, [r7, #22]
 800d302:	1ad3      	subs	r3, r2, r3
 800d304:	b29b      	uxth	r3, r3
 800d306:	3b08      	subs	r3, #8
 800d308:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800d30a:	8bfa      	ldrh	r2, [r7, #30]
 800d30c:	8abb      	ldrh	r3, [r7, #20]
 800d30e:	429a      	cmp	r2, r3
 800d310:	d906      	bls.n	800d320 <mem_trim+0xb0>
 800d312:	4b55      	ldr	r3, [pc, #340]	; (800d468 <mem_trim+0x1f8>)
 800d314:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800d318:	4956      	ldr	r1, [pc, #344]	; (800d474 <mem_trim+0x204>)
 800d31a:	4855      	ldr	r0, [pc, #340]	; (800d470 <mem_trim+0x200>)
 800d31c:	f00b f9b6 	bl	801868c <iprintf>
  if (newsize > size) {
 800d320:	8bfa      	ldrh	r2, [r7, #30]
 800d322:	8abb      	ldrh	r3, [r7, #20]
 800d324:	429a      	cmp	r2, r3
 800d326:	d901      	bls.n	800d32c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800d328:	2300      	movs	r3, #0
 800d32a:	e095      	b.n	800d458 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800d32c:	8bfa      	ldrh	r2, [r7, #30]
 800d32e:	8abb      	ldrh	r3, [r7, #20]
 800d330:	429a      	cmp	r2, r3
 800d332:	d101      	bne.n	800d338 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	e08f      	b.n	800d458 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d338:	484f      	ldr	r0, [pc, #316]	; (800d478 <mem_trim+0x208>)
 800d33a:	f00b f853 	bl	80183e4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	4618      	mov	r0, r3
 800d344:	f7ff fdb0 	bl	800cea8 <ptr_to_mem>
 800d348:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	791b      	ldrb	r3, [r3, #4]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d13f      	bne.n	800d3d2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d35a:	d106      	bne.n	800d36a <mem_trim+0xfa>
 800d35c:	4b42      	ldr	r3, [pc, #264]	; (800d468 <mem_trim+0x1f8>)
 800d35e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800d362:	4946      	ldr	r1, [pc, #280]	; (800d47c <mem_trim+0x20c>)
 800d364:	4842      	ldr	r0, [pc, #264]	; (800d470 <mem_trim+0x200>)
 800d366:	f00b f991 	bl	801868c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	881b      	ldrh	r3, [r3, #0]
 800d36e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d370:	8afa      	ldrh	r2, [r7, #22]
 800d372:	8bfb      	ldrh	r3, [r7, #30]
 800d374:	4413      	add	r3, r2
 800d376:	b29b      	uxth	r3, r3
 800d378:	3308      	adds	r3, #8
 800d37a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800d37c:	4b40      	ldr	r3, [pc, #256]	; (800d480 <mem_trim+0x210>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	693a      	ldr	r2, [r7, #16]
 800d382:	429a      	cmp	r2, r3
 800d384:	d106      	bne.n	800d394 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800d386:	89fb      	ldrh	r3, [r7, #14]
 800d388:	4618      	mov	r0, r3
 800d38a:	f7ff fd8d 	bl	800cea8 <ptr_to_mem>
 800d38e:	4603      	mov	r3, r0
 800d390:	4a3b      	ldr	r2, [pc, #236]	; (800d480 <mem_trim+0x210>)
 800d392:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800d394:	89fb      	ldrh	r3, [r7, #14]
 800d396:	4618      	mov	r0, r3
 800d398:	f7ff fd86 	bl	800cea8 <ptr_to_mem>
 800d39c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	89ba      	ldrh	r2, [r7, #12]
 800d3a8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	8afa      	ldrh	r2, [r7, #22]
 800d3ae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800d3b0:	69bb      	ldr	r3, [r7, #24]
 800d3b2:	89fa      	ldrh	r2, [r7, #14]
 800d3b4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	881b      	ldrh	r3, [r3, #0]
 800d3ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3be:	d047      	beq.n	800d450 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7ff fd6f 	bl	800cea8 <ptr_to_mem>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	89fb      	ldrh	r3, [r7, #14]
 800d3ce:	8053      	strh	r3, [r2, #2]
 800d3d0:	e03e      	b.n	800d450 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800d3d2:	8bfb      	ldrh	r3, [r7, #30]
 800d3d4:	f103 0214 	add.w	r2, r3, #20
 800d3d8:	8abb      	ldrh	r3, [r7, #20]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d838      	bhi.n	800d450 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800d3de:	8afa      	ldrh	r2, [r7, #22]
 800d3e0:	8bfb      	ldrh	r3, [r7, #30]
 800d3e2:	4413      	add	r3, r2
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	3308      	adds	r3, #8
 800d3e8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	881b      	ldrh	r3, [r3, #0]
 800d3ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d3f2:	d106      	bne.n	800d402 <mem_trim+0x192>
 800d3f4:	4b1c      	ldr	r3, [pc, #112]	; (800d468 <mem_trim+0x1f8>)
 800d3f6:	f240 3216 	movw	r2, #790	; 0x316
 800d3fa:	4920      	ldr	r1, [pc, #128]	; (800d47c <mem_trim+0x20c>)
 800d3fc:	481c      	ldr	r0, [pc, #112]	; (800d470 <mem_trim+0x200>)
 800d3fe:	f00b f945 	bl	801868c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800d402:	89fb      	ldrh	r3, [r7, #14]
 800d404:	4618      	mov	r0, r3
 800d406:	f7ff fd4f 	bl	800cea8 <ptr_to_mem>
 800d40a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800d40c:	4b1c      	ldr	r3, [pc, #112]	; (800d480 <mem_trim+0x210>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	693a      	ldr	r2, [r7, #16]
 800d412:	429a      	cmp	r2, r3
 800d414:	d202      	bcs.n	800d41c <mem_trim+0x1ac>
      lfree = mem2;
 800d416:	4a1a      	ldr	r2, [pc, #104]	; (800d480 <mem_trim+0x210>)
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	2200      	movs	r2, #0
 800d420:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	881a      	ldrh	r2, [r3, #0]
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	8afa      	ldrh	r2, [r7, #22]
 800d42e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	89fa      	ldrh	r2, [r7, #14]
 800d434:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800d436:	693b      	ldr	r3, [r7, #16]
 800d438:	881b      	ldrh	r3, [r3, #0]
 800d43a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d43e:	d007      	beq.n	800d450 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	881b      	ldrh	r3, [r3, #0]
 800d444:	4618      	mov	r0, r3
 800d446:	f7ff fd2f 	bl	800cea8 <ptr_to_mem>
 800d44a:	4602      	mov	r2, r0
 800d44c:	89fb      	ldrh	r3, [r7, #14]
 800d44e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800d450:	4809      	ldr	r0, [pc, #36]	; (800d478 <mem_trim+0x208>)
 800d452:	f00a ffd6 	bl	8018402 <sys_mutex_unlock>
  return rmem;
 800d456:	687b      	ldr	r3, [r7, #4]
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3720      	adds	r7, #32
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	20004e90 	.word	0x20004e90
 800d464:	20004e94 	.word	0x20004e94
 800d468:	0801a640 	.word	0x0801a640
 800d46c:	0801a7cc 	.word	0x0801a7cc
 800d470:	0801a688 	.word	0x0801a688
 800d474:	0801a7e4 	.word	0x0801a7e4
 800d478:	20004e98 	.word	0x20004e98
 800d47c:	0801a804 	.word	0x0801a804
 800d480:	20004e9c 	.word	0x20004e9c

0800d484 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b088      	sub	sp, #32
 800d488:	af00      	add	r7, sp, #0
 800d48a:	4603      	mov	r3, r0
 800d48c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800d48e:	88fb      	ldrh	r3, [r7, #6]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d101      	bne.n	800d498 <mem_malloc+0x14>
    return NULL;
 800d494:	2300      	movs	r3, #0
 800d496:	e0e2      	b.n	800d65e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800d498:	88fb      	ldrh	r3, [r7, #6]
 800d49a:	3303      	adds	r3, #3
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	f023 0303 	bic.w	r3, r3, #3
 800d4a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800d4a4:	8bbb      	ldrh	r3, [r7, #28]
 800d4a6:	2b0b      	cmp	r3, #11
 800d4a8:	d801      	bhi.n	800d4ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800d4aa:	230c      	movs	r3, #12
 800d4ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800d4ae:	8bbb      	ldrh	r3, [r7, #28]
 800d4b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d4b4:	d803      	bhi.n	800d4be <mem_malloc+0x3a>
 800d4b6:	8bba      	ldrh	r2, [r7, #28]
 800d4b8:	88fb      	ldrh	r3, [r7, #6]
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d201      	bcs.n	800d4c2 <mem_malloc+0x3e>
    return NULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e0cd      	b.n	800d65e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800d4c2:	4869      	ldr	r0, [pc, #420]	; (800d668 <mem_malloc+0x1e4>)
 800d4c4:	f00a ff8e 	bl	80183e4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d4c8:	4b68      	ldr	r3, [pc, #416]	; (800d66c <mem_malloc+0x1e8>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7ff fcfd 	bl	800cecc <mem_to_ptr>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	83fb      	strh	r3, [r7, #30]
 800d4d6:	e0b7      	b.n	800d648 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800d4d8:	8bfb      	ldrh	r3, [r7, #30]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7ff fce4 	bl	800cea8 <ptr_to_mem>
 800d4e0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	791b      	ldrb	r3, [r3, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	f040 80a7 	bne.w	800d63a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	881b      	ldrh	r3, [r3, #0]
 800d4f0:	461a      	mov	r2, r3
 800d4f2:	8bfb      	ldrh	r3, [r7, #30]
 800d4f4:	1ad3      	subs	r3, r2, r3
 800d4f6:	f1a3 0208 	sub.w	r2, r3, #8
 800d4fa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	f0c0 809c 	bcc.w	800d63a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	881b      	ldrh	r3, [r3, #0]
 800d506:	461a      	mov	r2, r3
 800d508:	8bfb      	ldrh	r3, [r7, #30]
 800d50a:	1ad3      	subs	r3, r2, r3
 800d50c:	f1a3 0208 	sub.w	r2, r3, #8
 800d510:	8bbb      	ldrh	r3, [r7, #28]
 800d512:	3314      	adds	r3, #20
 800d514:	429a      	cmp	r2, r3
 800d516:	d333      	bcc.n	800d580 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800d518:	8bfa      	ldrh	r2, [r7, #30]
 800d51a:	8bbb      	ldrh	r3, [r7, #28]
 800d51c:	4413      	add	r3, r2
 800d51e:	b29b      	uxth	r3, r3
 800d520:	3308      	adds	r3, #8
 800d522:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800d524:	8a7b      	ldrh	r3, [r7, #18]
 800d526:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d52a:	d106      	bne.n	800d53a <mem_malloc+0xb6>
 800d52c:	4b50      	ldr	r3, [pc, #320]	; (800d670 <mem_malloc+0x1ec>)
 800d52e:	f240 3287 	movw	r2, #903	; 0x387
 800d532:	4950      	ldr	r1, [pc, #320]	; (800d674 <mem_malloc+0x1f0>)
 800d534:	4850      	ldr	r0, [pc, #320]	; (800d678 <mem_malloc+0x1f4>)
 800d536:	f00b f8a9 	bl	801868c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800d53a:	8a7b      	ldrh	r3, [r7, #18]
 800d53c:	4618      	mov	r0, r3
 800d53e:	f7ff fcb3 	bl	800cea8 <ptr_to_mem>
 800d542:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	881a      	ldrh	r2, [r3, #0]
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	8bfa      	ldrh	r2, [r7, #30]
 800d556:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	8a7a      	ldrh	r2, [r7, #18]
 800d55c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	2201      	movs	r2, #1
 800d562:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	881b      	ldrh	r3, [r3, #0]
 800d568:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800d56c:	d00b      	beq.n	800d586 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	881b      	ldrh	r3, [r3, #0]
 800d572:	4618      	mov	r0, r3
 800d574:	f7ff fc98 	bl	800cea8 <ptr_to_mem>
 800d578:	4602      	mov	r2, r0
 800d57a:	8a7b      	ldrh	r3, [r7, #18]
 800d57c:	8053      	strh	r3, [r2, #2]
 800d57e:	e002      	b.n	800d586 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	2201      	movs	r2, #1
 800d584:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800d586:	4b39      	ldr	r3, [pc, #228]	; (800d66c <mem_malloc+0x1e8>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	697a      	ldr	r2, [r7, #20]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d127      	bne.n	800d5e0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800d590:	4b36      	ldr	r3, [pc, #216]	; (800d66c <mem_malloc+0x1e8>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800d596:	e005      	b.n	800d5a4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	881b      	ldrh	r3, [r3, #0]
 800d59c:	4618      	mov	r0, r3
 800d59e:	f7ff fc83 	bl	800cea8 <ptr_to_mem>
 800d5a2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	791b      	ldrb	r3, [r3, #4]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d004      	beq.n	800d5b6 <mem_malloc+0x132>
 800d5ac:	4b33      	ldr	r3, [pc, #204]	; (800d67c <mem_malloc+0x1f8>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	69ba      	ldr	r2, [r7, #24]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d1f0      	bne.n	800d598 <mem_malloc+0x114>
          }
          lfree = cur;
 800d5b6:	4a2d      	ldr	r2, [pc, #180]	; (800d66c <mem_malloc+0x1e8>)
 800d5b8:	69bb      	ldr	r3, [r7, #24]
 800d5ba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800d5bc:	4b2b      	ldr	r3, [pc, #172]	; (800d66c <mem_malloc+0x1e8>)
 800d5be:	681a      	ldr	r2, [r3, #0]
 800d5c0:	4b2e      	ldr	r3, [pc, #184]	; (800d67c <mem_malloc+0x1f8>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	429a      	cmp	r2, r3
 800d5c6:	d00b      	beq.n	800d5e0 <mem_malloc+0x15c>
 800d5c8:	4b28      	ldr	r3, [pc, #160]	; (800d66c <mem_malloc+0x1e8>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	791b      	ldrb	r3, [r3, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d006      	beq.n	800d5e0 <mem_malloc+0x15c>
 800d5d2:	4b27      	ldr	r3, [pc, #156]	; (800d670 <mem_malloc+0x1ec>)
 800d5d4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800d5d8:	4929      	ldr	r1, [pc, #164]	; (800d680 <mem_malloc+0x1fc>)
 800d5da:	4827      	ldr	r0, [pc, #156]	; (800d678 <mem_malloc+0x1f4>)
 800d5dc:	f00b f856 	bl	801868c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800d5e0:	4821      	ldr	r0, [pc, #132]	; (800d668 <mem_malloc+0x1e4>)
 800d5e2:	f00a ff0e 	bl	8018402 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800d5e6:	8bba      	ldrh	r2, [r7, #28]
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	3308      	adds	r3, #8
 800d5ee:	4a23      	ldr	r2, [pc, #140]	; (800d67c <mem_malloc+0x1f8>)
 800d5f0:	6812      	ldr	r2, [r2, #0]
 800d5f2:	4293      	cmp	r3, r2
 800d5f4:	d906      	bls.n	800d604 <mem_malloc+0x180>
 800d5f6:	4b1e      	ldr	r3, [pc, #120]	; (800d670 <mem_malloc+0x1ec>)
 800d5f8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800d5fc:	4921      	ldr	r1, [pc, #132]	; (800d684 <mem_malloc+0x200>)
 800d5fe:	481e      	ldr	r0, [pc, #120]	; (800d678 <mem_malloc+0x1f4>)
 800d600:	f00b f844 	bl	801868c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800d604:	697b      	ldr	r3, [r7, #20]
 800d606:	f003 0303 	and.w	r3, r3, #3
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d006      	beq.n	800d61c <mem_malloc+0x198>
 800d60e:	4b18      	ldr	r3, [pc, #96]	; (800d670 <mem_malloc+0x1ec>)
 800d610:	f240 32bb 	movw	r2, #955	; 0x3bb
 800d614:	491c      	ldr	r1, [pc, #112]	; (800d688 <mem_malloc+0x204>)
 800d616:	4818      	ldr	r0, [pc, #96]	; (800d678 <mem_malloc+0x1f4>)
 800d618:	f00b f838 	bl	801868c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	f003 0303 	and.w	r3, r3, #3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d006      	beq.n	800d634 <mem_malloc+0x1b0>
 800d626:	4b12      	ldr	r3, [pc, #72]	; (800d670 <mem_malloc+0x1ec>)
 800d628:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d62c:	4917      	ldr	r1, [pc, #92]	; (800d68c <mem_malloc+0x208>)
 800d62e:	4812      	ldr	r0, [pc, #72]	; (800d678 <mem_malloc+0x1f4>)
 800d630:	f00b f82c 	bl	801868c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	3308      	adds	r3, #8
 800d638:	e011      	b.n	800d65e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800d63a:	8bfb      	ldrh	r3, [r7, #30]
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff fc33 	bl	800cea8 <ptr_to_mem>
 800d642:	4603      	mov	r3, r0
 800d644:	881b      	ldrh	r3, [r3, #0]
 800d646:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800d648:	8bfa      	ldrh	r2, [r7, #30]
 800d64a:	8bbb      	ldrh	r3, [r7, #28]
 800d64c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800d650:	429a      	cmp	r2, r3
 800d652:	f4ff af41 	bcc.w	800d4d8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800d656:	4804      	ldr	r0, [pc, #16]	; (800d668 <mem_malloc+0x1e4>)
 800d658:	f00a fed3 	bl	8018402 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3720      	adds	r7, #32
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	20004e98 	.word	0x20004e98
 800d66c:	20004e9c 	.word	0x20004e9c
 800d670:	0801a640 	.word	0x0801a640
 800d674:	0801a804 	.word	0x0801a804
 800d678:	0801a688 	.word	0x0801a688
 800d67c:	20004e94 	.word	0x20004e94
 800d680:	0801a818 	.word	0x0801a818
 800d684:	0801a834 	.word	0x0801a834
 800d688:	0801a864 	.word	0x0801a864
 800d68c:	0801a894 	.word	0x0801a894

0800d690 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800d690:	b480      	push	{r7}
 800d692:	b085      	sub	sp, #20
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	689b      	ldr	r3, [r3, #8]
 800d69c:	2200      	movs	r2, #0
 800d69e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	685b      	ldr	r3, [r3, #4]
 800d6a4:	3303      	adds	r3, #3
 800d6a6:	f023 0303 	bic.w	r3, r3, #3
 800d6aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	60fb      	str	r3, [r7, #12]
 800d6b0:	e011      	b.n	800d6d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	689b      	ldr	r3, [r3, #8]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	689b      	ldr	r3, [r3, #8]
 800d6c0:	68ba      	ldr	r2, [r7, #8]
 800d6c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	881b      	ldrh	r3, [r3, #0]
 800d6c8:	461a      	mov	r2, r3
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	60fb      	str	r3, [r7, #12]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	885b      	ldrh	r3, [r3, #2]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	4293      	cmp	r3, r2
 800d6e0:	dbe7      	blt.n	800d6b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800d6e2:	bf00      	nop
 800d6e4:	bf00      	nop
 800d6e6:	3714      	adds	r7, #20
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr

0800d6f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b082      	sub	sp, #8
 800d6f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	80fb      	strh	r3, [r7, #6]
 800d6fa:	e009      	b.n	800d710 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800d6fc:	88fb      	ldrh	r3, [r7, #6]
 800d6fe:	4a08      	ldr	r2, [pc, #32]	; (800d720 <memp_init+0x30>)
 800d700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d704:	4618      	mov	r0, r3
 800d706:	f7ff ffc3 	bl	800d690 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800d70a:	88fb      	ldrh	r3, [r7, #6]
 800d70c:	3301      	adds	r3, #1
 800d70e:	80fb      	strh	r3, [r7, #6]
 800d710:	88fb      	ldrh	r3, [r7, #6]
 800d712:	2b0d      	cmp	r3, #13
 800d714:	d9f2      	bls.n	800d6fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800d716:	bf00      	nop
 800d718:	bf00      	nop
 800d71a:	3708      	adds	r7, #8
 800d71c:	46bd      	mov	sp, r7
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	0801d11c 	.word	0x0801d11c

0800d724 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800d72c:	f00a fe96 	bl	801845c <sys_arch_protect>
 800d730:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	689b      	ldr	r3, [r3, #8]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800d73a:	68bb      	ldr	r3, [r7, #8]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d015      	beq.n	800d76c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	6812      	ldr	r2, [r2, #0]
 800d748:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	f003 0303 	and.w	r3, r3, #3
 800d750:	2b00      	cmp	r3, #0
 800d752:	d006      	beq.n	800d762 <do_memp_malloc_pool+0x3e>
 800d754:	4b09      	ldr	r3, [pc, #36]	; (800d77c <do_memp_malloc_pool+0x58>)
 800d756:	f44f 728c 	mov.w	r2, #280	; 0x118
 800d75a:	4909      	ldr	r1, [pc, #36]	; (800d780 <do_memp_malloc_pool+0x5c>)
 800d75c:	4809      	ldr	r0, [pc, #36]	; (800d784 <do_memp_malloc_pool+0x60>)
 800d75e:	f00a ff95 	bl	801868c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d762:	68f8      	ldr	r0, [r7, #12]
 800d764:	f00a fe88 	bl	8018478 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	e003      	b.n	800d774 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f00a fe83 	bl	8018478 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800d772:	2300      	movs	r3, #0
}
 800d774:	4618      	mov	r0, r3
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	0801a8b8 	.word	0x0801a8b8
 800d780:	0801a8e8 	.word	0x0801a8e8
 800d784:	0801a90c 	.word	0x0801a90c

0800d788 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	4603      	mov	r3, r0
 800d790:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800d792:	79fb      	ldrb	r3, [r7, #7]
 800d794:	2b0d      	cmp	r3, #13
 800d796:	d908      	bls.n	800d7aa <memp_malloc+0x22>
 800d798:	4b0a      	ldr	r3, [pc, #40]	; (800d7c4 <memp_malloc+0x3c>)
 800d79a:	f240 1257 	movw	r2, #343	; 0x157
 800d79e:	490a      	ldr	r1, [pc, #40]	; (800d7c8 <memp_malloc+0x40>)
 800d7a0:	480a      	ldr	r0, [pc, #40]	; (800d7cc <memp_malloc+0x44>)
 800d7a2:	f00a ff73 	bl	801868c <iprintf>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	e008      	b.n	800d7bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800d7aa:	79fb      	ldrb	r3, [r7, #7]
 800d7ac:	4a08      	ldr	r2, [pc, #32]	; (800d7d0 <memp_malloc+0x48>)
 800d7ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7ff ffb6 	bl	800d724 <do_memp_malloc_pool>
 800d7b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3710      	adds	r7, #16
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	0801a8b8 	.word	0x0801a8b8
 800d7c8:	0801a948 	.word	0x0801a948
 800d7cc:	0801a90c 	.word	0x0801a90c
 800d7d0:	0801d11c 	.word	0x0801d11c

0800d7d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	f003 0303 	and.w	r3, r3, #3
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d006      	beq.n	800d7f6 <do_memp_free_pool+0x22>
 800d7e8:	4b0d      	ldr	r3, [pc, #52]	; (800d820 <do_memp_free_pool+0x4c>)
 800d7ea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800d7ee:	490d      	ldr	r1, [pc, #52]	; (800d824 <do_memp_free_pool+0x50>)
 800d7f0:	480d      	ldr	r0, [pc, #52]	; (800d828 <do_memp_free_pool+0x54>)
 800d7f2:	f00a ff4b 	bl	801868c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800d7fa:	f00a fe2f 	bl	801845c <sys_arch_protect>
 800d7fe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	689b      	ldr	r3, [r3, #8]
 800d804:	681a      	ldr	r2, [r3, #0]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	689b      	ldr	r3, [r3, #8]
 800d80e:	68fa      	ldr	r2, [r7, #12]
 800d810:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800d812:	68b8      	ldr	r0, [r7, #8]
 800d814:	f00a fe30 	bl	8018478 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800d818:	bf00      	nop
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	0801a8b8 	.word	0x0801a8b8
 800d824:	0801a968 	.word	0x0801a968
 800d828:	0801a90c 	.word	0x0801a90c

0800d82c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b082      	sub	sp, #8
 800d830:	af00      	add	r7, sp, #0
 800d832:	4603      	mov	r3, r0
 800d834:	6039      	str	r1, [r7, #0]
 800d836:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	2b0d      	cmp	r3, #13
 800d83c:	d907      	bls.n	800d84e <memp_free+0x22>
 800d83e:	4b0c      	ldr	r3, [pc, #48]	; (800d870 <memp_free+0x44>)
 800d840:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800d844:	490b      	ldr	r1, [pc, #44]	; (800d874 <memp_free+0x48>)
 800d846:	480c      	ldr	r0, [pc, #48]	; (800d878 <memp_free+0x4c>)
 800d848:	f00a ff20 	bl	801868c <iprintf>
 800d84c:	e00c      	b.n	800d868 <memp_free+0x3c>

  if (mem == NULL) {
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d008      	beq.n	800d866 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800d854:	79fb      	ldrb	r3, [r7, #7]
 800d856:	4a09      	ldr	r2, [pc, #36]	; (800d87c <memp_free+0x50>)
 800d858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d85c:	6839      	ldr	r1, [r7, #0]
 800d85e:	4618      	mov	r0, r3
 800d860:	f7ff ffb8 	bl	800d7d4 <do_memp_free_pool>
 800d864:	e000      	b.n	800d868 <memp_free+0x3c>
    return;
 800d866:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800d868:	3708      	adds	r7, #8
 800d86a:	46bd      	mov	sp, r7
 800d86c:	bd80      	pop	{r7, pc}
 800d86e:	bf00      	nop
 800d870:	0801a8b8 	.word	0x0801a8b8
 800d874:	0801a988 	.word	0x0801a988
 800d878:	0801a90c 	.word	0x0801a90c
 800d87c:	0801d11c 	.word	0x0801d11c

0800d880 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800d880:	b480      	push	{r7}
 800d882:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800d884:	bf00      	nop
 800d886:	46bd      	mov	sp, r7
 800d888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88c:	4770      	bx	lr
	...

0800d890 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b086      	sub	sp, #24
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]
 800d89c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d108      	bne.n	800d8b6 <netif_add+0x26>
 800d8a4:	4b57      	ldr	r3, [pc, #348]	; (800da04 <netif_add+0x174>)
 800d8a6:	f240 1227 	movw	r2, #295	; 0x127
 800d8aa:	4957      	ldr	r1, [pc, #348]	; (800da08 <netif_add+0x178>)
 800d8ac:	4857      	ldr	r0, [pc, #348]	; (800da0c <netif_add+0x17c>)
 800d8ae:	f00a feed 	bl	801868c <iprintf>
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	e0a2      	b.n	800d9fc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800d8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d108      	bne.n	800d8ce <netif_add+0x3e>
 800d8bc:	4b51      	ldr	r3, [pc, #324]	; (800da04 <netif_add+0x174>)
 800d8be:	f44f 7294 	mov.w	r2, #296	; 0x128
 800d8c2:	4953      	ldr	r1, [pc, #332]	; (800da10 <netif_add+0x180>)
 800d8c4:	4851      	ldr	r0, [pc, #324]	; (800da0c <netif_add+0x17c>)
 800d8c6:	f00a fee1 	bl	801868c <iprintf>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	e096      	b.n	800d9fc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d101      	bne.n	800d8d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800d8d4:	4b4f      	ldr	r3, [pc, #316]	; (800da14 <netif_add+0x184>)
 800d8d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d101      	bne.n	800d8e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800d8de:	4b4d      	ldr	r3, [pc, #308]	; (800da14 <netif_add+0x184>)
 800d8e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800d8e8:	4b4a      	ldr	r3, [pc, #296]	; (800da14 <netif_add+0x184>)
 800d8ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	4a45      	ldr	r2, [pc, #276]	; (800da18 <netif_add+0x188>)
 800d902:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	2200      	movs	r2, #0
 800d90e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2200      	movs	r2, #0
 800d916:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	6a3a      	ldr	r2, [r7, #32]
 800d91c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800d91e:	4b3f      	ldr	r3, [pc, #252]	; (800da1c <netif_add+0x18c>)
 800d920:	781a      	ldrb	r2, [r3, #0]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d92c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800d92e:	683b      	ldr	r3, [r7, #0]
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	68b9      	ldr	r1, [r7, #8]
 800d934:	68f8      	ldr	r0, [r7, #12]
 800d936:	f000 f913 	bl	800db60 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800d93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93c:	68f8      	ldr	r0, [r7, #12]
 800d93e:	4798      	blx	r3
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	d001      	beq.n	800d94a <netif_add+0xba>
    return NULL;
 800d946:	2300      	movs	r3, #0
 800d948:	e058      	b.n	800d9fc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d950:	2bff      	cmp	r3, #255	; 0xff
 800d952:	d103      	bne.n	800d95c <netif_add+0xcc>
        netif->num = 0;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	2200      	movs	r2, #0
 800d958:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800d95c:	2300      	movs	r3, #0
 800d95e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d960:	4b2f      	ldr	r3, [pc, #188]	; (800da20 <netif_add+0x190>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	617b      	str	r3, [r7, #20]
 800d966:	e02b      	b.n	800d9c0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800d968:	697a      	ldr	r2, [r7, #20]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d106      	bne.n	800d97e <netif_add+0xee>
 800d970:	4b24      	ldr	r3, [pc, #144]	; (800da04 <netif_add+0x174>)
 800d972:	f240 128b 	movw	r2, #395	; 0x18b
 800d976:	492b      	ldr	r1, [pc, #172]	; (800da24 <netif_add+0x194>)
 800d978:	4824      	ldr	r0, [pc, #144]	; (800da0c <netif_add+0x17c>)
 800d97a:	f00a fe87 	bl	801868c <iprintf>
        num_netifs++;
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	3301      	adds	r3, #1
 800d982:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	2bff      	cmp	r3, #255	; 0xff
 800d988:	dd06      	ble.n	800d998 <netif_add+0x108>
 800d98a:	4b1e      	ldr	r3, [pc, #120]	; (800da04 <netif_add+0x174>)
 800d98c:	f240 128d 	movw	r2, #397	; 0x18d
 800d990:	4925      	ldr	r1, [pc, #148]	; (800da28 <netif_add+0x198>)
 800d992:	481e      	ldr	r0, [pc, #120]	; (800da0c <netif_add+0x17c>)
 800d994:	f00a fe7a 	bl	801868c <iprintf>
        if (netif2->num == netif->num) {
 800d998:	697b      	ldr	r3, [r7, #20]
 800d99a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9a4:	429a      	cmp	r2, r3
 800d9a6:	d108      	bne.n	800d9ba <netif_add+0x12a>
          netif->num++;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	b2da      	uxtb	r2, r3
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800d9b8:	e005      	b.n	800d9c6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	617b      	str	r3, [r7, #20]
 800d9c0:	697b      	ldr	r3, [r7, #20]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1d0      	bne.n	800d968 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1be      	bne.n	800d94a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9d2:	2bfe      	cmp	r3, #254	; 0xfe
 800d9d4:	d103      	bne.n	800d9de <netif_add+0x14e>
    netif_num = 0;
 800d9d6:	4b11      	ldr	r3, [pc, #68]	; (800da1c <netif_add+0x18c>)
 800d9d8:	2200      	movs	r2, #0
 800d9da:	701a      	strb	r2, [r3, #0]
 800d9dc:	e006      	b.n	800d9ec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9e4:	3301      	adds	r3, #1
 800d9e6:	b2da      	uxtb	r2, r3
 800d9e8:	4b0c      	ldr	r3, [pc, #48]	; (800da1c <netif_add+0x18c>)
 800d9ea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800d9ec:	4b0c      	ldr	r3, [pc, #48]	; (800da20 <netif_add+0x190>)
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800d9f4:	4a0a      	ldr	r2, [pc, #40]	; (800da20 <netif_add+0x190>)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	3718      	adds	r7, #24
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	0801a9a4 	.word	0x0801a9a4
 800da08:	0801aa38 	.word	0x0801aa38
 800da0c:	0801a9f4 	.word	0x0801a9f4
 800da10:	0801aa54 	.word	0x0801aa54
 800da14:	0801d19c 	.word	0x0801d19c
 800da18:	0800de3b 	.word	0x0800de3b
 800da1c:	20004ed8 	.word	0x20004ed8
 800da20:	2000bd78 	.word	0x2000bd78
 800da24:	0801aa78 	.word	0x0801aa78
 800da28:	0801aa8c 	.word	0x0801aa8c

0800da2c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b082      	sub	sp, #8
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800da36:	6839      	ldr	r1, [r7, #0]
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f002 ffeb 	bl	8010a14 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800da3e:	6839      	ldr	r1, [r7, #0]
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f008 f883 	bl	8015b4c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800da46:	bf00      	nop
 800da48:	3708      	adds	r7, #8
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
	...

0800da50 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b086      	sub	sp, #24
 800da54:	af00      	add	r7, sp, #0
 800da56:	60f8      	str	r0, [r7, #12]
 800da58:	60b9      	str	r1, [r7, #8]
 800da5a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d106      	bne.n	800da70 <netif_do_set_ipaddr+0x20>
 800da62:	4b1d      	ldr	r3, [pc, #116]	; (800dad8 <netif_do_set_ipaddr+0x88>)
 800da64:	f240 12cb 	movw	r2, #459	; 0x1cb
 800da68:	491c      	ldr	r1, [pc, #112]	; (800dadc <netif_do_set_ipaddr+0x8c>)
 800da6a:	481d      	ldr	r0, [pc, #116]	; (800dae0 <netif_do_set_ipaddr+0x90>)
 800da6c:	f00a fe0e 	bl	801868c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <netif_do_set_ipaddr+0x34>
 800da76:	4b18      	ldr	r3, [pc, #96]	; (800dad8 <netif_do_set_ipaddr+0x88>)
 800da78:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800da7c:	4917      	ldr	r1, [pc, #92]	; (800dadc <netif_do_set_ipaddr+0x8c>)
 800da7e:	4818      	ldr	r0, [pc, #96]	; (800dae0 <netif_do_set_ipaddr+0x90>)
 800da80:	f00a fe04 	bl	801868c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	3304      	adds	r3, #4
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	429a      	cmp	r2, r3
 800da90:	d01c      	beq.n	800dacc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800da92:	68bb      	ldr	r3, [r7, #8]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	3304      	adds	r3, #4
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800daa2:	f107 0314 	add.w	r3, r7, #20
 800daa6:	4619      	mov	r1, r3
 800daa8:	6878      	ldr	r0, [r7, #4]
 800daaa:	f7ff ffbf 	bl	800da2c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d002      	beq.n	800daba <netif_do_set_ipaddr+0x6a>
 800dab4:	68bb      	ldr	r3, [r7, #8]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	e000      	b.n	800dabc <netif_do_set_ipaddr+0x6c>
 800daba:	2300      	movs	r3, #0
 800dabc:	68fa      	ldr	r2, [r7, #12]
 800dabe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800dac0:	2101      	movs	r1, #1
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f000 f8d2 	bl	800dc6c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800dac8:	2301      	movs	r3, #1
 800daca:	e000      	b.n	800dace <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3718      	adds	r7, #24
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	0801a9a4 	.word	0x0801a9a4
 800dadc:	0801aabc 	.word	0x0801aabc
 800dae0:	0801a9f4 	.word	0x0801a9f4

0800dae4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b085      	sub	sp, #20
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800daf0:	68bb      	ldr	r3, [r7, #8]
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	3308      	adds	r3, #8
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d00a      	beq.n	800db14 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <netif_do_set_netmask+0x26>
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	e000      	b.n	800db0c <netif_do_set_netmask+0x28>
 800db0a:	2300      	movs	r3, #0
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800db10:	2301      	movs	r3, #1
 800db12:	e000      	b.n	800db16 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800db14:	2300      	movs	r3, #0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3714      	adds	r7, #20
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr

0800db22 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800db22:	b480      	push	{r7}
 800db24:	b085      	sub	sp, #20
 800db26:	af00      	add	r7, sp, #0
 800db28:	60f8      	str	r0, [r7, #12]
 800db2a:	60b9      	str	r1, [r7, #8]
 800db2c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800db2e:	68bb      	ldr	r3, [r7, #8]
 800db30:	681a      	ldr	r2, [r3, #0]
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	330c      	adds	r3, #12
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d00a      	beq.n	800db52 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d002      	beq.n	800db48 <netif_do_set_gw+0x26>
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	e000      	b.n	800db4a <netif_do_set_gw+0x28>
 800db48:	2300      	movs	r3, #0
 800db4a:	68fa      	ldr	r2, [r7, #12]
 800db4c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800db4e:	2301      	movs	r3, #1
 800db50:	e000      	b.n	800db54 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800db52:	2300      	movs	r3, #0
}
 800db54:	4618      	mov	r0, r3
 800db56:	3714      	adds	r7, #20
 800db58:	46bd      	mov	sp, r7
 800db5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5e:	4770      	bx	lr

0800db60 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b088      	sub	sp, #32
 800db64:	af00      	add	r7, sp, #0
 800db66:	60f8      	str	r0, [r7, #12]
 800db68:	60b9      	str	r1, [r7, #8]
 800db6a:	607a      	str	r2, [r7, #4]
 800db6c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800db6e:	2300      	movs	r3, #0
 800db70:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800db72:	2300      	movs	r3, #0
 800db74:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d101      	bne.n	800db80 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800db7c:	4b1c      	ldr	r3, [pc, #112]	; (800dbf0 <netif_set_addr+0x90>)
 800db7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d101      	bne.n	800db8a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800db86:	4b1a      	ldr	r3, [pc, #104]	; (800dbf0 <netif_set_addr+0x90>)
 800db88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800db8a:	683b      	ldr	r3, [r7, #0]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d101      	bne.n	800db94 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800db90:	4b17      	ldr	r3, [pc, #92]	; (800dbf0 <netif_set_addr+0x90>)
 800db92:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800db94:	68bb      	ldr	r3, [r7, #8]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d003      	beq.n	800dba2 <netif_set_addr+0x42>
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d101      	bne.n	800dba6 <netif_set_addr+0x46>
 800dba2:	2301      	movs	r3, #1
 800dba4:	e000      	b.n	800dba8 <netif_set_addr+0x48>
 800dba6:	2300      	movs	r3, #0
 800dba8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800dbaa:	697b      	ldr	r3, [r7, #20]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d006      	beq.n	800dbbe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dbb0:	f107 0310 	add.w	r3, r7, #16
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	68b9      	ldr	r1, [r7, #8]
 800dbb8:	68f8      	ldr	r0, [r7, #12]
 800dbba:	f7ff ff49 	bl	800da50 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800dbbe:	69fa      	ldr	r2, [r7, #28]
 800dbc0:	6879      	ldr	r1, [r7, #4]
 800dbc2:	68f8      	ldr	r0, [r7, #12]
 800dbc4:	f7ff ff8e 	bl	800dae4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	6839      	ldr	r1, [r7, #0]
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f7ff ffa8 	bl	800db22 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d106      	bne.n	800dbe6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800dbd8:	f107 0310 	add.w	r3, r7, #16
 800dbdc:	461a      	mov	r2, r3
 800dbde:	68b9      	ldr	r1, [r7, #8]
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f7ff ff35 	bl	800da50 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800dbe6:	bf00      	nop
 800dbe8:	3720      	adds	r7, #32
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	0801d19c 	.word	0x0801d19c

0800dbf4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800dbf4:	b480      	push	{r7}
 800dbf6:	b083      	sub	sp, #12
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800dbfc:	4a04      	ldr	r2, [pc, #16]	; (800dc10 <netif_set_default+0x1c>)
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800dc02:	bf00      	nop
 800dc04:	370c      	adds	r7, #12
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
 800dc0e:	bf00      	nop
 800dc10:	2000bd7c 	.word	0x2000bd7c

0800dc14 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b082      	sub	sp, #8
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d107      	bne.n	800dc32 <netif_set_up+0x1e>
 800dc22:	4b0f      	ldr	r3, [pc, #60]	; (800dc60 <netif_set_up+0x4c>)
 800dc24:	f44f 7254 	mov.w	r2, #848	; 0x350
 800dc28:	490e      	ldr	r1, [pc, #56]	; (800dc64 <netif_set_up+0x50>)
 800dc2a:	480f      	ldr	r0, [pc, #60]	; (800dc68 <netif_set_up+0x54>)
 800dc2c:	f00a fd2e 	bl	801868c <iprintf>
 800dc30:	e013      	b.n	800dc5a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc38:	f003 0301 	and.w	r3, r3, #1
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10c      	bne.n	800dc5a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc46:	f043 0301 	orr.w	r3, r3, #1
 800dc4a:	b2da      	uxtb	r2, r3
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dc52:	2103      	movs	r1, #3
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 f809 	bl	800dc6c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800dc5a:	3708      	adds	r7, #8
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}
 800dc60:	0801a9a4 	.word	0x0801a9a4
 800dc64:	0801ab2c 	.word	0x0801ab2c
 800dc68:	0801a9f4 	.word	0x0801a9f4

0800dc6c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	460b      	mov	r3, r1
 800dc76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d106      	bne.n	800dc8c <netif_issue_reports+0x20>
 800dc7e:	4b18      	ldr	r3, [pc, #96]	; (800dce0 <netif_issue_reports+0x74>)
 800dc80:	f240 326d 	movw	r2, #877	; 0x36d
 800dc84:	4917      	ldr	r1, [pc, #92]	; (800dce4 <netif_issue_reports+0x78>)
 800dc86:	4818      	ldr	r0, [pc, #96]	; (800dce8 <netif_issue_reports+0x7c>)
 800dc88:	f00a fd00 	bl	801868c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc92:	f003 0304 	and.w	r3, r3, #4
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d01e      	beq.n	800dcd8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dca0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d017      	beq.n	800dcd8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dca8:	78fb      	ldrb	r3, [r7, #3]
 800dcaa:	f003 0301 	and.w	r3, r3, #1
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d013      	beq.n	800dcda <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	3304      	adds	r3, #4
 800dcb6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d00e      	beq.n	800dcda <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcc2:	f003 0308 	and.w	r3, r3, #8
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d007      	beq.n	800dcda <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	3304      	adds	r3, #4
 800dcce:	4619      	mov	r1, r3
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f008 fea5 	bl	8016a20 <etharp_request>
 800dcd6:	e000      	b.n	800dcda <netif_issue_reports+0x6e>
    return;
 800dcd8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}
 800dce0:	0801a9a4 	.word	0x0801a9a4
 800dce4:	0801ab48 	.word	0x0801ab48
 800dce8:	0801a9f4 	.word	0x0801a9f4

0800dcec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d107      	bne.n	800dd0a <netif_set_down+0x1e>
 800dcfa:	4b12      	ldr	r3, [pc, #72]	; (800dd44 <netif_set_down+0x58>)
 800dcfc:	f240 329b 	movw	r2, #923	; 0x39b
 800dd00:	4911      	ldr	r1, [pc, #68]	; (800dd48 <netif_set_down+0x5c>)
 800dd02:	4812      	ldr	r0, [pc, #72]	; (800dd4c <netif_set_down+0x60>)
 800dd04:	f00a fcc2 	bl	801868c <iprintf>
 800dd08:	e019      	b.n	800dd3e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd10:	f003 0301 	and.w	r3, r3, #1
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d012      	beq.n	800dd3e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd1e:	f023 0301 	bic.w	r3, r3, #1
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd30:	f003 0308 	and.w	r3, r3, #8
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d002      	beq.n	800dd3e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f008 fa2f 	bl	801619c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800dd3e:	3708      	adds	r7, #8
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}
 800dd44:	0801a9a4 	.word	0x0801a9a4
 800dd48:	0801ab6c 	.word	0x0801ab6c
 800dd4c:	0801a9f4 	.word	0x0801a9f4

0800dd50 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800dd50:	b580      	push	{r7, lr}
 800dd52:	b082      	sub	sp, #8
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d107      	bne.n	800dd6e <netif_set_link_up+0x1e>
 800dd5e:	4b13      	ldr	r3, [pc, #76]	; (800ddac <netif_set_link_up+0x5c>)
 800dd60:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800dd64:	4912      	ldr	r1, [pc, #72]	; (800ddb0 <netif_set_link_up+0x60>)
 800dd66:	4813      	ldr	r0, [pc, #76]	; (800ddb4 <netif_set_link_up+0x64>)
 800dd68:	f00a fc90 	bl	801868c <iprintf>
 800dd6c:	e01b      	b.n	800dda6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd74:	f003 0304 	and.w	r3, r3, #4
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d114      	bne.n	800dda6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dd82:	f043 0304 	orr.w	r3, r3, #4
 800dd86:	b2da      	uxtb	r2, r3
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800dd8e:	2103      	movs	r1, #3
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff ff6b 	bl	800dc6c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	69db      	ldr	r3, [r3, #28]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d003      	beq.n	800dda6 <netif_set_link_up+0x56>
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	69db      	ldr	r3, [r3, #28]
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	0801a9a4 	.word	0x0801a9a4
 800ddb0:	0801ab8c 	.word	0x0801ab8c
 800ddb4:	0801a9f4 	.word	0x0801a9f4

0800ddb8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d107      	bne.n	800ddd6 <netif_set_link_down+0x1e>
 800ddc6:	4b11      	ldr	r3, [pc, #68]	; (800de0c <netif_set_link_down+0x54>)
 800ddc8:	f240 4206 	movw	r2, #1030	; 0x406
 800ddcc:	4910      	ldr	r1, [pc, #64]	; (800de10 <netif_set_link_down+0x58>)
 800ddce:	4811      	ldr	r0, [pc, #68]	; (800de14 <netif_set_link_down+0x5c>)
 800ddd0:	f00a fc5c 	bl	801868c <iprintf>
 800ddd4:	e017      	b.n	800de06 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dddc:	f003 0304 	and.w	r3, r3, #4
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d010      	beq.n	800de06 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddea:	f023 0304 	bic.w	r3, r3, #4
 800ddee:	b2da      	uxtb	r2, r3
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	69db      	ldr	r3, [r3, #28]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d003      	beq.n	800de06 <netif_set_link_down+0x4e>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	69db      	ldr	r3, [r3, #28]
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800de06:	3708      	adds	r7, #8
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	0801a9a4 	.word	0x0801a9a4
 800de10:	0801abb0 	.word	0x0801abb0
 800de14:	0801a9f4 	.word	0x0801a9f4

0800de18 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	d002      	beq.n	800de2e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	683a      	ldr	r2, [r7, #0]
 800de2c:	61da      	str	r2, [r3, #28]
  }
}
 800de2e:	bf00      	nop
 800de30:	370c      	adds	r7, #12
 800de32:	46bd      	mov	sp, r7
 800de34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de38:	4770      	bx	lr

0800de3a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b085      	sub	sp, #20
 800de3e:	af00      	add	r7, sp, #0
 800de40:	60f8      	str	r0, [r7, #12]
 800de42:	60b9      	str	r1, [r7, #8]
 800de44:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800de46:	f06f 030b 	mvn.w	r3, #11
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3714      	adds	r7, #20
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr
	...

0800de58 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	4603      	mov	r3, r0
 800de60:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d013      	beq.n	800de90 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800de68:	4b0d      	ldr	r3, [pc, #52]	; (800dea0 <netif_get_by_index+0x48>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	60fb      	str	r3, [r7, #12]
 800de6e:	e00c      	b.n	800de8a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800de76:	3301      	adds	r3, #1
 800de78:	b2db      	uxtb	r3, r3
 800de7a:	79fa      	ldrb	r2, [r7, #7]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d101      	bne.n	800de84 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	e006      	b.n	800de92 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	60fb      	str	r3, [r7, #12]
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1ef      	bne.n	800de70 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800de90:	2300      	movs	r3, #0
}
 800de92:	4618      	mov	r0, r3
 800de94:	3714      	adds	r7, #20
 800de96:	46bd      	mov	sp, r7
 800de98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9c:	4770      	bx	lr
 800de9e:	bf00      	nop
 800dea0:	2000bd78 	.word	0x2000bd78

0800dea4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800deaa:	f00a fad7 	bl	801845c <sys_arch_protect>
 800deae:	6038      	str	r0, [r7, #0]
 800deb0:	4b0d      	ldr	r3, [pc, #52]	; (800dee8 <pbuf_free_ooseq+0x44>)
 800deb2:	2200      	movs	r2, #0
 800deb4:	701a      	strb	r2, [r3, #0]
 800deb6:	6838      	ldr	r0, [r7, #0]
 800deb8:	f00a fade 	bl	8018478 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800debc:	4b0b      	ldr	r3, [pc, #44]	; (800deec <pbuf_free_ooseq+0x48>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	607b      	str	r3, [r7, #4]
 800dec2:	e00a      	b.n	800deda <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d003      	beq.n	800ded4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f002 fddf 	bl	8010a90 <tcp_free_ooseq>
      return;
 800ded2:	e005      	b.n	800dee0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	68db      	ldr	r3, [r3, #12]
 800ded8:	607b      	str	r3, [r7, #4]
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1f1      	bne.n	800dec4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	2000bd80 	.word	0x2000bd80
 800deec:	2000bd88 	.word	0x2000bd88

0800def0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800def8:	f7ff ffd4 	bl	800dea4 <pbuf_free_ooseq>
}
 800defc:	bf00      	nop
 800defe:	3708      	adds	r7, #8
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}

0800df04 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800df0a:	f00a faa7 	bl	801845c <sys_arch_protect>
 800df0e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800df10:	4b0f      	ldr	r3, [pc, #60]	; (800df50 <pbuf_pool_is_empty+0x4c>)
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800df16:	4b0e      	ldr	r3, [pc, #56]	; (800df50 <pbuf_pool_is_empty+0x4c>)
 800df18:	2201      	movs	r2, #1
 800df1a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f00a faab 	bl	8018478 <sys_arch_unprotect>

  if (!queued) {
 800df22:	78fb      	ldrb	r3, [r7, #3]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d10f      	bne.n	800df48 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800df28:	2100      	movs	r1, #0
 800df2a:	480a      	ldr	r0, [pc, #40]	; (800df54 <pbuf_pool_is_empty+0x50>)
 800df2c:	f7fe fc0c 	bl	800c748 <tcpip_try_callback>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d008      	beq.n	800df48 <pbuf_pool_is_empty+0x44>
 800df36:	f00a fa91 	bl	801845c <sys_arch_protect>
 800df3a:	6078      	str	r0, [r7, #4]
 800df3c:	4b04      	ldr	r3, [pc, #16]	; (800df50 <pbuf_pool_is_empty+0x4c>)
 800df3e:	2200      	movs	r2, #0
 800df40:	701a      	strb	r2, [r3, #0]
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f00a fa98 	bl	8018478 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800df48:	bf00      	nop
 800df4a:	3708      	adds	r7, #8
 800df4c:	46bd      	mov	sp, r7
 800df4e:	bd80      	pop	{r7, pc}
 800df50:	2000bd80 	.word	0x2000bd80
 800df54:	0800def1 	.word	0x0800def1

0800df58 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800df58:	b480      	push	{r7}
 800df5a:	b085      	sub	sp, #20
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	4611      	mov	r1, r2
 800df64:	461a      	mov	r2, r3
 800df66:	460b      	mov	r3, r1
 800df68:	80fb      	strh	r3, [r7, #6]
 800df6a:	4613      	mov	r3, r2
 800df6c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2200      	movs	r2, #0
 800df72:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	68ba      	ldr	r2, [r7, #8]
 800df78:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	88fa      	ldrh	r2, [r7, #6]
 800df7e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	88ba      	ldrh	r2, [r7, #4]
 800df84:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800df86:	8b3b      	ldrh	r3, [r7, #24]
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	7f3a      	ldrb	r2, [r7, #28]
 800df92:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	2201      	movs	r2, #1
 800df98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2200      	movs	r2, #0
 800df9e:	73da      	strb	r2, [r3, #15]
}
 800dfa0:	bf00      	nop
 800dfa2:	3714      	adds	r7, #20
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08c      	sub	sp, #48	; 0x30
 800dfb0:	af02      	add	r7, sp, #8
 800dfb2:	4603      	mov	r3, r0
 800dfb4:	71fb      	strb	r3, [r7, #7]
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	80bb      	strh	r3, [r7, #4]
 800dfba:	4613      	mov	r3, r2
 800dfbc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800dfbe:	79fb      	ldrb	r3, [r7, #7]
 800dfc0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800dfc2:	887b      	ldrh	r3, [r7, #2]
 800dfc4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dfc8:	d07f      	beq.n	800e0ca <pbuf_alloc+0x11e>
 800dfca:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800dfce:	f300 80c8 	bgt.w	800e162 <pbuf_alloc+0x1b6>
 800dfd2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dfd6:	d010      	beq.n	800dffa <pbuf_alloc+0x4e>
 800dfd8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800dfdc:	f300 80c1 	bgt.w	800e162 <pbuf_alloc+0x1b6>
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d002      	beq.n	800dfea <pbuf_alloc+0x3e>
 800dfe4:	2b41      	cmp	r3, #65	; 0x41
 800dfe6:	f040 80bc 	bne.w	800e162 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800dfea:	887a      	ldrh	r2, [r7, #2]
 800dfec:	88bb      	ldrh	r3, [r7, #4]
 800dfee:	4619      	mov	r1, r3
 800dff0:	2000      	movs	r0, #0
 800dff2:	f000 f8d1 	bl	800e198 <pbuf_alloc_reference>
 800dff6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800dff8:	e0bd      	b.n	800e176 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800dffa:	2300      	movs	r3, #0
 800dffc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800dffe:	2300      	movs	r3, #0
 800e000:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e002:	88bb      	ldrh	r3, [r7, #4]
 800e004:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e006:	200d      	movs	r0, #13
 800e008:	f7ff fbbe 	bl	800d788 <memp_malloc>
 800e00c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d109      	bne.n	800e028 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800e014:	f7ff ff76 	bl	800df04 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800e018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d002      	beq.n	800e024 <pbuf_alloc+0x78>
            pbuf_free(p);
 800e01e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e020:	f000 fada 	bl	800e5d8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e024:	2300      	movs	r3, #0
 800e026:	e0a7      	b.n	800e178 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e02a:	3303      	adds	r3, #3
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	f023 0303 	bic.w	r3, r3, #3
 800e032:	b29b      	uxth	r3, r3
 800e034:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800e038:	b29b      	uxth	r3, r3
 800e03a:	8b7a      	ldrh	r2, [r7, #26]
 800e03c:	4293      	cmp	r3, r2
 800e03e:	bf28      	it	cs
 800e040:	4613      	movcs	r3, r2
 800e042:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e046:	3310      	adds	r3, #16
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	4413      	add	r3, r2
 800e04c:	3303      	adds	r3, #3
 800e04e:	f023 0303 	bic.w	r3, r3, #3
 800e052:	4618      	mov	r0, r3
 800e054:	89f9      	ldrh	r1, [r7, #14]
 800e056:	8b7a      	ldrh	r2, [r7, #26]
 800e058:	2300      	movs	r3, #0
 800e05a:	9301      	str	r3, [sp, #4]
 800e05c:	887b      	ldrh	r3, [r7, #2]
 800e05e:	9300      	str	r3, [sp, #0]
 800e060:	460b      	mov	r3, r1
 800e062:	4601      	mov	r1, r0
 800e064:	6938      	ldr	r0, [r7, #16]
 800e066:	f7ff ff77 	bl	800df58 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	f003 0303 	and.w	r3, r3, #3
 800e072:	2b00      	cmp	r3, #0
 800e074:	d006      	beq.n	800e084 <pbuf_alloc+0xd8>
 800e076:	4b42      	ldr	r3, [pc, #264]	; (800e180 <pbuf_alloc+0x1d4>)
 800e078:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e07c:	4941      	ldr	r1, [pc, #260]	; (800e184 <pbuf_alloc+0x1d8>)
 800e07e:	4842      	ldr	r0, [pc, #264]	; (800e188 <pbuf_alloc+0x1dc>)
 800e080:	f00a fb04 	bl	801868c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e084:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e086:	3303      	adds	r3, #3
 800e088:	f023 0303 	bic.w	r3, r3, #3
 800e08c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800e090:	d106      	bne.n	800e0a0 <pbuf_alloc+0xf4>
 800e092:	4b3b      	ldr	r3, [pc, #236]	; (800e180 <pbuf_alloc+0x1d4>)
 800e094:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e098:	493c      	ldr	r1, [pc, #240]	; (800e18c <pbuf_alloc+0x1e0>)
 800e09a:	483b      	ldr	r0, [pc, #236]	; (800e188 <pbuf_alloc+0x1dc>)
 800e09c:	f00a faf6 	bl	801868c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d102      	bne.n	800e0ac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	627b      	str	r3, [r7, #36]	; 0x24
 800e0aa:	e002      	b.n	800e0b2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	693a      	ldr	r2, [r7, #16]
 800e0b0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e0b6:	8b7a      	ldrh	r2, [r7, #26]
 800e0b8:	89fb      	ldrh	r3, [r7, #14]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e0c2:	8b7b      	ldrh	r3, [r7, #26]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d19e      	bne.n	800e006 <pbuf_alloc+0x5a>
      break;
 800e0c8:	e055      	b.n	800e176 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e0ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e0cc:	3303      	adds	r3, #3
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	f023 0303 	bic.w	r3, r3, #3
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	88bb      	ldrh	r3, [r7, #4]
 800e0d8:	3303      	adds	r3, #3
 800e0da:	b29b      	uxth	r3, r3
 800e0dc:	f023 0303 	bic.w	r3, r3, #3
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	4413      	add	r3, r2
 800e0e4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e0e6:	8b3b      	ldrh	r3, [r7, #24]
 800e0e8:	3310      	adds	r3, #16
 800e0ea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e0ec:	8b3a      	ldrh	r2, [r7, #24]
 800e0ee:	88bb      	ldrh	r3, [r7, #4]
 800e0f0:	3303      	adds	r3, #3
 800e0f2:	f023 0303 	bic.w	r3, r3, #3
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d306      	bcc.n	800e108 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e0fa:	8afa      	ldrh	r2, [r7, #22]
 800e0fc:	88bb      	ldrh	r3, [r7, #4]
 800e0fe:	3303      	adds	r3, #3
 800e100:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e104:	429a      	cmp	r2, r3
 800e106:	d201      	bcs.n	800e10c <pbuf_alloc+0x160>
        return NULL;
 800e108:	2300      	movs	r3, #0
 800e10a:	e035      	b.n	800e178 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e10c:	8afb      	ldrh	r3, [r7, #22]
 800e10e:	4618      	mov	r0, r3
 800e110:	f7ff f9b8 	bl	800d484 <mem_malloc>
 800e114:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d101      	bne.n	800e120 <pbuf_alloc+0x174>
        return NULL;
 800e11c:	2300      	movs	r3, #0
 800e11e:	e02b      	b.n	800e178 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e120:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e122:	3310      	adds	r3, #16
 800e124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e126:	4413      	add	r3, r2
 800e128:	3303      	adds	r3, #3
 800e12a:	f023 0303 	bic.w	r3, r3, #3
 800e12e:	4618      	mov	r0, r3
 800e130:	88b9      	ldrh	r1, [r7, #4]
 800e132:	88ba      	ldrh	r2, [r7, #4]
 800e134:	2300      	movs	r3, #0
 800e136:	9301      	str	r3, [sp, #4]
 800e138:	887b      	ldrh	r3, [r7, #2]
 800e13a:	9300      	str	r3, [sp, #0]
 800e13c:	460b      	mov	r3, r1
 800e13e:	4601      	mov	r1, r0
 800e140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e142:	f7ff ff09 	bl	800df58 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e148:	685b      	ldr	r3, [r3, #4]
 800e14a:	f003 0303 	and.w	r3, r3, #3
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d010      	beq.n	800e174 <pbuf_alloc+0x1c8>
 800e152:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <pbuf_alloc+0x1d4>)
 800e154:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e158:	490d      	ldr	r1, [pc, #52]	; (800e190 <pbuf_alloc+0x1e4>)
 800e15a:	480b      	ldr	r0, [pc, #44]	; (800e188 <pbuf_alloc+0x1dc>)
 800e15c:	f00a fa96 	bl	801868c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e160:	e008      	b.n	800e174 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e162:	4b07      	ldr	r3, [pc, #28]	; (800e180 <pbuf_alloc+0x1d4>)
 800e164:	f240 1227 	movw	r2, #295	; 0x127
 800e168:	490a      	ldr	r1, [pc, #40]	; (800e194 <pbuf_alloc+0x1e8>)
 800e16a:	4807      	ldr	r0, [pc, #28]	; (800e188 <pbuf_alloc+0x1dc>)
 800e16c:	f00a fa8e 	bl	801868c <iprintf>
      return NULL;
 800e170:	2300      	movs	r3, #0
 800e172:	e001      	b.n	800e178 <pbuf_alloc+0x1cc>
      break;
 800e174:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3728      	adds	r7, #40	; 0x28
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	0801abd4 	.word	0x0801abd4
 800e184:	0801ac04 	.word	0x0801ac04
 800e188:	0801ac34 	.word	0x0801ac34
 800e18c:	0801ac5c 	.word	0x0801ac5c
 800e190:	0801ac90 	.word	0x0801ac90
 800e194:	0801acbc 	.word	0x0801acbc

0800e198 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b086      	sub	sp, #24
 800e19c:	af02      	add	r7, sp, #8
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	807b      	strh	r3, [r7, #2]
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e1a8:	883b      	ldrh	r3, [r7, #0]
 800e1aa:	2b41      	cmp	r3, #65	; 0x41
 800e1ac:	d009      	beq.n	800e1c2 <pbuf_alloc_reference+0x2a>
 800e1ae:	883b      	ldrh	r3, [r7, #0]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	d006      	beq.n	800e1c2 <pbuf_alloc_reference+0x2a>
 800e1b4:	4b0f      	ldr	r3, [pc, #60]	; (800e1f4 <pbuf_alloc_reference+0x5c>)
 800e1b6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e1ba:	490f      	ldr	r1, [pc, #60]	; (800e1f8 <pbuf_alloc_reference+0x60>)
 800e1bc:	480f      	ldr	r0, [pc, #60]	; (800e1fc <pbuf_alloc_reference+0x64>)
 800e1be:	f00a fa65 	bl	801868c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e1c2:	200c      	movs	r0, #12
 800e1c4:	f7ff fae0 	bl	800d788 <memp_malloc>
 800e1c8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d101      	bne.n	800e1d4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	e00b      	b.n	800e1ec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e1d4:	8879      	ldrh	r1, [r7, #2]
 800e1d6:	887a      	ldrh	r2, [r7, #2]
 800e1d8:	2300      	movs	r3, #0
 800e1da:	9301      	str	r3, [sp, #4]
 800e1dc:	883b      	ldrh	r3, [r7, #0]
 800e1de:	9300      	str	r3, [sp, #0]
 800e1e0:	460b      	mov	r3, r1
 800e1e2:	6879      	ldr	r1, [r7, #4]
 800e1e4:	68f8      	ldr	r0, [r7, #12]
 800e1e6:	f7ff feb7 	bl	800df58 <pbuf_init_alloced_pbuf>
  return p;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3710      	adds	r7, #16
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	0801abd4 	.word	0x0801abd4
 800e1f8:	0801acd8 	.word	0x0801acd8
 800e1fc:	0801ac34 	.word	0x0801ac34

0800e200 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b088      	sub	sp, #32
 800e204:	af02      	add	r7, sp, #8
 800e206:	607b      	str	r3, [r7, #4]
 800e208:	4603      	mov	r3, r0
 800e20a:	73fb      	strb	r3, [r7, #15]
 800e20c:	460b      	mov	r3, r1
 800e20e:	81bb      	strh	r3, [r7, #12]
 800e210:	4613      	mov	r3, r2
 800e212:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800e214:	7bfb      	ldrb	r3, [r7, #15]
 800e216:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800e218:	8a7b      	ldrh	r3, [r7, #18]
 800e21a:	3303      	adds	r3, #3
 800e21c:	f023 0203 	bic.w	r2, r3, #3
 800e220:	89bb      	ldrh	r3, [r7, #12]
 800e222:	441a      	add	r2, r3
 800e224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e226:	429a      	cmp	r2, r3
 800e228:	d901      	bls.n	800e22e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800e22a:	2300      	movs	r3, #0
 800e22c:	e018      	b.n	800e260 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800e22e:	6a3b      	ldr	r3, [r7, #32]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d007      	beq.n	800e244 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800e234:	8a7b      	ldrh	r3, [r7, #18]
 800e236:	3303      	adds	r3, #3
 800e238:	f023 0303 	bic.w	r3, r3, #3
 800e23c:	6a3a      	ldr	r2, [r7, #32]
 800e23e:	4413      	add	r3, r2
 800e240:	617b      	str	r3, [r7, #20]
 800e242:	e001      	b.n	800e248 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800e244:	2300      	movs	r3, #0
 800e246:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	89b9      	ldrh	r1, [r7, #12]
 800e24c:	89ba      	ldrh	r2, [r7, #12]
 800e24e:	2302      	movs	r3, #2
 800e250:	9301      	str	r3, [sp, #4]
 800e252:	897b      	ldrh	r3, [r7, #10]
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	460b      	mov	r3, r1
 800e258:	6979      	ldr	r1, [r7, #20]
 800e25a:	f7ff fe7d 	bl	800df58 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800e25e:	687b      	ldr	r3, [r7, #4]
}
 800e260:	4618      	mov	r0, r3
 800e262:	3718      	adds	r7, #24
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b084      	sub	sp, #16
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	460b      	mov	r3, r1
 800e272:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d106      	bne.n	800e288 <pbuf_realloc+0x20>
 800e27a:	4b3a      	ldr	r3, [pc, #232]	; (800e364 <pbuf_realloc+0xfc>)
 800e27c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800e280:	4939      	ldr	r1, [pc, #228]	; (800e368 <pbuf_realloc+0x100>)
 800e282:	483a      	ldr	r0, [pc, #232]	; (800e36c <pbuf_realloc+0x104>)
 800e284:	f00a fa02 	bl	801868c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	891b      	ldrh	r3, [r3, #8]
 800e28c:	887a      	ldrh	r2, [r7, #2]
 800e28e:	429a      	cmp	r2, r3
 800e290:	d263      	bcs.n	800e35a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	891a      	ldrh	r2, [r3, #8]
 800e296:	887b      	ldrh	r3, [r7, #2]
 800e298:	1ad3      	subs	r3, r2, r3
 800e29a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800e29c:	887b      	ldrh	r3, [r7, #2]
 800e29e:	817b      	strh	r3, [r7, #10]
  q = p;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800e2a4:	e018      	b.n	800e2d8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	895b      	ldrh	r3, [r3, #10]
 800e2aa:	897a      	ldrh	r2, [r7, #10]
 800e2ac:	1ad3      	subs	r3, r2, r3
 800e2ae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	891a      	ldrh	r2, [r3, #8]
 800e2b4:	893b      	ldrh	r3, [r7, #8]
 800e2b6:	1ad3      	subs	r3, r2, r3
 800e2b8:	b29a      	uxth	r2, r3
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d106      	bne.n	800e2d8 <pbuf_realloc+0x70>
 800e2ca:	4b26      	ldr	r3, [pc, #152]	; (800e364 <pbuf_realloc+0xfc>)
 800e2cc:	f240 12af 	movw	r2, #431	; 0x1af
 800e2d0:	4927      	ldr	r1, [pc, #156]	; (800e370 <pbuf_realloc+0x108>)
 800e2d2:	4826      	ldr	r0, [pc, #152]	; (800e36c <pbuf_realloc+0x104>)
 800e2d4:	f00a f9da 	bl	801868c <iprintf>
  while (rem_len > q->len) {
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	895b      	ldrh	r3, [r3, #10]
 800e2dc:	897a      	ldrh	r2, [r7, #10]
 800e2de:	429a      	cmp	r2, r3
 800e2e0:	d8e1      	bhi.n	800e2a6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	7b1b      	ldrb	r3, [r3, #12]
 800e2e6:	f003 030f 	and.w	r3, r3, #15
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d121      	bne.n	800e332 <pbuf_realloc+0xca>
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	895b      	ldrh	r3, [r3, #10]
 800e2f2:	897a      	ldrh	r2, [r7, #10]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d01c      	beq.n	800e332 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	7b5b      	ldrb	r3, [r3, #13]
 800e2fc:	f003 0302 	and.w	r3, r3, #2
 800e300:	2b00      	cmp	r3, #0
 800e302:	d116      	bne.n	800e332 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	685a      	ldr	r2, [r3, #4]
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	1ad3      	subs	r3, r2, r3
 800e30c:	b29a      	uxth	r2, r3
 800e30e:	897b      	ldrh	r3, [r7, #10]
 800e310:	4413      	add	r3, r2
 800e312:	b29b      	uxth	r3, r3
 800e314:	4619      	mov	r1, r3
 800e316:	68f8      	ldr	r0, [r7, #12]
 800e318:	f7fe ffaa 	bl	800d270 <mem_trim>
 800e31c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d106      	bne.n	800e332 <pbuf_realloc+0xca>
 800e324:	4b0f      	ldr	r3, [pc, #60]	; (800e364 <pbuf_realloc+0xfc>)
 800e326:	f240 12bd 	movw	r2, #445	; 0x1bd
 800e32a:	4912      	ldr	r1, [pc, #72]	; (800e374 <pbuf_realloc+0x10c>)
 800e32c:	480f      	ldr	r0, [pc, #60]	; (800e36c <pbuf_realloc+0x104>)
 800e32e:	f00a f9ad 	bl	801868c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	897a      	ldrh	r2, [r7, #10]
 800e336:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	895a      	ldrh	r2, [r3, #10]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d004      	beq.n	800e352 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f000 f943 	bl	800e5d8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2200      	movs	r2, #0
 800e356:	601a      	str	r2, [r3, #0]
 800e358:	e000      	b.n	800e35c <pbuf_realloc+0xf4>
    return;
 800e35a:	bf00      	nop

}
 800e35c:	3710      	adds	r7, #16
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}
 800e362:	bf00      	nop
 800e364:	0801abd4 	.word	0x0801abd4
 800e368:	0801acec 	.word	0x0801acec
 800e36c:	0801ac34 	.word	0x0801ac34
 800e370:	0801ad04 	.word	0x0801ad04
 800e374:	0801ad1c 	.word	0x0801ad1c

0800e378 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b086      	sub	sp, #24
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	4613      	mov	r3, r2
 800e384:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d106      	bne.n	800e39a <pbuf_add_header_impl+0x22>
 800e38c:	4b2b      	ldr	r3, [pc, #172]	; (800e43c <pbuf_add_header_impl+0xc4>)
 800e38e:	f240 12df 	movw	r2, #479	; 0x1df
 800e392:	492b      	ldr	r1, [pc, #172]	; (800e440 <pbuf_add_header_impl+0xc8>)
 800e394:	482b      	ldr	r0, [pc, #172]	; (800e444 <pbuf_add_header_impl+0xcc>)
 800e396:	f00a f979 	bl	801868c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d003      	beq.n	800e3a8 <pbuf_add_header_impl+0x30>
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3a6:	d301      	bcc.n	800e3ac <pbuf_add_header_impl+0x34>
    return 1;
 800e3a8:	2301      	movs	r3, #1
 800e3aa:	e043      	b.n	800e434 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d101      	bne.n	800e3b6 <pbuf_add_header_impl+0x3e>
    return 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	e03e      	b.n	800e434 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800e3b6:	68bb      	ldr	r3, [r7, #8]
 800e3b8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	891a      	ldrh	r2, [r3, #8]
 800e3be:	8a7b      	ldrh	r3, [r7, #18]
 800e3c0:	4413      	add	r3, r2
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	8a7a      	ldrh	r2, [r7, #18]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d901      	bls.n	800e3ce <pbuf_add_header_impl+0x56>
    return 1;
 800e3ca:	2301      	movs	r3, #1
 800e3cc:	e032      	b.n	800e434 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	7b1b      	ldrb	r3, [r3, #12]
 800e3d2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800e3d4:	8a3b      	ldrh	r3, [r7, #16]
 800e3d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d00c      	beq.n	800e3f8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	425b      	negs	r3, r3
 800e3e6:	4413      	add	r3, r2
 800e3e8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	3310      	adds	r3, #16
 800e3ee:	697a      	ldr	r2, [r7, #20]
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d20d      	bcs.n	800e410 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800e3f4:	2301      	movs	r3, #1
 800e3f6:	e01d      	b.n	800e434 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800e3f8:	79fb      	ldrb	r3, [r7, #7]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d006      	beq.n	800e40c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	685a      	ldr	r2, [r3, #4]
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	425b      	negs	r3, r3
 800e406:	4413      	add	r3, r2
 800e408:	617b      	str	r3, [r7, #20]
 800e40a:	e001      	b.n	800e410 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800e40c:	2301      	movs	r3, #1
 800e40e:	e011      	b.n	800e434 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	697a      	ldr	r2, [r7, #20]
 800e414:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	895a      	ldrh	r2, [r3, #10]
 800e41a:	8a7b      	ldrh	r3, [r7, #18]
 800e41c:	4413      	add	r3, r2
 800e41e:	b29a      	uxth	r2, r3
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	891a      	ldrh	r2, [r3, #8]
 800e428:	8a7b      	ldrh	r3, [r7, #18]
 800e42a:	4413      	add	r3, r2
 800e42c:	b29a      	uxth	r2, r3
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	811a      	strh	r2, [r3, #8]


  return 0;
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	3718      	adds	r7, #24
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	0801abd4 	.word	0x0801abd4
 800e440:	0801ad38 	.word	0x0801ad38
 800e444:	0801ac34 	.word	0x0801ac34

0800e448 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800e452:	2200      	movs	r2, #0
 800e454:	6839      	ldr	r1, [r7, #0]
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7ff ff8e 	bl	800e378 <pbuf_add_header_impl>
 800e45c:	4603      	mov	r3, r0
}
 800e45e:	4618      	mov	r0, r3
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
	...

0800e468 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d106      	bne.n	800e486 <pbuf_remove_header+0x1e>
 800e478:	4b20      	ldr	r3, [pc, #128]	; (800e4fc <pbuf_remove_header+0x94>)
 800e47a:	f240 224b 	movw	r2, #587	; 0x24b
 800e47e:	4920      	ldr	r1, [pc, #128]	; (800e500 <pbuf_remove_header+0x98>)
 800e480:	4820      	ldr	r0, [pc, #128]	; (800e504 <pbuf_remove_header+0x9c>)
 800e482:	f00a f903 	bl	801868c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d003      	beq.n	800e494 <pbuf_remove_header+0x2c>
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e492:	d301      	bcc.n	800e498 <pbuf_remove_header+0x30>
    return 1;
 800e494:	2301      	movs	r3, #1
 800e496:	e02c      	b.n	800e4f2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d101      	bne.n	800e4a2 <pbuf_remove_header+0x3a>
    return 0;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	e027      	b.n	800e4f2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	895b      	ldrh	r3, [r3, #10]
 800e4aa:	89fa      	ldrh	r2, [r7, #14]
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d908      	bls.n	800e4c2 <pbuf_remove_header+0x5a>
 800e4b0:	4b12      	ldr	r3, [pc, #72]	; (800e4fc <pbuf_remove_header+0x94>)
 800e4b2:	f240 2255 	movw	r2, #597	; 0x255
 800e4b6:	4914      	ldr	r1, [pc, #80]	; (800e508 <pbuf_remove_header+0xa0>)
 800e4b8:	4812      	ldr	r0, [pc, #72]	; (800e504 <pbuf_remove_header+0x9c>)
 800e4ba:	f00a f8e7 	bl	801868c <iprintf>
 800e4be:	2301      	movs	r3, #1
 800e4c0:	e017      	b.n	800e4f2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	685b      	ldr	r3, [r3, #4]
 800e4c6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685a      	ldr	r2, [r3, #4]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	441a      	add	r2, r3
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	895a      	ldrh	r2, [r3, #10]
 800e4d8:	89fb      	ldrh	r3, [r7, #14]
 800e4da:	1ad3      	subs	r3, r2, r3
 800e4dc:	b29a      	uxth	r2, r3
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	891a      	ldrh	r2, [r3, #8]
 800e4e6:	89fb      	ldrh	r3, [r7, #14]
 800e4e8:	1ad3      	subs	r3, r2, r3
 800e4ea:	b29a      	uxth	r2, r3
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800e4f0:	2300      	movs	r3, #0
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	3710      	adds	r7, #16
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	bd80      	pop	{r7, pc}
 800e4fa:	bf00      	nop
 800e4fc:	0801abd4 	.word	0x0801abd4
 800e500:	0801ad38 	.word	0x0801ad38
 800e504:	0801ac34 	.word	0x0801ac34
 800e508:	0801ad44 	.word	0x0801ad44

0800e50c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b082      	sub	sp, #8
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	460b      	mov	r3, r1
 800e516:	807b      	strh	r3, [r7, #2]
 800e518:	4613      	mov	r3, r2
 800e51a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800e51c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e520:	2b00      	cmp	r3, #0
 800e522:	da08      	bge.n	800e536 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800e524:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e528:	425b      	negs	r3, r3
 800e52a:	4619      	mov	r1, r3
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f7ff ff9b 	bl	800e468 <pbuf_remove_header>
 800e532:	4603      	mov	r3, r0
 800e534:	e007      	b.n	800e546 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800e536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e53a:	787a      	ldrb	r2, [r7, #1]
 800e53c:	4619      	mov	r1, r3
 800e53e:	6878      	ldr	r0, [r7, #4]
 800e540:	f7ff ff1a 	bl	800e378 <pbuf_add_header_impl>
 800e544:	4603      	mov	r3, r0
  }
}
 800e546:	4618      	mov	r0, r3
 800e548:	3708      	adds	r7, #8
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b082      	sub	sp, #8
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
 800e556:	460b      	mov	r3, r1
 800e558:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800e55a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e55e:	2201      	movs	r2, #1
 800e560:	4619      	mov	r1, r3
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f7ff ffd2 	bl	800e50c <pbuf_header_impl>
 800e568:	4603      	mov	r3, r0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}

0800e572 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 800e572:	b580      	push	{r7, lr}
 800e574:	b086      	sub	sp, #24
 800e576:	af00      	add	r7, sp, #0
 800e578:	6078      	str	r0, [r7, #4]
 800e57a:	460b      	mov	r3, r1
 800e57c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 800e582:	887b      	ldrh	r3, [r7, #2]
 800e584:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e586:	e01c      	b.n	800e5c2 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	895b      	ldrh	r3, [r3, #10]
 800e58c:	8a7a      	ldrh	r2, [r7, #18]
 800e58e:	429a      	cmp	r2, r3
 800e590:	d310      	bcc.n	800e5b4 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	895b      	ldrh	r3, [r3, #10]
 800e59a:	8a7a      	ldrh	r2, [r7, #18]
 800e59c:	1ad3      	subs	r3, r2, r3
 800e59e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	617b      	str	r3, [r7, #20]
      f->next = 0;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 800e5ac:	68f8      	ldr	r0, [r7, #12]
 800e5ae:	f000 f813 	bl	800e5d8 <pbuf_free>
 800e5b2:	e006      	b.n	800e5c2 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 800e5b4:	8a7b      	ldrh	r3, [r7, #18]
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6978      	ldr	r0, [r7, #20]
 800e5ba:	f7ff ff55 	bl	800e468 <pbuf_remove_header>
      free_left = 0;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 800e5c2:	8a7b      	ldrh	r3, [r7, #18]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d002      	beq.n	800e5ce <pbuf_free_header+0x5c>
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d1dc      	bne.n	800e588 <pbuf_free_header+0x16>
    }
  }
  return p;
 800e5ce:	697b      	ldr	r3, [r7, #20]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3718      	adds	r7, #24
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b088      	sub	sp, #32
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d10b      	bne.n	800e5fe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d106      	bne.n	800e5fa <pbuf_free+0x22>
 800e5ec:	4b3b      	ldr	r3, [pc, #236]	; (800e6dc <pbuf_free+0x104>)
 800e5ee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800e5f2:	493b      	ldr	r1, [pc, #236]	; (800e6e0 <pbuf_free+0x108>)
 800e5f4:	483b      	ldr	r0, [pc, #236]	; (800e6e4 <pbuf_free+0x10c>)
 800e5f6:	f00a f849 	bl	801868c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	e069      	b.n	800e6d2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800e602:	e062      	b.n	800e6ca <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800e604:	f009 ff2a 	bl	801845c <sys_arch_protect>
 800e608:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	7b9b      	ldrb	r3, [r3, #14]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d106      	bne.n	800e620 <pbuf_free+0x48>
 800e612:	4b32      	ldr	r3, [pc, #200]	; (800e6dc <pbuf_free+0x104>)
 800e614:	f240 22f1 	movw	r2, #753	; 0x2f1
 800e618:	4933      	ldr	r1, [pc, #204]	; (800e6e8 <pbuf_free+0x110>)
 800e61a:	4832      	ldr	r0, [pc, #200]	; (800e6e4 <pbuf_free+0x10c>)
 800e61c:	f00a f836 	bl	801868c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	7b9b      	ldrb	r3, [r3, #14]
 800e624:	3b01      	subs	r3, #1
 800e626:	b2da      	uxtb	r2, r3
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	739a      	strb	r2, [r3, #14]
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	7b9b      	ldrb	r3, [r3, #14]
 800e630:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800e632:	69b8      	ldr	r0, [r7, #24]
 800e634:	f009 ff20 	bl	8018478 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800e638:	7dfb      	ldrb	r3, [r7, #23]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d143      	bne.n	800e6c6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	7b1b      	ldrb	r3, [r3, #12]
 800e648:	f003 030f 	and.w	r3, r3, #15
 800e64c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	7b5b      	ldrb	r3, [r3, #13]
 800e652:	f003 0302 	and.w	r3, r3, #2
 800e656:	2b00      	cmp	r3, #0
 800e658:	d011      	beq.n	800e67e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	691b      	ldr	r3, [r3, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d106      	bne.n	800e674 <pbuf_free+0x9c>
 800e666:	4b1d      	ldr	r3, [pc, #116]	; (800e6dc <pbuf_free+0x104>)
 800e668:	f240 22ff 	movw	r2, #767	; 0x2ff
 800e66c:	491f      	ldr	r1, [pc, #124]	; (800e6ec <pbuf_free+0x114>)
 800e66e:	481d      	ldr	r0, [pc, #116]	; (800e6e4 <pbuf_free+0x10c>)
 800e670:	f00a f80c 	bl	801868c <iprintf>
        pc->custom_free_function(p);
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	4798      	blx	r3
 800e67c:	e01d      	b.n	800e6ba <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800e67e:	7bfb      	ldrb	r3, [r7, #15]
 800e680:	2b02      	cmp	r3, #2
 800e682:	d104      	bne.n	800e68e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800e684:	6879      	ldr	r1, [r7, #4]
 800e686:	200d      	movs	r0, #13
 800e688:	f7ff f8d0 	bl	800d82c <memp_free>
 800e68c:	e015      	b.n	800e6ba <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800e68e:	7bfb      	ldrb	r3, [r7, #15]
 800e690:	2b01      	cmp	r3, #1
 800e692:	d104      	bne.n	800e69e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800e694:	6879      	ldr	r1, [r7, #4]
 800e696:	200c      	movs	r0, #12
 800e698:	f7ff f8c8 	bl	800d82c <memp_free>
 800e69c:	e00d      	b.n	800e6ba <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800e69e:	7bfb      	ldrb	r3, [r7, #15]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d103      	bne.n	800e6ac <pbuf_free+0xd4>
          mem_free(p);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f7fe fd53 	bl	800d150 <mem_free>
 800e6aa:	e006      	b.n	800e6ba <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800e6ac:	4b0b      	ldr	r3, [pc, #44]	; (800e6dc <pbuf_free+0x104>)
 800e6ae:	f240 320f 	movw	r2, #783	; 0x30f
 800e6b2:	490f      	ldr	r1, [pc, #60]	; (800e6f0 <pbuf_free+0x118>)
 800e6b4:	480b      	ldr	r0, [pc, #44]	; (800e6e4 <pbuf_free+0x10c>)
 800e6b6:	f009 ffe9 	bl	801868c <iprintf>
        }
      }
      count++;
 800e6ba:	7ffb      	ldrb	r3, [r7, #31]
 800e6bc:	3301      	adds	r3, #1
 800e6be:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	607b      	str	r3, [r7, #4]
 800e6c4:	e001      	b.n	800e6ca <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800e6c6:	2300      	movs	r3, #0
 800e6c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d199      	bne.n	800e604 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800e6d0:	7ffb      	ldrb	r3, [r7, #31]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3720      	adds	r7, #32
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}
 800e6da:	bf00      	nop
 800e6dc:	0801abd4 	.word	0x0801abd4
 800e6e0:	0801ad38 	.word	0x0801ad38
 800e6e4:	0801ac34 	.word	0x0801ac34
 800e6e8:	0801ad64 	.word	0x0801ad64
 800e6ec:	0801ad7c 	.word	0x0801ad7c
 800e6f0:	0801ada0 	.word	0x0801ada0

0800e6f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800e6f4:	b480      	push	{r7}
 800e6f6:	b085      	sub	sp, #20
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800e6fc:	2300      	movs	r3, #0
 800e6fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800e700:	e005      	b.n	800e70e <pbuf_clen+0x1a>
    ++len;
 800e702:	89fb      	ldrh	r3, [r7, #14]
 800e704:	3301      	adds	r3, #1
 800e706:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d1f6      	bne.n	800e702 <pbuf_clen+0xe>
  }
  return len;
 800e714:	89fb      	ldrh	r3, [r7, #14]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr
	...

0800e724 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d016      	beq.n	800e760 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800e732:	f009 fe93 	bl	801845c <sys_arch_protect>
 800e736:	60f8      	str	r0, [r7, #12]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	7b9b      	ldrb	r3, [r3, #14]
 800e73c:	3301      	adds	r3, #1
 800e73e:	b2da      	uxtb	r2, r3
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	739a      	strb	r2, [r3, #14]
 800e744:	68f8      	ldr	r0, [r7, #12]
 800e746:	f009 fe97 	bl	8018478 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	7b9b      	ldrb	r3, [r3, #14]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d106      	bne.n	800e760 <pbuf_ref+0x3c>
 800e752:	4b05      	ldr	r3, [pc, #20]	; (800e768 <pbuf_ref+0x44>)
 800e754:	f240 3242 	movw	r2, #834	; 0x342
 800e758:	4904      	ldr	r1, [pc, #16]	; (800e76c <pbuf_ref+0x48>)
 800e75a:	4805      	ldr	r0, [pc, #20]	; (800e770 <pbuf_ref+0x4c>)
 800e75c:	f009 ff96 	bl	801868c <iprintf>
  }
}
 800e760:	bf00      	nop
 800e762:	3710      	adds	r7, #16
 800e764:	46bd      	mov	sp, r7
 800e766:	bd80      	pop	{r7, pc}
 800e768:	0801abd4 	.word	0x0801abd4
 800e76c:	0801adb4 	.word	0x0801adb4
 800e770:	0801ac34 	.word	0x0801ac34

0800e774 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b084      	sub	sp, #16
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
 800e77c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d002      	beq.n	800e78a <pbuf_cat+0x16>
 800e784:	683b      	ldr	r3, [r7, #0]
 800e786:	2b00      	cmp	r3, #0
 800e788:	d107      	bne.n	800e79a <pbuf_cat+0x26>
 800e78a:	4b20      	ldr	r3, [pc, #128]	; (800e80c <pbuf_cat+0x98>)
 800e78c:	f240 3259 	movw	r2, #857	; 0x359
 800e790:	491f      	ldr	r1, [pc, #124]	; (800e810 <pbuf_cat+0x9c>)
 800e792:	4820      	ldr	r0, [pc, #128]	; (800e814 <pbuf_cat+0xa0>)
 800e794:	f009 ff7a 	bl	801868c <iprintf>
 800e798:	e034      	b.n	800e804 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	60fb      	str	r3, [r7, #12]
 800e79e:	e00a      	b.n	800e7b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	891a      	ldrh	r2, [r3, #8]
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	891b      	ldrh	r3, [r3, #8]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	b29a      	uxth	r2, r3
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	60fb      	str	r3, [r7, #12]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d1f0      	bne.n	800e7a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	891a      	ldrh	r2, [r3, #8]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	895b      	ldrh	r3, [r3, #10]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d006      	beq.n	800e7d8 <pbuf_cat+0x64>
 800e7ca:	4b10      	ldr	r3, [pc, #64]	; (800e80c <pbuf_cat+0x98>)
 800e7cc:	f240 3262 	movw	r2, #866	; 0x362
 800e7d0:	4911      	ldr	r1, [pc, #68]	; (800e818 <pbuf_cat+0xa4>)
 800e7d2:	4810      	ldr	r0, [pc, #64]	; (800e814 <pbuf_cat+0xa0>)
 800e7d4:	f009 ff5a 	bl	801868c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d006      	beq.n	800e7ee <pbuf_cat+0x7a>
 800e7e0:	4b0a      	ldr	r3, [pc, #40]	; (800e80c <pbuf_cat+0x98>)
 800e7e2:	f240 3263 	movw	r2, #867	; 0x363
 800e7e6:	490d      	ldr	r1, [pc, #52]	; (800e81c <pbuf_cat+0xa8>)
 800e7e8:	480a      	ldr	r0, [pc, #40]	; (800e814 <pbuf_cat+0xa0>)
 800e7ea:	f009 ff4f 	bl	801868c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	891a      	ldrh	r2, [r3, #8]
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	891b      	ldrh	r3, [r3, #8]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	b29a      	uxth	r2, r3
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	683a      	ldr	r2, [r7, #0]
 800e802:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	0801abd4 	.word	0x0801abd4
 800e810:	0801adc8 	.word	0x0801adc8
 800e814:	0801ac34 	.word	0x0801ac34
 800e818:	0801ae00 	.word	0x0801ae00
 800e81c:	0801ae30 	.word	0x0801ae30

0800e820 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800e82a:	6839      	ldr	r1, [r7, #0]
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f7ff ffa1 	bl	800e774 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800e832:	6838      	ldr	r0, [r7, #0]
 800e834:	f7ff ff76 	bl	800e724 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800e838:	bf00      	nop
 800e83a:	3708      	adds	r7, #8
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800e84a:	2300      	movs	r3, #0
 800e84c:	617b      	str	r3, [r7, #20]
 800e84e:	2300      	movs	r3, #0
 800e850:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d008      	beq.n	800e86a <pbuf_copy+0x2a>
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d005      	beq.n	800e86a <pbuf_copy+0x2a>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	891a      	ldrh	r2, [r3, #8]
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	891b      	ldrh	r3, [r3, #8]
 800e866:	429a      	cmp	r2, r3
 800e868:	d209      	bcs.n	800e87e <pbuf_copy+0x3e>
 800e86a:	4b57      	ldr	r3, [pc, #348]	; (800e9c8 <pbuf_copy+0x188>)
 800e86c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800e870:	4956      	ldr	r1, [pc, #344]	; (800e9cc <pbuf_copy+0x18c>)
 800e872:	4857      	ldr	r0, [pc, #348]	; (800e9d0 <pbuf_copy+0x190>)
 800e874:	f009 ff0a 	bl	801868c <iprintf>
 800e878:	f06f 030f 	mvn.w	r3, #15
 800e87c:	e09f      	b.n	800e9be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	895b      	ldrh	r3, [r3, #10]
 800e882:	461a      	mov	r2, r3
 800e884:	697b      	ldr	r3, [r7, #20]
 800e886:	1ad2      	subs	r2, r2, r3
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	895b      	ldrh	r3, [r3, #10]
 800e88c:	4619      	mov	r1, r3
 800e88e:	693b      	ldr	r3, [r7, #16]
 800e890:	1acb      	subs	r3, r1, r3
 800e892:	429a      	cmp	r2, r3
 800e894:	d306      	bcc.n	800e8a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	895b      	ldrh	r3, [r3, #10]
 800e89a:	461a      	mov	r2, r3
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	60fb      	str	r3, [r7, #12]
 800e8a2:	e005      	b.n	800e8b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	895b      	ldrh	r3, [r3, #10]
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	1ad3      	subs	r3, r2, r3
 800e8ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	685a      	ldr	r2, [r3, #4]
 800e8b4:	697b      	ldr	r3, [r7, #20]
 800e8b6:	18d0      	adds	r0, r2, r3
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	685a      	ldr	r2, [r3, #4]
 800e8bc:	693b      	ldr	r3, [r7, #16]
 800e8be:	4413      	add	r3, r2
 800e8c0:	68fa      	ldr	r2, [r7, #12]
 800e8c2:	4619      	mov	r1, r3
 800e8c4:	f009 fe22 	bl	801850c <memcpy>
    offset_to += len;
 800e8c8:	697a      	ldr	r2, [r7, #20]
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800e8d0:	693a      	ldr	r2, [r7, #16]
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	4413      	add	r3, r2
 800e8d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	895b      	ldrh	r3, [r3, #10]
 800e8dc:	461a      	mov	r2, r3
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d906      	bls.n	800e8f2 <pbuf_copy+0xb2>
 800e8e4:	4b38      	ldr	r3, [pc, #224]	; (800e9c8 <pbuf_copy+0x188>)
 800e8e6:	f240 32d9 	movw	r2, #985	; 0x3d9
 800e8ea:	493a      	ldr	r1, [pc, #232]	; (800e9d4 <pbuf_copy+0x194>)
 800e8ec:	4838      	ldr	r0, [pc, #224]	; (800e9d0 <pbuf_copy+0x190>)
 800e8ee:	f009 fecd 	bl	801868c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	895b      	ldrh	r3, [r3, #10]
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	d906      	bls.n	800e90c <pbuf_copy+0xcc>
 800e8fe:	4b32      	ldr	r3, [pc, #200]	; (800e9c8 <pbuf_copy+0x188>)
 800e900:	f240 32da 	movw	r2, #986	; 0x3da
 800e904:	4934      	ldr	r1, [pc, #208]	; (800e9d8 <pbuf_copy+0x198>)
 800e906:	4832      	ldr	r0, [pc, #200]	; (800e9d0 <pbuf_copy+0x190>)
 800e908:	f009 fec0 	bl	801868c <iprintf>
    if (offset_from >= p_from->len) {
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	895b      	ldrh	r3, [r3, #10]
 800e910:	461a      	mov	r2, r3
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	4293      	cmp	r3, r2
 800e916:	d304      	bcc.n	800e922 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800e918:	2300      	movs	r3, #0
 800e91a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	895b      	ldrh	r3, [r3, #10]
 800e926:	461a      	mov	r2, r3
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	4293      	cmp	r3, r2
 800e92c:	d114      	bne.n	800e958 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800e92e:	2300      	movs	r3, #0
 800e930:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d10c      	bne.n	800e958 <pbuf_copy+0x118>
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d009      	beq.n	800e958 <pbuf_copy+0x118>
 800e944:	4b20      	ldr	r3, [pc, #128]	; (800e9c8 <pbuf_copy+0x188>)
 800e946:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800e94a:	4924      	ldr	r1, [pc, #144]	; (800e9dc <pbuf_copy+0x19c>)
 800e94c:	4820      	ldr	r0, [pc, #128]	; (800e9d0 <pbuf_copy+0x190>)
 800e94e:	f009 fe9d 	bl	801868c <iprintf>
 800e952:	f06f 030f 	mvn.w	r3, #15
 800e956:	e032      	b.n	800e9be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d013      	beq.n	800e986 <pbuf_copy+0x146>
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	895a      	ldrh	r2, [r3, #10]
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	891b      	ldrh	r3, [r3, #8]
 800e966:	429a      	cmp	r2, r3
 800e968:	d10d      	bne.n	800e986 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e96a:	683b      	ldr	r3, [r7, #0]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d009      	beq.n	800e986 <pbuf_copy+0x146>
 800e972:	4b15      	ldr	r3, [pc, #84]	; (800e9c8 <pbuf_copy+0x188>)
 800e974:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800e978:	4919      	ldr	r1, [pc, #100]	; (800e9e0 <pbuf_copy+0x1a0>)
 800e97a:	4815      	ldr	r0, [pc, #84]	; (800e9d0 <pbuf_copy+0x190>)
 800e97c:	f009 fe86 	bl	801868c <iprintf>
 800e980:	f06f 0305 	mvn.w	r3, #5
 800e984:	e01b      	b.n	800e9be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d013      	beq.n	800e9b4 <pbuf_copy+0x174>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	895a      	ldrh	r2, [r3, #10]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	891b      	ldrh	r3, [r3, #8]
 800e994:	429a      	cmp	r2, r3
 800e996:	d10d      	bne.n	800e9b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d009      	beq.n	800e9b4 <pbuf_copy+0x174>
 800e9a0:	4b09      	ldr	r3, [pc, #36]	; (800e9c8 <pbuf_copy+0x188>)
 800e9a2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800e9a6:	490e      	ldr	r1, [pc, #56]	; (800e9e0 <pbuf_copy+0x1a0>)
 800e9a8:	4809      	ldr	r0, [pc, #36]	; (800e9d0 <pbuf_copy+0x190>)
 800e9aa:	f009 fe6f 	bl	801868c <iprintf>
 800e9ae:	f06f 0305 	mvn.w	r3, #5
 800e9b2:	e004      	b.n	800e9be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	f47f af61 	bne.w	800e87e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800e9bc:	2300      	movs	r3, #0
}
 800e9be:	4618      	mov	r0, r3
 800e9c0:	3718      	adds	r7, #24
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	0801abd4 	.word	0x0801abd4
 800e9cc:	0801ae7c 	.word	0x0801ae7c
 800e9d0:	0801ac34 	.word	0x0801ac34
 800e9d4:	0801aeac 	.word	0x0801aeac
 800e9d8:	0801aec4 	.word	0x0801aec4
 800e9dc:	0801aee0 	.word	0x0801aee0
 800e9e0:	0801aef0 	.word	0x0801aef0

0800e9e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b088      	sub	sp, #32
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	4611      	mov	r1, r2
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	460b      	mov	r3, r1
 800e9f4:	80fb      	strh	r3, [r7, #6]
 800e9f6:	4613      	mov	r3, r2
 800e9f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d108      	bne.n	800ea1a <pbuf_copy_partial+0x36>
 800ea08:	4b2b      	ldr	r3, [pc, #172]	; (800eab8 <pbuf_copy_partial+0xd4>)
 800ea0a:	f240 420a 	movw	r2, #1034	; 0x40a
 800ea0e:	492b      	ldr	r1, [pc, #172]	; (800eabc <pbuf_copy_partial+0xd8>)
 800ea10:	482b      	ldr	r0, [pc, #172]	; (800eac0 <pbuf_copy_partial+0xdc>)
 800ea12:	f009 fe3b 	bl	801868c <iprintf>
 800ea16:	2300      	movs	r3, #0
 800ea18:	e04a      	b.n	800eab0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d108      	bne.n	800ea32 <pbuf_copy_partial+0x4e>
 800ea20:	4b25      	ldr	r3, [pc, #148]	; (800eab8 <pbuf_copy_partial+0xd4>)
 800ea22:	f240 420b 	movw	r2, #1035	; 0x40b
 800ea26:	4927      	ldr	r1, [pc, #156]	; (800eac4 <pbuf_copy_partial+0xe0>)
 800ea28:	4825      	ldr	r0, [pc, #148]	; (800eac0 <pbuf_copy_partial+0xdc>)
 800ea2a:	f009 fe2f 	bl	801868c <iprintf>
 800ea2e:	2300      	movs	r3, #0
 800ea30:	e03e      	b.n	800eab0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	61fb      	str	r3, [r7, #28]
 800ea36:	e034      	b.n	800eaa2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800ea38:	88bb      	ldrh	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d00a      	beq.n	800ea54 <pbuf_copy_partial+0x70>
 800ea3e:	69fb      	ldr	r3, [r7, #28]
 800ea40:	895b      	ldrh	r3, [r3, #10]
 800ea42:	88ba      	ldrh	r2, [r7, #4]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d305      	bcc.n	800ea54 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	895b      	ldrh	r3, [r3, #10]
 800ea4c:	88ba      	ldrh	r2, [r7, #4]
 800ea4e:	1ad3      	subs	r3, r2, r3
 800ea50:	80bb      	strh	r3, [r7, #4]
 800ea52:	e023      	b.n	800ea9c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	895a      	ldrh	r2, [r3, #10]
 800ea58:	88bb      	ldrh	r3, [r7, #4]
 800ea5a:	1ad3      	subs	r3, r2, r3
 800ea5c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ea5e:	8b3a      	ldrh	r2, [r7, #24]
 800ea60:	88fb      	ldrh	r3, [r7, #6]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d901      	bls.n	800ea6a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800ea66:	88fb      	ldrh	r3, [r7, #6]
 800ea68:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ea6a:	8b7b      	ldrh	r3, [r7, #26]
 800ea6c:	68ba      	ldr	r2, [r7, #8]
 800ea6e:	18d0      	adds	r0, r2, r3
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	685a      	ldr	r2, [r3, #4]
 800ea74:	88bb      	ldrh	r3, [r7, #4]
 800ea76:	4413      	add	r3, r2
 800ea78:	8b3a      	ldrh	r2, [r7, #24]
 800ea7a:	4619      	mov	r1, r3
 800ea7c:	f009 fd46 	bl	801850c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800ea80:	8afa      	ldrh	r2, [r7, #22]
 800ea82:	8b3b      	ldrh	r3, [r7, #24]
 800ea84:	4413      	add	r3, r2
 800ea86:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ea88:	8b7a      	ldrh	r2, [r7, #26]
 800ea8a:	8b3b      	ldrh	r3, [r7, #24]
 800ea8c:	4413      	add	r3, r2
 800ea8e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ea90:	88fa      	ldrh	r2, [r7, #6]
 800ea92:	8b3b      	ldrh	r3, [r7, #24]
 800ea94:	1ad3      	subs	r3, r2, r3
 800ea96:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	61fb      	str	r3, [r7, #28]
 800eaa2:	88fb      	ldrh	r3, [r7, #6]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <pbuf_copy_partial+0xca>
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d1c4      	bne.n	800ea38 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800eaae:	8afb      	ldrh	r3, [r7, #22]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3720      	adds	r7, #32
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	0801abd4 	.word	0x0801abd4
 800eabc:	0801af1c 	.word	0x0801af1c
 800eac0:	0801ac34 	.word	0x0801ac34
 800eac4:	0801af3c 	.word	0x0801af3c

0800eac8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b087      	sub	sp, #28
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	460b      	mov	r3, r1
 800ead2:	607a      	str	r2, [r7, #4]
 800ead4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800ead6:	897b      	ldrh	r3, [r7, #10]
 800ead8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800eade:	e007      	b.n	800eaf0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	895b      	ldrh	r3, [r3, #10]
 800eae4:	8afa      	ldrh	r2, [r7, #22]
 800eae6:	1ad3      	subs	r3, r2, r3
 800eae8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d004      	beq.n	800eb00 <pbuf_skip_const+0x38>
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	895b      	ldrh	r3, [r3, #10]
 800eafa:	8afa      	ldrh	r2, [r7, #22]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d2ef      	bcs.n	800eae0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d002      	beq.n	800eb0c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	8afa      	ldrh	r2, [r7, #22]
 800eb0a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800eb0c:	693b      	ldr	r3, [r7, #16]
}
 800eb0e:	4618      	mov	r0, r3
 800eb10:	371c      	adds	r7, #28
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr

0800eb1a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b086      	sub	sp, #24
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	60f8      	str	r0, [r7, #12]
 800eb22:	460b      	mov	r3, r1
 800eb24:	607a      	str	r2, [r7, #4]
 800eb26:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800eb28:	897b      	ldrh	r3, [r7, #10]
 800eb2a:	687a      	ldr	r2, [r7, #4]
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	68f8      	ldr	r0, [r7, #12]
 800eb30:	f7ff ffca 	bl	800eac8 <pbuf_skip_const>
 800eb34:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800eb36:	697b      	ldr	r3, [r7, #20]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3718      	adds	r7, #24
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b088      	sub	sp, #32
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	4613      	mov	r3, r2
 800eb4c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800eb4e:	88fb      	ldrh	r3, [r7, #6]
 800eb50:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800eb52:	2300      	movs	r3, #0
 800eb54:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d109      	bne.n	800eb70 <pbuf_take+0x30>
 800eb5c:	4b3a      	ldr	r3, [pc, #232]	; (800ec48 <pbuf_take+0x108>)
 800eb5e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800eb62:	493a      	ldr	r1, [pc, #232]	; (800ec4c <pbuf_take+0x10c>)
 800eb64:	483a      	ldr	r0, [pc, #232]	; (800ec50 <pbuf_take+0x110>)
 800eb66:	f009 fd91 	bl	801868c <iprintf>
 800eb6a:	f06f 030f 	mvn.w	r3, #15
 800eb6e:	e067      	b.n	800ec40 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800eb70:	68bb      	ldr	r3, [r7, #8]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d109      	bne.n	800eb8a <pbuf_take+0x4a>
 800eb76:	4b34      	ldr	r3, [pc, #208]	; (800ec48 <pbuf_take+0x108>)
 800eb78:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800eb7c:	4935      	ldr	r1, [pc, #212]	; (800ec54 <pbuf_take+0x114>)
 800eb7e:	4834      	ldr	r0, [pc, #208]	; (800ec50 <pbuf_take+0x110>)
 800eb80:	f009 fd84 	bl	801868c <iprintf>
 800eb84:	f06f 030f 	mvn.w	r3, #15
 800eb88:	e05a      	b.n	800ec40 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	891b      	ldrh	r3, [r3, #8]
 800eb8e:	88fa      	ldrh	r2, [r7, #6]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d909      	bls.n	800eba8 <pbuf_take+0x68>
 800eb94:	4b2c      	ldr	r3, [pc, #176]	; (800ec48 <pbuf_take+0x108>)
 800eb96:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800eb9a:	492f      	ldr	r1, [pc, #188]	; (800ec58 <pbuf_take+0x118>)
 800eb9c:	482c      	ldr	r0, [pc, #176]	; (800ec50 <pbuf_take+0x110>)
 800eb9e:	f009 fd75 	bl	801868c <iprintf>
 800eba2:	f04f 33ff 	mov.w	r3, #4294967295
 800eba6:	e04b      	b.n	800ec40 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d007      	beq.n	800ebbe <pbuf_take+0x7e>
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d004      	beq.n	800ebbe <pbuf_take+0x7e>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	891b      	ldrh	r3, [r3, #8]
 800ebb8:	88fa      	ldrh	r2, [r7, #6]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d902      	bls.n	800ebc4 <pbuf_take+0x84>
    return ERR_ARG;
 800ebbe:	f06f 030f 	mvn.w	r3, #15
 800ebc2:	e03d      	b.n	800ec40 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	61fb      	str	r3, [r7, #28]
 800ebc8:	e028      	b.n	800ec1c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800ebca:	69fb      	ldr	r3, [r7, #28]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d106      	bne.n	800ebde <pbuf_take+0x9e>
 800ebd0:	4b1d      	ldr	r3, [pc, #116]	; (800ec48 <pbuf_take+0x108>)
 800ebd2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ebd6:	4921      	ldr	r1, [pc, #132]	; (800ec5c <pbuf_take+0x11c>)
 800ebd8:	481d      	ldr	r0, [pc, #116]	; (800ec50 <pbuf_take+0x110>)
 800ebda:	f009 fd57 	bl	801868c <iprintf>
    buf_copy_len = total_copy_len;
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	895b      	ldrh	r3, [r3, #10]
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	69bb      	ldr	r3, [r7, #24]
 800ebea:	4293      	cmp	r3, r2
 800ebec:	d902      	bls.n	800ebf4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	895b      	ldrh	r3, [r3, #10]
 800ebf2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	6858      	ldr	r0, [r3, #4]
 800ebf8:	68ba      	ldr	r2, [r7, #8]
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	69ba      	ldr	r2, [r7, #24]
 800ec00:	4619      	mov	r1, r3
 800ec02:	f009 fc83 	bl	801850c <memcpy>
    total_copy_len -= buf_copy_len;
 800ec06:	697a      	ldr	r2, [r7, #20]
 800ec08:	69bb      	ldr	r3, [r7, #24]
 800ec0a:	1ad3      	subs	r3, r2, r3
 800ec0c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800ec0e:	693a      	ldr	r2, [r7, #16]
 800ec10:	69bb      	ldr	r3, [r7, #24]
 800ec12:	4413      	add	r3, r2
 800ec14:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800ec16:	69fb      	ldr	r3, [r7, #28]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	61fb      	str	r3, [r7, #28]
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d1d3      	bne.n	800ebca <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800ec22:	697b      	ldr	r3, [r7, #20]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d103      	bne.n	800ec30 <pbuf_take+0xf0>
 800ec28:	88fb      	ldrh	r3, [r7, #6]
 800ec2a:	693a      	ldr	r2, [r7, #16]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d006      	beq.n	800ec3e <pbuf_take+0xfe>
 800ec30:	4b05      	ldr	r3, [pc, #20]	; (800ec48 <pbuf_take+0x108>)
 800ec32:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800ec36:	490a      	ldr	r1, [pc, #40]	; (800ec60 <pbuf_take+0x120>)
 800ec38:	4805      	ldr	r0, [pc, #20]	; (800ec50 <pbuf_take+0x110>)
 800ec3a:	f009 fd27 	bl	801868c <iprintf>
  return ERR_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3720      	adds	r7, #32
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	0801abd4 	.word	0x0801abd4
 800ec4c:	0801afac 	.word	0x0801afac
 800ec50:	0801ac34 	.word	0x0801ac34
 800ec54:	0801afc4 	.word	0x0801afc4
 800ec58:	0801afe0 	.word	0x0801afe0
 800ec5c:	0801b000 	.word	0x0801b000
 800ec60:	0801b018 	.word	0x0801b018

0800ec64 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b088      	sub	sp, #32
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	4611      	mov	r1, r2
 800ec70:	461a      	mov	r2, r3
 800ec72:	460b      	mov	r3, r1
 800ec74:	80fb      	strh	r3, [r7, #6]
 800ec76:	4613      	mov	r3, r2
 800ec78:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800ec7a:	f107 0210 	add.w	r2, r7, #16
 800ec7e:	88bb      	ldrh	r3, [r7, #4]
 800ec80:	4619      	mov	r1, r3
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	f7ff ff49 	bl	800eb1a <pbuf_skip>
 800ec88:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800ec8a:	69fb      	ldr	r3, [r7, #28]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d047      	beq.n	800ed20 <pbuf_take_at+0xbc>
 800ec90:	69fb      	ldr	r3, [r7, #28]
 800ec92:	891b      	ldrh	r3, [r3, #8]
 800ec94:	461a      	mov	r2, r3
 800ec96:	8a3b      	ldrh	r3, [r7, #16]
 800ec98:	4619      	mov	r1, r3
 800ec9a:	88fb      	ldrh	r3, [r7, #6]
 800ec9c:	440b      	add	r3, r1
 800ec9e:	429a      	cmp	r2, r3
 800eca0:	db3e      	blt.n	800ed20 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800eca2:	88fb      	ldrh	r3, [r7, #6]
 800eca4:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	895a      	ldrh	r2, [r3, #10]
 800ecae:	8a3b      	ldrh	r3, [r7, #16]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d806      	bhi.n	800ecc2 <pbuf_take_at+0x5e>
 800ecb4:	4b1d      	ldr	r3, [pc, #116]	; (800ed2c <pbuf_take_at+0xc8>)
 800ecb6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800ecba:	491d      	ldr	r1, [pc, #116]	; (800ed30 <pbuf_take_at+0xcc>)
 800ecbc:	481d      	ldr	r0, [pc, #116]	; (800ed34 <pbuf_take_at+0xd0>)
 800ecbe:	f009 fce5 	bl	801868c <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	895b      	ldrh	r3, [r3, #10]
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	8a3b      	ldrh	r3, [r7, #16]
 800ecca:	1ad2      	subs	r2, r2, r3
 800eccc:	88fb      	ldrh	r3, [r7, #6]
 800ecce:	429a      	cmp	r2, r3
 800ecd0:	da05      	bge.n	800ecde <pbuf_take_at+0x7a>
 800ecd2:	69fb      	ldr	r3, [r7, #28]
 800ecd4:	895a      	ldrh	r2, [r3, #10]
 800ecd6:	8a3b      	ldrh	r3, [r7, #16]
 800ecd8:	1ad3      	subs	r3, r2, r3
 800ecda:	b29b      	uxth	r3, r3
 800ecdc:	e000      	b.n	800ece0 <pbuf_take_at+0x7c>
 800ecde:	88fb      	ldrh	r3, [r7, #6]
 800ece0:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800ece2:	69fb      	ldr	r3, [r7, #28]
 800ece4:	685b      	ldr	r3, [r3, #4]
 800ece6:	8a3a      	ldrh	r2, [r7, #16]
 800ece8:	4413      	add	r3, r2
 800ecea:	8a7a      	ldrh	r2, [r7, #18]
 800ecec:	68b9      	ldr	r1, [r7, #8]
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f009 fc0c 	bl	801850c <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800ecf4:	8b7a      	ldrh	r2, [r7, #26]
 800ecf6:	8a7b      	ldrh	r3, [r7, #18]
 800ecf8:	1ad3      	subs	r3, r2, r3
 800ecfa:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800ecfc:	8a7b      	ldrh	r3, [r7, #18]
 800ecfe:	697a      	ldr	r2, [r7, #20]
 800ed00:	4413      	add	r3, r2
 800ed02:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800ed04:	8b7b      	ldrh	r3, [r7, #26]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d008      	beq.n	800ed1c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	8b7a      	ldrh	r2, [r7, #26]
 800ed10:	6979      	ldr	r1, [r7, #20]
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7ff ff14 	bl	800eb40 <pbuf_take>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	e003      	b.n	800ed24 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	e001      	b.n	800ed24 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800ed20:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3720      	adds	r7, #32
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	0801abd4 	.word	0x0801abd4
 800ed30:	0801b030 	.word	0x0801b030
 800ed34:	0801ac34 	.word	0x0801ac34

0800ed38 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	4603      	mov	r3, r0
 800ed40:	603a      	str	r2, [r7, #0]
 800ed42:	71fb      	strb	r3, [r7, #7]
 800ed44:	460b      	mov	r3, r1
 800ed46:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	8919      	ldrh	r1, [r3, #8]
 800ed4c:	88ba      	ldrh	r2, [r7, #4]
 800ed4e:	79fb      	ldrb	r3, [r7, #7]
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7ff f92b 	bl	800dfac <pbuf_alloc>
 800ed56:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d101      	bne.n	800ed62 <pbuf_clone+0x2a>
    return NULL;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	e011      	b.n	800ed86 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ed62:	6839      	ldr	r1, [r7, #0]
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f7ff fd6b 	bl	800e840 <pbuf_copy>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ed6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d006      	beq.n	800ed84 <pbuf_clone+0x4c>
 800ed76:	4b06      	ldr	r3, [pc, #24]	; (800ed90 <pbuf_clone+0x58>)
 800ed78:	f240 5224 	movw	r2, #1316	; 0x524
 800ed7c:	4905      	ldr	r1, [pc, #20]	; (800ed94 <pbuf_clone+0x5c>)
 800ed7e:	4806      	ldr	r0, [pc, #24]	; (800ed98 <pbuf_clone+0x60>)
 800ed80:	f009 fc84 	bl	801868c <iprintf>
  return q;
 800ed84:	68fb      	ldr	r3, [r7, #12]
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3710      	adds	r7, #16
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
 800ed8e:	bf00      	nop
 800ed90:	0801abd4 	.word	0x0801abd4
 800ed94:	0801b048 	.word	0x0801b048
 800ed98:	0801ac34 	.word	0x0801ac34

0800ed9c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b084      	sub	sp, #16
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	460b      	mov	r3, r1
 800eda6:	807b      	strh	r3, [r7, #2]
 800eda8:	4613      	mov	r3, r2
 800edaa:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800edac:	f107 020a 	add.w	r2, r7, #10
 800edb0:	887b      	ldrh	r3, [r7, #2]
 800edb2:	4619      	mov	r1, r3
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f7ff feb0 	bl	800eb1a <pbuf_skip>
 800edba:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d00a      	beq.n	800edd8 <pbuf_put_at+0x3c>
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	895a      	ldrh	r2, [r3, #10]
 800edc6:	897b      	ldrh	r3, [r7, #10]
 800edc8:	429a      	cmp	r2, r3
 800edca:	d905      	bls.n	800edd8 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	897a      	ldrh	r2, [r7, #10]
 800edd2:	4413      	add	r3, r2
 800edd4:	787a      	ldrb	r2, [r7, #1]
 800edd6:	701a      	strb	r2, [r3, #0]
  }
}
 800edd8:	bf00      	nop
 800edda:	3710      	adds	r7, #16
 800eddc:	46bd      	mov	sp, r7
 800edde:	bd80      	pop	{r7, pc}

0800ede0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ede4:	f009 fc6a 	bl	80186bc <rand>
 800ede8:	4603      	mov	r3, r0
 800edea:	b29b      	uxth	r3, r3
 800edec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800edf6:	b29a      	uxth	r2, r3
 800edf8:	4b01      	ldr	r3, [pc, #4]	; (800ee00 <tcp_init+0x20>)
 800edfa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800edfc:	bf00      	nop
 800edfe:	bd80      	pop	{r7, pc}
 800ee00:	20000010 	.word	0x20000010

0800ee04 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	7d1b      	ldrb	r3, [r3, #20]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	d105      	bne.n	800ee20 <tcp_free+0x1c>
 800ee14:	4b06      	ldr	r3, [pc, #24]	; (800ee30 <tcp_free+0x2c>)
 800ee16:	22d4      	movs	r2, #212	; 0xd4
 800ee18:	4906      	ldr	r1, [pc, #24]	; (800ee34 <tcp_free+0x30>)
 800ee1a:	4807      	ldr	r0, [pc, #28]	; (800ee38 <tcp_free+0x34>)
 800ee1c:	f009 fc36 	bl	801868c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ee20:	6879      	ldr	r1, [r7, #4]
 800ee22:	2001      	movs	r0, #1
 800ee24:	f7fe fd02 	bl	800d82c <memp_free>
}
 800ee28:	bf00      	nop
 800ee2a:	3708      	adds	r7, #8
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	0801b0d4 	.word	0x0801b0d4
 800ee34:	0801b104 	.word	0x0801b104
 800ee38:	0801b118 	.word	0x0801b118

0800ee3c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ee3c:	b580      	push	{r7, lr}
 800ee3e:	b082      	sub	sp, #8
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	7d1b      	ldrb	r3, [r3, #20]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d105      	bne.n	800ee58 <tcp_free_listen+0x1c>
 800ee4c:	4b06      	ldr	r3, [pc, #24]	; (800ee68 <tcp_free_listen+0x2c>)
 800ee4e:	22df      	movs	r2, #223	; 0xdf
 800ee50:	4906      	ldr	r1, [pc, #24]	; (800ee6c <tcp_free_listen+0x30>)
 800ee52:	4807      	ldr	r0, [pc, #28]	; (800ee70 <tcp_free_listen+0x34>)
 800ee54:	f009 fc1a 	bl	801868c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ee58:	6879      	ldr	r1, [r7, #4]
 800ee5a:	2002      	movs	r0, #2
 800ee5c:	f7fe fce6 	bl	800d82c <memp_free>
}
 800ee60:	bf00      	nop
 800ee62:	3708      	adds	r7, #8
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	0801b0d4 	.word	0x0801b0d4
 800ee6c:	0801b140 	.word	0x0801b140
 800ee70:	0801b118 	.word	0x0801b118

0800ee74 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ee78:	f001 f8a6 	bl	800ffc8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ee7c:	4b07      	ldr	r3, [pc, #28]	; (800ee9c <tcp_tmr+0x28>)
 800ee7e:	781b      	ldrb	r3, [r3, #0]
 800ee80:	3301      	adds	r3, #1
 800ee82:	b2da      	uxtb	r2, r3
 800ee84:	4b05      	ldr	r3, [pc, #20]	; (800ee9c <tcp_tmr+0x28>)
 800ee86:	701a      	strb	r2, [r3, #0]
 800ee88:	4b04      	ldr	r3, [pc, #16]	; (800ee9c <tcp_tmr+0x28>)
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 0301 	and.w	r3, r3, #1
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d001      	beq.n	800ee98 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ee94:	f000 fd58 	bl	800f948 <tcp_slowtmr>
  }
}
 800ee98:	bf00      	nop
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	20004ed9 	.word	0x20004ed9

0800eea0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b084      	sub	sp, #16
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
 800eea8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d105      	bne.n	800eebc <tcp_remove_listener+0x1c>
 800eeb0:	4b0d      	ldr	r3, [pc, #52]	; (800eee8 <tcp_remove_listener+0x48>)
 800eeb2:	22ff      	movs	r2, #255	; 0xff
 800eeb4:	490d      	ldr	r1, [pc, #52]	; (800eeec <tcp_remove_listener+0x4c>)
 800eeb6:	480e      	ldr	r0, [pc, #56]	; (800eef0 <tcp_remove_listener+0x50>)
 800eeb8:	f009 fbe8 	bl	801868c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	60fb      	str	r3, [r7, #12]
 800eec0:	e00a      	b.n	800eed8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eec6:	683a      	ldr	r2, [r7, #0]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d102      	bne.n	800eed2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2200      	movs	r2, #0
 800eed0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	60fb      	str	r3, [r7, #12]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d1f1      	bne.n	800eec2 <tcp_remove_listener+0x22>
    }
  }
}
 800eede:	bf00      	nop
 800eee0:	bf00      	nop
 800eee2:	3710      	adds	r7, #16
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	0801b0d4 	.word	0x0801b0d4
 800eeec:	0801b15c 	.word	0x0801b15c
 800eef0:	0801b118 	.word	0x0801b118

0800eef4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b084      	sub	sp, #16
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d106      	bne.n	800ef10 <tcp_listen_closed+0x1c>
 800ef02:	4b14      	ldr	r3, [pc, #80]	; (800ef54 <tcp_listen_closed+0x60>)
 800ef04:	f240 1211 	movw	r2, #273	; 0x111
 800ef08:	4913      	ldr	r1, [pc, #76]	; (800ef58 <tcp_listen_closed+0x64>)
 800ef0a:	4814      	ldr	r0, [pc, #80]	; (800ef5c <tcp_listen_closed+0x68>)
 800ef0c:	f009 fbbe 	bl	801868c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	7d1b      	ldrb	r3, [r3, #20]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d006      	beq.n	800ef26 <tcp_listen_closed+0x32>
 800ef18:	4b0e      	ldr	r3, [pc, #56]	; (800ef54 <tcp_listen_closed+0x60>)
 800ef1a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ef1e:	4910      	ldr	r1, [pc, #64]	; (800ef60 <tcp_listen_closed+0x6c>)
 800ef20:	480e      	ldr	r0, [pc, #56]	; (800ef5c <tcp_listen_closed+0x68>)
 800ef22:	f009 fbb3 	bl	801868c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ef26:	2301      	movs	r3, #1
 800ef28:	60fb      	str	r3, [r7, #12]
 800ef2a:	e00b      	b.n	800ef44 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ef2c:	4a0d      	ldr	r2, [pc, #52]	; (800ef64 <tcp_listen_closed+0x70>)
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	6879      	ldr	r1, [r7, #4]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f7ff ffb1 	bl	800eea0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	3301      	adds	r3, #1
 800ef42:	60fb      	str	r3, [r7, #12]
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	2b03      	cmp	r3, #3
 800ef48:	d9f0      	bls.n	800ef2c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ef4a:	bf00      	nop
 800ef4c:	bf00      	nop
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	0801b0d4 	.word	0x0801b0d4
 800ef58:	0801b184 	.word	0x0801b184
 800ef5c:	0801b118 	.word	0x0801b118
 800ef60:	0801b190 	.word	0x0801b190
 800ef64:	0801d16c 	.word	0x0801d16c

0800ef68 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ef68:	b5b0      	push	{r4, r5, r7, lr}
 800ef6a:	b088      	sub	sp, #32
 800ef6c:	af04      	add	r7, sp, #16
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	460b      	mov	r3, r1
 800ef72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d106      	bne.n	800ef88 <tcp_close_shutdown+0x20>
 800ef7a:	4b63      	ldr	r3, [pc, #396]	; (800f108 <tcp_close_shutdown+0x1a0>)
 800ef7c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ef80:	4962      	ldr	r1, [pc, #392]	; (800f10c <tcp_close_shutdown+0x1a4>)
 800ef82:	4863      	ldr	r0, [pc, #396]	; (800f110 <tcp_close_shutdown+0x1a8>)
 800ef84:	f009 fb82 	bl	801868c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ef88:	78fb      	ldrb	r3, [r7, #3]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d066      	beq.n	800f05c <tcp_close_shutdown+0xf4>
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	7d1b      	ldrb	r3, [r3, #20]
 800ef92:	2b04      	cmp	r3, #4
 800ef94:	d003      	beq.n	800ef9e <tcp_close_shutdown+0x36>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	7d1b      	ldrb	r3, [r3, #20]
 800ef9a:	2b07      	cmp	r3, #7
 800ef9c:	d15e      	bne.n	800f05c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d104      	bne.n	800efb0 <tcp_close_shutdown+0x48>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800efaa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800efae:	d055      	beq.n	800f05c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	8b5b      	ldrh	r3, [r3, #26]
 800efb4:	f003 0310 	and.w	r3, r3, #16
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d106      	bne.n	800efca <tcp_close_shutdown+0x62>
 800efbc:	4b52      	ldr	r3, [pc, #328]	; (800f108 <tcp_close_shutdown+0x1a0>)
 800efbe:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800efc2:	4954      	ldr	r1, [pc, #336]	; (800f114 <tcp_close_shutdown+0x1ac>)
 800efc4:	4852      	ldr	r0, [pc, #328]	; (800f110 <tcp_close_shutdown+0x1a8>)
 800efc6:	f009 fb61 	bl	801868c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800efd2:	687d      	ldr	r5, [r7, #4]
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	3304      	adds	r3, #4
 800efd8:	687a      	ldr	r2, [r7, #4]
 800efda:	8ad2      	ldrh	r2, [r2, #22]
 800efdc:	6879      	ldr	r1, [r7, #4]
 800efde:	8b09      	ldrh	r1, [r1, #24]
 800efe0:	9102      	str	r1, [sp, #8]
 800efe2:	9201      	str	r2, [sp, #4]
 800efe4:	9300      	str	r3, [sp, #0]
 800efe6:	462b      	mov	r3, r5
 800efe8:	4622      	mov	r2, r4
 800efea:	4601      	mov	r1, r0
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f005 fdb7 	bl	8014b60 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f001 fb98 	bl	8010728 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800eff8:	4b47      	ldr	r3, [pc, #284]	; (800f118 <tcp_close_shutdown+0x1b0>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	429a      	cmp	r2, r3
 800f000:	d105      	bne.n	800f00e <tcp_close_shutdown+0xa6>
 800f002:	4b45      	ldr	r3, [pc, #276]	; (800f118 <tcp_close_shutdown+0x1b0>)
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	68db      	ldr	r3, [r3, #12]
 800f008:	4a43      	ldr	r2, [pc, #268]	; (800f118 <tcp_close_shutdown+0x1b0>)
 800f00a:	6013      	str	r3, [r2, #0]
 800f00c:	e013      	b.n	800f036 <tcp_close_shutdown+0xce>
 800f00e:	4b42      	ldr	r3, [pc, #264]	; (800f118 <tcp_close_shutdown+0x1b0>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	e00c      	b.n	800f030 <tcp_close_shutdown+0xc8>
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	68db      	ldr	r3, [r3, #12]
 800f01a:	687a      	ldr	r2, [r7, #4]
 800f01c:	429a      	cmp	r2, r3
 800f01e:	d104      	bne.n	800f02a <tcp_close_shutdown+0xc2>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	68da      	ldr	r2, [r3, #12]
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	60da      	str	r2, [r3, #12]
 800f028:	e005      	b.n	800f036 <tcp_close_shutdown+0xce>
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	60fb      	str	r3, [r7, #12]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d1ef      	bne.n	800f016 <tcp_close_shutdown+0xae>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2200      	movs	r2, #0
 800f03a:	60da      	str	r2, [r3, #12]
 800f03c:	4b37      	ldr	r3, [pc, #220]	; (800f11c <tcp_close_shutdown+0x1b4>)
 800f03e:	2201      	movs	r2, #1
 800f040:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f042:	4b37      	ldr	r3, [pc, #220]	; (800f120 <tcp_close_shutdown+0x1b8>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d102      	bne.n	800f052 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f04c:	f004 f82c 	bl	80130a8 <tcp_trigger_input_pcb_close>
 800f050:	e002      	b.n	800f058 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7ff fed6 	bl	800ee04 <tcp_free>
      }
      return ERR_OK;
 800f058:	2300      	movs	r3, #0
 800f05a:	e050      	b.n	800f0fe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	7d1b      	ldrb	r3, [r3, #20]
 800f060:	2b02      	cmp	r3, #2
 800f062:	d03b      	beq.n	800f0dc <tcp_close_shutdown+0x174>
 800f064:	2b02      	cmp	r3, #2
 800f066:	dc44      	bgt.n	800f0f2 <tcp_close_shutdown+0x18a>
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d002      	beq.n	800f072 <tcp_close_shutdown+0x10a>
 800f06c:	2b01      	cmp	r3, #1
 800f06e:	d02a      	beq.n	800f0c6 <tcp_close_shutdown+0x15e>
 800f070:	e03f      	b.n	800f0f2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	8adb      	ldrh	r3, [r3, #22]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d021      	beq.n	800f0be <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f07a:	4b2a      	ldr	r3, [pc, #168]	; (800f124 <tcp_close_shutdown+0x1bc>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	687a      	ldr	r2, [r7, #4]
 800f080:	429a      	cmp	r2, r3
 800f082:	d105      	bne.n	800f090 <tcp_close_shutdown+0x128>
 800f084:	4b27      	ldr	r3, [pc, #156]	; (800f124 <tcp_close_shutdown+0x1bc>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	68db      	ldr	r3, [r3, #12]
 800f08a:	4a26      	ldr	r2, [pc, #152]	; (800f124 <tcp_close_shutdown+0x1bc>)
 800f08c:	6013      	str	r3, [r2, #0]
 800f08e:	e013      	b.n	800f0b8 <tcp_close_shutdown+0x150>
 800f090:	4b24      	ldr	r3, [pc, #144]	; (800f124 <tcp_close_shutdown+0x1bc>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	60bb      	str	r3, [r7, #8]
 800f096:	e00c      	b.n	800f0b2 <tcp_close_shutdown+0x14a>
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	68db      	ldr	r3, [r3, #12]
 800f09c:	687a      	ldr	r2, [r7, #4]
 800f09e:	429a      	cmp	r2, r3
 800f0a0:	d104      	bne.n	800f0ac <tcp_close_shutdown+0x144>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	68da      	ldr	r2, [r3, #12]
 800f0a6:	68bb      	ldr	r3, [r7, #8]
 800f0a8:	60da      	str	r2, [r3, #12]
 800f0aa:	e005      	b.n	800f0b8 <tcp_close_shutdown+0x150>
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	68db      	ldr	r3, [r3, #12]
 800f0b0:	60bb      	str	r3, [r7, #8]
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d1ef      	bne.n	800f098 <tcp_close_shutdown+0x130>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7ff fea0 	bl	800ee04 <tcp_free>
      break;
 800f0c4:	e01a      	b.n	800f0fc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f7ff ff14 	bl	800eef4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f0cc:	6879      	ldr	r1, [r7, #4]
 800f0ce:	4816      	ldr	r0, [pc, #88]	; (800f128 <tcp_close_shutdown+0x1c0>)
 800f0d0:	f001 fb7a 	bl	80107c8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f7ff feb1 	bl	800ee3c <tcp_free_listen>
      break;
 800f0da:	e00f      	b.n	800f0fc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f0dc:	6879      	ldr	r1, [r7, #4]
 800f0de:	480e      	ldr	r0, [pc, #56]	; (800f118 <tcp_close_shutdown+0x1b0>)
 800f0e0:	f001 fb72 	bl	80107c8 <tcp_pcb_remove>
 800f0e4:	4b0d      	ldr	r3, [pc, #52]	; (800f11c <tcp_close_shutdown+0x1b4>)
 800f0e6:	2201      	movs	r2, #1
 800f0e8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f7ff fe8a 	bl	800ee04 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f0f0:	e004      	b.n	800f0fc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 f81a 	bl	800f12c <tcp_close_shutdown_fin>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	e000      	b.n	800f0fe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800f0fc:	2300      	movs	r3, #0
}
 800f0fe:	4618      	mov	r0, r3
 800f100:	3710      	adds	r7, #16
 800f102:	46bd      	mov	sp, r7
 800f104:	bdb0      	pop	{r4, r5, r7, pc}
 800f106:	bf00      	nop
 800f108:	0801b0d4 	.word	0x0801b0d4
 800f10c:	0801b1a8 	.word	0x0801b1a8
 800f110:	0801b118 	.word	0x0801b118
 800f114:	0801b1c8 	.word	0x0801b1c8
 800f118:	2000bd88 	.word	0x2000bd88
 800f11c:	2000bd84 	.word	0x2000bd84
 800f120:	2000bd9c 	.word	0x2000bd9c
 800f124:	2000bd94 	.word	0x2000bd94
 800f128:	2000bd90 	.word	0x2000bd90

0800f12c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d106      	bne.n	800f148 <tcp_close_shutdown_fin+0x1c>
 800f13a:	4b2e      	ldr	r3, [pc, #184]	; (800f1f4 <tcp_close_shutdown_fin+0xc8>)
 800f13c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f140:	492d      	ldr	r1, [pc, #180]	; (800f1f8 <tcp_close_shutdown_fin+0xcc>)
 800f142:	482e      	ldr	r0, [pc, #184]	; (800f1fc <tcp_close_shutdown_fin+0xd0>)
 800f144:	f009 faa2 	bl	801868c <iprintf>

  switch (pcb->state) {
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	7d1b      	ldrb	r3, [r3, #20]
 800f14c:	2b07      	cmp	r3, #7
 800f14e:	d020      	beq.n	800f192 <tcp_close_shutdown_fin+0x66>
 800f150:	2b07      	cmp	r3, #7
 800f152:	dc2b      	bgt.n	800f1ac <tcp_close_shutdown_fin+0x80>
 800f154:	2b03      	cmp	r3, #3
 800f156:	d002      	beq.n	800f15e <tcp_close_shutdown_fin+0x32>
 800f158:	2b04      	cmp	r3, #4
 800f15a:	d00d      	beq.n	800f178 <tcp_close_shutdown_fin+0x4c>
 800f15c:	e026      	b.n	800f1ac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f004 fe0c 	bl	8013d7c <tcp_send_fin>
 800f164:	4603      	mov	r3, r0
 800f166:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d11f      	bne.n	800f1b0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2205      	movs	r2, #5
 800f174:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f176:	e01b      	b.n	800f1b0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f004 fdff 	bl	8013d7c <tcp_send_fin>
 800f17e:	4603      	mov	r3, r0
 800f180:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d114      	bne.n	800f1b4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2205      	movs	r2, #5
 800f18e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f190:	e010      	b.n	800f1b4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f004 fdf2 	bl	8013d7c <tcp_send_fin>
 800f198:	4603      	mov	r3, r0
 800f19a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f19c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d109      	bne.n	800f1b8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2209      	movs	r2, #9
 800f1a8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f1aa:	e005      	b.n	800f1b8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f1ac:	2300      	movs	r3, #0
 800f1ae:	e01c      	b.n	800f1ea <tcp_close_shutdown_fin+0xbe>
      break;
 800f1b0:	bf00      	nop
 800f1b2:	e002      	b.n	800f1ba <tcp_close_shutdown_fin+0x8e>
      break;
 800f1b4:	bf00      	nop
 800f1b6:	e000      	b.n	800f1ba <tcp_close_shutdown_fin+0x8e>
      break;
 800f1b8:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d103      	bne.n	800f1ca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f004 ff18 	bl	8013ff8 <tcp_output>
 800f1c8:	e00d      	b.n	800f1e6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f1ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f1ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1d2:	d108      	bne.n	800f1e6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	8b5b      	ldrh	r3, [r3, #26]
 800f1d8:	f043 0308 	orr.w	r3, r3, #8
 800f1dc:	b29a      	uxth	r2, r3
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f1e2:	2300      	movs	r3, #0
 800f1e4:	e001      	b.n	800f1ea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f1e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3710      	adds	r7, #16
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	0801b0d4 	.word	0x0801b0d4
 800f1f8:	0801b184 	.word	0x0801b184
 800f1fc:	0801b118 	.word	0x0801b118

0800f200 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f200:	b580      	push	{r7, lr}
 800f202:	b082      	sub	sp, #8
 800f204:	af00      	add	r7, sp, #0
 800f206:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d109      	bne.n	800f222 <tcp_close+0x22>
 800f20e:	4b0f      	ldr	r3, [pc, #60]	; (800f24c <tcp_close+0x4c>)
 800f210:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f214:	490e      	ldr	r1, [pc, #56]	; (800f250 <tcp_close+0x50>)
 800f216:	480f      	ldr	r0, [pc, #60]	; (800f254 <tcp_close+0x54>)
 800f218:	f009 fa38 	bl	801868c <iprintf>
 800f21c:	f06f 030f 	mvn.w	r3, #15
 800f220:	e00f      	b.n	800f242 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	7d1b      	ldrb	r3, [r3, #20]
 800f226:	2b01      	cmp	r3, #1
 800f228:	d006      	beq.n	800f238 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	8b5b      	ldrh	r3, [r3, #26]
 800f22e:	f043 0310 	orr.w	r3, r3, #16
 800f232:	b29a      	uxth	r2, r3
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f238:	2101      	movs	r1, #1
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f7ff fe94 	bl	800ef68 <tcp_close_shutdown>
 800f240:	4603      	mov	r3, r0
}
 800f242:	4618      	mov	r0, r3
 800f244:	3708      	adds	r7, #8
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}
 800f24a:	bf00      	nop
 800f24c:	0801b0d4 	.word	0x0801b0d4
 800f250:	0801b1e4 	.word	0x0801b1e4
 800f254:	0801b118 	.word	0x0801b118

0800f258 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b084      	sub	sp, #16
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	60f8      	str	r0, [r7, #12]
 800f260:	60b9      	str	r1, [r7, #8]
 800f262:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d109      	bne.n	800f27e <tcp_shutdown+0x26>
 800f26a:	4b26      	ldr	r3, [pc, #152]	; (800f304 <tcp_shutdown+0xac>)
 800f26c:	f240 2207 	movw	r2, #519	; 0x207
 800f270:	4925      	ldr	r1, [pc, #148]	; (800f308 <tcp_shutdown+0xb0>)
 800f272:	4826      	ldr	r0, [pc, #152]	; (800f30c <tcp_shutdown+0xb4>)
 800f274:	f009 fa0a 	bl	801868c <iprintf>
 800f278:	f06f 030f 	mvn.w	r3, #15
 800f27c:	e03d      	b.n	800f2fa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	7d1b      	ldrb	r3, [r3, #20]
 800f282:	2b01      	cmp	r3, #1
 800f284:	d102      	bne.n	800f28c <tcp_shutdown+0x34>
    return ERR_CONN;
 800f286:	f06f 030a 	mvn.w	r3, #10
 800f28a:	e036      	b.n	800f2fa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d01b      	beq.n	800f2ca <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	8b5b      	ldrh	r3, [r3, #26]
 800f296:	f043 0310 	orr.w	r3, r3, #16
 800f29a:	b29a      	uxth	r2, r3
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d005      	beq.n	800f2b2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f2a6:	2101      	movs	r1, #1
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f7ff fe5d 	bl	800ef68 <tcp_close_shutdown>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	e023      	b.n	800f2fa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d007      	beq.n	800f2ca <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7ff f98a 	bl	800e5d8 <pbuf_free>
      pcb->refused_data = NULL;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d013      	beq.n	800f2f8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	7d1b      	ldrb	r3, [r3, #20]
 800f2d4:	2b04      	cmp	r3, #4
 800f2d6:	dc02      	bgt.n	800f2de <tcp_shutdown+0x86>
 800f2d8:	2b03      	cmp	r3, #3
 800f2da:	da02      	bge.n	800f2e2 <tcp_shutdown+0x8a>
 800f2dc:	e009      	b.n	800f2f2 <tcp_shutdown+0x9a>
 800f2de:	2b07      	cmp	r3, #7
 800f2e0:	d107      	bne.n	800f2f2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	4619      	mov	r1, r3
 800f2e8:	68f8      	ldr	r0, [r7, #12]
 800f2ea:	f7ff fe3d 	bl	800ef68 <tcp_close_shutdown>
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	e003      	b.n	800f2fa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f2f2:	f06f 030a 	mvn.w	r3, #10
 800f2f6:	e000      	b.n	800f2fa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f2f8:	2300      	movs	r3, #0
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	0801b0d4 	.word	0x0801b0d4
 800f308:	0801b1fc 	.word	0x0801b1fc
 800f30c:	0801b118 	.word	0x0801b118

0800f310 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b08e      	sub	sp, #56	; 0x38
 800f314:	af04      	add	r7, sp, #16
 800f316:	6078      	str	r0, [r7, #4]
 800f318:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d107      	bne.n	800f330 <tcp_abandon+0x20>
 800f320:	4b52      	ldr	r3, [pc, #328]	; (800f46c <tcp_abandon+0x15c>)
 800f322:	f240 223d 	movw	r2, #573	; 0x23d
 800f326:	4952      	ldr	r1, [pc, #328]	; (800f470 <tcp_abandon+0x160>)
 800f328:	4852      	ldr	r0, [pc, #328]	; (800f474 <tcp_abandon+0x164>)
 800f32a:	f009 f9af 	bl	801868c <iprintf>
 800f32e:	e099      	b.n	800f464 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	7d1b      	ldrb	r3, [r3, #20]
 800f334:	2b01      	cmp	r3, #1
 800f336:	d106      	bne.n	800f346 <tcp_abandon+0x36>
 800f338:	4b4c      	ldr	r3, [pc, #304]	; (800f46c <tcp_abandon+0x15c>)
 800f33a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f33e:	494e      	ldr	r1, [pc, #312]	; (800f478 <tcp_abandon+0x168>)
 800f340:	484c      	ldr	r0, [pc, #304]	; (800f474 <tcp_abandon+0x164>)
 800f342:	f009 f9a3 	bl	801868c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	7d1b      	ldrb	r3, [r3, #20]
 800f34a:	2b0a      	cmp	r3, #10
 800f34c:	d107      	bne.n	800f35e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f34e:	6879      	ldr	r1, [r7, #4]
 800f350:	484a      	ldr	r0, [pc, #296]	; (800f47c <tcp_abandon+0x16c>)
 800f352:	f001 fa39 	bl	80107c8 <tcp_pcb_remove>
    tcp_free(pcb);
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7ff fd54 	bl	800ee04 <tcp_free>
 800f35c:	e082      	b.n	800f464 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800f35e:	2300      	movs	r3, #0
 800f360:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f362:	2300      	movs	r3, #0
 800f364:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f36a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f370:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f378:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	691b      	ldr	r3, [r3, #16]
 800f37e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	7d1b      	ldrb	r3, [r3, #20]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d126      	bne.n	800f3d6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	8adb      	ldrh	r3, [r3, #22]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d02e      	beq.n	800f3ee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f390:	4b3b      	ldr	r3, [pc, #236]	; (800f480 <tcp_abandon+0x170>)
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	429a      	cmp	r2, r3
 800f398:	d105      	bne.n	800f3a6 <tcp_abandon+0x96>
 800f39a:	4b39      	ldr	r3, [pc, #228]	; (800f480 <tcp_abandon+0x170>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	68db      	ldr	r3, [r3, #12]
 800f3a0:	4a37      	ldr	r2, [pc, #220]	; (800f480 <tcp_abandon+0x170>)
 800f3a2:	6013      	str	r3, [r2, #0]
 800f3a4:	e013      	b.n	800f3ce <tcp_abandon+0xbe>
 800f3a6:	4b36      	ldr	r3, [pc, #216]	; (800f480 <tcp_abandon+0x170>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	61fb      	str	r3, [r7, #28]
 800f3ac:	e00c      	b.n	800f3c8 <tcp_abandon+0xb8>
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	429a      	cmp	r2, r3
 800f3b6:	d104      	bne.n	800f3c2 <tcp_abandon+0xb2>
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	68da      	ldr	r2, [r3, #12]
 800f3bc:	69fb      	ldr	r3, [r7, #28]
 800f3be:	60da      	str	r2, [r3, #12]
 800f3c0:	e005      	b.n	800f3ce <tcp_abandon+0xbe>
 800f3c2:	69fb      	ldr	r3, [r7, #28]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	61fb      	str	r3, [r7, #28]
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d1ef      	bne.n	800f3ae <tcp_abandon+0x9e>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	60da      	str	r2, [r3, #12]
 800f3d4:	e00b      	b.n	800f3ee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	8adb      	ldrh	r3, [r3, #22]
 800f3de:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f3e0:	6879      	ldr	r1, [r7, #4]
 800f3e2:	4828      	ldr	r0, [pc, #160]	; (800f484 <tcp_abandon+0x174>)
 800f3e4:	f001 f9f0 	bl	80107c8 <tcp_pcb_remove>
 800f3e8:	4b27      	ldr	r3, [pc, #156]	; (800f488 <tcp_abandon+0x178>)
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d004      	beq.n	800f400 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f000 fec4 	bl	8010188 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f404:	2b00      	cmp	r3, #0
 800f406:	d004      	beq.n	800f412 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f40c:	4618      	mov	r0, r3
 800f40e:	f000 febb 	bl	8010188 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f416:	2b00      	cmp	r3, #0
 800f418:	d004      	beq.n	800f424 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f41e:	4618      	mov	r0, r3
 800f420:	f000 feb2 	bl	8010188 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f426:	2b00      	cmp	r3, #0
 800f428:	d00e      	beq.n	800f448 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f42a:	6879      	ldr	r1, [r7, #4]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	3304      	adds	r3, #4
 800f430:	687a      	ldr	r2, [r7, #4]
 800f432:	8b12      	ldrh	r2, [r2, #24]
 800f434:	9202      	str	r2, [sp, #8]
 800f436:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f438:	9201      	str	r2, [sp, #4]
 800f43a:	9300      	str	r3, [sp, #0]
 800f43c:	460b      	mov	r3, r1
 800f43e:	697a      	ldr	r2, [r7, #20]
 800f440:	69b9      	ldr	r1, [r7, #24]
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f005 fb8c 	bl	8014b60 <tcp_rst>
    }
    last_state = pcb->state;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	7d1b      	ldrb	r3, [r3, #20]
 800f44c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f7ff fcd8 	bl	800ee04 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d004      	beq.n	800f464 <tcp_abandon+0x154>
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	f06f 010c 	mvn.w	r1, #12
 800f460:	68f8      	ldr	r0, [r7, #12]
 800f462:	4798      	blx	r3
  }
}
 800f464:	3728      	adds	r7, #40	; 0x28
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}
 800f46a:	bf00      	nop
 800f46c:	0801b0d4 	.word	0x0801b0d4
 800f470:	0801b218 	.word	0x0801b218
 800f474:	0801b118 	.word	0x0801b118
 800f478:	0801b234 	.word	0x0801b234
 800f47c:	2000bd98 	.word	0x2000bd98
 800f480:	2000bd94 	.word	0x2000bd94
 800f484:	2000bd88 	.word	0x2000bd88
 800f488:	2000bd84 	.word	0x2000bd84

0800f48c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f494:	2101      	movs	r1, #1
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7ff ff3a 	bl	800f310 <tcp_abandon>
}
 800f49c:	bf00      	nop
 800f49e:	3708      	adds	r7, #8
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b088      	sub	sp, #32
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	60f8      	str	r0, [r7, #12]
 800f4ac:	60b9      	str	r1, [r7, #8]
 800f4ae:	4613      	mov	r3, r2
 800f4b0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f4b2:	2304      	movs	r3, #4
 800f4b4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d101      	bne.n	800f4c0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f4bc:	4b3e      	ldr	r3, [pc, #248]	; (800f5b8 <tcp_bind+0x114>)
 800f4be:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d109      	bne.n	800f4da <tcp_bind+0x36>
 800f4c6:	4b3d      	ldr	r3, [pc, #244]	; (800f5bc <tcp_bind+0x118>)
 800f4c8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f4cc:	493c      	ldr	r1, [pc, #240]	; (800f5c0 <tcp_bind+0x11c>)
 800f4ce:	483d      	ldr	r0, [pc, #244]	; (800f5c4 <tcp_bind+0x120>)
 800f4d0:	f009 f8dc 	bl	801868c <iprintf>
 800f4d4:	f06f 030f 	mvn.w	r3, #15
 800f4d8:	e06a      	b.n	800f5b0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	7d1b      	ldrb	r3, [r3, #20]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d009      	beq.n	800f4f6 <tcp_bind+0x52>
 800f4e2:	4b36      	ldr	r3, [pc, #216]	; (800f5bc <tcp_bind+0x118>)
 800f4e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f4e8:	4937      	ldr	r1, [pc, #220]	; (800f5c8 <tcp_bind+0x124>)
 800f4ea:	4836      	ldr	r0, [pc, #216]	; (800f5c4 <tcp_bind+0x120>)
 800f4ec:	f009 f8ce 	bl	801868c <iprintf>
 800f4f0:	f06f 0305 	mvn.w	r3, #5
 800f4f4:	e05c      	b.n	800f5b0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f4f6:	88fb      	ldrh	r3, [r7, #6]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d109      	bne.n	800f510 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f4fc:	f000 f9de 	bl	800f8bc <tcp_new_port>
 800f500:	4603      	mov	r3, r0
 800f502:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f504:	88fb      	ldrh	r3, [r7, #6]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d135      	bne.n	800f576 <tcp_bind+0xd2>
      return ERR_BUF;
 800f50a:	f06f 0301 	mvn.w	r3, #1
 800f50e:	e04f      	b.n	800f5b0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f510:	2300      	movs	r3, #0
 800f512:	61fb      	str	r3, [r7, #28]
 800f514:	e02b      	b.n	800f56e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f516:	4a2d      	ldr	r2, [pc, #180]	; (800f5cc <tcp_bind+0x128>)
 800f518:	69fb      	ldr	r3, [r7, #28]
 800f51a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	61bb      	str	r3, [r7, #24]
 800f522:	e01e      	b.n	800f562 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f524:	69bb      	ldr	r3, [r7, #24]
 800f526:	8adb      	ldrh	r3, [r3, #22]
 800f528:	88fa      	ldrh	r2, [r7, #6]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d116      	bne.n	800f55c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f52e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f530:	2b00      	cmp	r3, #0
 800f532:	d010      	beq.n	800f556 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00c      	beq.n	800f556 <tcp_bind+0xb2>
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d009      	beq.n	800f556 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d005      	beq.n	800f556 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	681a      	ldr	r2, [r3, #0]
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f552:	429a      	cmp	r2, r3
 800f554:	d102      	bne.n	800f55c <tcp_bind+0xb8>
              return ERR_USE;
 800f556:	f06f 0307 	mvn.w	r3, #7
 800f55a:	e029      	b.n	800f5b0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f55c:	69bb      	ldr	r3, [r7, #24]
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	61bb      	str	r3, [r7, #24]
 800f562:	69bb      	ldr	r3, [r7, #24]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d1dd      	bne.n	800f524 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	3301      	adds	r3, #1
 800f56c:	61fb      	str	r3, [r7, #28]
 800f56e:	69fa      	ldr	r2, [r7, #28]
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	429a      	cmp	r2, r3
 800f574:	dbcf      	blt.n	800f516 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800f576:	68bb      	ldr	r3, [r7, #8]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d00c      	beq.n	800f596 <tcp_bind+0xf2>
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d008      	beq.n	800f596 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d002      	beq.n	800f590 <tcp_bind+0xec>
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	e000      	b.n	800f592 <tcp_bind+0xee>
 800f590:	2300      	movs	r3, #0
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	88fa      	ldrh	r2, [r7, #6]
 800f59a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800f59c:	4b0c      	ldr	r3, [pc, #48]	; (800f5d0 <tcp_bind+0x12c>)
 800f59e:	681a      	ldr	r2, [r3, #0]
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	60da      	str	r2, [r3, #12]
 800f5a4:	4a0a      	ldr	r2, [pc, #40]	; (800f5d0 <tcp_bind+0x12c>)
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	6013      	str	r3, [r2, #0]
 800f5aa:	f005 fc9b 	bl	8014ee4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3720      	adds	r7, #32
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	0801d19c 	.word	0x0801d19c
 800f5bc:	0801b0d4 	.word	0x0801b0d4
 800f5c0:	0801b268 	.word	0x0801b268
 800f5c4:	0801b118 	.word	0x0801b118
 800f5c8:	0801b280 	.word	0x0801b280
 800f5cc:	0801d16c 	.word	0x0801d16c
 800f5d0:	2000bd94 	.word	0x2000bd94

0800f5d4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b084      	sub	sp, #16
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	60b9      	str	r1, [r7, #8]
 800f5de:	4613      	mov	r3, r2
 800f5e0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800f5e2:	68bb      	ldr	r3, [r7, #8]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d106      	bne.n	800f5f6 <tcp_accept_null+0x22>
 800f5e8:	4b07      	ldr	r3, [pc, #28]	; (800f608 <tcp_accept_null+0x34>)
 800f5ea:	f240 320f 	movw	r2, #783	; 0x30f
 800f5ee:	4907      	ldr	r1, [pc, #28]	; (800f60c <tcp_accept_null+0x38>)
 800f5f0:	4807      	ldr	r0, [pc, #28]	; (800f610 <tcp_accept_null+0x3c>)
 800f5f2:	f009 f84b 	bl	801868c <iprintf>

  tcp_abort(pcb);
 800f5f6:	68b8      	ldr	r0, [r7, #8]
 800f5f8:	f7ff ff48 	bl	800f48c <tcp_abort>

  return ERR_ABRT;
 800f5fc:	f06f 030c 	mvn.w	r3, #12
}
 800f600:	4618      	mov	r0, r3
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	0801b0d4 	.word	0x0801b0d4
 800f60c:	0801b2a8 	.word	0x0801b2a8
 800f610:	0801b118 	.word	0x0801b118

0800f614 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b088      	sub	sp, #32
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	460b      	mov	r3, r1
 800f61e:	607a      	str	r2, [r7, #4]
 800f620:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800f622:	2300      	movs	r3, #0
 800f624:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d109      	bne.n	800f640 <tcp_listen_with_backlog_and_err+0x2c>
 800f62c:	4b47      	ldr	r3, [pc, #284]	; (800f74c <tcp_listen_with_backlog_and_err+0x138>)
 800f62e:	f240 3259 	movw	r2, #857	; 0x359
 800f632:	4947      	ldr	r1, [pc, #284]	; (800f750 <tcp_listen_with_backlog_and_err+0x13c>)
 800f634:	4847      	ldr	r0, [pc, #284]	; (800f754 <tcp_listen_with_backlog_and_err+0x140>)
 800f636:	f009 f829 	bl	801868c <iprintf>
 800f63a:	23f0      	movs	r3, #240	; 0xf0
 800f63c:	76fb      	strb	r3, [r7, #27]
 800f63e:	e079      	b.n	800f734 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	7d1b      	ldrb	r3, [r3, #20]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d009      	beq.n	800f65c <tcp_listen_with_backlog_and_err+0x48>
 800f648:	4b40      	ldr	r3, [pc, #256]	; (800f74c <tcp_listen_with_backlog_and_err+0x138>)
 800f64a:	f240 325a 	movw	r2, #858	; 0x35a
 800f64e:	4942      	ldr	r1, [pc, #264]	; (800f758 <tcp_listen_with_backlog_and_err+0x144>)
 800f650:	4840      	ldr	r0, [pc, #256]	; (800f754 <tcp_listen_with_backlog_and_err+0x140>)
 800f652:	f009 f81b 	bl	801868c <iprintf>
 800f656:	23f1      	movs	r3, #241	; 0xf1
 800f658:	76fb      	strb	r3, [r7, #27]
 800f65a:	e06b      	b.n	800f734 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	7d1b      	ldrb	r3, [r3, #20]
 800f660:	2b01      	cmp	r3, #1
 800f662:	d104      	bne.n	800f66e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800f668:	23f7      	movs	r3, #247	; 0xf7
 800f66a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f66c:	e062      	b.n	800f734 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800f66e:	2002      	movs	r0, #2
 800f670:	f7fe f88a 	bl	800d788 <memp_malloc>
 800f674:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800f676:	69fb      	ldr	r3, [r7, #28]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d102      	bne.n	800f682 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800f67c:	23ff      	movs	r3, #255	; 0xff
 800f67e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800f680:	e058      	b.n	800f734 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	691a      	ldr	r2, [r3, #16]
 800f686:	69fb      	ldr	r3, [r7, #28]
 800f688:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	8ada      	ldrh	r2, [r3, #22]
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800f692:	69fb      	ldr	r3, [r7, #28]
 800f694:	2201      	movs	r2, #1
 800f696:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	7d5a      	ldrb	r2, [r3, #21]
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	7a5a      	ldrb	r2, [r3, #9]
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	7ada      	ldrb	r2, [r3, #11]
 800f6b2:	69fb      	ldr	r3, [r7, #28]
 800f6b4:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	7a9a      	ldrb	r2, [r3, #10]
 800f6ba:	69fb      	ldr	r3, [r7, #28]
 800f6bc:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	69fb      	ldr	r3, [r7, #28]
 800f6c4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	8adb      	ldrh	r3, [r3, #22]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d021      	beq.n	800f712 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800f6ce:	4b23      	ldr	r3, [pc, #140]	; (800f75c <tcp_listen_with_backlog_and_err+0x148>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	68fa      	ldr	r2, [r7, #12]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d105      	bne.n	800f6e4 <tcp_listen_with_backlog_and_err+0xd0>
 800f6d8:	4b20      	ldr	r3, [pc, #128]	; (800f75c <tcp_listen_with_backlog_and_err+0x148>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	68db      	ldr	r3, [r3, #12]
 800f6de:	4a1f      	ldr	r2, [pc, #124]	; (800f75c <tcp_listen_with_backlog_and_err+0x148>)
 800f6e0:	6013      	str	r3, [r2, #0]
 800f6e2:	e013      	b.n	800f70c <tcp_listen_with_backlog_and_err+0xf8>
 800f6e4:	4b1d      	ldr	r3, [pc, #116]	; (800f75c <tcp_listen_with_backlog_and_err+0x148>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	617b      	str	r3, [r7, #20]
 800f6ea:	e00c      	b.n	800f706 <tcp_listen_with_backlog_and_err+0xf2>
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	68db      	ldr	r3, [r3, #12]
 800f6f0:	68fa      	ldr	r2, [r7, #12]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d104      	bne.n	800f700 <tcp_listen_with_backlog_and_err+0xec>
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	68da      	ldr	r2, [r3, #12]
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	60da      	str	r2, [r3, #12]
 800f6fe:	e005      	b.n	800f70c <tcp_listen_with_backlog_and_err+0xf8>
 800f700:	697b      	ldr	r3, [r7, #20]
 800f702:	68db      	ldr	r3, [r3, #12]
 800f704:	617b      	str	r3, [r7, #20]
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d1ef      	bne.n	800f6ec <tcp_listen_with_backlog_and_err+0xd8>
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	2200      	movs	r2, #0
 800f710:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f7ff fb76 	bl	800ee04 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	4a11      	ldr	r2, [pc, #68]	; (800f760 <tcp_listen_with_backlog_and_err+0x14c>)
 800f71c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800f71e:	4b11      	ldr	r3, [pc, #68]	; (800f764 <tcp_listen_with_backlog_and_err+0x150>)
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	60da      	str	r2, [r3, #12]
 800f726:	4a0f      	ldr	r2, [pc, #60]	; (800f764 <tcp_listen_with_backlog_and_err+0x150>)
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	6013      	str	r3, [r2, #0]
 800f72c:	f005 fbda 	bl	8014ee4 <tcp_timer_needed>
  res = ERR_OK;
 800f730:	2300      	movs	r3, #0
 800f732:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d002      	beq.n	800f740 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	7efa      	ldrb	r2, [r7, #27]
 800f73e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800f740:	69fb      	ldr	r3, [r7, #28]
}
 800f742:	4618      	mov	r0, r3
 800f744:	3720      	adds	r7, #32
 800f746:	46bd      	mov	sp, r7
 800f748:	bd80      	pop	{r7, pc}
 800f74a:	bf00      	nop
 800f74c:	0801b0d4 	.word	0x0801b0d4
 800f750:	0801b2c8 	.word	0x0801b2c8
 800f754:	0801b118 	.word	0x0801b118
 800f758:	0801b2f8 	.word	0x0801b2f8
 800f75c:	2000bd94 	.word	0x2000bd94
 800f760:	0800f5d5 	.word	0x0800f5d5
 800f764:	2000bd90 	.word	0x2000bd90

0800f768 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800f768:	b580      	push	{r7, lr}
 800f76a:	b084      	sub	sp, #16
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d106      	bne.n	800f784 <tcp_update_rcv_ann_wnd+0x1c>
 800f776:	4b25      	ldr	r3, [pc, #148]	; (800f80c <tcp_update_rcv_ann_wnd+0xa4>)
 800f778:	f240 32a6 	movw	r2, #934	; 0x3a6
 800f77c:	4924      	ldr	r1, [pc, #144]	; (800f810 <tcp_update_rcv_ann_wnd+0xa8>)
 800f77e:	4825      	ldr	r0, [pc, #148]	; (800f814 <tcp_update_rcv_ann_wnd+0xac>)
 800f780:	f008 ff84 	bl	801868c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f788:	687a      	ldr	r2, [r7, #4]
 800f78a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800f78c:	4413      	add	r3, r2
 800f78e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800f798:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800f79c:	bf28      	it	cs
 800f79e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800f7a2:	b292      	uxth	r2, r2
 800f7a4:	4413      	add	r3, r2
 800f7a6:	68fa      	ldr	r2, [r7, #12]
 800f7a8:	1ad3      	subs	r3, r2, r3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	db08      	blt.n	800f7c0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ba:	68fa      	ldr	r2, [r7, #12]
 800f7bc:	1ad3      	subs	r3, r2, r3
 800f7be:	e020      	b.n	800f802 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7c8:	1ad3      	subs	r3, r2, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	dd03      	ble.n	800f7d6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f7d4:	e014      	b.n	800f800 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7de:	1ad3      	subs	r3, r2, r3
 800f7e0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7e8:	d306      	bcc.n	800f7f8 <tcp_update_rcv_ann_wnd+0x90>
 800f7ea:	4b08      	ldr	r3, [pc, #32]	; (800f80c <tcp_update_rcv_ann_wnd+0xa4>)
 800f7ec:	f240 32b6 	movw	r2, #950	; 0x3b6
 800f7f0:	4909      	ldr	r1, [pc, #36]	; (800f818 <tcp_update_rcv_ann_wnd+0xb0>)
 800f7f2:	4808      	ldr	r0, [pc, #32]	; (800f814 <tcp_update_rcv_ann_wnd+0xac>)
 800f7f4:	f008 ff4a 	bl	801868c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800f7f8:	68bb      	ldr	r3, [r7, #8]
 800f7fa:	b29a      	uxth	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800f800:	2300      	movs	r3, #0
  }
}
 800f802:	4618      	mov	r0, r3
 800f804:	3710      	adds	r7, #16
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
 800f80a:	bf00      	nop
 800f80c:	0801b0d4 	.word	0x0801b0d4
 800f810:	0801b330 	.word	0x0801b330
 800f814:	0801b118 	.word	0x0801b118
 800f818:	0801b354 	.word	0x0801b354

0800f81c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	460b      	mov	r3, r1
 800f826:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d107      	bne.n	800f83e <tcp_recved+0x22>
 800f82e:	4b1f      	ldr	r3, [pc, #124]	; (800f8ac <tcp_recved+0x90>)
 800f830:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f834:	491e      	ldr	r1, [pc, #120]	; (800f8b0 <tcp_recved+0x94>)
 800f836:	481f      	ldr	r0, [pc, #124]	; (800f8b4 <tcp_recved+0x98>)
 800f838:	f008 ff28 	bl	801868c <iprintf>
 800f83c:	e032      	b.n	800f8a4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	7d1b      	ldrb	r3, [r3, #20]
 800f842:	2b01      	cmp	r3, #1
 800f844:	d106      	bne.n	800f854 <tcp_recved+0x38>
 800f846:	4b19      	ldr	r3, [pc, #100]	; (800f8ac <tcp_recved+0x90>)
 800f848:	f240 32d2 	movw	r2, #978	; 0x3d2
 800f84c:	491a      	ldr	r1, [pc, #104]	; (800f8b8 <tcp_recved+0x9c>)
 800f84e:	4819      	ldr	r0, [pc, #100]	; (800f8b4 <tcp_recved+0x98>)
 800f850:	f008 ff1c 	bl	801868c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f858:	887b      	ldrh	r3, [r7, #2]
 800f85a:	4413      	add	r3, r2
 800f85c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800f85e:	89fb      	ldrh	r3, [r7, #14]
 800f860:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f864:	d804      	bhi.n	800f870 <tcp_recved+0x54>
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f86a:	89fa      	ldrh	r2, [r7, #14]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	d204      	bcs.n	800f87a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f876:	851a      	strh	r2, [r3, #40]	; 0x28
 800f878:	e002      	b.n	800f880 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	89fa      	ldrh	r2, [r7, #14]
 800f87e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f7ff ff71 	bl	800f768 <tcp_update_rcv_ann_wnd>
 800f886:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f88e:	d309      	bcc.n	800f8a4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	8b5b      	ldrh	r3, [r3, #26]
 800f894:	f043 0302 	orr.w	r3, r3, #2
 800f898:	b29a      	uxth	r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f004 fbaa 	bl	8013ff8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800f8a4:	3710      	adds	r7, #16
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
 800f8aa:	bf00      	nop
 800f8ac:	0801b0d4 	.word	0x0801b0d4
 800f8b0:	0801b370 	.word	0x0801b370
 800f8b4:	0801b118 	.word	0x0801b118
 800f8b8:	0801b388 	.word	0x0801b388

0800f8bc <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800f8bc:	b480      	push	{r7}
 800f8be:	b083      	sub	sp, #12
 800f8c0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800f8c6:	4b1e      	ldr	r3, [pc, #120]	; (800f940 <tcp_new_port+0x84>)
 800f8c8:	881b      	ldrh	r3, [r3, #0]
 800f8ca:	3301      	adds	r3, #1
 800f8cc:	b29a      	uxth	r2, r3
 800f8ce:	4b1c      	ldr	r3, [pc, #112]	; (800f940 <tcp_new_port+0x84>)
 800f8d0:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800f8d2:	4b1b      	ldr	r3, [pc, #108]	; (800f940 <tcp_new_port+0x84>)
 800f8d4:	881b      	ldrh	r3, [r3, #0]
 800f8d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d103      	bne.n	800f8e6 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800f8de:	4b18      	ldr	r3, [pc, #96]	; (800f940 <tcp_new_port+0x84>)
 800f8e0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f8e4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	71fb      	strb	r3, [r7, #7]
 800f8ea:	e01e      	b.n	800f92a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f8ec:	79fb      	ldrb	r3, [r7, #7]
 800f8ee:	4a15      	ldr	r2, [pc, #84]	; (800f944 <tcp_new_port+0x88>)
 800f8f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	603b      	str	r3, [r7, #0]
 800f8f8:	e011      	b.n	800f91e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	8ada      	ldrh	r2, [r3, #22]
 800f8fe:	4b10      	ldr	r3, [pc, #64]	; (800f940 <tcp_new_port+0x84>)
 800f900:	881b      	ldrh	r3, [r3, #0]
 800f902:	429a      	cmp	r2, r3
 800f904:	d108      	bne.n	800f918 <tcp_new_port+0x5c>
        n++;
 800f906:	88bb      	ldrh	r3, [r7, #4]
 800f908:	3301      	adds	r3, #1
 800f90a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800f90c:	88bb      	ldrh	r3, [r7, #4]
 800f90e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f912:	d3d8      	bcc.n	800f8c6 <tcp_new_port+0xa>
          return 0;
 800f914:	2300      	movs	r3, #0
 800f916:	e00d      	b.n	800f934 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	603b      	str	r3, [r7, #0]
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d1ea      	bne.n	800f8fa <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800f924:	79fb      	ldrb	r3, [r7, #7]
 800f926:	3301      	adds	r3, #1
 800f928:	71fb      	strb	r3, [r7, #7]
 800f92a:	79fb      	ldrb	r3, [r7, #7]
 800f92c:	2b03      	cmp	r3, #3
 800f92e:	d9dd      	bls.n	800f8ec <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800f930:	4b03      	ldr	r3, [pc, #12]	; (800f940 <tcp_new_port+0x84>)
 800f932:	881b      	ldrh	r3, [r3, #0]
}
 800f934:	4618      	mov	r0, r3
 800f936:	370c      	adds	r7, #12
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr
 800f940:	20000010 	.word	0x20000010
 800f944:	0801d16c 	.word	0x0801d16c

0800f948 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800f948:	b5b0      	push	{r4, r5, r7, lr}
 800f94a:	b090      	sub	sp, #64	; 0x40
 800f94c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800f94e:	2300      	movs	r3, #0
 800f950:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800f954:	4b94      	ldr	r3, [pc, #592]	; (800fba8 <tcp_slowtmr+0x260>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	3301      	adds	r3, #1
 800f95a:	4a93      	ldr	r2, [pc, #588]	; (800fba8 <tcp_slowtmr+0x260>)
 800f95c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800f95e:	4b93      	ldr	r3, [pc, #588]	; (800fbac <tcp_slowtmr+0x264>)
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	3301      	adds	r3, #1
 800f964:	b2da      	uxtb	r2, r3
 800f966:	4b91      	ldr	r3, [pc, #580]	; (800fbac <tcp_slowtmr+0x264>)
 800f968:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800f96a:	2300      	movs	r3, #0
 800f96c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800f96e:	4b90      	ldr	r3, [pc, #576]	; (800fbb0 <tcp_slowtmr+0x268>)
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800f974:	e29f      	b.n	800feb6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800f976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f978:	7d1b      	ldrb	r3, [r3, #20]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d106      	bne.n	800f98c <tcp_slowtmr+0x44>
 800f97e:	4b8d      	ldr	r3, [pc, #564]	; (800fbb4 <tcp_slowtmr+0x26c>)
 800f980:	f240 42be 	movw	r2, #1214	; 0x4be
 800f984:	498c      	ldr	r1, [pc, #560]	; (800fbb8 <tcp_slowtmr+0x270>)
 800f986:	488d      	ldr	r0, [pc, #564]	; (800fbbc <tcp_slowtmr+0x274>)
 800f988:	f008 fe80 	bl	801868c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800f98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f98e:	7d1b      	ldrb	r3, [r3, #20]
 800f990:	2b01      	cmp	r3, #1
 800f992:	d106      	bne.n	800f9a2 <tcp_slowtmr+0x5a>
 800f994:	4b87      	ldr	r3, [pc, #540]	; (800fbb4 <tcp_slowtmr+0x26c>)
 800f996:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800f99a:	4989      	ldr	r1, [pc, #548]	; (800fbc0 <tcp_slowtmr+0x278>)
 800f99c:	4887      	ldr	r0, [pc, #540]	; (800fbbc <tcp_slowtmr+0x274>)
 800f99e:	f008 fe75 	bl	801868c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800f9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9a4:	7d1b      	ldrb	r3, [r3, #20]
 800f9a6:	2b0a      	cmp	r3, #10
 800f9a8:	d106      	bne.n	800f9b8 <tcp_slowtmr+0x70>
 800f9aa:	4b82      	ldr	r3, [pc, #520]	; (800fbb4 <tcp_slowtmr+0x26c>)
 800f9ac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800f9b0:	4984      	ldr	r1, [pc, #528]	; (800fbc4 <tcp_slowtmr+0x27c>)
 800f9b2:	4882      	ldr	r0, [pc, #520]	; (800fbbc <tcp_slowtmr+0x274>)
 800f9b4:	f008 fe6a 	bl	801868c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800f9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ba:	7f9a      	ldrb	r2, [r3, #30]
 800f9bc:	4b7b      	ldr	r3, [pc, #492]	; (800fbac <tcp_slowtmr+0x264>)
 800f9be:	781b      	ldrb	r3, [r3, #0]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d105      	bne.n	800f9d0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800f9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800f9ce:	e272      	b.n	800feb6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800f9d0:	4b76      	ldr	r3, [pc, #472]	; (800fbac <tcp_slowtmr+0x264>)
 800f9d2:	781a      	ldrb	r2, [r3, #0]
 800f9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800f9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9e6:	7d1b      	ldrb	r3, [r3, #20]
 800f9e8:	2b02      	cmp	r3, #2
 800f9ea:	d10a      	bne.n	800fa02 <tcp_slowtmr+0xba>
 800f9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f9f2:	2b05      	cmp	r3, #5
 800f9f4:	d905      	bls.n	800fa02 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800f9f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa00:	e11e      	b.n	800fc40 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800fa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fa08:	2b0b      	cmp	r3, #11
 800fa0a:	d905      	bls.n	800fa18 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800fa0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa10:	3301      	adds	r3, #1
 800fa12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa16:	e113      	b.n	800fc40 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800fa18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa1a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d075      	beq.n	800fb0e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800fa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d006      	beq.n	800fa38 <tcp_slowtmr+0xf0>
 800fa2a:	4b62      	ldr	r3, [pc, #392]	; (800fbb4 <tcp_slowtmr+0x26c>)
 800fa2c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800fa30:	4965      	ldr	r1, [pc, #404]	; (800fbc8 <tcp_slowtmr+0x280>)
 800fa32:	4862      	ldr	r0, [pc, #392]	; (800fbbc <tcp_slowtmr+0x274>)
 800fa34:	f008 fe2a 	bl	801868c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800fa38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d106      	bne.n	800fa4e <tcp_slowtmr+0x106>
 800fa40:	4b5c      	ldr	r3, [pc, #368]	; (800fbb4 <tcp_slowtmr+0x26c>)
 800fa42:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800fa46:	4961      	ldr	r1, [pc, #388]	; (800fbcc <tcp_slowtmr+0x284>)
 800fa48:	485c      	ldr	r0, [pc, #368]	; (800fbbc <tcp_slowtmr+0x274>)
 800fa4a:	f008 fe1f 	bl	801868c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800fa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa50:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fa54:	2b0b      	cmp	r3, #11
 800fa56:	d905      	bls.n	800fa64 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800fa58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa5c:	3301      	adds	r3, #1
 800fa5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fa62:	e0ed      	b.n	800fc40 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800fa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa66:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	4a58      	ldr	r2, [pc, #352]	; (800fbd0 <tcp_slowtmr+0x288>)
 800fa6e:	5cd3      	ldrb	r3, [r2, r3]
 800fa70:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800fa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa74:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fa78:	7c7a      	ldrb	r2, [r7, #17]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d907      	bls.n	800fa8e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800fa7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa80:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fa84:	3301      	adds	r3, #1
 800fa86:	b2da      	uxtb	r2, r3
 800fa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800fa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa90:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800fa94:	7c7a      	ldrb	r2, [r7, #17]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	f200 80d2 	bhi.w	800fc40 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800faa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d108      	bne.n	800fabc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800faaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800faac:	f005 f94c 	bl	8014d48 <tcp_zero_window_probe>
 800fab0:	4603      	mov	r3, r0
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d014      	beq.n	800fae0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800fab6:	2300      	movs	r3, #0
 800fab8:	623b      	str	r3, [r7, #32]
 800faba:	e011      	b.n	800fae0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800fabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fabe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fac2:	4619      	mov	r1, r3
 800fac4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fac6:	f004 f811 	bl	8013aec <tcp_split_unsent_seg>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d107      	bne.n	800fae0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800fad0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fad2:	f004 fa91 	bl	8013ff8 <tcp_output>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d101      	bne.n	800fae0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800fadc:	2300      	movs	r3, #0
 800fade:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800fae0:	6a3b      	ldr	r3, [r7, #32]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f000 80ac 	beq.w	800fc40 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	2200      	movs	r2, #0
 800faec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800faf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800faf6:	2b06      	cmp	r3, #6
 800faf8:	f200 80a2 	bhi.w	800fc40 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fb02:	3301      	adds	r3, #1
 800fb04:	b2da      	uxtb	r2, r3
 800fb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb08:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800fb0c:	e098      	b.n	800fc40 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800fb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb10:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	db0f      	blt.n	800fb38 <tcp_slowtmr+0x1f0>
 800fb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb1e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fb22:	4293      	cmp	r3, r2
 800fb24:	d008      	beq.n	800fb38 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800fb26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	3301      	adds	r3, #1
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	b21a      	sxth	r2, r3
 800fb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb36:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800fb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb40:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fb44:	429a      	cmp	r2, r3
 800fb46:	db7b      	blt.n	800fc40 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800fb48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb4a:	f004 fd47 	bl	80145dc <tcp_rexmit_rto_prepare>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d007      	beq.n	800fb64 <tcp_slowtmr+0x21c>
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d171      	bne.n	800fc40 <tcp_slowtmr+0x2f8>
 800fb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d06d      	beq.n	800fc40 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800fb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb66:	7d1b      	ldrb	r3, [r3, #20]
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d03a      	beq.n	800fbe2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800fb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fb72:	2b0c      	cmp	r3, #12
 800fb74:	bf28      	it	cs
 800fb76:	230c      	movcs	r3, #12
 800fb78:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800fb7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fb80:	10db      	asrs	r3, r3, #3
 800fb82:	b21b      	sxth	r3, r3
 800fb84:	461a      	mov	r2, r3
 800fb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb88:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fb8c:	4413      	add	r3, r2
 800fb8e:	7efa      	ldrb	r2, [r7, #27]
 800fb90:	4910      	ldr	r1, [pc, #64]	; (800fbd4 <tcp_slowtmr+0x28c>)
 800fb92:	5c8a      	ldrb	r2, [r1, r2]
 800fb94:	4093      	lsls	r3, r2
 800fb96:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	dc1a      	bgt.n	800fbd8 <tcp_slowtmr+0x290>
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	b21a      	sxth	r2, r3
 800fba6:	e019      	b.n	800fbdc <tcp_slowtmr+0x294>
 800fba8:	2000bd8c 	.word	0x2000bd8c
 800fbac:	20004eda 	.word	0x20004eda
 800fbb0:	2000bd88 	.word	0x2000bd88
 800fbb4:	0801b0d4 	.word	0x0801b0d4
 800fbb8:	0801b418 	.word	0x0801b418
 800fbbc:	0801b118 	.word	0x0801b118
 800fbc0:	0801b444 	.word	0x0801b444
 800fbc4:	0801b470 	.word	0x0801b470
 800fbc8:	0801b4a0 	.word	0x0801b4a0
 800fbcc:	0801b4d4 	.word	0x0801b4d4
 800fbd0:	0801d164 	.word	0x0801d164
 800fbd4:	0801d154 	.word	0x0801d154
 800fbd8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800fbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800fbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe4:	2200      	movs	r2, #0
 800fbe6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800fbe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbf0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	bf28      	it	cs
 800fbf8:	4613      	movcs	r3, r2
 800fbfa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800fbfc:	8a7b      	ldrh	r3, [r7, #18]
 800fbfe:	085b      	lsrs	r3, r3, #1
 800fc00:	b29a      	uxth	r2, r3
 800fc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800fc08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc12:	005b      	lsls	r3, r3, #1
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d206      	bcs.n	800fc28 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800fc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc1e:	005b      	lsls	r3, r3, #1
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc24:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800fc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800fc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc34:	2200      	movs	r2, #0
 800fc36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800fc3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fc3c:	f004 fd3e 	bl	80146bc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800fc40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc42:	7d1b      	ldrb	r3, [r3, #20]
 800fc44:	2b06      	cmp	r3, #6
 800fc46:	d111      	bne.n	800fc6c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800fc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc4a:	8b5b      	ldrh	r3, [r3, #26]
 800fc4c:	f003 0310 	and.w	r3, r3, #16
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d00b      	beq.n	800fc6c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc54:	4b9d      	ldr	r3, [pc, #628]	; (800fecc <tcp_slowtmr+0x584>)
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5a:	6a1b      	ldr	r3, [r3, #32]
 800fc5c:	1ad3      	subs	r3, r2, r3
 800fc5e:	2b28      	cmp	r3, #40	; 0x28
 800fc60:	d904      	bls.n	800fc6c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800fc62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc66:	3301      	adds	r3, #1
 800fc68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fc6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc6e:	7a5b      	ldrb	r3, [r3, #9]
 800fc70:	f003 0308 	and.w	r3, r3, #8
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d04c      	beq.n	800fd12 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800fc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc7a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800fc7c:	2b04      	cmp	r3, #4
 800fc7e:	d003      	beq.n	800fc88 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800fc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc82:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800fc84:	2b07      	cmp	r3, #7
 800fc86:	d144      	bne.n	800fd12 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fc88:	4b90      	ldr	r3, [pc, #576]	; (800fecc <tcp_slowtmr+0x584>)
 800fc8a:	681a      	ldr	r2, [r3, #0]
 800fc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8e:	6a1b      	ldr	r3, [r3, #32]
 800fc90:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800fc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fc98:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800fc9c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800fca0:	498b      	ldr	r1, [pc, #556]	; (800fed0 <tcp_slowtmr+0x588>)
 800fca2:	fba1 1303 	umull	r1, r3, r1, r3
 800fca6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fca8:	429a      	cmp	r2, r3
 800fcaa:	d90a      	bls.n	800fcc2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800fcac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcb0:	3301      	adds	r3, #1
 800fcb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800fcb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcba:	3301      	adds	r3, #1
 800fcbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fcc0:	e027      	b.n	800fd12 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcc2:	4b82      	ldr	r3, [pc, #520]	; (800fecc <tcp_slowtmr+0x584>)
 800fcc4:	681a      	ldr	r2, [r3, #0]
 800fcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc8:	6a1b      	ldr	r3, [r3, #32]
 800fcca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800fccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcce:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800fcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fcd8:	4618      	mov	r0, r3
 800fcda:	4b7e      	ldr	r3, [pc, #504]	; (800fed4 <tcp_slowtmr+0x58c>)
 800fcdc:	fb03 f300 	mul.w	r3, r3, r0
 800fce0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800fce2:	497b      	ldr	r1, [pc, #492]	; (800fed0 <tcp_slowtmr+0x588>)
 800fce4:	fba1 1303 	umull	r1, r3, r1, r3
 800fce8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d911      	bls.n	800fd12 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800fcee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fcf0:	f004 ffea 	bl	8014cc8 <tcp_keepalive>
 800fcf4:	4603      	mov	r3, r0
 800fcf6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800fcfa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d107      	bne.n	800fd12 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800fd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd04:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800fd08:	3301      	adds	r3, #1
 800fd0a:	b2da      	uxtb	r2, r3
 800fd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800fd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d011      	beq.n	800fd3e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800fd1a:	4b6c      	ldr	r3, [pc, #432]	; (800fecc <tcp_slowtmr+0x584>)
 800fd1c:	681a      	ldr	r2, [r3, #0]
 800fd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd20:	6a1b      	ldr	r3, [r3, #32]
 800fd22:	1ad2      	subs	r2, r2, r3
 800fd24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd26:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	460b      	mov	r3, r1
 800fd2e:	005b      	lsls	r3, r3, #1
 800fd30:	440b      	add	r3, r1
 800fd32:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d302      	bcc.n	800fd3e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800fd38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd3a:	f000 fea9 	bl	8010a90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800fd3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd40:	7d1b      	ldrb	r3, [r3, #20]
 800fd42:	2b03      	cmp	r3, #3
 800fd44:	d10b      	bne.n	800fd5e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800fd46:	4b61      	ldr	r3, [pc, #388]	; (800fecc <tcp_slowtmr+0x584>)
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd4c:	6a1b      	ldr	r3, [r3, #32]
 800fd4e:	1ad3      	subs	r3, r2, r3
 800fd50:	2b28      	cmp	r3, #40	; 0x28
 800fd52:	d904      	bls.n	800fd5e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800fd54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd58:	3301      	adds	r3, #1
 800fd5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800fd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd60:	7d1b      	ldrb	r3, [r3, #20]
 800fd62:	2b09      	cmp	r3, #9
 800fd64:	d10b      	bne.n	800fd7e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800fd66:	4b59      	ldr	r3, [pc, #356]	; (800fecc <tcp_slowtmr+0x584>)
 800fd68:	681a      	ldr	r2, [r3, #0]
 800fd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd6c:	6a1b      	ldr	r3, [r3, #32]
 800fd6e:	1ad3      	subs	r3, r2, r3
 800fd70:	2bf0      	cmp	r3, #240	; 0xf0
 800fd72:	d904      	bls.n	800fd7e <tcp_slowtmr+0x436>
        ++pcb_remove;
 800fd74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd78:	3301      	adds	r3, #1
 800fd7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800fd7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d060      	beq.n	800fe48 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800fd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd8c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800fd8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fd90:	f000 fcca 	bl	8010728 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800fd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d010      	beq.n	800fdbc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800fd9a:	4b4f      	ldr	r3, [pc, #316]	; (800fed8 <tcp_slowtmr+0x590>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d106      	bne.n	800fdb2 <tcp_slowtmr+0x46a>
 800fda4:	4b4d      	ldr	r3, [pc, #308]	; (800fedc <tcp_slowtmr+0x594>)
 800fda6:	f240 526d 	movw	r2, #1389	; 0x56d
 800fdaa:	494d      	ldr	r1, [pc, #308]	; (800fee0 <tcp_slowtmr+0x598>)
 800fdac:	484d      	ldr	r0, [pc, #308]	; (800fee4 <tcp_slowtmr+0x59c>)
 800fdae:	f008 fc6d 	bl	801868c <iprintf>
        prev->next = pcb->next;
 800fdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb4:	68da      	ldr	r2, [r3, #12]
 800fdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdb8:	60da      	str	r2, [r3, #12]
 800fdba:	e00f      	b.n	800fddc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800fdbc:	4b46      	ldr	r3, [pc, #280]	; (800fed8 <tcp_slowtmr+0x590>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdc2:	429a      	cmp	r2, r3
 800fdc4:	d006      	beq.n	800fdd4 <tcp_slowtmr+0x48c>
 800fdc6:	4b45      	ldr	r3, [pc, #276]	; (800fedc <tcp_slowtmr+0x594>)
 800fdc8:	f240 5271 	movw	r2, #1393	; 0x571
 800fdcc:	4946      	ldr	r1, [pc, #280]	; (800fee8 <tcp_slowtmr+0x5a0>)
 800fdce:	4845      	ldr	r0, [pc, #276]	; (800fee4 <tcp_slowtmr+0x59c>)
 800fdd0:	f008 fc5c 	bl	801868c <iprintf>
        tcp_active_pcbs = pcb->next;
 800fdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdd6:	68db      	ldr	r3, [r3, #12]
 800fdd8:	4a3f      	ldr	r2, [pc, #252]	; (800fed8 <tcp_slowtmr+0x590>)
 800fdda:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800fddc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d013      	beq.n	800fe0c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800fde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800fde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800fdec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800fdee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdf0:	3304      	adds	r3, #4
 800fdf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fdf4:	8ad2      	ldrh	r2, [r2, #22]
 800fdf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fdf8:	8b09      	ldrh	r1, [r1, #24]
 800fdfa:	9102      	str	r1, [sp, #8]
 800fdfc:	9201      	str	r2, [sp, #4]
 800fdfe:	9300      	str	r3, [sp, #0]
 800fe00:	462b      	mov	r3, r5
 800fe02:	4622      	mov	r2, r4
 800fe04:	4601      	mov	r1, r0
 800fe06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe08:	f004 feaa 	bl	8014b60 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800fe0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe0e:	691b      	ldr	r3, [r3, #16]
 800fe10:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800fe12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe14:	7d1b      	ldrb	r3, [r3, #20]
 800fe16:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800fe18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800fe1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe1e:	68db      	ldr	r3, [r3, #12]
 800fe20:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800fe22:	6838      	ldr	r0, [r7, #0]
 800fe24:	f7fe ffee 	bl	800ee04 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800fe28:	4b30      	ldr	r3, [pc, #192]	; (800feec <tcp_slowtmr+0x5a4>)
 800fe2a:	2200      	movs	r2, #0
 800fe2c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d004      	beq.n	800fe3e <tcp_slowtmr+0x4f6>
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f06f 010c 	mvn.w	r1, #12
 800fe3a:	68b8      	ldr	r0, [r7, #8]
 800fe3c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800fe3e:	4b2b      	ldr	r3, [pc, #172]	; (800feec <tcp_slowtmr+0x5a4>)
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d037      	beq.n	800feb6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800fe46:	e590      	b.n	800f96a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800fe48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800fe4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe4e:	68db      	ldr	r3, [r3, #12]
 800fe50:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800fe52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe54:	7f1b      	ldrb	r3, [r3, #28]
 800fe56:	3301      	adds	r3, #1
 800fe58:	b2da      	uxtb	r2, r3
 800fe5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe5c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800fe5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe60:	7f1a      	ldrb	r2, [r3, #28]
 800fe62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe64:	7f5b      	ldrb	r3, [r3, #29]
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d325      	bcc.n	800feb6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800fe6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800fe70:	4b1e      	ldr	r3, [pc, #120]	; (800feec <tcp_slowtmr+0x5a4>)
 800fe72:	2200      	movs	r2, #0
 800fe74:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800fe76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00b      	beq.n	800fe98 <tcp_slowtmr+0x550>
 800fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fe88:	6912      	ldr	r2, [r2, #16]
 800fe8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe8c:	4610      	mov	r0, r2
 800fe8e:	4798      	blx	r3
 800fe90:	4603      	mov	r3, r0
 800fe92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800fe96:	e002      	b.n	800fe9e <tcp_slowtmr+0x556>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800fe9e:	4b13      	ldr	r3, [pc, #76]	; (800feec <tcp_slowtmr+0x5a4>)
 800fea0:	781b      	ldrb	r3, [r3, #0]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d000      	beq.n	800fea8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800fea6:	e560      	b.n	800f96a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800fea8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800feac:	2b00      	cmp	r3, #0
 800feae:	d102      	bne.n	800feb6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800feb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feb2:	f004 f8a1 	bl	8013ff8 <tcp_output>
  while (pcb != NULL) {
 800feb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800feb8:	2b00      	cmp	r3, #0
 800feba:	f47f ad5c 	bne.w	800f976 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800febe:	2300      	movs	r3, #0
 800fec0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800fec2:	4b0b      	ldr	r3, [pc, #44]	; (800fef0 <tcp_slowtmr+0x5a8>)
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800fec8:	e067      	b.n	800ff9a <tcp_slowtmr+0x652>
 800feca:	bf00      	nop
 800fecc:	2000bd8c 	.word	0x2000bd8c
 800fed0:	10624dd3 	.word	0x10624dd3
 800fed4:	000124f8 	.word	0x000124f8
 800fed8:	2000bd88 	.word	0x2000bd88
 800fedc:	0801b0d4 	.word	0x0801b0d4
 800fee0:	0801b50c 	.word	0x0801b50c
 800fee4:	0801b118 	.word	0x0801b118
 800fee8:	0801b538 	.word	0x0801b538
 800feec:	2000bd84 	.word	0x2000bd84
 800fef0:	2000bd98 	.word	0x2000bd98
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fef6:	7d1b      	ldrb	r3, [r3, #20]
 800fef8:	2b0a      	cmp	r3, #10
 800fefa:	d006      	beq.n	800ff0a <tcp_slowtmr+0x5c2>
 800fefc:	4b2b      	ldr	r3, [pc, #172]	; (800ffac <tcp_slowtmr+0x664>)
 800fefe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ff02:	492b      	ldr	r1, [pc, #172]	; (800ffb0 <tcp_slowtmr+0x668>)
 800ff04:	482b      	ldr	r0, [pc, #172]	; (800ffb4 <tcp_slowtmr+0x66c>)
 800ff06:	f008 fbc1 	bl	801868c <iprintf>
    pcb_remove = 0;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ff10:	4b29      	ldr	r3, [pc, #164]	; (800ffb8 <tcp_slowtmr+0x670>)
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff16:	6a1b      	ldr	r3, [r3, #32]
 800ff18:	1ad3      	subs	r3, r2, r3
 800ff1a:	2bf0      	cmp	r3, #240	; 0xf0
 800ff1c:	d904      	bls.n	800ff28 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800ff1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff22:	3301      	adds	r3, #1
 800ff24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ff28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d02f      	beq.n	800ff90 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800ff30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff32:	f000 fbf9 	bl	8010728 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800ff36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d010      	beq.n	800ff5e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ff3c:	4b1f      	ldr	r3, [pc, #124]	; (800ffbc <tcp_slowtmr+0x674>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d106      	bne.n	800ff54 <tcp_slowtmr+0x60c>
 800ff46:	4b19      	ldr	r3, [pc, #100]	; (800ffac <tcp_slowtmr+0x664>)
 800ff48:	f240 52af 	movw	r2, #1455	; 0x5af
 800ff4c:	491c      	ldr	r1, [pc, #112]	; (800ffc0 <tcp_slowtmr+0x678>)
 800ff4e:	4819      	ldr	r0, [pc, #100]	; (800ffb4 <tcp_slowtmr+0x66c>)
 800ff50:	f008 fb9c 	bl	801868c <iprintf>
        prev->next = pcb->next;
 800ff54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff56:	68da      	ldr	r2, [r3, #12]
 800ff58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff5a:	60da      	str	r2, [r3, #12]
 800ff5c:	e00f      	b.n	800ff7e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ff5e:	4b17      	ldr	r3, [pc, #92]	; (800ffbc <tcp_slowtmr+0x674>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d006      	beq.n	800ff76 <tcp_slowtmr+0x62e>
 800ff68:	4b10      	ldr	r3, [pc, #64]	; (800ffac <tcp_slowtmr+0x664>)
 800ff6a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ff6e:	4915      	ldr	r1, [pc, #84]	; (800ffc4 <tcp_slowtmr+0x67c>)
 800ff70:	4810      	ldr	r0, [pc, #64]	; (800ffb4 <tcp_slowtmr+0x66c>)
 800ff72:	f008 fb8b 	bl	801868c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ff76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff78:	68db      	ldr	r3, [r3, #12]
 800ff7a:	4a10      	ldr	r2, [pc, #64]	; (800ffbc <tcp_slowtmr+0x674>)
 800ff7c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ff7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff80:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ff82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff84:	68db      	ldr	r3, [r3, #12]
 800ff86:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ff88:	69f8      	ldr	r0, [r7, #28]
 800ff8a:	f7fe ff3b 	bl	800ee04 <tcp_free>
 800ff8e:	e004      	b.n	800ff9a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ff90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff92:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ff94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff96:	68db      	ldr	r3, [r3, #12]
 800ff98:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ff9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d1a9      	bne.n	800fef4 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ffa0:	bf00      	nop
 800ffa2:	bf00      	nop
 800ffa4:	3730      	adds	r7, #48	; 0x30
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bdb0      	pop	{r4, r5, r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	0801b0d4 	.word	0x0801b0d4
 800ffb0:	0801b564 	.word	0x0801b564
 800ffb4:	0801b118 	.word	0x0801b118
 800ffb8:	2000bd8c 	.word	0x2000bd8c
 800ffbc:	2000bd98 	.word	0x2000bd98
 800ffc0:	0801b594 	.word	0x0801b594
 800ffc4:	0801b5bc 	.word	0x0801b5bc

0800ffc8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b082      	sub	sp, #8
 800ffcc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ffce:	4b2d      	ldr	r3, [pc, #180]	; (8010084 <tcp_fasttmr+0xbc>)
 800ffd0:	781b      	ldrb	r3, [r3, #0]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	b2da      	uxtb	r2, r3
 800ffd6:	4b2b      	ldr	r3, [pc, #172]	; (8010084 <tcp_fasttmr+0xbc>)
 800ffd8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ffda:	4b2b      	ldr	r3, [pc, #172]	; (8010088 <tcp_fasttmr+0xc0>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ffe0:	e048      	b.n	8010074 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	7f9a      	ldrb	r2, [r3, #30]
 800ffe6:	4b27      	ldr	r3, [pc, #156]	; (8010084 <tcp_fasttmr+0xbc>)
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d03f      	beq.n	801006e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ffee:	4b25      	ldr	r3, [pc, #148]	; (8010084 <tcp_fasttmr+0xbc>)
 800fff0:	781a      	ldrb	r2, [r3, #0]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	8b5b      	ldrh	r3, [r3, #26]
 800fffa:	f003 0301 	and.w	r3, r3, #1
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d010      	beq.n	8010024 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	8b5b      	ldrh	r3, [r3, #26]
 8010006:	f043 0302 	orr.w	r3, r3, #2
 801000a:	b29a      	uxth	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f003 fff1 	bl	8013ff8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	8b5b      	ldrh	r3, [r3, #26]
 801001a:	f023 0303 	bic.w	r3, r3, #3
 801001e:	b29a      	uxth	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	8b5b      	ldrh	r3, [r3, #26]
 8010028:	f003 0308 	and.w	r3, r3, #8
 801002c:	2b00      	cmp	r3, #0
 801002e:	d009      	beq.n	8010044 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	8b5b      	ldrh	r3, [r3, #26]
 8010034:	f023 0308 	bic.w	r3, r3, #8
 8010038:	b29a      	uxth	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f7ff f874 	bl	800f12c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00a      	beq.n	8010068 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8010052:	4b0e      	ldr	r3, [pc, #56]	; (801008c <tcp_fasttmr+0xc4>)
 8010054:	2200      	movs	r2, #0
 8010056:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 f819 	bl	8010090 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801005e:	4b0b      	ldr	r3, [pc, #44]	; (801008c <tcp_fasttmr+0xc4>)
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d000      	beq.n	8010068 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010066:	e7b8      	b.n	800ffda <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010068:	683b      	ldr	r3, [r7, #0]
 801006a:	607b      	str	r3, [r7, #4]
 801006c:	e002      	b.n	8010074 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	68db      	ldr	r3, [r3, #12]
 8010072:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d1b3      	bne.n	800ffe2 <tcp_fasttmr+0x1a>
    }
  }
}
 801007a:	bf00      	nop
 801007c:	bf00      	nop
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	20004eda 	.word	0x20004eda
 8010088:	2000bd88 	.word	0x2000bd88
 801008c:	2000bd84 	.word	0x2000bd84

08010090 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8010090:	b590      	push	{r4, r7, lr}
 8010092:	b085      	sub	sp, #20
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d109      	bne.n	80100b2 <tcp_process_refused_data+0x22>
 801009e:	4b37      	ldr	r3, [pc, #220]	; (801017c <tcp_process_refused_data+0xec>)
 80100a0:	f240 6209 	movw	r2, #1545	; 0x609
 80100a4:	4936      	ldr	r1, [pc, #216]	; (8010180 <tcp_process_refused_data+0xf0>)
 80100a6:	4837      	ldr	r0, [pc, #220]	; (8010184 <tcp_process_refused_data+0xf4>)
 80100a8:	f008 faf0 	bl	801868c <iprintf>
 80100ac:	f06f 030f 	mvn.w	r3, #15
 80100b0:	e060      	b.n	8010174 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100b6:	7b5b      	ldrb	r3, [r3, #13]
 80100b8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80100be:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	2200      	movs	r2, #0
 80100c4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d00b      	beq.n	80100e8 <tcp_process_refused_data+0x58>
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6918      	ldr	r0, [r3, #16]
 80100da:	2300      	movs	r3, #0
 80100dc:	68ba      	ldr	r2, [r7, #8]
 80100de:	6879      	ldr	r1, [r7, #4]
 80100e0:	47a0      	blx	r4
 80100e2:	4603      	mov	r3, r0
 80100e4:	73fb      	strb	r3, [r7, #15]
 80100e6:	e007      	b.n	80100f8 <tcp_process_refused_data+0x68>
 80100e8:	2300      	movs	r3, #0
 80100ea:	68ba      	ldr	r2, [r7, #8]
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	2000      	movs	r0, #0
 80100f0:	f000 f8a4 	bl	801023c <tcp_recv_null>
 80100f4:	4603      	mov	r3, r0
 80100f6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80100f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d12a      	bne.n	8010156 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010100:	7bbb      	ldrb	r3, [r7, #14]
 8010102:	f003 0320 	and.w	r3, r3, #32
 8010106:	2b00      	cmp	r3, #0
 8010108:	d033      	beq.n	8010172 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801010e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010112:	d005      	beq.n	8010120 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010118:	3301      	adds	r3, #1
 801011a:	b29a      	uxth	r2, r3
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00b      	beq.n	8010142 <tcp_process_refused_data+0xb2>
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6918      	ldr	r0, [r3, #16]
 8010134:	2300      	movs	r3, #0
 8010136:	2200      	movs	r2, #0
 8010138:	6879      	ldr	r1, [r7, #4]
 801013a:	47a0      	blx	r4
 801013c:	4603      	mov	r3, r0
 801013e:	73fb      	strb	r3, [r7, #15]
 8010140:	e001      	b.n	8010146 <tcp_process_refused_data+0xb6>
 8010142:	2300      	movs	r3, #0
 8010144:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801014a:	f113 0f0d 	cmn.w	r3, #13
 801014e:	d110      	bne.n	8010172 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8010150:	f06f 030c 	mvn.w	r3, #12
 8010154:	e00e      	b.n	8010174 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8010156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801015a:	f113 0f0d 	cmn.w	r3, #13
 801015e:	d102      	bne.n	8010166 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010160:	f06f 030c 	mvn.w	r3, #12
 8010164:	e006      	b.n	8010174 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	68ba      	ldr	r2, [r7, #8]
 801016a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801016c:	f06f 0304 	mvn.w	r3, #4
 8010170:	e000      	b.n	8010174 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8010172:	2300      	movs	r3, #0
}
 8010174:	4618      	mov	r0, r3
 8010176:	3714      	adds	r7, #20
 8010178:	46bd      	mov	sp, r7
 801017a:	bd90      	pop	{r4, r7, pc}
 801017c:	0801b0d4 	.word	0x0801b0d4
 8010180:	0801b5e4 	.word	0x0801b5e4
 8010184:	0801b118 	.word	0x0801b118

08010188 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010190:	e007      	b.n	80101a2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 f80a 	bl	80101b2 <tcp_seg_free>
    seg = next;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d1f4      	bne.n	8010192 <tcp_segs_free+0xa>
  }
}
 80101a8:	bf00      	nop
 80101aa:	bf00      	nop
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b082      	sub	sp, #8
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d00c      	beq.n	80101da <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	685b      	ldr	r3, [r3, #4]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d004      	beq.n	80101d2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	4618      	mov	r0, r3
 80101ce:	f7fe fa03 	bl	800e5d8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80101d2:	6879      	ldr	r1, [r7, #4]
 80101d4:	2003      	movs	r0, #3
 80101d6:	f7fd fb29 	bl	800d82c <memp_free>
  }
}
 80101da:	bf00      	nop
 80101dc:	3708      	adds	r7, #8
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
	...

080101e4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d106      	bne.n	8010200 <tcp_seg_copy+0x1c>
 80101f2:	4b0f      	ldr	r3, [pc, #60]	; (8010230 <tcp_seg_copy+0x4c>)
 80101f4:	f240 6282 	movw	r2, #1666	; 0x682
 80101f8:	490e      	ldr	r1, [pc, #56]	; (8010234 <tcp_seg_copy+0x50>)
 80101fa:	480f      	ldr	r0, [pc, #60]	; (8010238 <tcp_seg_copy+0x54>)
 80101fc:	f008 fa46 	bl	801868c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8010200:	2003      	movs	r0, #3
 8010202:	f7fd fac1 	bl	800d788 <memp_malloc>
 8010206:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d101      	bne.n	8010212 <tcp_seg_copy+0x2e>
    return NULL;
 801020e:	2300      	movs	r3, #0
 8010210:	e00a      	b.n	8010228 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8010212:	2210      	movs	r2, #16
 8010214:	6879      	ldr	r1, [r7, #4]
 8010216:	68f8      	ldr	r0, [r7, #12]
 8010218:	f008 f978 	bl	801850c <memcpy>
  pbuf_ref(cseg->p);
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	685b      	ldr	r3, [r3, #4]
 8010220:	4618      	mov	r0, r3
 8010222:	f7fe fa7f 	bl	800e724 <pbuf_ref>
  return cseg;
 8010226:	68fb      	ldr	r3, [r7, #12]
}
 8010228:	4618      	mov	r0, r3
 801022a:	3710      	adds	r7, #16
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}
 8010230:	0801b0d4 	.word	0x0801b0d4
 8010234:	0801b628 	.word	0x0801b628
 8010238:	0801b118 	.word	0x0801b118

0801023c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b084      	sub	sp, #16
 8010240:	af00      	add	r7, sp, #0
 8010242:	60f8      	str	r0, [r7, #12]
 8010244:	60b9      	str	r1, [r7, #8]
 8010246:	607a      	str	r2, [r7, #4]
 8010248:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	2b00      	cmp	r3, #0
 801024e:	d109      	bne.n	8010264 <tcp_recv_null+0x28>
 8010250:	4b12      	ldr	r3, [pc, #72]	; (801029c <tcp_recv_null+0x60>)
 8010252:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010256:	4912      	ldr	r1, [pc, #72]	; (80102a0 <tcp_recv_null+0x64>)
 8010258:	4812      	ldr	r0, [pc, #72]	; (80102a4 <tcp_recv_null+0x68>)
 801025a:	f008 fa17 	bl	801868c <iprintf>
 801025e:	f06f 030f 	mvn.w	r3, #15
 8010262:	e016      	b.n	8010292 <tcp_recv_null+0x56>

  if (p != NULL) {
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d009      	beq.n	801027e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	891b      	ldrh	r3, [r3, #8]
 801026e:	4619      	mov	r1, r3
 8010270:	68b8      	ldr	r0, [r7, #8]
 8010272:	f7ff fad3 	bl	800f81c <tcp_recved>
    pbuf_free(p);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f7fe f9ae 	bl	800e5d8 <pbuf_free>
 801027c:	e008      	b.n	8010290 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801027e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010282:	2b00      	cmp	r3, #0
 8010284:	d104      	bne.n	8010290 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010286:	68b8      	ldr	r0, [r7, #8]
 8010288:	f7fe ffba 	bl	800f200 <tcp_close>
 801028c:	4603      	mov	r3, r0
 801028e:	e000      	b.n	8010292 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010290:	2300      	movs	r3, #0
}
 8010292:	4618      	mov	r0, r3
 8010294:	3710      	adds	r7, #16
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	0801b0d4 	.word	0x0801b0d4
 80102a0:	0801b644 	.word	0x0801b644
 80102a4:	0801b118 	.word	0x0801b118

080102a8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b086      	sub	sp, #24
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	4603      	mov	r3, r0
 80102b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80102b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	db01      	blt.n	80102be <tcp_kill_prio+0x16>
 80102ba:	79fb      	ldrb	r3, [r7, #7]
 80102bc:	e000      	b.n	80102c0 <tcp_kill_prio+0x18>
 80102be:	237f      	movs	r3, #127	; 0x7f
 80102c0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80102c2:	7afb      	ldrb	r3, [r7, #11]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d034      	beq.n	8010332 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80102c8:	7afb      	ldrb	r3, [r7, #11]
 80102ca:	3b01      	subs	r3, #1
 80102cc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80102ce:	2300      	movs	r3, #0
 80102d0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80102d2:	2300      	movs	r3, #0
 80102d4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80102d6:	4b19      	ldr	r3, [pc, #100]	; (801033c <tcp_kill_prio+0x94>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	617b      	str	r3, [r7, #20]
 80102dc:	e01f      	b.n	801031e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	7d5b      	ldrb	r3, [r3, #21]
 80102e2:	7afa      	ldrb	r2, [r7, #11]
 80102e4:	429a      	cmp	r2, r3
 80102e6:	d80c      	bhi.n	8010302 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80102ec:	7afa      	ldrb	r2, [r7, #11]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d112      	bne.n	8010318 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80102f2:	4b13      	ldr	r3, [pc, #76]	; (8010340 <tcp_kill_prio+0x98>)
 80102f4:	681a      	ldr	r2, [r3, #0]
 80102f6:	697b      	ldr	r3, [r7, #20]
 80102f8:	6a1b      	ldr	r3, [r3, #32]
 80102fa:	1ad3      	subs	r3, r2, r3
 80102fc:	68fa      	ldr	r2, [r7, #12]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d80a      	bhi.n	8010318 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010302:	4b0f      	ldr	r3, [pc, #60]	; (8010340 <tcp_kill_prio+0x98>)
 8010304:	681a      	ldr	r2, [r3, #0]
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	6a1b      	ldr	r3, [r3, #32]
 801030a:	1ad3      	subs	r3, r2, r3
 801030c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	7d5b      	ldrb	r3, [r3, #21]
 8010316:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	68db      	ldr	r3, [r3, #12]
 801031c:	617b      	str	r3, [r7, #20]
 801031e:	697b      	ldr	r3, [r7, #20]
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1dc      	bne.n	80102de <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010324:	693b      	ldr	r3, [r7, #16]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d004      	beq.n	8010334 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801032a:	6938      	ldr	r0, [r7, #16]
 801032c:	f7ff f8ae 	bl	800f48c <tcp_abort>
 8010330:	e000      	b.n	8010334 <tcp_kill_prio+0x8c>
    return;
 8010332:	bf00      	nop
  }
}
 8010334:	3718      	adds	r7, #24
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	2000bd88 	.word	0x2000bd88
 8010340:	2000bd8c 	.word	0x2000bd8c

08010344 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b086      	sub	sp, #24
 8010348:	af00      	add	r7, sp, #0
 801034a:	4603      	mov	r3, r0
 801034c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801034e:	79fb      	ldrb	r3, [r7, #7]
 8010350:	2b08      	cmp	r3, #8
 8010352:	d009      	beq.n	8010368 <tcp_kill_state+0x24>
 8010354:	79fb      	ldrb	r3, [r7, #7]
 8010356:	2b09      	cmp	r3, #9
 8010358:	d006      	beq.n	8010368 <tcp_kill_state+0x24>
 801035a:	4b1a      	ldr	r3, [pc, #104]	; (80103c4 <tcp_kill_state+0x80>)
 801035c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010360:	4919      	ldr	r1, [pc, #100]	; (80103c8 <tcp_kill_state+0x84>)
 8010362:	481a      	ldr	r0, [pc, #104]	; (80103cc <tcp_kill_state+0x88>)
 8010364:	f008 f992 	bl	801868c <iprintf>

  inactivity = 0;
 8010368:	2300      	movs	r3, #0
 801036a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801036c:	2300      	movs	r3, #0
 801036e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010370:	4b17      	ldr	r3, [pc, #92]	; (80103d0 <tcp_kill_state+0x8c>)
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	617b      	str	r3, [r7, #20]
 8010376:	e017      	b.n	80103a8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	7d1b      	ldrb	r3, [r3, #20]
 801037c:	79fa      	ldrb	r2, [r7, #7]
 801037e:	429a      	cmp	r2, r3
 8010380:	d10f      	bne.n	80103a2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010382:	4b14      	ldr	r3, [pc, #80]	; (80103d4 <tcp_kill_state+0x90>)
 8010384:	681a      	ldr	r2, [r3, #0]
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	6a1b      	ldr	r3, [r3, #32]
 801038a:	1ad3      	subs	r3, r2, r3
 801038c:	68fa      	ldr	r2, [r7, #12]
 801038e:	429a      	cmp	r2, r3
 8010390:	d807      	bhi.n	80103a2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010392:	4b10      	ldr	r3, [pc, #64]	; (80103d4 <tcp_kill_state+0x90>)
 8010394:	681a      	ldr	r2, [r3, #0]
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	6a1b      	ldr	r3, [r3, #32]
 801039a:	1ad3      	subs	r3, r2, r3
 801039c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801039e:	697b      	ldr	r3, [r7, #20]
 80103a0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	68db      	ldr	r3, [r3, #12]
 80103a6:	617b      	str	r3, [r7, #20]
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1e4      	bne.n	8010378 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d003      	beq.n	80103bc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80103b4:	2100      	movs	r1, #0
 80103b6:	6938      	ldr	r0, [r7, #16]
 80103b8:	f7fe ffaa 	bl	800f310 <tcp_abandon>
  }
}
 80103bc:	bf00      	nop
 80103be:	3718      	adds	r7, #24
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}
 80103c4:	0801b0d4 	.word	0x0801b0d4
 80103c8:	0801b660 	.word	0x0801b660
 80103cc:	0801b118 	.word	0x0801b118
 80103d0:	2000bd88 	.word	0x2000bd88
 80103d4:	2000bd8c 	.word	0x2000bd8c

080103d8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b084      	sub	sp, #16
 80103dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80103de:	2300      	movs	r3, #0
 80103e0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80103e2:	2300      	movs	r3, #0
 80103e4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80103e6:	4b12      	ldr	r3, [pc, #72]	; (8010430 <tcp_kill_timewait+0x58>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	60fb      	str	r3, [r7, #12]
 80103ec:	e012      	b.n	8010414 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80103ee:	4b11      	ldr	r3, [pc, #68]	; (8010434 <tcp_kill_timewait+0x5c>)
 80103f0:	681a      	ldr	r2, [r3, #0]
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	6a1b      	ldr	r3, [r3, #32]
 80103f6:	1ad3      	subs	r3, r2, r3
 80103f8:	687a      	ldr	r2, [r7, #4]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d807      	bhi.n	801040e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80103fe:	4b0d      	ldr	r3, [pc, #52]	; (8010434 <tcp_kill_timewait+0x5c>)
 8010400:	681a      	ldr	r2, [r3, #0]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	6a1b      	ldr	r3, [r3, #32]
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	68db      	ldr	r3, [r3, #12]
 8010412:	60fb      	str	r3, [r7, #12]
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d1e9      	bne.n	80103ee <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d002      	beq.n	8010426 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010420:	68b8      	ldr	r0, [r7, #8]
 8010422:	f7ff f833 	bl	800f48c <tcp_abort>
  }
}
 8010426:	bf00      	nop
 8010428:	3710      	adds	r7, #16
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	2000bd98 	.word	0x2000bd98
 8010434:	2000bd8c 	.word	0x2000bd8c

08010438 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b082      	sub	sp, #8
 801043c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801043e:	4b10      	ldr	r3, [pc, #64]	; (8010480 <tcp_handle_closepend+0x48>)
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010444:	e014      	b.n	8010470 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	68db      	ldr	r3, [r3, #12]
 801044a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	8b5b      	ldrh	r3, [r3, #26]
 8010450:	f003 0308 	and.w	r3, r3, #8
 8010454:	2b00      	cmp	r3, #0
 8010456:	d009      	beq.n	801046c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	8b5b      	ldrh	r3, [r3, #26]
 801045c:	f023 0308 	bic.w	r3, r3, #8
 8010460:	b29a      	uxth	r2, r3
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f7fe fe60 	bl	800f12c <tcp_close_shutdown_fin>
    }
    pcb = next;
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1e7      	bne.n	8010446 <tcp_handle_closepend+0xe>
  }
}
 8010476:	bf00      	nop
 8010478:	bf00      	nop
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	2000bd88 	.word	0x2000bd88

08010484 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801048e:	2001      	movs	r0, #1
 8010490:	f7fd f97a 	bl	800d788 <memp_malloc>
 8010494:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d126      	bne.n	80104ea <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801049c:	f7ff ffcc 	bl	8010438 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80104a0:	f7ff ff9a 	bl	80103d8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104a4:	2001      	movs	r0, #1
 80104a6:	f7fd f96f 	bl	800d788 <memp_malloc>
 80104aa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d11b      	bne.n	80104ea <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80104b2:	2009      	movs	r0, #9
 80104b4:	f7ff ff46 	bl	8010344 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104b8:	2001      	movs	r0, #1
 80104ba:	f7fd f965 	bl	800d788 <memp_malloc>
 80104be:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d111      	bne.n	80104ea <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80104c6:	2008      	movs	r0, #8
 80104c8:	f7ff ff3c 	bl	8010344 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104cc:	2001      	movs	r0, #1
 80104ce:	f7fd f95b 	bl	800d788 <memp_malloc>
 80104d2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d107      	bne.n	80104ea <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80104da:	79fb      	ldrb	r3, [r7, #7]
 80104dc:	4618      	mov	r0, r3
 80104de:	f7ff fee3 	bl	80102a8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80104e2:	2001      	movs	r0, #1
 80104e4:	f7fd f950 	bl	800d788 <memp_malloc>
 80104e8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d03f      	beq.n	8010570 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80104f0:	229c      	movs	r2, #156	; 0x9c
 80104f2:	2100      	movs	r1, #0
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f008 f817 	bl	8018528 <memset>
    pcb->prio = prio;
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	79fa      	ldrb	r2, [r7, #7]
 80104fe:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010506:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8010510:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	22ff      	movs	r2, #255	; 0xff
 801051e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010526:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2206      	movs	r2, #6
 801052c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	2206      	movs	r2, #6
 8010534:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801053c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2201      	movs	r2, #1
 8010542:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010546:	4b0d      	ldr	r3, [pc, #52]	; (801057c <tcp_alloc+0xf8>)
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801054e:	4b0c      	ldr	r3, [pc, #48]	; (8010580 <tcp_alloc+0xfc>)
 8010550:	781a      	ldrb	r2, [r3, #0]
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801055c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	4a08      	ldr	r2, [pc, #32]	; (8010584 <tcp_alloc+0x100>)
 8010564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	4a07      	ldr	r2, [pc, #28]	; (8010588 <tcp_alloc+0x104>)
 801056c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010570:	68fb      	ldr	r3, [r7, #12]
}
 8010572:	4618      	mov	r0, r3
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	2000bd8c 	.word	0x2000bd8c
 8010580:	20004eda 	.word	0x20004eda
 8010584:	0801023d 	.word	0x0801023d
 8010588:	006ddd00 	.word	0x006ddd00

0801058c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b084      	sub	sp, #16
 8010590:	af00      	add	r7, sp, #0
 8010592:	4603      	mov	r3, r0
 8010594:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010596:	2040      	movs	r0, #64	; 0x40
 8010598:	f7ff ff74 	bl	8010484 <tcp_alloc>
 801059c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801059e:	68fb      	ldr	r3, [r7, #12]
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	3710      	adds	r7, #16
 80105a4:	46bd      	mov	sp, r7
 80105a6:	bd80      	pop	{r7, pc}

080105a8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
 80105b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d002      	beq.n	80105be <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	611a      	str	r2, [r3, #16]
  }
}
 80105be:	bf00      	nop
 80105c0:	370c      	adds	r7, #12
 80105c2:	46bd      	mov	sp, r7
 80105c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c8:	4770      	bx	lr
	...

080105cc <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b082      	sub	sp, #8
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d00e      	beq.n	80105fa <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	7d1b      	ldrb	r3, [r3, #20]
 80105e0:	2b01      	cmp	r3, #1
 80105e2:	d106      	bne.n	80105f2 <tcp_recv+0x26>
 80105e4:	4b07      	ldr	r3, [pc, #28]	; (8010604 <tcp_recv+0x38>)
 80105e6:	f240 72df 	movw	r2, #2015	; 0x7df
 80105ea:	4907      	ldr	r1, [pc, #28]	; (8010608 <tcp_recv+0x3c>)
 80105ec:	4807      	ldr	r0, [pc, #28]	; (801060c <tcp_recv+0x40>)
 80105ee:	f008 f84d 	bl	801868c <iprintf>
    pcb->recv = recv;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	683a      	ldr	r2, [r7, #0]
 80105f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80105fa:	bf00      	nop
 80105fc:	3708      	adds	r7, #8
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}
 8010602:	bf00      	nop
 8010604:	0801b0d4 	.word	0x0801b0d4
 8010608:	0801b670 	.word	0x0801b670
 801060c:	0801b118 	.word	0x0801b118

08010610 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d00e      	beq.n	801063e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	7d1b      	ldrb	r3, [r3, #20]
 8010624:	2b01      	cmp	r3, #1
 8010626:	d106      	bne.n	8010636 <tcp_sent+0x26>
 8010628:	4b07      	ldr	r3, [pc, #28]	; (8010648 <tcp_sent+0x38>)
 801062a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801062e:	4907      	ldr	r1, [pc, #28]	; (801064c <tcp_sent+0x3c>)
 8010630:	4807      	ldr	r0, [pc, #28]	; (8010650 <tcp_sent+0x40>)
 8010632:	f008 f82b 	bl	801868c <iprintf>
    pcb->sent = sent;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	683a      	ldr	r2, [r7, #0]
 801063a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801063e:	bf00      	nop
 8010640:	3708      	adds	r7, #8
 8010642:	46bd      	mov	sp, r7
 8010644:	bd80      	pop	{r7, pc}
 8010646:	bf00      	nop
 8010648:	0801b0d4 	.word	0x0801b0d4
 801064c:	0801b698 	.word	0x0801b698
 8010650:	0801b118 	.word	0x0801b118

08010654 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d00e      	beq.n	8010682 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	7d1b      	ldrb	r3, [r3, #20]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d106      	bne.n	801067a <tcp_err+0x26>
 801066c:	4b07      	ldr	r3, [pc, #28]	; (801068c <tcp_err+0x38>)
 801066e:	f640 020d 	movw	r2, #2061	; 0x80d
 8010672:	4907      	ldr	r1, [pc, #28]	; (8010690 <tcp_err+0x3c>)
 8010674:	4807      	ldr	r0, [pc, #28]	; (8010694 <tcp_err+0x40>)
 8010676:	f008 f809 	bl	801868c <iprintf>
    pcb->errf = err;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	683a      	ldr	r2, [r7, #0]
 801067e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8010682:	bf00      	nop
 8010684:	3708      	adds	r7, #8
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}
 801068a:	bf00      	nop
 801068c:	0801b0d4 	.word	0x0801b0d4
 8010690:	0801b6c0 	.word	0x0801b6c0
 8010694:	0801b118 	.word	0x0801b118

08010698 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010698:	b480      	push	{r7}
 801069a:	b085      	sub	sp, #20
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
 80106a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d008      	beq.n	80106ba <tcp_accept+0x22>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	7d1b      	ldrb	r3, [r3, #20]
 80106ac:	2b01      	cmp	r3, #1
 80106ae:	d104      	bne.n	80106ba <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	683a      	ldr	r2, [r7, #0]
 80106b8:	619a      	str	r2, [r3, #24]
  }
}
 80106ba:	bf00      	nop
 80106bc:	3714      	adds	r7, #20
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr
	...

080106c8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	4613      	mov	r3, r2
 80106d4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d107      	bne.n	80106ec <tcp_poll+0x24>
 80106dc:	4b0e      	ldr	r3, [pc, #56]	; (8010718 <tcp_poll+0x50>)
 80106de:	f640 023d 	movw	r2, #2109	; 0x83d
 80106e2:	490e      	ldr	r1, [pc, #56]	; (801071c <tcp_poll+0x54>)
 80106e4:	480e      	ldr	r0, [pc, #56]	; (8010720 <tcp_poll+0x58>)
 80106e6:	f007 ffd1 	bl	801868c <iprintf>
 80106ea:	e011      	b.n	8010710 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	7d1b      	ldrb	r3, [r3, #20]
 80106f0:	2b01      	cmp	r3, #1
 80106f2:	d106      	bne.n	8010702 <tcp_poll+0x3a>
 80106f4:	4b08      	ldr	r3, [pc, #32]	; (8010718 <tcp_poll+0x50>)
 80106f6:	f640 023e 	movw	r2, #2110	; 0x83e
 80106fa:	490a      	ldr	r1, [pc, #40]	; (8010724 <tcp_poll+0x5c>)
 80106fc:	4808      	ldr	r0, [pc, #32]	; (8010720 <tcp_poll+0x58>)
 80106fe:	f007 ffc5 	bl	801868c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	68ba      	ldr	r2, [r7, #8]
 8010706:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	79fa      	ldrb	r2, [r7, #7]
 801070e:	775a      	strb	r2, [r3, #29]
}
 8010710:	3710      	adds	r7, #16
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	0801b0d4 	.word	0x0801b0d4
 801071c:	0801b6e8 	.word	0x0801b6e8
 8010720:	0801b118 	.word	0x0801b118
 8010724:	0801b700 	.word	0x0801b700

08010728 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d107      	bne.n	8010746 <tcp_pcb_purge+0x1e>
 8010736:	4b21      	ldr	r3, [pc, #132]	; (80107bc <tcp_pcb_purge+0x94>)
 8010738:	f640 0251 	movw	r2, #2129	; 0x851
 801073c:	4920      	ldr	r1, [pc, #128]	; (80107c0 <tcp_pcb_purge+0x98>)
 801073e:	4821      	ldr	r0, [pc, #132]	; (80107c4 <tcp_pcb_purge+0x9c>)
 8010740:	f007 ffa4 	bl	801868c <iprintf>
 8010744:	e037      	b.n	80107b6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	7d1b      	ldrb	r3, [r3, #20]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d033      	beq.n	80107b6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010752:	2b0a      	cmp	r3, #10
 8010754:	d02f      	beq.n	80107b6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801075a:	2b01      	cmp	r3, #1
 801075c:	d02b      	beq.n	80107b6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010762:	2b00      	cmp	r3, #0
 8010764:	d007      	beq.n	8010776 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801076a:	4618      	mov	r0, r3
 801076c:	f7fd ff34 	bl	800e5d8 <pbuf_free>
      pcb->refused_data = NULL;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2200      	movs	r2, #0
 8010774:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801077a:	2b00      	cmp	r3, #0
 801077c:	d002      	beq.n	8010784 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801077e:	6878      	ldr	r0, [r7, #4]
 8010780:	f000 f986 	bl	8010a90 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801078a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010790:	4618      	mov	r0, r3
 8010792:	f7ff fcf9 	bl	8010188 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801079a:	4618      	mov	r0, r3
 801079c:	f7ff fcf4 	bl	8010188 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2200      	movs	r2, #0
 80107a4:	66da      	str	r2, [r3, #108]	; 0x6c
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	2200      	movs	r2, #0
 80107b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80107b6:	3708      	adds	r7, #8
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	0801b0d4 	.word	0x0801b0d4
 80107c0:	0801b720 	.word	0x0801b720
 80107c4:	0801b118 	.word	0x0801b118

080107c8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b084      	sub	sp, #16
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80107d2:	683b      	ldr	r3, [r7, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d106      	bne.n	80107e6 <tcp_pcb_remove+0x1e>
 80107d8:	4b3e      	ldr	r3, [pc, #248]	; (80108d4 <tcp_pcb_remove+0x10c>)
 80107da:	f640 0283 	movw	r2, #2179	; 0x883
 80107de:	493e      	ldr	r1, [pc, #248]	; (80108d8 <tcp_pcb_remove+0x110>)
 80107e0:	483e      	ldr	r0, [pc, #248]	; (80108dc <tcp_pcb_remove+0x114>)
 80107e2:	f007 ff53 	bl	801868c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d106      	bne.n	80107fa <tcp_pcb_remove+0x32>
 80107ec:	4b39      	ldr	r3, [pc, #228]	; (80108d4 <tcp_pcb_remove+0x10c>)
 80107ee:	f640 0284 	movw	r2, #2180	; 0x884
 80107f2:	493b      	ldr	r1, [pc, #236]	; (80108e0 <tcp_pcb_remove+0x118>)
 80107f4:	4839      	ldr	r0, [pc, #228]	; (80108dc <tcp_pcb_remove+0x114>)
 80107f6:	f007 ff49 	bl	801868c <iprintf>

  TCP_RMV(pcblist, pcb);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	683a      	ldr	r2, [r7, #0]
 8010800:	429a      	cmp	r2, r3
 8010802:	d105      	bne.n	8010810 <tcp_pcb_remove+0x48>
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	68da      	ldr	r2, [r3, #12]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	601a      	str	r2, [r3, #0]
 801080e:	e013      	b.n	8010838 <tcp_pcb_remove+0x70>
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	60fb      	str	r3, [r7, #12]
 8010816:	e00c      	b.n	8010832 <tcp_pcb_remove+0x6a>
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	68db      	ldr	r3, [r3, #12]
 801081c:	683a      	ldr	r2, [r7, #0]
 801081e:	429a      	cmp	r2, r3
 8010820:	d104      	bne.n	801082c <tcp_pcb_remove+0x64>
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	68da      	ldr	r2, [r3, #12]
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	60da      	str	r2, [r3, #12]
 801082a:	e005      	b.n	8010838 <tcp_pcb_remove+0x70>
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	60fb      	str	r3, [r7, #12]
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d1ef      	bne.n	8010818 <tcp_pcb_remove+0x50>
 8010838:	683b      	ldr	r3, [r7, #0]
 801083a:	2200      	movs	r2, #0
 801083c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801083e:	6838      	ldr	r0, [r7, #0]
 8010840:	f7ff ff72 	bl	8010728 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	7d1b      	ldrb	r3, [r3, #20]
 8010848:	2b0a      	cmp	r3, #10
 801084a:	d013      	beq.n	8010874 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801084c:	683b      	ldr	r3, [r7, #0]
 801084e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010850:	2b01      	cmp	r3, #1
 8010852:	d00f      	beq.n	8010874 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010854:	683b      	ldr	r3, [r7, #0]
 8010856:	8b5b      	ldrh	r3, [r3, #26]
 8010858:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801085c:	2b00      	cmp	r3, #0
 801085e:	d009      	beq.n	8010874 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010860:	683b      	ldr	r3, [r7, #0]
 8010862:	8b5b      	ldrh	r3, [r3, #26]
 8010864:	f043 0302 	orr.w	r3, r3, #2
 8010868:	b29a      	uxth	r2, r3
 801086a:	683b      	ldr	r3, [r7, #0]
 801086c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801086e:	6838      	ldr	r0, [r7, #0]
 8010870:	f003 fbc2 	bl	8013ff8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	7d1b      	ldrb	r3, [r3, #20]
 8010878:	2b01      	cmp	r3, #1
 801087a:	d020      	beq.n	80108be <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801087c:	683b      	ldr	r3, [r7, #0]
 801087e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010880:	2b00      	cmp	r3, #0
 8010882:	d006      	beq.n	8010892 <tcp_pcb_remove+0xca>
 8010884:	4b13      	ldr	r3, [pc, #76]	; (80108d4 <tcp_pcb_remove+0x10c>)
 8010886:	f640 0293 	movw	r2, #2195	; 0x893
 801088a:	4916      	ldr	r1, [pc, #88]	; (80108e4 <tcp_pcb_remove+0x11c>)
 801088c:	4813      	ldr	r0, [pc, #76]	; (80108dc <tcp_pcb_remove+0x114>)
 801088e:	f007 fefd 	bl	801868c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010892:	683b      	ldr	r3, [r7, #0]
 8010894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010896:	2b00      	cmp	r3, #0
 8010898:	d006      	beq.n	80108a8 <tcp_pcb_remove+0xe0>
 801089a:	4b0e      	ldr	r3, [pc, #56]	; (80108d4 <tcp_pcb_remove+0x10c>)
 801089c:	f640 0294 	movw	r2, #2196	; 0x894
 80108a0:	4911      	ldr	r1, [pc, #68]	; (80108e8 <tcp_pcb_remove+0x120>)
 80108a2:	480e      	ldr	r0, [pc, #56]	; (80108dc <tcp_pcb_remove+0x114>)
 80108a4:	f007 fef2 	bl	801868c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d006      	beq.n	80108be <tcp_pcb_remove+0xf6>
 80108b0:	4b08      	ldr	r3, [pc, #32]	; (80108d4 <tcp_pcb_remove+0x10c>)
 80108b2:	f640 0296 	movw	r2, #2198	; 0x896
 80108b6:	490d      	ldr	r1, [pc, #52]	; (80108ec <tcp_pcb_remove+0x124>)
 80108b8:	4808      	ldr	r0, [pc, #32]	; (80108dc <tcp_pcb_remove+0x114>)
 80108ba:	f007 fee7 	bl	801868c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	2200      	movs	r2, #0
 80108c2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	2200      	movs	r2, #0
 80108c8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80108ca:	bf00      	nop
 80108cc:	3710      	adds	r7, #16
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd80      	pop	{r7, pc}
 80108d2:	bf00      	nop
 80108d4:	0801b0d4 	.word	0x0801b0d4
 80108d8:	0801b73c 	.word	0x0801b73c
 80108dc:	0801b118 	.word	0x0801b118
 80108e0:	0801b758 	.word	0x0801b758
 80108e4:	0801b778 	.word	0x0801b778
 80108e8:	0801b790 	.word	0x0801b790
 80108ec:	0801b7ac 	.word	0x0801b7ac

080108f0 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b082      	sub	sp, #8
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d106      	bne.n	801090c <tcp_next_iss+0x1c>
 80108fe:	4b0a      	ldr	r3, [pc, #40]	; (8010928 <tcp_next_iss+0x38>)
 8010900:	f640 02af 	movw	r2, #2223	; 0x8af
 8010904:	4909      	ldr	r1, [pc, #36]	; (801092c <tcp_next_iss+0x3c>)
 8010906:	480a      	ldr	r0, [pc, #40]	; (8010930 <tcp_next_iss+0x40>)
 8010908:	f007 fec0 	bl	801868c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801090c:	4b09      	ldr	r3, [pc, #36]	; (8010934 <tcp_next_iss+0x44>)
 801090e:	681a      	ldr	r2, [r3, #0]
 8010910:	4b09      	ldr	r3, [pc, #36]	; (8010938 <tcp_next_iss+0x48>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	4413      	add	r3, r2
 8010916:	4a07      	ldr	r2, [pc, #28]	; (8010934 <tcp_next_iss+0x44>)
 8010918:	6013      	str	r3, [r2, #0]
  return iss;
 801091a:	4b06      	ldr	r3, [pc, #24]	; (8010934 <tcp_next_iss+0x44>)
 801091c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801091e:	4618      	mov	r0, r3
 8010920:	3708      	adds	r7, #8
 8010922:	46bd      	mov	sp, r7
 8010924:	bd80      	pop	{r7, pc}
 8010926:	bf00      	nop
 8010928:	0801b0d4 	.word	0x0801b0d4
 801092c:	0801b7c4 	.word	0x0801b7c4
 8010930:	0801b118 	.word	0x0801b118
 8010934:	20000014 	.word	0x20000014
 8010938:	2000bd8c 	.word	0x2000bd8c

0801093c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b086      	sub	sp, #24
 8010940:	af00      	add	r7, sp, #0
 8010942:	4603      	mov	r3, r0
 8010944:	60b9      	str	r1, [r7, #8]
 8010946:	607a      	str	r2, [r7, #4]
 8010948:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d106      	bne.n	801095e <tcp_eff_send_mss_netif+0x22>
 8010950:	4b14      	ldr	r3, [pc, #80]	; (80109a4 <tcp_eff_send_mss_netif+0x68>)
 8010952:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010956:	4914      	ldr	r1, [pc, #80]	; (80109a8 <tcp_eff_send_mss_netif+0x6c>)
 8010958:	4814      	ldr	r0, [pc, #80]	; (80109ac <tcp_eff_send_mss_netif+0x70>)
 801095a:	f007 fe97 	bl	801868c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d101      	bne.n	8010968 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010964:	89fb      	ldrh	r3, [r7, #14]
 8010966:	e019      	b.n	801099c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010968:	68bb      	ldr	r3, [r7, #8]
 801096a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801096c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801096e:	8afb      	ldrh	r3, [r7, #22]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d012      	beq.n	801099a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010974:	2328      	movs	r3, #40	; 0x28
 8010976:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010978:	8afa      	ldrh	r2, [r7, #22]
 801097a:	8abb      	ldrh	r3, [r7, #20]
 801097c:	429a      	cmp	r2, r3
 801097e:	d904      	bls.n	801098a <tcp_eff_send_mss_netif+0x4e>
 8010980:	8afa      	ldrh	r2, [r7, #22]
 8010982:	8abb      	ldrh	r3, [r7, #20]
 8010984:	1ad3      	subs	r3, r2, r3
 8010986:	b29b      	uxth	r3, r3
 8010988:	e000      	b.n	801098c <tcp_eff_send_mss_netif+0x50>
 801098a:	2300      	movs	r3, #0
 801098c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801098e:	8a7a      	ldrh	r2, [r7, #18]
 8010990:	89fb      	ldrh	r3, [r7, #14]
 8010992:	4293      	cmp	r3, r2
 8010994:	bf28      	it	cs
 8010996:	4613      	movcs	r3, r2
 8010998:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801099a:	89fb      	ldrh	r3, [r7, #14]
}
 801099c:	4618      	mov	r0, r3
 801099e:	3718      	adds	r7, #24
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	0801b0d4 	.word	0x0801b0d4
 80109a8:	0801b7e0 	.word	0x0801b7e0
 80109ac:	0801b118 	.word	0x0801b118

080109b0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d119      	bne.n	80109f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80109c4:	4b10      	ldr	r3, [pc, #64]	; (8010a08 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80109c6:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80109ca:	4910      	ldr	r1, [pc, #64]	; (8010a0c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80109cc:	4810      	ldr	r0, [pc, #64]	; (8010a10 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80109ce:	f007 fe5d 	bl	801868c <iprintf>

  while (pcb != NULL) {
 80109d2:	e011      	b.n	80109f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	681a      	ldr	r2, [r3, #0]
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	429a      	cmp	r2, r3
 80109de:	d108      	bne.n	80109f2 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	68db      	ldr	r3, [r3, #12]
 80109e4:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80109e6:	68f8      	ldr	r0, [r7, #12]
 80109e8:	f7fe fd50 	bl	800f48c <tcp_abort>
      pcb = next;
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	60fb      	str	r3, [r7, #12]
 80109f0:	e002      	b.n	80109f8 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	68db      	ldr	r3, [r3, #12]
 80109f6:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1ea      	bne.n	80109d4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80109fe:	bf00      	nop
 8010a00:	bf00      	nop
 8010a02:	3710      	adds	r7, #16
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	0801b0d4 	.word	0x0801b0d4
 8010a0c:	0801b808 	.word	0x0801b808
 8010a10:	0801b118 	.word	0x0801b118

08010a14 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a14:	b580      	push	{r7, lr}
 8010a16:	b084      	sub	sp, #16
 8010a18:	af00      	add	r7, sp, #0
 8010a1a:	6078      	str	r0, [r7, #4]
 8010a1c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d02a      	beq.n	8010a7a <tcp_netif_ip_addr_changed+0x66>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d026      	beq.n	8010a7a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8010a2c:	4b15      	ldr	r3, [pc, #84]	; (8010a84 <tcp_netif_ip_addr_changed+0x70>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	4619      	mov	r1, r3
 8010a32:	6878      	ldr	r0, [r7, #4]
 8010a34:	f7ff ffbc 	bl	80109b0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8010a38:	4b13      	ldr	r3, [pc, #76]	; (8010a88 <tcp_netif_ip_addr_changed+0x74>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4619      	mov	r1, r3
 8010a3e:	6878      	ldr	r0, [r7, #4]
 8010a40:	f7ff ffb6 	bl	80109b0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d017      	beq.n	8010a7a <tcp_netif_ip_addr_changed+0x66>
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d013      	beq.n	8010a7a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a52:	4b0e      	ldr	r3, [pc, #56]	; (8010a8c <tcp_netif_ip_addr_changed+0x78>)
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	60fb      	str	r3, [r7, #12]
 8010a58:	e00c      	b.n	8010a74 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681a      	ldr	r2, [r3, #0]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	429a      	cmp	r2, r3
 8010a64:	d103      	bne.n	8010a6e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8010a66:	683b      	ldr	r3, [r7, #0]
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	68db      	ldr	r3, [r3, #12]
 8010a72:	60fb      	str	r3, [r7, #12]
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d1ef      	bne.n	8010a5a <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8010a7a:	bf00      	nop
 8010a7c:	3710      	adds	r7, #16
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}
 8010a82:	bf00      	nop
 8010a84:	2000bd88 	.word	0x2000bd88
 8010a88:	2000bd94 	.word	0x2000bd94
 8010a8c:	2000bd90 	.word	0x2000bd90

08010a90 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d007      	beq.n	8010ab0 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f7ff fb6f 	bl	8010188 <tcp_segs_free>
    pcb->ooseq = NULL;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2200      	movs	r2, #0
 8010aae:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8010ab0:	bf00      	nop
 8010ab2:	3708      	adds	r7, #8
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8010ab8:	b590      	push	{r4, r7, lr}
 8010aba:	b08d      	sub	sp, #52	; 0x34
 8010abc:	af04      	add	r7, sp, #16
 8010abe:	6078      	str	r0, [r7, #4]
 8010ac0:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d105      	bne.n	8010ad4 <tcp_input+0x1c>
 8010ac8:	4b9b      	ldr	r3, [pc, #620]	; (8010d38 <tcp_input+0x280>)
 8010aca:	2283      	movs	r2, #131	; 0x83
 8010acc:	499b      	ldr	r1, [pc, #620]	; (8010d3c <tcp_input+0x284>)
 8010ace:	489c      	ldr	r0, [pc, #624]	; (8010d40 <tcp_input+0x288>)
 8010ad0:	f007 fddc 	bl	801868c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	685b      	ldr	r3, [r3, #4]
 8010ad8:	4a9a      	ldr	r2, [pc, #616]	; (8010d44 <tcp_input+0x28c>)
 8010ada:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	895b      	ldrh	r3, [r3, #10]
 8010ae0:	2b13      	cmp	r3, #19
 8010ae2:	f240 83c4 	bls.w	801126e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010ae6:	4b98      	ldr	r3, [pc, #608]	; (8010d48 <tcp_input+0x290>)
 8010ae8:	695b      	ldr	r3, [r3, #20]
 8010aea:	4a97      	ldr	r2, [pc, #604]	; (8010d48 <tcp_input+0x290>)
 8010aec:	6812      	ldr	r2, [r2, #0]
 8010aee:	4611      	mov	r1, r2
 8010af0:	4618      	mov	r0, r3
 8010af2:	f006 fbcb 	bl	801728c <ip4_addr_isbroadcast_u32>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	f040 83ba 	bne.w	8011272 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8010afe:	4b92      	ldr	r3, [pc, #584]	; (8010d48 <tcp_input+0x290>)
 8010b00:	695b      	ldr	r3, [r3, #20]
 8010b02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8010b06:	2be0      	cmp	r3, #224	; 0xe0
 8010b08:	f000 83b3 	beq.w	8011272 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8010b0c:	4b8d      	ldr	r3, [pc, #564]	; (8010d44 <tcp_input+0x28c>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	899b      	ldrh	r3, [r3, #12]
 8010b12:	b29b      	uxth	r3, r3
 8010b14:	4618      	mov	r0, r3
 8010b16:	f7fb feb7 	bl	800c888 <lwip_htons>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	0b1b      	lsrs	r3, r3, #12
 8010b1e:	b29b      	uxth	r3, r3
 8010b20:	b2db      	uxtb	r3, r3
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8010b26:	7cbb      	ldrb	r3, [r7, #18]
 8010b28:	2b13      	cmp	r3, #19
 8010b2a:	f240 83a4 	bls.w	8011276 <tcp_input+0x7be>
 8010b2e:	7cbb      	ldrb	r3, [r7, #18]
 8010b30:	b29a      	uxth	r2, r3
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	891b      	ldrh	r3, [r3, #8]
 8010b36:	429a      	cmp	r2, r3
 8010b38:	f200 839d 	bhi.w	8011276 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8010b3c:	7cbb      	ldrb	r3, [r7, #18]
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	3b14      	subs	r3, #20
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	4b81      	ldr	r3, [pc, #516]	; (8010d4c <tcp_input+0x294>)
 8010b46:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8010b48:	4b81      	ldr	r3, [pc, #516]	; (8010d50 <tcp_input+0x298>)
 8010b4a:	2200      	movs	r2, #0
 8010b4c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	895a      	ldrh	r2, [r3, #10]
 8010b52:	7cbb      	ldrb	r3, [r7, #18]
 8010b54:	b29b      	uxth	r3, r3
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d309      	bcc.n	8010b6e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8010b5a:	4b7c      	ldr	r3, [pc, #496]	; (8010d4c <tcp_input+0x294>)
 8010b5c:	881a      	ldrh	r2, [r3, #0]
 8010b5e:	4b7d      	ldr	r3, [pc, #500]	; (8010d54 <tcp_input+0x29c>)
 8010b60:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8010b62:	7cbb      	ldrb	r3, [r7, #18]
 8010b64:	4619      	mov	r1, r3
 8010b66:	6878      	ldr	r0, [r7, #4]
 8010b68:	f7fd fc7e 	bl	800e468 <pbuf_remove_header>
 8010b6c:	e04e      	b.n	8010c0c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d105      	bne.n	8010b82 <tcp_input+0xca>
 8010b76:	4b70      	ldr	r3, [pc, #448]	; (8010d38 <tcp_input+0x280>)
 8010b78:	22c2      	movs	r2, #194	; 0xc2
 8010b7a:	4977      	ldr	r1, [pc, #476]	; (8010d58 <tcp_input+0x2a0>)
 8010b7c:	4870      	ldr	r0, [pc, #448]	; (8010d40 <tcp_input+0x288>)
 8010b7e:	f007 fd85 	bl	801868c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8010b82:	2114      	movs	r1, #20
 8010b84:	6878      	ldr	r0, [r7, #4]
 8010b86:	f7fd fc6f 	bl	800e468 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	895a      	ldrh	r2, [r3, #10]
 8010b8e:	4b71      	ldr	r3, [pc, #452]	; (8010d54 <tcp_input+0x29c>)
 8010b90:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8010b92:	4b6e      	ldr	r3, [pc, #440]	; (8010d4c <tcp_input+0x294>)
 8010b94:	881a      	ldrh	r2, [r3, #0]
 8010b96:	4b6f      	ldr	r3, [pc, #444]	; (8010d54 <tcp_input+0x29c>)
 8010b98:	881b      	ldrh	r3, [r3, #0]
 8010b9a:	1ad3      	subs	r3, r2, r3
 8010b9c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8010b9e:	4b6d      	ldr	r3, [pc, #436]	; (8010d54 <tcp_input+0x29c>)
 8010ba0:	881b      	ldrh	r3, [r3, #0]
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	6878      	ldr	r0, [r7, #4]
 8010ba6:	f7fd fc5f 	bl	800e468 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	895b      	ldrh	r3, [r3, #10]
 8010bb0:	8a3a      	ldrh	r2, [r7, #16]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	f200 8361 	bhi.w	801127a <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	685b      	ldr	r3, [r3, #4]
 8010bbe:	4a64      	ldr	r2, [pc, #400]	; (8010d50 <tcp_input+0x298>)
 8010bc0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	8a3a      	ldrh	r2, [r7, #16]
 8010bc8:	4611      	mov	r1, r2
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7fd fc4c 	bl	800e468 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	891a      	ldrh	r2, [r3, #8]
 8010bd4:	8a3b      	ldrh	r3, [r7, #16]
 8010bd6:	1ad3      	subs	r3, r2, r3
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	895b      	ldrh	r3, [r3, #10]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d005      	beq.n	8010bf2 <tcp_input+0x13a>
 8010be6:	4b54      	ldr	r3, [pc, #336]	; (8010d38 <tcp_input+0x280>)
 8010be8:	22df      	movs	r2, #223	; 0xdf
 8010bea:	495c      	ldr	r1, [pc, #368]	; (8010d5c <tcp_input+0x2a4>)
 8010bec:	4854      	ldr	r0, [pc, #336]	; (8010d40 <tcp_input+0x288>)
 8010bee:	f007 fd4d 	bl	801868c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	891a      	ldrh	r2, [r3, #8]
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	891b      	ldrh	r3, [r3, #8]
 8010bfc:	429a      	cmp	r2, r3
 8010bfe:	d005      	beq.n	8010c0c <tcp_input+0x154>
 8010c00:	4b4d      	ldr	r3, [pc, #308]	; (8010d38 <tcp_input+0x280>)
 8010c02:	22e0      	movs	r2, #224	; 0xe0
 8010c04:	4956      	ldr	r1, [pc, #344]	; (8010d60 <tcp_input+0x2a8>)
 8010c06:	484e      	ldr	r0, [pc, #312]	; (8010d40 <tcp_input+0x288>)
 8010c08:	f007 fd40 	bl	801868c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8010c0c:	4b4d      	ldr	r3, [pc, #308]	; (8010d44 <tcp_input+0x28c>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	881b      	ldrh	r3, [r3, #0]
 8010c12:	b29b      	uxth	r3, r3
 8010c14:	4a4b      	ldr	r2, [pc, #300]	; (8010d44 <tcp_input+0x28c>)
 8010c16:	6814      	ldr	r4, [r2, #0]
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f7fb fe35 	bl	800c888 <lwip_htons>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8010c22:	4b48      	ldr	r3, [pc, #288]	; (8010d44 <tcp_input+0x28c>)
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	885b      	ldrh	r3, [r3, #2]
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	4a46      	ldr	r2, [pc, #280]	; (8010d44 <tcp_input+0x28c>)
 8010c2c:	6814      	ldr	r4, [r2, #0]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fb fe2a 	bl	800c888 <lwip_htons>
 8010c34:	4603      	mov	r3, r0
 8010c36:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8010c38:	4b42      	ldr	r3, [pc, #264]	; (8010d44 <tcp_input+0x28c>)
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	685b      	ldr	r3, [r3, #4]
 8010c3e:	4a41      	ldr	r2, [pc, #260]	; (8010d44 <tcp_input+0x28c>)
 8010c40:	6814      	ldr	r4, [r2, #0]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fb fe35 	bl	800c8b2 <lwip_htonl>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	6063      	str	r3, [r4, #4]
 8010c4c:	6863      	ldr	r3, [r4, #4]
 8010c4e:	4a45      	ldr	r2, [pc, #276]	; (8010d64 <tcp_input+0x2ac>)
 8010c50:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8010c52:	4b3c      	ldr	r3, [pc, #240]	; (8010d44 <tcp_input+0x28c>)
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	689b      	ldr	r3, [r3, #8]
 8010c58:	4a3a      	ldr	r2, [pc, #232]	; (8010d44 <tcp_input+0x28c>)
 8010c5a:	6814      	ldr	r4, [r2, #0]
 8010c5c:	4618      	mov	r0, r3
 8010c5e:	f7fb fe28 	bl	800c8b2 <lwip_htonl>
 8010c62:	4603      	mov	r3, r0
 8010c64:	60a3      	str	r3, [r4, #8]
 8010c66:	68a3      	ldr	r3, [r4, #8]
 8010c68:	4a3f      	ldr	r2, [pc, #252]	; (8010d68 <tcp_input+0x2b0>)
 8010c6a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8010c6c:	4b35      	ldr	r3, [pc, #212]	; (8010d44 <tcp_input+0x28c>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	89db      	ldrh	r3, [r3, #14]
 8010c72:	b29b      	uxth	r3, r3
 8010c74:	4a33      	ldr	r2, [pc, #204]	; (8010d44 <tcp_input+0x28c>)
 8010c76:	6814      	ldr	r4, [r2, #0]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7fb fe05 	bl	800c888 <lwip_htons>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8010c82:	4b30      	ldr	r3, [pc, #192]	; (8010d44 <tcp_input+0x28c>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	899b      	ldrh	r3, [r3, #12]
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f7fb fdfc 	bl	800c888 <lwip_htons>
 8010c90:	4603      	mov	r3, r0
 8010c92:	b2db      	uxtb	r3, r3
 8010c94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c98:	b2da      	uxtb	r2, r3
 8010c9a:	4b34      	ldr	r3, [pc, #208]	; (8010d6c <tcp_input+0x2b4>)
 8010c9c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	891a      	ldrh	r2, [r3, #8]
 8010ca2:	4b33      	ldr	r3, [pc, #204]	; (8010d70 <tcp_input+0x2b8>)
 8010ca4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8010ca6:	4b31      	ldr	r3, [pc, #196]	; (8010d6c <tcp_input+0x2b4>)
 8010ca8:	781b      	ldrb	r3, [r3, #0]
 8010caa:	f003 0303 	and.w	r3, r3, #3
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d00c      	beq.n	8010ccc <tcp_input+0x214>
    tcplen++;
 8010cb2:	4b2f      	ldr	r3, [pc, #188]	; (8010d70 <tcp_input+0x2b8>)
 8010cb4:	881b      	ldrh	r3, [r3, #0]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	b29a      	uxth	r2, r3
 8010cba:	4b2d      	ldr	r3, [pc, #180]	; (8010d70 <tcp_input+0x2b8>)
 8010cbc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	891a      	ldrh	r2, [r3, #8]
 8010cc2:	4b2b      	ldr	r3, [pc, #172]	; (8010d70 <tcp_input+0x2b8>)
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	f200 82d9 	bhi.w	801127e <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cd0:	4b28      	ldr	r3, [pc, #160]	; (8010d74 <tcp_input+0x2bc>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	61fb      	str	r3, [r7, #28]
 8010cd6:	e09d      	b.n	8010e14 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	7d1b      	ldrb	r3, [r3, #20]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d105      	bne.n	8010cec <tcp_input+0x234>
 8010ce0:	4b15      	ldr	r3, [pc, #84]	; (8010d38 <tcp_input+0x280>)
 8010ce2:	22fb      	movs	r2, #251	; 0xfb
 8010ce4:	4924      	ldr	r1, [pc, #144]	; (8010d78 <tcp_input+0x2c0>)
 8010ce6:	4816      	ldr	r0, [pc, #88]	; (8010d40 <tcp_input+0x288>)
 8010ce8:	f007 fcd0 	bl	801868c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8010cec:	69fb      	ldr	r3, [r7, #28]
 8010cee:	7d1b      	ldrb	r3, [r3, #20]
 8010cf0:	2b0a      	cmp	r3, #10
 8010cf2:	d105      	bne.n	8010d00 <tcp_input+0x248>
 8010cf4:	4b10      	ldr	r3, [pc, #64]	; (8010d38 <tcp_input+0x280>)
 8010cf6:	22fc      	movs	r2, #252	; 0xfc
 8010cf8:	4920      	ldr	r1, [pc, #128]	; (8010d7c <tcp_input+0x2c4>)
 8010cfa:	4811      	ldr	r0, [pc, #68]	; (8010d40 <tcp_input+0x288>)
 8010cfc:	f007 fcc6 	bl	801868c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8010d00:	69fb      	ldr	r3, [r7, #28]
 8010d02:	7d1b      	ldrb	r3, [r3, #20]
 8010d04:	2b01      	cmp	r3, #1
 8010d06:	d105      	bne.n	8010d14 <tcp_input+0x25c>
 8010d08:	4b0b      	ldr	r3, [pc, #44]	; (8010d38 <tcp_input+0x280>)
 8010d0a:	22fd      	movs	r2, #253	; 0xfd
 8010d0c:	491c      	ldr	r1, [pc, #112]	; (8010d80 <tcp_input+0x2c8>)
 8010d0e:	480c      	ldr	r0, [pc, #48]	; (8010d40 <tcp_input+0x288>)
 8010d10:	f007 fcbc 	bl	801868c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d14:	69fb      	ldr	r3, [r7, #28]
 8010d16:	7a1b      	ldrb	r3, [r3, #8]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d033      	beq.n	8010d84 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010d1c:	69fb      	ldr	r3, [r7, #28]
 8010d1e:	7a1a      	ldrb	r2, [r3, #8]
 8010d20:	4b09      	ldr	r3, [pc, #36]	; (8010d48 <tcp_input+0x290>)
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d28:	3301      	adds	r3, #1
 8010d2a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010d2c:	429a      	cmp	r2, r3
 8010d2e:	d029      	beq.n	8010d84 <tcp_input+0x2cc>
      prev = pcb;
 8010d30:	69fb      	ldr	r3, [r7, #28]
 8010d32:	61bb      	str	r3, [r7, #24]
      continue;
 8010d34:	e06b      	b.n	8010e0e <tcp_input+0x356>
 8010d36:	bf00      	nop
 8010d38:	0801b83c 	.word	0x0801b83c
 8010d3c:	0801b870 	.word	0x0801b870
 8010d40:	0801b888 	.word	0x0801b888
 8010d44:	20004eec 	.word	0x20004eec
 8010d48:	2000852c 	.word	0x2000852c
 8010d4c:	20004ef0 	.word	0x20004ef0
 8010d50:	20004ef4 	.word	0x20004ef4
 8010d54:	20004ef2 	.word	0x20004ef2
 8010d58:	0801b8b0 	.word	0x0801b8b0
 8010d5c:	0801b8c0 	.word	0x0801b8c0
 8010d60:	0801b8cc 	.word	0x0801b8cc
 8010d64:	20004efc 	.word	0x20004efc
 8010d68:	20004f00 	.word	0x20004f00
 8010d6c:	20004f08 	.word	0x20004f08
 8010d70:	20004f06 	.word	0x20004f06
 8010d74:	2000bd88 	.word	0x2000bd88
 8010d78:	0801b8ec 	.word	0x0801b8ec
 8010d7c:	0801b914 	.word	0x0801b914
 8010d80:	0801b940 	.word	0x0801b940
    }

    if (pcb->remote_port == tcphdr->src &&
 8010d84:	69fb      	ldr	r3, [r7, #28]
 8010d86:	8b1a      	ldrh	r2, [r3, #24]
 8010d88:	4b94      	ldr	r3, [pc, #592]	; (8010fdc <tcp_input+0x524>)
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	881b      	ldrh	r3, [r3, #0]
 8010d8e:	b29b      	uxth	r3, r3
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d13a      	bne.n	8010e0a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8010d94:	69fb      	ldr	r3, [r7, #28]
 8010d96:	8ada      	ldrh	r2, [r3, #22]
 8010d98:	4b90      	ldr	r3, [pc, #576]	; (8010fdc <tcp_input+0x524>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	885b      	ldrh	r3, [r3, #2]
 8010d9e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d132      	bne.n	8010e0a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	685a      	ldr	r2, [r3, #4]
 8010da8:	4b8d      	ldr	r3, [pc, #564]	; (8010fe0 <tcp_input+0x528>)
 8010daa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010dac:	429a      	cmp	r2, r3
 8010dae:	d12c      	bne.n	8010e0a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010db0:	69fb      	ldr	r3, [r7, #28]
 8010db2:	681a      	ldr	r2, [r3, #0]
 8010db4:	4b8a      	ldr	r3, [pc, #552]	; (8010fe0 <tcp_input+0x528>)
 8010db6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010db8:	429a      	cmp	r2, r3
 8010dba:	d126      	bne.n	8010e0a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010dbc:	69fb      	ldr	r3, [r7, #28]
 8010dbe:	68db      	ldr	r3, [r3, #12]
 8010dc0:	69fa      	ldr	r2, [r7, #28]
 8010dc2:	429a      	cmp	r2, r3
 8010dc4:	d106      	bne.n	8010dd4 <tcp_input+0x31c>
 8010dc6:	4b87      	ldr	r3, [pc, #540]	; (8010fe4 <tcp_input+0x52c>)
 8010dc8:	f240 120d 	movw	r2, #269	; 0x10d
 8010dcc:	4986      	ldr	r1, [pc, #536]	; (8010fe8 <tcp_input+0x530>)
 8010dce:	4887      	ldr	r0, [pc, #540]	; (8010fec <tcp_input+0x534>)
 8010dd0:	f007 fc5c 	bl	801868c <iprintf>
      if (prev != NULL) {
 8010dd4:	69bb      	ldr	r3, [r7, #24]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d00a      	beq.n	8010df0 <tcp_input+0x338>
        prev->next = pcb->next;
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	68da      	ldr	r2, [r3, #12]
 8010dde:	69bb      	ldr	r3, [r7, #24]
 8010de0:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010de2:	4b83      	ldr	r3, [pc, #524]	; (8010ff0 <tcp_input+0x538>)
 8010de4:	681a      	ldr	r2, [r3, #0]
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8010dea:	4a81      	ldr	r2, [pc, #516]	; (8010ff0 <tcp_input+0x538>)
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	69fa      	ldr	r2, [r7, #28]
 8010df6:	429a      	cmp	r2, r3
 8010df8:	d111      	bne.n	8010e1e <tcp_input+0x366>
 8010dfa:	4b7a      	ldr	r3, [pc, #488]	; (8010fe4 <tcp_input+0x52c>)
 8010dfc:	f240 1215 	movw	r2, #277	; 0x115
 8010e00:	497c      	ldr	r1, [pc, #496]	; (8010ff4 <tcp_input+0x53c>)
 8010e02:	487a      	ldr	r0, [pc, #488]	; (8010fec <tcp_input+0x534>)
 8010e04:	f007 fc42 	bl	801868c <iprintf>
      break;
 8010e08:	e009      	b.n	8010e1e <tcp_input+0x366>
    }
    prev = pcb;
 8010e0a:	69fb      	ldr	r3, [r7, #28]
 8010e0c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	61fb      	str	r3, [r7, #28]
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	f47f af5e 	bne.w	8010cd8 <tcp_input+0x220>
 8010e1c:	e000      	b.n	8010e20 <tcp_input+0x368>
      break;
 8010e1e:	bf00      	nop
  }

  if (pcb == NULL) {
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f040 8095 	bne.w	8010f52 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e28:	4b73      	ldr	r3, [pc, #460]	; (8010ff8 <tcp_input+0x540>)
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	61fb      	str	r3, [r7, #28]
 8010e2e:	e03f      	b.n	8010eb0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010e30:	69fb      	ldr	r3, [r7, #28]
 8010e32:	7d1b      	ldrb	r3, [r3, #20]
 8010e34:	2b0a      	cmp	r3, #10
 8010e36:	d006      	beq.n	8010e46 <tcp_input+0x38e>
 8010e38:	4b6a      	ldr	r3, [pc, #424]	; (8010fe4 <tcp_input+0x52c>)
 8010e3a:	f240 121f 	movw	r2, #287	; 0x11f
 8010e3e:	496f      	ldr	r1, [pc, #444]	; (8010ffc <tcp_input+0x544>)
 8010e40:	486a      	ldr	r0, [pc, #424]	; (8010fec <tcp_input+0x534>)
 8010e42:	f007 fc23 	bl	801868c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e46:	69fb      	ldr	r3, [r7, #28]
 8010e48:	7a1b      	ldrb	r3, [r3, #8]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d009      	beq.n	8010e62 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e4e:	69fb      	ldr	r3, [r7, #28]
 8010e50:	7a1a      	ldrb	r2, [r3, #8]
 8010e52:	4b63      	ldr	r3, [pc, #396]	; (8010fe0 <tcp_input+0x528>)
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e5a:	3301      	adds	r3, #1
 8010e5c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d122      	bne.n	8010ea8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8010e62:	69fb      	ldr	r3, [r7, #28]
 8010e64:	8b1a      	ldrh	r2, [r3, #24]
 8010e66:	4b5d      	ldr	r3, [pc, #372]	; (8010fdc <tcp_input+0x524>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	881b      	ldrh	r3, [r3, #0]
 8010e6c:	b29b      	uxth	r3, r3
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d11b      	bne.n	8010eaa <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	8ada      	ldrh	r2, [r3, #22]
 8010e76:	4b59      	ldr	r3, [pc, #356]	; (8010fdc <tcp_input+0x524>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	885b      	ldrh	r3, [r3, #2]
 8010e7c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8010e7e:	429a      	cmp	r2, r3
 8010e80:	d113      	bne.n	8010eaa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e82:	69fb      	ldr	r3, [r7, #28]
 8010e84:	685a      	ldr	r2, [r3, #4]
 8010e86:	4b56      	ldr	r3, [pc, #344]	; (8010fe0 <tcp_input+0x528>)
 8010e88:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d10d      	bne.n	8010eaa <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	681a      	ldr	r2, [r3, #0]
 8010e92:	4b53      	ldr	r3, [pc, #332]	; (8010fe0 <tcp_input+0x528>)
 8010e94:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8010e96:	429a      	cmp	r2, r3
 8010e98:	d107      	bne.n	8010eaa <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8010e9a:	69f8      	ldr	r0, [r7, #28]
 8010e9c:	f000 fb54 	bl	8011548 <tcp_timewait_input>
        }
        pbuf_free(p);
 8010ea0:	6878      	ldr	r0, [r7, #4]
 8010ea2:	f7fd fb99 	bl	800e5d8 <pbuf_free>
        return;
 8010ea6:	e1f0      	b.n	801128a <tcp_input+0x7d2>
        continue;
 8010ea8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	68db      	ldr	r3, [r3, #12]
 8010eae:	61fb      	str	r3, [r7, #28]
 8010eb0:	69fb      	ldr	r3, [r7, #28]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d1bc      	bne.n	8010e30 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010eba:	4b51      	ldr	r3, [pc, #324]	; (8011000 <tcp_input+0x548>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	617b      	str	r3, [r7, #20]
 8010ec0:	e02a      	b.n	8010f18 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	7a1b      	ldrb	r3, [r3, #8]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00c      	beq.n	8010ee4 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	7a1a      	ldrb	r2, [r3, #8]
 8010ece:	4b44      	ldr	r3, [pc, #272]	; (8010fe0 <tcp_input+0x528>)
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ed6:	3301      	adds	r3, #1
 8010ed8:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d002      	beq.n	8010ee4 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	61bb      	str	r3, [r7, #24]
        continue;
 8010ee2:	e016      	b.n	8010f12 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	8ada      	ldrh	r2, [r3, #22]
 8010ee8:	4b3c      	ldr	r3, [pc, #240]	; (8010fdc <tcp_input+0x524>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	885b      	ldrh	r3, [r3, #2]
 8010eee:	b29b      	uxth	r3, r3
 8010ef0:	429a      	cmp	r2, r3
 8010ef2:	d10c      	bne.n	8010f0e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	681a      	ldr	r2, [r3, #0]
 8010ef8:	4b39      	ldr	r3, [pc, #228]	; (8010fe0 <tcp_input+0x528>)
 8010efa:	695b      	ldr	r3, [r3, #20]
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d00f      	beq.n	8010f20 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010f00:	697b      	ldr	r3, [r7, #20]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d00d      	beq.n	8010f22 <tcp_input+0x46a>
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d009      	beq.n	8010f22 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010f0e:	697b      	ldr	r3, [r7, #20]
 8010f10:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	68db      	ldr	r3, [r3, #12]
 8010f16:	617b      	str	r3, [r7, #20]
 8010f18:	697b      	ldr	r3, [r7, #20]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d1d1      	bne.n	8010ec2 <tcp_input+0x40a>
 8010f1e:	e000      	b.n	8010f22 <tcp_input+0x46a>
            break;
 8010f20:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010f22:	697b      	ldr	r3, [r7, #20]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d014      	beq.n	8010f52 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8010f28:	69bb      	ldr	r3, [r7, #24]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d00a      	beq.n	8010f44 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010f2e:	697b      	ldr	r3, [r7, #20]
 8010f30:	68da      	ldr	r2, [r3, #12]
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8010f36:	4b32      	ldr	r3, [pc, #200]	; (8011000 <tcp_input+0x548>)
 8010f38:	681a      	ldr	r2, [r3, #0]
 8010f3a:	697b      	ldr	r3, [r7, #20]
 8010f3c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010f3e:	4a30      	ldr	r2, [pc, #192]	; (8011000 <tcp_input+0x548>)
 8010f40:	697b      	ldr	r3, [r7, #20]
 8010f42:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010f44:	6978      	ldr	r0, [r7, #20]
 8010f46:	f000 fa01 	bl	801134c <tcp_listen_input>
      }
      pbuf_free(p);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7fd fb44 	bl	800e5d8 <pbuf_free>
      return;
 8010f50:	e19b      	b.n	801128a <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	f000 8160 	beq.w	801121a <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8010f5a:	4b2a      	ldr	r3, [pc, #168]	; (8011004 <tcp_input+0x54c>)
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	891a      	ldrh	r2, [r3, #8]
 8010f64:	4b27      	ldr	r3, [pc, #156]	; (8011004 <tcp_input+0x54c>)
 8010f66:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8010f68:	4a26      	ldr	r2, [pc, #152]	; (8011004 <tcp_input+0x54c>)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8010f6e:	4b1b      	ldr	r3, [pc, #108]	; (8010fdc <tcp_input+0x524>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	4a24      	ldr	r2, [pc, #144]	; (8011004 <tcp_input+0x54c>)
 8010f74:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8010f76:	4b24      	ldr	r3, [pc, #144]	; (8011008 <tcp_input+0x550>)
 8010f78:	2200      	movs	r2, #0
 8010f7a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8010f7c:	4b23      	ldr	r3, [pc, #140]	; (801100c <tcp_input+0x554>)
 8010f7e:	2200      	movs	r2, #0
 8010f80:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010f82:	4b23      	ldr	r3, [pc, #140]	; (8011010 <tcp_input+0x558>)
 8010f84:	2200      	movs	r2, #0
 8010f86:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010f88:	4b22      	ldr	r3, [pc, #136]	; (8011014 <tcp_input+0x55c>)
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	f003 0308 	and.w	r3, r3, #8
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d006      	beq.n	8010fa2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	7b5b      	ldrb	r3, [r3, #13]
 8010f98:	f043 0301 	orr.w	r3, r3, #1
 8010f9c:	b2da      	uxtb	r2, r3
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010fa2:	69fb      	ldr	r3, [r7, #28]
 8010fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d038      	beq.n	801101c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010faa:	69f8      	ldr	r0, [r7, #28]
 8010fac:	f7ff f870 	bl	8010090 <tcp_process_refused_data>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	f113 0f0d 	cmn.w	r3, #13
 8010fb6:	d007      	beq.n	8010fc8 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010fb8:	69fb      	ldr	r3, [r7, #28]
 8010fba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d02d      	beq.n	801101c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010fc0:	4b15      	ldr	r3, [pc, #84]	; (8011018 <tcp_input+0x560>)
 8010fc2:	881b      	ldrh	r3, [r3, #0]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d029      	beq.n	801101c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	f040 8104 	bne.w	80111da <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010fd2:	69f8      	ldr	r0, [r7, #28]
 8010fd4:	f003 fe16 	bl	8014c04 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010fd8:	e0ff      	b.n	80111da <tcp_input+0x722>
 8010fda:	bf00      	nop
 8010fdc:	20004eec 	.word	0x20004eec
 8010fe0:	2000852c 	.word	0x2000852c
 8010fe4:	0801b83c 	.word	0x0801b83c
 8010fe8:	0801b968 	.word	0x0801b968
 8010fec:	0801b888 	.word	0x0801b888
 8010ff0:	2000bd88 	.word	0x2000bd88
 8010ff4:	0801b994 	.word	0x0801b994
 8010ff8:	2000bd98 	.word	0x2000bd98
 8010ffc:	0801b9c0 	.word	0x0801b9c0
 8011000:	2000bd90 	.word	0x2000bd90
 8011004:	20004edc 	.word	0x20004edc
 8011008:	20004f0c 	.word	0x20004f0c
 801100c:	20004f09 	.word	0x20004f09
 8011010:	20004f04 	.word	0x20004f04
 8011014:	20004f08 	.word	0x20004f08
 8011018:	20004f06 	.word	0x20004f06
      }
    }
    tcp_input_pcb = pcb;
 801101c:	4a9c      	ldr	r2, [pc, #624]	; (8011290 <tcp_input+0x7d8>)
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011022:	69f8      	ldr	r0, [r7, #28]
 8011024:	f000 fb0a 	bl	801163c <tcp_process>
 8011028:	4603      	mov	r3, r0
 801102a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801102c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011030:	f113 0f0d 	cmn.w	r3, #13
 8011034:	f000 80d3 	beq.w	80111de <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8011038:	4b96      	ldr	r3, [pc, #600]	; (8011294 <tcp_input+0x7dc>)
 801103a:	781b      	ldrb	r3, [r3, #0]
 801103c:	f003 0308 	and.w	r3, r3, #8
 8011040:	2b00      	cmp	r3, #0
 8011042:	d015      	beq.n	8011070 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801104a:	2b00      	cmp	r3, #0
 801104c:	d008      	beq.n	8011060 <tcp_input+0x5a8>
 801104e:	69fb      	ldr	r3, [r7, #28]
 8011050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011054:	69fa      	ldr	r2, [r7, #28]
 8011056:	6912      	ldr	r2, [r2, #16]
 8011058:	f06f 010d 	mvn.w	r1, #13
 801105c:	4610      	mov	r0, r2
 801105e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011060:	69f9      	ldr	r1, [r7, #28]
 8011062:	488d      	ldr	r0, [pc, #564]	; (8011298 <tcp_input+0x7e0>)
 8011064:	f7ff fbb0 	bl	80107c8 <tcp_pcb_remove>
        tcp_free(pcb);
 8011068:	69f8      	ldr	r0, [r7, #28]
 801106a:	f7fd fecb 	bl	800ee04 <tcp_free>
 801106e:	e0c1      	b.n	80111f4 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8011070:	2300      	movs	r3, #0
 8011072:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011074:	4b89      	ldr	r3, [pc, #548]	; (801129c <tcp_input+0x7e4>)
 8011076:	881b      	ldrh	r3, [r3, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d01d      	beq.n	80110b8 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801107c:	4b87      	ldr	r3, [pc, #540]	; (801129c <tcp_input+0x7e4>)
 801107e:	881b      	ldrh	r3, [r3, #0]
 8011080:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011088:	2b00      	cmp	r3, #0
 801108a:	d00a      	beq.n	80110a2 <tcp_input+0x5ea>
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011092:	69fa      	ldr	r2, [r7, #28]
 8011094:	6910      	ldr	r0, [r2, #16]
 8011096:	89fa      	ldrh	r2, [r7, #14]
 8011098:	69f9      	ldr	r1, [r7, #28]
 801109a:	4798      	blx	r3
 801109c:	4603      	mov	r3, r0
 801109e:	74fb      	strb	r3, [r7, #19]
 80110a0:	e001      	b.n	80110a6 <tcp_input+0x5ee>
 80110a2:	2300      	movs	r3, #0
 80110a4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80110a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80110aa:	f113 0f0d 	cmn.w	r3, #13
 80110ae:	f000 8098 	beq.w	80111e2 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 80110b2:	4b7a      	ldr	r3, [pc, #488]	; (801129c <tcp_input+0x7e4>)
 80110b4:	2200      	movs	r2, #0
 80110b6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80110b8:	69f8      	ldr	r0, [r7, #28]
 80110ba:	f000 f907 	bl	80112cc <tcp_input_delayed_close>
 80110be:	4603      	mov	r3, r0
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f040 8090 	bne.w	80111e6 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80110c6:	4b76      	ldr	r3, [pc, #472]	; (80112a0 <tcp_input+0x7e8>)
 80110c8:	681b      	ldr	r3, [r3, #0]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d041      	beq.n	8011152 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80110ce:	69fb      	ldr	r3, [r7, #28]
 80110d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d006      	beq.n	80110e4 <tcp_input+0x62c>
 80110d6:	4b73      	ldr	r3, [pc, #460]	; (80112a4 <tcp_input+0x7ec>)
 80110d8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80110dc:	4972      	ldr	r1, [pc, #456]	; (80112a8 <tcp_input+0x7f0>)
 80110de:	4873      	ldr	r0, [pc, #460]	; (80112ac <tcp_input+0x7f4>)
 80110e0:	f007 fad4 	bl	801868c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80110e4:	69fb      	ldr	r3, [r7, #28]
 80110e6:	8b5b      	ldrh	r3, [r3, #26]
 80110e8:	f003 0310 	and.w	r3, r3, #16
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d008      	beq.n	8011102 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80110f0:	4b6b      	ldr	r3, [pc, #428]	; (80112a0 <tcp_input+0x7e8>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7fd fa6f 	bl	800e5d8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80110fa:	69f8      	ldr	r0, [r7, #28]
 80110fc:	f7fe f9c6 	bl	800f48c <tcp_abort>
            goto aborted;
 8011100:	e078      	b.n	80111f4 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011102:	69fb      	ldr	r3, [r7, #28]
 8011104:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00c      	beq.n	8011126 <tcp_input+0x66e>
 801110c:	69fb      	ldr	r3, [r7, #28]
 801110e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011112:	69fb      	ldr	r3, [r7, #28]
 8011114:	6918      	ldr	r0, [r3, #16]
 8011116:	4b62      	ldr	r3, [pc, #392]	; (80112a0 <tcp_input+0x7e8>)
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	2300      	movs	r3, #0
 801111c:	69f9      	ldr	r1, [r7, #28]
 801111e:	47a0      	blx	r4
 8011120:	4603      	mov	r3, r0
 8011122:	74fb      	strb	r3, [r7, #19]
 8011124:	e008      	b.n	8011138 <tcp_input+0x680>
 8011126:	4b5e      	ldr	r3, [pc, #376]	; (80112a0 <tcp_input+0x7e8>)
 8011128:	681a      	ldr	r2, [r3, #0]
 801112a:	2300      	movs	r3, #0
 801112c:	69f9      	ldr	r1, [r7, #28]
 801112e:	2000      	movs	r0, #0
 8011130:	f7ff f884 	bl	801023c <tcp_recv_null>
 8011134:	4603      	mov	r3, r0
 8011136:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011138:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801113c:	f113 0f0d 	cmn.w	r3, #13
 8011140:	d053      	beq.n	80111ea <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011142:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d003      	beq.n	8011152 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801114a:	4b55      	ldr	r3, [pc, #340]	; (80112a0 <tcp_input+0x7e8>)
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	69fb      	ldr	r3, [r7, #28]
 8011150:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011152:	4b50      	ldr	r3, [pc, #320]	; (8011294 <tcp_input+0x7dc>)
 8011154:	781b      	ldrb	r3, [r3, #0]
 8011156:	f003 0320 	and.w	r3, r3, #32
 801115a:	2b00      	cmp	r3, #0
 801115c:	d030      	beq.n	80111c0 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 801115e:	69fb      	ldr	r3, [r7, #28]
 8011160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011162:	2b00      	cmp	r3, #0
 8011164:	d009      	beq.n	801117a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801116a:	7b5a      	ldrb	r2, [r3, #13]
 801116c:	69fb      	ldr	r3, [r7, #28]
 801116e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011170:	f042 0220 	orr.w	r2, r2, #32
 8011174:	b2d2      	uxtb	r2, r2
 8011176:	735a      	strb	r2, [r3, #13]
 8011178:	e022      	b.n	80111c0 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801117a:	69fb      	ldr	r3, [r7, #28]
 801117c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801117e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011182:	d005      	beq.n	8011190 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011188:	3301      	adds	r3, #1
 801118a:	b29a      	uxth	r2, r3
 801118c:	69fb      	ldr	r3, [r7, #28]
 801118e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011196:	2b00      	cmp	r3, #0
 8011198:	d00b      	beq.n	80111b2 <tcp_input+0x6fa>
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80111a0:	69fb      	ldr	r3, [r7, #28]
 80111a2:	6918      	ldr	r0, [r3, #16]
 80111a4:	2300      	movs	r3, #0
 80111a6:	2200      	movs	r2, #0
 80111a8:	69f9      	ldr	r1, [r7, #28]
 80111aa:	47a0      	blx	r4
 80111ac:	4603      	mov	r3, r0
 80111ae:	74fb      	strb	r3, [r7, #19]
 80111b0:	e001      	b.n	80111b6 <tcp_input+0x6fe>
 80111b2:	2300      	movs	r3, #0
 80111b4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80111b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80111ba:	f113 0f0d 	cmn.w	r3, #13
 80111be:	d016      	beq.n	80111ee <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80111c0:	4b33      	ldr	r3, [pc, #204]	; (8011290 <tcp_input+0x7d8>)
 80111c2:	2200      	movs	r2, #0
 80111c4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80111c6:	69f8      	ldr	r0, [r7, #28]
 80111c8:	f000 f880 	bl	80112cc <tcp_input_delayed_close>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d10f      	bne.n	80111f2 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80111d2:	69f8      	ldr	r0, [r7, #28]
 80111d4:	f002 ff10 	bl	8013ff8 <tcp_output>
 80111d8:	e00c      	b.n	80111f4 <tcp_input+0x73c>
        goto aborted;
 80111da:	bf00      	nop
 80111dc:	e00a      	b.n	80111f4 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80111de:	bf00      	nop
 80111e0:	e008      	b.n	80111f4 <tcp_input+0x73c>
              goto aborted;
 80111e2:	bf00      	nop
 80111e4:	e006      	b.n	80111f4 <tcp_input+0x73c>
          goto aborted;
 80111e6:	bf00      	nop
 80111e8:	e004      	b.n	80111f4 <tcp_input+0x73c>
            goto aborted;
 80111ea:	bf00      	nop
 80111ec:	e002      	b.n	80111f4 <tcp_input+0x73c>
              goto aborted;
 80111ee:	bf00      	nop
 80111f0:	e000      	b.n	80111f4 <tcp_input+0x73c>
          goto aborted;
 80111f2:	bf00      	nop
    tcp_input_pcb = NULL;
 80111f4:	4b26      	ldr	r3, [pc, #152]	; (8011290 <tcp_input+0x7d8>)
 80111f6:	2200      	movs	r2, #0
 80111f8:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80111fa:	4b29      	ldr	r3, [pc, #164]	; (80112a0 <tcp_input+0x7e8>)
 80111fc:	2200      	movs	r2, #0
 80111fe:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011200:	4b2b      	ldr	r3, [pc, #172]	; (80112b0 <tcp_input+0x7f8>)
 8011202:	685b      	ldr	r3, [r3, #4]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d03f      	beq.n	8011288 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8011208:	4b29      	ldr	r3, [pc, #164]	; (80112b0 <tcp_input+0x7f8>)
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	4618      	mov	r0, r3
 801120e:	f7fd f9e3 	bl	800e5d8 <pbuf_free>
      inseg.p = NULL;
 8011212:	4b27      	ldr	r3, [pc, #156]	; (80112b0 <tcp_input+0x7f8>)
 8011214:	2200      	movs	r2, #0
 8011216:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011218:	e036      	b.n	8011288 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801121a:	4b26      	ldr	r3, [pc, #152]	; (80112b4 <tcp_input+0x7fc>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	899b      	ldrh	r3, [r3, #12]
 8011220:	b29b      	uxth	r3, r3
 8011222:	4618      	mov	r0, r3
 8011224:	f7fb fb30 	bl	800c888 <lwip_htons>
 8011228:	4603      	mov	r3, r0
 801122a:	b2db      	uxtb	r3, r3
 801122c:	f003 0304 	and.w	r3, r3, #4
 8011230:	2b00      	cmp	r3, #0
 8011232:	d118      	bne.n	8011266 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011234:	4b20      	ldr	r3, [pc, #128]	; (80112b8 <tcp_input+0x800>)
 8011236:	6819      	ldr	r1, [r3, #0]
 8011238:	4b20      	ldr	r3, [pc, #128]	; (80112bc <tcp_input+0x804>)
 801123a:	881b      	ldrh	r3, [r3, #0]
 801123c:	461a      	mov	r2, r3
 801123e:	4b20      	ldr	r3, [pc, #128]	; (80112c0 <tcp_input+0x808>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011244:	4b1b      	ldr	r3, [pc, #108]	; (80112b4 <tcp_input+0x7fc>)
 8011246:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011248:	885b      	ldrh	r3, [r3, #2]
 801124a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801124c:	4a19      	ldr	r2, [pc, #100]	; (80112b4 <tcp_input+0x7fc>)
 801124e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011250:	8812      	ldrh	r2, [r2, #0]
 8011252:	b292      	uxth	r2, r2
 8011254:	9202      	str	r2, [sp, #8]
 8011256:	9301      	str	r3, [sp, #4]
 8011258:	4b1a      	ldr	r3, [pc, #104]	; (80112c4 <tcp_input+0x80c>)
 801125a:	9300      	str	r3, [sp, #0]
 801125c:	4b1a      	ldr	r3, [pc, #104]	; (80112c8 <tcp_input+0x810>)
 801125e:	4602      	mov	r2, r0
 8011260:	2000      	movs	r0, #0
 8011262:	f003 fc7d 	bl	8014b60 <tcp_rst>
    pbuf_free(p);
 8011266:	6878      	ldr	r0, [r7, #4]
 8011268:	f7fd f9b6 	bl	800e5d8 <pbuf_free>
  return;
 801126c:	e00c      	b.n	8011288 <tcp_input+0x7d0>
    goto dropped;
 801126e:	bf00      	nop
 8011270:	e006      	b.n	8011280 <tcp_input+0x7c8>
    goto dropped;
 8011272:	bf00      	nop
 8011274:	e004      	b.n	8011280 <tcp_input+0x7c8>
    goto dropped;
 8011276:	bf00      	nop
 8011278:	e002      	b.n	8011280 <tcp_input+0x7c8>
      goto dropped;
 801127a:	bf00      	nop
 801127c:	e000      	b.n	8011280 <tcp_input+0x7c8>
      goto dropped;
 801127e:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011280:	6878      	ldr	r0, [r7, #4]
 8011282:	f7fd f9a9 	bl	800e5d8 <pbuf_free>
 8011286:	e000      	b.n	801128a <tcp_input+0x7d2>
  return;
 8011288:	bf00      	nop
}
 801128a:	3724      	adds	r7, #36	; 0x24
 801128c:	46bd      	mov	sp, r7
 801128e:	bd90      	pop	{r4, r7, pc}
 8011290:	2000bd9c 	.word	0x2000bd9c
 8011294:	20004f09 	.word	0x20004f09
 8011298:	2000bd88 	.word	0x2000bd88
 801129c:	20004f04 	.word	0x20004f04
 80112a0:	20004f0c 	.word	0x20004f0c
 80112a4:	0801b83c 	.word	0x0801b83c
 80112a8:	0801b9f0 	.word	0x0801b9f0
 80112ac:	0801b888 	.word	0x0801b888
 80112b0:	20004edc 	.word	0x20004edc
 80112b4:	20004eec 	.word	0x20004eec
 80112b8:	20004f00 	.word	0x20004f00
 80112bc:	20004f06 	.word	0x20004f06
 80112c0:	20004efc 	.word	0x20004efc
 80112c4:	2000853c 	.word	0x2000853c
 80112c8:	20008540 	.word	0x20008540

080112cc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d106      	bne.n	80112e8 <tcp_input_delayed_close+0x1c>
 80112da:	4b17      	ldr	r3, [pc, #92]	; (8011338 <tcp_input_delayed_close+0x6c>)
 80112dc:	f240 225a 	movw	r2, #602	; 0x25a
 80112e0:	4916      	ldr	r1, [pc, #88]	; (801133c <tcp_input_delayed_close+0x70>)
 80112e2:	4817      	ldr	r0, [pc, #92]	; (8011340 <tcp_input_delayed_close+0x74>)
 80112e4:	f007 f9d2 	bl	801868c <iprintf>

  if (recv_flags & TF_CLOSED) {
 80112e8:	4b16      	ldr	r3, [pc, #88]	; (8011344 <tcp_input_delayed_close+0x78>)
 80112ea:	781b      	ldrb	r3, [r3, #0]
 80112ec:	f003 0310 	and.w	r3, r3, #16
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d01c      	beq.n	801132e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	8b5b      	ldrh	r3, [r3, #26]
 80112f8:	f003 0310 	and.w	r3, r3, #16
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d10d      	bne.n	801131c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011306:	2b00      	cmp	r3, #0
 8011308:	d008      	beq.n	801131c <tcp_input_delayed_close+0x50>
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011310:	687a      	ldr	r2, [r7, #4]
 8011312:	6912      	ldr	r2, [r2, #16]
 8011314:	f06f 010e 	mvn.w	r1, #14
 8011318:	4610      	mov	r0, r2
 801131a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801131c:	6879      	ldr	r1, [r7, #4]
 801131e:	480a      	ldr	r0, [pc, #40]	; (8011348 <tcp_input_delayed_close+0x7c>)
 8011320:	f7ff fa52 	bl	80107c8 <tcp_pcb_remove>
    tcp_free(pcb);
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f7fd fd6d 	bl	800ee04 <tcp_free>
    return 1;
 801132a:	2301      	movs	r3, #1
 801132c:	e000      	b.n	8011330 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801132e:	2300      	movs	r3, #0
}
 8011330:	4618      	mov	r0, r3
 8011332:	3708      	adds	r7, #8
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	0801b83c 	.word	0x0801b83c
 801133c:	0801ba0c 	.word	0x0801ba0c
 8011340:	0801b888 	.word	0x0801b888
 8011344:	20004f09 	.word	0x20004f09
 8011348:	2000bd88 	.word	0x2000bd88

0801134c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801134c:	b590      	push	{r4, r7, lr}
 801134e:	b08b      	sub	sp, #44	; 0x2c
 8011350:	af04      	add	r7, sp, #16
 8011352:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011354:	4b6f      	ldr	r3, [pc, #444]	; (8011514 <tcp_listen_input+0x1c8>)
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	f003 0304 	and.w	r3, r3, #4
 801135c:	2b00      	cmp	r3, #0
 801135e:	f040 80d2 	bne.w	8011506 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d106      	bne.n	8011376 <tcp_listen_input+0x2a>
 8011368:	4b6b      	ldr	r3, [pc, #428]	; (8011518 <tcp_listen_input+0x1cc>)
 801136a:	f240 2281 	movw	r2, #641	; 0x281
 801136e:	496b      	ldr	r1, [pc, #428]	; (801151c <tcp_listen_input+0x1d0>)
 8011370:	486b      	ldr	r0, [pc, #428]	; (8011520 <tcp_listen_input+0x1d4>)
 8011372:	f007 f98b 	bl	801868c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011376:	4b67      	ldr	r3, [pc, #412]	; (8011514 <tcp_listen_input+0x1c8>)
 8011378:	781b      	ldrb	r3, [r3, #0]
 801137a:	f003 0310 	and.w	r3, r3, #16
 801137e:	2b00      	cmp	r3, #0
 8011380:	d019      	beq.n	80113b6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011382:	4b68      	ldr	r3, [pc, #416]	; (8011524 <tcp_listen_input+0x1d8>)
 8011384:	6819      	ldr	r1, [r3, #0]
 8011386:	4b68      	ldr	r3, [pc, #416]	; (8011528 <tcp_listen_input+0x1dc>)
 8011388:	881b      	ldrh	r3, [r3, #0]
 801138a:	461a      	mov	r2, r3
 801138c:	4b67      	ldr	r3, [pc, #412]	; (801152c <tcp_listen_input+0x1e0>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011392:	4b67      	ldr	r3, [pc, #412]	; (8011530 <tcp_listen_input+0x1e4>)
 8011394:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011396:	885b      	ldrh	r3, [r3, #2]
 8011398:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801139a:	4a65      	ldr	r2, [pc, #404]	; (8011530 <tcp_listen_input+0x1e4>)
 801139c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801139e:	8812      	ldrh	r2, [r2, #0]
 80113a0:	b292      	uxth	r2, r2
 80113a2:	9202      	str	r2, [sp, #8]
 80113a4:	9301      	str	r3, [sp, #4]
 80113a6:	4b63      	ldr	r3, [pc, #396]	; (8011534 <tcp_listen_input+0x1e8>)
 80113a8:	9300      	str	r3, [sp, #0]
 80113aa:	4b63      	ldr	r3, [pc, #396]	; (8011538 <tcp_listen_input+0x1ec>)
 80113ac:	4602      	mov	r2, r0
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f003 fbd6 	bl	8014b60 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80113b4:	e0a9      	b.n	801150a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80113b6:	4b57      	ldr	r3, [pc, #348]	; (8011514 <tcp_listen_input+0x1c8>)
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	f003 0302 	and.w	r3, r3, #2
 80113be:	2b00      	cmp	r3, #0
 80113c0:	f000 80a3 	beq.w	801150a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	7d5b      	ldrb	r3, [r3, #21]
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7ff f85b 	bl	8010484 <tcp_alloc>
 80113ce:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d111      	bne.n	80113fa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	699b      	ldr	r3, [r3, #24]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00a      	beq.n	80113f4 <tcp_listen_input+0xa8>
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	699b      	ldr	r3, [r3, #24]
 80113e2:	687a      	ldr	r2, [r7, #4]
 80113e4:	6910      	ldr	r0, [r2, #16]
 80113e6:	f04f 32ff 	mov.w	r2, #4294967295
 80113ea:	2100      	movs	r1, #0
 80113ec:	4798      	blx	r3
 80113ee:	4603      	mov	r3, r0
 80113f0:	73bb      	strb	r3, [r7, #14]
      return;
 80113f2:	e08b      	b.n	801150c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80113f4:	23f0      	movs	r3, #240	; 0xf0
 80113f6:	73bb      	strb	r3, [r7, #14]
      return;
 80113f8:	e088      	b.n	801150c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80113fa:	4b50      	ldr	r3, [pc, #320]	; (801153c <tcp_listen_input+0x1f0>)
 80113fc:	695a      	ldr	r2, [r3, #20]
 80113fe:	697b      	ldr	r3, [r7, #20]
 8011400:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011402:	4b4e      	ldr	r3, [pc, #312]	; (801153c <tcp_listen_input+0x1f0>)
 8011404:	691a      	ldr	r2, [r3, #16]
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	8ada      	ldrh	r2, [r3, #22]
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011412:	4b47      	ldr	r3, [pc, #284]	; (8011530 <tcp_listen_input+0x1e4>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	881b      	ldrh	r3, [r3, #0]
 8011418:	b29a      	uxth	r2, r3
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801141e:	697b      	ldr	r3, [r7, #20]
 8011420:	2203      	movs	r2, #3
 8011422:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011424:	4b41      	ldr	r3, [pc, #260]	; (801152c <tcp_listen_input+0x1e0>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	1c5a      	adds	r2, r3, #1
 801142a:	697b      	ldr	r3, [r7, #20]
 801142c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011432:	697b      	ldr	r3, [r7, #20]
 8011434:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011436:	6978      	ldr	r0, [r7, #20]
 8011438:	f7ff fa5a 	bl	80108f0 <tcp_next_iss>
 801143c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	693a      	ldr	r2, [r7, #16]
 8011442:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	693a      	ldr	r2, [r7, #16]
 8011448:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801144a:	697b      	ldr	r3, [r7, #20]
 801144c:	693a      	ldr	r2, [r7, #16]
 801144e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	693a      	ldr	r2, [r7, #16]
 8011454:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011456:	4b35      	ldr	r3, [pc, #212]	; (801152c <tcp_listen_input+0x1e0>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	1e5a      	subs	r2, r3, #1
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	691a      	ldr	r2, [r3, #16]
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011468:	697b      	ldr	r3, [r7, #20]
 801146a:	687a      	ldr	r2, [r7, #4]
 801146c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	7a5b      	ldrb	r3, [r3, #9]
 8011472:	f003 030c 	and.w	r3, r3, #12
 8011476:	b2da      	uxtb	r2, r3
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	7a1a      	ldrb	r2, [r3, #8]
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011484:	4b2e      	ldr	r3, [pc, #184]	; (8011540 <tcp_listen_input+0x1f4>)
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	60da      	str	r2, [r3, #12]
 801148c:	4a2c      	ldr	r2, [pc, #176]	; (8011540 <tcp_listen_input+0x1f4>)
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	6013      	str	r3, [r2, #0]
 8011492:	f003 fd27 	bl	8014ee4 <tcp_timer_needed>
 8011496:	4b2b      	ldr	r3, [pc, #172]	; (8011544 <tcp_listen_input+0x1f8>)
 8011498:	2201      	movs	r2, #1
 801149a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801149c:	6978      	ldr	r0, [r7, #20]
 801149e:	f001 fd8d 	bl	8012fbc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80114a2:	4b23      	ldr	r3, [pc, #140]	; (8011530 <tcp_listen_input+0x1e4>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	89db      	ldrh	r3, [r3, #14]
 80114a8:	b29a      	uxth	r2, r3
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80114c0:	697b      	ldr	r3, [r7, #20]
 80114c2:	3304      	adds	r3, #4
 80114c4:	4618      	mov	r0, r3
 80114c6:	f005 fc4b 	bl	8016d60 <ip4_route>
 80114ca:	4601      	mov	r1, r0
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	3304      	adds	r3, #4
 80114d0:	461a      	mov	r2, r3
 80114d2:	4620      	mov	r0, r4
 80114d4:	f7ff fa32 	bl	801093c <tcp_eff_send_mss_netif>
 80114d8:	4603      	mov	r3, r0
 80114da:	461a      	mov	r2, r3
 80114dc:	697b      	ldr	r3, [r7, #20]
 80114de:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80114e0:	2112      	movs	r1, #18
 80114e2:	6978      	ldr	r0, [r7, #20]
 80114e4:	f002 fc9a 	bl	8013e1c <tcp_enqueue_flags>
 80114e8:	4603      	mov	r3, r0
 80114ea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80114ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d004      	beq.n	80114fe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80114f4:	2100      	movs	r1, #0
 80114f6:	6978      	ldr	r0, [r7, #20]
 80114f8:	f7fd ff0a 	bl	800f310 <tcp_abandon>
      return;
 80114fc:	e006      	b.n	801150c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80114fe:	6978      	ldr	r0, [r7, #20]
 8011500:	f002 fd7a 	bl	8013ff8 <tcp_output>
  return;
 8011504:	e001      	b.n	801150a <tcp_listen_input+0x1be>
    return;
 8011506:	bf00      	nop
 8011508:	e000      	b.n	801150c <tcp_listen_input+0x1c0>
  return;
 801150a:	bf00      	nop
}
 801150c:	371c      	adds	r7, #28
 801150e:	46bd      	mov	sp, r7
 8011510:	bd90      	pop	{r4, r7, pc}
 8011512:	bf00      	nop
 8011514:	20004f08 	.word	0x20004f08
 8011518:	0801b83c 	.word	0x0801b83c
 801151c:	0801ba34 	.word	0x0801ba34
 8011520:	0801b888 	.word	0x0801b888
 8011524:	20004f00 	.word	0x20004f00
 8011528:	20004f06 	.word	0x20004f06
 801152c:	20004efc 	.word	0x20004efc
 8011530:	20004eec 	.word	0x20004eec
 8011534:	2000853c 	.word	0x2000853c
 8011538:	20008540 	.word	0x20008540
 801153c:	2000852c 	.word	0x2000852c
 8011540:	2000bd88 	.word	0x2000bd88
 8011544:	2000bd84 	.word	0x2000bd84

08011548 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b086      	sub	sp, #24
 801154c:	af04      	add	r7, sp, #16
 801154e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011550:	4b2f      	ldr	r3, [pc, #188]	; (8011610 <tcp_timewait_input+0xc8>)
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	f003 0304 	and.w	r3, r3, #4
 8011558:	2b00      	cmp	r3, #0
 801155a:	d153      	bne.n	8011604 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d106      	bne.n	8011570 <tcp_timewait_input+0x28>
 8011562:	4b2c      	ldr	r3, [pc, #176]	; (8011614 <tcp_timewait_input+0xcc>)
 8011564:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011568:	492b      	ldr	r1, [pc, #172]	; (8011618 <tcp_timewait_input+0xd0>)
 801156a:	482c      	ldr	r0, [pc, #176]	; (801161c <tcp_timewait_input+0xd4>)
 801156c:	f007 f88e 	bl	801868c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011570:	4b27      	ldr	r3, [pc, #156]	; (8011610 <tcp_timewait_input+0xc8>)
 8011572:	781b      	ldrb	r3, [r3, #0]
 8011574:	f003 0302 	and.w	r3, r3, #2
 8011578:	2b00      	cmp	r3, #0
 801157a:	d02a      	beq.n	80115d2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801157c:	4b28      	ldr	r3, [pc, #160]	; (8011620 <tcp_timewait_input+0xd8>)
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011584:	1ad3      	subs	r3, r2, r3
 8011586:	2b00      	cmp	r3, #0
 8011588:	db2d      	blt.n	80115e6 <tcp_timewait_input+0x9e>
 801158a:	4b25      	ldr	r3, [pc, #148]	; (8011620 <tcp_timewait_input+0xd8>)
 801158c:	681a      	ldr	r2, [r3, #0]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011592:	6879      	ldr	r1, [r7, #4]
 8011594:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011596:	440b      	add	r3, r1
 8011598:	1ad3      	subs	r3, r2, r3
 801159a:	2b00      	cmp	r3, #0
 801159c:	dc23      	bgt.n	80115e6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801159e:	4b21      	ldr	r3, [pc, #132]	; (8011624 <tcp_timewait_input+0xdc>)
 80115a0:	6819      	ldr	r1, [r3, #0]
 80115a2:	4b21      	ldr	r3, [pc, #132]	; (8011628 <tcp_timewait_input+0xe0>)
 80115a4:	881b      	ldrh	r3, [r3, #0]
 80115a6:	461a      	mov	r2, r3
 80115a8:	4b1d      	ldr	r3, [pc, #116]	; (8011620 <tcp_timewait_input+0xd8>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115ae:	4b1f      	ldr	r3, [pc, #124]	; (801162c <tcp_timewait_input+0xe4>)
 80115b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115b2:	885b      	ldrh	r3, [r3, #2]
 80115b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80115b6:	4a1d      	ldr	r2, [pc, #116]	; (801162c <tcp_timewait_input+0xe4>)
 80115b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80115ba:	8812      	ldrh	r2, [r2, #0]
 80115bc:	b292      	uxth	r2, r2
 80115be:	9202      	str	r2, [sp, #8]
 80115c0:	9301      	str	r3, [sp, #4]
 80115c2:	4b1b      	ldr	r3, [pc, #108]	; (8011630 <tcp_timewait_input+0xe8>)
 80115c4:	9300      	str	r3, [sp, #0]
 80115c6:	4b1b      	ldr	r3, [pc, #108]	; (8011634 <tcp_timewait_input+0xec>)
 80115c8:	4602      	mov	r2, r0
 80115ca:	6878      	ldr	r0, [r7, #4]
 80115cc:	f003 fac8 	bl	8014b60 <tcp_rst>
      return;
 80115d0:	e01b      	b.n	801160a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80115d2:	4b0f      	ldr	r3, [pc, #60]	; (8011610 <tcp_timewait_input+0xc8>)
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	f003 0301 	and.w	r3, r3, #1
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d003      	beq.n	80115e6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80115de:	4b16      	ldr	r3, [pc, #88]	; (8011638 <tcp_timewait_input+0xf0>)
 80115e0:	681a      	ldr	r2, [r3, #0]
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80115e6:	4b10      	ldr	r3, [pc, #64]	; (8011628 <tcp_timewait_input+0xe0>)
 80115e8:	881b      	ldrh	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d00c      	beq.n	8011608 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	8b5b      	ldrh	r3, [r3, #26]
 80115f2:	f043 0302 	orr.w	r3, r3, #2
 80115f6:	b29a      	uxth	r2, r3
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f002 fcfb 	bl	8013ff8 <tcp_output>
  }
  return;
 8011602:	e001      	b.n	8011608 <tcp_timewait_input+0xc0>
    return;
 8011604:	bf00      	nop
 8011606:	e000      	b.n	801160a <tcp_timewait_input+0xc2>
  return;
 8011608:	bf00      	nop
}
 801160a:	3708      	adds	r7, #8
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}
 8011610:	20004f08 	.word	0x20004f08
 8011614:	0801b83c 	.word	0x0801b83c
 8011618:	0801ba54 	.word	0x0801ba54
 801161c:	0801b888 	.word	0x0801b888
 8011620:	20004efc 	.word	0x20004efc
 8011624:	20004f00 	.word	0x20004f00
 8011628:	20004f06 	.word	0x20004f06
 801162c:	20004eec 	.word	0x20004eec
 8011630:	2000853c 	.word	0x2000853c
 8011634:	20008540 	.word	0x20008540
 8011638:	2000bd8c 	.word	0x2000bd8c

0801163c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801163c:	b590      	push	{r4, r7, lr}
 801163e:	b08d      	sub	sp, #52	; 0x34
 8011640:	af04      	add	r7, sp, #16
 8011642:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011644:	2300      	movs	r3, #0
 8011646:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011648:	2300      	movs	r3, #0
 801164a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d106      	bne.n	8011660 <tcp_process+0x24>
 8011652:	4ba5      	ldr	r3, [pc, #660]	; (80118e8 <tcp_process+0x2ac>)
 8011654:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011658:	49a4      	ldr	r1, [pc, #656]	; (80118ec <tcp_process+0x2b0>)
 801165a:	48a5      	ldr	r0, [pc, #660]	; (80118f0 <tcp_process+0x2b4>)
 801165c:	f007 f816 	bl	801868c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011660:	4ba4      	ldr	r3, [pc, #656]	; (80118f4 <tcp_process+0x2b8>)
 8011662:	781b      	ldrb	r3, [r3, #0]
 8011664:	f003 0304 	and.w	r3, r3, #4
 8011668:	2b00      	cmp	r3, #0
 801166a:	d04e      	beq.n	801170a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	7d1b      	ldrb	r3, [r3, #20]
 8011670:	2b02      	cmp	r3, #2
 8011672:	d108      	bne.n	8011686 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011678:	4b9f      	ldr	r3, [pc, #636]	; (80118f8 <tcp_process+0x2bc>)
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	429a      	cmp	r2, r3
 801167e:	d123      	bne.n	80116c8 <tcp_process+0x8c>
        acceptable = 1;
 8011680:	2301      	movs	r3, #1
 8011682:	76fb      	strb	r3, [r7, #27]
 8011684:	e020      	b.n	80116c8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801168a:	4b9c      	ldr	r3, [pc, #624]	; (80118fc <tcp_process+0x2c0>)
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	429a      	cmp	r2, r3
 8011690:	d102      	bne.n	8011698 <tcp_process+0x5c>
        acceptable = 1;
 8011692:	2301      	movs	r3, #1
 8011694:	76fb      	strb	r3, [r7, #27]
 8011696:	e017      	b.n	80116c8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011698:	4b98      	ldr	r3, [pc, #608]	; (80118fc <tcp_process+0x2c0>)
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116a0:	1ad3      	subs	r3, r2, r3
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	db10      	blt.n	80116c8 <tcp_process+0x8c>
 80116a6:	4b95      	ldr	r3, [pc, #596]	; (80118fc <tcp_process+0x2c0>)
 80116a8:	681a      	ldr	r2, [r3, #0]
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ae:	6879      	ldr	r1, [r7, #4]
 80116b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116b2:	440b      	add	r3, r1
 80116b4:	1ad3      	subs	r3, r2, r3
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	dc06      	bgt.n	80116c8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	8b5b      	ldrh	r3, [r3, #26]
 80116be:	f043 0302 	orr.w	r3, r3, #2
 80116c2:	b29a      	uxth	r2, r3
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80116c8:	7efb      	ldrb	r3, [r7, #27]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d01b      	beq.n	8011706 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	7d1b      	ldrb	r3, [r3, #20]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d106      	bne.n	80116e4 <tcp_process+0xa8>
 80116d6:	4b84      	ldr	r3, [pc, #528]	; (80118e8 <tcp_process+0x2ac>)
 80116d8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80116dc:	4988      	ldr	r1, [pc, #544]	; (8011900 <tcp_process+0x2c4>)
 80116de:	4884      	ldr	r0, [pc, #528]	; (80118f0 <tcp_process+0x2b4>)
 80116e0:	f006 ffd4 	bl	801868c <iprintf>
      recv_flags |= TF_RESET;
 80116e4:	4b87      	ldr	r3, [pc, #540]	; (8011904 <tcp_process+0x2c8>)
 80116e6:	781b      	ldrb	r3, [r3, #0]
 80116e8:	f043 0308 	orr.w	r3, r3, #8
 80116ec:	b2da      	uxtb	r2, r3
 80116ee:	4b85      	ldr	r3, [pc, #532]	; (8011904 <tcp_process+0x2c8>)
 80116f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	8b5b      	ldrh	r3, [r3, #26]
 80116f6:	f023 0301 	bic.w	r3, r3, #1
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011700:	f06f 030d 	mvn.w	r3, #13
 8011704:	e37a      	b.n	8011dfc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011706:	2300      	movs	r3, #0
 8011708:	e378      	b.n	8011dfc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801170a:	4b7a      	ldr	r3, [pc, #488]	; (80118f4 <tcp_process+0x2b8>)
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	f003 0302 	and.w	r3, r3, #2
 8011712:	2b00      	cmp	r3, #0
 8011714:	d010      	beq.n	8011738 <tcp_process+0xfc>
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	7d1b      	ldrb	r3, [r3, #20]
 801171a:	2b02      	cmp	r3, #2
 801171c:	d00c      	beq.n	8011738 <tcp_process+0xfc>
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	7d1b      	ldrb	r3, [r3, #20]
 8011722:	2b03      	cmp	r3, #3
 8011724:	d008      	beq.n	8011738 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	8b5b      	ldrh	r3, [r3, #26]
 801172a:	f043 0302 	orr.w	r3, r3, #2
 801172e:	b29a      	uxth	r2, r3
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011734:	2300      	movs	r3, #0
 8011736:	e361      	b.n	8011dfc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	8b5b      	ldrh	r3, [r3, #26]
 801173c:	f003 0310 	and.w	r3, r3, #16
 8011740:	2b00      	cmp	r3, #0
 8011742:	d103      	bne.n	801174c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011744:	4b70      	ldr	r3, [pc, #448]	; (8011908 <tcp_process+0x2cc>)
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2200      	movs	r2, #0
 8011750:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2200      	movs	r2, #0
 8011758:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801175c:	6878      	ldr	r0, [r7, #4]
 801175e:	f001 fc2d 	bl	8012fbc <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	7d1b      	ldrb	r3, [r3, #20]
 8011766:	3b02      	subs	r3, #2
 8011768:	2b07      	cmp	r3, #7
 801176a:	f200 8337 	bhi.w	8011ddc <tcp_process+0x7a0>
 801176e:	a201      	add	r2, pc, #4	; (adr r2, 8011774 <tcp_process+0x138>)
 8011770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011774:	08011795 	.word	0x08011795
 8011778:	080119c5 	.word	0x080119c5
 801177c:	08011b3d 	.word	0x08011b3d
 8011780:	08011b67 	.word	0x08011b67
 8011784:	08011c8b 	.word	0x08011c8b
 8011788:	08011b3d 	.word	0x08011b3d
 801178c:	08011d17 	.word	0x08011d17
 8011790:	08011da7 	.word	0x08011da7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011794:	4b57      	ldr	r3, [pc, #348]	; (80118f4 <tcp_process+0x2b8>)
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	f003 0310 	and.w	r3, r3, #16
 801179c:	2b00      	cmp	r3, #0
 801179e:	f000 80e4 	beq.w	801196a <tcp_process+0x32e>
 80117a2:	4b54      	ldr	r3, [pc, #336]	; (80118f4 <tcp_process+0x2b8>)
 80117a4:	781b      	ldrb	r3, [r3, #0]
 80117a6:	f003 0302 	and.w	r3, r3, #2
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	f000 80dd 	beq.w	801196a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80117b4:	1c5a      	adds	r2, r3, #1
 80117b6:	4b50      	ldr	r3, [pc, #320]	; (80118f8 <tcp_process+0x2bc>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	f040 80d5 	bne.w	801196a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80117c0:	4b4e      	ldr	r3, [pc, #312]	; (80118fc <tcp_process+0x2c0>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	1c5a      	adds	r2, r3, #1
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80117d2:	4b49      	ldr	r3, [pc, #292]	; (80118f8 <tcp_process+0x2bc>)
 80117d4:	681a      	ldr	r2, [r3, #0]
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80117da:	4b4c      	ldr	r3, [pc, #304]	; (801190c <tcp_process+0x2d0>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	89db      	ldrh	r3, [r3, #14]
 80117e0:	b29a      	uxth	r2, r3
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80117f4:	4b41      	ldr	r3, [pc, #260]	; (80118fc <tcp_process+0x2c0>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	1e5a      	subs	r2, r3, #1
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	2204      	movs	r2, #4
 8011802:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	3304      	adds	r3, #4
 801180c:	4618      	mov	r0, r3
 801180e:	f005 faa7 	bl	8016d60 <ip4_route>
 8011812:	4601      	mov	r1, r0
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	3304      	adds	r3, #4
 8011818:	461a      	mov	r2, r3
 801181a:	4620      	mov	r0, r4
 801181c:	f7ff f88e 	bl	801093c <tcp_eff_send_mss_netif>
 8011820:	4603      	mov	r3, r0
 8011822:	461a      	mov	r2, r3
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801182c:	009a      	lsls	r2, r3, #2
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011832:	005b      	lsls	r3, r3, #1
 8011834:	f241 111c 	movw	r1, #4380	; 0x111c
 8011838:	428b      	cmp	r3, r1
 801183a:	bf38      	it	cc
 801183c:	460b      	movcc	r3, r1
 801183e:	429a      	cmp	r2, r3
 8011840:	d204      	bcs.n	801184c <tcp_process+0x210>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011846:	009b      	lsls	r3, r3, #2
 8011848:	b29b      	uxth	r3, r3
 801184a:	e00d      	b.n	8011868 <tcp_process+0x22c>
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011850:	005b      	lsls	r3, r3, #1
 8011852:	f241 121c 	movw	r2, #4380	; 0x111c
 8011856:	4293      	cmp	r3, r2
 8011858:	d904      	bls.n	8011864 <tcp_process+0x228>
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801185e:	005b      	lsls	r3, r3, #1
 8011860:	b29b      	uxth	r3, r3
 8011862:	e001      	b.n	8011868 <tcp_process+0x22c>
 8011864:	f241 131c 	movw	r3, #4380	; 0x111c
 8011868:	687a      	ldr	r2, [r7, #4]
 801186a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011874:	2b00      	cmp	r3, #0
 8011876:	d106      	bne.n	8011886 <tcp_process+0x24a>
 8011878:	4b1b      	ldr	r3, [pc, #108]	; (80118e8 <tcp_process+0x2ac>)
 801187a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801187e:	4924      	ldr	r1, [pc, #144]	; (8011910 <tcp_process+0x2d4>)
 8011880:	481b      	ldr	r0, [pc, #108]	; (80118f0 <tcp_process+0x2b4>)
 8011882:	f006 ff03 	bl	801868c <iprintf>
        --pcb->snd_queuelen;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801188c:	3b01      	subs	r3, #1
 801188e:	b29a      	uxth	r2, r3
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801189a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801189c:	69fb      	ldr	r3, [r7, #28]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d111      	bne.n	80118c6 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118a6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80118a8:	69fb      	ldr	r3, [r7, #28]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d106      	bne.n	80118bc <tcp_process+0x280>
 80118ae:	4b0e      	ldr	r3, [pc, #56]	; (80118e8 <tcp_process+0x2ac>)
 80118b0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80118b4:	4917      	ldr	r1, [pc, #92]	; (8011914 <tcp_process+0x2d8>)
 80118b6:	480e      	ldr	r0, [pc, #56]	; (80118f0 <tcp_process+0x2b4>)
 80118b8:	f006 fee8 	bl	801868c <iprintf>
          pcb->unsent = rseg->next;
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	681a      	ldr	r2, [r3, #0]
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80118c4:	e003      	b.n	80118ce <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	681a      	ldr	r2, [r3, #0]
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80118ce:	69f8      	ldr	r0, [r7, #28]
 80118d0:	f7fe fc6f 	bl	80101b2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d11d      	bne.n	8011918 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80118e2:	861a      	strh	r2, [r3, #48]	; 0x30
 80118e4:	e01f      	b.n	8011926 <tcp_process+0x2ea>
 80118e6:	bf00      	nop
 80118e8:	0801b83c 	.word	0x0801b83c
 80118ec:	0801ba74 	.word	0x0801ba74
 80118f0:	0801b888 	.word	0x0801b888
 80118f4:	20004f08 	.word	0x20004f08
 80118f8:	20004f00 	.word	0x20004f00
 80118fc:	20004efc 	.word	0x20004efc
 8011900:	0801ba90 	.word	0x0801ba90
 8011904:	20004f09 	.word	0x20004f09
 8011908:	2000bd8c 	.word	0x2000bd8c
 801190c:	20004eec 	.word	0x20004eec
 8011910:	0801bab0 	.word	0x0801bab0
 8011914:	0801bac8 	.word	0x0801bac8
        } else {
          pcb->rtime = 0;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2200      	movs	r2, #0
 801191c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	2200      	movs	r2, #0
 8011922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801192c:	2b00      	cmp	r3, #0
 801192e:	d00a      	beq.n	8011946 <tcp_process+0x30a>
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011936:	687a      	ldr	r2, [r7, #4]
 8011938:	6910      	ldr	r0, [r2, #16]
 801193a:	2200      	movs	r2, #0
 801193c:	6879      	ldr	r1, [r7, #4]
 801193e:	4798      	blx	r3
 8011940:	4603      	mov	r3, r0
 8011942:	76bb      	strb	r3, [r7, #26]
 8011944:	e001      	b.n	801194a <tcp_process+0x30e>
 8011946:	2300      	movs	r3, #0
 8011948:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801194a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801194e:	f113 0f0d 	cmn.w	r3, #13
 8011952:	d102      	bne.n	801195a <tcp_process+0x31e>
          return ERR_ABRT;
 8011954:	f06f 030c 	mvn.w	r3, #12
 8011958:	e250      	b.n	8011dfc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	8b5b      	ldrh	r3, [r3, #26]
 801195e:	f043 0302 	orr.w	r3, r3, #2
 8011962:	b29a      	uxth	r2, r3
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011968:	e23a      	b.n	8011de0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801196a:	4b9d      	ldr	r3, [pc, #628]	; (8011be0 <tcp_process+0x5a4>)
 801196c:	781b      	ldrb	r3, [r3, #0]
 801196e:	f003 0310 	and.w	r3, r3, #16
 8011972:	2b00      	cmp	r3, #0
 8011974:	f000 8234 	beq.w	8011de0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011978:	4b9a      	ldr	r3, [pc, #616]	; (8011be4 <tcp_process+0x5a8>)
 801197a:	6819      	ldr	r1, [r3, #0]
 801197c:	4b9a      	ldr	r3, [pc, #616]	; (8011be8 <tcp_process+0x5ac>)
 801197e:	881b      	ldrh	r3, [r3, #0]
 8011980:	461a      	mov	r2, r3
 8011982:	4b9a      	ldr	r3, [pc, #616]	; (8011bec <tcp_process+0x5b0>)
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011988:	4b99      	ldr	r3, [pc, #612]	; (8011bf0 <tcp_process+0x5b4>)
 801198a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801198c:	885b      	ldrh	r3, [r3, #2]
 801198e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011990:	4a97      	ldr	r2, [pc, #604]	; (8011bf0 <tcp_process+0x5b4>)
 8011992:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011994:	8812      	ldrh	r2, [r2, #0]
 8011996:	b292      	uxth	r2, r2
 8011998:	9202      	str	r2, [sp, #8]
 801199a:	9301      	str	r3, [sp, #4]
 801199c:	4b95      	ldr	r3, [pc, #596]	; (8011bf4 <tcp_process+0x5b8>)
 801199e:	9300      	str	r3, [sp, #0]
 80119a0:	4b95      	ldr	r3, [pc, #596]	; (8011bf8 <tcp_process+0x5bc>)
 80119a2:	4602      	mov	r2, r0
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f003 f8db 	bl	8014b60 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80119b0:	2b05      	cmp	r3, #5
 80119b2:	f200 8215 	bhi.w	8011de0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2200      	movs	r2, #0
 80119ba:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f002 fea5 	bl	801470c <tcp_rexmit_rto>
      break;
 80119c2:	e20d      	b.n	8011de0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80119c4:	4b86      	ldr	r3, [pc, #536]	; (8011be0 <tcp_process+0x5a4>)
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	f003 0310 	and.w	r3, r3, #16
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f000 80a1 	beq.w	8011b14 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80119d2:	4b84      	ldr	r3, [pc, #528]	; (8011be4 <tcp_process+0x5a8>)
 80119d4:	681a      	ldr	r2, [r3, #0]
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	3b01      	subs	r3, #1
 80119de:	2b00      	cmp	r3, #0
 80119e0:	db7e      	blt.n	8011ae0 <tcp_process+0x4a4>
 80119e2:	4b80      	ldr	r3, [pc, #512]	; (8011be4 <tcp_process+0x5a8>)
 80119e4:	681a      	ldr	r2, [r3, #0]
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119ea:	1ad3      	subs	r3, r2, r3
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	dc77      	bgt.n	8011ae0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2204      	movs	r2, #4
 80119f4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d102      	bne.n	8011a04 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80119fe:	23fa      	movs	r3, #250	; 0xfa
 8011a00:	76bb      	strb	r3, [r7, #26]
 8011a02:	e01d      	b.n	8011a40 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a08:	699b      	ldr	r3, [r3, #24]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d106      	bne.n	8011a1c <tcp_process+0x3e0>
 8011a0e:	4b7b      	ldr	r3, [pc, #492]	; (8011bfc <tcp_process+0x5c0>)
 8011a10:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8011a14:	497a      	ldr	r1, [pc, #488]	; (8011c00 <tcp_process+0x5c4>)
 8011a16:	487b      	ldr	r0, [pc, #492]	; (8011c04 <tcp_process+0x5c8>)
 8011a18:	f006 fe38 	bl	801868c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a20:	699b      	ldr	r3, [r3, #24]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d00a      	beq.n	8011a3c <tcp_process+0x400>
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011a2a:	699b      	ldr	r3, [r3, #24]
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	6910      	ldr	r0, [r2, #16]
 8011a30:	2200      	movs	r2, #0
 8011a32:	6879      	ldr	r1, [r7, #4]
 8011a34:	4798      	blx	r3
 8011a36:	4603      	mov	r3, r0
 8011a38:	76bb      	strb	r3, [r7, #26]
 8011a3a:	e001      	b.n	8011a40 <tcp_process+0x404>
 8011a3c:	23f0      	movs	r3, #240	; 0xf0
 8011a3e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8011a40:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d00a      	beq.n	8011a5e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8011a48:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011a4c:	f113 0f0d 	cmn.w	r3, #13
 8011a50:	d002      	beq.n	8011a58 <tcp_process+0x41c>
              tcp_abort(pcb);
 8011a52:	6878      	ldr	r0, [r7, #4]
 8011a54:	f7fd fd1a 	bl	800f48c <tcp_abort>
            }
            return ERR_ABRT;
 8011a58:	f06f 030c 	mvn.w	r3, #12
 8011a5c:	e1ce      	b.n	8011dfc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8011a5e:	6878      	ldr	r0, [r7, #4]
 8011a60:	f000 fae0 	bl	8012024 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8011a64:	4b68      	ldr	r3, [pc, #416]	; (8011c08 <tcp_process+0x5cc>)
 8011a66:	881b      	ldrh	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d005      	beq.n	8011a78 <tcp_process+0x43c>
            recv_acked--;
 8011a6c:	4b66      	ldr	r3, [pc, #408]	; (8011c08 <tcp_process+0x5cc>)
 8011a6e:	881b      	ldrh	r3, [r3, #0]
 8011a70:	3b01      	subs	r3, #1
 8011a72:	b29a      	uxth	r2, r3
 8011a74:	4b64      	ldr	r3, [pc, #400]	; (8011c08 <tcp_process+0x5cc>)
 8011a76:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a7c:	009a      	lsls	r2, r3, #2
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a82:	005b      	lsls	r3, r3, #1
 8011a84:	f241 111c 	movw	r1, #4380	; 0x111c
 8011a88:	428b      	cmp	r3, r1
 8011a8a:	bf38      	it	cc
 8011a8c:	460b      	movcc	r3, r1
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d204      	bcs.n	8011a9c <tcp_process+0x460>
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	b29b      	uxth	r3, r3
 8011a9a:	e00d      	b.n	8011ab8 <tcp_process+0x47c>
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011aa0:	005b      	lsls	r3, r3, #1
 8011aa2:	f241 121c 	movw	r2, #4380	; 0x111c
 8011aa6:	4293      	cmp	r3, r2
 8011aa8:	d904      	bls.n	8011ab4 <tcp_process+0x478>
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011aae:	005b      	lsls	r3, r3, #1
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	e001      	b.n	8011ab8 <tcp_process+0x47c>
 8011ab4:	f241 131c 	movw	r3, #4380	; 0x111c
 8011ab8:	687a      	ldr	r2, [r7, #4]
 8011aba:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8011abe:	4b53      	ldr	r3, [pc, #332]	; (8011c0c <tcp_process+0x5d0>)
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	f003 0320 	and.w	r3, r3, #32
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d037      	beq.n	8011b3a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	8b5b      	ldrh	r3, [r3, #26]
 8011ace:	f043 0302 	orr.w	r3, r3, #2
 8011ad2:	b29a      	uxth	r2, r3
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	2207      	movs	r2, #7
 8011adc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8011ade:	e02c      	b.n	8011b3a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ae0:	4b40      	ldr	r3, [pc, #256]	; (8011be4 <tcp_process+0x5a8>)
 8011ae2:	6819      	ldr	r1, [r3, #0]
 8011ae4:	4b40      	ldr	r3, [pc, #256]	; (8011be8 <tcp_process+0x5ac>)
 8011ae6:	881b      	ldrh	r3, [r3, #0]
 8011ae8:	461a      	mov	r2, r3
 8011aea:	4b40      	ldr	r3, [pc, #256]	; (8011bec <tcp_process+0x5b0>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011af0:	4b3f      	ldr	r3, [pc, #252]	; (8011bf0 <tcp_process+0x5b4>)
 8011af2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011af4:	885b      	ldrh	r3, [r3, #2]
 8011af6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011af8:	4a3d      	ldr	r2, [pc, #244]	; (8011bf0 <tcp_process+0x5b4>)
 8011afa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011afc:	8812      	ldrh	r2, [r2, #0]
 8011afe:	b292      	uxth	r2, r2
 8011b00:	9202      	str	r2, [sp, #8]
 8011b02:	9301      	str	r3, [sp, #4]
 8011b04:	4b3b      	ldr	r3, [pc, #236]	; (8011bf4 <tcp_process+0x5b8>)
 8011b06:	9300      	str	r3, [sp, #0]
 8011b08:	4b3b      	ldr	r3, [pc, #236]	; (8011bf8 <tcp_process+0x5bc>)
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	6878      	ldr	r0, [r7, #4]
 8011b0e:	f003 f827 	bl	8014b60 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8011b12:	e167      	b.n	8011de4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8011b14:	4b32      	ldr	r3, [pc, #200]	; (8011be0 <tcp_process+0x5a4>)
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	f003 0302 	and.w	r3, r3, #2
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	f000 8161 	beq.w	8011de4 <tcp_process+0x7a8>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b26:	1e5a      	subs	r2, r3, #1
 8011b28:	4b30      	ldr	r3, [pc, #192]	; (8011bec <tcp_process+0x5b0>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	f040 8159 	bne.w	8011de4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f002 fe0c 	bl	8014750 <tcp_rexmit>
      break;
 8011b38:	e154      	b.n	8011de4 <tcp_process+0x7a8>
 8011b3a:	e153      	b.n	8011de4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f000 fa71 	bl	8012024 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8011b42:	4b32      	ldr	r3, [pc, #200]	; (8011c0c <tcp_process+0x5d0>)
 8011b44:	781b      	ldrb	r3, [r3, #0]
 8011b46:	f003 0320 	and.w	r3, r3, #32
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	f000 814c 	beq.w	8011de8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	8b5b      	ldrh	r3, [r3, #26]
 8011b54:	f043 0302 	orr.w	r3, r3, #2
 8011b58:	b29a      	uxth	r2, r3
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2207      	movs	r2, #7
 8011b62:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011b64:	e140      	b.n	8011de8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f000 fa5c 	bl	8012024 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011b6c:	4b27      	ldr	r3, [pc, #156]	; (8011c0c <tcp_process+0x5d0>)
 8011b6e:	781b      	ldrb	r3, [r3, #0]
 8011b70:	f003 0320 	and.w	r3, r3, #32
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d071      	beq.n	8011c5c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b78:	4b19      	ldr	r3, [pc, #100]	; (8011be0 <tcp_process+0x5a4>)
 8011b7a:	781b      	ldrb	r3, [r3, #0]
 8011b7c:	f003 0310 	and.w	r3, r3, #16
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d060      	beq.n	8011c46 <tcp_process+0x60a>
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b88:	4b16      	ldr	r3, [pc, #88]	; (8011be4 <tcp_process+0x5a8>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d15a      	bne.n	8011c46 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d156      	bne.n	8011c46 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	8b5b      	ldrh	r3, [r3, #26]
 8011b9c:	f043 0302 	orr.w	r3, r3, #2
 8011ba0:	b29a      	uxth	r2, r3
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f7fe fdbe 	bl	8010728 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8011bac:	4b18      	ldr	r3, [pc, #96]	; (8011c10 <tcp_process+0x5d4>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	687a      	ldr	r2, [r7, #4]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d105      	bne.n	8011bc2 <tcp_process+0x586>
 8011bb6:	4b16      	ldr	r3, [pc, #88]	; (8011c10 <tcp_process+0x5d4>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	68db      	ldr	r3, [r3, #12]
 8011bbc:	4a14      	ldr	r2, [pc, #80]	; (8011c10 <tcp_process+0x5d4>)
 8011bbe:	6013      	str	r3, [r2, #0]
 8011bc0:	e02e      	b.n	8011c20 <tcp_process+0x5e4>
 8011bc2:	4b13      	ldr	r3, [pc, #76]	; (8011c10 <tcp_process+0x5d4>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	617b      	str	r3, [r7, #20]
 8011bc8:	e027      	b.n	8011c1a <tcp_process+0x5de>
 8011bca:	697b      	ldr	r3, [r7, #20]
 8011bcc:	68db      	ldr	r3, [r3, #12]
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d11f      	bne.n	8011c14 <tcp_process+0x5d8>
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	68da      	ldr	r2, [r3, #12]
 8011bd8:	697b      	ldr	r3, [r7, #20]
 8011bda:	60da      	str	r2, [r3, #12]
 8011bdc:	e020      	b.n	8011c20 <tcp_process+0x5e4>
 8011bde:	bf00      	nop
 8011be0:	20004f08 	.word	0x20004f08
 8011be4:	20004f00 	.word	0x20004f00
 8011be8:	20004f06 	.word	0x20004f06
 8011bec:	20004efc 	.word	0x20004efc
 8011bf0:	20004eec 	.word	0x20004eec
 8011bf4:	2000853c 	.word	0x2000853c
 8011bf8:	20008540 	.word	0x20008540
 8011bfc:	0801b83c 	.word	0x0801b83c
 8011c00:	0801badc 	.word	0x0801badc
 8011c04:	0801b888 	.word	0x0801b888
 8011c08:	20004f04 	.word	0x20004f04
 8011c0c:	20004f09 	.word	0x20004f09
 8011c10:	2000bd88 	.word	0x2000bd88
 8011c14:	697b      	ldr	r3, [r7, #20]
 8011c16:	68db      	ldr	r3, [r3, #12]
 8011c18:	617b      	str	r3, [r7, #20]
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d1d4      	bne.n	8011bca <tcp_process+0x58e>
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2200      	movs	r2, #0
 8011c24:	60da      	str	r2, [r3, #12]
 8011c26:	4b77      	ldr	r3, [pc, #476]	; (8011e04 <tcp_process+0x7c8>)
 8011c28:	2201      	movs	r2, #1
 8011c2a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	220a      	movs	r2, #10
 8011c30:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8011c32:	4b75      	ldr	r3, [pc, #468]	; (8011e08 <tcp_process+0x7cc>)
 8011c34:	681a      	ldr	r2, [r3, #0]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	60da      	str	r2, [r3, #12]
 8011c3a:	4a73      	ldr	r2, [pc, #460]	; (8011e08 <tcp_process+0x7cc>)
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	6013      	str	r3, [r2, #0]
 8011c40:	f003 f950 	bl	8014ee4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8011c44:	e0d2      	b.n	8011dec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	8b5b      	ldrh	r3, [r3, #26]
 8011c4a:	f043 0302 	orr.w	r3, r3, #2
 8011c4e:	b29a      	uxth	r2, r3
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2208      	movs	r2, #8
 8011c58:	751a      	strb	r2, [r3, #20]
      break;
 8011c5a:	e0c7      	b.n	8011dec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c5c:	4b6b      	ldr	r3, [pc, #428]	; (8011e0c <tcp_process+0x7d0>)
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	f003 0310 	and.w	r3, r3, #16
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	f000 80c1 	beq.w	8011dec <tcp_process+0x7b0>
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c6e:	4b68      	ldr	r3, [pc, #416]	; (8011e10 <tcp_process+0x7d4>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	429a      	cmp	r2, r3
 8011c74:	f040 80ba 	bne.w	8011dec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	f040 80b5 	bne.w	8011dec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2206      	movs	r2, #6
 8011c86:	751a      	strb	r2, [r3, #20]
      break;
 8011c88:	e0b0      	b.n	8011dec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f000 f9ca 	bl	8012024 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8011c90:	4b60      	ldr	r3, [pc, #384]	; (8011e14 <tcp_process+0x7d8>)
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	f003 0320 	and.w	r3, r3, #32
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	f000 80a9 	beq.w	8011df0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	8b5b      	ldrh	r3, [r3, #26]
 8011ca2:	f043 0302 	orr.w	r3, r3, #2
 8011ca6:	b29a      	uxth	r2, r3
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f7fe fd3b 	bl	8010728 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011cb2:	4b59      	ldr	r3, [pc, #356]	; (8011e18 <tcp_process+0x7dc>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	687a      	ldr	r2, [r7, #4]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d105      	bne.n	8011cc8 <tcp_process+0x68c>
 8011cbc:	4b56      	ldr	r3, [pc, #344]	; (8011e18 <tcp_process+0x7dc>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	68db      	ldr	r3, [r3, #12]
 8011cc2:	4a55      	ldr	r2, [pc, #340]	; (8011e18 <tcp_process+0x7dc>)
 8011cc4:	6013      	str	r3, [r2, #0]
 8011cc6:	e013      	b.n	8011cf0 <tcp_process+0x6b4>
 8011cc8:	4b53      	ldr	r3, [pc, #332]	; (8011e18 <tcp_process+0x7dc>)
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	613b      	str	r3, [r7, #16]
 8011cce:	e00c      	b.n	8011cea <tcp_process+0x6ae>
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	68db      	ldr	r3, [r3, #12]
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d104      	bne.n	8011ce4 <tcp_process+0x6a8>
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	68da      	ldr	r2, [r3, #12]
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	60da      	str	r2, [r3, #12]
 8011ce2:	e005      	b.n	8011cf0 <tcp_process+0x6b4>
 8011ce4:	693b      	ldr	r3, [r7, #16]
 8011ce6:	68db      	ldr	r3, [r3, #12]
 8011ce8:	613b      	str	r3, [r7, #16]
 8011cea:	693b      	ldr	r3, [r7, #16]
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1ef      	bne.n	8011cd0 <tcp_process+0x694>
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	60da      	str	r2, [r3, #12]
 8011cf6:	4b43      	ldr	r3, [pc, #268]	; (8011e04 <tcp_process+0x7c8>)
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	220a      	movs	r2, #10
 8011d00:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011d02:	4b41      	ldr	r3, [pc, #260]	; (8011e08 <tcp_process+0x7cc>)
 8011d04:	681a      	ldr	r2, [r3, #0]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	60da      	str	r2, [r3, #12]
 8011d0a:	4a3f      	ldr	r2, [pc, #252]	; (8011e08 <tcp_process+0x7cc>)
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6013      	str	r3, [r2, #0]
 8011d10:	f003 f8e8 	bl	8014ee4 <tcp_timer_needed>
      }
      break;
 8011d14:	e06c      	b.n	8011df0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f000 f984 	bl	8012024 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011d1c:	4b3b      	ldr	r3, [pc, #236]	; (8011e0c <tcp_process+0x7d0>)
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	f003 0310 	and.w	r3, r3, #16
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d065      	beq.n	8011df4 <tcp_process+0x7b8>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011d2c:	4b38      	ldr	r3, [pc, #224]	; (8011e10 <tcp_process+0x7d4>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	429a      	cmp	r2, r3
 8011d32:	d15f      	bne.n	8011df4 <tcp_process+0x7b8>
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d15b      	bne.n	8011df4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f7fe fcf3 	bl	8010728 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8011d42:	4b35      	ldr	r3, [pc, #212]	; (8011e18 <tcp_process+0x7dc>)
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	687a      	ldr	r2, [r7, #4]
 8011d48:	429a      	cmp	r2, r3
 8011d4a:	d105      	bne.n	8011d58 <tcp_process+0x71c>
 8011d4c:	4b32      	ldr	r3, [pc, #200]	; (8011e18 <tcp_process+0x7dc>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	4a31      	ldr	r2, [pc, #196]	; (8011e18 <tcp_process+0x7dc>)
 8011d54:	6013      	str	r3, [r2, #0]
 8011d56:	e013      	b.n	8011d80 <tcp_process+0x744>
 8011d58:	4b2f      	ldr	r3, [pc, #188]	; (8011e18 <tcp_process+0x7dc>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	60fb      	str	r3, [r7, #12]
 8011d5e:	e00c      	b.n	8011d7a <tcp_process+0x73e>
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	68db      	ldr	r3, [r3, #12]
 8011d64:	687a      	ldr	r2, [r7, #4]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	d104      	bne.n	8011d74 <tcp_process+0x738>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	68da      	ldr	r2, [r3, #12]
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	60da      	str	r2, [r3, #12]
 8011d72:	e005      	b.n	8011d80 <tcp_process+0x744>
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	68db      	ldr	r3, [r3, #12]
 8011d78:	60fb      	str	r3, [r7, #12]
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d1ef      	bne.n	8011d60 <tcp_process+0x724>
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	2200      	movs	r2, #0
 8011d84:	60da      	str	r2, [r3, #12]
 8011d86:	4b1f      	ldr	r3, [pc, #124]	; (8011e04 <tcp_process+0x7c8>)
 8011d88:	2201      	movs	r2, #1
 8011d8a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	220a      	movs	r2, #10
 8011d90:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011d92:	4b1d      	ldr	r3, [pc, #116]	; (8011e08 <tcp_process+0x7cc>)
 8011d94:	681a      	ldr	r2, [r3, #0]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	60da      	str	r2, [r3, #12]
 8011d9a:	4a1b      	ldr	r2, [pc, #108]	; (8011e08 <tcp_process+0x7cc>)
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6013      	str	r3, [r2, #0]
 8011da0:	f003 f8a0 	bl	8014ee4 <tcp_timer_needed>
      }
      break;
 8011da4:	e026      	b.n	8011df4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8011da6:	6878      	ldr	r0, [r7, #4]
 8011da8:	f000 f93c 	bl	8012024 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011dac:	4b17      	ldr	r3, [pc, #92]	; (8011e0c <tcp_process+0x7d0>)
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	f003 0310 	and.w	r3, r3, #16
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d01f      	beq.n	8011df8 <tcp_process+0x7bc>
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011dbc:	4b14      	ldr	r3, [pc, #80]	; (8011e10 <tcp_process+0x7d4>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d119      	bne.n	8011df8 <tcp_process+0x7bc>
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d115      	bne.n	8011df8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011dcc:	4b11      	ldr	r3, [pc, #68]	; (8011e14 <tcp_process+0x7d8>)
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	f043 0310 	orr.w	r3, r3, #16
 8011dd4:	b2da      	uxtb	r2, r3
 8011dd6:	4b0f      	ldr	r3, [pc, #60]	; (8011e14 <tcp_process+0x7d8>)
 8011dd8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011dda:	e00d      	b.n	8011df8 <tcp_process+0x7bc>
    default:
      break;
 8011ddc:	bf00      	nop
 8011dde:	e00c      	b.n	8011dfa <tcp_process+0x7be>
      break;
 8011de0:	bf00      	nop
 8011de2:	e00a      	b.n	8011dfa <tcp_process+0x7be>
      break;
 8011de4:	bf00      	nop
 8011de6:	e008      	b.n	8011dfa <tcp_process+0x7be>
      break;
 8011de8:	bf00      	nop
 8011dea:	e006      	b.n	8011dfa <tcp_process+0x7be>
      break;
 8011dec:	bf00      	nop
 8011dee:	e004      	b.n	8011dfa <tcp_process+0x7be>
      break;
 8011df0:	bf00      	nop
 8011df2:	e002      	b.n	8011dfa <tcp_process+0x7be>
      break;
 8011df4:	bf00      	nop
 8011df6:	e000      	b.n	8011dfa <tcp_process+0x7be>
      break;
 8011df8:	bf00      	nop
  }
  return ERR_OK;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3724      	adds	r7, #36	; 0x24
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd90      	pop	{r4, r7, pc}
 8011e04:	2000bd84 	.word	0x2000bd84
 8011e08:	2000bd98 	.word	0x2000bd98
 8011e0c:	20004f08 	.word	0x20004f08
 8011e10:	20004f00 	.word	0x20004f00
 8011e14:	20004f09 	.word	0x20004f09
 8011e18:	2000bd88 	.word	0x2000bd88

08011e1c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011e1c:	b590      	push	{r4, r7, lr}
 8011e1e:	b085      	sub	sp, #20
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d106      	bne.n	8011e3a <tcp_oos_insert_segment+0x1e>
 8011e2c:	4b3b      	ldr	r3, [pc, #236]	; (8011f1c <tcp_oos_insert_segment+0x100>)
 8011e2e:	f240 421f 	movw	r2, #1055	; 0x41f
 8011e32:	493b      	ldr	r1, [pc, #236]	; (8011f20 <tcp_oos_insert_segment+0x104>)
 8011e34:	483b      	ldr	r0, [pc, #236]	; (8011f24 <tcp_oos_insert_segment+0x108>)
 8011e36:	f006 fc29 	bl	801868c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	68db      	ldr	r3, [r3, #12]
 8011e3e:	899b      	ldrh	r3, [r3, #12]
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	4618      	mov	r0, r3
 8011e44:	f7fa fd20 	bl	800c888 <lwip_htons>
 8011e48:	4603      	mov	r3, r0
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	f003 0301 	and.w	r3, r3, #1
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d028      	beq.n	8011ea6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8011e54:	6838      	ldr	r0, [r7, #0]
 8011e56:	f7fe f997 	bl	8010188 <tcp_segs_free>
    next = NULL;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	603b      	str	r3, [r7, #0]
 8011e5e:	e056      	b.n	8011f0e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	899b      	ldrh	r3, [r3, #12]
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f7fa fd0d 	bl	800c888 <lwip_htons>
 8011e6e:	4603      	mov	r3, r0
 8011e70:	b2db      	uxtb	r3, r3
 8011e72:	f003 0301 	and.w	r3, r3, #1
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d00d      	beq.n	8011e96 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	68db      	ldr	r3, [r3, #12]
 8011e7e:	899b      	ldrh	r3, [r3, #12]
 8011e80:	b29c      	uxth	r4, r3
 8011e82:	2001      	movs	r0, #1
 8011e84:	f7fa fd00 	bl	800c888 <lwip_htons>
 8011e88:	4603      	mov	r3, r0
 8011e8a:	461a      	mov	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	68db      	ldr	r3, [r3, #12]
 8011e90:	4322      	orrs	r2, r4
 8011e92:	b292      	uxth	r2, r2
 8011e94:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8011ea0:	68f8      	ldr	r0, [r7, #12]
 8011ea2:	f7fe f986 	bl	80101b2 <tcp_seg_free>
    while (next &&
 8011ea6:	683b      	ldr	r3, [r7, #0]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d00e      	beq.n	8011eca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011eac:	687b      	ldr	r3, [r7, #4]
 8011eae:	891b      	ldrh	r3, [r3, #8]
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	4b1d      	ldr	r3, [pc, #116]	; (8011f28 <tcp_oos_insert_segment+0x10c>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	441a      	add	r2, r3
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	685b      	ldr	r3, [r3, #4]
 8011ebe:	6839      	ldr	r1, [r7, #0]
 8011ec0:	8909      	ldrh	r1, [r1, #8]
 8011ec2:	440b      	add	r3, r1
 8011ec4:	1ad3      	subs	r3, r2, r3
    while (next &&
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	daca      	bge.n	8011e60 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d01e      	beq.n	8011f0e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	891b      	ldrh	r3, [r3, #8]
 8011ed4:	461a      	mov	r2, r3
 8011ed6:	4b14      	ldr	r3, [pc, #80]	; (8011f28 <tcp_oos_insert_segment+0x10c>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	441a      	add	r2, r3
 8011edc:	683b      	ldr	r3, [r7, #0]
 8011ede:	68db      	ldr	r3, [r3, #12]
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	1ad3      	subs	r3, r2, r3
    if (next &&
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	dd12      	ble.n	8011f0e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011ee8:	683b      	ldr	r3, [r7, #0]
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	685b      	ldr	r3, [r3, #4]
 8011eee:	b29a      	uxth	r2, r3
 8011ef0:	4b0d      	ldr	r3, [pc, #52]	; (8011f28 <tcp_oos_insert_segment+0x10c>)
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	1ad3      	subs	r3, r2, r3
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	685a      	ldr	r2, [r3, #4]
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	891b      	ldrh	r3, [r3, #8]
 8011f06:	4619      	mov	r1, r3
 8011f08:	4610      	mov	r0, r2
 8011f0a:	f7fc f9ad 	bl	800e268 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	683a      	ldr	r2, [r7, #0]
 8011f12:	601a      	str	r2, [r3, #0]
}
 8011f14:	bf00      	nop
 8011f16:	3714      	adds	r7, #20
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd90      	pop	{r4, r7, pc}
 8011f1c:	0801b83c 	.word	0x0801b83c
 8011f20:	0801bafc 	.word	0x0801bafc
 8011f24:	0801b888 	.word	0x0801b888
 8011f28:	20004efc 	.word	0x20004efc

08011f2c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011f2c:	b5b0      	push	{r4, r5, r7, lr}
 8011f2e:	b086      	sub	sp, #24
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	60f8      	str	r0, [r7, #12]
 8011f34:	60b9      	str	r1, [r7, #8]
 8011f36:	607a      	str	r2, [r7, #4]
 8011f38:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011f3a:	e03e      	b.n	8011fba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011f3c:	68bb      	ldr	r3, [r7, #8]
 8011f3e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011f40:	68bb      	ldr	r3, [r7, #8]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f7fc fbd2 	bl	800e6f4 <pbuf_clen>
 8011f50:	4603      	mov	r3, r0
 8011f52:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f5a:	8a7a      	ldrh	r2, [r7, #18]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d906      	bls.n	8011f6e <tcp_free_acked_segments+0x42>
 8011f60:	4b2a      	ldr	r3, [pc, #168]	; (801200c <tcp_free_acked_segments+0xe0>)
 8011f62:	f240 4257 	movw	r2, #1111	; 0x457
 8011f66:	492a      	ldr	r1, [pc, #168]	; (8012010 <tcp_free_acked_segments+0xe4>)
 8011f68:	482a      	ldr	r0, [pc, #168]	; (8012014 <tcp_free_acked_segments+0xe8>)
 8011f6a:	f006 fb8f 	bl	801868c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8011f74:	8a7b      	ldrh	r3, [r7, #18]
 8011f76:	1ad3      	subs	r3, r2, r3
 8011f78:	b29a      	uxth	r2, r3
 8011f7a:	68fb      	ldr	r3, [r7, #12]
 8011f7c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	891a      	ldrh	r2, [r3, #8]
 8011f84:	4b24      	ldr	r3, [pc, #144]	; (8012018 <tcp_free_acked_segments+0xec>)
 8011f86:	881b      	ldrh	r3, [r3, #0]
 8011f88:	4413      	add	r3, r2
 8011f8a:	b29a      	uxth	r2, r3
 8011f8c:	4b22      	ldr	r3, [pc, #136]	; (8012018 <tcp_free_acked_segments+0xec>)
 8011f8e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8011f90:	6978      	ldr	r0, [r7, #20]
 8011f92:	f7fe f90e 	bl	80101b2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d00c      	beq.n	8011fba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d109      	bne.n	8011fba <tcp_free_acked_segments+0x8e>
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d106      	bne.n	8011fba <tcp_free_acked_segments+0x8e>
 8011fac:	4b17      	ldr	r3, [pc, #92]	; (801200c <tcp_free_acked_segments+0xe0>)
 8011fae:	f240 4261 	movw	r2, #1121	; 0x461
 8011fb2:	491a      	ldr	r1, [pc, #104]	; (801201c <tcp_free_acked_segments+0xf0>)
 8011fb4:	4817      	ldr	r0, [pc, #92]	; (8012014 <tcp_free_acked_segments+0xe8>)
 8011fb6:	f006 fb69 	bl	801868c <iprintf>
  while (seg_list != NULL &&
 8011fba:	68bb      	ldr	r3, [r7, #8]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d020      	beq.n	8012002 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011fc0:	68bb      	ldr	r3, [r7, #8]
 8011fc2:	68db      	ldr	r3, [r3, #12]
 8011fc4:	685b      	ldr	r3, [r3, #4]
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	f7fa fc73 	bl	800c8b2 <lwip_htonl>
 8011fcc:	4604      	mov	r4, r0
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	891b      	ldrh	r3, [r3, #8]
 8011fd2:	461d      	mov	r5, r3
 8011fd4:	68bb      	ldr	r3, [r7, #8]
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	899b      	ldrh	r3, [r3, #12]
 8011fda:	b29b      	uxth	r3, r3
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fa fc53 	bl	800c888 <lwip_htons>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	b2db      	uxtb	r3, r3
 8011fe6:	f003 0303 	and.w	r3, r3, #3
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d001      	beq.n	8011ff2 <tcp_free_acked_segments+0xc6>
 8011fee:	2301      	movs	r3, #1
 8011ff0:	e000      	b.n	8011ff4 <tcp_free_acked_segments+0xc8>
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	442b      	add	r3, r5
 8011ff6:	18e2      	adds	r2, r4, r3
 8011ff8:	4b09      	ldr	r3, [pc, #36]	; (8012020 <tcp_free_acked_segments+0xf4>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	dd9c      	ble.n	8011f3c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012002:	68bb      	ldr	r3, [r7, #8]
}
 8012004:	4618      	mov	r0, r3
 8012006:	3718      	adds	r7, #24
 8012008:	46bd      	mov	sp, r7
 801200a:	bdb0      	pop	{r4, r5, r7, pc}
 801200c:	0801b83c 	.word	0x0801b83c
 8012010:	0801bb24 	.word	0x0801bb24
 8012014:	0801b888 	.word	0x0801b888
 8012018:	20004f04 	.word	0x20004f04
 801201c:	0801bb4c 	.word	0x0801bb4c
 8012020:	20004f00 	.word	0x20004f00

08012024 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012024:	b5b0      	push	{r4, r5, r7, lr}
 8012026:	b094      	sub	sp, #80	; 0x50
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801202c:	2300      	movs	r3, #0
 801202e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2b00      	cmp	r3, #0
 8012034:	d106      	bne.n	8012044 <tcp_receive+0x20>
 8012036:	4ba6      	ldr	r3, [pc, #664]	; (80122d0 <tcp_receive+0x2ac>)
 8012038:	f240 427b 	movw	r2, #1147	; 0x47b
 801203c:	49a5      	ldr	r1, [pc, #660]	; (80122d4 <tcp_receive+0x2b0>)
 801203e:	48a6      	ldr	r0, [pc, #664]	; (80122d8 <tcp_receive+0x2b4>)
 8012040:	f006 fb24 	bl	801868c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	7d1b      	ldrb	r3, [r3, #20]
 8012048:	2b03      	cmp	r3, #3
 801204a:	d806      	bhi.n	801205a <tcp_receive+0x36>
 801204c:	4ba0      	ldr	r3, [pc, #640]	; (80122d0 <tcp_receive+0x2ac>)
 801204e:	f240 427c 	movw	r2, #1148	; 0x47c
 8012052:	49a2      	ldr	r1, [pc, #648]	; (80122dc <tcp_receive+0x2b8>)
 8012054:	48a0      	ldr	r0, [pc, #640]	; (80122d8 <tcp_receive+0x2b4>)
 8012056:	f006 fb19 	bl	801868c <iprintf>

  if (flags & TCP_ACK) {
 801205a:	4ba1      	ldr	r3, [pc, #644]	; (80122e0 <tcp_receive+0x2bc>)
 801205c:	781b      	ldrb	r3, [r3, #0]
 801205e:	f003 0310 	and.w	r3, r3, #16
 8012062:	2b00      	cmp	r3, #0
 8012064:	f000 8263 	beq.w	801252e <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801206e:	461a      	mov	r2, r3
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012074:	4413      	add	r3, r2
 8012076:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801207c:	4b99      	ldr	r3, [pc, #612]	; (80122e4 <tcp_receive+0x2c0>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	1ad3      	subs	r3, r2, r3
 8012082:	2b00      	cmp	r3, #0
 8012084:	db1b      	blt.n	80120be <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801208a:	4b96      	ldr	r3, [pc, #600]	; (80122e4 <tcp_receive+0x2c0>)
 801208c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801208e:	429a      	cmp	r2, r3
 8012090:	d106      	bne.n	80120a0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012096:	4b94      	ldr	r3, [pc, #592]	; (80122e8 <tcp_receive+0x2c4>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	1ad3      	subs	r3, r2, r3
 801209c:	2b00      	cmp	r3, #0
 801209e:	db0e      	blt.n	80120be <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80120a4:	4b90      	ldr	r3, [pc, #576]	; (80122e8 <tcp_receive+0x2c4>)
 80120a6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d125      	bne.n	80120f8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80120ac:	4b8f      	ldr	r3, [pc, #572]	; (80122ec <tcp_receive+0x2c8>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	89db      	ldrh	r3, [r3, #14]
 80120b2:	b29a      	uxth	r2, r3
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d91c      	bls.n	80120f8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80120be:	4b8b      	ldr	r3, [pc, #556]	; (80122ec <tcp_receive+0x2c8>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	89db      	ldrh	r3, [r3, #14]
 80120c4:	b29a      	uxth	r2, r3
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120d8:	429a      	cmp	r2, r3
 80120da:	d205      	bcs.n	80120e8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80120e8:	4b7e      	ldr	r3, [pc, #504]	; (80122e4 <tcp_receive+0x2c0>)
 80120ea:	681a      	ldr	r2, [r3, #0]
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80120f0:	4b7d      	ldr	r3, [pc, #500]	; (80122e8 <tcp_receive+0x2c4>)
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80120f8:	4b7b      	ldr	r3, [pc, #492]	; (80122e8 <tcp_receive+0x2c4>)
 80120fa:	681a      	ldr	r2, [r3, #0]
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012100:	1ad3      	subs	r3, r2, r3
 8012102:	2b00      	cmp	r3, #0
 8012104:	dc58      	bgt.n	80121b8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012106:	4b7a      	ldr	r3, [pc, #488]	; (80122f0 <tcp_receive+0x2cc>)
 8012108:	881b      	ldrh	r3, [r3, #0]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d14b      	bne.n	80121a6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012112:	687a      	ldr	r2, [r7, #4]
 8012114:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012118:	4413      	add	r3, r2
 801211a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801211c:	429a      	cmp	r2, r3
 801211e:	d142      	bne.n	80121a6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012126:	2b00      	cmp	r3, #0
 8012128:	db3d      	blt.n	80121a6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801212e:	4b6e      	ldr	r3, [pc, #440]	; (80122e8 <tcp_receive+0x2c4>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	429a      	cmp	r2, r3
 8012134:	d137      	bne.n	80121a6 <tcp_receive+0x182>
              found_dupack = 1;
 8012136:	2301      	movs	r3, #1
 8012138:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012140:	2bff      	cmp	r3, #255	; 0xff
 8012142:	d007      	beq.n	8012154 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801214a:	3301      	adds	r3, #1
 801214c:	b2da      	uxtb	r2, r3
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801215a:	2b03      	cmp	r3, #3
 801215c:	d91b      	bls.n	8012196 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012168:	4413      	add	r3, r2
 801216a:	b29a      	uxth	r2, r3
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012172:	429a      	cmp	r2, r3
 8012174:	d30a      	bcc.n	801218c <tcp_receive+0x168>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012180:	4413      	add	r3, r2
 8012182:	b29a      	uxth	r2, r3
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801218a:	e004      	b.n	8012196 <tcp_receive+0x172>
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012192:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801219c:	2b02      	cmp	r3, #2
 801219e:	d902      	bls.n	80121a6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f002 fb41 	bl	8014828 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80121a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	f040 8160 	bne.w	801246e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2200      	movs	r2, #0
 80121b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80121b6:	e15a      	b.n	801246e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80121b8:	4b4b      	ldr	r3, [pc, #300]	; (80122e8 <tcp_receive+0x2c4>)
 80121ba:	681a      	ldr	r2, [r3, #0]
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80121c0:	1ad3      	subs	r3, r2, r3
 80121c2:	3b01      	subs	r3, #1
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	f2c0 814d 	blt.w	8012464 <tcp_receive+0x440>
 80121ca:	4b47      	ldr	r3, [pc, #284]	; (80122e8 <tcp_receive+0x2c4>)
 80121cc:	681a      	ldr	r2, [r3, #0]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80121d2:	1ad3      	subs	r3, r2, r3
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	f300 8145 	bgt.w	8012464 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	8b5b      	ldrh	r3, [r3, #26]
 80121de:	f003 0304 	and.w	r3, r3, #4
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d010      	beq.n	8012208 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	8b5b      	ldrh	r3, [r3, #26]
 80121ea:	f023 0304 	bic.w	r3, r3, #4
 80121ee:	b29a      	uxth	r2, r3
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	2200      	movs	r2, #0
 8012204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2200      	movs	r2, #0
 801220c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012216:	10db      	asrs	r3, r3, #3
 8012218:	b21b      	sxth	r3, r3
 801221a:	b29a      	uxth	r2, r3
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012222:	b29b      	uxth	r3, r3
 8012224:	4413      	add	r3, r2
 8012226:	b29b      	uxth	r3, r3
 8012228:	b21a      	sxth	r2, r3
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012230:	4b2d      	ldr	r3, [pc, #180]	; (80122e8 <tcp_receive+0x2c4>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	b29a      	uxth	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801223a:	b29b      	uxth	r3, r3
 801223c:	1ad3      	subs	r3, r2, r3
 801223e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	2200      	movs	r2, #0
 8012244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8012248:	4b27      	ldr	r3, [pc, #156]	; (80122e8 <tcp_receive+0x2c4>)
 801224a:	681a      	ldr	r2, [r3, #0]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	7d1b      	ldrb	r3, [r3, #20]
 8012254:	2b03      	cmp	r3, #3
 8012256:	f240 8096 	bls.w	8012386 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8012266:	429a      	cmp	r2, r3
 8012268:	d244      	bcs.n	80122f4 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	8b5b      	ldrh	r3, [r3, #26]
 801226e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012272:	2b00      	cmp	r3, #0
 8012274:	d001      	beq.n	801227a <tcp_receive+0x256>
 8012276:	2301      	movs	r3, #1
 8012278:	e000      	b.n	801227c <tcp_receive+0x258>
 801227a:	2302      	movs	r3, #2
 801227c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012280:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012284:	b29a      	uxth	r2, r3
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801228a:	fb12 f303 	smulbb	r3, r2, r3
 801228e:	b29b      	uxth	r3, r3
 8012290:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012292:	4293      	cmp	r3, r2
 8012294:	bf28      	it	cs
 8012296:	4613      	movcs	r3, r2
 8012298:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122a2:	4413      	add	r3, r2
 80122a4:	b29a      	uxth	r2, r3
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d309      	bcc.n	80122c4 <tcp_receive+0x2a0>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80122b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80122b8:	4413      	add	r3, r2
 80122ba:	b29a      	uxth	r2, r3
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80122c2:	e060      	b.n	8012386 <tcp_receive+0x362>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80122ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80122ce:	e05a      	b.n	8012386 <tcp_receive+0x362>
 80122d0:	0801b83c 	.word	0x0801b83c
 80122d4:	0801bb6c 	.word	0x0801bb6c
 80122d8:	0801b888 	.word	0x0801b888
 80122dc:	0801bb88 	.word	0x0801bb88
 80122e0:	20004f08 	.word	0x20004f08
 80122e4:	20004efc 	.word	0x20004efc
 80122e8:	20004f00 	.word	0x20004f00
 80122ec:	20004eec 	.word	0x20004eec
 80122f0:	20004f06 	.word	0x20004f06
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80122fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80122fc:	4413      	add	r3, r2
 80122fe:	b29a      	uxth	r2, r3
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012306:	429a      	cmp	r2, r3
 8012308:	d309      	bcc.n	801231e <tcp_receive+0x2fa>
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012310:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012312:	4413      	add	r3, r2
 8012314:	b29a      	uxth	r2, r3
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801231c:	e004      	b.n	8012328 <tcp_receive+0x304>
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012324:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012334:	429a      	cmp	r2, r3
 8012336:	d326      	bcc.n	8012386 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012344:	1ad3      	subs	r3, r2, r3
 8012346:	b29a      	uxth	r2, r3
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012358:	4413      	add	r3, r2
 801235a:	b29a      	uxth	r2, r3
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012362:	429a      	cmp	r2, r3
 8012364:	d30a      	bcc.n	801237c <tcp_receive+0x358>
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012370:	4413      	add	r3, r2
 8012372:	b29a      	uxth	r2, r3
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801237a:	e004      	b.n	8012386 <tcp_receive+0x362>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012382:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801238e:	4a98      	ldr	r2, [pc, #608]	; (80125f0 <tcp_receive+0x5cc>)
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f7ff fdcb 	bl	8011f2c <tcp_free_acked_segments>
 8012396:	4602      	mov	r2, r0
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123a4:	4a93      	ldr	r2, [pc, #588]	; (80125f4 <tcp_receive+0x5d0>)
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f7ff fdc0 	bl	8011f2c <tcp_free_acked_segments>
 80123ac:	4602      	mov	r2, r0
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d104      	bne.n	80123c4 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80123c0:	861a      	strh	r2, [r3, #48]	; 0x30
 80123c2:	e002      	b.n	80123ca <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2200      	movs	r2, #0
 80123c8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2200      	movs	r2, #0
 80123ce:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d103      	bne.n	80123e0 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2200      	movs	r2, #0
 80123dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80123e6:	4b84      	ldr	r3, [pc, #528]	; (80125f8 <tcp_receive+0x5d4>)
 80123e8:	881b      	ldrh	r3, [r3, #0]
 80123ea:	4413      	add	r3, r2
 80123ec:	b29a      	uxth	r2, r3
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	8b5b      	ldrh	r3, [r3, #26]
 80123f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d035      	beq.n	801246c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012404:	2b00      	cmp	r3, #0
 8012406:	d118      	bne.n	801243a <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00c      	beq.n	801242a <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	4618      	mov	r0, r3
 801241e:	f7fa fa48 	bl	800c8b2 <lwip_htonl>
 8012422:	4603      	mov	r3, r0
 8012424:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012426:	2b00      	cmp	r3, #0
 8012428:	dc20      	bgt.n	801246c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	8b5b      	ldrh	r3, [r3, #26]
 801242e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012432:	b29a      	uxth	r2, r3
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012438:	e018      	b.n	801246c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012442:	68db      	ldr	r3, [r3, #12]
 8012444:	685b      	ldr	r3, [r3, #4]
 8012446:	4618      	mov	r0, r3
 8012448:	f7fa fa33 	bl	800c8b2 <lwip_htonl>
 801244c:	4603      	mov	r3, r0
 801244e:	1ae3      	subs	r3, r4, r3
 8012450:	2b00      	cmp	r3, #0
 8012452:	dc0b      	bgt.n	801246c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	8b5b      	ldrh	r3, [r3, #26]
 8012458:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801245c:	b29a      	uxth	r2, r3
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012462:	e003      	b.n	801246c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f002 fbcd 	bl	8014c04 <tcp_send_empty_ack>
 801246a:	e000      	b.n	801246e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801246c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012472:	2b00      	cmp	r3, #0
 8012474:	d05b      	beq.n	801252e <tcp_receive+0x50a>
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801247a:	4b60      	ldr	r3, [pc, #384]	; (80125fc <tcp_receive+0x5d8>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	1ad3      	subs	r3, r2, r3
 8012480:	2b00      	cmp	r3, #0
 8012482:	da54      	bge.n	801252e <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012484:	4b5e      	ldr	r3, [pc, #376]	; (8012600 <tcp_receive+0x5dc>)
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	b29a      	uxth	r2, r3
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801248e:	b29b      	uxth	r3, r3
 8012490:	1ad3      	subs	r3, r2, r3
 8012492:	b29b      	uxth	r3, r3
 8012494:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012498:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80124a2:	10db      	asrs	r3, r3, #3
 80124a4:	b21b      	sxth	r3, r3
 80124a6:	b29b      	uxth	r3, r3
 80124a8:	1ad3      	subs	r3, r2, r3
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124bc:	4413      	add	r3, r2
 80124be:	b29b      	uxth	r3, r3
 80124c0:	b21a      	sxth	r2, r3
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80124c6:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	da05      	bge.n	80124da <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80124ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124d2:	425b      	negs	r3, r3
 80124d4:	b29b      	uxth	r3, r3
 80124d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80124da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80124e4:	109b      	asrs	r3, r3, #2
 80124e6:	b21b      	sxth	r3, r3
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	1ad3      	subs	r3, r2, r3
 80124ec:	b29b      	uxth	r3, r3
 80124ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80124fe:	4413      	add	r3, r2
 8012500:	b29b      	uxth	r3, r3
 8012502:	b21a      	sxth	r2, r3
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801250e:	10db      	asrs	r3, r3, #3
 8012510:	b21b      	sxth	r3, r3
 8012512:	b29a      	uxth	r2, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801251a:	b29b      	uxth	r3, r3
 801251c:	4413      	add	r3, r2
 801251e:	b29b      	uxth	r3, r3
 8012520:	b21a      	sxth	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	2200      	movs	r2, #0
 801252c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801252e:	4b35      	ldr	r3, [pc, #212]	; (8012604 <tcp_receive+0x5e0>)
 8012530:	881b      	ldrh	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	f000 84e1 	beq.w	8012efa <tcp_receive+0xed6>
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	7d1b      	ldrb	r3, [r3, #20]
 801253c:	2b06      	cmp	r3, #6
 801253e:	f200 84dc 	bhi.w	8012efa <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012546:	4b30      	ldr	r3, [pc, #192]	; (8012608 <tcp_receive+0x5e4>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	1ad3      	subs	r3, r2, r3
 801254c:	3b01      	subs	r3, #1
 801254e:	2b00      	cmp	r3, #0
 8012550:	f2c0 808e 	blt.w	8012670 <tcp_receive+0x64c>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012558:	4b2a      	ldr	r3, [pc, #168]	; (8012604 <tcp_receive+0x5e0>)
 801255a:	881b      	ldrh	r3, [r3, #0]
 801255c:	4619      	mov	r1, r3
 801255e:	4b2a      	ldr	r3, [pc, #168]	; (8012608 <tcp_receive+0x5e4>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	440b      	add	r3, r1
 8012564:	1ad3      	subs	r3, r2, r3
 8012566:	3301      	adds	r3, #1
 8012568:	2b00      	cmp	r3, #0
 801256a:	f300 8081 	bgt.w	8012670 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801256e:	4b27      	ldr	r3, [pc, #156]	; (801260c <tcp_receive+0x5e8>)
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012578:	4b23      	ldr	r3, [pc, #140]	; (8012608 <tcp_receive+0x5e4>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	1ad3      	subs	r3, r2, r3
 801257e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012580:	4b22      	ldr	r3, [pc, #136]	; (801260c <tcp_receive+0x5e8>)
 8012582:	685b      	ldr	r3, [r3, #4]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d106      	bne.n	8012596 <tcp_receive+0x572>
 8012588:	4b21      	ldr	r3, [pc, #132]	; (8012610 <tcp_receive+0x5ec>)
 801258a:	f240 5294 	movw	r2, #1428	; 0x594
 801258e:	4921      	ldr	r1, [pc, #132]	; (8012614 <tcp_receive+0x5f0>)
 8012590:	4821      	ldr	r0, [pc, #132]	; (8012618 <tcp_receive+0x5f4>)
 8012592:	f006 f87b 	bl	801868c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012598:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801259c:	4293      	cmp	r3, r2
 801259e:	d906      	bls.n	80125ae <tcp_receive+0x58a>
 80125a0:	4b1b      	ldr	r3, [pc, #108]	; (8012610 <tcp_receive+0x5ec>)
 80125a2:	f240 5295 	movw	r2, #1429	; 0x595
 80125a6:	491d      	ldr	r1, [pc, #116]	; (801261c <tcp_receive+0x5f8>)
 80125a8:	481b      	ldr	r0, [pc, #108]	; (8012618 <tcp_receive+0x5f4>)
 80125aa:	f006 f86f 	bl	801868c <iprintf>
      off = (u16_t)off32;
 80125ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80125b4:	4b15      	ldr	r3, [pc, #84]	; (801260c <tcp_receive+0x5e8>)
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	891b      	ldrh	r3, [r3, #8]
 80125ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80125be:	429a      	cmp	r2, r3
 80125c0:	d906      	bls.n	80125d0 <tcp_receive+0x5ac>
 80125c2:	4b13      	ldr	r3, [pc, #76]	; (8012610 <tcp_receive+0x5ec>)
 80125c4:	f240 5297 	movw	r2, #1431	; 0x597
 80125c8:	4915      	ldr	r1, [pc, #84]	; (8012620 <tcp_receive+0x5fc>)
 80125ca:	4813      	ldr	r0, [pc, #76]	; (8012618 <tcp_receive+0x5f4>)
 80125cc:	f006 f85e 	bl	801868c <iprintf>
      inseg.len -= off;
 80125d0:	4b0e      	ldr	r3, [pc, #56]	; (801260c <tcp_receive+0x5e8>)
 80125d2:	891a      	ldrh	r2, [r3, #8]
 80125d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125d8:	1ad3      	subs	r3, r2, r3
 80125da:	b29a      	uxth	r2, r3
 80125dc:	4b0b      	ldr	r3, [pc, #44]	; (801260c <tcp_receive+0x5e8>)
 80125de:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80125e0:	4b0a      	ldr	r3, [pc, #40]	; (801260c <tcp_receive+0x5e8>)
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	891a      	ldrh	r2, [r3, #8]
 80125e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80125ea:	1ad3      	subs	r3, r2, r3
 80125ec:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80125ee:	e029      	b.n	8012644 <tcp_receive+0x620>
 80125f0:	0801bba4 	.word	0x0801bba4
 80125f4:	0801bbac 	.word	0x0801bbac
 80125f8:	20004f04 	.word	0x20004f04
 80125fc:	20004f00 	.word	0x20004f00
 8012600:	2000bd8c 	.word	0x2000bd8c
 8012604:	20004f06 	.word	0x20004f06
 8012608:	20004efc 	.word	0x20004efc
 801260c:	20004edc 	.word	0x20004edc
 8012610:	0801b83c 	.word	0x0801b83c
 8012614:	0801bbb4 	.word	0x0801bbb4
 8012618:	0801b888 	.word	0x0801b888
 801261c:	0801bbc4 	.word	0x0801bbc4
 8012620:	0801bbd4 	.word	0x0801bbd4
        off -= p->len;
 8012624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012626:	895b      	ldrh	r3, [r3, #10]
 8012628:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801262c:	1ad3      	subs	r3, r2, r3
 801262e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012634:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012636:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801263a:	2200      	movs	r2, #0
 801263c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801263e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8012644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012646:	895b      	ldrh	r3, [r3, #10]
 8012648:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801264c:	429a      	cmp	r2, r3
 801264e:	d8e9      	bhi.n	8012624 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012650:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012654:	4619      	mov	r1, r3
 8012656:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012658:	f7fb ff06 	bl	800e468 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012660:	4a91      	ldr	r2, [pc, #580]	; (80128a8 <tcp_receive+0x884>)
 8012662:	6013      	str	r3, [r2, #0]
 8012664:	4b91      	ldr	r3, [pc, #580]	; (80128ac <tcp_receive+0x888>)
 8012666:	68db      	ldr	r3, [r3, #12]
 8012668:	4a8f      	ldr	r2, [pc, #572]	; (80128a8 <tcp_receive+0x884>)
 801266a:	6812      	ldr	r2, [r2, #0]
 801266c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801266e:	e00d      	b.n	801268c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012670:	4b8d      	ldr	r3, [pc, #564]	; (80128a8 <tcp_receive+0x884>)
 8012672:	681a      	ldr	r2, [r3, #0]
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012678:	1ad3      	subs	r3, r2, r3
 801267a:	2b00      	cmp	r3, #0
 801267c:	da06      	bge.n	801268c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	8b5b      	ldrh	r3, [r3, #26]
 8012682:	f043 0302 	orr.w	r3, r3, #2
 8012686:	b29a      	uxth	r2, r3
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801268c:	4b86      	ldr	r3, [pc, #536]	; (80128a8 <tcp_receive+0x884>)
 801268e:	681a      	ldr	r2, [r3, #0]
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012694:	1ad3      	subs	r3, r2, r3
 8012696:	2b00      	cmp	r3, #0
 8012698:	f2c0 842a 	blt.w	8012ef0 <tcp_receive+0xecc>
 801269c:	4b82      	ldr	r3, [pc, #520]	; (80128a8 <tcp_receive+0x884>)
 801269e:	681a      	ldr	r2, [r3, #0]
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126a4:	6879      	ldr	r1, [r7, #4]
 80126a6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80126a8:	440b      	add	r3, r1
 80126aa:	1ad3      	subs	r3, r2, r3
 80126ac:	3301      	adds	r3, #1
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	f300 841e 	bgt.w	8012ef0 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80126b8:	4b7b      	ldr	r3, [pc, #492]	; (80128a8 <tcp_receive+0x884>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	429a      	cmp	r2, r3
 80126be:	f040 829a 	bne.w	8012bf6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80126c2:	4b7a      	ldr	r3, [pc, #488]	; (80128ac <tcp_receive+0x888>)
 80126c4:	891c      	ldrh	r4, [r3, #8]
 80126c6:	4b79      	ldr	r3, [pc, #484]	; (80128ac <tcp_receive+0x888>)
 80126c8:	68db      	ldr	r3, [r3, #12]
 80126ca:	899b      	ldrh	r3, [r3, #12]
 80126cc:	b29b      	uxth	r3, r3
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7fa f8da 	bl	800c888 <lwip_htons>
 80126d4:	4603      	mov	r3, r0
 80126d6:	b2db      	uxtb	r3, r3
 80126d8:	f003 0303 	and.w	r3, r3, #3
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d001      	beq.n	80126e4 <tcp_receive+0x6c0>
 80126e0:	2301      	movs	r3, #1
 80126e2:	e000      	b.n	80126e6 <tcp_receive+0x6c2>
 80126e4:	2300      	movs	r3, #0
 80126e6:	4423      	add	r3, r4
 80126e8:	b29a      	uxth	r2, r3
 80126ea:	4b71      	ldr	r3, [pc, #452]	; (80128b0 <tcp_receive+0x88c>)
 80126ec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80126f2:	4b6f      	ldr	r3, [pc, #444]	; (80128b0 <tcp_receive+0x88c>)
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	429a      	cmp	r2, r3
 80126f8:	d275      	bcs.n	80127e6 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80126fa:	4b6c      	ldr	r3, [pc, #432]	; (80128ac <tcp_receive+0x888>)
 80126fc:	68db      	ldr	r3, [r3, #12]
 80126fe:	899b      	ldrh	r3, [r3, #12]
 8012700:	b29b      	uxth	r3, r3
 8012702:	4618      	mov	r0, r3
 8012704:	f7fa f8c0 	bl	800c888 <lwip_htons>
 8012708:	4603      	mov	r3, r0
 801270a:	b2db      	uxtb	r3, r3
 801270c:	f003 0301 	and.w	r3, r3, #1
 8012710:	2b00      	cmp	r3, #0
 8012712:	d01f      	beq.n	8012754 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012714:	4b65      	ldr	r3, [pc, #404]	; (80128ac <tcp_receive+0x888>)
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	899b      	ldrh	r3, [r3, #12]
 801271a:	b29b      	uxth	r3, r3
 801271c:	b21b      	sxth	r3, r3
 801271e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012722:	b21c      	sxth	r4, r3
 8012724:	4b61      	ldr	r3, [pc, #388]	; (80128ac <tcp_receive+0x888>)
 8012726:	68db      	ldr	r3, [r3, #12]
 8012728:	899b      	ldrh	r3, [r3, #12]
 801272a:	b29b      	uxth	r3, r3
 801272c:	4618      	mov	r0, r3
 801272e:	f7fa f8ab 	bl	800c888 <lwip_htons>
 8012732:	4603      	mov	r3, r0
 8012734:	b2db      	uxtb	r3, r3
 8012736:	b29b      	uxth	r3, r3
 8012738:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801273c:	b29b      	uxth	r3, r3
 801273e:	4618      	mov	r0, r3
 8012740:	f7fa f8a2 	bl	800c888 <lwip_htons>
 8012744:	4603      	mov	r3, r0
 8012746:	b21b      	sxth	r3, r3
 8012748:	4323      	orrs	r3, r4
 801274a:	b21a      	sxth	r2, r3
 801274c:	4b57      	ldr	r3, [pc, #348]	; (80128ac <tcp_receive+0x888>)
 801274e:	68db      	ldr	r3, [r3, #12]
 8012750:	b292      	uxth	r2, r2
 8012752:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012758:	4b54      	ldr	r3, [pc, #336]	; (80128ac <tcp_receive+0x888>)
 801275a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801275c:	4b53      	ldr	r3, [pc, #332]	; (80128ac <tcp_receive+0x888>)
 801275e:	68db      	ldr	r3, [r3, #12]
 8012760:	899b      	ldrh	r3, [r3, #12]
 8012762:	b29b      	uxth	r3, r3
 8012764:	4618      	mov	r0, r3
 8012766:	f7fa f88f 	bl	800c888 <lwip_htons>
 801276a:	4603      	mov	r3, r0
 801276c:	b2db      	uxtb	r3, r3
 801276e:	f003 0302 	and.w	r3, r3, #2
 8012772:	2b00      	cmp	r3, #0
 8012774:	d005      	beq.n	8012782 <tcp_receive+0x75e>
            inseg.len -= 1;
 8012776:	4b4d      	ldr	r3, [pc, #308]	; (80128ac <tcp_receive+0x888>)
 8012778:	891b      	ldrh	r3, [r3, #8]
 801277a:	3b01      	subs	r3, #1
 801277c:	b29a      	uxth	r2, r3
 801277e:	4b4b      	ldr	r3, [pc, #300]	; (80128ac <tcp_receive+0x888>)
 8012780:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012782:	4b4a      	ldr	r3, [pc, #296]	; (80128ac <tcp_receive+0x888>)
 8012784:	685b      	ldr	r3, [r3, #4]
 8012786:	4a49      	ldr	r2, [pc, #292]	; (80128ac <tcp_receive+0x888>)
 8012788:	8912      	ldrh	r2, [r2, #8]
 801278a:	4611      	mov	r1, r2
 801278c:	4618      	mov	r0, r3
 801278e:	f7fb fd6b 	bl	800e268 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012792:	4b46      	ldr	r3, [pc, #280]	; (80128ac <tcp_receive+0x888>)
 8012794:	891c      	ldrh	r4, [r3, #8]
 8012796:	4b45      	ldr	r3, [pc, #276]	; (80128ac <tcp_receive+0x888>)
 8012798:	68db      	ldr	r3, [r3, #12]
 801279a:	899b      	ldrh	r3, [r3, #12]
 801279c:	b29b      	uxth	r3, r3
 801279e:	4618      	mov	r0, r3
 80127a0:	f7fa f872 	bl	800c888 <lwip_htons>
 80127a4:	4603      	mov	r3, r0
 80127a6:	b2db      	uxtb	r3, r3
 80127a8:	f003 0303 	and.w	r3, r3, #3
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d001      	beq.n	80127b4 <tcp_receive+0x790>
 80127b0:	2301      	movs	r3, #1
 80127b2:	e000      	b.n	80127b6 <tcp_receive+0x792>
 80127b4:	2300      	movs	r3, #0
 80127b6:	4423      	add	r3, r4
 80127b8:	b29a      	uxth	r2, r3
 80127ba:	4b3d      	ldr	r3, [pc, #244]	; (80128b0 <tcp_receive+0x88c>)
 80127bc:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80127be:	4b3c      	ldr	r3, [pc, #240]	; (80128b0 <tcp_receive+0x88c>)
 80127c0:	881b      	ldrh	r3, [r3, #0]
 80127c2:	461a      	mov	r2, r3
 80127c4:	4b38      	ldr	r3, [pc, #224]	; (80128a8 <tcp_receive+0x884>)
 80127c6:	681b      	ldr	r3, [r3, #0]
 80127c8:	441a      	add	r2, r3
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ce:	6879      	ldr	r1, [r7, #4]
 80127d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80127d2:	440b      	add	r3, r1
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d006      	beq.n	80127e6 <tcp_receive+0x7c2>
 80127d8:	4b36      	ldr	r3, [pc, #216]	; (80128b4 <tcp_receive+0x890>)
 80127da:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80127de:	4936      	ldr	r1, [pc, #216]	; (80128b8 <tcp_receive+0x894>)
 80127e0:	4836      	ldr	r0, [pc, #216]	; (80128bc <tcp_receive+0x898>)
 80127e2:	f005 ff53 	bl	801868c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	f000 80e7 	beq.w	80129be <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80127f0:	4b2e      	ldr	r3, [pc, #184]	; (80128ac <tcp_receive+0x888>)
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	899b      	ldrh	r3, [r3, #12]
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	4618      	mov	r0, r3
 80127fa:	f7fa f845 	bl	800c888 <lwip_htons>
 80127fe:	4603      	mov	r3, r0
 8012800:	b2db      	uxtb	r3, r3
 8012802:	f003 0301 	and.w	r3, r3, #1
 8012806:	2b00      	cmp	r3, #0
 8012808:	d010      	beq.n	801282c <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801280a:	e00a      	b.n	8012822 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012810:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012816:	681a      	ldr	r2, [r3, #0]
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801281c:	68f8      	ldr	r0, [r7, #12]
 801281e:	f7fd fcc8 	bl	80101b2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012826:	2b00      	cmp	r3, #0
 8012828:	d1f0      	bne.n	801280c <tcp_receive+0x7e8>
 801282a:	e0c8      	b.n	80129be <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012830:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8012832:	e052      	b.n	80128da <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012836:	68db      	ldr	r3, [r3, #12]
 8012838:	899b      	ldrh	r3, [r3, #12]
 801283a:	b29b      	uxth	r3, r3
 801283c:	4618      	mov	r0, r3
 801283e:	f7fa f823 	bl	800c888 <lwip_htons>
 8012842:	4603      	mov	r3, r0
 8012844:	b2db      	uxtb	r3, r3
 8012846:	f003 0301 	and.w	r3, r3, #1
 801284a:	2b00      	cmp	r3, #0
 801284c:	d03d      	beq.n	80128ca <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801284e:	4b17      	ldr	r3, [pc, #92]	; (80128ac <tcp_receive+0x888>)
 8012850:	68db      	ldr	r3, [r3, #12]
 8012852:	899b      	ldrh	r3, [r3, #12]
 8012854:	b29b      	uxth	r3, r3
 8012856:	4618      	mov	r0, r3
 8012858:	f7fa f816 	bl	800c888 <lwip_htons>
 801285c:	4603      	mov	r3, r0
 801285e:	b2db      	uxtb	r3, r3
 8012860:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8012864:	2b00      	cmp	r3, #0
 8012866:	d130      	bne.n	80128ca <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8012868:	4b10      	ldr	r3, [pc, #64]	; (80128ac <tcp_receive+0x888>)
 801286a:	68db      	ldr	r3, [r3, #12]
 801286c:	899b      	ldrh	r3, [r3, #12]
 801286e:	b29c      	uxth	r4, r3
 8012870:	2001      	movs	r0, #1
 8012872:	f7fa f809 	bl	800c888 <lwip_htons>
 8012876:	4603      	mov	r3, r0
 8012878:	461a      	mov	r2, r3
 801287a:	4b0c      	ldr	r3, [pc, #48]	; (80128ac <tcp_receive+0x888>)
 801287c:	68db      	ldr	r3, [r3, #12]
 801287e:	4322      	orrs	r2, r4
 8012880:	b292      	uxth	r2, r2
 8012882:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8012884:	4b09      	ldr	r3, [pc, #36]	; (80128ac <tcp_receive+0x888>)
 8012886:	891c      	ldrh	r4, [r3, #8]
 8012888:	4b08      	ldr	r3, [pc, #32]	; (80128ac <tcp_receive+0x888>)
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	899b      	ldrh	r3, [r3, #12]
 801288e:	b29b      	uxth	r3, r3
 8012890:	4618      	mov	r0, r3
 8012892:	f7f9 fff9 	bl	800c888 <lwip_htons>
 8012896:	4603      	mov	r3, r0
 8012898:	b2db      	uxtb	r3, r3
 801289a:	f003 0303 	and.w	r3, r3, #3
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d00e      	beq.n	80128c0 <tcp_receive+0x89c>
 80128a2:	2301      	movs	r3, #1
 80128a4:	e00d      	b.n	80128c2 <tcp_receive+0x89e>
 80128a6:	bf00      	nop
 80128a8:	20004efc 	.word	0x20004efc
 80128ac:	20004edc 	.word	0x20004edc
 80128b0:	20004f06 	.word	0x20004f06
 80128b4:	0801b83c 	.word	0x0801b83c
 80128b8:	0801bbe4 	.word	0x0801bbe4
 80128bc:	0801b888 	.word	0x0801b888
 80128c0:	2300      	movs	r3, #0
 80128c2:	4423      	add	r3, r4
 80128c4:	b29a      	uxth	r2, r3
 80128c6:	4b98      	ldr	r3, [pc, #608]	; (8012b28 <tcp_receive+0xb04>)
 80128c8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80128ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128cc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80128ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80128d4:	6938      	ldr	r0, [r7, #16]
 80128d6:	f7fd fc6c 	bl	80101b2 <tcp_seg_free>
            while (next &&
 80128da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d00e      	beq.n	80128fe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80128e0:	4b91      	ldr	r3, [pc, #580]	; (8012b28 <tcp_receive+0xb04>)
 80128e2:	881b      	ldrh	r3, [r3, #0]
 80128e4:	461a      	mov	r2, r3
 80128e6:	4b91      	ldr	r3, [pc, #580]	; (8012b2c <tcp_receive+0xb08>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	441a      	add	r2, r3
 80128ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ee:	68db      	ldr	r3, [r3, #12]
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80128f4:	8909      	ldrh	r1, [r1, #8]
 80128f6:	440b      	add	r3, r1
 80128f8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	da9a      	bge.n	8012834 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80128fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012900:	2b00      	cmp	r3, #0
 8012902:	d059      	beq.n	80129b8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8012904:	4b88      	ldr	r3, [pc, #544]	; (8012b28 <tcp_receive+0xb04>)
 8012906:	881b      	ldrh	r3, [r3, #0]
 8012908:	461a      	mov	r2, r3
 801290a:	4b88      	ldr	r3, [pc, #544]	; (8012b2c <tcp_receive+0xb08>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	441a      	add	r2, r3
 8012910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012912:	68db      	ldr	r3, [r3, #12]
 8012914:	685b      	ldr	r3, [r3, #4]
 8012916:	1ad3      	subs	r3, r2, r3
            if (next &&
 8012918:	2b00      	cmp	r3, #0
 801291a:	dd4d      	ble.n	80129b8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801291c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801291e:	68db      	ldr	r3, [r3, #12]
 8012920:	685b      	ldr	r3, [r3, #4]
 8012922:	b29a      	uxth	r2, r3
 8012924:	4b81      	ldr	r3, [pc, #516]	; (8012b2c <tcp_receive+0xb08>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	b29b      	uxth	r3, r3
 801292a:	1ad3      	subs	r3, r2, r3
 801292c:	b29a      	uxth	r2, r3
 801292e:	4b80      	ldr	r3, [pc, #512]	; (8012b30 <tcp_receive+0xb0c>)
 8012930:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012932:	4b7f      	ldr	r3, [pc, #508]	; (8012b30 <tcp_receive+0xb0c>)
 8012934:	68db      	ldr	r3, [r3, #12]
 8012936:	899b      	ldrh	r3, [r3, #12]
 8012938:	b29b      	uxth	r3, r3
 801293a:	4618      	mov	r0, r3
 801293c:	f7f9 ffa4 	bl	800c888 <lwip_htons>
 8012940:	4603      	mov	r3, r0
 8012942:	b2db      	uxtb	r3, r3
 8012944:	f003 0302 	and.w	r3, r3, #2
 8012948:	2b00      	cmp	r3, #0
 801294a:	d005      	beq.n	8012958 <tcp_receive+0x934>
                inseg.len -= 1;
 801294c:	4b78      	ldr	r3, [pc, #480]	; (8012b30 <tcp_receive+0xb0c>)
 801294e:	891b      	ldrh	r3, [r3, #8]
 8012950:	3b01      	subs	r3, #1
 8012952:	b29a      	uxth	r2, r3
 8012954:	4b76      	ldr	r3, [pc, #472]	; (8012b30 <tcp_receive+0xb0c>)
 8012956:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8012958:	4b75      	ldr	r3, [pc, #468]	; (8012b30 <tcp_receive+0xb0c>)
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	4a74      	ldr	r2, [pc, #464]	; (8012b30 <tcp_receive+0xb0c>)
 801295e:	8912      	ldrh	r2, [r2, #8]
 8012960:	4611      	mov	r1, r2
 8012962:	4618      	mov	r0, r3
 8012964:	f7fb fc80 	bl	800e268 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8012968:	4b71      	ldr	r3, [pc, #452]	; (8012b30 <tcp_receive+0xb0c>)
 801296a:	891c      	ldrh	r4, [r3, #8]
 801296c:	4b70      	ldr	r3, [pc, #448]	; (8012b30 <tcp_receive+0xb0c>)
 801296e:	68db      	ldr	r3, [r3, #12]
 8012970:	899b      	ldrh	r3, [r3, #12]
 8012972:	b29b      	uxth	r3, r3
 8012974:	4618      	mov	r0, r3
 8012976:	f7f9 ff87 	bl	800c888 <lwip_htons>
 801297a:	4603      	mov	r3, r0
 801297c:	b2db      	uxtb	r3, r3
 801297e:	f003 0303 	and.w	r3, r3, #3
 8012982:	2b00      	cmp	r3, #0
 8012984:	d001      	beq.n	801298a <tcp_receive+0x966>
 8012986:	2301      	movs	r3, #1
 8012988:	e000      	b.n	801298c <tcp_receive+0x968>
 801298a:	2300      	movs	r3, #0
 801298c:	4423      	add	r3, r4
 801298e:	b29a      	uxth	r2, r3
 8012990:	4b65      	ldr	r3, [pc, #404]	; (8012b28 <tcp_receive+0xb04>)
 8012992:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8012994:	4b64      	ldr	r3, [pc, #400]	; (8012b28 <tcp_receive+0xb04>)
 8012996:	881b      	ldrh	r3, [r3, #0]
 8012998:	461a      	mov	r2, r3
 801299a:	4b64      	ldr	r3, [pc, #400]	; (8012b2c <tcp_receive+0xb08>)
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	441a      	add	r2, r3
 80129a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129a2:	68db      	ldr	r3, [r3, #12]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d006      	beq.n	80129b8 <tcp_receive+0x994>
 80129aa:	4b62      	ldr	r3, [pc, #392]	; (8012b34 <tcp_receive+0xb10>)
 80129ac:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80129b0:	4961      	ldr	r1, [pc, #388]	; (8012b38 <tcp_receive+0xb14>)
 80129b2:	4862      	ldr	r0, [pc, #392]	; (8012b3c <tcp_receive+0xb18>)
 80129b4:	f005 fe6a 	bl	801868c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80129bc:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80129be:	4b5a      	ldr	r3, [pc, #360]	; (8012b28 <tcp_receive+0xb04>)
 80129c0:	881b      	ldrh	r3, [r3, #0]
 80129c2:	461a      	mov	r2, r3
 80129c4:	4b59      	ldr	r3, [pc, #356]	; (8012b2c <tcp_receive+0xb08>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	441a      	add	r2, r3
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80129d2:	4b55      	ldr	r3, [pc, #340]	; (8012b28 <tcp_receive+0xb04>)
 80129d4:	881b      	ldrh	r3, [r3, #0]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d206      	bcs.n	80129e8 <tcp_receive+0x9c4>
 80129da:	4b56      	ldr	r3, [pc, #344]	; (8012b34 <tcp_receive+0xb10>)
 80129dc:	f240 6207 	movw	r2, #1543	; 0x607
 80129e0:	4957      	ldr	r1, [pc, #348]	; (8012b40 <tcp_receive+0xb1c>)
 80129e2:	4856      	ldr	r0, [pc, #344]	; (8012b3c <tcp_receive+0xb18>)
 80129e4:	f005 fe52 	bl	801868c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80129ec:	4b4e      	ldr	r3, [pc, #312]	; (8012b28 <tcp_receive+0xb04>)
 80129ee:	881b      	ldrh	r3, [r3, #0]
 80129f0:	1ad3      	subs	r3, r2, r3
 80129f2:	b29a      	uxth	r2, r3
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80129f8:	6878      	ldr	r0, [r7, #4]
 80129fa:	f7fc feb5 	bl	800f768 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80129fe:	4b4c      	ldr	r3, [pc, #304]	; (8012b30 <tcp_receive+0xb0c>)
 8012a00:	685b      	ldr	r3, [r3, #4]
 8012a02:	891b      	ldrh	r3, [r3, #8]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d006      	beq.n	8012a16 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8012a08:	4b49      	ldr	r3, [pc, #292]	; (8012b30 <tcp_receive+0xb0c>)
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	4a4d      	ldr	r2, [pc, #308]	; (8012b44 <tcp_receive+0xb20>)
 8012a0e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012a10:	4b47      	ldr	r3, [pc, #284]	; (8012b30 <tcp_receive+0xb0c>)
 8012a12:	2200      	movs	r2, #0
 8012a14:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012a16:	4b46      	ldr	r3, [pc, #280]	; (8012b30 <tcp_receive+0xb0c>)
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	899b      	ldrh	r3, [r3, #12]
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	4618      	mov	r0, r3
 8012a20:	f7f9 ff32 	bl	800c888 <lwip_htons>
 8012a24:	4603      	mov	r3, r0
 8012a26:	b2db      	uxtb	r3, r3
 8012a28:	f003 0301 	and.w	r3, r3, #1
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	f000 80b8 	beq.w	8012ba2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012a32:	4b45      	ldr	r3, [pc, #276]	; (8012b48 <tcp_receive+0xb24>)
 8012a34:	781b      	ldrb	r3, [r3, #0]
 8012a36:	f043 0320 	orr.w	r3, r3, #32
 8012a3a:	b2da      	uxtb	r2, r3
 8012a3c:	4b42      	ldr	r3, [pc, #264]	; (8012b48 <tcp_receive+0xb24>)
 8012a3e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8012a40:	e0af      	b.n	8012ba2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a46:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	4a36      	ldr	r2, [pc, #216]	; (8012b2c <tcp_receive+0xb08>)
 8012a52:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8012a54:	68bb      	ldr	r3, [r7, #8]
 8012a56:	891b      	ldrh	r3, [r3, #8]
 8012a58:	461c      	mov	r4, r3
 8012a5a:	68bb      	ldr	r3, [r7, #8]
 8012a5c:	68db      	ldr	r3, [r3, #12]
 8012a5e:	899b      	ldrh	r3, [r3, #12]
 8012a60:	b29b      	uxth	r3, r3
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7f9 ff10 	bl	800c888 <lwip_htons>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	b2db      	uxtb	r3, r3
 8012a6c:	f003 0303 	and.w	r3, r3, #3
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d001      	beq.n	8012a78 <tcp_receive+0xa54>
 8012a74:	2301      	movs	r3, #1
 8012a76:	e000      	b.n	8012a7a <tcp_receive+0xa56>
 8012a78:	2300      	movs	r3, #0
 8012a7a:	191a      	adds	r2, r3, r4
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a80:	441a      	add	r2, r3
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a8a:	461c      	mov	r4, r3
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	891b      	ldrh	r3, [r3, #8]
 8012a90:	461d      	mov	r5, r3
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	68db      	ldr	r3, [r3, #12]
 8012a96:	899b      	ldrh	r3, [r3, #12]
 8012a98:	b29b      	uxth	r3, r3
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f7f9 fef4 	bl	800c888 <lwip_htons>
 8012aa0:	4603      	mov	r3, r0
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	f003 0303 	and.w	r3, r3, #3
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d001      	beq.n	8012ab0 <tcp_receive+0xa8c>
 8012aac:	2301      	movs	r3, #1
 8012aae:	e000      	b.n	8012ab2 <tcp_receive+0xa8e>
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	442b      	add	r3, r5
 8012ab4:	429c      	cmp	r4, r3
 8012ab6:	d206      	bcs.n	8012ac6 <tcp_receive+0xaa2>
 8012ab8:	4b1e      	ldr	r3, [pc, #120]	; (8012b34 <tcp_receive+0xb10>)
 8012aba:	f240 622b 	movw	r2, #1579	; 0x62b
 8012abe:	4923      	ldr	r1, [pc, #140]	; (8012b4c <tcp_receive+0xb28>)
 8012ac0:	481e      	ldr	r0, [pc, #120]	; (8012b3c <tcp_receive+0xb18>)
 8012ac2:	f005 fde3 	bl	801868c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	891b      	ldrh	r3, [r3, #8]
 8012aca:	461c      	mov	r4, r3
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	68db      	ldr	r3, [r3, #12]
 8012ad0:	899b      	ldrh	r3, [r3, #12]
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7f9 fed7 	bl	800c888 <lwip_htons>
 8012ada:	4603      	mov	r3, r0
 8012adc:	b2db      	uxtb	r3, r3
 8012ade:	f003 0303 	and.w	r3, r3, #3
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d001      	beq.n	8012aea <tcp_receive+0xac6>
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	e000      	b.n	8012aec <tcp_receive+0xac8>
 8012aea:	2300      	movs	r3, #0
 8012aec:	1919      	adds	r1, r3, r4
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012af2:	b28b      	uxth	r3, r1
 8012af4:	1ad3      	subs	r3, r2, r3
 8012af6:	b29a      	uxth	r2, r3
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8012afc:	6878      	ldr	r0, [r7, #4]
 8012afe:	f7fc fe33 	bl	800f768 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8012b02:	68bb      	ldr	r3, [r7, #8]
 8012b04:	685b      	ldr	r3, [r3, #4]
 8012b06:	891b      	ldrh	r3, [r3, #8]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d028      	beq.n	8012b5e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8012b0c:	4b0d      	ldr	r3, [pc, #52]	; (8012b44 <tcp_receive+0xb20>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d01d      	beq.n	8012b50 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8012b14:	4b0b      	ldr	r3, [pc, #44]	; (8012b44 <tcp_receive+0xb20>)
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	68bb      	ldr	r3, [r7, #8]
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	4619      	mov	r1, r3
 8012b1e:	4610      	mov	r0, r2
 8012b20:	f7fb fe28 	bl	800e774 <pbuf_cat>
 8012b24:	e018      	b.n	8012b58 <tcp_receive+0xb34>
 8012b26:	bf00      	nop
 8012b28:	20004f06 	.word	0x20004f06
 8012b2c:	20004efc 	.word	0x20004efc
 8012b30:	20004edc 	.word	0x20004edc
 8012b34:	0801b83c 	.word	0x0801b83c
 8012b38:	0801bc1c 	.word	0x0801bc1c
 8012b3c:	0801b888 	.word	0x0801b888
 8012b40:	0801bc58 	.word	0x0801bc58
 8012b44:	20004f0c 	.word	0x20004f0c
 8012b48:	20004f09 	.word	0x20004f09
 8012b4c:	0801bc78 	.word	0x0801bc78
            } else {
              recv_data = cseg->p;
 8012b50:	68bb      	ldr	r3, [r7, #8]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	4a70      	ldr	r2, [pc, #448]	; (8012d18 <tcp_receive+0xcf4>)
 8012b56:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	68db      	ldr	r3, [r3, #12]
 8012b62:	899b      	ldrh	r3, [r3, #12]
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7f9 fe8e 	bl	800c888 <lwip_htons>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	b2db      	uxtb	r3, r3
 8012b70:	f003 0301 	and.w	r3, r3, #1
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d00d      	beq.n	8012b94 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8012b78:	4b68      	ldr	r3, [pc, #416]	; (8012d1c <tcp_receive+0xcf8>)
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	f043 0320 	orr.w	r3, r3, #32
 8012b80:	b2da      	uxtb	r2, r3
 8012b82:	4b66      	ldr	r3, [pc, #408]	; (8012d1c <tcp_receive+0xcf8>)
 8012b84:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	7d1b      	ldrb	r3, [r3, #20]
 8012b8a:	2b04      	cmp	r3, #4
 8012b8c:	d102      	bne.n	8012b94 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2207      	movs	r2, #7
 8012b92:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8012b94:	68bb      	ldr	r3, [r7, #8]
 8012b96:	681a      	ldr	r2, [r3, #0]
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8012b9c:	68b8      	ldr	r0, [r7, #8]
 8012b9e:	f7fd fb08 	bl	80101b2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d008      	beq.n	8012bbc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	685a      	ldr	r2, [r3, #4]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	f43f af43 	beq.w	8012a42 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	8b5b      	ldrh	r3, [r3, #26]
 8012bc0:	f003 0301 	and.w	r3, r3, #1
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d00e      	beq.n	8012be6 <tcp_receive+0xbc2>
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	8b5b      	ldrh	r3, [r3, #26]
 8012bcc:	f023 0301 	bic.w	r3, r3, #1
 8012bd0:	b29a      	uxth	r2, r3
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	835a      	strh	r2, [r3, #26]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	8b5b      	ldrh	r3, [r3, #26]
 8012bda:	f043 0302 	orr.w	r3, r3, #2
 8012bde:	b29a      	uxth	r2, r3
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012be4:	e188      	b.n	8012ef8 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	8b5b      	ldrh	r3, [r3, #26]
 8012bea:	f043 0301 	orr.w	r3, r3, #1
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012bf4:	e180      	b.n	8012ef8 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d106      	bne.n	8012c0c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8012bfe:	4848      	ldr	r0, [pc, #288]	; (8012d20 <tcp_receive+0xcfc>)
 8012c00:	f7fd faf0 	bl	80101e4 <tcp_seg_copy>
 8012c04:	4602      	mov	r2, r0
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	675a      	str	r2, [r3, #116]	; 0x74
 8012c0a:	e16d      	b.n	8012ee8 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8012c0c:	2300      	movs	r3, #0
 8012c0e:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c14:	63bb      	str	r3, [r7, #56]	; 0x38
 8012c16:	e157      	b.n	8012ec8 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8012c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c1a:	68db      	ldr	r3, [r3, #12]
 8012c1c:	685a      	ldr	r2, [r3, #4]
 8012c1e:	4b41      	ldr	r3, [pc, #260]	; (8012d24 <tcp_receive+0xd00>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d11d      	bne.n	8012c62 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8012c26:	4b3e      	ldr	r3, [pc, #248]	; (8012d20 <tcp_receive+0xcfc>)
 8012c28:	891a      	ldrh	r2, [r3, #8]
 8012c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c2c:	891b      	ldrh	r3, [r3, #8]
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	f240 814f 	bls.w	8012ed2 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c34:	483a      	ldr	r0, [pc, #232]	; (8012d20 <tcp_receive+0xcfc>)
 8012c36:	f7fd fad5 	bl	80101e4 <tcp_seg_copy>
 8012c3a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	f000 8149 	beq.w	8012ed6 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8012c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d003      	beq.n	8012c52 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8012c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c4c:	697a      	ldr	r2, [r7, #20]
 8012c4e:	601a      	str	r2, [r3, #0]
 8012c50:	e002      	b.n	8012c58 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	697a      	ldr	r2, [r7, #20]
 8012c56:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8012c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c5a:	6978      	ldr	r0, [r7, #20]
 8012c5c:	f7ff f8de 	bl	8011e1c <tcp_oos_insert_segment>
                }
                break;
 8012c60:	e139      	b.n	8012ed6 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8012c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d117      	bne.n	8012c98 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8012c68:	4b2e      	ldr	r3, [pc, #184]	; (8012d24 <tcp_receive+0xd00>)
 8012c6a:	681a      	ldr	r2, [r3, #0]
 8012c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c6e:	68db      	ldr	r3, [r3, #12]
 8012c70:	685b      	ldr	r3, [r3, #4]
 8012c72:	1ad3      	subs	r3, r2, r3
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	da57      	bge.n	8012d28 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012c78:	4829      	ldr	r0, [pc, #164]	; (8012d20 <tcp_receive+0xcfc>)
 8012c7a:	f7fd fab3 	bl	80101e4 <tcp_seg_copy>
 8012c7e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8012c80:	69bb      	ldr	r3, [r7, #24]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	f000 8129 	beq.w	8012eda <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	69ba      	ldr	r2, [r7, #24]
 8012c8c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8012c8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012c90:	69b8      	ldr	r0, [r7, #24]
 8012c92:	f7ff f8c3 	bl	8011e1c <tcp_oos_insert_segment>
                  }
                  break;
 8012c96:	e120      	b.n	8012eda <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8012c98:	4b22      	ldr	r3, [pc, #136]	; (8012d24 <tcp_receive+0xd00>)
 8012c9a:	681a      	ldr	r2, [r3, #0]
 8012c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	1ad3      	subs	r3, r2, r3
 8012ca4:	3b01      	subs	r3, #1
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	db3e      	blt.n	8012d28 <tcp_receive+0xd04>
 8012caa:	4b1e      	ldr	r3, [pc, #120]	; (8012d24 <tcp_receive+0xd00>)
 8012cac:	681a      	ldr	r2, [r3, #0]
 8012cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	685b      	ldr	r3, [r3, #4]
 8012cb4:	1ad3      	subs	r3, r2, r3
 8012cb6:	3301      	adds	r3, #1
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	dc35      	bgt.n	8012d28 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8012cbc:	4818      	ldr	r0, [pc, #96]	; (8012d20 <tcp_receive+0xcfc>)
 8012cbe:	f7fd fa91 	bl	80101e4 <tcp_seg_copy>
 8012cc2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8012cc4:	69fb      	ldr	r3, [r7, #28]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	f000 8109 	beq.w	8012ede <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8012ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012cd4:	8912      	ldrh	r2, [r2, #8]
 8012cd6:	441a      	add	r2, r3
 8012cd8:	4b12      	ldr	r3, [pc, #72]	; (8012d24 <tcp_receive+0xd00>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	1ad3      	subs	r3, r2, r3
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	dd12      	ble.n	8012d08 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8012ce2:	4b10      	ldr	r3, [pc, #64]	; (8012d24 <tcp_receive+0xd00>)
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	b29a      	uxth	r2, r3
 8012ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cea:	68db      	ldr	r3, [r3, #12]
 8012cec:	685b      	ldr	r3, [r3, #4]
 8012cee:	b29b      	uxth	r3, r3
 8012cf0:	1ad3      	subs	r3, r2, r3
 8012cf2:	b29a      	uxth	r2, r3
 8012cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cf6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8012cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cfa:	685a      	ldr	r2, [r3, #4]
 8012cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cfe:	891b      	ldrh	r3, [r3, #8]
 8012d00:	4619      	mov	r1, r3
 8012d02:	4610      	mov	r0, r2
 8012d04:	f7fb fab0 	bl	800e268 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8012d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012d0a:	69fa      	ldr	r2, [r7, #28]
 8012d0c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8012d0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d10:	69f8      	ldr	r0, [r7, #28]
 8012d12:	f7ff f883 	bl	8011e1c <tcp_oos_insert_segment>
                  }
                  break;
 8012d16:	e0e2      	b.n	8012ede <tcp_receive+0xeba>
 8012d18:	20004f0c 	.word	0x20004f0c
 8012d1c:	20004f09 	.word	0x20004f09
 8012d20:	20004edc 	.word	0x20004edc
 8012d24:	20004efc 	.word	0x20004efc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8012d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2a:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8012d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	f040 80c6 	bne.w	8012ec2 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8012d36:	4b80      	ldr	r3, [pc, #512]	; (8012f38 <tcp_receive+0xf14>)
 8012d38:	681a      	ldr	r2, [r3, #0]
 8012d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3c:	68db      	ldr	r3, [r3, #12]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	f340 80bd 	ble.w	8012ec2 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d4a:	68db      	ldr	r3, [r3, #12]
 8012d4c:	899b      	ldrh	r3, [r3, #12]
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7f9 fd99 	bl	800c888 <lwip_htons>
 8012d56:	4603      	mov	r3, r0
 8012d58:	b2db      	uxtb	r3, r3
 8012d5a:	f003 0301 	and.w	r3, r3, #1
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	f040 80bf 	bne.w	8012ee2 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8012d64:	4875      	ldr	r0, [pc, #468]	; (8012f3c <tcp_receive+0xf18>)
 8012d66:	f7fd fa3d 	bl	80101e4 <tcp_seg_copy>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8012d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	f000 80b6 	beq.w	8012ee6 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8012d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	685b      	ldr	r3, [r3, #4]
 8012d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d82:	8912      	ldrh	r2, [r2, #8]
 8012d84:	441a      	add	r2, r3
 8012d86:	4b6c      	ldr	r3, [pc, #432]	; (8012f38 <tcp_receive+0xf14>)
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	1ad3      	subs	r3, r2, r3
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	dd12      	ble.n	8012db6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8012d90:	4b69      	ldr	r3, [pc, #420]	; (8012f38 <tcp_receive+0xf14>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	b29a      	uxth	r2, r3
 8012d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	b29b      	uxth	r3, r3
 8012d9e:	1ad3      	subs	r3, r2, r3
 8012da0:	b29a      	uxth	r2, r3
 8012da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da8:	685a      	ldr	r2, [r3, #4]
 8012daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dac:	891b      	ldrh	r3, [r3, #8]
 8012dae:	4619      	mov	r1, r3
 8012db0:	4610      	mov	r0, r2
 8012db2:	f7fb fa59 	bl	800e268 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012db6:	4b62      	ldr	r3, [pc, #392]	; (8012f40 <tcp_receive+0xf1c>)
 8012db8:	881b      	ldrh	r3, [r3, #0]
 8012dba:	461a      	mov	r2, r3
 8012dbc:	4b5e      	ldr	r3, [pc, #376]	; (8012f38 <tcp_receive+0xf14>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	441a      	add	r2, r3
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dc6:	6879      	ldr	r1, [r7, #4]
 8012dc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012dca:	440b      	add	r3, r1
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	f340 8089 	ble.w	8012ee6 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	68db      	ldr	r3, [r3, #12]
 8012dda:	899b      	ldrh	r3, [r3, #12]
 8012ddc:	b29b      	uxth	r3, r3
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7f9 fd52 	bl	800c888 <lwip_htons>
 8012de4:	4603      	mov	r3, r0
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	f003 0301 	and.w	r3, r3, #1
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d022      	beq.n	8012e36 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8012df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	68db      	ldr	r3, [r3, #12]
 8012df6:	899b      	ldrh	r3, [r3, #12]
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	b21b      	sxth	r3, r3
 8012dfc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e00:	b21c      	sxth	r4, r3
 8012e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	899b      	ldrh	r3, [r3, #12]
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	4618      	mov	r0, r3
 8012e0e:	f7f9 fd3b 	bl	800c888 <lwip_htons>
 8012e12:	4603      	mov	r3, r0
 8012e14:	b2db      	uxtb	r3, r3
 8012e16:	b29b      	uxth	r3, r3
 8012e18:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012e1c:	b29b      	uxth	r3, r3
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7f9 fd32 	bl	800c888 <lwip_htons>
 8012e24:	4603      	mov	r3, r0
 8012e26:	b21b      	sxth	r3, r3
 8012e28:	4323      	orrs	r3, r4
 8012e2a:	b21a      	sxth	r2, r3
 8012e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	68db      	ldr	r3, [r3, #12]
 8012e32:	b292      	uxth	r2, r2
 8012e34:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e40:	4413      	add	r3, r2
 8012e42:	b299      	uxth	r1, r3
 8012e44:	4b3c      	ldr	r3, [pc, #240]	; (8012f38 <tcp_receive+0xf14>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	b29a      	uxth	r2, r3
 8012e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	1a8a      	subs	r2, r1, r2
 8012e50:	b292      	uxth	r2, r2
 8012e52:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8012e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	685a      	ldr	r2, [r3, #4]
 8012e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	891b      	ldrh	r3, [r3, #8]
 8012e60:	4619      	mov	r1, r3
 8012e62:	4610      	mov	r0, r2
 8012e64:	f7fb fa00 	bl	800e268 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8012e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	891c      	ldrh	r4, [r3, #8]
 8012e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	899b      	ldrh	r3, [r3, #12]
 8012e76:	b29b      	uxth	r3, r3
 8012e78:	4618      	mov	r0, r3
 8012e7a:	f7f9 fd05 	bl	800c888 <lwip_htons>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	b2db      	uxtb	r3, r3
 8012e82:	f003 0303 	and.w	r3, r3, #3
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d001      	beq.n	8012e8e <tcp_receive+0xe6a>
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	e000      	b.n	8012e90 <tcp_receive+0xe6c>
 8012e8e:	2300      	movs	r3, #0
 8012e90:	4423      	add	r3, r4
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	4b2a      	ldr	r3, [pc, #168]	; (8012f40 <tcp_receive+0xf1c>)
 8012e96:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012e98:	4b29      	ldr	r3, [pc, #164]	; (8012f40 <tcp_receive+0xf1c>)
 8012e9a:	881b      	ldrh	r3, [r3, #0]
 8012e9c:	461a      	mov	r2, r3
 8012e9e:	4b26      	ldr	r3, [pc, #152]	; (8012f38 <tcp_receive+0xf14>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	441a      	add	r2, r3
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ea8:	6879      	ldr	r1, [r7, #4]
 8012eaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012eac:	440b      	add	r3, r1
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d019      	beq.n	8012ee6 <tcp_receive+0xec2>
 8012eb2:	4b24      	ldr	r3, [pc, #144]	; (8012f44 <tcp_receive+0xf20>)
 8012eb4:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012eb8:	4923      	ldr	r1, [pc, #140]	; (8012f48 <tcp_receive+0xf24>)
 8012eba:	4824      	ldr	r0, [pc, #144]	; (8012f4c <tcp_receive+0xf28>)
 8012ebc:	f005 fbe6 	bl	801868c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8012ec0:	e011      	b.n	8012ee6 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8012ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	63bb      	str	r3, [r7, #56]	; 0x38
 8012ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	f47f aea4 	bne.w	8012c18 <tcp_receive+0xbf4>
 8012ed0:	e00a      	b.n	8012ee8 <tcp_receive+0xec4>
                break;
 8012ed2:	bf00      	nop
 8012ed4:	e008      	b.n	8012ee8 <tcp_receive+0xec4>
                break;
 8012ed6:	bf00      	nop
 8012ed8:	e006      	b.n	8012ee8 <tcp_receive+0xec4>
                  break;
 8012eda:	bf00      	nop
 8012edc:	e004      	b.n	8012ee8 <tcp_receive+0xec4>
                  break;
 8012ede:	bf00      	nop
 8012ee0:	e002      	b.n	8012ee8 <tcp_receive+0xec4>
                  break;
 8012ee2:	bf00      	nop
 8012ee4:	e000      	b.n	8012ee8 <tcp_receive+0xec4>
                break;
 8012ee6:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f001 fe8b 	bl	8014c04 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012eee:	e003      	b.n	8012ef8 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f001 fe87 	bl	8014c04 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012ef6:	e01a      	b.n	8012f2e <tcp_receive+0xf0a>
 8012ef8:	e019      	b.n	8012f2e <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012efa:	4b0f      	ldr	r3, [pc, #60]	; (8012f38 <tcp_receive+0xf14>)
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f02:	1ad3      	subs	r3, r2, r3
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	db0a      	blt.n	8012f1e <tcp_receive+0xefa>
 8012f08:	4b0b      	ldr	r3, [pc, #44]	; (8012f38 <tcp_receive+0xf14>)
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f10:	6879      	ldr	r1, [r7, #4]
 8012f12:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f14:	440b      	add	r3, r1
 8012f16:	1ad3      	subs	r3, r2, r3
 8012f18:	3301      	adds	r3, #1
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	dd07      	ble.n	8012f2e <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	8b5b      	ldrh	r3, [r3, #26]
 8012f22:	f043 0302 	orr.w	r3, r3, #2
 8012f26:	b29a      	uxth	r2, r3
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012f2c:	e7ff      	b.n	8012f2e <tcp_receive+0xf0a>
 8012f2e:	bf00      	nop
 8012f30:	3750      	adds	r7, #80	; 0x50
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bdb0      	pop	{r4, r5, r7, pc}
 8012f36:	bf00      	nop
 8012f38:	20004efc 	.word	0x20004efc
 8012f3c:	20004edc 	.word	0x20004edc
 8012f40:	20004f06 	.word	0x20004f06
 8012f44:	0801b83c 	.word	0x0801b83c
 8012f48:	0801bbe4 	.word	0x0801bbe4
 8012f4c:	0801b888 	.word	0x0801b888

08012f50 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012f50:	b480      	push	{r7}
 8012f52:	b083      	sub	sp, #12
 8012f54:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012f56:	4b15      	ldr	r3, [pc, #84]	; (8012fac <tcp_get_next_optbyte+0x5c>)
 8012f58:	881b      	ldrh	r3, [r3, #0]
 8012f5a:	1c5a      	adds	r2, r3, #1
 8012f5c:	b291      	uxth	r1, r2
 8012f5e:	4a13      	ldr	r2, [pc, #76]	; (8012fac <tcp_get_next_optbyte+0x5c>)
 8012f60:	8011      	strh	r1, [r2, #0]
 8012f62:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012f64:	4b12      	ldr	r3, [pc, #72]	; (8012fb0 <tcp_get_next_optbyte+0x60>)
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d004      	beq.n	8012f76 <tcp_get_next_optbyte+0x26>
 8012f6c:	4b11      	ldr	r3, [pc, #68]	; (8012fb4 <tcp_get_next_optbyte+0x64>)
 8012f6e:	881b      	ldrh	r3, [r3, #0]
 8012f70:	88fa      	ldrh	r2, [r7, #6]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d208      	bcs.n	8012f88 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012f76:	4b10      	ldr	r3, [pc, #64]	; (8012fb8 <tcp_get_next_optbyte+0x68>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	3314      	adds	r3, #20
 8012f7c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012f7e:	88fb      	ldrh	r3, [r7, #6]
 8012f80:	683a      	ldr	r2, [r7, #0]
 8012f82:	4413      	add	r3, r2
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	e00b      	b.n	8012fa0 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012f88:	88fb      	ldrh	r3, [r7, #6]
 8012f8a:	b2da      	uxtb	r2, r3
 8012f8c:	4b09      	ldr	r3, [pc, #36]	; (8012fb4 <tcp_get_next_optbyte+0x64>)
 8012f8e:	881b      	ldrh	r3, [r3, #0]
 8012f90:	b2db      	uxtb	r3, r3
 8012f92:	1ad3      	subs	r3, r2, r3
 8012f94:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012f96:	4b06      	ldr	r3, [pc, #24]	; (8012fb0 <tcp_get_next_optbyte+0x60>)
 8012f98:	681a      	ldr	r2, [r3, #0]
 8012f9a:	797b      	ldrb	r3, [r7, #5]
 8012f9c:	4413      	add	r3, r2
 8012f9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	370c      	adds	r7, #12
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012faa:	4770      	bx	lr
 8012fac:	20004ef8 	.word	0x20004ef8
 8012fb0:	20004ef4 	.word	0x20004ef4
 8012fb4:	20004ef2 	.word	0x20004ef2
 8012fb8:	20004eec 	.word	0x20004eec

08012fbc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b084      	sub	sp, #16
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d106      	bne.n	8012fd8 <tcp_parseopt+0x1c>
 8012fca:	4b32      	ldr	r3, [pc, #200]	; (8013094 <tcp_parseopt+0xd8>)
 8012fcc:	f240 727d 	movw	r2, #1917	; 0x77d
 8012fd0:	4931      	ldr	r1, [pc, #196]	; (8013098 <tcp_parseopt+0xdc>)
 8012fd2:	4832      	ldr	r0, [pc, #200]	; (801309c <tcp_parseopt+0xe0>)
 8012fd4:	f005 fb5a 	bl	801868c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012fd8:	4b31      	ldr	r3, [pc, #196]	; (80130a0 <tcp_parseopt+0xe4>)
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d055      	beq.n	801308c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012fe0:	4b30      	ldr	r3, [pc, #192]	; (80130a4 <tcp_parseopt+0xe8>)
 8012fe2:	2200      	movs	r2, #0
 8012fe4:	801a      	strh	r2, [r3, #0]
 8012fe6:	e045      	b.n	8013074 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012fe8:	f7ff ffb2 	bl	8012f50 <tcp_get_next_optbyte>
 8012fec:	4603      	mov	r3, r0
 8012fee:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012ff0:	7bfb      	ldrb	r3, [r7, #15]
 8012ff2:	2b02      	cmp	r3, #2
 8012ff4:	d006      	beq.n	8013004 <tcp_parseopt+0x48>
 8012ff6:	2b02      	cmp	r3, #2
 8012ff8:	dc2b      	bgt.n	8013052 <tcp_parseopt+0x96>
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d041      	beq.n	8013082 <tcp_parseopt+0xc6>
 8012ffe:	2b01      	cmp	r3, #1
 8013000:	d127      	bne.n	8013052 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013002:	e037      	b.n	8013074 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013004:	f7ff ffa4 	bl	8012f50 <tcp_get_next_optbyte>
 8013008:	4603      	mov	r3, r0
 801300a:	2b04      	cmp	r3, #4
 801300c:	d13b      	bne.n	8013086 <tcp_parseopt+0xca>
 801300e:	4b25      	ldr	r3, [pc, #148]	; (80130a4 <tcp_parseopt+0xe8>)
 8013010:	881b      	ldrh	r3, [r3, #0]
 8013012:	3301      	adds	r3, #1
 8013014:	4a22      	ldr	r2, [pc, #136]	; (80130a0 <tcp_parseopt+0xe4>)
 8013016:	8812      	ldrh	r2, [r2, #0]
 8013018:	4293      	cmp	r3, r2
 801301a:	da34      	bge.n	8013086 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801301c:	f7ff ff98 	bl	8012f50 <tcp_get_next_optbyte>
 8013020:	4603      	mov	r3, r0
 8013022:	b29b      	uxth	r3, r3
 8013024:	021b      	lsls	r3, r3, #8
 8013026:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013028:	f7ff ff92 	bl	8012f50 <tcp_get_next_optbyte>
 801302c:	4603      	mov	r3, r0
 801302e:	b29a      	uxth	r2, r3
 8013030:	89bb      	ldrh	r3, [r7, #12]
 8013032:	4313      	orrs	r3, r2
 8013034:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013036:	89bb      	ldrh	r3, [r7, #12]
 8013038:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801303c:	d804      	bhi.n	8013048 <tcp_parseopt+0x8c>
 801303e:	89bb      	ldrh	r3, [r7, #12]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d001      	beq.n	8013048 <tcp_parseopt+0x8c>
 8013044:	89ba      	ldrh	r2, [r7, #12]
 8013046:	e001      	b.n	801304c <tcp_parseopt+0x90>
 8013048:	f44f 7206 	mov.w	r2, #536	; 0x218
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013050:	e010      	b.n	8013074 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013052:	f7ff ff7d 	bl	8012f50 <tcp_get_next_optbyte>
 8013056:	4603      	mov	r3, r0
 8013058:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801305a:	7afb      	ldrb	r3, [r7, #11]
 801305c:	2b01      	cmp	r3, #1
 801305e:	d914      	bls.n	801308a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013060:	7afb      	ldrb	r3, [r7, #11]
 8013062:	b29a      	uxth	r2, r3
 8013064:	4b0f      	ldr	r3, [pc, #60]	; (80130a4 <tcp_parseopt+0xe8>)
 8013066:	881b      	ldrh	r3, [r3, #0]
 8013068:	4413      	add	r3, r2
 801306a:	b29b      	uxth	r3, r3
 801306c:	3b02      	subs	r3, #2
 801306e:	b29a      	uxth	r2, r3
 8013070:	4b0c      	ldr	r3, [pc, #48]	; (80130a4 <tcp_parseopt+0xe8>)
 8013072:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013074:	4b0b      	ldr	r3, [pc, #44]	; (80130a4 <tcp_parseopt+0xe8>)
 8013076:	881a      	ldrh	r2, [r3, #0]
 8013078:	4b09      	ldr	r3, [pc, #36]	; (80130a0 <tcp_parseopt+0xe4>)
 801307a:	881b      	ldrh	r3, [r3, #0]
 801307c:	429a      	cmp	r2, r3
 801307e:	d3b3      	bcc.n	8012fe8 <tcp_parseopt+0x2c>
 8013080:	e004      	b.n	801308c <tcp_parseopt+0xd0>
          return;
 8013082:	bf00      	nop
 8013084:	e002      	b.n	801308c <tcp_parseopt+0xd0>
            return;
 8013086:	bf00      	nop
 8013088:	e000      	b.n	801308c <tcp_parseopt+0xd0>
            return;
 801308a:	bf00      	nop
      }
    }
  }
}
 801308c:	3710      	adds	r7, #16
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	0801b83c 	.word	0x0801b83c
 8013098:	0801bca0 	.word	0x0801bca0
 801309c:	0801b888 	.word	0x0801b888
 80130a0:	20004ef0 	.word	0x20004ef0
 80130a4:	20004ef8 	.word	0x20004ef8

080130a8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80130a8:	b480      	push	{r7}
 80130aa:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80130ac:	4b05      	ldr	r3, [pc, #20]	; (80130c4 <tcp_trigger_input_pcb_close+0x1c>)
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	f043 0310 	orr.w	r3, r3, #16
 80130b4:	b2da      	uxtb	r2, r3
 80130b6:	4b03      	ldr	r3, [pc, #12]	; (80130c4 <tcp_trigger_input_pcb_close+0x1c>)
 80130b8:	701a      	strb	r2, [r3, #0]
}
 80130ba:	bf00      	nop
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr
 80130c4:	20004f09 	.word	0x20004f09

080130c8 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	60f8      	str	r0, [r7, #12]
 80130d0:	60b9      	str	r1, [r7, #8]
 80130d2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d00a      	beq.n	80130f0 <tcp_route+0x28>
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	7a1b      	ldrb	r3, [r3, #8]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d006      	beq.n	80130f0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	7a1b      	ldrb	r3, [r3, #8]
 80130e6:	4618      	mov	r0, r3
 80130e8:	f7fa feb6 	bl	800de58 <netif_get_by_index>
 80130ec:	4603      	mov	r3, r0
 80130ee:	e003      	b.n	80130f8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80130f0:	6878      	ldr	r0, [r7, #4]
 80130f2:	f003 fe35 	bl	8016d60 <ip4_route>
 80130f6:	4603      	mov	r3, r0
  }
}
 80130f8:	4618      	mov	r0, r3
 80130fa:	3710      	adds	r7, #16
 80130fc:	46bd      	mov	sp, r7
 80130fe:	bd80      	pop	{r7, pc}

08013100 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013100:	b590      	push	{r4, r7, lr}
 8013102:	b087      	sub	sp, #28
 8013104:	af00      	add	r7, sp, #0
 8013106:	60f8      	str	r0, [r7, #12]
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	603b      	str	r3, [r7, #0]
 801310c:	4613      	mov	r3, r2
 801310e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d105      	bne.n	8013122 <tcp_create_segment+0x22>
 8013116:	4b44      	ldr	r3, [pc, #272]	; (8013228 <tcp_create_segment+0x128>)
 8013118:	22a3      	movs	r2, #163	; 0xa3
 801311a:	4944      	ldr	r1, [pc, #272]	; (801322c <tcp_create_segment+0x12c>)
 801311c:	4844      	ldr	r0, [pc, #272]	; (8013230 <tcp_create_segment+0x130>)
 801311e:	f005 fab5 	bl	801868c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013122:	68bb      	ldr	r3, [r7, #8]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d105      	bne.n	8013134 <tcp_create_segment+0x34>
 8013128:	4b3f      	ldr	r3, [pc, #252]	; (8013228 <tcp_create_segment+0x128>)
 801312a:	22a4      	movs	r2, #164	; 0xa4
 801312c:	4941      	ldr	r1, [pc, #260]	; (8013234 <tcp_create_segment+0x134>)
 801312e:	4840      	ldr	r0, [pc, #256]	; (8013230 <tcp_create_segment+0x130>)
 8013130:	f005 faac 	bl	801868c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013134:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013138:	009b      	lsls	r3, r3, #2
 801313a:	b2db      	uxtb	r3, r3
 801313c:	f003 0304 	and.w	r3, r3, #4
 8013140:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013142:	2003      	movs	r0, #3
 8013144:	f7fa fb20 	bl	800d788 <memp_malloc>
 8013148:	6138      	str	r0, [r7, #16]
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d104      	bne.n	801315a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013150:	68b8      	ldr	r0, [r7, #8]
 8013152:	f7fb fa41 	bl	800e5d8 <pbuf_free>
    return NULL;
 8013156:	2300      	movs	r3, #0
 8013158:	e061      	b.n	801321e <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801315a:	693b      	ldr	r3, [r7, #16]
 801315c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013160:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013162:	693b      	ldr	r3, [r7, #16]
 8013164:	2200      	movs	r2, #0
 8013166:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013168:	693b      	ldr	r3, [r7, #16]
 801316a:	68ba      	ldr	r2, [r7, #8]
 801316c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	891a      	ldrh	r2, [r3, #8]
 8013172:	7dfb      	ldrb	r3, [r7, #23]
 8013174:	b29b      	uxth	r3, r3
 8013176:	429a      	cmp	r2, r3
 8013178:	d205      	bcs.n	8013186 <tcp_create_segment+0x86>
 801317a:	4b2b      	ldr	r3, [pc, #172]	; (8013228 <tcp_create_segment+0x128>)
 801317c:	22b0      	movs	r2, #176	; 0xb0
 801317e:	492e      	ldr	r1, [pc, #184]	; (8013238 <tcp_create_segment+0x138>)
 8013180:	482b      	ldr	r0, [pc, #172]	; (8013230 <tcp_create_segment+0x130>)
 8013182:	f005 fa83 	bl	801868c <iprintf>
  seg->len = p->tot_len - optlen;
 8013186:	68bb      	ldr	r3, [r7, #8]
 8013188:	891a      	ldrh	r2, [r3, #8]
 801318a:	7dfb      	ldrb	r3, [r7, #23]
 801318c:	b29b      	uxth	r3, r3
 801318e:	1ad3      	subs	r3, r2, r3
 8013190:	b29a      	uxth	r2, r3
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013196:	2114      	movs	r1, #20
 8013198:	68b8      	ldr	r0, [r7, #8]
 801319a:	f7fb f955 	bl	800e448 <pbuf_add_header>
 801319e:	4603      	mov	r3, r0
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d004      	beq.n	80131ae <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80131a4:	6938      	ldr	r0, [r7, #16]
 80131a6:	f7fd f804 	bl	80101b2 <tcp_seg_free>
    return NULL;
 80131aa:	2300      	movs	r3, #0
 80131ac:	e037      	b.n	801321e <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	685a      	ldr	r2, [r3, #4]
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	8ada      	ldrh	r2, [r3, #22]
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	68dc      	ldr	r4, [r3, #12]
 80131c0:	4610      	mov	r0, r2
 80131c2:	f7f9 fb61 	bl	800c888 <lwip_htons>
 80131c6:	4603      	mov	r3, r0
 80131c8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	8b1a      	ldrh	r2, [r3, #24]
 80131ce:	693b      	ldr	r3, [r7, #16]
 80131d0:	68dc      	ldr	r4, [r3, #12]
 80131d2:	4610      	mov	r0, r2
 80131d4:	f7f9 fb58 	bl	800c888 <lwip_htons>
 80131d8:	4603      	mov	r3, r0
 80131da:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80131dc:	693b      	ldr	r3, [r7, #16]
 80131de:	68dc      	ldr	r4, [r3, #12]
 80131e0:	6838      	ldr	r0, [r7, #0]
 80131e2:	f7f9 fb66 	bl	800c8b2 <lwip_htonl>
 80131e6:	4603      	mov	r3, r0
 80131e8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80131ea:	7dfb      	ldrb	r3, [r7, #23]
 80131ec:	089b      	lsrs	r3, r3, #2
 80131ee:	b2db      	uxtb	r3, r3
 80131f0:	b29b      	uxth	r3, r3
 80131f2:	3305      	adds	r3, #5
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	031b      	lsls	r3, r3, #12
 80131f8:	b29a      	uxth	r2, r3
 80131fa:	79fb      	ldrb	r3, [r7, #7]
 80131fc:	b29b      	uxth	r3, r3
 80131fe:	4313      	orrs	r3, r2
 8013200:	b29a      	uxth	r2, r3
 8013202:	693b      	ldr	r3, [r7, #16]
 8013204:	68dc      	ldr	r4, [r3, #12]
 8013206:	4610      	mov	r0, r2
 8013208:	f7f9 fb3e 	bl	800c888 <lwip_htons>
 801320c:	4603      	mov	r3, r0
 801320e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013210:	693b      	ldr	r3, [r7, #16]
 8013212:	68db      	ldr	r3, [r3, #12]
 8013214:	2200      	movs	r2, #0
 8013216:	749a      	strb	r2, [r3, #18]
 8013218:	2200      	movs	r2, #0
 801321a:	74da      	strb	r2, [r3, #19]
  return seg;
 801321c:	693b      	ldr	r3, [r7, #16]
}
 801321e:	4618      	mov	r0, r3
 8013220:	371c      	adds	r7, #28
 8013222:	46bd      	mov	sp, r7
 8013224:	bd90      	pop	{r4, r7, pc}
 8013226:	bf00      	nop
 8013228:	0801bcbc 	.word	0x0801bcbc
 801322c:	0801bcf0 	.word	0x0801bcf0
 8013230:	0801bd10 	.word	0x0801bd10
 8013234:	0801bd38 	.word	0x0801bd38
 8013238:	0801bd5c 	.word	0x0801bd5c

0801323c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b086      	sub	sp, #24
 8013240:	af00      	add	r7, sp, #0
 8013242:	607b      	str	r3, [r7, #4]
 8013244:	4603      	mov	r3, r0
 8013246:	73fb      	strb	r3, [r7, #15]
 8013248:	460b      	mov	r3, r1
 801324a:	81bb      	strh	r3, [r7, #12]
 801324c:	4613      	mov	r3, r2
 801324e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013250:	89bb      	ldrh	r3, [r7, #12]
 8013252:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d105      	bne.n	8013266 <tcp_pbuf_prealloc+0x2a>
 801325a:	4b30      	ldr	r3, [pc, #192]	; (801331c <tcp_pbuf_prealloc+0xe0>)
 801325c:	22e8      	movs	r2, #232	; 0xe8
 801325e:	4930      	ldr	r1, [pc, #192]	; (8013320 <tcp_pbuf_prealloc+0xe4>)
 8013260:	4830      	ldr	r0, [pc, #192]	; (8013324 <tcp_pbuf_prealloc+0xe8>)
 8013262:	f005 fa13 	bl	801868c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8013266:	6a3b      	ldr	r3, [r7, #32]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d105      	bne.n	8013278 <tcp_pbuf_prealloc+0x3c>
 801326c:	4b2b      	ldr	r3, [pc, #172]	; (801331c <tcp_pbuf_prealloc+0xe0>)
 801326e:	22e9      	movs	r2, #233	; 0xe9
 8013270:	492d      	ldr	r1, [pc, #180]	; (8013328 <tcp_pbuf_prealloc+0xec>)
 8013272:	482c      	ldr	r0, [pc, #176]	; (8013324 <tcp_pbuf_prealloc+0xe8>)
 8013274:	f005 fa0a 	bl	801868c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8013278:	89ba      	ldrh	r2, [r7, #12]
 801327a:	897b      	ldrh	r3, [r7, #10]
 801327c:	429a      	cmp	r2, r3
 801327e:	d221      	bcs.n	80132c4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013280:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013284:	f003 0302 	and.w	r3, r3, #2
 8013288:	2b00      	cmp	r3, #0
 801328a:	d111      	bne.n	80132b0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801328c:	6a3b      	ldr	r3, [r7, #32]
 801328e:	8b5b      	ldrh	r3, [r3, #26]
 8013290:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013294:	2b00      	cmp	r3, #0
 8013296:	d115      	bne.n	80132c4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8013298:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801329c:	2b00      	cmp	r3, #0
 801329e:	d007      	beq.n	80132b0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80132a0:	6a3b      	ldr	r3, [r7, #32]
 80132a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d103      	bne.n	80132b0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	d009      	beq.n	80132c4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80132b0:	89bb      	ldrh	r3, [r7, #12]
 80132b2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80132b6:	f023 0203 	bic.w	r2, r3, #3
 80132ba:	897b      	ldrh	r3, [r7, #10]
 80132bc:	4293      	cmp	r3, r2
 80132be:	bf28      	it	cs
 80132c0:	4613      	movcs	r3, r2
 80132c2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80132c4:	8af9      	ldrh	r1, [r7, #22]
 80132c6:	7bfb      	ldrb	r3, [r7, #15]
 80132c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80132cc:	4618      	mov	r0, r3
 80132ce:	f7fa fe6d 	bl	800dfac <pbuf_alloc>
 80132d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80132d4:	693b      	ldr	r3, [r7, #16]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d101      	bne.n	80132de <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80132da:	2300      	movs	r3, #0
 80132dc:	e019      	b.n	8013312 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80132de:	693b      	ldr	r3, [r7, #16]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d006      	beq.n	80132f4 <tcp_pbuf_prealloc+0xb8>
 80132e6:	4b0d      	ldr	r3, [pc, #52]	; (801331c <tcp_pbuf_prealloc+0xe0>)
 80132e8:	f240 120b 	movw	r2, #267	; 0x10b
 80132ec:	490f      	ldr	r1, [pc, #60]	; (801332c <tcp_pbuf_prealloc+0xf0>)
 80132ee:	480d      	ldr	r0, [pc, #52]	; (8013324 <tcp_pbuf_prealloc+0xe8>)
 80132f0:	f005 f9cc 	bl	801868c <iprintf>
  *oversize = p->len - length;
 80132f4:	693b      	ldr	r3, [r7, #16]
 80132f6:	895a      	ldrh	r2, [r3, #10]
 80132f8:	89bb      	ldrh	r3, [r7, #12]
 80132fa:	1ad3      	subs	r3, r2, r3
 80132fc:	b29a      	uxth	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	89ba      	ldrh	r2, [r7, #12]
 8013306:	811a      	strh	r2, [r3, #8]
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	891a      	ldrh	r2, [r3, #8]
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	815a      	strh	r2, [r3, #10]
  return p;
 8013310:	693b      	ldr	r3, [r7, #16]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3718      	adds	r7, #24
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	0801bcbc 	.word	0x0801bcbc
 8013320:	0801bd74 	.word	0x0801bd74
 8013324:	0801bd10 	.word	0x0801bd10
 8013328:	0801bd98 	.word	0x0801bd98
 801332c:	0801bdb8 	.word	0x0801bdb8

08013330 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	460b      	mov	r3, r1
 801333a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d106      	bne.n	8013350 <tcp_write_checks+0x20>
 8013342:	4b33      	ldr	r3, [pc, #204]	; (8013410 <tcp_write_checks+0xe0>)
 8013344:	f240 1233 	movw	r2, #307	; 0x133
 8013348:	4932      	ldr	r1, [pc, #200]	; (8013414 <tcp_write_checks+0xe4>)
 801334a:	4833      	ldr	r0, [pc, #204]	; (8013418 <tcp_write_checks+0xe8>)
 801334c:	f005 f99e 	bl	801868c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	7d1b      	ldrb	r3, [r3, #20]
 8013354:	2b04      	cmp	r3, #4
 8013356:	d00e      	beq.n	8013376 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801335c:	2b07      	cmp	r3, #7
 801335e:	d00a      	beq.n	8013376 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013364:	2b02      	cmp	r3, #2
 8013366:	d006      	beq.n	8013376 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801336c:	2b03      	cmp	r3, #3
 801336e:	d002      	beq.n	8013376 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013370:	f06f 030a 	mvn.w	r3, #10
 8013374:	e048      	b.n	8013408 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8013376:	887b      	ldrh	r3, [r7, #2]
 8013378:	2b00      	cmp	r3, #0
 801337a:	d101      	bne.n	8013380 <tcp_write_checks+0x50>
    return ERR_OK;
 801337c:	2300      	movs	r3, #0
 801337e:	e043      	b.n	8013408 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013386:	887a      	ldrh	r2, [r7, #2]
 8013388:	429a      	cmp	r2, r3
 801338a:	d909      	bls.n	80133a0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	8b5b      	ldrh	r3, [r3, #26]
 8013390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013394:	b29a      	uxth	r2, r3
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801339a:	f04f 33ff 	mov.w	r3, #4294967295
 801339e:	e033      	b.n	8013408 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133a6:	2b08      	cmp	r3, #8
 80133a8:	d909      	bls.n	80133be <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	8b5b      	ldrh	r3, [r3, #26]
 80133ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80133b2:	b29a      	uxth	r2, r3
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80133b8:	f04f 33ff 	mov.w	r3, #4294967295
 80133bc:	e024      	b.n	8013408 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d00f      	beq.n	80133e8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d11a      	bne.n	8013406 <tcp_write_checks+0xd6>
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d116      	bne.n	8013406 <tcp_write_checks+0xd6>
 80133d8:	4b0d      	ldr	r3, [pc, #52]	; (8013410 <tcp_write_checks+0xe0>)
 80133da:	f240 1255 	movw	r2, #341	; 0x155
 80133de:	490f      	ldr	r1, [pc, #60]	; (801341c <tcp_write_checks+0xec>)
 80133e0:	480d      	ldr	r0, [pc, #52]	; (8013418 <tcp_write_checks+0xe8>)
 80133e2:	f005 f953 	bl	801868c <iprintf>
 80133e6:	e00e      	b.n	8013406 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d103      	bne.n	80133f8 <tcp_write_checks+0xc8>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d006      	beq.n	8013406 <tcp_write_checks+0xd6>
 80133f8:	4b05      	ldr	r3, [pc, #20]	; (8013410 <tcp_write_checks+0xe0>)
 80133fa:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80133fe:	4908      	ldr	r1, [pc, #32]	; (8013420 <tcp_write_checks+0xf0>)
 8013400:	4805      	ldr	r0, [pc, #20]	; (8013418 <tcp_write_checks+0xe8>)
 8013402:	f005 f943 	bl	801868c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8013406:	2300      	movs	r3, #0
}
 8013408:	4618      	mov	r0, r3
 801340a:	3708      	adds	r7, #8
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	0801bcbc 	.word	0x0801bcbc
 8013414:	0801bdcc 	.word	0x0801bdcc
 8013418:	0801bd10 	.word	0x0801bd10
 801341c:	0801bdec 	.word	0x0801bdec
 8013420:	0801be28 	.word	0x0801be28

08013424 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013424:	b590      	push	{r4, r7, lr}
 8013426:	b09b      	sub	sp, #108	; 0x6c
 8013428:	af04      	add	r7, sp, #16
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	4611      	mov	r1, r2
 8013430:	461a      	mov	r2, r3
 8013432:	460b      	mov	r3, r1
 8013434:	80fb      	strh	r3, [r7, #6]
 8013436:	4613      	mov	r3, r2
 8013438:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801343a:	2300      	movs	r3, #0
 801343c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801343e:	2300      	movs	r3, #0
 8013440:	653b      	str	r3, [r7, #80]	; 0x50
 8013442:	2300      	movs	r3, #0
 8013444:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013446:	2300      	movs	r3, #0
 8013448:	64bb      	str	r3, [r7, #72]	; 0x48
 801344a:	2300      	movs	r3, #0
 801344c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801344e:	2300      	movs	r3, #0
 8013450:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013454:	2300      	movs	r3, #0
 8013456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801345a:	2300      	movs	r3, #0
 801345c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801345e:	2300      	movs	r3, #0
 8013460:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013462:	2300      	movs	r3, #0
 8013464:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d109      	bne.n	8013480 <tcp_write+0x5c>
 801346c:	4ba4      	ldr	r3, [pc, #656]	; (8013700 <tcp_write+0x2dc>)
 801346e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013472:	49a4      	ldr	r1, [pc, #656]	; (8013704 <tcp_write+0x2e0>)
 8013474:	48a4      	ldr	r0, [pc, #656]	; (8013708 <tcp_write+0x2e4>)
 8013476:	f005 f909 	bl	801868c <iprintf>
 801347a:	f06f 030f 	mvn.w	r3, #15
 801347e:	e32a      	b.n	8013ad6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8013486:	085b      	lsrs	r3, r3, #1
 8013488:	b29a      	uxth	r2, r3
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801348e:	4293      	cmp	r3, r2
 8013490:	bf28      	it	cs
 8013492:	4613      	movcs	r3, r2
 8013494:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8013496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013498:	2b00      	cmp	r3, #0
 801349a:	d102      	bne.n	80134a2 <tcp_write+0x7e>
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134a0:	e000      	b.n	80134a4 <tcp_write+0x80>
 80134a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d109      	bne.n	80134c0 <tcp_write+0x9c>
 80134ac:	4b94      	ldr	r3, [pc, #592]	; (8013700 <tcp_write+0x2dc>)
 80134ae:	f240 12ad 	movw	r2, #429	; 0x1ad
 80134b2:	4996      	ldr	r1, [pc, #600]	; (801370c <tcp_write+0x2e8>)
 80134b4:	4894      	ldr	r0, [pc, #592]	; (8013708 <tcp_write+0x2e4>)
 80134b6:	f005 f8e9 	bl	801868c <iprintf>
 80134ba:	f06f 030f 	mvn.w	r3, #15
 80134be:	e30a      	b.n	8013ad6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80134c0:	88fb      	ldrh	r3, [r7, #6]
 80134c2:	4619      	mov	r1, r3
 80134c4:	68f8      	ldr	r0, [r7, #12]
 80134c6:	f7ff ff33 	bl	8013330 <tcp_write_checks>
 80134ca:	4603      	mov	r3, r0
 80134cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80134d0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d002      	beq.n	80134de <tcp_write+0xba>
    return err;
 80134d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80134dc:	e2fb      	b.n	8013ad6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80134e8:	2300      	movs	r3, #0
 80134ea:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f000 80f6 	beq.w	80136e4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134fc:	653b      	str	r3, [r7, #80]	; 0x50
 80134fe:	e002      	b.n	8013506 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d1f8      	bne.n	8013500 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801350e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013510:	7a9b      	ldrb	r3, [r3, #10]
 8013512:	009b      	lsls	r3, r3, #2
 8013514:	b29b      	uxth	r3, r3
 8013516:	f003 0304 	and.w	r3, r3, #4
 801351a:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801351c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801351e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013520:	891b      	ldrh	r3, [r3, #8]
 8013522:	4619      	mov	r1, r3
 8013524:	8c3b      	ldrh	r3, [r7, #32]
 8013526:	440b      	add	r3, r1
 8013528:	429a      	cmp	r2, r3
 801352a:	da06      	bge.n	801353a <tcp_write+0x116>
 801352c:	4b74      	ldr	r3, [pc, #464]	; (8013700 <tcp_write+0x2dc>)
 801352e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013532:	4977      	ldr	r1, [pc, #476]	; (8013710 <tcp_write+0x2ec>)
 8013534:	4874      	ldr	r0, [pc, #464]	; (8013708 <tcp_write+0x2e4>)
 8013536:	f005 f8a9 	bl	801868c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801353a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801353c:	891a      	ldrh	r2, [r3, #8]
 801353e:	8c3b      	ldrh	r3, [r7, #32]
 8013540:	4413      	add	r3, r2
 8013542:	b29b      	uxth	r3, r3
 8013544:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013546:	1ad3      	subs	r3, r2, r3
 8013548:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013550:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013552:	8a7b      	ldrh	r3, [r7, #18]
 8013554:	2b00      	cmp	r3, #0
 8013556:	d026      	beq.n	80135a6 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8013558:	8a7b      	ldrh	r3, [r7, #18]
 801355a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801355c:	429a      	cmp	r2, r3
 801355e:	d206      	bcs.n	801356e <tcp_write+0x14a>
 8013560:	4b67      	ldr	r3, [pc, #412]	; (8013700 <tcp_write+0x2dc>)
 8013562:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8013566:	496b      	ldr	r1, [pc, #428]	; (8013714 <tcp_write+0x2f0>)
 8013568:	4867      	ldr	r0, [pc, #412]	; (8013708 <tcp_write+0x2e4>)
 801356a:	f005 f88f 	bl	801868c <iprintf>
      seg = last_unsent;
 801356e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013570:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013572:	8a7b      	ldrh	r3, [r7, #18]
 8013574:	88fa      	ldrh	r2, [r7, #6]
 8013576:	4293      	cmp	r3, r2
 8013578:	bf28      	it	cs
 801357a:	4613      	movcs	r3, r2
 801357c:	b29b      	uxth	r3, r3
 801357e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013580:	4293      	cmp	r3, r2
 8013582:	bf28      	it	cs
 8013584:	4613      	movcs	r3, r2
 8013586:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8013588:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801358c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801358e:	4413      	add	r3, r2
 8013590:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013594:	8a7a      	ldrh	r2, [r7, #18]
 8013596:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013598:	1ad3      	subs	r3, r2, r3
 801359a:	b29b      	uxth	r3, r3
 801359c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801359e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80135a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80135a2:	1ad3      	subs	r3, r2, r3
 80135a4:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80135a6:	8a7b      	ldrh	r3, [r7, #18]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d00b      	beq.n	80135c4 <tcp_write+0x1a0>
 80135ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135b0:	88fb      	ldrh	r3, [r7, #6]
 80135b2:	429a      	cmp	r2, r3
 80135b4:	d006      	beq.n	80135c4 <tcp_write+0x1a0>
 80135b6:	4b52      	ldr	r3, [pc, #328]	; (8013700 <tcp_write+0x2dc>)
 80135b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80135bc:	4956      	ldr	r1, [pc, #344]	; (8013718 <tcp_write+0x2f4>)
 80135be:	4852      	ldr	r0, [pc, #328]	; (8013708 <tcp_write+0x2e4>)
 80135c0:	f005 f864 	bl	801868c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80135c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80135c8:	88fb      	ldrh	r3, [r7, #6]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	f080 8167 	bcs.w	801389e <tcp_write+0x47a>
 80135d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	f000 8163 	beq.w	801389e <tcp_write+0x47a>
 80135d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135da:	891b      	ldrh	r3, [r3, #8]
 80135dc:	2b00      	cmp	r3, #0
 80135de:	f000 815e 	beq.w	801389e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80135e2:	88fa      	ldrh	r2, [r7, #6]
 80135e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135e8:	1ad2      	subs	r2, r2, r3
 80135ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80135ec:	4293      	cmp	r3, r2
 80135ee:	bfa8      	it	ge
 80135f0:	4613      	movge	r3, r2
 80135f2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80135f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80135f6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80135f8:	797b      	ldrb	r3, [r7, #5]
 80135fa:	f003 0301 	and.w	r3, r3, #1
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d027      	beq.n	8013652 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013602:	f107 0012 	add.w	r0, r7, #18
 8013606:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013608:	8bf9      	ldrh	r1, [r7, #30]
 801360a:	2301      	movs	r3, #1
 801360c:	9302      	str	r3, [sp, #8]
 801360e:	797b      	ldrb	r3, [r7, #5]
 8013610:	9301      	str	r3, [sp, #4]
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	9300      	str	r3, [sp, #0]
 8013616:	4603      	mov	r3, r0
 8013618:	2000      	movs	r0, #0
 801361a:	f7ff fe0f 	bl	801323c <tcp_pbuf_prealloc>
 801361e:	6578      	str	r0, [r7, #84]	; 0x54
 8013620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013622:	2b00      	cmp	r3, #0
 8013624:	f000 8225 	beq.w	8013a72 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8013628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801362a:	6858      	ldr	r0, [r3, #4]
 801362c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013630:	68ba      	ldr	r2, [r7, #8]
 8013632:	4413      	add	r3, r2
 8013634:	8bfa      	ldrh	r2, [r7, #30]
 8013636:	4619      	mov	r1, r3
 8013638:	f004 ff68 	bl	801850c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801363c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801363e:	f7fb f859 	bl	800e6f4 <pbuf_clen>
 8013642:	4603      	mov	r3, r0
 8013644:	461a      	mov	r2, r3
 8013646:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801364a:	4413      	add	r3, r2
 801364c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013650:	e041      	b.n	80136d6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013654:	685b      	ldr	r3, [r3, #4]
 8013656:	637b      	str	r3, [r7, #52]	; 0x34
 8013658:	e002      	b.n	8013660 <tcp_write+0x23c>
 801365a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	637b      	str	r3, [r7, #52]	; 0x34
 8013660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013662:	681b      	ldr	r3, [r3, #0]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d1f8      	bne.n	801365a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801366a:	7b1b      	ldrb	r3, [r3, #12]
 801366c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013670:	2b00      	cmp	r3, #0
 8013672:	d115      	bne.n	80136a0 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013676:	685b      	ldr	r3, [r3, #4]
 8013678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801367a:	8952      	ldrh	r2, [r2, #10]
 801367c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801367e:	68ba      	ldr	r2, [r7, #8]
 8013680:	429a      	cmp	r2, r3
 8013682:	d10d      	bne.n	80136a0 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013684:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013688:	2b00      	cmp	r3, #0
 801368a:	d006      	beq.n	801369a <tcp_write+0x276>
 801368c:	4b1c      	ldr	r3, [pc, #112]	; (8013700 <tcp_write+0x2dc>)
 801368e:	f240 2231 	movw	r2, #561	; 0x231
 8013692:	4922      	ldr	r1, [pc, #136]	; (801371c <tcp_write+0x2f8>)
 8013694:	481c      	ldr	r0, [pc, #112]	; (8013708 <tcp_write+0x2e4>)
 8013696:	f004 fff9 	bl	801868c <iprintf>
          extendlen = seglen;
 801369a:	8bfb      	ldrh	r3, [r7, #30]
 801369c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801369e:	e01a      	b.n	80136d6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80136a0:	8bfb      	ldrh	r3, [r7, #30]
 80136a2:	2201      	movs	r2, #1
 80136a4:	4619      	mov	r1, r3
 80136a6:	2000      	movs	r0, #0
 80136a8:	f7fa fc80 	bl	800dfac <pbuf_alloc>
 80136ac:	6578      	str	r0, [r7, #84]	; 0x54
 80136ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	f000 81e0 	beq.w	8013a76 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80136b6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136ba:	68ba      	ldr	r2, [r7, #8]
 80136bc:	441a      	add	r2, r3
 80136be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80136c0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80136c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80136c4:	f7fb f816 	bl	800e6f4 <pbuf_clen>
 80136c8:	4603      	mov	r3, r0
 80136ca:	461a      	mov	r2, r3
 80136cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80136d0:	4413      	add	r3, r2
 80136d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80136d6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136da:	8bfb      	ldrh	r3, [r7, #30]
 80136dc:	4413      	add	r3, r2
 80136de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80136e2:	e0dc      	b.n	801389e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	f000 80d7 	beq.w	801389e <tcp_write+0x47a>
 80136f0:	4b03      	ldr	r3, [pc, #12]	; (8013700 <tcp_write+0x2dc>)
 80136f2:	f240 224a 	movw	r2, #586	; 0x24a
 80136f6:	490a      	ldr	r1, [pc, #40]	; (8013720 <tcp_write+0x2fc>)
 80136f8:	4803      	ldr	r0, [pc, #12]	; (8013708 <tcp_write+0x2e4>)
 80136fa:	f004 ffc7 	bl	801868c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80136fe:	e0ce      	b.n	801389e <tcp_write+0x47a>
 8013700:	0801bcbc 	.word	0x0801bcbc
 8013704:	0801be5c 	.word	0x0801be5c
 8013708:	0801bd10 	.word	0x0801bd10
 801370c:	0801be74 	.word	0x0801be74
 8013710:	0801bea8 	.word	0x0801bea8
 8013714:	0801bec0 	.word	0x0801bec0
 8013718:	0801bee0 	.word	0x0801bee0
 801371c:	0801bf00 	.word	0x0801bf00
 8013720:	0801bf2c 	.word	0x0801bf2c
    struct pbuf *p;
    u16_t left = len - pos;
 8013724:	88fa      	ldrh	r2, [r7, #6]
 8013726:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801372a:	1ad3      	subs	r3, r2, r3
 801372c:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801372e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013732:	b29b      	uxth	r3, r3
 8013734:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013736:	1ad3      	subs	r3, r2, r3
 8013738:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801373a:	8b7a      	ldrh	r2, [r7, #26]
 801373c:	8bbb      	ldrh	r3, [r7, #28]
 801373e:	4293      	cmp	r3, r2
 8013740:	bf28      	it	cs
 8013742:	4613      	movcs	r3, r2
 8013744:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8013746:	797b      	ldrb	r3, [r7, #5]
 8013748:	f003 0301 	and.w	r3, r3, #1
 801374c:	2b00      	cmp	r3, #0
 801374e:	d036      	beq.n	80137be <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013750:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013754:	b29a      	uxth	r2, r3
 8013756:	8b3b      	ldrh	r3, [r7, #24]
 8013758:	4413      	add	r3, r2
 801375a:	b299      	uxth	r1, r3
 801375c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801375e:	2b00      	cmp	r3, #0
 8013760:	bf0c      	ite	eq
 8013762:	2301      	moveq	r3, #1
 8013764:	2300      	movne	r3, #0
 8013766:	b2db      	uxtb	r3, r3
 8013768:	f107 0012 	add.w	r0, r7, #18
 801376c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801376e:	9302      	str	r3, [sp, #8]
 8013770:	797b      	ldrb	r3, [r7, #5]
 8013772:	9301      	str	r3, [sp, #4]
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	9300      	str	r3, [sp, #0]
 8013778:	4603      	mov	r3, r0
 801377a:	2036      	movs	r0, #54	; 0x36
 801377c:	f7ff fd5e 	bl	801323c <tcp_pbuf_prealloc>
 8013780:	6338      	str	r0, [r7, #48]	; 0x30
 8013782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013784:	2b00      	cmp	r3, #0
 8013786:	f000 8178 	beq.w	8013a7a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801378c:	895b      	ldrh	r3, [r3, #10]
 801378e:	8b3a      	ldrh	r2, [r7, #24]
 8013790:	429a      	cmp	r2, r3
 8013792:	d906      	bls.n	80137a2 <tcp_write+0x37e>
 8013794:	4b8c      	ldr	r3, [pc, #560]	; (80139c8 <tcp_write+0x5a4>)
 8013796:	f240 2266 	movw	r2, #614	; 0x266
 801379a:	498c      	ldr	r1, [pc, #560]	; (80139cc <tcp_write+0x5a8>)
 801379c:	488c      	ldr	r0, [pc, #560]	; (80139d0 <tcp_write+0x5ac>)
 801379e:	f004 ff75 	bl	801868c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80137a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137a4:	685a      	ldr	r2, [r3, #4]
 80137a6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80137aa:	18d0      	adds	r0, r2, r3
 80137ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137b0:	68ba      	ldr	r2, [r7, #8]
 80137b2:	4413      	add	r3, r2
 80137b4:	8b3a      	ldrh	r2, [r7, #24]
 80137b6:	4619      	mov	r1, r3
 80137b8:	f004 fea8 	bl	801850c <memcpy>
 80137bc:	e02f      	b.n	801381e <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80137be:	8a7b      	ldrh	r3, [r7, #18]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d006      	beq.n	80137d2 <tcp_write+0x3ae>
 80137c4:	4b80      	ldr	r3, [pc, #512]	; (80139c8 <tcp_write+0x5a4>)
 80137c6:	f240 2271 	movw	r2, #625	; 0x271
 80137ca:	4982      	ldr	r1, [pc, #520]	; (80139d4 <tcp_write+0x5b0>)
 80137cc:	4880      	ldr	r0, [pc, #512]	; (80139d0 <tcp_write+0x5ac>)
 80137ce:	f004 ff5d 	bl	801868c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80137d2:	8b3b      	ldrh	r3, [r7, #24]
 80137d4:	2201      	movs	r2, #1
 80137d6:	4619      	mov	r1, r3
 80137d8:	2036      	movs	r0, #54	; 0x36
 80137da:	f7fa fbe7 	bl	800dfac <pbuf_alloc>
 80137de:	6178      	str	r0, [r7, #20]
 80137e0:	697b      	ldr	r3, [r7, #20]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	f000 814b 	beq.w	8013a7e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80137e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137ec:	68ba      	ldr	r2, [r7, #8]
 80137ee:	441a      	add	r2, r3
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80137f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80137f8:	b29b      	uxth	r3, r3
 80137fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80137fe:	4619      	mov	r1, r3
 8013800:	2036      	movs	r0, #54	; 0x36
 8013802:	f7fa fbd3 	bl	800dfac <pbuf_alloc>
 8013806:	6338      	str	r0, [r7, #48]	; 0x30
 8013808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380a:	2b00      	cmp	r3, #0
 801380c:	d103      	bne.n	8013816 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801380e:	6978      	ldr	r0, [r7, #20]
 8013810:	f7fa fee2 	bl	800e5d8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013814:	e136      	b.n	8013a84 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8013816:	6979      	ldr	r1, [r7, #20]
 8013818:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801381a:	f7fa ffab 	bl	800e774 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801381e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013820:	f7fa ff68 	bl	800e6f4 <pbuf_clen>
 8013824:	4603      	mov	r3, r0
 8013826:	461a      	mov	r2, r3
 8013828:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801382c:	4413      	add	r3, r2
 801382e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013832:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013836:	2b09      	cmp	r3, #9
 8013838:	d903      	bls.n	8013842 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801383a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801383c:	f7fa fecc 	bl	800e5d8 <pbuf_free>
      goto memerr;
 8013840:	e120      	b.n	8013a84 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013846:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801384a:	441a      	add	r2, r3
 801384c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	4613      	mov	r3, r2
 8013854:	2200      	movs	r2, #0
 8013856:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013858:	68f8      	ldr	r0, [r7, #12]
 801385a:	f7ff fc51 	bl	8013100 <tcp_create_segment>
 801385e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013862:	2b00      	cmp	r3, #0
 8013864:	f000 810d 	beq.w	8013a82 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8013868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801386a:	2b00      	cmp	r3, #0
 801386c:	d102      	bne.n	8013874 <tcp_write+0x450>
      queue = seg;
 801386e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013870:	647b      	str	r3, [r7, #68]	; 0x44
 8013872:	e00c      	b.n	801388e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013876:	2b00      	cmp	r3, #0
 8013878:	d106      	bne.n	8013888 <tcp_write+0x464>
 801387a:	4b53      	ldr	r3, [pc, #332]	; (80139c8 <tcp_write+0x5a4>)
 801387c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013880:	4955      	ldr	r1, [pc, #340]	; (80139d8 <tcp_write+0x5b4>)
 8013882:	4853      	ldr	r0, [pc, #332]	; (80139d0 <tcp_write+0x5ac>)
 8013884:	f004 ff02 	bl	801868c <iprintf>
      prev_seg->next = seg;
 8013888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801388a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801388c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801388e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013890:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013892:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013896:	8b3b      	ldrh	r3, [r7, #24]
 8013898:	4413      	add	r3, r2
 801389a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801389e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80138a2:	88fb      	ldrh	r3, [r7, #6]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	f4ff af3d 	bcc.w	8013724 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80138aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d02c      	beq.n	801390a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80138b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138b2:	685b      	ldr	r3, [r3, #4]
 80138b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138b6:	e01e      	b.n	80138f6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80138b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ba:	891a      	ldrh	r2, [r3, #8]
 80138bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138be:	4413      	add	r3, r2
 80138c0:	b29a      	uxth	r2, r3
 80138c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c4:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80138c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d110      	bne.n	80138f0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80138ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138d0:	685b      	ldr	r3, [r3, #4]
 80138d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138d4:	8952      	ldrh	r2, [r2, #10]
 80138d6:	4413      	add	r3, r2
 80138d8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80138da:	68b9      	ldr	r1, [r7, #8]
 80138dc:	4618      	mov	r0, r3
 80138de:	f004 fe15 	bl	801850c <memcpy>
        p->len += oversize_used;
 80138e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e4:	895a      	ldrh	r2, [r3, #10]
 80138e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80138e8:	4413      	add	r3, r2
 80138ea:	b29a      	uxth	r2, r3
 80138ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ee:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80138f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80138f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d1dd      	bne.n	80138b8 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80138fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138fe:	891a      	ldrh	r2, [r3, #8]
 8013900:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013902:	4413      	add	r3, r2
 8013904:	b29a      	uxth	r2, r3
 8013906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013908:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801390a:	8a7a      	ldrh	r2, [r7, #18]
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013914:	2b00      	cmp	r3, #0
 8013916:	d018      	beq.n	801394a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013918:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801391a:	2b00      	cmp	r3, #0
 801391c:	d106      	bne.n	801392c <tcp_write+0x508>
 801391e:	4b2a      	ldr	r3, [pc, #168]	; (80139c8 <tcp_write+0x5a4>)
 8013920:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013924:	492d      	ldr	r1, [pc, #180]	; (80139dc <tcp_write+0x5b8>)
 8013926:	482a      	ldr	r0, [pc, #168]	; (80139d0 <tcp_write+0x5ac>)
 8013928:	f004 feb0 	bl	801868c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801392c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801392e:	685b      	ldr	r3, [r3, #4]
 8013930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013932:	4618      	mov	r0, r3
 8013934:	f7fa ff1e 	bl	800e774 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801393a:	891a      	ldrh	r2, [r3, #8]
 801393c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801393e:	891b      	ldrh	r3, [r3, #8]
 8013940:	4413      	add	r3, r2
 8013942:	b29a      	uxth	r2, r3
 8013944:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013946:	811a      	strh	r2, [r3, #8]
 8013948:	e037      	b.n	80139ba <tcp_write+0x596>
  } else if (extendlen > 0) {
 801394a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801394c:	2b00      	cmp	r3, #0
 801394e:	d034      	beq.n	80139ba <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013952:	2b00      	cmp	r3, #0
 8013954:	d003      	beq.n	801395e <tcp_write+0x53a>
 8013956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013958:	685b      	ldr	r3, [r3, #4]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d106      	bne.n	801396c <tcp_write+0x548>
 801395e:	4b1a      	ldr	r3, [pc, #104]	; (80139c8 <tcp_write+0x5a4>)
 8013960:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013964:	491e      	ldr	r1, [pc, #120]	; (80139e0 <tcp_write+0x5bc>)
 8013966:	481a      	ldr	r0, [pc, #104]	; (80139d0 <tcp_write+0x5ac>)
 8013968:	f004 fe90 	bl	801868c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801396c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	62bb      	str	r3, [r7, #40]	; 0x28
 8013972:	e009      	b.n	8013988 <tcp_write+0x564>
      p->tot_len += extendlen;
 8013974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013976:	891a      	ldrh	r2, [r3, #8]
 8013978:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801397a:	4413      	add	r3, r2
 801397c:	b29a      	uxth	r2, r3
 801397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013980:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	62bb      	str	r3, [r7, #40]	; 0x28
 8013988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801398a:	681b      	ldr	r3, [r3, #0]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d1f1      	bne.n	8013974 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013992:	891a      	ldrh	r2, [r3, #8]
 8013994:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013996:	4413      	add	r3, r2
 8013998:	b29a      	uxth	r2, r3
 801399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a0:	895a      	ldrh	r2, [r3, #10]
 80139a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139a4:	4413      	add	r3, r2
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139aa:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80139ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139ae:	891a      	ldrh	r2, [r3, #8]
 80139b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139b2:	4413      	add	r3, r2
 80139b4:	b29a      	uxth	r2, r3
 80139b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139b8:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80139ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d111      	bne.n	80139e4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139c4:	66da      	str	r2, [r3, #108]	; 0x6c
 80139c6:	e010      	b.n	80139ea <tcp_write+0x5c6>
 80139c8:	0801bcbc 	.word	0x0801bcbc
 80139cc:	0801bf5c 	.word	0x0801bf5c
 80139d0:	0801bd10 	.word	0x0801bd10
 80139d4:	0801bf9c 	.word	0x0801bf9c
 80139d8:	0801bfac 	.word	0x0801bfac
 80139dc:	0801bfc0 	.word	0x0801bfc0
 80139e0:	0801bff8 	.word	0x0801bff8
  } else {
    last_unsent->next = queue;
 80139e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80139e8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80139ee:	88fb      	ldrh	r3, [r7, #6]
 80139f0:	441a      	add	r2, r3
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80139fc:	88fb      	ldrh	r3, [r7, #6]
 80139fe:	1ad3      	subs	r3, r2, r3
 8013a00:	b29a      	uxth	r2, r3
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013a0e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d00e      	beq.n	8013a3a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d10a      	bne.n	8013a3a <tcp_write+0x616>
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d106      	bne.n	8013a3a <tcp_write+0x616>
 8013a2c:	4b2c      	ldr	r3, [pc, #176]	; (8013ae0 <tcp_write+0x6bc>)
 8013a2e:	f240 3212 	movw	r2, #786	; 0x312
 8013a32:	492c      	ldr	r1, [pc, #176]	; (8013ae4 <tcp_write+0x6c0>)
 8013a34:	482c      	ldr	r0, [pc, #176]	; (8013ae8 <tcp_write+0x6c4>)
 8013a36:	f004 fe29 	bl	801868c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d016      	beq.n	8013a6e <tcp_write+0x64a>
 8013a40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a42:	68db      	ldr	r3, [r3, #12]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d012      	beq.n	8013a6e <tcp_write+0x64a>
 8013a48:	797b      	ldrb	r3, [r7, #5]
 8013a4a:	f003 0302 	and.w	r3, r3, #2
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d10d      	bne.n	8013a6e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a54:	68db      	ldr	r3, [r3, #12]
 8013a56:	899b      	ldrh	r3, [r3, #12]
 8013a58:	b29c      	uxth	r4, r3
 8013a5a:	2008      	movs	r0, #8
 8013a5c:	f7f8 ff14 	bl	800c888 <lwip_htons>
 8013a60:	4603      	mov	r3, r0
 8013a62:	461a      	mov	r2, r3
 8013a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a66:	68db      	ldr	r3, [r3, #12]
 8013a68:	4322      	orrs	r2, r4
 8013a6a:	b292      	uxth	r2, r2
 8013a6c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	e031      	b.n	8013ad6 <tcp_write+0x6b2>
          goto memerr;
 8013a72:	bf00      	nop
 8013a74:	e006      	b.n	8013a84 <tcp_write+0x660>
            goto memerr;
 8013a76:	bf00      	nop
 8013a78:	e004      	b.n	8013a84 <tcp_write+0x660>
        goto memerr;
 8013a7a:	bf00      	nop
 8013a7c:	e002      	b.n	8013a84 <tcp_write+0x660>
        goto memerr;
 8013a7e:	bf00      	nop
 8013a80:	e000      	b.n	8013a84 <tcp_write+0x660>
      goto memerr;
 8013a82:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	8b5b      	ldrh	r3, [r3, #26]
 8013a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a8c:	b29a      	uxth	r2, r3
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013a92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d002      	beq.n	8013a9e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013a98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013a9a:	f7fa fd9d 	bl	800e5d8 <pbuf_free>
  }
  if (queue != NULL) {
 8013a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d002      	beq.n	8013aaa <tcp_write+0x686>
    tcp_segs_free(queue);
 8013aa4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013aa6:	f7fc fb6f 	bl	8010188 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d00e      	beq.n	8013ad2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d10a      	bne.n	8013ad2 <tcp_write+0x6ae>
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d106      	bne.n	8013ad2 <tcp_write+0x6ae>
 8013ac4:	4b06      	ldr	r3, [pc, #24]	; (8013ae0 <tcp_write+0x6bc>)
 8013ac6:	f240 3227 	movw	r2, #807	; 0x327
 8013aca:	4906      	ldr	r1, [pc, #24]	; (8013ae4 <tcp_write+0x6c0>)
 8013acc:	4806      	ldr	r0, [pc, #24]	; (8013ae8 <tcp_write+0x6c4>)
 8013ace:	f004 fddd 	bl	801868c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013ad2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	375c      	adds	r7, #92	; 0x5c
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd90      	pop	{r4, r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	0801bcbc 	.word	0x0801bcbc
 8013ae4:	0801c030 	.word	0x0801c030
 8013ae8:	0801bd10 	.word	0x0801bd10

08013aec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013aec:	b590      	push	{r4, r7, lr}
 8013aee:	b08b      	sub	sp, #44	; 0x2c
 8013af0:	af02      	add	r7, sp, #8
 8013af2:	6078      	str	r0, [r7, #4]
 8013af4:	460b      	mov	r3, r1
 8013af6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013af8:	2300      	movs	r3, #0
 8013afa:	61fb      	str	r3, [r7, #28]
 8013afc:	2300      	movs	r3, #0
 8013afe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013b00:	2300      	movs	r3, #0
 8013b02:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d106      	bne.n	8013b18 <tcp_split_unsent_seg+0x2c>
 8013b0a:	4b95      	ldr	r3, [pc, #596]	; (8013d60 <tcp_split_unsent_seg+0x274>)
 8013b0c:	f240 324b 	movw	r2, #843	; 0x34b
 8013b10:	4994      	ldr	r1, [pc, #592]	; (8013d64 <tcp_split_unsent_seg+0x278>)
 8013b12:	4895      	ldr	r0, [pc, #596]	; (8013d68 <tcp_split_unsent_seg+0x27c>)
 8013b14:	f004 fdba 	bl	801868c <iprintf>

  useg = pcb->unsent;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b1c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d102      	bne.n	8013b2a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013b24:	f04f 33ff 	mov.w	r3, #4294967295
 8013b28:	e116      	b.n	8013d58 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013b2a:	887b      	ldrh	r3, [r7, #2]
 8013b2c:	2b00      	cmp	r3, #0
 8013b2e:	d109      	bne.n	8013b44 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013b30:	4b8b      	ldr	r3, [pc, #556]	; (8013d60 <tcp_split_unsent_seg+0x274>)
 8013b32:	f240 3253 	movw	r2, #851	; 0x353
 8013b36:	498d      	ldr	r1, [pc, #564]	; (8013d6c <tcp_split_unsent_seg+0x280>)
 8013b38:	488b      	ldr	r0, [pc, #556]	; (8013d68 <tcp_split_unsent_seg+0x27c>)
 8013b3a:	f004 fda7 	bl	801868c <iprintf>
    return ERR_VAL;
 8013b3e:	f06f 0305 	mvn.w	r3, #5
 8013b42:	e109      	b.n	8013d58 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	891b      	ldrh	r3, [r3, #8]
 8013b48:	887a      	ldrh	r2, [r7, #2]
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	d301      	bcc.n	8013b52 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013b4e:	2300      	movs	r3, #0
 8013b50:	e102      	b.n	8013d58 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b56:	887a      	ldrh	r2, [r7, #2]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d906      	bls.n	8013b6a <tcp_split_unsent_seg+0x7e>
 8013b5c:	4b80      	ldr	r3, [pc, #512]	; (8013d60 <tcp_split_unsent_seg+0x274>)
 8013b5e:	f240 325b 	movw	r2, #859	; 0x35b
 8013b62:	4983      	ldr	r1, [pc, #524]	; (8013d70 <tcp_split_unsent_seg+0x284>)
 8013b64:	4880      	ldr	r0, [pc, #512]	; (8013d68 <tcp_split_unsent_seg+0x27c>)
 8013b66:	f004 fd91 	bl	801868c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	891b      	ldrh	r3, [r3, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d106      	bne.n	8013b80 <tcp_split_unsent_seg+0x94>
 8013b72:	4b7b      	ldr	r3, [pc, #492]	; (8013d60 <tcp_split_unsent_seg+0x274>)
 8013b74:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013b78:	497e      	ldr	r1, [pc, #504]	; (8013d74 <tcp_split_unsent_seg+0x288>)
 8013b7a:	487b      	ldr	r0, [pc, #492]	; (8013d68 <tcp_split_unsent_seg+0x27c>)
 8013b7c:	f004 fd86 	bl	801868c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	7a9b      	ldrb	r3, [r3, #10]
 8013b84:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013b86:	7bfb      	ldrb	r3, [r7, #15]
 8013b88:	009b      	lsls	r3, r3, #2
 8013b8a:	b2db      	uxtb	r3, r3
 8013b8c:	f003 0304 	and.w	r3, r3, #4
 8013b90:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	891a      	ldrh	r2, [r3, #8]
 8013b96:	887b      	ldrh	r3, [r7, #2]
 8013b98:	1ad3      	subs	r3, r2, r3
 8013b9a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013b9c:	7bbb      	ldrb	r3, [r7, #14]
 8013b9e:	b29a      	uxth	r2, r3
 8013ba0:	89bb      	ldrh	r3, [r7, #12]
 8013ba2:	4413      	add	r3, r2
 8013ba4:	b29b      	uxth	r3, r3
 8013ba6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013baa:	4619      	mov	r1, r3
 8013bac:	2036      	movs	r0, #54	; 0x36
 8013bae:	f7fa f9fd 	bl	800dfac <pbuf_alloc>
 8013bb2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	f000 80b7 	beq.w	8013d2a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	685b      	ldr	r3, [r3, #4]
 8013bc0:	891a      	ldrh	r2, [r3, #8]
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	891b      	ldrh	r3, [r3, #8]
 8013bc6:	1ad3      	subs	r3, r2, r3
 8013bc8:	b29a      	uxth	r2, r3
 8013bca:	887b      	ldrh	r3, [r7, #2]
 8013bcc:	4413      	add	r3, r2
 8013bce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	6858      	ldr	r0, [r3, #4]
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	685a      	ldr	r2, [r3, #4]
 8013bd8:	7bbb      	ldrb	r3, [r7, #14]
 8013bda:	18d1      	adds	r1, r2, r3
 8013bdc:	897b      	ldrh	r3, [r7, #10]
 8013bde:	89ba      	ldrh	r2, [r7, #12]
 8013be0:	f7fa ff00 	bl	800e9e4 <pbuf_copy_partial>
 8013be4:	4603      	mov	r3, r0
 8013be6:	461a      	mov	r2, r3
 8013be8:	89bb      	ldrh	r3, [r7, #12]
 8013bea:	4293      	cmp	r3, r2
 8013bec:	f040 809f 	bne.w	8013d2e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	68db      	ldr	r3, [r3, #12]
 8013bf4:	899b      	ldrh	r3, [r3, #12]
 8013bf6:	b29b      	uxth	r3, r3
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7f8 fe45 	bl	800c888 <lwip_htons>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	b2db      	uxtb	r3, r3
 8013c02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013c06:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013c08:	2300      	movs	r3, #0
 8013c0a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013c0c:	7efb      	ldrb	r3, [r7, #27]
 8013c0e:	f003 0308 	and.w	r3, r3, #8
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d007      	beq.n	8013c26 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013c16:	7efb      	ldrb	r3, [r7, #27]
 8013c18:	f023 0308 	bic.w	r3, r3, #8
 8013c1c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013c1e:	7ebb      	ldrb	r3, [r7, #26]
 8013c20:	f043 0308 	orr.w	r3, r3, #8
 8013c24:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013c26:	7efb      	ldrb	r3, [r7, #27]
 8013c28:	f003 0301 	and.w	r3, r3, #1
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d007      	beq.n	8013c40 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013c30:	7efb      	ldrb	r3, [r7, #27]
 8013c32:	f023 0301 	bic.w	r3, r3, #1
 8013c36:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013c38:	7ebb      	ldrb	r3, [r7, #26]
 8013c3a:	f043 0301 	orr.w	r3, r3, #1
 8013c3e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013c40:	697b      	ldr	r3, [r7, #20]
 8013c42:	68db      	ldr	r3, [r3, #12]
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7f8 fe33 	bl	800c8b2 <lwip_htonl>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	887b      	ldrh	r3, [r7, #2]
 8013c50:	18d1      	adds	r1, r2, r3
 8013c52:	7eba      	ldrb	r2, [r7, #26]
 8013c54:	7bfb      	ldrb	r3, [r7, #15]
 8013c56:	9300      	str	r3, [sp, #0]
 8013c58:	460b      	mov	r3, r1
 8013c5a:	6939      	ldr	r1, [r7, #16]
 8013c5c:	6878      	ldr	r0, [r7, #4]
 8013c5e:	f7ff fa4f 	bl	8013100 <tcp_create_segment>
 8013c62:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013c64:	69fb      	ldr	r3, [r7, #28]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d063      	beq.n	8013d32 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013c6a:	697b      	ldr	r3, [r7, #20]
 8013c6c:	685b      	ldr	r3, [r3, #4]
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f7fa fd40 	bl	800e6f4 <pbuf_clen>
 8013c74:	4603      	mov	r3, r0
 8013c76:	461a      	mov	r2, r3
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013c7e:	1a9b      	subs	r3, r3, r2
 8013c80:	b29a      	uxth	r2, r3
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013c88:	697b      	ldr	r3, [r7, #20]
 8013c8a:	6858      	ldr	r0, [r3, #4]
 8013c8c:	697b      	ldr	r3, [r7, #20]
 8013c8e:	685b      	ldr	r3, [r3, #4]
 8013c90:	891a      	ldrh	r2, [r3, #8]
 8013c92:	89bb      	ldrh	r3, [r7, #12]
 8013c94:	1ad3      	subs	r3, r2, r3
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	4619      	mov	r1, r3
 8013c9a:	f7fa fae5 	bl	800e268 <pbuf_realloc>
  useg->len -= remainder;
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	891a      	ldrh	r2, [r3, #8]
 8013ca2:	89bb      	ldrh	r3, [r7, #12]
 8013ca4:	1ad3      	subs	r3, r2, r3
 8013ca6:	b29a      	uxth	r2, r3
 8013ca8:	697b      	ldr	r3, [r7, #20]
 8013caa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013cac:	697b      	ldr	r3, [r7, #20]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	899b      	ldrh	r3, [r3, #12]
 8013cb2:	b29c      	uxth	r4, r3
 8013cb4:	7efb      	ldrb	r3, [r7, #27]
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7f8 fde5 	bl	800c888 <lwip_htons>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	461a      	mov	r2, r3
 8013cc2:	697b      	ldr	r3, [r7, #20]
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	4322      	orrs	r2, r4
 8013cc8:	b292      	uxth	r2, r2
 8013cca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013ccc:	697b      	ldr	r3, [r7, #20]
 8013cce:	685b      	ldr	r3, [r3, #4]
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7fa fd0f 	bl	800e6f4 <pbuf_clen>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	461a      	mov	r2, r3
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013ce0:	4413      	add	r3, r2
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013cea:	69fb      	ldr	r3, [r7, #28]
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fa fd00 	bl	800e6f4 <pbuf_clen>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013cfe:	4413      	add	r3, r2
 8013d00:	b29a      	uxth	r2, r3
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	681a      	ldr	r2, [r3, #0]
 8013d0c:	69fb      	ldr	r3, [r7, #28]
 8013d0e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	69fa      	ldr	r2, [r7, #28]
 8013d14:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013d16:	69fb      	ldr	r3, [r7, #28]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d103      	bne.n	8013d26 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2200      	movs	r2, #0
 8013d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013d26:	2300      	movs	r3, #0
 8013d28:	e016      	b.n	8013d58 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013d2a:	bf00      	nop
 8013d2c:	e002      	b.n	8013d34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013d2e:	bf00      	nop
 8013d30:	e000      	b.n	8013d34 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013d32:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013d34:	69fb      	ldr	r3, [r7, #28]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d006      	beq.n	8013d48 <tcp_split_unsent_seg+0x25c>
 8013d3a:	4b09      	ldr	r3, [pc, #36]	; (8013d60 <tcp_split_unsent_seg+0x274>)
 8013d3c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013d40:	490d      	ldr	r1, [pc, #52]	; (8013d78 <tcp_split_unsent_seg+0x28c>)
 8013d42:	4809      	ldr	r0, [pc, #36]	; (8013d68 <tcp_split_unsent_seg+0x27c>)
 8013d44:	f004 fca2 	bl	801868c <iprintf>
  if (p != NULL) {
 8013d48:	693b      	ldr	r3, [r7, #16]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d002      	beq.n	8013d54 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013d4e:	6938      	ldr	r0, [r7, #16]
 8013d50:	f7fa fc42 	bl	800e5d8 <pbuf_free>
  }

  return ERR_MEM;
 8013d54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013d58:	4618      	mov	r0, r3
 8013d5a:	3724      	adds	r7, #36	; 0x24
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd90      	pop	{r4, r7, pc}
 8013d60:	0801bcbc 	.word	0x0801bcbc
 8013d64:	0801c050 	.word	0x0801c050
 8013d68:	0801bd10 	.word	0x0801bd10
 8013d6c:	0801c074 	.word	0x0801c074
 8013d70:	0801c098 	.word	0x0801c098
 8013d74:	0801c0a8 	.word	0x0801c0a8
 8013d78:	0801c0b8 	.word	0x0801c0b8

08013d7c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013d7c:	b590      	push	{r4, r7, lr}
 8013d7e:	b085      	sub	sp, #20
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d106      	bne.n	8013d98 <tcp_send_fin+0x1c>
 8013d8a:	4b21      	ldr	r3, [pc, #132]	; (8013e10 <tcp_send_fin+0x94>)
 8013d8c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013d90:	4920      	ldr	r1, [pc, #128]	; (8013e14 <tcp_send_fin+0x98>)
 8013d92:	4821      	ldr	r0, [pc, #132]	; (8013e18 <tcp_send_fin+0x9c>)
 8013d94:	f004 fc7a 	bl	801868c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d02e      	beq.n	8013dfe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013da4:	60fb      	str	r3, [r7, #12]
 8013da6:	e002      	b.n	8013dae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013da8:	68fb      	ldr	r3, [r7, #12]
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d1f8      	bne.n	8013da8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	68db      	ldr	r3, [r3, #12]
 8013dba:	899b      	ldrh	r3, [r3, #12]
 8013dbc:	b29b      	uxth	r3, r3
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7f8 fd62 	bl	800c888 <lwip_htons>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	b2db      	uxtb	r3, r3
 8013dc8:	f003 0307 	and.w	r3, r3, #7
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d116      	bne.n	8013dfe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	68db      	ldr	r3, [r3, #12]
 8013dd4:	899b      	ldrh	r3, [r3, #12]
 8013dd6:	b29c      	uxth	r4, r3
 8013dd8:	2001      	movs	r0, #1
 8013dda:	f7f8 fd55 	bl	800c888 <lwip_htons>
 8013dde:	4603      	mov	r3, r0
 8013de0:	461a      	mov	r2, r3
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	4322      	orrs	r2, r4
 8013de8:	b292      	uxth	r2, r2
 8013dea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	8b5b      	ldrh	r3, [r3, #26]
 8013df0:	f043 0320 	orr.w	r3, r3, #32
 8013df4:	b29a      	uxth	r2, r3
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	e004      	b.n	8013e08 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013dfe:	2101      	movs	r1, #1
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f000 f80b 	bl	8013e1c <tcp_enqueue_flags>
 8013e06:	4603      	mov	r3, r0
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3714      	adds	r7, #20
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd90      	pop	{r4, r7, pc}
 8013e10:	0801bcbc 	.word	0x0801bcbc
 8013e14:	0801c0c4 	.word	0x0801c0c4
 8013e18:	0801bd10 	.word	0x0801bd10

08013e1c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b08a      	sub	sp, #40	; 0x28
 8013e20:	af02      	add	r7, sp, #8
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	460b      	mov	r3, r1
 8013e26:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013e28:	2300      	movs	r3, #0
 8013e2a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013e30:	78fb      	ldrb	r3, [r7, #3]
 8013e32:	f003 0303 	and.w	r3, r3, #3
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d106      	bne.n	8013e48 <tcp_enqueue_flags+0x2c>
 8013e3a:	4b67      	ldr	r3, [pc, #412]	; (8013fd8 <tcp_enqueue_flags+0x1bc>)
 8013e3c:	f240 4211 	movw	r2, #1041	; 0x411
 8013e40:	4966      	ldr	r1, [pc, #408]	; (8013fdc <tcp_enqueue_flags+0x1c0>)
 8013e42:	4867      	ldr	r0, [pc, #412]	; (8013fe0 <tcp_enqueue_flags+0x1c4>)
 8013e44:	f004 fc22 	bl	801868c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d106      	bne.n	8013e5c <tcp_enqueue_flags+0x40>
 8013e4e:	4b62      	ldr	r3, [pc, #392]	; (8013fd8 <tcp_enqueue_flags+0x1bc>)
 8013e50:	f240 4213 	movw	r2, #1043	; 0x413
 8013e54:	4963      	ldr	r1, [pc, #396]	; (8013fe4 <tcp_enqueue_flags+0x1c8>)
 8013e56:	4862      	ldr	r0, [pc, #392]	; (8013fe0 <tcp_enqueue_flags+0x1c4>)
 8013e58:	f004 fc18 	bl	801868c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013e5c:	78fb      	ldrb	r3, [r7, #3]
 8013e5e:	f003 0302 	and.w	r3, r3, #2
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d001      	beq.n	8013e6a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013e66:	2301      	movs	r3, #1
 8013e68:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013e6a:	7ffb      	ldrb	r3, [r7, #31]
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	b2db      	uxtb	r3, r3
 8013e70:	f003 0304 	and.w	r3, r3, #4
 8013e74:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013e76:	7dfb      	ldrb	r3, [r7, #23]
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013e7e:	4619      	mov	r1, r3
 8013e80:	2036      	movs	r0, #54	; 0x36
 8013e82:	f7fa f893 	bl	800dfac <pbuf_alloc>
 8013e86:	6138      	str	r0, [r7, #16]
 8013e88:	693b      	ldr	r3, [r7, #16]
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d109      	bne.n	8013ea2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	8b5b      	ldrh	r3, [r3, #26]
 8013e92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e96:	b29a      	uxth	r2, r3
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8013ea0:	e095      	b.n	8013fce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	895a      	ldrh	r2, [r3, #10]
 8013ea6:	7dfb      	ldrb	r3, [r7, #23]
 8013ea8:	b29b      	uxth	r3, r3
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d206      	bcs.n	8013ebc <tcp_enqueue_flags+0xa0>
 8013eae:	4b4a      	ldr	r3, [pc, #296]	; (8013fd8 <tcp_enqueue_flags+0x1bc>)
 8013eb0:	f240 4239 	movw	r2, #1081	; 0x439
 8013eb4:	494c      	ldr	r1, [pc, #304]	; (8013fe8 <tcp_enqueue_flags+0x1cc>)
 8013eb6:	484a      	ldr	r0, [pc, #296]	; (8013fe0 <tcp_enqueue_flags+0x1c4>)
 8013eb8:	f004 fbe8 	bl	801868c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013ec0:	78fa      	ldrb	r2, [r7, #3]
 8013ec2:	7ffb      	ldrb	r3, [r7, #31]
 8013ec4:	9300      	str	r3, [sp, #0]
 8013ec6:	460b      	mov	r3, r1
 8013ec8:	6939      	ldr	r1, [r7, #16]
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f7ff f918 	bl	8013100 <tcp_create_segment>
 8013ed0:	60f8      	str	r0, [r7, #12]
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d109      	bne.n	8013eec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	8b5b      	ldrh	r3, [r3, #26]
 8013edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ee0:	b29a      	uxth	r2, r3
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8013eea:	e070      	b.n	8013fce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	68db      	ldr	r3, [r3, #12]
 8013ef0:	f003 0303 	and.w	r3, r3, #3
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d006      	beq.n	8013f06 <tcp_enqueue_flags+0xea>
 8013ef8:	4b37      	ldr	r3, [pc, #220]	; (8013fd8 <tcp_enqueue_flags+0x1bc>)
 8013efa:	f240 4242 	movw	r2, #1090	; 0x442
 8013efe:	493b      	ldr	r1, [pc, #236]	; (8013fec <tcp_enqueue_flags+0x1d0>)
 8013f00:	4837      	ldr	r0, [pc, #220]	; (8013fe0 <tcp_enqueue_flags+0x1c4>)
 8013f02:	f004 fbc3 	bl	801868c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	891b      	ldrh	r3, [r3, #8]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d006      	beq.n	8013f1c <tcp_enqueue_flags+0x100>
 8013f0e:	4b32      	ldr	r3, [pc, #200]	; (8013fd8 <tcp_enqueue_flags+0x1bc>)
 8013f10:	f240 4243 	movw	r2, #1091	; 0x443
 8013f14:	4936      	ldr	r1, [pc, #216]	; (8013ff0 <tcp_enqueue_flags+0x1d4>)
 8013f16:	4832      	ldr	r0, [pc, #200]	; (8013fe0 <tcp_enqueue_flags+0x1c4>)
 8013f18:	f004 fbb8 	bl	801868c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d103      	bne.n	8013f2c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	68fa      	ldr	r2, [r7, #12]
 8013f28:	66da      	str	r2, [r3, #108]	; 0x6c
 8013f2a:	e00d      	b.n	8013f48 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f30:	61bb      	str	r3, [r7, #24]
 8013f32:	e002      	b.n	8013f3a <tcp_enqueue_flags+0x11e>
 8013f34:	69bb      	ldr	r3, [r7, #24]
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	61bb      	str	r3, [r7, #24]
 8013f3a:	69bb      	ldr	r3, [r7, #24]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d1f8      	bne.n	8013f34 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	68fa      	ldr	r2, [r7, #12]
 8013f46:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	2200      	movs	r2, #0
 8013f4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013f50:	78fb      	ldrb	r3, [r7, #3]
 8013f52:	f003 0302 	and.w	r3, r3, #2
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d104      	bne.n	8013f64 <tcp_enqueue_flags+0x148>
 8013f5a:	78fb      	ldrb	r3, [r7, #3]
 8013f5c:	f003 0301 	and.w	r3, r3, #1
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d004      	beq.n	8013f6e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013f68:	1c5a      	adds	r2, r3, #1
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013f6e:	78fb      	ldrb	r3, [r7, #3]
 8013f70:	f003 0301 	and.w	r3, r3, #1
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d006      	beq.n	8013f86 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	8b5b      	ldrh	r3, [r3, #26]
 8013f7c:	f043 0320 	orr.w	r3, r3, #32
 8013f80:	b29a      	uxth	r2, r3
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	685b      	ldr	r3, [r3, #4]
 8013f8a:	4618      	mov	r0, r3
 8013f8c:	f7fa fbb2 	bl	800e6f4 <pbuf_clen>
 8013f90:	4603      	mov	r3, r0
 8013f92:	461a      	mov	r2, r3
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013f9a:	4413      	add	r3, r2
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d00e      	beq.n	8013fcc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d10a      	bne.n	8013fcc <tcp_enqueue_flags+0x1b0>
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d106      	bne.n	8013fcc <tcp_enqueue_flags+0x1b0>
 8013fbe:	4b06      	ldr	r3, [pc, #24]	; (8013fd8 <tcp_enqueue_flags+0x1bc>)
 8013fc0:	f240 4265 	movw	r2, #1125	; 0x465
 8013fc4:	490b      	ldr	r1, [pc, #44]	; (8013ff4 <tcp_enqueue_flags+0x1d8>)
 8013fc6:	4806      	ldr	r0, [pc, #24]	; (8013fe0 <tcp_enqueue_flags+0x1c4>)
 8013fc8:	f004 fb60 	bl	801868c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013fcc:	2300      	movs	r3, #0
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3720      	adds	r7, #32
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	0801bcbc 	.word	0x0801bcbc
 8013fdc:	0801c0e0 	.word	0x0801c0e0
 8013fe0:	0801bd10 	.word	0x0801bd10
 8013fe4:	0801c138 	.word	0x0801c138
 8013fe8:	0801c158 	.word	0x0801c158
 8013fec:	0801c194 	.word	0x0801c194
 8013ff0:	0801c1ac 	.word	0x0801c1ac
 8013ff4:	0801c1d8 	.word	0x0801c1d8

08013ff8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013ff8:	b5b0      	push	{r4, r5, r7, lr}
 8013ffa:	b08a      	sub	sp, #40	; 0x28
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d106      	bne.n	8014014 <tcp_output+0x1c>
 8014006:	4b9e      	ldr	r3, [pc, #632]	; (8014280 <tcp_output+0x288>)
 8014008:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801400c:	499d      	ldr	r1, [pc, #628]	; (8014284 <tcp_output+0x28c>)
 801400e:	489e      	ldr	r0, [pc, #632]	; (8014288 <tcp_output+0x290>)
 8014010:	f004 fb3c 	bl	801868c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	7d1b      	ldrb	r3, [r3, #20]
 8014018:	2b01      	cmp	r3, #1
 801401a:	d106      	bne.n	801402a <tcp_output+0x32>
 801401c:	4b98      	ldr	r3, [pc, #608]	; (8014280 <tcp_output+0x288>)
 801401e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014022:	499a      	ldr	r1, [pc, #616]	; (801428c <tcp_output+0x294>)
 8014024:	4898      	ldr	r0, [pc, #608]	; (8014288 <tcp_output+0x290>)
 8014026:	f004 fb31 	bl	801868c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801402a:	4b99      	ldr	r3, [pc, #612]	; (8014290 <tcp_output+0x298>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	687a      	ldr	r2, [r7, #4]
 8014030:	429a      	cmp	r2, r3
 8014032:	d101      	bne.n	8014038 <tcp_output+0x40>
    return ERR_OK;
 8014034:	2300      	movs	r3, #0
 8014036:	e1ce      	b.n	80143d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014044:	4293      	cmp	r3, r2
 8014046:	bf28      	it	cs
 8014048:	4613      	movcs	r3, r2
 801404a:	b29b      	uxth	r3, r3
 801404c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014052:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014056:	2b00      	cmp	r3, #0
 8014058:	d10b      	bne.n	8014072 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	8b5b      	ldrh	r3, [r3, #26]
 801405e:	f003 0302 	and.w	r3, r3, #2
 8014062:	2b00      	cmp	r3, #0
 8014064:	f000 81aa 	beq.w	80143bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8014068:	6878      	ldr	r0, [r7, #4]
 801406a:	f000 fdcb 	bl	8014c04 <tcp_send_empty_ack>
 801406e:	4603      	mov	r3, r0
 8014070:	e1b1      	b.n	80143d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014072:	6879      	ldr	r1, [r7, #4]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	3304      	adds	r3, #4
 8014078:	461a      	mov	r2, r3
 801407a:	6878      	ldr	r0, [r7, #4]
 801407c:	f7ff f824 	bl	80130c8 <tcp_route>
 8014080:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d102      	bne.n	801408e <tcp_output+0x96>
    return ERR_RTE;
 8014088:	f06f 0303 	mvn.w	r3, #3
 801408c:	e1a3      	b.n	80143d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d003      	beq.n	801409c <tcp_output+0xa4>
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	2b00      	cmp	r3, #0
 801409a:	d111      	bne.n	80140c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d002      	beq.n	80140a8 <tcp_output+0xb0>
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	3304      	adds	r3, #4
 80140a6:	e000      	b.n	80140aa <tcp_output+0xb2>
 80140a8:	2300      	movs	r3, #0
 80140aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80140ac:	693b      	ldr	r3, [r7, #16]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d102      	bne.n	80140b8 <tcp_output+0xc0>
      return ERR_RTE;
 80140b2:	f06f 0303 	mvn.w	r3, #3
 80140b6:	e18e      	b.n	80143d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80140b8:	693b      	ldr	r3, [r7, #16]
 80140ba:	681a      	ldr	r2, [r3, #0]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80140c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c2:	68db      	ldr	r3, [r3, #12]
 80140c4:	685b      	ldr	r3, [r3, #4]
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7f8 fbf3 	bl	800c8b2 <lwip_htonl>
 80140cc:	4602      	mov	r2, r0
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80140d2:	1ad3      	subs	r3, r2, r3
 80140d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140d6:	8912      	ldrh	r2, [r2, #8]
 80140d8:	4413      	add	r3, r2
 80140da:	69ba      	ldr	r2, [r7, #24]
 80140dc:	429a      	cmp	r2, r3
 80140de:	d227      	bcs.n	8014130 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80140e6:	461a      	mov	r2, r3
 80140e8:	69bb      	ldr	r3, [r7, #24]
 80140ea:	4293      	cmp	r3, r2
 80140ec:	d114      	bne.n	8014118 <tcp_output+0x120>
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d110      	bne.n	8014118 <tcp_output+0x120>
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d10b      	bne.n	8014118 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2200      	movs	r2, #0
 8014104:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2201      	movs	r2, #1
 801410c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	2200      	movs	r2, #0
 8014114:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	8b5b      	ldrh	r3, [r3, #26]
 801411c:	f003 0302 	and.w	r3, r3, #2
 8014120:	2b00      	cmp	r3, #0
 8014122:	f000 814d 	beq.w	80143c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8014126:	6878      	ldr	r0, [r7, #4]
 8014128:	f000 fd6c 	bl	8014c04 <tcp_send_empty_ack>
 801412c:	4603      	mov	r3, r0
 801412e:	e152      	b.n	80143d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	2200      	movs	r2, #0
 8014134:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801413c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801413e:	6a3b      	ldr	r3, [r7, #32]
 8014140:	2b00      	cmp	r3, #0
 8014142:	f000 811c 	beq.w	801437e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8014146:	e002      	b.n	801414e <tcp_output+0x156>
 8014148:	6a3b      	ldr	r3, [r7, #32]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	623b      	str	r3, [r7, #32]
 801414e:	6a3b      	ldr	r3, [r7, #32]
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	2b00      	cmp	r3, #0
 8014154:	d1f8      	bne.n	8014148 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8014156:	e112      	b.n	801437e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8014158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415a:	68db      	ldr	r3, [r3, #12]
 801415c:	899b      	ldrh	r3, [r3, #12]
 801415e:	b29b      	uxth	r3, r3
 8014160:	4618      	mov	r0, r3
 8014162:	f7f8 fb91 	bl	800c888 <lwip_htons>
 8014166:	4603      	mov	r3, r0
 8014168:	b2db      	uxtb	r3, r3
 801416a:	f003 0304 	and.w	r3, r3, #4
 801416e:	2b00      	cmp	r3, #0
 8014170:	d006      	beq.n	8014180 <tcp_output+0x188>
 8014172:	4b43      	ldr	r3, [pc, #268]	; (8014280 <tcp_output+0x288>)
 8014174:	f240 5236 	movw	r2, #1334	; 0x536
 8014178:	4946      	ldr	r1, [pc, #280]	; (8014294 <tcp_output+0x29c>)
 801417a:	4843      	ldr	r0, [pc, #268]	; (8014288 <tcp_output+0x290>)
 801417c:	f004 fa86 	bl	801868c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014184:	2b00      	cmp	r3, #0
 8014186:	d01f      	beq.n	80141c8 <tcp_output+0x1d0>
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	8b5b      	ldrh	r3, [r3, #26]
 801418c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014190:	2b00      	cmp	r3, #0
 8014192:	d119      	bne.n	80141c8 <tcp_output+0x1d0>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014198:	2b00      	cmp	r3, #0
 801419a:	d00b      	beq.n	80141b4 <tcp_output+0x1bc>
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d110      	bne.n	80141c8 <tcp_output+0x1d0>
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141aa:	891a      	ldrh	r2, [r3, #8]
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80141b0:	429a      	cmp	r2, r3
 80141b2:	d209      	bcs.n	80141c8 <tcp_output+0x1d0>
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d004      	beq.n	80141c8 <tcp_output+0x1d0>
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80141c4:	2b08      	cmp	r3, #8
 80141c6:	d901      	bls.n	80141cc <tcp_output+0x1d4>
 80141c8:	2301      	movs	r3, #1
 80141ca:	e000      	b.n	80141ce <tcp_output+0x1d6>
 80141cc:	2300      	movs	r3, #0
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d106      	bne.n	80141e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	8b5b      	ldrh	r3, [r3, #26]
 80141d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80141da:	2b00      	cmp	r3, #0
 80141dc:	f000 80e4 	beq.w	80143a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	7d1b      	ldrb	r3, [r3, #20]
 80141e4:	2b02      	cmp	r3, #2
 80141e6:	d00d      	beq.n	8014204 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80141e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ea:	68db      	ldr	r3, [r3, #12]
 80141ec:	899b      	ldrh	r3, [r3, #12]
 80141ee:	b29c      	uxth	r4, r3
 80141f0:	2010      	movs	r0, #16
 80141f2:	f7f8 fb49 	bl	800c888 <lwip_htons>
 80141f6:	4603      	mov	r3, r0
 80141f8:	461a      	mov	r2, r3
 80141fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fc:	68db      	ldr	r3, [r3, #12]
 80141fe:	4322      	orrs	r2, r4
 8014200:	b292      	uxth	r2, r2
 8014202:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014204:	697a      	ldr	r2, [r7, #20]
 8014206:	6879      	ldr	r1, [r7, #4]
 8014208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801420a:	f000 f909 	bl	8014420 <tcp_output_segment>
 801420e:	4603      	mov	r3, r0
 8014210:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d009      	beq.n	801422e <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	8b5b      	ldrh	r3, [r3, #26]
 801421e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014222:	b29a      	uxth	r2, r3
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	835a      	strh	r2, [r3, #26]
      return err;
 8014228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801422c:	e0d3      	b.n	80143d6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801422e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014230:	681a      	ldr	r2, [r3, #0]
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	7d1b      	ldrb	r3, [r3, #20]
 801423a:	2b02      	cmp	r3, #2
 801423c:	d006      	beq.n	801424c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	8b5b      	ldrh	r3, [r3, #26]
 8014242:	f023 0303 	bic.w	r3, r3, #3
 8014246:	b29a      	uxth	r2, r3
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424e:	68db      	ldr	r3, [r3, #12]
 8014250:	685b      	ldr	r3, [r3, #4]
 8014252:	4618      	mov	r0, r3
 8014254:	f7f8 fb2d 	bl	800c8b2 <lwip_htonl>
 8014258:	4604      	mov	r4, r0
 801425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801425c:	891b      	ldrh	r3, [r3, #8]
 801425e:	461d      	mov	r5, r3
 8014260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014262:	68db      	ldr	r3, [r3, #12]
 8014264:	899b      	ldrh	r3, [r3, #12]
 8014266:	b29b      	uxth	r3, r3
 8014268:	4618      	mov	r0, r3
 801426a:	f7f8 fb0d 	bl	800c888 <lwip_htons>
 801426e:	4603      	mov	r3, r0
 8014270:	b2db      	uxtb	r3, r3
 8014272:	f003 0303 	and.w	r3, r3, #3
 8014276:	2b00      	cmp	r3, #0
 8014278:	d00e      	beq.n	8014298 <tcp_output+0x2a0>
 801427a:	2301      	movs	r3, #1
 801427c:	e00d      	b.n	801429a <tcp_output+0x2a2>
 801427e:	bf00      	nop
 8014280:	0801bcbc 	.word	0x0801bcbc
 8014284:	0801c200 	.word	0x0801c200
 8014288:	0801bd10 	.word	0x0801bd10
 801428c:	0801c218 	.word	0x0801c218
 8014290:	2000bd9c 	.word	0x2000bd9c
 8014294:	0801c240 	.word	0x0801c240
 8014298:	2300      	movs	r3, #0
 801429a:	442b      	add	r3, r5
 801429c:	4423      	add	r3, r4
 801429e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	1ad3      	subs	r3, r2, r3
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	da02      	bge.n	80142b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	68ba      	ldr	r2, [r7, #8]
 80142b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80142b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b4:	891b      	ldrh	r3, [r3, #8]
 80142b6:	461c      	mov	r4, r3
 80142b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142ba:	68db      	ldr	r3, [r3, #12]
 80142bc:	899b      	ldrh	r3, [r3, #12]
 80142be:	b29b      	uxth	r3, r3
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7f8 fae1 	bl	800c888 <lwip_htons>
 80142c6:	4603      	mov	r3, r0
 80142c8:	b2db      	uxtb	r3, r3
 80142ca:	f003 0303 	and.w	r3, r3, #3
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d001      	beq.n	80142d6 <tcp_output+0x2de>
 80142d2:	2301      	movs	r3, #1
 80142d4:	e000      	b.n	80142d8 <tcp_output+0x2e0>
 80142d6:	2300      	movs	r3, #0
 80142d8:	4423      	add	r3, r4
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d049      	beq.n	8014372 <tcp_output+0x37a>
      seg->next = NULL;
 80142de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142e0:	2200      	movs	r2, #0
 80142e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d105      	bne.n	80142f8 <tcp_output+0x300>
        pcb->unacked = seg;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80142f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80142f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142f4:	623b      	str	r3, [r7, #32]
 80142f6:	e03f      	b.n	8014378 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80142f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142fa:	68db      	ldr	r3, [r3, #12]
 80142fc:	685b      	ldr	r3, [r3, #4]
 80142fe:	4618      	mov	r0, r3
 8014300:	f7f8 fad7 	bl	800c8b2 <lwip_htonl>
 8014304:	4604      	mov	r4, r0
 8014306:	6a3b      	ldr	r3, [r7, #32]
 8014308:	68db      	ldr	r3, [r3, #12]
 801430a:	685b      	ldr	r3, [r3, #4]
 801430c:	4618      	mov	r0, r3
 801430e:	f7f8 fad0 	bl	800c8b2 <lwip_htonl>
 8014312:	4603      	mov	r3, r0
 8014314:	1ae3      	subs	r3, r4, r3
 8014316:	2b00      	cmp	r3, #0
 8014318:	da24      	bge.n	8014364 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	3370      	adds	r3, #112	; 0x70
 801431e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014320:	e002      	b.n	8014328 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	2b00      	cmp	r3, #0
 801432e:	d011      	beq.n	8014354 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014330:	69fb      	ldr	r3, [r7, #28]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	68db      	ldr	r3, [r3, #12]
 8014336:	685b      	ldr	r3, [r3, #4]
 8014338:	4618      	mov	r0, r3
 801433a:	f7f8 faba 	bl	800c8b2 <lwip_htonl>
 801433e:	4604      	mov	r4, r0
 8014340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	685b      	ldr	r3, [r3, #4]
 8014346:	4618      	mov	r0, r3
 8014348:	f7f8 fab3 	bl	800c8b2 <lwip_htonl>
 801434c:	4603      	mov	r3, r0
 801434e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014350:	2b00      	cmp	r3, #0
 8014352:	dbe6      	blt.n	8014322 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014354:	69fb      	ldr	r3, [r7, #28]
 8014356:	681a      	ldr	r2, [r3, #0]
 8014358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801435c:	69fb      	ldr	r3, [r7, #28]
 801435e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014360:	601a      	str	r2, [r3, #0]
 8014362:	e009      	b.n	8014378 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014364:	6a3b      	ldr	r3, [r7, #32]
 8014366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014368:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801436a:	6a3b      	ldr	r3, [r7, #32]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	623b      	str	r3, [r7, #32]
 8014370:	e002      	b.n	8014378 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014372:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014374:	f7fb ff1d 	bl	80101b2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801437c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014380:	2b00      	cmp	r3, #0
 8014382:	d012      	beq.n	80143aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	685b      	ldr	r3, [r3, #4]
 801438a:	4618      	mov	r0, r3
 801438c:	f7f8 fa91 	bl	800c8b2 <lwip_htonl>
 8014390:	4602      	mov	r2, r0
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014396:	1ad3      	subs	r3, r2, r3
 8014398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801439a:	8912      	ldrh	r2, [r2, #8]
 801439c:	4413      	add	r3, r2
  while (seg != NULL &&
 801439e:	69ba      	ldr	r2, [r7, #24]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	f4bf aed9 	bcs.w	8014158 <tcp_output+0x160>
 80143a6:	e000      	b.n	80143aa <tcp_output+0x3b2>
      break;
 80143a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d108      	bne.n	80143c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	2200      	movs	r2, #0
 80143b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80143ba:	e004      	b.n	80143c6 <tcp_output+0x3ce>
    goto output_done;
 80143bc:	bf00      	nop
 80143be:	e002      	b.n	80143c6 <tcp_output+0x3ce>
    goto output_done;
 80143c0:	bf00      	nop
 80143c2:	e000      	b.n	80143c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80143c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	8b5b      	ldrh	r3, [r3, #26]
 80143ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80143d4:	2300      	movs	r3, #0
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3728      	adds	r7, #40	; 0x28
 80143da:	46bd      	mov	sp, r7
 80143dc:	bdb0      	pop	{r4, r5, r7, pc}
 80143de:	bf00      	nop

080143e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	b082      	sub	sp, #8
 80143e4:	af00      	add	r7, sp, #0
 80143e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d106      	bne.n	80143fc <tcp_output_segment_busy+0x1c>
 80143ee:	4b09      	ldr	r3, [pc, #36]	; (8014414 <tcp_output_segment_busy+0x34>)
 80143f0:	f240 529a 	movw	r2, #1434	; 0x59a
 80143f4:	4908      	ldr	r1, [pc, #32]	; (8014418 <tcp_output_segment_busy+0x38>)
 80143f6:	4809      	ldr	r0, [pc, #36]	; (801441c <tcp_output_segment_busy+0x3c>)
 80143f8:	f004 f948 	bl	801868c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	7b9b      	ldrb	r3, [r3, #14]
 8014402:	2b01      	cmp	r3, #1
 8014404:	d001      	beq.n	801440a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8014406:	2301      	movs	r3, #1
 8014408:	e000      	b.n	801440c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801440a:	2300      	movs	r3, #0
}
 801440c:	4618      	mov	r0, r3
 801440e:	3708      	adds	r7, #8
 8014410:	46bd      	mov	sp, r7
 8014412:	bd80      	pop	{r7, pc}
 8014414:	0801bcbc 	.word	0x0801bcbc
 8014418:	0801c258 	.word	0x0801c258
 801441c:	0801bd10 	.word	0x0801bd10

08014420 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014420:	b5b0      	push	{r4, r5, r7, lr}
 8014422:	b08c      	sub	sp, #48	; 0x30
 8014424:	af04      	add	r7, sp, #16
 8014426:	60f8      	str	r0, [r7, #12]
 8014428:	60b9      	str	r1, [r7, #8]
 801442a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d106      	bne.n	8014440 <tcp_output_segment+0x20>
 8014432:	4b63      	ldr	r3, [pc, #396]	; (80145c0 <tcp_output_segment+0x1a0>)
 8014434:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8014438:	4962      	ldr	r1, [pc, #392]	; (80145c4 <tcp_output_segment+0x1a4>)
 801443a:	4863      	ldr	r0, [pc, #396]	; (80145c8 <tcp_output_segment+0x1a8>)
 801443c:	f004 f926 	bl	801868c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	2b00      	cmp	r3, #0
 8014444:	d106      	bne.n	8014454 <tcp_output_segment+0x34>
 8014446:	4b5e      	ldr	r3, [pc, #376]	; (80145c0 <tcp_output_segment+0x1a0>)
 8014448:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801444c:	495f      	ldr	r1, [pc, #380]	; (80145cc <tcp_output_segment+0x1ac>)
 801444e:	485e      	ldr	r0, [pc, #376]	; (80145c8 <tcp_output_segment+0x1a8>)
 8014450:	f004 f91c 	bl	801868c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d106      	bne.n	8014468 <tcp_output_segment+0x48>
 801445a:	4b59      	ldr	r3, [pc, #356]	; (80145c0 <tcp_output_segment+0x1a0>)
 801445c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014460:	495b      	ldr	r1, [pc, #364]	; (80145d0 <tcp_output_segment+0x1b0>)
 8014462:	4859      	ldr	r0, [pc, #356]	; (80145c8 <tcp_output_segment+0x1a8>)
 8014464:	f004 f912 	bl	801868c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8014468:	68f8      	ldr	r0, [r7, #12]
 801446a:	f7ff ffb9 	bl	80143e0 <tcp_output_segment_busy>
 801446e:	4603      	mov	r3, r0
 8014470:	2b00      	cmp	r3, #0
 8014472:	d001      	beq.n	8014478 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014474:	2300      	movs	r3, #0
 8014476:	e09f      	b.n	80145b8 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014478:	68bb      	ldr	r3, [r7, #8]
 801447a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	68dc      	ldr	r4, [r3, #12]
 8014480:	4610      	mov	r0, r2
 8014482:	f7f8 fa16 	bl	800c8b2 <lwip_htonl>
 8014486:	4603      	mov	r3, r0
 8014488:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801448a:	68bb      	ldr	r3, [r7, #8]
 801448c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	68dc      	ldr	r4, [r3, #12]
 8014492:	4610      	mov	r0, r2
 8014494:	f7f8 f9f8 	bl	800c888 <lwip_htons>
 8014498:	4603      	mov	r3, r0
 801449a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801449c:	68bb      	ldr	r3, [r7, #8]
 801449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144a0:	68ba      	ldr	r2, [r7, #8]
 80144a2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80144a4:	441a      	add	r2, r3
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	68db      	ldr	r3, [r3, #12]
 80144ae:	3314      	adds	r3, #20
 80144b0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	7a9b      	ldrb	r3, [r3, #10]
 80144b6:	f003 0301 	and.w	r3, r3, #1
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	d015      	beq.n	80144ea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	3304      	adds	r3, #4
 80144c2:	461a      	mov	r2, r3
 80144c4:	6879      	ldr	r1, [r7, #4]
 80144c6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80144ca:	f7fc fa37 	bl	801093c <tcp_eff_send_mss_netif>
 80144ce:	4603      	mov	r3, r0
 80144d0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80144d2:	8b7b      	ldrh	r3, [r7, #26]
 80144d4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80144d8:	4618      	mov	r0, r3
 80144da:	f7f8 f9ea 	bl	800c8b2 <lwip_htonl>
 80144de:	4602      	mov	r2, r0
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80144e4:	69fb      	ldr	r3, [r7, #28]
 80144e6:	3304      	adds	r3, #4
 80144e8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80144ea:	68bb      	ldr	r3, [r7, #8]
 80144ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80144f0:	2b00      	cmp	r3, #0
 80144f2:	da02      	bge.n	80144fa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	2200      	movs	r2, #0
 80144f8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d10c      	bne.n	801451c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014502:	4b34      	ldr	r3, [pc, #208]	; (80145d4 <tcp_output_segment+0x1b4>)
 8014504:	681a      	ldr	r2, [r3, #0]
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	68db      	ldr	r3, [r3, #12]
 801450e:	685b      	ldr	r3, [r3, #4]
 8014510:	4618      	mov	r0, r3
 8014512:	f7f8 f9ce 	bl	800c8b2 <lwip_htonl>
 8014516:	4602      	mov	r2, r0
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	68da      	ldr	r2, [r3, #12]
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	685b      	ldr	r3, [r3, #4]
 8014526:	1ad3      	subs	r3, r2, r3
 8014528:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	685b      	ldr	r3, [r3, #4]
 801452e:	8959      	ldrh	r1, [r3, #10]
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	685b      	ldr	r3, [r3, #4]
 8014534:	8b3a      	ldrh	r2, [r7, #24]
 8014536:	1a8a      	subs	r2, r1, r2
 8014538:	b292      	uxth	r2, r2
 801453a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	685b      	ldr	r3, [r3, #4]
 8014540:	8919      	ldrh	r1, [r3, #8]
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	685b      	ldr	r3, [r3, #4]
 8014546:	8b3a      	ldrh	r2, [r7, #24]
 8014548:	1a8a      	subs	r2, r1, r2
 801454a:	b292      	uxth	r2, r2
 801454c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	685b      	ldr	r3, [r3, #4]
 8014552:	68fa      	ldr	r2, [r7, #12]
 8014554:	68d2      	ldr	r2, [r2, #12]
 8014556:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	68db      	ldr	r3, [r3, #12]
 801455c:	2200      	movs	r2, #0
 801455e:	741a      	strb	r2, [r3, #16]
 8014560:	2200      	movs	r2, #0
 8014562:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	f103 0214 	add.w	r2, r3, #20
 801456c:	68fb      	ldr	r3, [r7, #12]
 801456e:	7a9b      	ldrb	r3, [r3, #10]
 8014570:	009b      	lsls	r3, r3, #2
 8014572:	f003 0304 	and.w	r3, r3, #4
 8014576:	4413      	add	r3, r2
 8014578:	69fa      	ldr	r2, [r7, #28]
 801457a:	429a      	cmp	r2, r3
 801457c:	d006      	beq.n	801458c <tcp_output_segment+0x16c>
 801457e:	4b10      	ldr	r3, [pc, #64]	; (80145c0 <tcp_output_segment+0x1a0>)
 8014580:	f240 621c 	movw	r2, #1564	; 0x61c
 8014584:	4914      	ldr	r1, [pc, #80]	; (80145d8 <tcp_output_segment+0x1b8>)
 8014586:	4810      	ldr	r0, [pc, #64]	; (80145c8 <tcp_output_segment+0x1a8>)
 8014588:	f004 f880 	bl	801868c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	6858      	ldr	r0, [r3, #4]
 8014590:	68b9      	ldr	r1, [r7, #8]
 8014592:	68bb      	ldr	r3, [r7, #8]
 8014594:	1d1c      	adds	r4, r3, #4
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	7add      	ldrb	r5, [r3, #11]
 801459a:	68bb      	ldr	r3, [r7, #8]
 801459c:	7a9b      	ldrb	r3, [r3, #10]
 801459e:	687a      	ldr	r2, [r7, #4]
 80145a0:	9202      	str	r2, [sp, #8]
 80145a2:	2206      	movs	r2, #6
 80145a4:	9201      	str	r2, [sp, #4]
 80145a6:	9300      	str	r3, [sp, #0]
 80145a8:	462b      	mov	r3, r5
 80145aa:	4622      	mov	r2, r4
 80145ac:	f002 fd96 	bl	80170dc <ip4_output_if>
 80145b0:	4603      	mov	r3, r0
 80145b2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80145b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3720      	adds	r7, #32
 80145bc:	46bd      	mov	sp, r7
 80145be:	bdb0      	pop	{r4, r5, r7, pc}
 80145c0:	0801bcbc 	.word	0x0801bcbc
 80145c4:	0801c280 	.word	0x0801c280
 80145c8:	0801bd10 	.word	0x0801bd10
 80145cc:	0801c2a0 	.word	0x0801c2a0
 80145d0:	0801c2c0 	.word	0x0801c2c0
 80145d4:	2000bd8c 	.word	0x2000bd8c
 80145d8:	0801c2e4 	.word	0x0801c2e4

080145dc <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80145dc:	b5b0      	push	{r4, r5, r7, lr}
 80145de:	b084      	sub	sp, #16
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d106      	bne.n	80145f8 <tcp_rexmit_rto_prepare+0x1c>
 80145ea:	4b31      	ldr	r3, [pc, #196]	; (80146b0 <tcp_rexmit_rto_prepare+0xd4>)
 80145ec:	f240 6263 	movw	r2, #1635	; 0x663
 80145f0:	4930      	ldr	r1, [pc, #192]	; (80146b4 <tcp_rexmit_rto_prepare+0xd8>)
 80145f2:	4831      	ldr	r0, [pc, #196]	; (80146b8 <tcp_rexmit_rto_prepare+0xdc>)
 80145f4:	f004 f84a 	bl	801868c <iprintf>

  if (pcb->unacked == NULL) {
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d102      	bne.n	8014606 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014600:	f06f 0305 	mvn.w	r3, #5
 8014604:	e050      	b.n	80146a8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801460a:	60fb      	str	r3, [r7, #12]
 801460c:	e00b      	b.n	8014626 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801460e:	68f8      	ldr	r0, [r7, #12]
 8014610:	f7ff fee6 	bl	80143e0 <tcp_output_segment_busy>
 8014614:	4603      	mov	r3, r0
 8014616:	2b00      	cmp	r3, #0
 8014618:	d002      	beq.n	8014620 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801461a:	f06f 0305 	mvn.w	r3, #5
 801461e:	e043      	b.n	80146a8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	60fb      	str	r3, [r7, #12]
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d1ef      	bne.n	801460e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801462e:	68f8      	ldr	r0, [r7, #12]
 8014630:	f7ff fed6 	bl	80143e0 <tcp_output_segment_busy>
 8014634:	4603      	mov	r3, r0
 8014636:	2b00      	cmp	r3, #0
 8014638:	d002      	beq.n	8014640 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801463a:	f06f 0305 	mvn.w	r3, #5
 801463e:	e033      	b.n	80146a8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	2200      	movs	r2, #0
 8014654:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	8b5b      	ldrh	r3, [r3, #26]
 801465a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801465e:	b29a      	uxth	r2, r3
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	68db      	ldr	r3, [r3, #12]
 8014668:	685b      	ldr	r3, [r3, #4]
 801466a:	4618      	mov	r0, r3
 801466c:	f7f8 f921 	bl	800c8b2 <lwip_htonl>
 8014670:	4604      	mov	r4, r0
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	891b      	ldrh	r3, [r3, #8]
 8014676:	461d      	mov	r5, r3
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	68db      	ldr	r3, [r3, #12]
 801467c:	899b      	ldrh	r3, [r3, #12]
 801467e:	b29b      	uxth	r3, r3
 8014680:	4618      	mov	r0, r3
 8014682:	f7f8 f901 	bl	800c888 <lwip_htons>
 8014686:	4603      	mov	r3, r0
 8014688:	b2db      	uxtb	r3, r3
 801468a:	f003 0303 	and.w	r3, r3, #3
 801468e:	2b00      	cmp	r3, #0
 8014690:	d001      	beq.n	8014696 <tcp_rexmit_rto_prepare+0xba>
 8014692:	2301      	movs	r3, #1
 8014694:	e000      	b.n	8014698 <tcp_rexmit_rto_prepare+0xbc>
 8014696:	2300      	movs	r3, #0
 8014698:	442b      	add	r3, r5
 801469a:	18e2      	adds	r2, r4, r3
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2200      	movs	r2, #0
 80146a4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80146a6:	2300      	movs	r3, #0
}
 80146a8:	4618      	mov	r0, r3
 80146aa:	3710      	adds	r7, #16
 80146ac:	46bd      	mov	sp, r7
 80146ae:	bdb0      	pop	{r4, r5, r7, pc}
 80146b0:	0801bcbc 	.word	0x0801bcbc
 80146b4:	0801c2f8 	.word	0x0801c2f8
 80146b8:	0801bd10 	.word	0x0801bd10

080146bc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80146bc:	b580      	push	{r7, lr}
 80146be:	b082      	sub	sp, #8
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d106      	bne.n	80146d8 <tcp_rexmit_rto_commit+0x1c>
 80146ca:	4b0d      	ldr	r3, [pc, #52]	; (8014700 <tcp_rexmit_rto_commit+0x44>)
 80146cc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80146d0:	490c      	ldr	r1, [pc, #48]	; (8014704 <tcp_rexmit_rto_commit+0x48>)
 80146d2:	480d      	ldr	r0, [pc, #52]	; (8014708 <tcp_rexmit_rto_commit+0x4c>)
 80146d4:	f003 ffda 	bl	801868c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146de:	2bff      	cmp	r3, #255	; 0xff
 80146e0:	d007      	beq.n	80146f2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146e8:	3301      	adds	r3, #1
 80146ea:	b2da      	uxtb	r2, r3
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80146f2:	6878      	ldr	r0, [r7, #4]
 80146f4:	f7ff fc80 	bl	8013ff8 <tcp_output>
}
 80146f8:	bf00      	nop
 80146fa:	3708      	adds	r7, #8
 80146fc:	46bd      	mov	sp, r7
 80146fe:	bd80      	pop	{r7, pc}
 8014700:	0801bcbc 	.word	0x0801bcbc
 8014704:	0801c31c 	.word	0x0801c31c
 8014708:	0801bd10 	.word	0x0801bd10

0801470c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
 8014712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d106      	bne.n	8014728 <tcp_rexmit_rto+0x1c>
 801471a:	4b0a      	ldr	r3, [pc, #40]	; (8014744 <tcp_rexmit_rto+0x38>)
 801471c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014720:	4909      	ldr	r1, [pc, #36]	; (8014748 <tcp_rexmit_rto+0x3c>)
 8014722:	480a      	ldr	r0, [pc, #40]	; (801474c <tcp_rexmit_rto+0x40>)
 8014724:	f003 ffb2 	bl	801868c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f7ff ff57 	bl	80145dc <tcp_rexmit_rto_prepare>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	d102      	bne.n	801473a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	f7ff ffc1 	bl	80146bc <tcp_rexmit_rto_commit>
  }
}
 801473a:	bf00      	nop
 801473c:	3708      	adds	r7, #8
 801473e:	46bd      	mov	sp, r7
 8014740:	bd80      	pop	{r7, pc}
 8014742:	bf00      	nop
 8014744:	0801bcbc 	.word	0x0801bcbc
 8014748:	0801c340 	.word	0x0801c340
 801474c:	0801bd10 	.word	0x0801bd10

08014750 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014750:	b590      	push	{r4, r7, lr}
 8014752:	b085      	sub	sp, #20
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d106      	bne.n	801476c <tcp_rexmit+0x1c>
 801475e:	4b2f      	ldr	r3, [pc, #188]	; (801481c <tcp_rexmit+0xcc>)
 8014760:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014764:	492e      	ldr	r1, [pc, #184]	; (8014820 <tcp_rexmit+0xd0>)
 8014766:	482f      	ldr	r0, [pc, #188]	; (8014824 <tcp_rexmit+0xd4>)
 8014768:	f003 ff90 	bl	801868c <iprintf>

  if (pcb->unacked == NULL) {
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014770:	2b00      	cmp	r3, #0
 8014772:	d102      	bne.n	801477a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014774:	f06f 0305 	mvn.w	r3, #5
 8014778:	e04c      	b.n	8014814 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801477e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014780:	68b8      	ldr	r0, [r7, #8]
 8014782:	f7ff fe2d 	bl	80143e0 <tcp_output_segment_busy>
 8014786:	4603      	mov	r3, r0
 8014788:	2b00      	cmp	r3, #0
 801478a:	d002      	beq.n	8014792 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801478c:	f06f 0305 	mvn.w	r3, #5
 8014790:	e040      	b.n	8014814 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014792:	68bb      	ldr	r3, [r7, #8]
 8014794:	681a      	ldr	r2, [r3, #0]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	336c      	adds	r3, #108	; 0x6c
 801479e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147a0:	e002      	b.n	80147a8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	681b      	ldr	r3, [r3, #0]
 80147a6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d011      	beq.n	80147d4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	68db      	ldr	r3, [r3, #12]
 80147b6:	685b      	ldr	r3, [r3, #4]
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7f8 f87a 	bl	800c8b2 <lwip_htonl>
 80147be:	4604      	mov	r4, r0
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	68db      	ldr	r3, [r3, #12]
 80147c4:	685b      	ldr	r3, [r3, #4]
 80147c6:	4618      	mov	r0, r3
 80147c8:	f7f8 f873 	bl	800c8b2 <lwip_htonl>
 80147cc:	4603      	mov	r3, r0
 80147ce:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	dbe6      	blt.n	80147a2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681a      	ldr	r2, [r3, #0]
 80147d8:	68bb      	ldr	r3, [r7, #8]
 80147da:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	68ba      	ldr	r2, [r7, #8]
 80147e0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80147e2:	68bb      	ldr	r3, [r7, #8]
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d103      	bne.n	80147f2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2200      	movs	r2, #0
 80147ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80147f8:	2bff      	cmp	r3, #255	; 0xff
 80147fa:	d007      	beq.n	801480c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014802:	3301      	adds	r3, #1
 8014804:	b2da      	uxtb	r2, r3
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	2200      	movs	r2, #0
 8014810:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014812:	2300      	movs	r3, #0
}
 8014814:	4618      	mov	r0, r3
 8014816:	3714      	adds	r7, #20
 8014818:	46bd      	mov	sp, r7
 801481a:	bd90      	pop	{r4, r7, pc}
 801481c:	0801bcbc 	.word	0x0801bcbc
 8014820:	0801c35c 	.word	0x0801c35c
 8014824:	0801bd10 	.word	0x0801bd10

08014828 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b082      	sub	sp, #8
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d106      	bne.n	8014844 <tcp_rexmit_fast+0x1c>
 8014836:	4b2a      	ldr	r3, [pc, #168]	; (80148e0 <tcp_rexmit_fast+0xb8>)
 8014838:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801483c:	4929      	ldr	r1, [pc, #164]	; (80148e4 <tcp_rexmit_fast+0xbc>)
 801483e:	482a      	ldr	r0, [pc, #168]	; (80148e8 <tcp_rexmit_fast+0xc0>)
 8014840:	f003 ff24 	bl	801868c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014848:	2b00      	cmp	r3, #0
 801484a:	d044      	beq.n	80148d6 <tcp_rexmit_fast+0xae>
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	8b5b      	ldrh	r3, [r3, #26]
 8014850:	f003 0304 	and.w	r3, r3, #4
 8014854:	2b00      	cmp	r3, #0
 8014856:	d13e      	bne.n	80148d6 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f7ff ff79 	bl	8014750 <tcp_rexmit>
 801485e:	4603      	mov	r3, r0
 8014860:	2b00      	cmp	r3, #0
 8014862:	d138      	bne.n	80148d6 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014870:	4293      	cmp	r3, r2
 8014872:	bf28      	it	cs
 8014874:	4613      	movcs	r3, r2
 8014876:	b29b      	uxth	r3, r3
 8014878:	0fda      	lsrs	r2, r3, #31
 801487a:	4413      	add	r3, r2
 801487c:	105b      	asrs	r3, r3, #1
 801487e:	b29a      	uxth	r2, r3
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801488c:	461a      	mov	r2, r3
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014892:	005b      	lsls	r3, r3, #1
 8014894:	429a      	cmp	r2, r3
 8014896:	d206      	bcs.n	80148a6 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801489c:	005b      	lsls	r3, r3, #1
 801489e:	b29a      	uxth	r2, r3
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80148b0:	4619      	mov	r1, r3
 80148b2:	0049      	lsls	r1, r1, #1
 80148b4:	440b      	add	r3, r1
 80148b6:	b29b      	uxth	r3, r3
 80148b8:	4413      	add	r3, r2
 80148ba:	b29a      	uxth	r2, r3
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	8b5b      	ldrh	r3, [r3, #26]
 80148c6:	f043 0304 	orr.w	r3, r3, #4
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2200      	movs	r2, #0
 80148d4:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80148d6:	bf00      	nop
 80148d8:	3708      	adds	r7, #8
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}
 80148de:	bf00      	nop
 80148e0:	0801bcbc 	.word	0x0801bcbc
 80148e4:	0801c374 	.word	0x0801c374
 80148e8:	0801bd10 	.word	0x0801bd10

080148ec <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b086      	sub	sp, #24
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	60f8      	str	r0, [r7, #12]
 80148f4:	607b      	str	r3, [r7, #4]
 80148f6:	460b      	mov	r3, r1
 80148f8:	817b      	strh	r3, [r7, #10]
 80148fa:	4613      	mov	r3, r2
 80148fc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80148fe:	897a      	ldrh	r2, [r7, #10]
 8014900:	893b      	ldrh	r3, [r7, #8]
 8014902:	4413      	add	r3, r2
 8014904:	b29b      	uxth	r3, r3
 8014906:	3314      	adds	r3, #20
 8014908:	b29b      	uxth	r3, r3
 801490a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801490e:	4619      	mov	r1, r3
 8014910:	2022      	movs	r0, #34	; 0x22
 8014912:	f7f9 fb4b 	bl	800dfac <pbuf_alloc>
 8014916:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014918:	697b      	ldr	r3, [r7, #20]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d04d      	beq.n	80149ba <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801491e:	897b      	ldrh	r3, [r7, #10]
 8014920:	3313      	adds	r3, #19
 8014922:	697a      	ldr	r2, [r7, #20]
 8014924:	8952      	ldrh	r2, [r2, #10]
 8014926:	4293      	cmp	r3, r2
 8014928:	db06      	blt.n	8014938 <tcp_output_alloc_header_common+0x4c>
 801492a:	4b26      	ldr	r3, [pc, #152]	; (80149c4 <tcp_output_alloc_header_common+0xd8>)
 801492c:	f240 7223 	movw	r2, #1827	; 0x723
 8014930:	4925      	ldr	r1, [pc, #148]	; (80149c8 <tcp_output_alloc_header_common+0xdc>)
 8014932:	4826      	ldr	r0, [pc, #152]	; (80149cc <tcp_output_alloc_header_common+0xe0>)
 8014934:	f003 feaa 	bl	801868c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	685b      	ldr	r3, [r3, #4]
 801493c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801493e:	8c3b      	ldrh	r3, [r7, #32]
 8014940:	4618      	mov	r0, r3
 8014942:	f7f7 ffa1 	bl	800c888 <lwip_htons>
 8014946:	4603      	mov	r3, r0
 8014948:	461a      	mov	r2, r3
 801494a:	693b      	ldr	r3, [r7, #16]
 801494c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801494e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014950:	4618      	mov	r0, r3
 8014952:	f7f7 ff99 	bl	800c888 <lwip_htons>
 8014956:	4603      	mov	r3, r0
 8014958:	461a      	mov	r2, r3
 801495a:	693b      	ldr	r3, [r7, #16]
 801495c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801495e:	693b      	ldr	r3, [r7, #16]
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014964:	68f8      	ldr	r0, [r7, #12]
 8014966:	f7f7 ffa4 	bl	800c8b2 <lwip_htonl>
 801496a:	4602      	mov	r2, r0
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014970:	897b      	ldrh	r3, [r7, #10]
 8014972:	089b      	lsrs	r3, r3, #2
 8014974:	b29b      	uxth	r3, r3
 8014976:	3305      	adds	r3, #5
 8014978:	b29b      	uxth	r3, r3
 801497a:	031b      	lsls	r3, r3, #12
 801497c:	b29a      	uxth	r2, r3
 801497e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014982:	b29b      	uxth	r3, r3
 8014984:	4313      	orrs	r3, r2
 8014986:	b29b      	uxth	r3, r3
 8014988:	4618      	mov	r0, r3
 801498a:	f7f7 ff7d 	bl	800c888 <lwip_htons>
 801498e:	4603      	mov	r3, r0
 8014990:	461a      	mov	r2, r3
 8014992:	693b      	ldr	r3, [r7, #16]
 8014994:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014996:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014998:	4618      	mov	r0, r3
 801499a:	f7f7 ff75 	bl	800c888 <lwip_htons>
 801499e:	4603      	mov	r3, r0
 80149a0:	461a      	mov	r2, r3
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	2200      	movs	r2, #0
 80149aa:	741a      	strb	r2, [r3, #16]
 80149ac:	2200      	movs	r2, #0
 80149ae:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80149b0:	693b      	ldr	r3, [r7, #16]
 80149b2:	2200      	movs	r2, #0
 80149b4:	749a      	strb	r2, [r3, #18]
 80149b6:	2200      	movs	r2, #0
 80149b8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80149ba:	697b      	ldr	r3, [r7, #20]
}
 80149bc:	4618      	mov	r0, r3
 80149be:	3718      	adds	r7, #24
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	0801bcbc 	.word	0x0801bcbc
 80149c8:	0801c394 	.word	0x0801c394
 80149cc:	0801bd10 	.word	0x0801bd10

080149d0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80149d0:	b5b0      	push	{r4, r5, r7, lr}
 80149d2:	b08a      	sub	sp, #40	; 0x28
 80149d4:	af04      	add	r7, sp, #16
 80149d6:	60f8      	str	r0, [r7, #12]
 80149d8:	607b      	str	r3, [r7, #4]
 80149da:	460b      	mov	r3, r1
 80149dc:	817b      	strh	r3, [r7, #10]
 80149de:	4613      	mov	r3, r2
 80149e0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80149e2:	68fb      	ldr	r3, [r7, #12]
 80149e4:	2b00      	cmp	r3, #0
 80149e6:	d106      	bne.n	80149f6 <tcp_output_alloc_header+0x26>
 80149e8:	4b15      	ldr	r3, [pc, #84]	; (8014a40 <tcp_output_alloc_header+0x70>)
 80149ea:	f240 7242 	movw	r2, #1858	; 0x742
 80149ee:	4915      	ldr	r1, [pc, #84]	; (8014a44 <tcp_output_alloc_header+0x74>)
 80149f0:	4815      	ldr	r0, [pc, #84]	; (8014a48 <tcp_output_alloc_header+0x78>)
 80149f2:	f003 fe4b 	bl	801868c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	8adb      	ldrh	r3, [r3, #22]
 80149fe:	68fa      	ldr	r2, [r7, #12]
 8014a00:	8b12      	ldrh	r2, [r2, #24]
 8014a02:	68f9      	ldr	r1, [r7, #12]
 8014a04:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014a06:	893d      	ldrh	r5, [r7, #8]
 8014a08:	897c      	ldrh	r4, [r7, #10]
 8014a0a:	9103      	str	r1, [sp, #12]
 8014a0c:	2110      	movs	r1, #16
 8014a0e:	9102      	str	r1, [sp, #8]
 8014a10:	9201      	str	r2, [sp, #4]
 8014a12:	9300      	str	r3, [sp, #0]
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	462a      	mov	r2, r5
 8014a18:	4621      	mov	r1, r4
 8014a1a:	f7ff ff67 	bl	80148ec <tcp_output_alloc_header_common>
 8014a1e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014a20:	697b      	ldr	r3, [r7, #20]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d006      	beq.n	8014a34 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014a26:	68fb      	ldr	r3, [r7, #12]
 8014a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a2a:	68fa      	ldr	r2, [r7, #12]
 8014a2c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014a2e:	441a      	add	r2, r3
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014a34:	697b      	ldr	r3, [r7, #20]
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3718      	adds	r7, #24
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8014a3e:	bf00      	nop
 8014a40:	0801bcbc 	.word	0x0801bcbc
 8014a44:	0801c3c4 	.word	0x0801c3c4
 8014a48:	0801bd10 	.word	0x0801bd10

08014a4c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b088      	sub	sp, #32
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	60f8      	str	r0, [r7, #12]
 8014a54:	60b9      	str	r1, [r7, #8]
 8014a56:	4611      	mov	r1, r2
 8014a58:	461a      	mov	r2, r3
 8014a5a:	460b      	mov	r3, r1
 8014a5c:	71fb      	strb	r3, [r7, #7]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014a62:	2300      	movs	r3, #0
 8014a64:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014a66:	68bb      	ldr	r3, [r7, #8]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d106      	bne.n	8014a7a <tcp_output_fill_options+0x2e>
 8014a6c:	4b13      	ldr	r3, [pc, #76]	; (8014abc <tcp_output_fill_options+0x70>)
 8014a6e:	f240 7256 	movw	r2, #1878	; 0x756
 8014a72:	4913      	ldr	r1, [pc, #76]	; (8014ac0 <tcp_output_fill_options+0x74>)
 8014a74:	4813      	ldr	r0, [pc, #76]	; (8014ac4 <tcp_output_fill_options+0x78>)
 8014a76:	f003 fe09 	bl	801868c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	685b      	ldr	r3, [r3, #4]
 8014a7e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014a80:	69bb      	ldr	r3, [r7, #24]
 8014a82:	3314      	adds	r3, #20
 8014a84:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014a86:	69bb      	ldr	r3, [r7, #24]
 8014a88:	f103 0214 	add.w	r2, r3, #20
 8014a8c:	8bfb      	ldrh	r3, [r7, #30]
 8014a8e:	009b      	lsls	r3, r3, #2
 8014a90:	4619      	mov	r1, r3
 8014a92:	79fb      	ldrb	r3, [r7, #7]
 8014a94:	009b      	lsls	r3, r3, #2
 8014a96:	f003 0304 	and.w	r3, r3, #4
 8014a9a:	440b      	add	r3, r1
 8014a9c:	4413      	add	r3, r2
 8014a9e:	697a      	ldr	r2, [r7, #20]
 8014aa0:	429a      	cmp	r2, r3
 8014aa2:	d006      	beq.n	8014ab2 <tcp_output_fill_options+0x66>
 8014aa4:	4b05      	ldr	r3, [pc, #20]	; (8014abc <tcp_output_fill_options+0x70>)
 8014aa6:	f240 7275 	movw	r2, #1909	; 0x775
 8014aaa:	4907      	ldr	r1, [pc, #28]	; (8014ac8 <tcp_output_fill_options+0x7c>)
 8014aac:	4805      	ldr	r0, [pc, #20]	; (8014ac4 <tcp_output_fill_options+0x78>)
 8014aae:	f003 fded 	bl	801868c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014ab2:	bf00      	nop
 8014ab4:	3720      	adds	r7, #32
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	0801bcbc 	.word	0x0801bcbc
 8014ac0:	0801c3ec 	.word	0x0801c3ec
 8014ac4:	0801bd10 	.word	0x0801bd10
 8014ac8:	0801c2e4 	.word	0x0801c2e4

08014acc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b08a      	sub	sp, #40	; 0x28
 8014ad0:	af04      	add	r7, sp, #16
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	607a      	str	r2, [r7, #4]
 8014ad8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014ada:	68bb      	ldr	r3, [r7, #8]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d106      	bne.n	8014aee <tcp_output_control_segment+0x22>
 8014ae0:	4b1c      	ldr	r3, [pc, #112]	; (8014b54 <tcp_output_control_segment+0x88>)
 8014ae2:	f240 7287 	movw	r2, #1927	; 0x787
 8014ae6:	491c      	ldr	r1, [pc, #112]	; (8014b58 <tcp_output_control_segment+0x8c>)
 8014ae8:	481c      	ldr	r0, [pc, #112]	; (8014b5c <tcp_output_control_segment+0x90>)
 8014aea:	f003 fdcf 	bl	801868c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014aee:	683a      	ldr	r2, [r7, #0]
 8014af0:	6879      	ldr	r1, [r7, #4]
 8014af2:	68f8      	ldr	r0, [r7, #12]
 8014af4:	f7fe fae8 	bl	80130c8 <tcp_route>
 8014af8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014afa:	693b      	ldr	r3, [r7, #16]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d102      	bne.n	8014b06 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014b00:	23fc      	movs	r3, #252	; 0xfc
 8014b02:	75fb      	strb	r3, [r7, #23]
 8014b04:	e01c      	b.n	8014b40 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d006      	beq.n	8014b1a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	7adb      	ldrb	r3, [r3, #11]
 8014b10:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014b12:	68fb      	ldr	r3, [r7, #12]
 8014b14:	7a9b      	ldrb	r3, [r3, #10]
 8014b16:	757b      	strb	r3, [r7, #21]
 8014b18:	e003      	b.n	8014b22 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014b1a:	23ff      	movs	r3, #255	; 0xff
 8014b1c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014b1e:	2300      	movs	r3, #0
 8014b20:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014b22:	7dba      	ldrb	r2, [r7, #22]
 8014b24:	693b      	ldr	r3, [r7, #16]
 8014b26:	9302      	str	r3, [sp, #8]
 8014b28:	2306      	movs	r3, #6
 8014b2a:	9301      	str	r3, [sp, #4]
 8014b2c:	7d7b      	ldrb	r3, [r7, #21]
 8014b2e:	9300      	str	r3, [sp, #0]
 8014b30:	4613      	mov	r3, r2
 8014b32:	683a      	ldr	r2, [r7, #0]
 8014b34:	6879      	ldr	r1, [r7, #4]
 8014b36:	68b8      	ldr	r0, [r7, #8]
 8014b38:	f002 fad0 	bl	80170dc <ip4_output_if>
 8014b3c:	4603      	mov	r3, r0
 8014b3e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014b40:	68b8      	ldr	r0, [r7, #8]
 8014b42:	f7f9 fd49 	bl	800e5d8 <pbuf_free>
  return err;
 8014b46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3718      	adds	r7, #24
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	0801bcbc 	.word	0x0801bcbc
 8014b58:	0801c414 	.word	0x0801c414
 8014b5c:	0801bd10 	.word	0x0801bd10

08014b60 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014b60:	b590      	push	{r4, r7, lr}
 8014b62:	b08b      	sub	sp, #44	; 0x2c
 8014b64:	af04      	add	r7, sp, #16
 8014b66:	60f8      	str	r0, [r7, #12]
 8014b68:	60b9      	str	r1, [r7, #8]
 8014b6a:	607a      	str	r2, [r7, #4]
 8014b6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d106      	bne.n	8014b82 <tcp_rst+0x22>
 8014b74:	4b1f      	ldr	r3, [pc, #124]	; (8014bf4 <tcp_rst+0x94>)
 8014b76:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014b7a:	491f      	ldr	r1, [pc, #124]	; (8014bf8 <tcp_rst+0x98>)
 8014b7c:	481f      	ldr	r0, [pc, #124]	; (8014bfc <tcp_rst+0x9c>)
 8014b7e:	f003 fd85 	bl	801868c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d106      	bne.n	8014b96 <tcp_rst+0x36>
 8014b88:	4b1a      	ldr	r3, [pc, #104]	; (8014bf4 <tcp_rst+0x94>)
 8014b8a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014b8e:	491c      	ldr	r1, [pc, #112]	; (8014c00 <tcp_rst+0xa0>)
 8014b90:	481a      	ldr	r0, [pc, #104]	; (8014bfc <tcp_rst+0x9c>)
 8014b92:	f003 fd7b 	bl	801868c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b96:	2300      	movs	r3, #0
 8014b98:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014b9a:	f246 0308 	movw	r3, #24584	; 0x6008
 8014b9e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014ba0:	7dfb      	ldrb	r3, [r7, #23]
 8014ba2:	b29c      	uxth	r4, r3
 8014ba4:	68b8      	ldr	r0, [r7, #8]
 8014ba6:	f7f7 fe84 	bl	800c8b2 <lwip_htonl>
 8014baa:	4602      	mov	r2, r0
 8014bac:	8abb      	ldrh	r3, [r7, #20]
 8014bae:	9303      	str	r3, [sp, #12]
 8014bb0:	2314      	movs	r3, #20
 8014bb2:	9302      	str	r3, [sp, #8]
 8014bb4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014bb6:	9301      	str	r3, [sp, #4]
 8014bb8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014bba:	9300      	str	r3, [sp, #0]
 8014bbc:	4613      	mov	r3, r2
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	4621      	mov	r1, r4
 8014bc2:	6878      	ldr	r0, [r7, #4]
 8014bc4:	f7ff fe92 	bl	80148ec <tcp_output_alloc_header_common>
 8014bc8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014bca:	693b      	ldr	r3, [r7, #16]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d00c      	beq.n	8014bea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014bd0:	7dfb      	ldrb	r3, [r7, #23]
 8014bd2:	2200      	movs	r2, #0
 8014bd4:	6939      	ldr	r1, [r7, #16]
 8014bd6:	68f8      	ldr	r0, [r7, #12]
 8014bd8:	f7ff ff38 	bl	8014a4c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bde:	683a      	ldr	r2, [r7, #0]
 8014be0:	6939      	ldr	r1, [r7, #16]
 8014be2:	68f8      	ldr	r0, [r7, #12]
 8014be4:	f7ff ff72 	bl	8014acc <tcp_output_control_segment>
 8014be8:	e000      	b.n	8014bec <tcp_rst+0x8c>
    return;
 8014bea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014bec:	371c      	adds	r7, #28
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd90      	pop	{r4, r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	0801bcbc 	.word	0x0801bcbc
 8014bf8:	0801c440 	.word	0x0801c440
 8014bfc:	0801bd10 	.word	0x0801bd10
 8014c00:	0801c45c 	.word	0x0801c45c

08014c04 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014c04:	b590      	push	{r4, r7, lr}
 8014c06:	b087      	sub	sp, #28
 8014c08:	af00      	add	r7, sp, #0
 8014c0a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014c10:	2300      	movs	r3, #0
 8014c12:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d106      	bne.n	8014c28 <tcp_send_empty_ack+0x24>
 8014c1a:	4b28      	ldr	r3, [pc, #160]	; (8014cbc <tcp_send_empty_ack+0xb8>)
 8014c1c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014c20:	4927      	ldr	r1, [pc, #156]	; (8014cc0 <tcp_send_empty_ack+0xbc>)
 8014c22:	4828      	ldr	r0, [pc, #160]	; (8014cc4 <tcp_send_empty_ack+0xc0>)
 8014c24:	f003 fd32 	bl	801868c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014c28:	7dfb      	ldrb	r3, [r7, #23]
 8014c2a:	009b      	lsls	r3, r3, #2
 8014c2c:	b2db      	uxtb	r3, r3
 8014c2e:	f003 0304 	and.w	r3, r3, #4
 8014c32:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014c34:	7d7b      	ldrb	r3, [r7, #21]
 8014c36:	b29c      	uxth	r4, r3
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7f7 fe38 	bl	800c8b2 <lwip_htonl>
 8014c42:	4603      	mov	r3, r0
 8014c44:	2200      	movs	r2, #0
 8014c46:	4621      	mov	r1, r4
 8014c48:	6878      	ldr	r0, [r7, #4]
 8014c4a:	f7ff fec1 	bl	80149d0 <tcp_output_alloc_header>
 8014c4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014c50:	693b      	ldr	r3, [r7, #16]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d109      	bne.n	8014c6a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	8b5b      	ldrh	r3, [r3, #26]
 8014c5a:	f043 0303 	orr.w	r3, r3, #3
 8014c5e:	b29a      	uxth	r2, r3
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014c64:	f06f 0301 	mvn.w	r3, #1
 8014c68:	e023      	b.n	8014cb2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014c6a:	7dbb      	ldrb	r3, [r7, #22]
 8014c6c:	7dfa      	ldrb	r2, [r7, #23]
 8014c6e:	6939      	ldr	r1, [r7, #16]
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f7ff feeb 	bl	8014a4c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	3304      	adds	r3, #4
 8014c7c:	6939      	ldr	r1, [r7, #16]
 8014c7e:	6878      	ldr	r0, [r7, #4]
 8014c80:	f7ff ff24 	bl	8014acc <tcp_output_control_segment>
 8014c84:	4603      	mov	r3, r0
 8014c86:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d007      	beq.n	8014ca0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	8b5b      	ldrh	r3, [r3, #26]
 8014c94:	f043 0303 	orr.w	r3, r3, #3
 8014c98:	b29a      	uxth	r2, r3
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	835a      	strh	r2, [r3, #26]
 8014c9e:	e006      	b.n	8014cae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	8b5b      	ldrh	r3, [r3, #26]
 8014ca4:	f023 0303 	bic.w	r3, r3, #3
 8014ca8:	b29a      	uxth	r2, r3
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	371c      	adds	r7, #28
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd90      	pop	{r4, r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	0801bcbc 	.word	0x0801bcbc
 8014cc0:	0801c478 	.word	0x0801c478
 8014cc4:	0801bd10 	.word	0x0801bd10

08014cc8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014cc8:	b590      	push	{r4, r7, lr}
 8014cca:	b087      	sub	sp, #28
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d106      	bne.n	8014ce8 <tcp_keepalive+0x20>
 8014cda:	4b18      	ldr	r3, [pc, #96]	; (8014d3c <tcp_keepalive+0x74>)
 8014cdc:	f640 0224 	movw	r2, #2084	; 0x824
 8014ce0:	4917      	ldr	r1, [pc, #92]	; (8014d40 <tcp_keepalive+0x78>)
 8014ce2:	4818      	ldr	r0, [pc, #96]	; (8014d44 <tcp_keepalive+0x7c>)
 8014ce4:	f003 fcd2 	bl	801868c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014ce8:	7dfb      	ldrb	r3, [r7, #23]
 8014cea:	b29c      	uxth	r4, r3
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014cf0:	3b01      	subs	r3, #1
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7f7 fddd 	bl	800c8b2 <lwip_htonl>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	4621      	mov	r1, r4
 8014cfe:	6878      	ldr	r0, [r7, #4]
 8014d00:	f7ff fe66 	bl	80149d0 <tcp_output_alloc_header>
 8014d04:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d06:	693b      	ldr	r3, [r7, #16]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d102      	bne.n	8014d12 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8014d10:	e010      	b.n	8014d34 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014d12:	7dfb      	ldrb	r3, [r7, #23]
 8014d14:	2200      	movs	r2, #0
 8014d16:	6939      	ldr	r1, [r7, #16]
 8014d18:	6878      	ldr	r0, [r7, #4]
 8014d1a:	f7ff fe97 	bl	8014a4c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	3304      	adds	r3, #4
 8014d24:	6939      	ldr	r1, [r7, #16]
 8014d26:	6878      	ldr	r0, [r7, #4]
 8014d28:	f7ff fed0 	bl	8014acc <tcp_output_control_segment>
 8014d2c:	4603      	mov	r3, r0
 8014d2e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014d30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	371c      	adds	r7, #28
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd90      	pop	{r4, r7, pc}
 8014d3c:	0801bcbc 	.word	0x0801bcbc
 8014d40:	0801c498 	.word	0x0801c498
 8014d44:	0801bd10 	.word	0x0801bd10

08014d48 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014d48:	b590      	push	{r4, r7, lr}
 8014d4a:	b08b      	sub	sp, #44	; 0x2c
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014d50:	2300      	movs	r3, #0
 8014d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d106      	bne.n	8014d6a <tcp_zero_window_probe+0x22>
 8014d5c:	4b4c      	ldr	r3, [pc, #304]	; (8014e90 <tcp_zero_window_probe+0x148>)
 8014d5e:	f640 024f 	movw	r2, #2127	; 0x84f
 8014d62:	494c      	ldr	r1, [pc, #304]	; (8014e94 <tcp_zero_window_probe+0x14c>)
 8014d64:	484c      	ldr	r0, [pc, #304]	; (8014e98 <tcp_zero_window_probe+0x150>)
 8014d66:	f003 fc91 	bl	801868c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d6e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014d70:	6a3b      	ldr	r3, [r7, #32]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d101      	bne.n	8014d7a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014d76:	2300      	movs	r3, #0
 8014d78:	e086      	b.n	8014e88 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d80:	2bff      	cmp	r3, #255	; 0xff
 8014d82:	d007      	beq.n	8014d94 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014d8a:	3301      	adds	r3, #1
 8014d8c:	b2da      	uxtb	r2, r3
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014d94:	6a3b      	ldr	r3, [r7, #32]
 8014d96:	68db      	ldr	r3, [r3, #12]
 8014d98:	899b      	ldrh	r3, [r3, #12]
 8014d9a:	b29b      	uxth	r3, r3
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f7f7 fd73 	bl	800c888 <lwip_htons>
 8014da2:	4603      	mov	r3, r0
 8014da4:	b2db      	uxtb	r3, r3
 8014da6:	f003 0301 	and.w	r3, r3, #1
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d005      	beq.n	8014dba <tcp_zero_window_probe+0x72>
 8014dae:	6a3b      	ldr	r3, [r7, #32]
 8014db0:	891b      	ldrh	r3, [r3, #8]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d101      	bne.n	8014dba <tcp_zero_window_probe+0x72>
 8014db6:	2301      	movs	r3, #1
 8014db8:	e000      	b.n	8014dbc <tcp_zero_window_probe+0x74>
 8014dba:	2300      	movs	r3, #0
 8014dbc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014dbe:	7ffb      	ldrb	r3, [r7, #31]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	bf0c      	ite	eq
 8014dc4:	2301      	moveq	r3, #1
 8014dc6:	2300      	movne	r3, #0
 8014dc8:	b2db      	uxtb	r3, r3
 8014dca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dd0:	b299      	uxth	r1, r3
 8014dd2:	6a3b      	ldr	r3, [r7, #32]
 8014dd4:	68db      	ldr	r3, [r3, #12]
 8014dd6:	685b      	ldr	r3, [r3, #4]
 8014dd8:	8bba      	ldrh	r2, [r7, #28]
 8014dda:	6878      	ldr	r0, [r7, #4]
 8014ddc:	f7ff fdf8 	bl	80149d0 <tcp_output_alloc_header>
 8014de0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014de2:	69bb      	ldr	r3, [r7, #24]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d102      	bne.n	8014dee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014de8:	f04f 33ff 	mov.w	r3, #4294967295
 8014dec:	e04c      	b.n	8014e88 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014dee:	69bb      	ldr	r3, [r7, #24]
 8014df0:	685b      	ldr	r3, [r3, #4]
 8014df2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014df4:	7ffb      	ldrb	r3, [r7, #31]
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d011      	beq.n	8014e1e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	899b      	ldrh	r3, [r3, #12]
 8014dfe:	b29b      	uxth	r3, r3
 8014e00:	b21b      	sxth	r3, r3
 8014e02:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014e06:	b21c      	sxth	r4, r3
 8014e08:	2011      	movs	r0, #17
 8014e0a:	f7f7 fd3d 	bl	800c888 <lwip_htons>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	b21b      	sxth	r3, r3
 8014e12:	4323      	orrs	r3, r4
 8014e14:	b21b      	sxth	r3, r3
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	697b      	ldr	r3, [r7, #20]
 8014e1a:	819a      	strh	r2, [r3, #12]
 8014e1c:	e010      	b.n	8014e40 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014e1e:	69bb      	ldr	r3, [r7, #24]
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	3314      	adds	r3, #20
 8014e24:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014e26:	6a3b      	ldr	r3, [r7, #32]
 8014e28:	6858      	ldr	r0, [r3, #4]
 8014e2a:	6a3b      	ldr	r3, [r7, #32]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	891a      	ldrh	r2, [r3, #8]
 8014e30:	6a3b      	ldr	r3, [r7, #32]
 8014e32:	891b      	ldrh	r3, [r3, #8]
 8014e34:	1ad3      	subs	r3, r2, r3
 8014e36:	b29b      	uxth	r3, r3
 8014e38:	2201      	movs	r2, #1
 8014e3a:	6939      	ldr	r1, [r7, #16]
 8014e3c:	f7f9 fdd2 	bl	800e9e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014e40:	6a3b      	ldr	r3, [r7, #32]
 8014e42:	68db      	ldr	r3, [r3, #12]
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	4618      	mov	r0, r3
 8014e48:	f7f7 fd33 	bl	800c8b2 <lwip_htonl>
 8014e4c:	4603      	mov	r3, r0
 8014e4e:	3301      	adds	r3, #1
 8014e50:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	1ad3      	subs	r3, r2, r3
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	da02      	bge.n	8014e64 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	68fa      	ldr	r2, [r7, #12]
 8014e62:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e68:	2200      	movs	r2, #0
 8014e6a:	69b9      	ldr	r1, [r7, #24]
 8014e6c:	6878      	ldr	r0, [r7, #4]
 8014e6e:	f7ff fded 	bl	8014a4c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e72:	687a      	ldr	r2, [r7, #4]
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	3304      	adds	r3, #4
 8014e78:	69b9      	ldr	r1, [r7, #24]
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f7ff fe26 	bl	8014acc <tcp_output_control_segment>
 8014e80:	4603      	mov	r3, r0
 8014e82:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014e84:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	372c      	adds	r7, #44	; 0x2c
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd90      	pop	{r4, r7, pc}
 8014e90:	0801bcbc 	.word	0x0801bcbc
 8014e94:	0801c4b4 	.word	0x0801c4b4
 8014e98:	0801bd10 	.word	0x0801bd10

08014e9c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b082      	sub	sp, #8
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014ea4:	f7f9 ffe6 	bl	800ee74 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014ea8:	4b0a      	ldr	r3, [pc, #40]	; (8014ed4 <tcpip_tcp_timer+0x38>)
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d103      	bne.n	8014eb8 <tcpip_tcp_timer+0x1c>
 8014eb0:	4b09      	ldr	r3, [pc, #36]	; (8014ed8 <tcpip_tcp_timer+0x3c>)
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d005      	beq.n	8014ec4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014eb8:	2200      	movs	r2, #0
 8014eba:	4908      	ldr	r1, [pc, #32]	; (8014edc <tcpip_tcp_timer+0x40>)
 8014ebc:	20fa      	movs	r0, #250	; 0xfa
 8014ebe:	f000 f8f3 	bl	80150a8 <sys_timeout>
 8014ec2:	e003      	b.n	8014ecc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014ec4:	4b06      	ldr	r3, [pc, #24]	; (8014ee0 <tcpip_tcp_timer+0x44>)
 8014ec6:	2200      	movs	r2, #0
 8014ec8:	601a      	str	r2, [r3, #0]
  }
}
 8014eca:	bf00      	nop
 8014ecc:	bf00      	nop
 8014ece:	3708      	adds	r7, #8
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	2000bd88 	.word	0x2000bd88
 8014ed8:	2000bd98 	.word	0x2000bd98
 8014edc:	08014e9d 	.word	0x08014e9d
 8014ee0:	20004f18 	.word	0x20004f18

08014ee4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014ee8:	4b0a      	ldr	r3, [pc, #40]	; (8014f14 <tcp_timer_needed+0x30>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d10f      	bne.n	8014f10 <tcp_timer_needed+0x2c>
 8014ef0:	4b09      	ldr	r3, [pc, #36]	; (8014f18 <tcp_timer_needed+0x34>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d103      	bne.n	8014f00 <tcp_timer_needed+0x1c>
 8014ef8:	4b08      	ldr	r3, [pc, #32]	; (8014f1c <tcp_timer_needed+0x38>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d007      	beq.n	8014f10 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014f00:	4b04      	ldr	r3, [pc, #16]	; (8014f14 <tcp_timer_needed+0x30>)
 8014f02:	2201      	movs	r2, #1
 8014f04:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014f06:	2200      	movs	r2, #0
 8014f08:	4905      	ldr	r1, [pc, #20]	; (8014f20 <tcp_timer_needed+0x3c>)
 8014f0a:	20fa      	movs	r0, #250	; 0xfa
 8014f0c:	f000 f8cc 	bl	80150a8 <sys_timeout>
  }
}
 8014f10:	bf00      	nop
 8014f12:	bd80      	pop	{r7, pc}
 8014f14:	20004f18 	.word	0x20004f18
 8014f18:	2000bd88 	.word	0x2000bd88
 8014f1c:	2000bd98 	.word	0x2000bd98
 8014f20:	08014e9d 	.word	0x08014e9d

08014f24 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014f24:	b580      	push	{r7, lr}
 8014f26:	b086      	sub	sp, #24
 8014f28:	af00      	add	r7, sp, #0
 8014f2a:	60f8      	str	r0, [r7, #12]
 8014f2c:	60b9      	str	r1, [r7, #8]
 8014f2e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014f30:	200a      	movs	r0, #10
 8014f32:	f7f8 fc29 	bl	800d788 <memp_malloc>
 8014f36:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014f38:	693b      	ldr	r3, [r7, #16]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d109      	bne.n	8014f52 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014f3e:	693b      	ldr	r3, [r7, #16]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d151      	bne.n	8014fe8 <sys_timeout_abs+0xc4>
 8014f44:	4b2a      	ldr	r3, [pc, #168]	; (8014ff0 <sys_timeout_abs+0xcc>)
 8014f46:	22be      	movs	r2, #190	; 0xbe
 8014f48:	492a      	ldr	r1, [pc, #168]	; (8014ff4 <sys_timeout_abs+0xd0>)
 8014f4a:	482b      	ldr	r0, [pc, #172]	; (8014ff8 <sys_timeout_abs+0xd4>)
 8014f4c:	f003 fb9e 	bl	801868c <iprintf>
    return;
 8014f50:	e04a      	b.n	8014fe8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	2200      	movs	r2, #0
 8014f56:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014f58:	693b      	ldr	r3, [r7, #16]
 8014f5a:	68ba      	ldr	r2, [r7, #8]
 8014f5c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014f5e:	693b      	ldr	r3, [r7, #16]
 8014f60:	687a      	ldr	r2, [r7, #4]
 8014f62:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014f64:	693b      	ldr	r3, [r7, #16]
 8014f66:	68fa      	ldr	r2, [r7, #12]
 8014f68:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014f6a:	4b24      	ldr	r3, [pc, #144]	; (8014ffc <sys_timeout_abs+0xd8>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d103      	bne.n	8014f7a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014f72:	4a22      	ldr	r2, [pc, #136]	; (8014ffc <sys_timeout_abs+0xd8>)
 8014f74:	693b      	ldr	r3, [r7, #16]
 8014f76:	6013      	str	r3, [r2, #0]
    return;
 8014f78:	e037      	b.n	8014fea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014f7a:	693b      	ldr	r3, [r7, #16]
 8014f7c:	685a      	ldr	r2, [r3, #4]
 8014f7e:	4b1f      	ldr	r3, [pc, #124]	; (8014ffc <sys_timeout_abs+0xd8>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	1ad3      	subs	r3, r2, r3
 8014f86:	0fdb      	lsrs	r3, r3, #31
 8014f88:	f003 0301 	and.w	r3, r3, #1
 8014f8c:	b2db      	uxtb	r3, r3
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d007      	beq.n	8014fa2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014f92:	4b1a      	ldr	r3, [pc, #104]	; (8014ffc <sys_timeout_abs+0xd8>)
 8014f94:	681a      	ldr	r2, [r3, #0]
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014f9a:	4a18      	ldr	r2, [pc, #96]	; (8014ffc <sys_timeout_abs+0xd8>)
 8014f9c:	693b      	ldr	r3, [r7, #16]
 8014f9e:	6013      	str	r3, [r2, #0]
 8014fa0:	e023      	b.n	8014fea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014fa2:	4b16      	ldr	r3, [pc, #88]	; (8014ffc <sys_timeout_abs+0xd8>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	617b      	str	r3, [r7, #20]
 8014fa8:	e01a      	b.n	8014fe0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	681b      	ldr	r3, [r3, #0]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d00b      	beq.n	8014fca <sys_timeout_abs+0xa6>
 8014fb2:	693b      	ldr	r3, [r7, #16]
 8014fb4:	685a      	ldr	r2, [r3, #4]
 8014fb6:	697b      	ldr	r3, [r7, #20]
 8014fb8:	681b      	ldr	r3, [r3, #0]
 8014fba:	685b      	ldr	r3, [r3, #4]
 8014fbc:	1ad3      	subs	r3, r2, r3
 8014fbe:	0fdb      	lsrs	r3, r3, #31
 8014fc0:	f003 0301 	and.w	r3, r3, #1
 8014fc4:	b2db      	uxtb	r3, r3
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d007      	beq.n	8014fda <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014fca:	697b      	ldr	r3, [r7, #20]
 8014fcc:	681a      	ldr	r2, [r3, #0]
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014fd2:	697b      	ldr	r3, [r7, #20]
 8014fd4:	693a      	ldr	r2, [r7, #16]
 8014fd6:	601a      	str	r2, [r3, #0]
        break;
 8014fd8:	e007      	b.n	8014fea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	617b      	str	r3, [r7, #20]
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d1e1      	bne.n	8014faa <sys_timeout_abs+0x86>
 8014fe6:	e000      	b.n	8014fea <sys_timeout_abs+0xc6>
    return;
 8014fe8:	bf00      	nop
      }
    }
  }
}
 8014fea:	3718      	adds	r7, #24
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	0801c4d8 	.word	0x0801c4d8
 8014ff4:	0801c50c 	.word	0x0801c50c
 8014ff8:	0801c54c 	.word	0x0801c54c
 8014ffc:	20004f10 	.word	0x20004f10

08015000 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b086      	sub	sp, #24
 8015004:	af00      	add	r7, sp, #0
 8015006:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801500c:	697b      	ldr	r3, [r7, #20]
 801500e:	685b      	ldr	r3, [r3, #4]
 8015010:	4798      	blx	r3

  now = sys_now();
 8015012:	f7ef fdef 	bl	8004bf4 <sys_now>
 8015016:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8015018:	697b      	ldr	r3, [r7, #20]
 801501a:	681a      	ldr	r2, [r3, #0]
 801501c:	4b0f      	ldr	r3, [pc, #60]	; (801505c <lwip_cyclic_timer+0x5c>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	4413      	add	r3, r2
 8015022:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015024:	68fa      	ldr	r2, [r7, #12]
 8015026:	693b      	ldr	r3, [r7, #16]
 8015028:	1ad3      	subs	r3, r2, r3
 801502a:	0fdb      	lsrs	r3, r3, #31
 801502c:	f003 0301 	and.w	r3, r3, #1
 8015030:	b2db      	uxtb	r3, r3
 8015032:	2b00      	cmp	r3, #0
 8015034:	d009      	beq.n	801504a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	681a      	ldr	r2, [r3, #0]
 801503a:	693b      	ldr	r3, [r7, #16]
 801503c:	4413      	add	r3, r2
 801503e:	687a      	ldr	r2, [r7, #4]
 8015040:	4907      	ldr	r1, [pc, #28]	; (8015060 <lwip_cyclic_timer+0x60>)
 8015042:	4618      	mov	r0, r3
 8015044:	f7ff ff6e 	bl	8014f24 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8015048:	e004      	b.n	8015054 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801504a:	687a      	ldr	r2, [r7, #4]
 801504c:	4904      	ldr	r1, [pc, #16]	; (8015060 <lwip_cyclic_timer+0x60>)
 801504e:	68f8      	ldr	r0, [r7, #12]
 8015050:	f7ff ff68 	bl	8014f24 <sys_timeout_abs>
}
 8015054:	bf00      	nop
 8015056:	3718      	adds	r7, #24
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	20004f14 	.word	0x20004f14
 8015060:	08015001 	.word	0x08015001

08015064 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015064:	b580      	push	{r7, lr}
 8015066:	b082      	sub	sp, #8
 8015068:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801506a:	2301      	movs	r3, #1
 801506c:	607b      	str	r3, [r7, #4]
 801506e:	e00e      	b.n	801508e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015070:	4a0b      	ldr	r2, [pc, #44]	; (80150a0 <sys_timeouts_init+0x3c>)
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	00db      	lsls	r3, r3, #3
 801507c:	4a08      	ldr	r2, [pc, #32]	; (80150a0 <sys_timeouts_init+0x3c>)
 801507e:	4413      	add	r3, r2
 8015080:	461a      	mov	r2, r3
 8015082:	4908      	ldr	r1, [pc, #32]	; (80150a4 <sys_timeouts_init+0x40>)
 8015084:	f000 f810 	bl	80150a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	3301      	adds	r3, #1
 801508c:	607b      	str	r3, [r7, #4]
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	2b03      	cmp	r3, #3
 8015092:	d9ed      	bls.n	8015070 <sys_timeouts_init+0xc>
  }
}
 8015094:	bf00      	nop
 8015096:	bf00      	nop
 8015098:	3708      	adds	r7, #8
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	0801d17c 	.word	0x0801d17c
 80150a4:	08015001 	.word	0x08015001

080150a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b086      	sub	sp, #24
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	60f8      	str	r0, [r7, #12]
 80150b0:	60b9      	str	r1, [r7, #8]
 80150b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80150ba:	d306      	bcc.n	80150ca <sys_timeout+0x22>
 80150bc:	4b0a      	ldr	r3, [pc, #40]	; (80150e8 <sys_timeout+0x40>)
 80150be:	f240 1229 	movw	r2, #297	; 0x129
 80150c2:	490a      	ldr	r1, [pc, #40]	; (80150ec <sys_timeout+0x44>)
 80150c4:	480a      	ldr	r0, [pc, #40]	; (80150f0 <sys_timeout+0x48>)
 80150c6:	f003 fae1 	bl	801868c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80150ca:	f7ef fd93 	bl	8004bf4 <sys_now>
 80150ce:	4602      	mov	r2, r0
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	4413      	add	r3, r2
 80150d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80150d6:	687a      	ldr	r2, [r7, #4]
 80150d8:	68b9      	ldr	r1, [r7, #8]
 80150da:	6978      	ldr	r0, [r7, #20]
 80150dc:	f7ff ff22 	bl	8014f24 <sys_timeout_abs>
#endif
}
 80150e0:	bf00      	nop
 80150e2:	3718      	adds	r7, #24
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	0801c4d8 	.word	0x0801c4d8
 80150ec:	0801c574 	.word	0x0801c574
 80150f0:	0801c54c 	.word	0x0801c54c

080150f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b084      	sub	sp, #16
 80150f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80150fa:	f7ef fd7b 	bl	8004bf4 <sys_now>
 80150fe:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015100:	4b17      	ldr	r3, [pc, #92]	; (8015160 <sys_check_timeouts+0x6c>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8015106:	68bb      	ldr	r3, [r7, #8]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d022      	beq.n	8015152 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	68fa      	ldr	r2, [r7, #12]
 8015112:	1ad3      	subs	r3, r2, r3
 8015114:	0fdb      	lsrs	r3, r3, #31
 8015116:	f003 0301 	and.w	r3, r3, #1
 801511a:	b2db      	uxtb	r3, r3
 801511c:	2b00      	cmp	r3, #0
 801511e:	d11a      	bne.n	8015156 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015120:	68bb      	ldr	r3, [r7, #8]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	4a0e      	ldr	r2, [pc, #56]	; (8015160 <sys_check_timeouts+0x6c>)
 8015126:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	689b      	ldr	r3, [r3, #8]
 801512c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	68db      	ldr	r3, [r3, #12]
 8015132:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015134:	68bb      	ldr	r3, [r7, #8]
 8015136:	685b      	ldr	r3, [r3, #4]
 8015138:	4a0a      	ldr	r2, [pc, #40]	; (8015164 <sys_check_timeouts+0x70>)
 801513a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801513c:	68b9      	ldr	r1, [r7, #8]
 801513e:	200a      	movs	r0, #10
 8015140:	f7f8 fb74 	bl	800d82c <memp_free>
    if (handler != NULL) {
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d0da      	beq.n	8015100 <sys_check_timeouts+0xc>
      handler(arg);
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6838      	ldr	r0, [r7, #0]
 801514e:	4798      	blx	r3
  do {
 8015150:	e7d6      	b.n	8015100 <sys_check_timeouts+0xc>
      return;
 8015152:	bf00      	nop
 8015154:	e000      	b.n	8015158 <sys_check_timeouts+0x64>
      return;
 8015156:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8015158:	3710      	adds	r7, #16
 801515a:	46bd      	mov	sp, r7
 801515c:	bd80      	pop	{r7, pc}
 801515e:	bf00      	nop
 8015160:	20004f10 	.word	0x20004f10
 8015164:	20004f14 	.word	0x20004f14

08015168 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8015168:	b580      	push	{r7, lr}
 801516a:	b082      	sub	sp, #8
 801516c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801516e:	4b16      	ldr	r3, [pc, #88]	; (80151c8 <sys_timeouts_sleeptime+0x60>)
 8015170:	681b      	ldr	r3, [r3, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d102      	bne.n	801517c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8015176:	f04f 33ff 	mov.w	r3, #4294967295
 801517a:	e020      	b.n	80151be <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801517c:	f7ef fd3a 	bl	8004bf4 <sys_now>
 8015180:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015182:	4b11      	ldr	r3, [pc, #68]	; (80151c8 <sys_timeouts_sleeptime+0x60>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	685a      	ldr	r2, [r3, #4]
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	1ad3      	subs	r3, r2, r3
 801518c:	0fdb      	lsrs	r3, r3, #31
 801518e:	f003 0301 	and.w	r3, r3, #1
 8015192:	b2db      	uxtb	r3, r3
 8015194:	2b00      	cmp	r3, #0
 8015196:	d001      	beq.n	801519c <sys_timeouts_sleeptime+0x34>
    return 0;
 8015198:	2300      	movs	r3, #0
 801519a:	e010      	b.n	80151be <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801519c:	4b0a      	ldr	r3, [pc, #40]	; (80151c8 <sys_timeouts_sleeptime+0x60>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	685a      	ldr	r2, [r3, #4]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	1ad3      	subs	r3, r2, r3
 80151a6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	da06      	bge.n	80151bc <sys_timeouts_sleeptime+0x54>
 80151ae:	4b07      	ldr	r3, [pc, #28]	; (80151cc <sys_timeouts_sleeptime+0x64>)
 80151b0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80151b4:	4906      	ldr	r1, [pc, #24]	; (80151d0 <sys_timeouts_sleeptime+0x68>)
 80151b6:	4807      	ldr	r0, [pc, #28]	; (80151d4 <sys_timeouts_sleeptime+0x6c>)
 80151b8:	f003 fa68 	bl	801868c <iprintf>
    return ret;
 80151bc:	683b      	ldr	r3, [r7, #0]
  }
}
 80151be:	4618      	mov	r0, r3
 80151c0:	3708      	adds	r7, #8
 80151c2:	46bd      	mov	sp, r7
 80151c4:	bd80      	pop	{r7, pc}
 80151c6:	bf00      	nop
 80151c8:	20004f10 	.word	0x20004f10
 80151cc:	0801c4d8 	.word	0x0801c4d8
 80151d0:	0801c5ac 	.word	0x0801c5ac
 80151d4:	0801c54c 	.word	0x0801c54c

080151d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80151dc:	f003 fa6e 	bl	80186bc <rand>
 80151e0:	4603      	mov	r3, r0
 80151e2:	b29b      	uxth	r3, r3
 80151e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80151e8:	b29b      	uxth	r3, r3
 80151ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80151ee:	b29a      	uxth	r2, r3
 80151f0:	4b01      	ldr	r3, [pc, #4]	; (80151f8 <udp_init+0x20>)
 80151f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80151f4:	bf00      	nop
 80151f6:	bd80      	pop	{r7, pc}
 80151f8:	20000018 	.word	0x20000018

080151fc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80151fc:	b480      	push	{r7}
 80151fe:	b083      	sub	sp, #12
 8015200:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015202:	2300      	movs	r3, #0
 8015204:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8015206:	4b17      	ldr	r3, [pc, #92]	; (8015264 <udp_new_port+0x68>)
 8015208:	881b      	ldrh	r3, [r3, #0]
 801520a:	1c5a      	adds	r2, r3, #1
 801520c:	b291      	uxth	r1, r2
 801520e:	4a15      	ldr	r2, [pc, #84]	; (8015264 <udp_new_port+0x68>)
 8015210:	8011      	strh	r1, [r2, #0]
 8015212:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015216:	4293      	cmp	r3, r2
 8015218:	d103      	bne.n	8015222 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801521a:	4b12      	ldr	r3, [pc, #72]	; (8015264 <udp_new_port+0x68>)
 801521c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015220:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015222:	4b11      	ldr	r3, [pc, #68]	; (8015268 <udp_new_port+0x6c>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	603b      	str	r3, [r7, #0]
 8015228:	e011      	b.n	801524e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	8a5a      	ldrh	r2, [r3, #18]
 801522e:	4b0d      	ldr	r3, [pc, #52]	; (8015264 <udp_new_port+0x68>)
 8015230:	881b      	ldrh	r3, [r3, #0]
 8015232:	429a      	cmp	r2, r3
 8015234:	d108      	bne.n	8015248 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8015236:	88fb      	ldrh	r3, [r7, #6]
 8015238:	3301      	adds	r3, #1
 801523a:	80fb      	strh	r3, [r7, #6]
 801523c:	88fb      	ldrh	r3, [r7, #6]
 801523e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015242:	d3e0      	bcc.n	8015206 <udp_new_port+0xa>
        return 0;
 8015244:	2300      	movs	r3, #0
 8015246:	e007      	b.n	8015258 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015248:	683b      	ldr	r3, [r7, #0]
 801524a:	68db      	ldr	r3, [r3, #12]
 801524c:	603b      	str	r3, [r7, #0]
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d1ea      	bne.n	801522a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015254:	4b03      	ldr	r3, [pc, #12]	; (8015264 <udp_new_port+0x68>)
 8015256:	881b      	ldrh	r3, [r3, #0]
}
 8015258:	4618      	mov	r0, r3
 801525a:	370c      	adds	r7, #12
 801525c:	46bd      	mov	sp, r7
 801525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015262:	4770      	bx	lr
 8015264:	20000018 	.word	0x20000018
 8015268:	2000bda0 	.word	0x2000bda0

0801526c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b084      	sub	sp, #16
 8015270:	af00      	add	r7, sp, #0
 8015272:	60f8      	str	r0, [r7, #12]
 8015274:	60b9      	str	r1, [r7, #8]
 8015276:	4613      	mov	r3, r2
 8015278:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d105      	bne.n	801528c <udp_input_local_match+0x20>
 8015280:	4b27      	ldr	r3, [pc, #156]	; (8015320 <udp_input_local_match+0xb4>)
 8015282:	2287      	movs	r2, #135	; 0x87
 8015284:	4927      	ldr	r1, [pc, #156]	; (8015324 <udp_input_local_match+0xb8>)
 8015286:	4828      	ldr	r0, [pc, #160]	; (8015328 <udp_input_local_match+0xbc>)
 8015288:	f003 fa00 	bl	801868c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801528c:	68bb      	ldr	r3, [r7, #8]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d105      	bne.n	801529e <udp_input_local_match+0x32>
 8015292:	4b23      	ldr	r3, [pc, #140]	; (8015320 <udp_input_local_match+0xb4>)
 8015294:	2288      	movs	r2, #136	; 0x88
 8015296:	4925      	ldr	r1, [pc, #148]	; (801532c <udp_input_local_match+0xc0>)
 8015298:	4823      	ldr	r0, [pc, #140]	; (8015328 <udp_input_local_match+0xbc>)
 801529a:	f003 f9f7 	bl	801868c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	7a1b      	ldrb	r3, [r3, #8]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d00b      	beq.n	80152be <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	7a1a      	ldrb	r2, [r3, #8]
 80152aa:	4b21      	ldr	r3, [pc, #132]	; (8015330 <udp_input_local_match+0xc4>)
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80152b2:	3301      	adds	r3, #1
 80152b4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80152b6:	429a      	cmp	r2, r3
 80152b8:	d001      	beq.n	80152be <udp_input_local_match+0x52>
    return 0;
 80152ba:	2300      	movs	r3, #0
 80152bc:	e02b      	b.n	8015316 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80152be:	79fb      	ldrb	r3, [r7, #7]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d018      	beq.n	80152f6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80152c4:	68fb      	ldr	r3, [r7, #12]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d013      	beq.n	80152f2 <udp_input_local_match+0x86>
 80152ca:	68fb      	ldr	r3, [r7, #12]
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d00f      	beq.n	80152f2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80152d2:	4b17      	ldr	r3, [pc, #92]	; (8015330 <udp_input_local_match+0xc4>)
 80152d4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80152d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152da:	d00a      	beq.n	80152f2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	681a      	ldr	r2, [r3, #0]
 80152e0:	4b13      	ldr	r3, [pc, #76]	; (8015330 <udp_input_local_match+0xc4>)
 80152e2:	695b      	ldr	r3, [r3, #20]
 80152e4:	405a      	eors	r2, r3
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	3308      	adds	r3, #8
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d110      	bne.n	8015314 <udp_input_local_match+0xa8>
          return 1;
 80152f2:	2301      	movs	r3, #1
 80152f4:	e00f      	b.n	8015316 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d009      	beq.n	8015310 <udp_input_local_match+0xa4>
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d005      	beq.n	8015310 <udp_input_local_match+0xa4>
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	681a      	ldr	r2, [r3, #0]
 8015308:	4b09      	ldr	r3, [pc, #36]	; (8015330 <udp_input_local_match+0xc4>)
 801530a:	695b      	ldr	r3, [r3, #20]
 801530c:	429a      	cmp	r2, r3
 801530e:	d101      	bne.n	8015314 <udp_input_local_match+0xa8>
        return 1;
 8015310:	2301      	movs	r3, #1
 8015312:	e000      	b.n	8015316 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015314:	2300      	movs	r3, #0
}
 8015316:	4618      	mov	r0, r3
 8015318:	3710      	adds	r7, #16
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
 801531e:	bf00      	nop
 8015320:	0801c5c0 	.word	0x0801c5c0
 8015324:	0801c5f0 	.word	0x0801c5f0
 8015328:	0801c614 	.word	0x0801c614
 801532c:	0801c63c 	.word	0x0801c63c
 8015330:	2000852c 	.word	0x2000852c

08015334 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015334:	b590      	push	{r4, r7, lr}
 8015336:	b08d      	sub	sp, #52	; 0x34
 8015338:	af02      	add	r7, sp, #8
 801533a:	6078      	str	r0, [r7, #4]
 801533c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801533e:	2300      	movs	r3, #0
 8015340:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d105      	bne.n	8015354 <udp_input+0x20>
 8015348:	4b7c      	ldr	r3, [pc, #496]	; (801553c <udp_input+0x208>)
 801534a:	22cf      	movs	r2, #207	; 0xcf
 801534c:	497c      	ldr	r1, [pc, #496]	; (8015540 <udp_input+0x20c>)
 801534e:	487d      	ldr	r0, [pc, #500]	; (8015544 <udp_input+0x210>)
 8015350:	f003 f99c 	bl	801868c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	2b00      	cmp	r3, #0
 8015358:	d105      	bne.n	8015366 <udp_input+0x32>
 801535a:	4b78      	ldr	r3, [pc, #480]	; (801553c <udp_input+0x208>)
 801535c:	22d0      	movs	r2, #208	; 0xd0
 801535e:	497a      	ldr	r1, [pc, #488]	; (8015548 <udp_input+0x214>)
 8015360:	4878      	ldr	r0, [pc, #480]	; (8015544 <udp_input+0x210>)
 8015362:	f003 f993 	bl	801868c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	895b      	ldrh	r3, [r3, #10]
 801536a:	2b07      	cmp	r3, #7
 801536c:	d803      	bhi.n	8015376 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801536e:	6878      	ldr	r0, [r7, #4]
 8015370:	f7f9 f932 	bl	800e5d8 <pbuf_free>
    goto end;
 8015374:	e0de      	b.n	8015534 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	685b      	ldr	r3, [r3, #4]
 801537a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801537c:	4b73      	ldr	r3, [pc, #460]	; (801554c <udp_input+0x218>)
 801537e:	695b      	ldr	r3, [r3, #20]
 8015380:	4a72      	ldr	r2, [pc, #456]	; (801554c <udp_input+0x218>)
 8015382:	6812      	ldr	r2, [r2, #0]
 8015384:	4611      	mov	r1, r2
 8015386:	4618      	mov	r0, r3
 8015388:	f001 ff80 	bl	801728c <ip4_addr_isbroadcast_u32>
 801538c:	4603      	mov	r3, r0
 801538e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015390:	697b      	ldr	r3, [r7, #20]
 8015392:	881b      	ldrh	r3, [r3, #0]
 8015394:	b29b      	uxth	r3, r3
 8015396:	4618      	mov	r0, r3
 8015398:	f7f7 fa76 	bl	800c888 <lwip_htons>
 801539c:	4603      	mov	r3, r0
 801539e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80153a0:	697b      	ldr	r3, [r7, #20]
 80153a2:	885b      	ldrh	r3, [r3, #2]
 80153a4:	b29b      	uxth	r3, r3
 80153a6:	4618      	mov	r0, r3
 80153a8:	f7f7 fa6e 	bl	800c888 <lwip_htons>
 80153ac:	4603      	mov	r3, r0
 80153ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80153b0:	2300      	movs	r3, #0
 80153b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80153b4:	2300      	movs	r3, #0
 80153b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80153b8:	2300      	movs	r3, #0
 80153ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80153bc:	4b64      	ldr	r3, [pc, #400]	; (8015550 <udp_input+0x21c>)
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	627b      	str	r3, [r7, #36]	; 0x24
 80153c2:	e054      	b.n	801546e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80153c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153c6:	8a5b      	ldrh	r3, [r3, #18]
 80153c8:	89fa      	ldrh	r2, [r7, #14]
 80153ca:	429a      	cmp	r2, r3
 80153cc:	d14a      	bne.n	8015464 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80153ce:	7cfb      	ldrb	r3, [r7, #19]
 80153d0:	461a      	mov	r2, r3
 80153d2:	6839      	ldr	r1, [r7, #0]
 80153d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80153d6:	f7ff ff49 	bl	801526c <udp_input_local_match>
 80153da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d041      	beq.n	8015464 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80153e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e2:	7c1b      	ldrb	r3, [r3, #16]
 80153e4:	f003 0304 	and.w	r3, r3, #4
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d11d      	bne.n	8015428 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80153ec:	69fb      	ldr	r3, [r7, #28]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d102      	bne.n	80153f8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80153f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f4:	61fb      	str	r3, [r7, #28]
 80153f6:	e017      	b.n	8015428 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80153f8:	7cfb      	ldrb	r3, [r7, #19]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d014      	beq.n	8015428 <udp_input+0xf4>
 80153fe:	4b53      	ldr	r3, [pc, #332]	; (801554c <udp_input+0x218>)
 8015400:	695b      	ldr	r3, [r3, #20]
 8015402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015406:	d10f      	bne.n	8015428 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015408:	69fb      	ldr	r3, [r7, #28]
 801540a:	681a      	ldr	r2, [r3, #0]
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	3304      	adds	r3, #4
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	429a      	cmp	r2, r3
 8015414:	d008      	beq.n	8015428 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015418:	681a      	ldr	r2, [r3, #0]
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	3304      	adds	r3, #4
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	429a      	cmp	r2, r3
 8015422:	d101      	bne.n	8015428 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015426:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801542a:	8a9b      	ldrh	r3, [r3, #20]
 801542c:	8a3a      	ldrh	r2, [r7, #16]
 801542e:	429a      	cmp	r2, r3
 8015430:	d118      	bne.n	8015464 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015434:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015436:	2b00      	cmp	r3, #0
 8015438:	d005      	beq.n	8015446 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801543c:	685a      	ldr	r2, [r3, #4]
 801543e:	4b43      	ldr	r3, [pc, #268]	; (801554c <udp_input+0x218>)
 8015440:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015442:	429a      	cmp	r2, r3
 8015444:	d10e      	bne.n	8015464 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015446:	6a3b      	ldr	r3, [r7, #32]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d014      	beq.n	8015476 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801544e:	68da      	ldr	r2, [r3, #12]
 8015450:	6a3b      	ldr	r3, [r7, #32]
 8015452:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015454:	4b3e      	ldr	r3, [pc, #248]	; (8015550 <udp_input+0x21c>)
 8015456:	681a      	ldr	r2, [r3, #0]
 8015458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801545a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801545c:	4a3c      	ldr	r2, [pc, #240]	; (8015550 <udp_input+0x21c>)
 801545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015460:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015462:	e008      	b.n	8015476 <udp_input+0x142>
      }
    }

    prev = pcb;
 8015464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015466:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801546a:	68db      	ldr	r3, [r3, #12]
 801546c:	627b      	str	r3, [r7, #36]	; 0x24
 801546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015470:	2b00      	cmp	r3, #0
 8015472:	d1a7      	bne.n	80153c4 <udp_input+0x90>
 8015474:	e000      	b.n	8015478 <udp_input+0x144>
        break;
 8015476:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8015478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801547a:	2b00      	cmp	r3, #0
 801547c:	d101      	bne.n	8015482 <udp_input+0x14e>
    pcb = uncon_pcb;
 801547e:	69fb      	ldr	r3, [r7, #28]
 8015480:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015484:	2b00      	cmp	r3, #0
 8015486:	d002      	beq.n	801548e <udp_input+0x15a>
    for_us = 1;
 8015488:	2301      	movs	r3, #1
 801548a:	76fb      	strb	r3, [r7, #27]
 801548c:	e00a      	b.n	80154a4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801548e:	683b      	ldr	r3, [r7, #0]
 8015490:	3304      	adds	r3, #4
 8015492:	681a      	ldr	r2, [r3, #0]
 8015494:	4b2d      	ldr	r3, [pc, #180]	; (801554c <udp_input+0x218>)
 8015496:	695b      	ldr	r3, [r3, #20]
 8015498:	429a      	cmp	r2, r3
 801549a:	bf0c      	ite	eq
 801549c:	2301      	moveq	r3, #1
 801549e:	2300      	movne	r3, #0
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80154a4:	7efb      	ldrb	r3, [r7, #27]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d041      	beq.n	801552e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80154aa:	2108      	movs	r1, #8
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f7f8 ffdb 	bl	800e468 <pbuf_remove_header>
 80154b2:	4603      	mov	r3, r0
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d00a      	beq.n	80154ce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80154b8:	4b20      	ldr	r3, [pc, #128]	; (801553c <udp_input+0x208>)
 80154ba:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80154be:	4925      	ldr	r1, [pc, #148]	; (8015554 <udp_input+0x220>)
 80154c0:	4820      	ldr	r0, [pc, #128]	; (8015544 <udp_input+0x210>)
 80154c2:	f003 f8e3 	bl	801868c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f7f9 f886 	bl	800e5d8 <pbuf_free>
      goto end;
 80154cc:	e032      	b.n	8015534 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80154ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d012      	beq.n	80154fa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80154d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154d6:	699b      	ldr	r3, [r3, #24]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d00a      	beq.n	80154f2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80154dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154de:	699c      	ldr	r4, [r3, #24]
 80154e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154e2:	69d8      	ldr	r0, [r3, #28]
 80154e4:	8a3b      	ldrh	r3, [r7, #16]
 80154e6:	9300      	str	r3, [sp, #0]
 80154e8:	4b1b      	ldr	r3, [pc, #108]	; (8015558 <udp_input+0x224>)
 80154ea:	687a      	ldr	r2, [r7, #4]
 80154ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80154ee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80154f0:	e021      	b.n	8015536 <udp_input+0x202>
        pbuf_free(p);
 80154f2:	6878      	ldr	r0, [r7, #4]
 80154f4:	f7f9 f870 	bl	800e5d8 <pbuf_free>
        goto end;
 80154f8:	e01c      	b.n	8015534 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80154fa:	7cfb      	ldrb	r3, [r7, #19]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	d112      	bne.n	8015526 <udp_input+0x1f2>
 8015500:	4b12      	ldr	r3, [pc, #72]	; (801554c <udp_input+0x218>)
 8015502:	695b      	ldr	r3, [r3, #20]
 8015504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015508:	2be0      	cmp	r3, #224	; 0xe0
 801550a:	d00c      	beq.n	8015526 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801550c:	4b0f      	ldr	r3, [pc, #60]	; (801554c <udp_input+0x218>)
 801550e:	899b      	ldrh	r3, [r3, #12]
 8015510:	3308      	adds	r3, #8
 8015512:	b29b      	uxth	r3, r3
 8015514:	b21b      	sxth	r3, r3
 8015516:	4619      	mov	r1, r3
 8015518:	6878      	ldr	r0, [r7, #4]
 801551a:	f7f9 f818 	bl	800e54e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801551e:	2103      	movs	r1, #3
 8015520:	6878      	ldr	r0, [r7, #4]
 8015522:	f001 fb93 	bl	8016c4c <icmp_dest_unreach>
      pbuf_free(p);
 8015526:	6878      	ldr	r0, [r7, #4]
 8015528:	f7f9 f856 	bl	800e5d8 <pbuf_free>
  return;
 801552c:	e003      	b.n	8015536 <udp_input+0x202>
    pbuf_free(p);
 801552e:	6878      	ldr	r0, [r7, #4]
 8015530:	f7f9 f852 	bl	800e5d8 <pbuf_free>
  return;
 8015534:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015536:	372c      	adds	r7, #44	; 0x2c
 8015538:	46bd      	mov	sp, r7
 801553a:	bd90      	pop	{r4, r7, pc}
 801553c:	0801c5c0 	.word	0x0801c5c0
 8015540:	0801c664 	.word	0x0801c664
 8015544:	0801c614 	.word	0x0801c614
 8015548:	0801c67c 	.word	0x0801c67c
 801554c:	2000852c 	.word	0x2000852c
 8015550:	2000bda0 	.word	0x2000bda0
 8015554:	0801c698 	.word	0x0801c698
 8015558:	2000853c 	.word	0x2000853c

0801555c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b082      	sub	sp, #8
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d109      	bne.n	8015580 <udp_send+0x24>
 801556c:	4b11      	ldr	r3, [pc, #68]	; (80155b4 <udp_send+0x58>)
 801556e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8015572:	4911      	ldr	r1, [pc, #68]	; (80155b8 <udp_send+0x5c>)
 8015574:	4811      	ldr	r0, [pc, #68]	; (80155bc <udp_send+0x60>)
 8015576:	f003 f889 	bl	801868c <iprintf>
 801557a:	f06f 030f 	mvn.w	r3, #15
 801557e:	e015      	b.n	80155ac <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8015580:	683b      	ldr	r3, [r7, #0]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d109      	bne.n	801559a <udp_send+0x3e>
 8015586:	4b0b      	ldr	r3, [pc, #44]	; (80155b4 <udp_send+0x58>)
 8015588:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801558c:	490c      	ldr	r1, [pc, #48]	; (80155c0 <udp_send+0x64>)
 801558e:	480b      	ldr	r0, [pc, #44]	; (80155bc <udp_send+0x60>)
 8015590:	f003 f87c 	bl	801868c <iprintf>
 8015594:	f06f 030f 	mvn.w	r3, #15
 8015598:	e008      	b.n	80155ac <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	1d1a      	adds	r2, r3, #4
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	8a9b      	ldrh	r3, [r3, #20]
 80155a2:	6839      	ldr	r1, [r7, #0]
 80155a4:	6878      	ldr	r0, [r7, #4]
 80155a6:	f000 f80d 	bl	80155c4 <udp_sendto>
 80155aa:	4603      	mov	r3, r0
}
 80155ac:	4618      	mov	r0, r3
 80155ae:	3708      	adds	r7, #8
 80155b0:	46bd      	mov	sp, r7
 80155b2:	bd80      	pop	{r7, pc}
 80155b4:	0801c5c0 	.word	0x0801c5c0
 80155b8:	0801c6b4 	.word	0x0801c6b4
 80155bc:	0801c614 	.word	0x0801c614
 80155c0:	0801c6cc 	.word	0x0801c6cc

080155c4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b088      	sub	sp, #32
 80155c8:	af02      	add	r7, sp, #8
 80155ca:	60f8      	str	r0, [r7, #12]
 80155cc:	60b9      	str	r1, [r7, #8]
 80155ce:	607a      	str	r2, [r7, #4]
 80155d0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d109      	bne.n	80155ec <udp_sendto+0x28>
 80155d8:	4b23      	ldr	r3, [pc, #140]	; (8015668 <udp_sendto+0xa4>)
 80155da:	f44f 7206 	mov.w	r2, #536	; 0x218
 80155de:	4923      	ldr	r1, [pc, #140]	; (801566c <udp_sendto+0xa8>)
 80155e0:	4823      	ldr	r0, [pc, #140]	; (8015670 <udp_sendto+0xac>)
 80155e2:	f003 f853 	bl	801868c <iprintf>
 80155e6:	f06f 030f 	mvn.w	r3, #15
 80155ea:	e038      	b.n	801565e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80155ec:	68bb      	ldr	r3, [r7, #8]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d109      	bne.n	8015606 <udp_sendto+0x42>
 80155f2:	4b1d      	ldr	r3, [pc, #116]	; (8015668 <udp_sendto+0xa4>)
 80155f4:	f240 2219 	movw	r2, #537	; 0x219
 80155f8:	491e      	ldr	r1, [pc, #120]	; (8015674 <udp_sendto+0xb0>)
 80155fa:	481d      	ldr	r0, [pc, #116]	; (8015670 <udp_sendto+0xac>)
 80155fc:	f003 f846 	bl	801868c <iprintf>
 8015600:	f06f 030f 	mvn.w	r3, #15
 8015604:	e02b      	b.n	801565e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d109      	bne.n	8015620 <udp_sendto+0x5c>
 801560c:	4b16      	ldr	r3, [pc, #88]	; (8015668 <udp_sendto+0xa4>)
 801560e:	f240 221a 	movw	r2, #538	; 0x21a
 8015612:	4919      	ldr	r1, [pc, #100]	; (8015678 <udp_sendto+0xb4>)
 8015614:	4816      	ldr	r0, [pc, #88]	; (8015670 <udp_sendto+0xac>)
 8015616:	f003 f839 	bl	801868c <iprintf>
 801561a:	f06f 030f 	mvn.w	r3, #15
 801561e:	e01e      	b.n	801565e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	7a1b      	ldrb	r3, [r3, #8]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d006      	beq.n	8015636 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	7a1b      	ldrb	r3, [r3, #8]
 801562c:	4618      	mov	r0, r3
 801562e:	f7f8 fc13 	bl	800de58 <netif_get_by_index>
 8015632:	6178      	str	r0, [r7, #20]
 8015634:	e003      	b.n	801563e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8015636:	6878      	ldr	r0, [r7, #4]
 8015638:	f001 fb92 	bl	8016d60 <ip4_route>
 801563c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d102      	bne.n	801564a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8015644:	f06f 0303 	mvn.w	r3, #3
 8015648:	e009      	b.n	801565e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801564a:	887a      	ldrh	r2, [r7, #2]
 801564c:	697b      	ldr	r3, [r7, #20]
 801564e:	9300      	str	r3, [sp, #0]
 8015650:	4613      	mov	r3, r2
 8015652:	687a      	ldr	r2, [r7, #4]
 8015654:	68b9      	ldr	r1, [r7, #8]
 8015656:	68f8      	ldr	r0, [r7, #12]
 8015658:	f000 f810 	bl	801567c <udp_sendto_if>
 801565c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801565e:	4618      	mov	r0, r3
 8015660:	3718      	adds	r7, #24
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}
 8015666:	bf00      	nop
 8015668:	0801c5c0 	.word	0x0801c5c0
 801566c:	0801c6e4 	.word	0x0801c6e4
 8015670:	0801c614 	.word	0x0801c614
 8015674:	0801c6fc 	.word	0x0801c6fc
 8015678:	0801c718 	.word	0x0801c718

0801567c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b088      	sub	sp, #32
 8015680:	af02      	add	r7, sp, #8
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	60b9      	str	r1, [r7, #8]
 8015686:	607a      	str	r2, [r7, #4]
 8015688:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	2b00      	cmp	r3, #0
 801568e:	d109      	bne.n	80156a4 <udp_sendto_if+0x28>
 8015690:	4b2e      	ldr	r3, [pc, #184]	; (801574c <udp_sendto_if+0xd0>)
 8015692:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015696:	492e      	ldr	r1, [pc, #184]	; (8015750 <udp_sendto_if+0xd4>)
 8015698:	482e      	ldr	r0, [pc, #184]	; (8015754 <udp_sendto_if+0xd8>)
 801569a:	f002 fff7 	bl	801868c <iprintf>
 801569e:	f06f 030f 	mvn.w	r3, #15
 80156a2:	e04f      	b.n	8015744 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80156a4:	68bb      	ldr	r3, [r7, #8]
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d109      	bne.n	80156be <udp_sendto_if+0x42>
 80156aa:	4b28      	ldr	r3, [pc, #160]	; (801574c <udp_sendto_if+0xd0>)
 80156ac:	f240 2281 	movw	r2, #641	; 0x281
 80156b0:	4929      	ldr	r1, [pc, #164]	; (8015758 <udp_sendto_if+0xdc>)
 80156b2:	4828      	ldr	r0, [pc, #160]	; (8015754 <udp_sendto_if+0xd8>)
 80156b4:	f002 ffea 	bl	801868c <iprintf>
 80156b8:	f06f 030f 	mvn.w	r3, #15
 80156bc:	e042      	b.n	8015744 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d109      	bne.n	80156d8 <udp_sendto_if+0x5c>
 80156c4:	4b21      	ldr	r3, [pc, #132]	; (801574c <udp_sendto_if+0xd0>)
 80156c6:	f240 2282 	movw	r2, #642	; 0x282
 80156ca:	4924      	ldr	r1, [pc, #144]	; (801575c <udp_sendto_if+0xe0>)
 80156cc:	4821      	ldr	r0, [pc, #132]	; (8015754 <udp_sendto_if+0xd8>)
 80156ce:	f002 ffdd 	bl	801868c <iprintf>
 80156d2:	f06f 030f 	mvn.w	r3, #15
 80156d6:	e035      	b.n	8015744 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80156d8:	6a3b      	ldr	r3, [r7, #32]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d109      	bne.n	80156f2 <udp_sendto_if+0x76>
 80156de:	4b1b      	ldr	r3, [pc, #108]	; (801574c <udp_sendto_if+0xd0>)
 80156e0:	f240 2283 	movw	r2, #643	; 0x283
 80156e4:	491e      	ldr	r1, [pc, #120]	; (8015760 <udp_sendto_if+0xe4>)
 80156e6:	481b      	ldr	r0, [pc, #108]	; (8015754 <udp_sendto_if+0xd8>)
 80156e8:	f002 ffd0 	bl	801868c <iprintf>
 80156ec:	f06f 030f 	mvn.w	r3, #15
 80156f0:	e028      	b.n	8015744 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d009      	beq.n	801570c <udp_sendto_if+0x90>
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	681b      	ldr	r3, [r3, #0]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d005      	beq.n	801570c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015708:	2be0      	cmp	r3, #224	; 0xe0
 801570a:	d103      	bne.n	8015714 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801570c:	6a3b      	ldr	r3, [r7, #32]
 801570e:	3304      	adds	r3, #4
 8015710:	617b      	str	r3, [r7, #20]
 8015712:	e00b      	b.n	801572c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	681a      	ldr	r2, [r3, #0]
 8015718:	6a3b      	ldr	r3, [r7, #32]
 801571a:	3304      	adds	r3, #4
 801571c:	681b      	ldr	r3, [r3, #0]
 801571e:	429a      	cmp	r2, r3
 8015720:	d002      	beq.n	8015728 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015722:	f06f 0303 	mvn.w	r3, #3
 8015726:	e00d      	b.n	8015744 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801572c:	887a      	ldrh	r2, [r7, #2]
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	9301      	str	r3, [sp, #4]
 8015732:	6a3b      	ldr	r3, [r7, #32]
 8015734:	9300      	str	r3, [sp, #0]
 8015736:	4613      	mov	r3, r2
 8015738:	687a      	ldr	r2, [r7, #4]
 801573a:	68b9      	ldr	r1, [r7, #8]
 801573c:	68f8      	ldr	r0, [r7, #12]
 801573e:	f000 f811 	bl	8015764 <udp_sendto_if_src>
 8015742:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015744:	4618      	mov	r0, r3
 8015746:	3718      	adds	r7, #24
 8015748:	46bd      	mov	sp, r7
 801574a:	bd80      	pop	{r7, pc}
 801574c:	0801c5c0 	.word	0x0801c5c0
 8015750:	0801c734 	.word	0x0801c734
 8015754:	0801c614 	.word	0x0801c614
 8015758:	0801c750 	.word	0x0801c750
 801575c:	0801c76c 	.word	0x0801c76c
 8015760:	0801c78c 	.word	0x0801c78c

08015764 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	b08c      	sub	sp, #48	; 0x30
 8015768:	af04      	add	r7, sp, #16
 801576a:	60f8      	str	r0, [r7, #12]
 801576c:	60b9      	str	r1, [r7, #8]
 801576e:	607a      	str	r2, [r7, #4]
 8015770:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015772:	68fb      	ldr	r3, [r7, #12]
 8015774:	2b00      	cmp	r3, #0
 8015776:	d109      	bne.n	801578c <udp_sendto_if_src+0x28>
 8015778:	4b65      	ldr	r3, [pc, #404]	; (8015910 <udp_sendto_if_src+0x1ac>)
 801577a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801577e:	4965      	ldr	r1, [pc, #404]	; (8015914 <udp_sendto_if_src+0x1b0>)
 8015780:	4865      	ldr	r0, [pc, #404]	; (8015918 <udp_sendto_if_src+0x1b4>)
 8015782:	f002 ff83 	bl	801868c <iprintf>
 8015786:	f06f 030f 	mvn.w	r3, #15
 801578a:	e0bc      	b.n	8015906 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d109      	bne.n	80157a6 <udp_sendto_if_src+0x42>
 8015792:	4b5f      	ldr	r3, [pc, #380]	; (8015910 <udp_sendto_if_src+0x1ac>)
 8015794:	f240 22d2 	movw	r2, #722	; 0x2d2
 8015798:	4960      	ldr	r1, [pc, #384]	; (801591c <udp_sendto_if_src+0x1b8>)
 801579a:	485f      	ldr	r0, [pc, #380]	; (8015918 <udp_sendto_if_src+0x1b4>)
 801579c:	f002 ff76 	bl	801868c <iprintf>
 80157a0:	f06f 030f 	mvn.w	r3, #15
 80157a4:	e0af      	b.n	8015906 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d109      	bne.n	80157c0 <udp_sendto_if_src+0x5c>
 80157ac:	4b58      	ldr	r3, [pc, #352]	; (8015910 <udp_sendto_if_src+0x1ac>)
 80157ae:	f240 22d3 	movw	r2, #723	; 0x2d3
 80157b2:	495b      	ldr	r1, [pc, #364]	; (8015920 <udp_sendto_if_src+0x1bc>)
 80157b4:	4858      	ldr	r0, [pc, #352]	; (8015918 <udp_sendto_if_src+0x1b4>)
 80157b6:	f002 ff69 	bl	801868c <iprintf>
 80157ba:	f06f 030f 	mvn.w	r3, #15
 80157be:	e0a2      	b.n	8015906 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80157c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d109      	bne.n	80157da <udp_sendto_if_src+0x76>
 80157c6:	4b52      	ldr	r3, [pc, #328]	; (8015910 <udp_sendto_if_src+0x1ac>)
 80157c8:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80157cc:	4955      	ldr	r1, [pc, #340]	; (8015924 <udp_sendto_if_src+0x1c0>)
 80157ce:	4852      	ldr	r0, [pc, #328]	; (8015918 <udp_sendto_if_src+0x1b4>)
 80157d0:	f002 ff5c 	bl	801868c <iprintf>
 80157d4:	f06f 030f 	mvn.w	r3, #15
 80157d8:	e095      	b.n	8015906 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80157da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d109      	bne.n	80157f4 <udp_sendto_if_src+0x90>
 80157e0:	4b4b      	ldr	r3, [pc, #300]	; (8015910 <udp_sendto_if_src+0x1ac>)
 80157e2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80157e6:	4950      	ldr	r1, [pc, #320]	; (8015928 <udp_sendto_if_src+0x1c4>)
 80157e8:	484b      	ldr	r0, [pc, #300]	; (8015918 <udp_sendto_if_src+0x1b4>)
 80157ea:	f002 ff4f 	bl	801868c <iprintf>
 80157ee:	f06f 030f 	mvn.w	r3, #15
 80157f2:	e088      	b.n	8015906 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	8a5b      	ldrh	r3, [r3, #18]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d10f      	bne.n	801581c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80157fc:	68f9      	ldr	r1, [r7, #12]
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	8a5b      	ldrh	r3, [r3, #18]
 8015802:	461a      	mov	r2, r3
 8015804:	68f8      	ldr	r0, [r7, #12]
 8015806:	f000 f893 	bl	8015930 <udp_bind>
 801580a:	4603      	mov	r3, r0
 801580c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801580e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015812:	2b00      	cmp	r3, #0
 8015814:	d002      	beq.n	801581c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8015816:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801581a:	e074      	b.n	8015906 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801581c:	68bb      	ldr	r3, [r7, #8]
 801581e:	891b      	ldrh	r3, [r3, #8]
 8015820:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8015824:	4293      	cmp	r3, r2
 8015826:	d902      	bls.n	801582e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8015828:	f04f 33ff 	mov.w	r3, #4294967295
 801582c:	e06b      	b.n	8015906 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801582e:	2108      	movs	r1, #8
 8015830:	68b8      	ldr	r0, [r7, #8]
 8015832:	f7f8 fe09 	bl	800e448 <pbuf_add_header>
 8015836:	4603      	mov	r3, r0
 8015838:	2b00      	cmp	r3, #0
 801583a:	d015      	beq.n	8015868 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801583c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015840:	2108      	movs	r1, #8
 8015842:	2022      	movs	r0, #34	; 0x22
 8015844:	f7f8 fbb2 	bl	800dfac <pbuf_alloc>
 8015848:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d102      	bne.n	8015856 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8015850:	f04f 33ff 	mov.w	r3, #4294967295
 8015854:	e057      	b.n	8015906 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	891b      	ldrh	r3, [r3, #8]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d006      	beq.n	801586c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801585e:	68b9      	ldr	r1, [r7, #8]
 8015860:	69f8      	ldr	r0, [r7, #28]
 8015862:	f7f8 ffdd 	bl	800e820 <pbuf_chain>
 8015866:	e001      	b.n	801586c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801586c:	69fb      	ldr	r3, [r7, #28]
 801586e:	895b      	ldrh	r3, [r3, #10]
 8015870:	2b07      	cmp	r3, #7
 8015872:	d806      	bhi.n	8015882 <udp_sendto_if_src+0x11e>
 8015874:	4b26      	ldr	r3, [pc, #152]	; (8015910 <udp_sendto_if_src+0x1ac>)
 8015876:	f240 320d 	movw	r2, #781	; 0x30d
 801587a:	492c      	ldr	r1, [pc, #176]	; (801592c <udp_sendto_if_src+0x1c8>)
 801587c:	4826      	ldr	r0, [pc, #152]	; (8015918 <udp_sendto_if_src+0x1b4>)
 801587e:	f002 ff05 	bl	801868c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8015882:	69fb      	ldr	r3, [r7, #28]
 8015884:	685b      	ldr	r3, [r3, #4]
 8015886:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	8a5b      	ldrh	r3, [r3, #18]
 801588c:	4618      	mov	r0, r3
 801588e:	f7f6 fffb 	bl	800c888 <lwip_htons>
 8015892:	4603      	mov	r3, r0
 8015894:	461a      	mov	r2, r3
 8015896:	697b      	ldr	r3, [r7, #20]
 8015898:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801589a:	887b      	ldrh	r3, [r7, #2]
 801589c:	4618      	mov	r0, r3
 801589e:	f7f6 fff3 	bl	800c888 <lwip_htons>
 80158a2:	4603      	mov	r3, r0
 80158a4:	461a      	mov	r2, r3
 80158a6:	697b      	ldr	r3, [r7, #20]
 80158a8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80158aa:	697b      	ldr	r3, [r7, #20]
 80158ac:	2200      	movs	r2, #0
 80158ae:	719a      	strb	r2, [r3, #6]
 80158b0:	2200      	movs	r2, #0
 80158b2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80158b4:	69fb      	ldr	r3, [r7, #28]
 80158b6:	891b      	ldrh	r3, [r3, #8]
 80158b8:	4618      	mov	r0, r3
 80158ba:	f7f6 ffe5 	bl	800c888 <lwip_htons>
 80158be:	4603      	mov	r3, r0
 80158c0:	461a      	mov	r2, r3
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80158c6:	2311      	movs	r3, #17
 80158c8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	7adb      	ldrb	r3, [r3, #11]
 80158ce:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	7a9b      	ldrb	r3, [r3, #10]
 80158d4:	7cb9      	ldrb	r1, [r7, #18]
 80158d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158d8:	9202      	str	r2, [sp, #8]
 80158da:	7cfa      	ldrb	r2, [r7, #19]
 80158dc:	9201      	str	r2, [sp, #4]
 80158de:	9300      	str	r3, [sp, #0]
 80158e0:	460b      	mov	r3, r1
 80158e2:	687a      	ldr	r2, [r7, #4]
 80158e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80158e6:	69f8      	ldr	r0, [r7, #28]
 80158e8:	f001 fc22 	bl	8017130 <ip4_output_if_src>
 80158ec:	4603      	mov	r3, r0
 80158ee:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80158f0:	69fa      	ldr	r2, [r7, #28]
 80158f2:	68bb      	ldr	r3, [r7, #8]
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d004      	beq.n	8015902 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80158f8:	69f8      	ldr	r0, [r7, #28]
 80158fa:	f7f8 fe6d 	bl	800e5d8 <pbuf_free>
    q = NULL;
 80158fe:	2300      	movs	r3, #0
 8015900:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8015902:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8015906:	4618      	mov	r0, r3
 8015908:	3720      	adds	r7, #32
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	0801c5c0 	.word	0x0801c5c0
 8015914:	0801c7ac 	.word	0x0801c7ac
 8015918:	0801c614 	.word	0x0801c614
 801591c:	0801c7cc 	.word	0x0801c7cc
 8015920:	0801c7ec 	.word	0x0801c7ec
 8015924:	0801c810 	.word	0x0801c810
 8015928:	0801c834 	.word	0x0801c834
 801592c:	0801c858 	.word	0x0801c858

08015930 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b086      	sub	sp, #24
 8015934:	af00      	add	r7, sp, #0
 8015936:	60f8      	str	r0, [r7, #12]
 8015938:	60b9      	str	r1, [r7, #8]
 801593a:	4613      	mov	r3, r2
 801593c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801593e:	68bb      	ldr	r3, [r7, #8]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d101      	bne.n	8015948 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015944:	4b39      	ldr	r3, [pc, #228]	; (8015a2c <udp_bind+0xfc>)
 8015946:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d109      	bne.n	8015962 <udp_bind+0x32>
 801594e:	4b38      	ldr	r3, [pc, #224]	; (8015a30 <udp_bind+0x100>)
 8015950:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015954:	4937      	ldr	r1, [pc, #220]	; (8015a34 <udp_bind+0x104>)
 8015956:	4838      	ldr	r0, [pc, #224]	; (8015a38 <udp_bind+0x108>)
 8015958:	f002 fe98 	bl	801868c <iprintf>
 801595c:	f06f 030f 	mvn.w	r3, #15
 8015960:	e060      	b.n	8015a24 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015962:	2300      	movs	r3, #0
 8015964:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015966:	4b35      	ldr	r3, [pc, #212]	; (8015a3c <udp_bind+0x10c>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	617b      	str	r3, [r7, #20]
 801596c:	e009      	b.n	8015982 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801596e:	68fa      	ldr	r2, [r7, #12]
 8015970:	697b      	ldr	r3, [r7, #20]
 8015972:	429a      	cmp	r2, r3
 8015974:	d102      	bne.n	801597c <udp_bind+0x4c>
      rebind = 1;
 8015976:	2301      	movs	r3, #1
 8015978:	74fb      	strb	r3, [r7, #19]
      break;
 801597a:	e005      	b.n	8015988 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801597c:	697b      	ldr	r3, [r7, #20]
 801597e:	68db      	ldr	r3, [r3, #12]
 8015980:	617b      	str	r3, [r7, #20]
 8015982:	697b      	ldr	r3, [r7, #20]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d1f2      	bne.n	801596e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015988:	88fb      	ldrh	r3, [r7, #6]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d109      	bne.n	80159a2 <udp_bind+0x72>
    port = udp_new_port();
 801598e:	f7ff fc35 	bl	80151fc <udp_new_port>
 8015992:	4603      	mov	r3, r0
 8015994:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015996:	88fb      	ldrh	r3, [r7, #6]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d12c      	bne.n	80159f6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801599c:	f06f 0307 	mvn.w	r3, #7
 80159a0:	e040      	b.n	8015a24 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80159a2:	4b26      	ldr	r3, [pc, #152]	; (8015a3c <udp_bind+0x10c>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	617b      	str	r3, [r7, #20]
 80159a8:	e022      	b.n	80159f0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80159aa:	68fa      	ldr	r2, [r7, #12]
 80159ac:	697b      	ldr	r3, [r7, #20]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d01b      	beq.n	80159ea <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	8a5b      	ldrh	r3, [r3, #18]
 80159b6:	88fa      	ldrh	r2, [r7, #6]
 80159b8:	429a      	cmp	r2, r3
 80159ba:	d116      	bne.n	80159ea <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	681a      	ldr	r2, [r3, #0]
 80159c0:	68bb      	ldr	r3, [r7, #8]
 80159c2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80159c4:	429a      	cmp	r2, r3
 80159c6:	d00d      	beq.n	80159e4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d00a      	beq.n	80159e4 <udp_bind+0xb4>
 80159ce:	68bb      	ldr	r3, [r7, #8]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d006      	beq.n	80159e4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80159d6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80159d8:	2b00      	cmp	r3, #0
 80159da:	d003      	beq.n	80159e4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80159dc:	697b      	ldr	r3, [r7, #20]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d102      	bne.n	80159ea <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80159e4:	f06f 0307 	mvn.w	r3, #7
 80159e8:	e01c      	b.n	8015a24 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80159ea:	697b      	ldr	r3, [r7, #20]
 80159ec:	68db      	ldr	r3, [r3, #12]
 80159ee:	617b      	str	r3, [r7, #20]
 80159f0:	697b      	ldr	r3, [r7, #20]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d1d9      	bne.n	80159aa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80159f6:	68bb      	ldr	r3, [r7, #8]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d002      	beq.n	8015a02 <udp_bind+0xd2>
 80159fc:	68bb      	ldr	r3, [r7, #8]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	e000      	b.n	8015a04 <udp_bind+0xd4>
 8015a02:	2300      	movs	r3, #0
 8015a04:	68fa      	ldr	r2, [r7, #12]
 8015a06:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	88fa      	ldrh	r2, [r7, #6]
 8015a0c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015a0e:	7cfb      	ldrb	r3, [r7, #19]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d106      	bne.n	8015a22 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015a14:	4b09      	ldr	r3, [pc, #36]	; (8015a3c <udp_bind+0x10c>)
 8015a16:	681a      	ldr	r2, [r3, #0]
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8015a1c:	4a07      	ldr	r2, [pc, #28]	; (8015a3c <udp_bind+0x10c>)
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015a22:	2300      	movs	r3, #0
}
 8015a24:	4618      	mov	r0, r3
 8015a26:	3718      	adds	r7, #24
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bd80      	pop	{r7, pc}
 8015a2c:	0801d19c 	.word	0x0801d19c
 8015a30:	0801c5c0 	.word	0x0801c5c0
 8015a34:	0801c888 	.word	0x0801c888
 8015a38:	0801c614 	.word	0x0801c614
 8015a3c:	2000bda0 	.word	0x2000bda0

08015a40 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b084      	sub	sp, #16
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	60f8      	str	r0, [r7, #12]
 8015a48:	60b9      	str	r1, [r7, #8]
 8015a4a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d107      	bne.n	8015a62 <udp_recv+0x22>
 8015a52:	4b08      	ldr	r3, [pc, #32]	; (8015a74 <udp_recv+0x34>)
 8015a54:	f240 428a 	movw	r2, #1162	; 0x48a
 8015a58:	4907      	ldr	r1, [pc, #28]	; (8015a78 <udp_recv+0x38>)
 8015a5a:	4808      	ldr	r0, [pc, #32]	; (8015a7c <udp_recv+0x3c>)
 8015a5c:	f002 fe16 	bl	801868c <iprintf>
 8015a60:	e005      	b.n	8015a6e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	68ba      	ldr	r2, [r7, #8]
 8015a66:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	687a      	ldr	r2, [r7, #4]
 8015a6c:	61da      	str	r2, [r3, #28]
}
 8015a6e:	3710      	adds	r7, #16
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	0801c5c0 	.word	0x0801c5c0
 8015a78:	0801c8f4 	.word	0x0801c8f4
 8015a7c:	0801c614 	.word	0x0801c614

08015a80 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b084      	sub	sp, #16
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d107      	bne.n	8015a9e <udp_remove+0x1e>
 8015a8e:	4b19      	ldr	r3, [pc, #100]	; (8015af4 <udp_remove+0x74>)
 8015a90:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015a94:	4918      	ldr	r1, [pc, #96]	; (8015af8 <udp_remove+0x78>)
 8015a96:	4819      	ldr	r0, [pc, #100]	; (8015afc <udp_remove+0x7c>)
 8015a98:	f002 fdf8 	bl	801868c <iprintf>
 8015a9c:	e026      	b.n	8015aec <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8015a9e:	4b18      	ldr	r3, [pc, #96]	; (8015b00 <udp_remove+0x80>)
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	687a      	ldr	r2, [r7, #4]
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d105      	bne.n	8015ab4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015aa8:	4b15      	ldr	r3, [pc, #84]	; (8015b00 <udp_remove+0x80>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	68db      	ldr	r3, [r3, #12]
 8015aae:	4a14      	ldr	r2, [pc, #80]	; (8015b00 <udp_remove+0x80>)
 8015ab0:	6013      	str	r3, [r2, #0]
 8015ab2:	e017      	b.n	8015ae4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015ab4:	4b12      	ldr	r3, [pc, #72]	; (8015b00 <udp_remove+0x80>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	60fb      	str	r3, [r7, #12]
 8015aba:	e010      	b.n	8015ade <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	68db      	ldr	r3, [r3, #12]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d009      	beq.n	8015ad8 <udp_remove+0x58>
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	68db      	ldr	r3, [r3, #12]
 8015ac8:	687a      	ldr	r2, [r7, #4]
 8015aca:	429a      	cmp	r2, r3
 8015acc:	d104      	bne.n	8015ad8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	68da      	ldr	r2, [r3, #12]
 8015ad2:	68fb      	ldr	r3, [r7, #12]
 8015ad4:	60da      	str	r2, [r3, #12]
        break;
 8015ad6:	e005      	b.n	8015ae4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	68db      	ldr	r3, [r3, #12]
 8015adc:	60fb      	str	r3, [r7, #12]
 8015ade:	68fb      	ldr	r3, [r7, #12]
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d1eb      	bne.n	8015abc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015ae4:	6879      	ldr	r1, [r7, #4]
 8015ae6:	2000      	movs	r0, #0
 8015ae8:	f7f7 fea0 	bl	800d82c <memp_free>
}
 8015aec:	3710      	adds	r7, #16
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}
 8015af2:	bf00      	nop
 8015af4:	0801c5c0 	.word	0x0801c5c0
 8015af8:	0801c90c 	.word	0x0801c90c
 8015afc:	0801c614 	.word	0x0801c614
 8015b00:	2000bda0 	.word	0x2000bda0

08015b04 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b082      	sub	sp, #8
 8015b08:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015b0a:	2000      	movs	r0, #0
 8015b0c:	f7f7 fe3c 	bl	800d788 <memp_malloc>
 8015b10:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d007      	beq.n	8015b28 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015b18:	2220      	movs	r2, #32
 8015b1a:	2100      	movs	r1, #0
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f002 fd03 	bl	8018528 <memset>
    pcb->ttl = UDP_TTL;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	22ff      	movs	r2, #255	; 0xff
 8015b26:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015b28:	687b      	ldr	r3, [r7, #4]
}
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	3708      	adds	r7, #8
 8015b2e:	46bd      	mov	sp, r7
 8015b30:	bd80      	pop	{r7, pc}

08015b32 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015b32:	b580      	push	{r7, lr}
 8015b34:	b084      	sub	sp, #16
 8015b36:	af00      	add	r7, sp, #0
 8015b38:	4603      	mov	r3, r0
 8015b3a:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015b3c:	f7ff ffe2 	bl	8015b04 <udp_new>
 8015b40:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015b42:	68fb      	ldr	r3, [r7, #12]
}
 8015b44:	4618      	mov	r0, r3
 8015b46:	3710      	adds	r7, #16
 8015b48:	46bd      	mov	sp, r7
 8015b4a:	bd80      	pop	{r7, pc}

08015b4c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015b4c:	b480      	push	{r7}
 8015b4e:	b085      	sub	sp, #20
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	6078      	str	r0, [r7, #4]
 8015b54:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d01e      	beq.n	8015b9a <udp_netif_ip_addr_changed+0x4e>
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	681b      	ldr	r3, [r3, #0]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d01a      	beq.n	8015b9a <udp_netif_ip_addr_changed+0x4e>
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d017      	beq.n	8015b9a <udp_netif_ip_addr_changed+0x4e>
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d013      	beq.n	8015b9a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015b72:	4b0d      	ldr	r3, [pc, #52]	; (8015ba8 <udp_netif_ip_addr_changed+0x5c>)
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	60fb      	str	r3, [r7, #12]
 8015b78:	e00c      	b.n	8015b94 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	681a      	ldr	r2, [r3, #0]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d103      	bne.n	8015b8e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015b86:	683b      	ldr	r3, [r7, #0]
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015b8e:	68fb      	ldr	r3, [r7, #12]
 8015b90:	68db      	ldr	r3, [r3, #12]
 8015b92:	60fb      	str	r3, [r7, #12]
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d1ef      	bne.n	8015b7a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015b9a:	bf00      	nop
 8015b9c:	3714      	adds	r7, #20
 8015b9e:	46bd      	mov	sp, r7
 8015ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba4:	4770      	bx	lr
 8015ba6:	bf00      	nop
 8015ba8:	2000bda0 	.word	0x2000bda0

08015bac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b082      	sub	sp, #8
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015bb4:	4915      	ldr	r1, [pc, #84]	; (8015c0c <etharp_free_entry+0x60>)
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	4613      	mov	r3, r2
 8015bba:	005b      	lsls	r3, r3, #1
 8015bbc:	4413      	add	r3, r2
 8015bbe:	00db      	lsls	r3, r3, #3
 8015bc0:	440b      	add	r3, r1
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d013      	beq.n	8015bf0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015bc8:	4910      	ldr	r1, [pc, #64]	; (8015c0c <etharp_free_entry+0x60>)
 8015bca:	687a      	ldr	r2, [r7, #4]
 8015bcc:	4613      	mov	r3, r2
 8015bce:	005b      	lsls	r3, r3, #1
 8015bd0:	4413      	add	r3, r2
 8015bd2:	00db      	lsls	r3, r3, #3
 8015bd4:	440b      	add	r3, r1
 8015bd6:	681b      	ldr	r3, [r3, #0]
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7f8 fcfd 	bl	800e5d8 <pbuf_free>
    arp_table[i].q = NULL;
 8015bde:	490b      	ldr	r1, [pc, #44]	; (8015c0c <etharp_free_entry+0x60>)
 8015be0:	687a      	ldr	r2, [r7, #4]
 8015be2:	4613      	mov	r3, r2
 8015be4:	005b      	lsls	r3, r3, #1
 8015be6:	4413      	add	r3, r2
 8015be8:	00db      	lsls	r3, r3, #3
 8015bea:	440b      	add	r3, r1
 8015bec:	2200      	movs	r2, #0
 8015bee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015bf0:	4906      	ldr	r1, [pc, #24]	; (8015c0c <etharp_free_entry+0x60>)
 8015bf2:	687a      	ldr	r2, [r7, #4]
 8015bf4:	4613      	mov	r3, r2
 8015bf6:	005b      	lsls	r3, r3, #1
 8015bf8:	4413      	add	r3, r2
 8015bfa:	00db      	lsls	r3, r3, #3
 8015bfc:	440b      	add	r3, r1
 8015bfe:	3314      	adds	r3, #20
 8015c00:	2200      	movs	r2, #0
 8015c02:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015c04:	bf00      	nop
 8015c06:	3708      	adds	r7, #8
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	bd80      	pop	{r7, pc}
 8015c0c:	20004f1c 	.word	0x20004f1c

08015c10 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b082      	sub	sp, #8
 8015c14:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015c16:	2300      	movs	r3, #0
 8015c18:	607b      	str	r3, [r7, #4]
 8015c1a:	e096      	b.n	8015d4a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015c1c:	494f      	ldr	r1, [pc, #316]	; (8015d5c <etharp_tmr+0x14c>)
 8015c1e:	687a      	ldr	r2, [r7, #4]
 8015c20:	4613      	mov	r3, r2
 8015c22:	005b      	lsls	r3, r3, #1
 8015c24:	4413      	add	r3, r2
 8015c26:	00db      	lsls	r3, r3, #3
 8015c28:	440b      	add	r3, r1
 8015c2a:	3314      	adds	r3, #20
 8015c2c:	781b      	ldrb	r3, [r3, #0]
 8015c2e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015c30:	78fb      	ldrb	r3, [r7, #3]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	f000 8086 	beq.w	8015d44 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015c38:	4948      	ldr	r1, [pc, #288]	; (8015d5c <etharp_tmr+0x14c>)
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	4613      	mov	r3, r2
 8015c3e:	005b      	lsls	r3, r3, #1
 8015c40:	4413      	add	r3, r2
 8015c42:	00db      	lsls	r3, r3, #3
 8015c44:	440b      	add	r3, r1
 8015c46:	3312      	adds	r3, #18
 8015c48:	881b      	ldrh	r3, [r3, #0]
 8015c4a:	3301      	adds	r3, #1
 8015c4c:	b298      	uxth	r0, r3
 8015c4e:	4943      	ldr	r1, [pc, #268]	; (8015d5c <etharp_tmr+0x14c>)
 8015c50:	687a      	ldr	r2, [r7, #4]
 8015c52:	4613      	mov	r3, r2
 8015c54:	005b      	lsls	r3, r3, #1
 8015c56:	4413      	add	r3, r2
 8015c58:	00db      	lsls	r3, r3, #3
 8015c5a:	440b      	add	r3, r1
 8015c5c:	3312      	adds	r3, #18
 8015c5e:	4602      	mov	r2, r0
 8015c60:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015c62:	493e      	ldr	r1, [pc, #248]	; (8015d5c <etharp_tmr+0x14c>)
 8015c64:	687a      	ldr	r2, [r7, #4]
 8015c66:	4613      	mov	r3, r2
 8015c68:	005b      	lsls	r3, r3, #1
 8015c6a:	4413      	add	r3, r2
 8015c6c:	00db      	lsls	r3, r3, #3
 8015c6e:	440b      	add	r3, r1
 8015c70:	3312      	adds	r3, #18
 8015c72:	881b      	ldrh	r3, [r3, #0]
 8015c74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015c78:	d215      	bcs.n	8015ca6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015c7a:	4938      	ldr	r1, [pc, #224]	; (8015d5c <etharp_tmr+0x14c>)
 8015c7c:	687a      	ldr	r2, [r7, #4]
 8015c7e:	4613      	mov	r3, r2
 8015c80:	005b      	lsls	r3, r3, #1
 8015c82:	4413      	add	r3, r2
 8015c84:	00db      	lsls	r3, r3, #3
 8015c86:	440b      	add	r3, r1
 8015c88:	3314      	adds	r3, #20
 8015c8a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015c8c:	2b01      	cmp	r3, #1
 8015c8e:	d10e      	bne.n	8015cae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015c90:	4932      	ldr	r1, [pc, #200]	; (8015d5c <etharp_tmr+0x14c>)
 8015c92:	687a      	ldr	r2, [r7, #4]
 8015c94:	4613      	mov	r3, r2
 8015c96:	005b      	lsls	r3, r3, #1
 8015c98:	4413      	add	r3, r2
 8015c9a:	00db      	lsls	r3, r3, #3
 8015c9c:	440b      	add	r3, r1
 8015c9e:	3312      	adds	r3, #18
 8015ca0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015ca2:	2b04      	cmp	r3, #4
 8015ca4:	d903      	bls.n	8015cae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015ca6:	6878      	ldr	r0, [r7, #4]
 8015ca8:	f7ff ff80 	bl	8015bac <etharp_free_entry>
 8015cac:	e04a      	b.n	8015d44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015cae:	492b      	ldr	r1, [pc, #172]	; (8015d5c <etharp_tmr+0x14c>)
 8015cb0:	687a      	ldr	r2, [r7, #4]
 8015cb2:	4613      	mov	r3, r2
 8015cb4:	005b      	lsls	r3, r3, #1
 8015cb6:	4413      	add	r3, r2
 8015cb8:	00db      	lsls	r3, r3, #3
 8015cba:	440b      	add	r3, r1
 8015cbc:	3314      	adds	r3, #20
 8015cbe:	781b      	ldrb	r3, [r3, #0]
 8015cc0:	2b03      	cmp	r3, #3
 8015cc2:	d10a      	bne.n	8015cda <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015cc4:	4925      	ldr	r1, [pc, #148]	; (8015d5c <etharp_tmr+0x14c>)
 8015cc6:	687a      	ldr	r2, [r7, #4]
 8015cc8:	4613      	mov	r3, r2
 8015cca:	005b      	lsls	r3, r3, #1
 8015ccc:	4413      	add	r3, r2
 8015cce:	00db      	lsls	r3, r3, #3
 8015cd0:	440b      	add	r3, r1
 8015cd2:	3314      	adds	r3, #20
 8015cd4:	2204      	movs	r2, #4
 8015cd6:	701a      	strb	r2, [r3, #0]
 8015cd8:	e034      	b.n	8015d44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015cda:	4920      	ldr	r1, [pc, #128]	; (8015d5c <etharp_tmr+0x14c>)
 8015cdc:	687a      	ldr	r2, [r7, #4]
 8015cde:	4613      	mov	r3, r2
 8015ce0:	005b      	lsls	r3, r3, #1
 8015ce2:	4413      	add	r3, r2
 8015ce4:	00db      	lsls	r3, r3, #3
 8015ce6:	440b      	add	r3, r1
 8015ce8:	3314      	adds	r3, #20
 8015cea:	781b      	ldrb	r3, [r3, #0]
 8015cec:	2b04      	cmp	r3, #4
 8015cee:	d10a      	bne.n	8015d06 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015cf0:	491a      	ldr	r1, [pc, #104]	; (8015d5c <etharp_tmr+0x14c>)
 8015cf2:	687a      	ldr	r2, [r7, #4]
 8015cf4:	4613      	mov	r3, r2
 8015cf6:	005b      	lsls	r3, r3, #1
 8015cf8:	4413      	add	r3, r2
 8015cfa:	00db      	lsls	r3, r3, #3
 8015cfc:	440b      	add	r3, r1
 8015cfe:	3314      	adds	r3, #20
 8015d00:	2202      	movs	r2, #2
 8015d02:	701a      	strb	r2, [r3, #0]
 8015d04:	e01e      	b.n	8015d44 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015d06:	4915      	ldr	r1, [pc, #84]	; (8015d5c <etharp_tmr+0x14c>)
 8015d08:	687a      	ldr	r2, [r7, #4]
 8015d0a:	4613      	mov	r3, r2
 8015d0c:	005b      	lsls	r3, r3, #1
 8015d0e:	4413      	add	r3, r2
 8015d10:	00db      	lsls	r3, r3, #3
 8015d12:	440b      	add	r3, r1
 8015d14:	3314      	adds	r3, #20
 8015d16:	781b      	ldrb	r3, [r3, #0]
 8015d18:	2b01      	cmp	r3, #1
 8015d1a:	d113      	bne.n	8015d44 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015d1c:	490f      	ldr	r1, [pc, #60]	; (8015d5c <etharp_tmr+0x14c>)
 8015d1e:	687a      	ldr	r2, [r7, #4]
 8015d20:	4613      	mov	r3, r2
 8015d22:	005b      	lsls	r3, r3, #1
 8015d24:	4413      	add	r3, r2
 8015d26:	00db      	lsls	r3, r3, #3
 8015d28:	440b      	add	r3, r1
 8015d2a:	3308      	adds	r3, #8
 8015d2c:	6818      	ldr	r0, [r3, #0]
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	4613      	mov	r3, r2
 8015d32:	005b      	lsls	r3, r3, #1
 8015d34:	4413      	add	r3, r2
 8015d36:	00db      	lsls	r3, r3, #3
 8015d38:	4a08      	ldr	r2, [pc, #32]	; (8015d5c <etharp_tmr+0x14c>)
 8015d3a:	4413      	add	r3, r2
 8015d3c:	3304      	adds	r3, #4
 8015d3e:	4619      	mov	r1, r3
 8015d40:	f000 fe6e 	bl	8016a20 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	3301      	adds	r3, #1
 8015d48:	607b      	str	r3, [r7, #4]
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	2b09      	cmp	r3, #9
 8015d4e:	f77f af65 	ble.w	8015c1c <etharp_tmr+0xc>
      }
    }
  }
}
 8015d52:	bf00      	nop
 8015d54:	bf00      	nop
 8015d56:	3708      	adds	r7, #8
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}
 8015d5c:	20004f1c 	.word	0x20004f1c

08015d60 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015d60:	b580      	push	{r7, lr}
 8015d62:	b08a      	sub	sp, #40	; 0x28
 8015d64:	af00      	add	r7, sp, #0
 8015d66:	60f8      	str	r0, [r7, #12]
 8015d68:	460b      	mov	r3, r1
 8015d6a:	607a      	str	r2, [r7, #4]
 8015d6c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015d6e:	230a      	movs	r3, #10
 8015d70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015d72:	230a      	movs	r3, #10
 8015d74:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015d76:	230a      	movs	r3, #10
 8015d78:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015d7e:	230a      	movs	r3, #10
 8015d80:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015d82:	2300      	movs	r3, #0
 8015d84:	83bb      	strh	r3, [r7, #28]
 8015d86:	2300      	movs	r3, #0
 8015d88:	837b      	strh	r3, [r7, #26]
 8015d8a:	2300      	movs	r3, #0
 8015d8c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d8e:	2300      	movs	r3, #0
 8015d90:	843b      	strh	r3, [r7, #32]
 8015d92:	e0ae      	b.n	8015ef2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015d94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d98:	49a6      	ldr	r1, [pc, #664]	; (8016034 <etharp_find_entry+0x2d4>)
 8015d9a:	4613      	mov	r3, r2
 8015d9c:	005b      	lsls	r3, r3, #1
 8015d9e:	4413      	add	r3, r2
 8015da0:	00db      	lsls	r3, r3, #3
 8015da2:	440b      	add	r3, r1
 8015da4:	3314      	adds	r3, #20
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015daa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015dae:	2b0a      	cmp	r3, #10
 8015db0:	d105      	bne.n	8015dbe <etharp_find_entry+0x5e>
 8015db2:	7dfb      	ldrb	r3, [r7, #23]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d102      	bne.n	8015dbe <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015db8:	8c3b      	ldrh	r3, [r7, #32]
 8015dba:	847b      	strh	r3, [r7, #34]	; 0x22
 8015dbc:	e095      	b.n	8015eea <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015dbe:	7dfb      	ldrb	r3, [r7, #23]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	f000 8092 	beq.w	8015eea <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015dc6:	7dfb      	ldrb	r3, [r7, #23]
 8015dc8:	2b01      	cmp	r3, #1
 8015dca:	d009      	beq.n	8015de0 <etharp_find_entry+0x80>
 8015dcc:	7dfb      	ldrb	r3, [r7, #23]
 8015dce:	2b01      	cmp	r3, #1
 8015dd0:	d806      	bhi.n	8015de0 <etharp_find_entry+0x80>
 8015dd2:	4b99      	ldr	r3, [pc, #612]	; (8016038 <etharp_find_entry+0x2d8>)
 8015dd4:	f240 1223 	movw	r2, #291	; 0x123
 8015dd8:	4998      	ldr	r1, [pc, #608]	; (801603c <etharp_find_entry+0x2dc>)
 8015dda:	4899      	ldr	r0, [pc, #612]	; (8016040 <etharp_find_entry+0x2e0>)
 8015ddc:	f002 fc56 	bl	801868c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d020      	beq.n	8015e28 <etharp_find_entry+0xc8>
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	6819      	ldr	r1, [r3, #0]
 8015dea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015dee:	4891      	ldr	r0, [pc, #580]	; (8016034 <etharp_find_entry+0x2d4>)
 8015df0:	4613      	mov	r3, r2
 8015df2:	005b      	lsls	r3, r3, #1
 8015df4:	4413      	add	r3, r2
 8015df6:	00db      	lsls	r3, r3, #3
 8015df8:	4403      	add	r3, r0
 8015dfa:	3304      	adds	r3, #4
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	4299      	cmp	r1, r3
 8015e00:	d112      	bne.n	8015e28 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d00c      	beq.n	8015e22 <etharp_find_entry+0xc2>
 8015e08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e0c:	4989      	ldr	r1, [pc, #548]	; (8016034 <etharp_find_entry+0x2d4>)
 8015e0e:	4613      	mov	r3, r2
 8015e10:	005b      	lsls	r3, r3, #1
 8015e12:	4413      	add	r3, r2
 8015e14:	00db      	lsls	r3, r3, #3
 8015e16:	440b      	add	r3, r1
 8015e18:	3308      	adds	r3, #8
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	687a      	ldr	r2, [r7, #4]
 8015e1e:	429a      	cmp	r2, r3
 8015e20:	d102      	bne.n	8015e28 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015e22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015e26:	e100      	b.n	801602a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015e28:	7dfb      	ldrb	r3, [r7, #23]
 8015e2a:	2b01      	cmp	r3, #1
 8015e2c:	d140      	bne.n	8015eb0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015e2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e32:	4980      	ldr	r1, [pc, #512]	; (8016034 <etharp_find_entry+0x2d4>)
 8015e34:	4613      	mov	r3, r2
 8015e36:	005b      	lsls	r3, r3, #1
 8015e38:	4413      	add	r3, r2
 8015e3a:	00db      	lsls	r3, r3, #3
 8015e3c:	440b      	add	r3, r1
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d01a      	beq.n	8015e7a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015e44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e48:	497a      	ldr	r1, [pc, #488]	; (8016034 <etharp_find_entry+0x2d4>)
 8015e4a:	4613      	mov	r3, r2
 8015e4c:	005b      	lsls	r3, r3, #1
 8015e4e:	4413      	add	r3, r2
 8015e50:	00db      	lsls	r3, r3, #3
 8015e52:	440b      	add	r3, r1
 8015e54:	3312      	adds	r3, #18
 8015e56:	881b      	ldrh	r3, [r3, #0]
 8015e58:	8bba      	ldrh	r2, [r7, #28]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d845      	bhi.n	8015eea <etharp_find_entry+0x18a>
            old_queue = i;
 8015e5e:	8c3b      	ldrh	r3, [r7, #32]
 8015e60:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015e62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e66:	4973      	ldr	r1, [pc, #460]	; (8016034 <etharp_find_entry+0x2d4>)
 8015e68:	4613      	mov	r3, r2
 8015e6a:	005b      	lsls	r3, r3, #1
 8015e6c:	4413      	add	r3, r2
 8015e6e:	00db      	lsls	r3, r3, #3
 8015e70:	440b      	add	r3, r1
 8015e72:	3312      	adds	r3, #18
 8015e74:	881b      	ldrh	r3, [r3, #0]
 8015e76:	83bb      	strh	r3, [r7, #28]
 8015e78:	e037      	b.n	8015eea <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015e7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e7e:	496d      	ldr	r1, [pc, #436]	; (8016034 <etharp_find_entry+0x2d4>)
 8015e80:	4613      	mov	r3, r2
 8015e82:	005b      	lsls	r3, r3, #1
 8015e84:	4413      	add	r3, r2
 8015e86:	00db      	lsls	r3, r3, #3
 8015e88:	440b      	add	r3, r1
 8015e8a:	3312      	adds	r3, #18
 8015e8c:	881b      	ldrh	r3, [r3, #0]
 8015e8e:	8b7a      	ldrh	r2, [r7, #26]
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d82a      	bhi.n	8015eea <etharp_find_entry+0x18a>
            old_pending = i;
 8015e94:	8c3b      	ldrh	r3, [r7, #32]
 8015e96:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015e98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e9c:	4965      	ldr	r1, [pc, #404]	; (8016034 <etharp_find_entry+0x2d4>)
 8015e9e:	4613      	mov	r3, r2
 8015ea0:	005b      	lsls	r3, r3, #1
 8015ea2:	4413      	add	r3, r2
 8015ea4:	00db      	lsls	r3, r3, #3
 8015ea6:	440b      	add	r3, r1
 8015ea8:	3312      	adds	r3, #18
 8015eaa:	881b      	ldrh	r3, [r3, #0]
 8015eac:	837b      	strh	r3, [r7, #26]
 8015eae:	e01c      	b.n	8015eea <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015eb0:	7dfb      	ldrb	r3, [r7, #23]
 8015eb2:	2b01      	cmp	r3, #1
 8015eb4:	d919      	bls.n	8015eea <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015eb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015eba:	495e      	ldr	r1, [pc, #376]	; (8016034 <etharp_find_entry+0x2d4>)
 8015ebc:	4613      	mov	r3, r2
 8015ebe:	005b      	lsls	r3, r3, #1
 8015ec0:	4413      	add	r3, r2
 8015ec2:	00db      	lsls	r3, r3, #3
 8015ec4:	440b      	add	r3, r1
 8015ec6:	3312      	adds	r3, #18
 8015ec8:	881b      	ldrh	r3, [r3, #0]
 8015eca:	8b3a      	ldrh	r2, [r7, #24]
 8015ecc:	429a      	cmp	r2, r3
 8015ece:	d80c      	bhi.n	8015eea <etharp_find_entry+0x18a>
            old_stable = i;
 8015ed0:	8c3b      	ldrh	r3, [r7, #32]
 8015ed2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015ed4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ed8:	4956      	ldr	r1, [pc, #344]	; (8016034 <etharp_find_entry+0x2d4>)
 8015eda:	4613      	mov	r3, r2
 8015edc:	005b      	lsls	r3, r3, #1
 8015ede:	4413      	add	r3, r2
 8015ee0:	00db      	lsls	r3, r3, #3
 8015ee2:	440b      	add	r3, r1
 8015ee4:	3312      	adds	r3, #18
 8015ee6:	881b      	ldrh	r3, [r3, #0]
 8015ee8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015eea:	8c3b      	ldrh	r3, [r7, #32]
 8015eec:	3301      	adds	r3, #1
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	843b      	strh	r3, [r7, #32]
 8015ef2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015ef6:	2b09      	cmp	r3, #9
 8015ef8:	f77f af4c 	ble.w	8015d94 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015efc:	7afb      	ldrb	r3, [r7, #11]
 8015efe:	f003 0302 	and.w	r3, r3, #2
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d108      	bne.n	8015f18 <etharp_find_entry+0x1b8>
 8015f06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015f0a:	2b0a      	cmp	r3, #10
 8015f0c:	d107      	bne.n	8015f1e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015f0e:	7afb      	ldrb	r3, [r7, #11]
 8015f10:	f003 0301 	and.w	r3, r3, #1
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d102      	bne.n	8015f1e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015f18:	f04f 33ff 	mov.w	r3, #4294967295
 8015f1c:	e085      	b.n	801602a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015f1e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015f22:	2b09      	cmp	r3, #9
 8015f24:	dc02      	bgt.n	8015f2c <etharp_find_entry+0x1cc>
    i = empty;
 8015f26:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015f28:	843b      	strh	r3, [r7, #32]
 8015f2a:	e039      	b.n	8015fa0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015f2c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015f30:	2b09      	cmp	r3, #9
 8015f32:	dc14      	bgt.n	8015f5e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f36:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015f38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015f3c:	493d      	ldr	r1, [pc, #244]	; (8016034 <etharp_find_entry+0x2d4>)
 8015f3e:	4613      	mov	r3, r2
 8015f40:	005b      	lsls	r3, r3, #1
 8015f42:	4413      	add	r3, r2
 8015f44:	00db      	lsls	r3, r3, #3
 8015f46:	440b      	add	r3, r1
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d018      	beq.n	8015f80 <etharp_find_entry+0x220>
 8015f4e:	4b3a      	ldr	r3, [pc, #232]	; (8016038 <etharp_find_entry+0x2d8>)
 8015f50:	f240 126d 	movw	r2, #365	; 0x16d
 8015f54:	493b      	ldr	r1, [pc, #236]	; (8016044 <etharp_find_entry+0x2e4>)
 8015f56:	483a      	ldr	r0, [pc, #232]	; (8016040 <etharp_find_entry+0x2e0>)
 8015f58:	f002 fb98 	bl	801868c <iprintf>
 8015f5c:	e010      	b.n	8015f80 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015f5e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015f62:	2b09      	cmp	r3, #9
 8015f64:	dc02      	bgt.n	8015f6c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015f66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015f68:	843b      	strh	r3, [r7, #32]
 8015f6a:	e009      	b.n	8015f80 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015f6c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015f70:	2b09      	cmp	r3, #9
 8015f72:	dc02      	bgt.n	8015f7a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015f74:	8bfb      	ldrh	r3, [r7, #30]
 8015f76:	843b      	strh	r3, [r7, #32]
 8015f78:	e002      	b.n	8015f80 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f7e:	e054      	b.n	801602a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015f80:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015f84:	2b09      	cmp	r3, #9
 8015f86:	dd06      	ble.n	8015f96 <etharp_find_entry+0x236>
 8015f88:	4b2b      	ldr	r3, [pc, #172]	; (8016038 <etharp_find_entry+0x2d8>)
 8015f8a:	f240 127f 	movw	r2, #383	; 0x17f
 8015f8e:	492e      	ldr	r1, [pc, #184]	; (8016048 <etharp_find_entry+0x2e8>)
 8015f90:	482b      	ldr	r0, [pc, #172]	; (8016040 <etharp_find_entry+0x2e0>)
 8015f92:	f002 fb7b 	bl	801868c <iprintf>
    etharp_free_entry(i);
 8015f96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	f7ff fe06 	bl	8015bac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015fa0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015fa4:	2b09      	cmp	r3, #9
 8015fa6:	dd06      	ble.n	8015fb6 <etharp_find_entry+0x256>
 8015fa8:	4b23      	ldr	r3, [pc, #140]	; (8016038 <etharp_find_entry+0x2d8>)
 8015faa:	f240 1283 	movw	r2, #387	; 0x183
 8015fae:	4926      	ldr	r1, [pc, #152]	; (8016048 <etharp_find_entry+0x2e8>)
 8015fb0:	4823      	ldr	r0, [pc, #140]	; (8016040 <etharp_find_entry+0x2e0>)
 8015fb2:	f002 fb6b 	bl	801868c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015fb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015fba:	491e      	ldr	r1, [pc, #120]	; (8016034 <etharp_find_entry+0x2d4>)
 8015fbc:	4613      	mov	r3, r2
 8015fbe:	005b      	lsls	r3, r3, #1
 8015fc0:	4413      	add	r3, r2
 8015fc2:	00db      	lsls	r3, r3, #3
 8015fc4:	440b      	add	r3, r1
 8015fc6:	3314      	adds	r3, #20
 8015fc8:	781b      	ldrb	r3, [r3, #0]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d006      	beq.n	8015fdc <etharp_find_entry+0x27c>
 8015fce:	4b1a      	ldr	r3, [pc, #104]	; (8016038 <etharp_find_entry+0x2d8>)
 8015fd0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015fd4:	491d      	ldr	r1, [pc, #116]	; (801604c <etharp_find_entry+0x2ec>)
 8015fd6:	481a      	ldr	r0, [pc, #104]	; (8016040 <etharp_find_entry+0x2e0>)
 8015fd8:	f002 fb58 	bl	801868c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d00b      	beq.n	8015ffa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015fe2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	6819      	ldr	r1, [r3, #0]
 8015fea:	4812      	ldr	r0, [pc, #72]	; (8016034 <etharp_find_entry+0x2d4>)
 8015fec:	4613      	mov	r3, r2
 8015fee:	005b      	lsls	r3, r3, #1
 8015ff0:	4413      	add	r3, r2
 8015ff2:	00db      	lsls	r3, r3, #3
 8015ff4:	4403      	add	r3, r0
 8015ff6:	3304      	adds	r3, #4
 8015ff8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015ffa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015ffe:	490d      	ldr	r1, [pc, #52]	; (8016034 <etharp_find_entry+0x2d4>)
 8016000:	4613      	mov	r3, r2
 8016002:	005b      	lsls	r3, r3, #1
 8016004:	4413      	add	r3, r2
 8016006:	00db      	lsls	r3, r3, #3
 8016008:	440b      	add	r3, r1
 801600a:	3312      	adds	r3, #18
 801600c:	2200      	movs	r2, #0
 801600e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016010:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016014:	4907      	ldr	r1, [pc, #28]	; (8016034 <etharp_find_entry+0x2d4>)
 8016016:	4613      	mov	r3, r2
 8016018:	005b      	lsls	r3, r3, #1
 801601a:	4413      	add	r3, r2
 801601c:	00db      	lsls	r3, r3, #3
 801601e:	440b      	add	r3, r1
 8016020:	3308      	adds	r3, #8
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016026:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801602a:	4618      	mov	r0, r3
 801602c:	3728      	adds	r7, #40	; 0x28
 801602e:	46bd      	mov	sp, r7
 8016030:	bd80      	pop	{r7, pc}
 8016032:	bf00      	nop
 8016034:	20004f1c 	.word	0x20004f1c
 8016038:	0801c924 	.word	0x0801c924
 801603c:	0801c95c 	.word	0x0801c95c
 8016040:	0801c99c 	.word	0x0801c99c
 8016044:	0801c9c4 	.word	0x0801c9c4
 8016048:	0801c9dc 	.word	0x0801c9dc
 801604c:	0801c9f0 	.word	0x0801c9f0

08016050 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b088      	sub	sp, #32
 8016054:	af02      	add	r7, sp, #8
 8016056:	60f8      	str	r0, [r7, #12]
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	607a      	str	r2, [r7, #4]
 801605c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016064:	2b06      	cmp	r3, #6
 8016066:	d006      	beq.n	8016076 <etharp_update_arp_entry+0x26>
 8016068:	4b48      	ldr	r3, [pc, #288]	; (801618c <etharp_update_arp_entry+0x13c>)
 801606a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801606e:	4948      	ldr	r1, [pc, #288]	; (8016190 <etharp_update_arp_entry+0x140>)
 8016070:	4848      	ldr	r0, [pc, #288]	; (8016194 <etharp_update_arp_entry+0x144>)
 8016072:	f002 fb0b 	bl	801868c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d012      	beq.n	80160a2 <etharp_update_arp_entry+0x52>
 801607c:	68bb      	ldr	r3, [r7, #8]
 801607e:	681b      	ldr	r3, [r3, #0]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d00e      	beq.n	80160a2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	68f9      	ldr	r1, [r7, #12]
 801608a:	4618      	mov	r0, r3
 801608c:	f001 f8fe 	bl	801728c <ip4_addr_isbroadcast_u32>
 8016090:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016092:	2b00      	cmp	r3, #0
 8016094:	d105      	bne.n	80160a2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016096:	68bb      	ldr	r3, [r7, #8]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801609e:	2be0      	cmp	r3, #224	; 0xe0
 80160a0:	d102      	bne.n	80160a8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80160a2:	f06f 030f 	mvn.w	r3, #15
 80160a6:	e06c      	b.n	8016182 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80160a8:	78fb      	ldrb	r3, [r7, #3]
 80160aa:	68fa      	ldr	r2, [r7, #12]
 80160ac:	4619      	mov	r1, r3
 80160ae:	68b8      	ldr	r0, [r7, #8]
 80160b0:	f7ff fe56 	bl	8015d60 <etharp_find_entry>
 80160b4:	4603      	mov	r3, r0
 80160b6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80160b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	da02      	bge.n	80160c6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80160c0:	8afb      	ldrh	r3, [r7, #22]
 80160c2:	b25b      	sxtb	r3, r3
 80160c4:	e05d      	b.n	8016182 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80160c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80160ca:	4933      	ldr	r1, [pc, #204]	; (8016198 <etharp_update_arp_entry+0x148>)
 80160cc:	4613      	mov	r3, r2
 80160ce:	005b      	lsls	r3, r3, #1
 80160d0:	4413      	add	r3, r2
 80160d2:	00db      	lsls	r3, r3, #3
 80160d4:	440b      	add	r3, r1
 80160d6:	3314      	adds	r3, #20
 80160d8:	2202      	movs	r2, #2
 80160da:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80160dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80160e0:	492d      	ldr	r1, [pc, #180]	; (8016198 <etharp_update_arp_entry+0x148>)
 80160e2:	4613      	mov	r3, r2
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	4413      	add	r3, r2
 80160e8:	00db      	lsls	r3, r3, #3
 80160ea:	440b      	add	r3, r1
 80160ec:	3308      	adds	r3, #8
 80160ee:	68fa      	ldr	r2, [r7, #12]
 80160f0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80160f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80160f6:	4613      	mov	r3, r2
 80160f8:	005b      	lsls	r3, r3, #1
 80160fa:	4413      	add	r3, r2
 80160fc:	00db      	lsls	r3, r3, #3
 80160fe:	3308      	adds	r3, #8
 8016100:	4a25      	ldr	r2, [pc, #148]	; (8016198 <etharp_update_arp_entry+0x148>)
 8016102:	4413      	add	r3, r2
 8016104:	3304      	adds	r3, #4
 8016106:	2206      	movs	r2, #6
 8016108:	6879      	ldr	r1, [r7, #4]
 801610a:	4618      	mov	r0, r3
 801610c:	f002 f9fe 	bl	801850c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016110:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016114:	4920      	ldr	r1, [pc, #128]	; (8016198 <etharp_update_arp_entry+0x148>)
 8016116:	4613      	mov	r3, r2
 8016118:	005b      	lsls	r3, r3, #1
 801611a:	4413      	add	r3, r2
 801611c:	00db      	lsls	r3, r3, #3
 801611e:	440b      	add	r3, r1
 8016120:	3312      	adds	r3, #18
 8016122:	2200      	movs	r2, #0
 8016124:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016126:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801612a:	491b      	ldr	r1, [pc, #108]	; (8016198 <etharp_update_arp_entry+0x148>)
 801612c:	4613      	mov	r3, r2
 801612e:	005b      	lsls	r3, r3, #1
 8016130:	4413      	add	r3, r2
 8016132:	00db      	lsls	r3, r3, #3
 8016134:	440b      	add	r3, r1
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d021      	beq.n	8016180 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801613c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016140:	4915      	ldr	r1, [pc, #84]	; (8016198 <etharp_update_arp_entry+0x148>)
 8016142:	4613      	mov	r3, r2
 8016144:	005b      	lsls	r3, r3, #1
 8016146:	4413      	add	r3, r2
 8016148:	00db      	lsls	r3, r3, #3
 801614a:	440b      	add	r3, r1
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016150:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016154:	4910      	ldr	r1, [pc, #64]	; (8016198 <etharp_update_arp_entry+0x148>)
 8016156:	4613      	mov	r3, r2
 8016158:	005b      	lsls	r3, r3, #1
 801615a:	4413      	add	r3, r2
 801615c:	00db      	lsls	r3, r3, #3
 801615e:	440b      	add	r3, r1
 8016160:	2200      	movs	r2, #0
 8016162:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801616a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801616e:	9300      	str	r3, [sp, #0]
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	6939      	ldr	r1, [r7, #16]
 8016174:	68f8      	ldr	r0, [r7, #12]
 8016176:	f001 ff91 	bl	801809c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801617a:	6938      	ldr	r0, [r7, #16]
 801617c:	f7f8 fa2c 	bl	800e5d8 <pbuf_free>
  }
  return ERR_OK;
 8016180:	2300      	movs	r3, #0
}
 8016182:	4618      	mov	r0, r3
 8016184:	3718      	adds	r7, #24
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}
 801618a:	bf00      	nop
 801618c:	0801c924 	.word	0x0801c924
 8016190:	0801ca1c 	.word	0x0801ca1c
 8016194:	0801c99c 	.word	0x0801c99c
 8016198:	20004f1c 	.word	0x20004f1c

0801619c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b084      	sub	sp, #16
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80161a4:	2300      	movs	r3, #0
 80161a6:	60fb      	str	r3, [r7, #12]
 80161a8:	e01e      	b.n	80161e8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80161aa:	4913      	ldr	r1, [pc, #76]	; (80161f8 <etharp_cleanup_netif+0x5c>)
 80161ac:	68fa      	ldr	r2, [r7, #12]
 80161ae:	4613      	mov	r3, r2
 80161b0:	005b      	lsls	r3, r3, #1
 80161b2:	4413      	add	r3, r2
 80161b4:	00db      	lsls	r3, r3, #3
 80161b6:	440b      	add	r3, r1
 80161b8:	3314      	adds	r3, #20
 80161ba:	781b      	ldrb	r3, [r3, #0]
 80161bc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80161be:	7afb      	ldrb	r3, [r7, #11]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d00e      	beq.n	80161e2 <etharp_cleanup_netif+0x46>
 80161c4:	490c      	ldr	r1, [pc, #48]	; (80161f8 <etharp_cleanup_netif+0x5c>)
 80161c6:	68fa      	ldr	r2, [r7, #12]
 80161c8:	4613      	mov	r3, r2
 80161ca:	005b      	lsls	r3, r3, #1
 80161cc:	4413      	add	r3, r2
 80161ce:	00db      	lsls	r3, r3, #3
 80161d0:	440b      	add	r3, r1
 80161d2:	3308      	adds	r3, #8
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	687a      	ldr	r2, [r7, #4]
 80161d8:	429a      	cmp	r2, r3
 80161da:	d102      	bne.n	80161e2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80161dc:	68f8      	ldr	r0, [r7, #12]
 80161de:	f7ff fce5 	bl	8015bac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	3301      	adds	r3, #1
 80161e6:	60fb      	str	r3, [r7, #12]
 80161e8:	68fb      	ldr	r3, [r7, #12]
 80161ea:	2b09      	cmp	r3, #9
 80161ec:	dddd      	ble.n	80161aa <etharp_cleanup_netif+0xe>
    }
  }
}
 80161ee:	bf00      	nop
 80161f0:	bf00      	nop
 80161f2:	3710      	adds	r7, #16
 80161f4:	46bd      	mov	sp, r7
 80161f6:	bd80      	pop	{r7, pc}
 80161f8:	20004f1c 	.word	0x20004f1c

080161fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80161fc:	b5b0      	push	{r4, r5, r7, lr}
 80161fe:	b08a      	sub	sp, #40	; 0x28
 8016200:	af04      	add	r7, sp, #16
 8016202:	6078      	str	r0, [r7, #4]
 8016204:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d107      	bne.n	801621c <etharp_input+0x20>
 801620c:	4b3d      	ldr	r3, [pc, #244]	; (8016304 <etharp_input+0x108>)
 801620e:	f240 228a 	movw	r2, #650	; 0x28a
 8016212:	493d      	ldr	r1, [pc, #244]	; (8016308 <etharp_input+0x10c>)
 8016214:	483d      	ldr	r0, [pc, #244]	; (801630c <etharp_input+0x110>)
 8016216:	f002 fa39 	bl	801868c <iprintf>
 801621a:	e06f      	b.n	80162fc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	685b      	ldr	r3, [r3, #4]
 8016220:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016222:	693b      	ldr	r3, [r7, #16]
 8016224:	881b      	ldrh	r3, [r3, #0]
 8016226:	b29b      	uxth	r3, r3
 8016228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801622c:	d10c      	bne.n	8016248 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801622e:	693b      	ldr	r3, [r7, #16]
 8016230:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016232:	2b06      	cmp	r3, #6
 8016234:	d108      	bne.n	8016248 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016236:	693b      	ldr	r3, [r7, #16]
 8016238:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801623a:	2b04      	cmp	r3, #4
 801623c:	d104      	bne.n	8016248 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801623e:	693b      	ldr	r3, [r7, #16]
 8016240:	885b      	ldrh	r3, [r3, #2]
 8016242:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016244:	2b08      	cmp	r3, #8
 8016246:	d003      	beq.n	8016250 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f7f8 f9c5 	bl	800e5d8 <pbuf_free>
    return;
 801624e:	e055      	b.n	80162fc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	330e      	adds	r3, #14
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	3318      	adds	r3, #24
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016260:	683b      	ldr	r3, [r7, #0]
 8016262:	3304      	adds	r3, #4
 8016264:	681b      	ldr	r3, [r3, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d102      	bne.n	8016270 <etharp_input+0x74>
    for_us = 0;
 801626a:	2300      	movs	r3, #0
 801626c:	75fb      	strb	r3, [r7, #23]
 801626e:	e009      	b.n	8016284 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016270:	68ba      	ldr	r2, [r7, #8]
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	3304      	adds	r3, #4
 8016276:	681b      	ldr	r3, [r3, #0]
 8016278:	429a      	cmp	r2, r3
 801627a:	bf0c      	ite	eq
 801627c:	2301      	moveq	r3, #1
 801627e:	2300      	movne	r3, #0
 8016280:	b2db      	uxtb	r3, r3
 8016282:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016284:	693b      	ldr	r3, [r7, #16]
 8016286:	f103 0208 	add.w	r2, r3, #8
 801628a:	7dfb      	ldrb	r3, [r7, #23]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d001      	beq.n	8016294 <etharp_input+0x98>
 8016290:	2301      	movs	r3, #1
 8016292:	e000      	b.n	8016296 <etharp_input+0x9a>
 8016294:	2302      	movs	r3, #2
 8016296:	f107 010c 	add.w	r1, r7, #12
 801629a:	6838      	ldr	r0, [r7, #0]
 801629c:	f7ff fed8 	bl	8016050 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80162a0:	693b      	ldr	r3, [r7, #16]
 80162a2:	88db      	ldrh	r3, [r3, #6]
 80162a4:	b29b      	uxth	r3, r3
 80162a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80162aa:	d003      	beq.n	80162b4 <etharp_input+0xb8>
 80162ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80162b0:	d01e      	beq.n	80162f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80162b2:	e020      	b.n	80162f6 <etharp_input+0xfa>
      if (for_us) {
 80162b4:	7dfb      	ldrb	r3, [r7, #23]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d01c      	beq.n	80162f4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80162ba:	683b      	ldr	r3, [r7, #0]
 80162bc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80162c0:	693b      	ldr	r3, [r7, #16]
 80162c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80162c6:	683b      	ldr	r3, [r7, #0]
 80162c8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80162d0:	693a      	ldr	r2, [r7, #16]
 80162d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80162d4:	2102      	movs	r1, #2
 80162d6:	9103      	str	r1, [sp, #12]
 80162d8:	f107 010c 	add.w	r1, r7, #12
 80162dc:	9102      	str	r1, [sp, #8]
 80162de:	9201      	str	r2, [sp, #4]
 80162e0:	9300      	str	r3, [sp, #0]
 80162e2:	462b      	mov	r3, r5
 80162e4:	4622      	mov	r2, r4
 80162e6:	4601      	mov	r1, r0
 80162e8:	6838      	ldr	r0, [r7, #0]
 80162ea:	f000 faeb 	bl	80168c4 <etharp_raw>
      break;
 80162ee:	e001      	b.n	80162f4 <etharp_input+0xf8>
      break;
 80162f0:	bf00      	nop
 80162f2:	e000      	b.n	80162f6 <etharp_input+0xfa>
      break;
 80162f4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80162f6:	6878      	ldr	r0, [r7, #4]
 80162f8:	f7f8 f96e 	bl	800e5d8 <pbuf_free>
}
 80162fc:	3718      	adds	r7, #24
 80162fe:	46bd      	mov	sp, r7
 8016300:	bdb0      	pop	{r4, r5, r7, pc}
 8016302:	bf00      	nop
 8016304:	0801c924 	.word	0x0801c924
 8016308:	0801ca74 	.word	0x0801ca74
 801630c:	0801c99c 	.word	0x0801c99c

08016310 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016310:	b580      	push	{r7, lr}
 8016312:	b086      	sub	sp, #24
 8016314:	af02      	add	r7, sp, #8
 8016316:	60f8      	str	r0, [r7, #12]
 8016318:	60b9      	str	r1, [r7, #8]
 801631a:	4613      	mov	r3, r2
 801631c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801631e:	79fa      	ldrb	r2, [r7, #7]
 8016320:	4944      	ldr	r1, [pc, #272]	; (8016434 <etharp_output_to_arp_index+0x124>)
 8016322:	4613      	mov	r3, r2
 8016324:	005b      	lsls	r3, r3, #1
 8016326:	4413      	add	r3, r2
 8016328:	00db      	lsls	r3, r3, #3
 801632a:	440b      	add	r3, r1
 801632c:	3314      	adds	r3, #20
 801632e:	781b      	ldrb	r3, [r3, #0]
 8016330:	2b01      	cmp	r3, #1
 8016332:	d806      	bhi.n	8016342 <etharp_output_to_arp_index+0x32>
 8016334:	4b40      	ldr	r3, [pc, #256]	; (8016438 <etharp_output_to_arp_index+0x128>)
 8016336:	f240 22ee 	movw	r2, #750	; 0x2ee
 801633a:	4940      	ldr	r1, [pc, #256]	; (801643c <etharp_output_to_arp_index+0x12c>)
 801633c:	4840      	ldr	r0, [pc, #256]	; (8016440 <etharp_output_to_arp_index+0x130>)
 801633e:	f002 f9a5 	bl	801868c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016342:	79fa      	ldrb	r2, [r7, #7]
 8016344:	493b      	ldr	r1, [pc, #236]	; (8016434 <etharp_output_to_arp_index+0x124>)
 8016346:	4613      	mov	r3, r2
 8016348:	005b      	lsls	r3, r3, #1
 801634a:	4413      	add	r3, r2
 801634c:	00db      	lsls	r3, r3, #3
 801634e:	440b      	add	r3, r1
 8016350:	3314      	adds	r3, #20
 8016352:	781b      	ldrb	r3, [r3, #0]
 8016354:	2b02      	cmp	r3, #2
 8016356:	d153      	bne.n	8016400 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016358:	79fa      	ldrb	r2, [r7, #7]
 801635a:	4936      	ldr	r1, [pc, #216]	; (8016434 <etharp_output_to_arp_index+0x124>)
 801635c:	4613      	mov	r3, r2
 801635e:	005b      	lsls	r3, r3, #1
 8016360:	4413      	add	r3, r2
 8016362:	00db      	lsls	r3, r3, #3
 8016364:	440b      	add	r3, r1
 8016366:	3312      	adds	r3, #18
 8016368:	881b      	ldrh	r3, [r3, #0]
 801636a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801636e:	d919      	bls.n	80163a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016370:	79fa      	ldrb	r2, [r7, #7]
 8016372:	4613      	mov	r3, r2
 8016374:	005b      	lsls	r3, r3, #1
 8016376:	4413      	add	r3, r2
 8016378:	00db      	lsls	r3, r3, #3
 801637a:	4a2e      	ldr	r2, [pc, #184]	; (8016434 <etharp_output_to_arp_index+0x124>)
 801637c:	4413      	add	r3, r2
 801637e:	3304      	adds	r3, #4
 8016380:	4619      	mov	r1, r3
 8016382:	68f8      	ldr	r0, [r7, #12]
 8016384:	f000 fb4c 	bl	8016a20 <etharp_request>
 8016388:	4603      	mov	r3, r0
 801638a:	2b00      	cmp	r3, #0
 801638c:	d138      	bne.n	8016400 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801638e:	79fa      	ldrb	r2, [r7, #7]
 8016390:	4928      	ldr	r1, [pc, #160]	; (8016434 <etharp_output_to_arp_index+0x124>)
 8016392:	4613      	mov	r3, r2
 8016394:	005b      	lsls	r3, r3, #1
 8016396:	4413      	add	r3, r2
 8016398:	00db      	lsls	r3, r3, #3
 801639a:	440b      	add	r3, r1
 801639c:	3314      	adds	r3, #20
 801639e:	2203      	movs	r2, #3
 80163a0:	701a      	strb	r2, [r3, #0]
 80163a2:	e02d      	b.n	8016400 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80163a4:	79fa      	ldrb	r2, [r7, #7]
 80163a6:	4923      	ldr	r1, [pc, #140]	; (8016434 <etharp_output_to_arp_index+0x124>)
 80163a8:	4613      	mov	r3, r2
 80163aa:	005b      	lsls	r3, r3, #1
 80163ac:	4413      	add	r3, r2
 80163ae:	00db      	lsls	r3, r3, #3
 80163b0:	440b      	add	r3, r1
 80163b2:	3312      	adds	r3, #18
 80163b4:	881b      	ldrh	r3, [r3, #0]
 80163b6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80163ba:	d321      	bcc.n	8016400 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80163bc:	79fa      	ldrb	r2, [r7, #7]
 80163be:	4613      	mov	r3, r2
 80163c0:	005b      	lsls	r3, r3, #1
 80163c2:	4413      	add	r3, r2
 80163c4:	00db      	lsls	r3, r3, #3
 80163c6:	4a1b      	ldr	r2, [pc, #108]	; (8016434 <etharp_output_to_arp_index+0x124>)
 80163c8:	4413      	add	r3, r2
 80163ca:	1d19      	adds	r1, r3, #4
 80163cc:	79fa      	ldrb	r2, [r7, #7]
 80163ce:	4613      	mov	r3, r2
 80163d0:	005b      	lsls	r3, r3, #1
 80163d2:	4413      	add	r3, r2
 80163d4:	00db      	lsls	r3, r3, #3
 80163d6:	3308      	adds	r3, #8
 80163d8:	4a16      	ldr	r2, [pc, #88]	; (8016434 <etharp_output_to_arp_index+0x124>)
 80163da:	4413      	add	r3, r2
 80163dc:	3304      	adds	r3, #4
 80163de:	461a      	mov	r2, r3
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f000 fafb 	bl	80169dc <etharp_request_dst>
 80163e6:	4603      	mov	r3, r0
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d109      	bne.n	8016400 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80163ec:	79fa      	ldrb	r2, [r7, #7]
 80163ee:	4911      	ldr	r1, [pc, #68]	; (8016434 <etharp_output_to_arp_index+0x124>)
 80163f0:	4613      	mov	r3, r2
 80163f2:	005b      	lsls	r3, r3, #1
 80163f4:	4413      	add	r3, r2
 80163f6:	00db      	lsls	r3, r3, #3
 80163f8:	440b      	add	r3, r1
 80163fa:	3314      	adds	r3, #20
 80163fc:	2203      	movs	r2, #3
 80163fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016406:	79fa      	ldrb	r2, [r7, #7]
 8016408:	4613      	mov	r3, r2
 801640a:	005b      	lsls	r3, r3, #1
 801640c:	4413      	add	r3, r2
 801640e:	00db      	lsls	r3, r3, #3
 8016410:	3308      	adds	r3, #8
 8016412:	4a08      	ldr	r2, [pc, #32]	; (8016434 <etharp_output_to_arp_index+0x124>)
 8016414:	4413      	add	r3, r2
 8016416:	3304      	adds	r3, #4
 8016418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801641c:	9200      	str	r2, [sp, #0]
 801641e:	460a      	mov	r2, r1
 8016420:	68b9      	ldr	r1, [r7, #8]
 8016422:	68f8      	ldr	r0, [r7, #12]
 8016424:	f001 fe3a 	bl	801809c <ethernet_output>
 8016428:	4603      	mov	r3, r0
}
 801642a:	4618      	mov	r0, r3
 801642c:	3710      	adds	r7, #16
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	20004f1c 	.word	0x20004f1c
 8016438:	0801c924 	.word	0x0801c924
 801643c:	0801ca94 	.word	0x0801ca94
 8016440:	0801c99c 	.word	0x0801c99c

08016444 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b08a      	sub	sp, #40	; 0x28
 8016448:	af02      	add	r7, sp, #8
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d106      	bne.n	8016468 <etharp_output+0x24>
 801645a:	4b73      	ldr	r3, [pc, #460]	; (8016628 <etharp_output+0x1e4>)
 801645c:	f240 321e 	movw	r2, #798	; 0x31e
 8016460:	4972      	ldr	r1, [pc, #456]	; (801662c <etharp_output+0x1e8>)
 8016462:	4873      	ldr	r0, [pc, #460]	; (8016630 <etharp_output+0x1ec>)
 8016464:	f002 f912 	bl	801868c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d106      	bne.n	801647c <etharp_output+0x38>
 801646e:	4b6e      	ldr	r3, [pc, #440]	; (8016628 <etharp_output+0x1e4>)
 8016470:	f240 321f 	movw	r2, #799	; 0x31f
 8016474:	496f      	ldr	r1, [pc, #444]	; (8016634 <etharp_output+0x1f0>)
 8016476:	486e      	ldr	r0, [pc, #440]	; (8016630 <etharp_output+0x1ec>)
 8016478:	f002 f908 	bl	801868c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d106      	bne.n	8016490 <etharp_output+0x4c>
 8016482:	4b69      	ldr	r3, [pc, #420]	; (8016628 <etharp_output+0x1e4>)
 8016484:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016488:	496b      	ldr	r1, [pc, #428]	; (8016638 <etharp_output+0x1f4>)
 801648a:	4869      	ldr	r0, [pc, #420]	; (8016630 <etharp_output+0x1ec>)
 801648c:	f002 f8fe 	bl	801868c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	68f9      	ldr	r1, [r7, #12]
 8016496:	4618      	mov	r0, r3
 8016498:	f000 fef8 	bl	801728c <ip4_addr_isbroadcast_u32>
 801649c:	4603      	mov	r3, r0
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d002      	beq.n	80164a8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80164a2:	4b66      	ldr	r3, [pc, #408]	; (801663c <etharp_output+0x1f8>)
 80164a4:	61fb      	str	r3, [r7, #28]
 80164a6:	e0af      	b.n	8016608 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80164b0:	2be0      	cmp	r3, #224	; 0xe0
 80164b2:	d118      	bne.n	80164e6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80164b4:	2301      	movs	r3, #1
 80164b6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80164b8:	2300      	movs	r3, #0
 80164ba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80164bc:	235e      	movs	r3, #94	; 0x5e
 80164be:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	3301      	adds	r3, #1
 80164c4:	781b      	ldrb	r3, [r3, #0]
 80164c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80164ca:	b2db      	uxtb	r3, r3
 80164cc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	3302      	adds	r3, #2
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	3303      	adds	r3, #3
 80164da:	781b      	ldrb	r3, [r3, #0]
 80164dc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80164de:	f107 0310 	add.w	r3, r7, #16
 80164e2:	61fb      	str	r3, [r7, #28]
 80164e4:	e090      	b.n	8016608 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	681a      	ldr	r2, [r3, #0]
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	3304      	adds	r3, #4
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	405a      	eors	r2, r3
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	3308      	adds	r3, #8
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	4013      	ands	r3, r2
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d012      	beq.n	8016524 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016504:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016508:	4293      	cmp	r3, r2
 801650a:	d00b      	beq.n	8016524 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	330c      	adds	r3, #12
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d003      	beq.n	801651e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	330c      	adds	r3, #12
 801651a:	61bb      	str	r3, [r7, #24]
 801651c:	e002      	b.n	8016524 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801651e:	f06f 0303 	mvn.w	r3, #3
 8016522:	e07d      	b.n	8016620 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016524:	4b46      	ldr	r3, [pc, #280]	; (8016640 <etharp_output+0x1fc>)
 8016526:	781b      	ldrb	r3, [r3, #0]
 8016528:	4619      	mov	r1, r3
 801652a:	4a46      	ldr	r2, [pc, #280]	; (8016644 <etharp_output+0x200>)
 801652c:	460b      	mov	r3, r1
 801652e:	005b      	lsls	r3, r3, #1
 8016530:	440b      	add	r3, r1
 8016532:	00db      	lsls	r3, r3, #3
 8016534:	4413      	add	r3, r2
 8016536:	3314      	adds	r3, #20
 8016538:	781b      	ldrb	r3, [r3, #0]
 801653a:	2b01      	cmp	r3, #1
 801653c:	d925      	bls.n	801658a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801653e:	4b40      	ldr	r3, [pc, #256]	; (8016640 <etharp_output+0x1fc>)
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	4619      	mov	r1, r3
 8016544:	4a3f      	ldr	r2, [pc, #252]	; (8016644 <etharp_output+0x200>)
 8016546:	460b      	mov	r3, r1
 8016548:	005b      	lsls	r3, r3, #1
 801654a:	440b      	add	r3, r1
 801654c:	00db      	lsls	r3, r3, #3
 801654e:	4413      	add	r3, r2
 8016550:	3308      	adds	r3, #8
 8016552:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016554:	68fa      	ldr	r2, [r7, #12]
 8016556:	429a      	cmp	r2, r3
 8016558:	d117      	bne.n	801658a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801655a:	69bb      	ldr	r3, [r7, #24]
 801655c:	681a      	ldr	r2, [r3, #0]
 801655e:	4b38      	ldr	r3, [pc, #224]	; (8016640 <etharp_output+0x1fc>)
 8016560:	781b      	ldrb	r3, [r3, #0]
 8016562:	4618      	mov	r0, r3
 8016564:	4937      	ldr	r1, [pc, #220]	; (8016644 <etharp_output+0x200>)
 8016566:	4603      	mov	r3, r0
 8016568:	005b      	lsls	r3, r3, #1
 801656a:	4403      	add	r3, r0
 801656c:	00db      	lsls	r3, r3, #3
 801656e:	440b      	add	r3, r1
 8016570:	3304      	adds	r3, #4
 8016572:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016574:	429a      	cmp	r2, r3
 8016576:	d108      	bne.n	801658a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016578:	4b31      	ldr	r3, [pc, #196]	; (8016640 <etharp_output+0x1fc>)
 801657a:	781b      	ldrb	r3, [r3, #0]
 801657c:	461a      	mov	r2, r3
 801657e:	68b9      	ldr	r1, [r7, #8]
 8016580:	68f8      	ldr	r0, [r7, #12]
 8016582:	f7ff fec5 	bl	8016310 <etharp_output_to_arp_index>
 8016586:	4603      	mov	r3, r0
 8016588:	e04a      	b.n	8016620 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801658a:	2300      	movs	r3, #0
 801658c:	75fb      	strb	r3, [r7, #23]
 801658e:	e031      	b.n	80165f4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016590:	7dfa      	ldrb	r2, [r7, #23]
 8016592:	492c      	ldr	r1, [pc, #176]	; (8016644 <etharp_output+0x200>)
 8016594:	4613      	mov	r3, r2
 8016596:	005b      	lsls	r3, r3, #1
 8016598:	4413      	add	r3, r2
 801659a:	00db      	lsls	r3, r3, #3
 801659c:	440b      	add	r3, r1
 801659e:	3314      	adds	r3, #20
 80165a0:	781b      	ldrb	r3, [r3, #0]
 80165a2:	2b01      	cmp	r3, #1
 80165a4:	d923      	bls.n	80165ee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80165a6:	7dfa      	ldrb	r2, [r7, #23]
 80165a8:	4926      	ldr	r1, [pc, #152]	; (8016644 <etharp_output+0x200>)
 80165aa:	4613      	mov	r3, r2
 80165ac:	005b      	lsls	r3, r3, #1
 80165ae:	4413      	add	r3, r2
 80165b0:	00db      	lsls	r3, r3, #3
 80165b2:	440b      	add	r3, r1
 80165b4:	3308      	adds	r3, #8
 80165b6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80165b8:	68fa      	ldr	r2, [r7, #12]
 80165ba:	429a      	cmp	r2, r3
 80165bc:	d117      	bne.n	80165ee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80165be:	69bb      	ldr	r3, [r7, #24]
 80165c0:	6819      	ldr	r1, [r3, #0]
 80165c2:	7dfa      	ldrb	r2, [r7, #23]
 80165c4:	481f      	ldr	r0, [pc, #124]	; (8016644 <etharp_output+0x200>)
 80165c6:	4613      	mov	r3, r2
 80165c8:	005b      	lsls	r3, r3, #1
 80165ca:	4413      	add	r3, r2
 80165cc:	00db      	lsls	r3, r3, #3
 80165ce:	4403      	add	r3, r0
 80165d0:	3304      	adds	r3, #4
 80165d2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80165d4:	4299      	cmp	r1, r3
 80165d6:	d10a      	bne.n	80165ee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80165d8:	4a19      	ldr	r2, [pc, #100]	; (8016640 <etharp_output+0x1fc>)
 80165da:	7dfb      	ldrb	r3, [r7, #23]
 80165dc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80165de:	7dfb      	ldrb	r3, [r7, #23]
 80165e0:	461a      	mov	r2, r3
 80165e2:	68b9      	ldr	r1, [r7, #8]
 80165e4:	68f8      	ldr	r0, [r7, #12]
 80165e6:	f7ff fe93 	bl	8016310 <etharp_output_to_arp_index>
 80165ea:	4603      	mov	r3, r0
 80165ec:	e018      	b.n	8016620 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80165ee:	7dfb      	ldrb	r3, [r7, #23]
 80165f0:	3301      	adds	r3, #1
 80165f2:	75fb      	strb	r3, [r7, #23]
 80165f4:	7dfb      	ldrb	r3, [r7, #23]
 80165f6:	2b09      	cmp	r3, #9
 80165f8:	d9ca      	bls.n	8016590 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80165fa:	68ba      	ldr	r2, [r7, #8]
 80165fc:	69b9      	ldr	r1, [r7, #24]
 80165fe:	68f8      	ldr	r0, [r7, #12]
 8016600:	f000 f822 	bl	8016648 <etharp_query>
 8016604:	4603      	mov	r3, r0
 8016606:	e00b      	b.n	8016620 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801660e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016612:	9300      	str	r3, [sp, #0]
 8016614:	69fb      	ldr	r3, [r7, #28]
 8016616:	68b9      	ldr	r1, [r7, #8]
 8016618:	68f8      	ldr	r0, [r7, #12]
 801661a:	f001 fd3f 	bl	801809c <ethernet_output>
 801661e:	4603      	mov	r3, r0
}
 8016620:	4618      	mov	r0, r3
 8016622:	3720      	adds	r7, #32
 8016624:	46bd      	mov	sp, r7
 8016626:	bd80      	pop	{r7, pc}
 8016628:	0801c924 	.word	0x0801c924
 801662c:	0801ca74 	.word	0x0801ca74
 8016630:	0801c99c 	.word	0x0801c99c
 8016634:	0801cac4 	.word	0x0801cac4
 8016638:	0801ca64 	.word	0x0801ca64
 801663c:	0801d1a0 	.word	0x0801d1a0
 8016640:	2000500c 	.word	0x2000500c
 8016644:	20004f1c 	.word	0x20004f1c

08016648 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016648:	b580      	push	{r7, lr}
 801664a:	b08c      	sub	sp, #48	; 0x30
 801664c:	af02      	add	r7, sp, #8
 801664e:	60f8      	str	r0, [r7, #12]
 8016650:	60b9      	str	r1, [r7, #8]
 8016652:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	3326      	adds	r3, #38	; 0x26
 8016658:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801665a:	23ff      	movs	r3, #255	; 0xff
 801665c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016660:	2300      	movs	r3, #0
 8016662:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	68f9      	ldr	r1, [r7, #12]
 801666a:	4618      	mov	r0, r3
 801666c:	f000 fe0e 	bl	801728c <ip4_addr_isbroadcast_u32>
 8016670:	4603      	mov	r3, r0
 8016672:	2b00      	cmp	r3, #0
 8016674:	d10c      	bne.n	8016690 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016676:	68bb      	ldr	r3, [r7, #8]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801667e:	2be0      	cmp	r3, #224	; 0xe0
 8016680:	d006      	beq.n	8016690 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	2b00      	cmp	r3, #0
 8016686:	d003      	beq.n	8016690 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016688:	68bb      	ldr	r3, [r7, #8]
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d102      	bne.n	8016696 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016690:	f06f 030f 	mvn.w	r3, #15
 8016694:	e101      	b.n	801689a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016696:	68fa      	ldr	r2, [r7, #12]
 8016698:	2101      	movs	r1, #1
 801669a:	68b8      	ldr	r0, [r7, #8]
 801669c:	f7ff fb60 	bl	8015d60 <etharp_find_entry>
 80166a0:	4603      	mov	r3, r0
 80166a2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80166a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	da02      	bge.n	80166b2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80166ac:	8a7b      	ldrh	r3, [r7, #18]
 80166ae:	b25b      	sxtb	r3, r3
 80166b0:	e0f3      	b.n	801689a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80166b2:	8a7b      	ldrh	r3, [r7, #18]
 80166b4:	2b7e      	cmp	r3, #126	; 0x7e
 80166b6:	d906      	bls.n	80166c6 <etharp_query+0x7e>
 80166b8:	4b7a      	ldr	r3, [pc, #488]	; (80168a4 <etharp_query+0x25c>)
 80166ba:	f240 32c1 	movw	r2, #961	; 0x3c1
 80166be:	497a      	ldr	r1, [pc, #488]	; (80168a8 <etharp_query+0x260>)
 80166c0:	487a      	ldr	r0, [pc, #488]	; (80168ac <etharp_query+0x264>)
 80166c2:	f001 ffe3 	bl	801868c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80166c6:	8a7b      	ldrh	r3, [r7, #18]
 80166c8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80166ca:	7c7a      	ldrb	r2, [r7, #17]
 80166cc:	4978      	ldr	r1, [pc, #480]	; (80168b0 <etharp_query+0x268>)
 80166ce:	4613      	mov	r3, r2
 80166d0:	005b      	lsls	r3, r3, #1
 80166d2:	4413      	add	r3, r2
 80166d4:	00db      	lsls	r3, r3, #3
 80166d6:	440b      	add	r3, r1
 80166d8:	3314      	adds	r3, #20
 80166da:	781b      	ldrb	r3, [r3, #0]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d115      	bne.n	801670c <etharp_query+0xc4>
    is_new_entry = 1;
 80166e0:	2301      	movs	r3, #1
 80166e2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80166e4:	7c7a      	ldrb	r2, [r7, #17]
 80166e6:	4972      	ldr	r1, [pc, #456]	; (80168b0 <etharp_query+0x268>)
 80166e8:	4613      	mov	r3, r2
 80166ea:	005b      	lsls	r3, r3, #1
 80166ec:	4413      	add	r3, r2
 80166ee:	00db      	lsls	r3, r3, #3
 80166f0:	440b      	add	r3, r1
 80166f2:	3314      	adds	r3, #20
 80166f4:	2201      	movs	r2, #1
 80166f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80166f8:	7c7a      	ldrb	r2, [r7, #17]
 80166fa:	496d      	ldr	r1, [pc, #436]	; (80168b0 <etharp_query+0x268>)
 80166fc:	4613      	mov	r3, r2
 80166fe:	005b      	lsls	r3, r3, #1
 8016700:	4413      	add	r3, r2
 8016702:	00db      	lsls	r3, r3, #3
 8016704:	440b      	add	r3, r1
 8016706:	3308      	adds	r3, #8
 8016708:	68fa      	ldr	r2, [r7, #12]
 801670a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801670c:	7c7a      	ldrb	r2, [r7, #17]
 801670e:	4968      	ldr	r1, [pc, #416]	; (80168b0 <etharp_query+0x268>)
 8016710:	4613      	mov	r3, r2
 8016712:	005b      	lsls	r3, r3, #1
 8016714:	4413      	add	r3, r2
 8016716:	00db      	lsls	r3, r3, #3
 8016718:	440b      	add	r3, r1
 801671a:	3314      	adds	r3, #20
 801671c:	781b      	ldrb	r3, [r3, #0]
 801671e:	2b01      	cmp	r3, #1
 8016720:	d011      	beq.n	8016746 <etharp_query+0xfe>
 8016722:	7c7a      	ldrb	r2, [r7, #17]
 8016724:	4962      	ldr	r1, [pc, #392]	; (80168b0 <etharp_query+0x268>)
 8016726:	4613      	mov	r3, r2
 8016728:	005b      	lsls	r3, r3, #1
 801672a:	4413      	add	r3, r2
 801672c:	00db      	lsls	r3, r3, #3
 801672e:	440b      	add	r3, r1
 8016730:	3314      	adds	r3, #20
 8016732:	781b      	ldrb	r3, [r3, #0]
 8016734:	2b01      	cmp	r3, #1
 8016736:	d806      	bhi.n	8016746 <etharp_query+0xfe>
 8016738:	4b5a      	ldr	r3, [pc, #360]	; (80168a4 <etharp_query+0x25c>)
 801673a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801673e:	495d      	ldr	r1, [pc, #372]	; (80168b4 <etharp_query+0x26c>)
 8016740:	485a      	ldr	r0, [pc, #360]	; (80168ac <etharp_query+0x264>)
 8016742:	f001 ffa3 	bl	801868c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016746:	6a3b      	ldr	r3, [r7, #32]
 8016748:	2b00      	cmp	r3, #0
 801674a:	d102      	bne.n	8016752 <etharp_query+0x10a>
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	2b00      	cmp	r3, #0
 8016750:	d10c      	bne.n	801676c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8016752:	68b9      	ldr	r1, [r7, #8]
 8016754:	68f8      	ldr	r0, [r7, #12]
 8016756:	f000 f963 	bl	8016a20 <etharp_request>
 801675a:	4603      	mov	r3, r0
 801675c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d102      	bne.n	801676c <etharp_query+0x124>
      return result;
 8016766:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801676a:	e096      	b.n	801689a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d106      	bne.n	8016780 <etharp_query+0x138>
 8016772:	4b4c      	ldr	r3, [pc, #304]	; (80168a4 <etharp_query+0x25c>)
 8016774:	f240 32e1 	movw	r2, #993	; 0x3e1
 8016778:	494f      	ldr	r1, [pc, #316]	; (80168b8 <etharp_query+0x270>)
 801677a:	484c      	ldr	r0, [pc, #304]	; (80168ac <etharp_query+0x264>)
 801677c:	f001 ff86 	bl	801868c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8016780:	7c7a      	ldrb	r2, [r7, #17]
 8016782:	494b      	ldr	r1, [pc, #300]	; (80168b0 <etharp_query+0x268>)
 8016784:	4613      	mov	r3, r2
 8016786:	005b      	lsls	r3, r3, #1
 8016788:	4413      	add	r3, r2
 801678a:	00db      	lsls	r3, r3, #3
 801678c:	440b      	add	r3, r1
 801678e:	3314      	adds	r3, #20
 8016790:	781b      	ldrb	r3, [r3, #0]
 8016792:	2b01      	cmp	r3, #1
 8016794:	d917      	bls.n	80167c6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8016796:	4a49      	ldr	r2, [pc, #292]	; (80168bc <etharp_query+0x274>)
 8016798:	7c7b      	ldrb	r3, [r7, #17]
 801679a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801679c:	7c7a      	ldrb	r2, [r7, #17]
 801679e:	4613      	mov	r3, r2
 80167a0:	005b      	lsls	r3, r3, #1
 80167a2:	4413      	add	r3, r2
 80167a4:	00db      	lsls	r3, r3, #3
 80167a6:	3308      	adds	r3, #8
 80167a8:	4a41      	ldr	r2, [pc, #260]	; (80168b0 <etharp_query+0x268>)
 80167aa:	4413      	add	r3, r2
 80167ac:	3304      	adds	r3, #4
 80167ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80167b2:	9200      	str	r2, [sp, #0]
 80167b4:	697a      	ldr	r2, [r7, #20]
 80167b6:	6879      	ldr	r1, [r7, #4]
 80167b8:	68f8      	ldr	r0, [r7, #12]
 80167ba:	f001 fc6f 	bl	801809c <ethernet_output>
 80167be:	4603      	mov	r3, r0
 80167c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80167c4:	e067      	b.n	8016896 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80167c6:	7c7a      	ldrb	r2, [r7, #17]
 80167c8:	4939      	ldr	r1, [pc, #228]	; (80168b0 <etharp_query+0x268>)
 80167ca:	4613      	mov	r3, r2
 80167cc:	005b      	lsls	r3, r3, #1
 80167ce:	4413      	add	r3, r2
 80167d0:	00db      	lsls	r3, r3, #3
 80167d2:	440b      	add	r3, r1
 80167d4:	3314      	adds	r3, #20
 80167d6:	781b      	ldrb	r3, [r3, #0]
 80167d8:	2b01      	cmp	r3, #1
 80167da:	d15c      	bne.n	8016896 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80167dc:	2300      	movs	r3, #0
 80167de:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80167e4:	e01c      	b.n	8016820 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80167e6:	69fb      	ldr	r3, [r7, #28]
 80167e8:	895a      	ldrh	r2, [r3, #10]
 80167ea:	69fb      	ldr	r3, [r7, #28]
 80167ec:	891b      	ldrh	r3, [r3, #8]
 80167ee:	429a      	cmp	r2, r3
 80167f0:	d10a      	bne.n	8016808 <etharp_query+0x1c0>
 80167f2:	69fb      	ldr	r3, [r7, #28]
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d006      	beq.n	8016808 <etharp_query+0x1c0>
 80167fa:	4b2a      	ldr	r3, [pc, #168]	; (80168a4 <etharp_query+0x25c>)
 80167fc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016800:	492f      	ldr	r1, [pc, #188]	; (80168c0 <etharp_query+0x278>)
 8016802:	482a      	ldr	r0, [pc, #168]	; (80168ac <etharp_query+0x264>)
 8016804:	f001 ff42 	bl	801868c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016808:	69fb      	ldr	r3, [r7, #28]
 801680a:	7b1b      	ldrb	r3, [r3, #12]
 801680c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016810:	2b00      	cmp	r3, #0
 8016812:	d002      	beq.n	801681a <etharp_query+0x1d2>
        copy_needed = 1;
 8016814:	2301      	movs	r3, #1
 8016816:	61bb      	str	r3, [r7, #24]
        break;
 8016818:	e005      	b.n	8016826 <etharp_query+0x1de>
      }
      p = p->next;
 801681a:	69fb      	ldr	r3, [r7, #28]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016820:	69fb      	ldr	r3, [r7, #28]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d1df      	bne.n	80167e6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d007      	beq.n	801683c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801682c:	687a      	ldr	r2, [r7, #4]
 801682e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016832:	200e      	movs	r0, #14
 8016834:	f7f8 fa80 	bl	800ed38 <pbuf_clone>
 8016838:	61f8      	str	r0, [r7, #28]
 801683a:	e004      	b.n	8016846 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016840:	69f8      	ldr	r0, [r7, #28]
 8016842:	f7f7 ff6f 	bl	800e724 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016846:	69fb      	ldr	r3, [r7, #28]
 8016848:	2b00      	cmp	r3, #0
 801684a:	d021      	beq.n	8016890 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801684c:	7c7a      	ldrb	r2, [r7, #17]
 801684e:	4918      	ldr	r1, [pc, #96]	; (80168b0 <etharp_query+0x268>)
 8016850:	4613      	mov	r3, r2
 8016852:	005b      	lsls	r3, r3, #1
 8016854:	4413      	add	r3, r2
 8016856:	00db      	lsls	r3, r3, #3
 8016858:	440b      	add	r3, r1
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d00a      	beq.n	8016876 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8016860:	7c7a      	ldrb	r2, [r7, #17]
 8016862:	4913      	ldr	r1, [pc, #76]	; (80168b0 <etharp_query+0x268>)
 8016864:	4613      	mov	r3, r2
 8016866:	005b      	lsls	r3, r3, #1
 8016868:	4413      	add	r3, r2
 801686a:	00db      	lsls	r3, r3, #3
 801686c:	440b      	add	r3, r1
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	4618      	mov	r0, r3
 8016872:	f7f7 feb1 	bl	800e5d8 <pbuf_free>
      }
      arp_table[i].q = p;
 8016876:	7c7a      	ldrb	r2, [r7, #17]
 8016878:	490d      	ldr	r1, [pc, #52]	; (80168b0 <etharp_query+0x268>)
 801687a:	4613      	mov	r3, r2
 801687c:	005b      	lsls	r3, r3, #1
 801687e:	4413      	add	r3, r2
 8016880:	00db      	lsls	r3, r3, #3
 8016882:	440b      	add	r3, r1
 8016884:	69fa      	ldr	r2, [r7, #28]
 8016886:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016888:	2300      	movs	r3, #0
 801688a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801688e:	e002      	b.n	8016896 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016890:	23ff      	movs	r3, #255	; 0xff
 8016892:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016896:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801689a:	4618      	mov	r0, r3
 801689c:	3728      	adds	r7, #40	; 0x28
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}
 80168a2:	bf00      	nop
 80168a4:	0801c924 	.word	0x0801c924
 80168a8:	0801cad0 	.word	0x0801cad0
 80168ac:	0801c99c 	.word	0x0801c99c
 80168b0:	20004f1c 	.word	0x20004f1c
 80168b4:	0801cae0 	.word	0x0801cae0
 80168b8:	0801cac4 	.word	0x0801cac4
 80168bc:	2000500c 	.word	0x2000500c
 80168c0:	0801cb08 	.word	0x0801cb08

080168c4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b08a      	sub	sp, #40	; 0x28
 80168c8:	af02      	add	r7, sp, #8
 80168ca:	60f8      	str	r0, [r7, #12]
 80168cc:	60b9      	str	r1, [r7, #8]
 80168ce:	607a      	str	r2, [r7, #4]
 80168d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80168d2:	2300      	movs	r3, #0
 80168d4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d106      	bne.n	80168ea <etharp_raw+0x26>
 80168dc:	4b3a      	ldr	r3, [pc, #232]	; (80169c8 <etharp_raw+0x104>)
 80168de:	f240 4257 	movw	r2, #1111	; 0x457
 80168e2:	493a      	ldr	r1, [pc, #232]	; (80169cc <etharp_raw+0x108>)
 80168e4:	483a      	ldr	r0, [pc, #232]	; (80169d0 <etharp_raw+0x10c>)
 80168e6:	f001 fed1 	bl	801868c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80168ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80168ee:	211c      	movs	r1, #28
 80168f0:	200e      	movs	r0, #14
 80168f2:	f7f7 fb5b 	bl	800dfac <pbuf_alloc>
 80168f6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80168f8:	69bb      	ldr	r3, [r7, #24]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d102      	bne.n	8016904 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80168fe:	f04f 33ff 	mov.w	r3, #4294967295
 8016902:	e05d      	b.n	80169c0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016904:	69bb      	ldr	r3, [r7, #24]
 8016906:	895b      	ldrh	r3, [r3, #10]
 8016908:	2b1b      	cmp	r3, #27
 801690a:	d806      	bhi.n	801691a <etharp_raw+0x56>
 801690c:	4b2e      	ldr	r3, [pc, #184]	; (80169c8 <etharp_raw+0x104>)
 801690e:	f240 4262 	movw	r2, #1122	; 0x462
 8016912:	4930      	ldr	r1, [pc, #192]	; (80169d4 <etharp_raw+0x110>)
 8016914:	482e      	ldr	r0, [pc, #184]	; (80169d0 <etharp_raw+0x10c>)
 8016916:	f001 feb9 	bl	801868c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801691a:	69bb      	ldr	r3, [r7, #24]
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016920:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016922:	4618      	mov	r0, r3
 8016924:	f7f5 ffb0 	bl	800c888 <lwip_htons>
 8016928:	4603      	mov	r3, r0
 801692a:	461a      	mov	r2, r3
 801692c:	697b      	ldr	r3, [r7, #20]
 801692e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016936:	2b06      	cmp	r3, #6
 8016938:	d006      	beq.n	8016948 <etharp_raw+0x84>
 801693a:	4b23      	ldr	r3, [pc, #140]	; (80169c8 <etharp_raw+0x104>)
 801693c:	f240 4269 	movw	r2, #1129	; 0x469
 8016940:	4925      	ldr	r1, [pc, #148]	; (80169d8 <etharp_raw+0x114>)
 8016942:	4823      	ldr	r0, [pc, #140]	; (80169d0 <etharp_raw+0x10c>)
 8016944:	f001 fea2 	bl	801868c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	3308      	adds	r3, #8
 801694c:	2206      	movs	r2, #6
 801694e:	6839      	ldr	r1, [r7, #0]
 8016950:	4618      	mov	r0, r3
 8016952:	f001 fddb 	bl	801850c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016956:	697b      	ldr	r3, [r7, #20]
 8016958:	3312      	adds	r3, #18
 801695a:	2206      	movs	r2, #6
 801695c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801695e:	4618      	mov	r0, r3
 8016960:	f001 fdd4 	bl	801850c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016964:	697b      	ldr	r3, [r7, #20]
 8016966:	330e      	adds	r3, #14
 8016968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801696a:	6812      	ldr	r2, [r2, #0]
 801696c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	3318      	adds	r3, #24
 8016972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016974:	6812      	ldr	r2, [r2, #0]
 8016976:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016978:	697b      	ldr	r3, [r7, #20]
 801697a:	2200      	movs	r2, #0
 801697c:	701a      	strb	r2, [r3, #0]
 801697e:	2200      	movs	r2, #0
 8016980:	f042 0201 	orr.w	r2, r2, #1
 8016984:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016986:	697b      	ldr	r3, [r7, #20]
 8016988:	2200      	movs	r2, #0
 801698a:	f042 0208 	orr.w	r2, r2, #8
 801698e:	709a      	strb	r2, [r3, #2]
 8016990:	2200      	movs	r2, #0
 8016992:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8016994:	697b      	ldr	r3, [r7, #20]
 8016996:	2206      	movs	r2, #6
 8016998:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801699a:	697b      	ldr	r3, [r7, #20]
 801699c:	2204      	movs	r2, #4
 801699e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80169a0:	f640 0306 	movw	r3, #2054	; 0x806
 80169a4:	9300      	str	r3, [sp, #0]
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	68ba      	ldr	r2, [r7, #8]
 80169aa:	69b9      	ldr	r1, [r7, #24]
 80169ac:	68f8      	ldr	r0, [r7, #12]
 80169ae:	f001 fb75 	bl	801809c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80169b2:	69b8      	ldr	r0, [r7, #24]
 80169b4:	f7f7 fe10 	bl	800e5d8 <pbuf_free>
  p = NULL;
 80169b8:	2300      	movs	r3, #0
 80169ba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80169bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80169c0:	4618      	mov	r0, r3
 80169c2:	3720      	adds	r7, #32
 80169c4:	46bd      	mov	sp, r7
 80169c6:	bd80      	pop	{r7, pc}
 80169c8:	0801c924 	.word	0x0801c924
 80169cc:	0801ca74 	.word	0x0801ca74
 80169d0:	0801c99c 	.word	0x0801c99c
 80169d4:	0801cb24 	.word	0x0801cb24
 80169d8:	0801cb58 	.word	0x0801cb58

080169dc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b088      	sub	sp, #32
 80169e0:	af04      	add	r7, sp, #16
 80169e2:	60f8      	str	r0, [r7, #12]
 80169e4:	60b9      	str	r1, [r7, #8]
 80169e6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80169e8:	68fb      	ldr	r3, [r7, #12]
 80169ea:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80169f8:	2201      	movs	r2, #1
 80169fa:	9203      	str	r2, [sp, #12]
 80169fc:	68ba      	ldr	r2, [r7, #8]
 80169fe:	9202      	str	r2, [sp, #8]
 8016a00:	4a06      	ldr	r2, [pc, #24]	; (8016a1c <etharp_request_dst+0x40>)
 8016a02:	9201      	str	r2, [sp, #4]
 8016a04:	9300      	str	r3, [sp, #0]
 8016a06:	4603      	mov	r3, r0
 8016a08:	687a      	ldr	r2, [r7, #4]
 8016a0a:	68f8      	ldr	r0, [r7, #12]
 8016a0c:	f7ff ff5a 	bl	80168c4 <etharp_raw>
 8016a10:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016a12:	4618      	mov	r0, r3
 8016a14:	3710      	adds	r7, #16
 8016a16:	46bd      	mov	sp, r7
 8016a18:	bd80      	pop	{r7, pc}
 8016a1a:	bf00      	nop
 8016a1c:	0801d1a8 	.word	0x0801d1a8

08016a20 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b082      	sub	sp, #8
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
 8016a28:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016a2a:	4a05      	ldr	r2, [pc, #20]	; (8016a40 <etharp_request+0x20>)
 8016a2c:	6839      	ldr	r1, [r7, #0]
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f7ff ffd4 	bl	80169dc <etharp_request_dst>
 8016a34:	4603      	mov	r3, r0
}
 8016a36:	4618      	mov	r0, r3
 8016a38:	3708      	adds	r7, #8
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}
 8016a3e:	bf00      	nop
 8016a40:	0801d1a0 	.word	0x0801d1a0

08016a44 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b08e      	sub	sp, #56	; 0x38
 8016a48:	af04      	add	r7, sp, #16
 8016a4a:	6078      	str	r0, [r7, #4]
 8016a4c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8016a4e:	4b79      	ldr	r3, [pc, #484]	; (8016c34 <icmp_input+0x1f0>)
 8016a50:	689b      	ldr	r3, [r3, #8]
 8016a52:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a56:	781b      	ldrb	r3, [r3, #0]
 8016a58:	f003 030f 	and.w	r3, r3, #15
 8016a5c:	b2db      	uxtb	r3, r3
 8016a5e:	009b      	lsls	r3, r3, #2
 8016a60:	b2db      	uxtb	r3, r3
 8016a62:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016a64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a66:	2b13      	cmp	r3, #19
 8016a68:	f240 80cd 	bls.w	8016c06 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	895b      	ldrh	r3, [r3, #10]
 8016a70:	2b03      	cmp	r3, #3
 8016a72:	f240 80ca 	bls.w	8016c0a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016a80:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	f000 80b7 	beq.w	8016bf8 <icmp_input+0x1b4>
 8016a8a:	2b08      	cmp	r3, #8
 8016a8c:	f040 80b7 	bne.w	8016bfe <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8016a90:	4b69      	ldr	r3, [pc, #420]	; (8016c38 <icmp_input+0x1f4>)
 8016a92:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016a94:	4b67      	ldr	r3, [pc, #412]	; (8016c34 <icmp_input+0x1f0>)
 8016a96:	695b      	ldr	r3, [r3, #20]
 8016a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016a9c:	2be0      	cmp	r3, #224	; 0xe0
 8016a9e:	f000 80bb 	beq.w	8016c18 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8016aa2:	4b64      	ldr	r3, [pc, #400]	; (8016c34 <icmp_input+0x1f0>)
 8016aa4:	695b      	ldr	r3, [r3, #20]
 8016aa6:	4a63      	ldr	r2, [pc, #396]	; (8016c34 <icmp_input+0x1f0>)
 8016aa8:	6812      	ldr	r2, [r2, #0]
 8016aaa:	4611      	mov	r1, r2
 8016aac:	4618      	mov	r0, r3
 8016aae:	f000 fbed 	bl	801728c <ip4_addr_isbroadcast_u32>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	2b00      	cmp	r3, #0
 8016ab6:	f040 80b1 	bne.w	8016c1c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	891b      	ldrh	r3, [r3, #8]
 8016abe:	2b07      	cmp	r3, #7
 8016ac0:	f240 80a5 	bls.w	8016c0e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016ac4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016ac6:	330e      	adds	r3, #14
 8016ac8:	4619      	mov	r1, r3
 8016aca:	6878      	ldr	r0, [r7, #4]
 8016acc:	f7f7 fcbc 	bl	800e448 <pbuf_add_header>
 8016ad0:	4603      	mov	r3, r0
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d04b      	beq.n	8016b6e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	891a      	ldrh	r2, [r3, #8]
 8016ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016adc:	4413      	add	r3, r2
 8016ade:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	891b      	ldrh	r3, [r3, #8]
 8016ae4:	8b7a      	ldrh	r2, [r7, #26]
 8016ae6:	429a      	cmp	r2, r3
 8016ae8:	f0c0 809a 	bcc.w	8016c20 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016aec:	8b7b      	ldrh	r3, [r7, #26]
 8016aee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016af2:	4619      	mov	r1, r3
 8016af4:	200e      	movs	r0, #14
 8016af6:	f7f7 fa59 	bl	800dfac <pbuf_alloc>
 8016afa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016afc:	697b      	ldr	r3, [r7, #20]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	f000 8090 	beq.w	8016c24 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	895b      	ldrh	r3, [r3, #10]
 8016b08:	461a      	mov	r2, r3
 8016b0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016b0c:	3308      	adds	r3, #8
 8016b0e:	429a      	cmp	r2, r3
 8016b10:	d203      	bcs.n	8016b1a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016b12:	6978      	ldr	r0, [r7, #20]
 8016b14:	f7f7 fd60 	bl	800e5d8 <pbuf_free>
          goto icmperr;
 8016b18:	e085      	b.n	8016c26 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8016b1a:	697b      	ldr	r3, [r7, #20]
 8016b1c:	685b      	ldr	r3, [r3, #4]
 8016b1e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016b20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016b22:	4618      	mov	r0, r3
 8016b24:	f001 fcf2 	bl	801850c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016b28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016b2a:	4619      	mov	r1, r3
 8016b2c:	6978      	ldr	r0, [r7, #20]
 8016b2e:	f7f7 fc9b 	bl	800e468 <pbuf_remove_header>
 8016b32:	4603      	mov	r3, r0
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d009      	beq.n	8016b4c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016b38:	4b40      	ldr	r3, [pc, #256]	; (8016c3c <icmp_input+0x1f8>)
 8016b3a:	22b6      	movs	r2, #182	; 0xb6
 8016b3c:	4940      	ldr	r1, [pc, #256]	; (8016c40 <icmp_input+0x1fc>)
 8016b3e:	4841      	ldr	r0, [pc, #260]	; (8016c44 <icmp_input+0x200>)
 8016b40:	f001 fda4 	bl	801868c <iprintf>
          pbuf_free(r);
 8016b44:	6978      	ldr	r0, [r7, #20]
 8016b46:	f7f7 fd47 	bl	800e5d8 <pbuf_free>
          goto icmperr;
 8016b4a:	e06c      	b.n	8016c26 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8016b4c:	6879      	ldr	r1, [r7, #4]
 8016b4e:	6978      	ldr	r0, [r7, #20]
 8016b50:	f7f7 fe76 	bl	800e840 <pbuf_copy>
 8016b54:	4603      	mov	r3, r0
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d003      	beq.n	8016b62 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8016b5a:	6978      	ldr	r0, [r7, #20]
 8016b5c:	f7f7 fd3c 	bl	800e5d8 <pbuf_free>
          goto icmperr;
 8016b60:	e061      	b.n	8016c26 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f7f7 fd38 	bl	800e5d8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016b68:	697b      	ldr	r3, [r7, #20]
 8016b6a:	607b      	str	r3, [r7, #4]
 8016b6c:	e00f      	b.n	8016b8e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016b6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016b70:	330e      	adds	r3, #14
 8016b72:	4619      	mov	r1, r3
 8016b74:	6878      	ldr	r0, [r7, #4]
 8016b76:	f7f7 fc77 	bl	800e468 <pbuf_remove_header>
 8016b7a:	4603      	mov	r3, r0
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d006      	beq.n	8016b8e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016b80:	4b2e      	ldr	r3, [pc, #184]	; (8016c3c <icmp_input+0x1f8>)
 8016b82:	22c7      	movs	r2, #199	; 0xc7
 8016b84:	4930      	ldr	r1, [pc, #192]	; (8016c48 <icmp_input+0x204>)
 8016b86:	482f      	ldr	r0, [pc, #188]	; (8016c44 <icmp_input+0x200>)
 8016b88:	f001 fd80 	bl	801868c <iprintf>
          goto icmperr;
 8016b8c:	e04b      	b.n	8016c26 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	685b      	ldr	r3, [r3, #4]
 8016b92:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8016b94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016b96:	4619      	mov	r1, r3
 8016b98:	6878      	ldr	r0, [r7, #4]
 8016b9a:	f7f7 fc55 	bl	800e448 <pbuf_add_header>
 8016b9e:	4603      	mov	r3, r0
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d12b      	bne.n	8016bfc <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	685b      	ldr	r3, [r3, #4]
 8016ba8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016baa:	69fb      	ldr	r3, [r7, #28]
 8016bac:	681a      	ldr	r2, [r3, #0]
 8016bae:	68fb      	ldr	r3, [r7, #12]
 8016bb0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016bb2:	4b20      	ldr	r3, [pc, #128]	; (8016c34 <icmp_input+0x1f0>)
 8016bb4:	691a      	ldr	r2, [r3, #16]
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016bba:	693b      	ldr	r3, [r7, #16]
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8016bc0:	693b      	ldr	r3, [r7, #16]
 8016bc2:	2200      	movs	r2, #0
 8016bc4:	709a      	strb	r2, [r3, #2]
 8016bc6:	2200      	movs	r2, #0
 8016bc8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	22ff      	movs	r2, #255	; 0xff
 8016bce:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	729a      	strb	r2, [r3, #10]
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016bda:	683b      	ldr	r3, [r7, #0]
 8016bdc:	9302      	str	r3, [sp, #8]
 8016bde:	2301      	movs	r3, #1
 8016be0:	9301      	str	r3, [sp, #4]
 8016be2:	2300      	movs	r3, #0
 8016be4:	9300      	str	r3, [sp, #0]
 8016be6:	23ff      	movs	r3, #255	; 0xff
 8016be8:	2200      	movs	r2, #0
 8016bea:	69f9      	ldr	r1, [r7, #28]
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f000 fa75 	bl	80170dc <ip4_output_if>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016bf6:	e001      	b.n	8016bfc <icmp_input+0x1b8>
      break;
 8016bf8:	bf00      	nop
 8016bfa:	e000      	b.n	8016bfe <icmp_input+0x1ba>
      break;
 8016bfc:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016bfe:	6878      	ldr	r0, [r7, #4]
 8016c00:	f7f7 fcea 	bl	800e5d8 <pbuf_free>
  return;
 8016c04:	e013      	b.n	8016c2e <icmp_input+0x1ea>
    goto lenerr;
 8016c06:	bf00      	nop
 8016c08:	e002      	b.n	8016c10 <icmp_input+0x1cc>
    goto lenerr;
 8016c0a:	bf00      	nop
 8016c0c:	e000      	b.n	8016c10 <icmp_input+0x1cc>
        goto lenerr;
 8016c0e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016c10:	6878      	ldr	r0, [r7, #4]
 8016c12:	f7f7 fce1 	bl	800e5d8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016c16:	e00a      	b.n	8016c2e <icmp_input+0x1ea>
        goto icmperr;
 8016c18:	bf00      	nop
 8016c1a:	e004      	b.n	8016c26 <icmp_input+0x1e2>
        goto icmperr;
 8016c1c:	bf00      	nop
 8016c1e:	e002      	b.n	8016c26 <icmp_input+0x1e2>
          goto icmperr;
 8016c20:	bf00      	nop
 8016c22:	e000      	b.n	8016c26 <icmp_input+0x1e2>
          goto icmperr;
 8016c24:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016c26:	6878      	ldr	r0, [r7, #4]
 8016c28:	f7f7 fcd6 	bl	800e5d8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016c2c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016c2e:	3728      	adds	r7, #40	; 0x28
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}
 8016c34:	2000852c 	.word	0x2000852c
 8016c38:	20008540 	.word	0x20008540
 8016c3c:	0801cb9c 	.word	0x0801cb9c
 8016c40:	0801cbd4 	.word	0x0801cbd4
 8016c44:	0801cc0c 	.word	0x0801cc0c
 8016c48:	0801cc34 	.word	0x0801cc34

08016c4c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016c4c:	b580      	push	{r7, lr}
 8016c4e:	b082      	sub	sp, #8
 8016c50:	af00      	add	r7, sp, #0
 8016c52:	6078      	str	r0, [r7, #4]
 8016c54:	460b      	mov	r3, r1
 8016c56:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016c58:	78fb      	ldrb	r3, [r7, #3]
 8016c5a:	461a      	mov	r2, r3
 8016c5c:	2103      	movs	r1, #3
 8016c5e:	6878      	ldr	r0, [r7, #4]
 8016c60:	f000 f814 	bl	8016c8c <icmp_send_response>
}
 8016c64:	bf00      	nop
 8016c66:	3708      	adds	r7, #8
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b082      	sub	sp, #8
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
 8016c74:	460b      	mov	r3, r1
 8016c76:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016c78:	78fb      	ldrb	r3, [r7, #3]
 8016c7a:	461a      	mov	r2, r3
 8016c7c:	210b      	movs	r1, #11
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f000 f804 	bl	8016c8c <icmp_send_response>
}
 8016c84:	bf00      	nop
 8016c86:	3708      	adds	r7, #8
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	bd80      	pop	{r7, pc}

08016c8c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016c8c:	b580      	push	{r7, lr}
 8016c8e:	b08c      	sub	sp, #48	; 0x30
 8016c90:	af04      	add	r7, sp, #16
 8016c92:	6078      	str	r0, [r7, #4]
 8016c94:	460b      	mov	r3, r1
 8016c96:	70fb      	strb	r3, [r7, #3]
 8016c98:	4613      	mov	r3, r2
 8016c9a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016c9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ca0:	2124      	movs	r1, #36	; 0x24
 8016ca2:	2022      	movs	r0, #34	; 0x22
 8016ca4:	f7f7 f982 	bl	800dfac <pbuf_alloc>
 8016ca8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016caa:	69fb      	ldr	r3, [r7, #28]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d04c      	beq.n	8016d4a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016cb0:	69fb      	ldr	r3, [r7, #28]
 8016cb2:	895b      	ldrh	r3, [r3, #10]
 8016cb4:	2b23      	cmp	r3, #35	; 0x23
 8016cb6:	d806      	bhi.n	8016cc6 <icmp_send_response+0x3a>
 8016cb8:	4b26      	ldr	r3, [pc, #152]	; (8016d54 <icmp_send_response+0xc8>)
 8016cba:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016cbe:	4926      	ldr	r1, [pc, #152]	; (8016d58 <icmp_send_response+0xcc>)
 8016cc0:	4826      	ldr	r0, [pc, #152]	; (8016d5c <icmp_send_response+0xd0>)
 8016cc2:	f001 fce3 	bl	801868c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016ccc:	69fb      	ldr	r3, [r7, #28]
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016cd2:	697b      	ldr	r3, [r7, #20]
 8016cd4:	78fa      	ldrb	r2, [r7, #3]
 8016cd6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016cd8:	697b      	ldr	r3, [r7, #20]
 8016cda:	78ba      	ldrb	r2, [r7, #2]
 8016cdc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016cde:	697b      	ldr	r3, [r7, #20]
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	711a      	strb	r2, [r3, #4]
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016ce8:	697b      	ldr	r3, [r7, #20]
 8016cea:	2200      	movs	r2, #0
 8016cec:	719a      	strb	r2, [r3, #6]
 8016cee:	2200      	movs	r2, #0
 8016cf0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016cf2:	69fb      	ldr	r3, [r7, #28]
 8016cf4:	685b      	ldr	r3, [r3, #4]
 8016cf6:	f103 0008 	add.w	r0, r3, #8
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	685b      	ldr	r3, [r3, #4]
 8016cfe:	221c      	movs	r2, #28
 8016d00:	4619      	mov	r1, r3
 8016d02:	f001 fc03 	bl	801850c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016d06:	69bb      	ldr	r3, [r7, #24]
 8016d08:	68db      	ldr	r3, [r3, #12]
 8016d0a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016d0c:	f107 030c 	add.w	r3, r7, #12
 8016d10:	4618      	mov	r0, r3
 8016d12:	f000 f825 	bl	8016d60 <ip4_route>
 8016d16:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016d18:	693b      	ldr	r3, [r7, #16]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d011      	beq.n	8016d42 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016d1e:	697b      	ldr	r3, [r7, #20]
 8016d20:	2200      	movs	r2, #0
 8016d22:	709a      	strb	r2, [r3, #2]
 8016d24:	2200      	movs	r2, #0
 8016d26:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016d28:	f107 020c 	add.w	r2, r7, #12
 8016d2c:	693b      	ldr	r3, [r7, #16]
 8016d2e:	9302      	str	r3, [sp, #8]
 8016d30:	2301      	movs	r3, #1
 8016d32:	9301      	str	r3, [sp, #4]
 8016d34:	2300      	movs	r3, #0
 8016d36:	9300      	str	r3, [sp, #0]
 8016d38:	23ff      	movs	r3, #255	; 0xff
 8016d3a:	2100      	movs	r1, #0
 8016d3c:	69f8      	ldr	r0, [r7, #28]
 8016d3e:	f000 f9cd 	bl	80170dc <ip4_output_if>
  }
  pbuf_free(q);
 8016d42:	69f8      	ldr	r0, [r7, #28]
 8016d44:	f7f7 fc48 	bl	800e5d8 <pbuf_free>
 8016d48:	e000      	b.n	8016d4c <icmp_send_response+0xc0>
    return;
 8016d4a:	bf00      	nop
}
 8016d4c:	3720      	adds	r7, #32
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}
 8016d52:	bf00      	nop
 8016d54:	0801cb9c 	.word	0x0801cb9c
 8016d58:	0801cc68 	.word	0x0801cc68
 8016d5c:	0801cc0c 	.word	0x0801cc0c

08016d60 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016d60:	b480      	push	{r7}
 8016d62:	b085      	sub	sp, #20
 8016d64:	af00      	add	r7, sp, #0
 8016d66:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016d68:	4b33      	ldr	r3, [pc, #204]	; (8016e38 <ip4_route+0xd8>)
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	60fb      	str	r3, [r7, #12]
 8016d6e:	e036      	b.n	8016dde <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d76:	f003 0301 	and.w	r3, r3, #1
 8016d7a:	b2db      	uxtb	r3, r3
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d02b      	beq.n	8016dd8 <ip4_route+0x78>
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016d86:	089b      	lsrs	r3, r3, #2
 8016d88:	f003 0301 	and.w	r3, r3, #1
 8016d8c:	b2db      	uxtb	r3, r3
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d022      	beq.n	8016dd8 <ip4_route+0x78>
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	3304      	adds	r3, #4
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d01d      	beq.n	8016dd8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	681a      	ldr	r2, [r3, #0]
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	3304      	adds	r3, #4
 8016da4:	681b      	ldr	r3, [r3, #0]
 8016da6:	405a      	eors	r2, r3
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	3308      	adds	r3, #8
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	4013      	ands	r3, r2
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d101      	bne.n	8016db8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	e038      	b.n	8016e2a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016dbe:	f003 0302 	and.w	r3, r3, #2
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d108      	bne.n	8016dd8 <ip4_route+0x78>
 8016dc6:	687b      	ldr	r3, [r7, #4]
 8016dc8:	681a      	ldr	r2, [r3, #0]
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	330c      	adds	r3, #12
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	429a      	cmp	r2, r3
 8016dd2:	d101      	bne.n	8016dd8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	e028      	b.n	8016e2a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	60fb      	str	r3, [r7, #12]
 8016dde:	68fb      	ldr	r3, [r7, #12]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d1c5      	bne.n	8016d70 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016de4:	4b15      	ldr	r3, [pc, #84]	; (8016e3c <ip4_route+0xdc>)
 8016de6:	681b      	ldr	r3, [r3, #0]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d01a      	beq.n	8016e22 <ip4_route+0xc2>
 8016dec:	4b13      	ldr	r3, [pc, #76]	; (8016e3c <ip4_route+0xdc>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016df4:	f003 0301 	and.w	r3, r3, #1
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d012      	beq.n	8016e22 <ip4_route+0xc2>
 8016dfc:	4b0f      	ldr	r3, [pc, #60]	; (8016e3c <ip4_route+0xdc>)
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e04:	f003 0304 	and.w	r3, r3, #4
 8016e08:	2b00      	cmp	r3, #0
 8016e0a:	d00a      	beq.n	8016e22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016e0c:	4b0b      	ldr	r3, [pc, #44]	; (8016e3c <ip4_route+0xdc>)
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	3304      	adds	r3, #4
 8016e12:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d004      	beq.n	8016e22 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	681b      	ldr	r3, [r3, #0]
 8016e1c:	b2db      	uxtb	r3, r3
 8016e1e:	2b7f      	cmp	r3, #127	; 0x7f
 8016e20:	d101      	bne.n	8016e26 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016e22:	2300      	movs	r3, #0
 8016e24:	e001      	b.n	8016e2a <ip4_route+0xca>
  }

  return netif_default;
 8016e26:	4b05      	ldr	r3, [pc, #20]	; (8016e3c <ip4_route+0xdc>)
 8016e28:	681b      	ldr	r3, [r3, #0]
}
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	3714      	adds	r7, #20
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e34:	4770      	bx	lr
 8016e36:	bf00      	nop
 8016e38:	2000bd78 	.word	0x2000bd78
 8016e3c:	2000bd7c 	.word	0x2000bd7c

08016e40 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016e40:	b580      	push	{r7, lr}
 8016e42:	b082      	sub	sp, #8
 8016e44:	af00      	add	r7, sp, #0
 8016e46:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016e4e:	f003 0301 	and.w	r3, r3, #1
 8016e52:	b2db      	uxtb	r3, r3
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d016      	beq.n	8016e86 <ip4_input_accept+0x46>
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	3304      	adds	r3, #4
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d011      	beq.n	8016e86 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016e62:	4b0b      	ldr	r3, [pc, #44]	; (8016e90 <ip4_input_accept+0x50>)
 8016e64:	695a      	ldr	r2, [r3, #20]
 8016e66:	687b      	ldr	r3, [r7, #4]
 8016e68:	3304      	adds	r3, #4
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d008      	beq.n	8016e82 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016e70:	4b07      	ldr	r3, [pc, #28]	; (8016e90 <ip4_input_accept+0x50>)
 8016e72:	695b      	ldr	r3, [r3, #20]
 8016e74:	6879      	ldr	r1, [r7, #4]
 8016e76:	4618      	mov	r0, r3
 8016e78:	f000 fa08 	bl	801728c <ip4_addr_isbroadcast_u32>
 8016e7c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d001      	beq.n	8016e86 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016e82:	2301      	movs	r3, #1
 8016e84:	e000      	b.n	8016e88 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016e86:	2300      	movs	r3, #0
}
 8016e88:	4618      	mov	r0, r3
 8016e8a:	3708      	adds	r7, #8
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	bd80      	pop	{r7, pc}
 8016e90:	2000852c 	.word	0x2000852c

08016e94 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016e94:	b580      	push	{r7, lr}
 8016e96:	b086      	sub	sp, #24
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
 8016e9c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016ea4:	697b      	ldr	r3, [r7, #20]
 8016ea6:	781b      	ldrb	r3, [r3, #0]
 8016ea8:	091b      	lsrs	r3, r3, #4
 8016eaa:	b2db      	uxtb	r3, r3
 8016eac:	2b04      	cmp	r3, #4
 8016eae:	d004      	beq.n	8016eba <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016eb0:	6878      	ldr	r0, [r7, #4]
 8016eb2:	f7f7 fb91 	bl	800e5d8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	e107      	b.n	80170ca <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016eba:	697b      	ldr	r3, [r7, #20]
 8016ebc:	781b      	ldrb	r3, [r3, #0]
 8016ebe:	f003 030f 	and.w	r3, r3, #15
 8016ec2:	b2db      	uxtb	r3, r3
 8016ec4:	009b      	lsls	r3, r3, #2
 8016ec6:	b2db      	uxtb	r3, r3
 8016ec8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016eca:	697b      	ldr	r3, [r7, #20]
 8016ecc:	885b      	ldrh	r3, [r3, #2]
 8016ece:	b29b      	uxth	r3, r3
 8016ed0:	4618      	mov	r0, r3
 8016ed2:	f7f5 fcd9 	bl	800c888 <lwip_htons>
 8016ed6:	4603      	mov	r3, r0
 8016ed8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	891b      	ldrh	r3, [r3, #8]
 8016ede:	89ba      	ldrh	r2, [r7, #12]
 8016ee0:	429a      	cmp	r2, r3
 8016ee2:	d204      	bcs.n	8016eee <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016ee4:	89bb      	ldrh	r3, [r7, #12]
 8016ee6:	4619      	mov	r1, r3
 8016ee8:	6878      	ldr	r0, [r7, #4]
 8016eea:	f7f7 f9bd 	bl	800e268 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	895b      	ldrh	r3, [r3, #10]
 8016ef2:	89fa      	ldrh	r2, [r7, #14]
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	d807      	bhi.n	8016f08 <ip4_input+0x74>
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	891b      	ldrh	r3, [r3, #8]
 8016efc:	89ba      	ldrh	r2, [r7, #12]
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d802      	bhi.n	8016f08 <ip4_input+0x74>
 8016f02:	89fb      	ldrh	r3, [r7, #14]
 8016f04:	2b13      	cmp	r3, #19
 8016f06:	d804      	bhi.n	8016f12 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016f08:	6878      	ldr	r0, [r7, #4]
 8016f0a:	f7f7 fb65 	bl	800e5d8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016f0e:	2300      	movs	r3, #0
 8016f10:	e0db      	b.n	80170ca <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016f12:	697b      	ldr	r3, [r7, #20]
 8016f14:	691b      	ldr	r3, [r3, #16]
 8016f16:	4a6f      	ldr	r2, [pc, #444]	; (80170d4 <ip4_input+0x240>)
 8016f18:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016f1a:	697b      	ldr	r3, [r7, #20]
 8016f1c:	68db      	ldr	r3, [r3, #12]
 8016f1e:	4a6d      	ldr	r2, [pc, #436]	; (80170d4 <ip4_input+0x240>)
 8016f20:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016f22:	4b6c      	ldr	r3, [pc, #432]	; (80170d4 <ip4_input+0x240>)
 8016f24:	695b      	ldr	r3, [r3, #20]
 8016f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016f2a:	2be0      	cmp	r3, #224	; 0xe0
 8016f2c:	d112      	bne.n	8016f54 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016f34:	f003 0301 	and.w	r3, r3, #1
 8016f38:	b2db      	uxtb	r3, r3
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d007      	beq.n	8016f4e <ip4_input+0xba>
 8016f3e:	683b      	ldr	r3, [r7, #0]
 8016f40:	3304      	adds	r3, #4
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d002      	beq.n	8016f4e <ip4_input+0xba>
      netif = inp;
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	613b      	str	r3, [r7, #16]
 8016f4c:	e02a      	b.n	8016fa4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016f4e:	2300      	movs	r3, #0
 8016f50:	613b      	str	r3, [r7, #16]
 8016f52:	e027      	b.n	8016fa4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016f54:	6838      	ldr	r0, [r7, #0]
 8016f56:	f7ff ff73 	bl	8016e40 <ip4_input_accept>
 8016f5a:	4603      	mov	r3, r0
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	d002      	beq.n	8016f66 <ip4_input+0xd2>
      netif = inp;
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	613b      	str	r3, [r7, #16]
 8016f64:	e01e      	b.n	8016fa4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016f66:	2300      	movs	r3, #0
 8016f68:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016f6a:	4b5a      	ldr	r3, [pc, #360]	; (80170d4 <ip4_input+0x240>)
 8016f6c:	695b      	ldr	r3, [r3, #20]
 8016f6e:	b2db      	uxtb	r3, r3
 8016f70:	2b7f      	cmp	r3, #127	; 0x7f
 8016f72:	d017      	beq.n	8016fa4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016f74:	4b58      	ldr	r3, [pc, #352]	; (80170d8 <ip4_input+0x244>)
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	613b      	str	r3, [r7, #16]
 8016f7a:	e00e      	b.n	8016f9a <ip4_input+0x106>
          if (netif == inp) {
 8016f7c:	693a      	ldr	r2, [r7, #16]
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	429a      	cmp	r2, r3
 8016f82:	d006      	beq.n	8016f92 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016f84:	6938      	ldr	r0, [r7, #16]
 8016f86:	f7ff ff5b 	bl	8016e40 <ip4_input_accept>
 8016f8a:	4603      	mov	r3, r0
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d108      	bne.n	8016fa2 <ip4_input+0x10e>
 8016f90:	e000      	b.n	8016f94 <ip4_input+0x100>
            continue;
 8016f92:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016f94:	693b      	ldr	r3, [r7, #16]
 8016f96:	681b      	ldr	r3, [r3, #0]
 8016f98:	613b      	str	r3, [r7, #16]
 8016f9a:	693b      	ldr	r3, [r7, #16]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d1ed      	bne.n	8016f7c <ip4_input+0xe8>
 8016fa0:	e000      	b.n	8016fa4 <ip4_input+0x110>
            break;
 8016fa2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016fa4:	4b4b      	ldr	r3, [pc, #300]	; (80170d4 <ip4_input+0x240>)
 8016fa6:	691b      	ldr	r3, [r3, #16]
 8016fa8:	6839      	ldr	r1, [r7, #0]
 8016faa:	4618      	mov	r0, r3
 8016fac:	f000 f96e 	bl	801728c <ip4_addr_isbroadcast_u32>
 8016fb0:	4603      	mov	r3, r0
 8016fb2:	2b00      	cmp	r3, #0
 8016fb4:	d105      	bne.n	8016fc2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016fb6:	4b47      	ldr	r3, [pc, #284]	; (80170d4 <ip4_input+0x240>)
 8016fb8:	691b      	ldr	r3, [r3, #16]
 8016fba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016fbe:	2be0      	cmp	r3, #224	; 0xe0
 8016fc0:	d104      	bne.n	8016fcc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f7f7 fb08 	bl	800e5d8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	e07e      	b.n	80170ca <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016fcc:	693b      	ldr	r3, [r7, #16]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d104      	bne.n	8016fdc <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016fd2:	6878      	ldr	r0, [r7, #4]
 8016fd4:	f7f7 fb00 	bl	800e5d8 <pbuf_free>
    return ERR_OK;
 8016fd8:	2300      	movs	r3, #0
 8016fda:	e076      	b.n	80170ca <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	88db      	ldrh	r3, [r3, #6]
 8016fe0:	b29b      	uxth	r3, r3
 8016fe2:	461a      	mov	r2, r3
 8016fe4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016fe8:	4013      	ands	r3, r2
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d00b      	beq.n	8017006 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016fee:	6878      	ldr	r0, [r7, #4]
 8016ff0:	f000 fc92 	bl	8017918 <ip4_reass>
 8016ff4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d101      	bne.n	8017000 <ip4_input+0x16c>
      return ERR_OK;
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	e064      	b.n	80170ca <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	685b      	ldr	r3, [r3, #4]
 8017004:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017006:	4a33      	ldr	r2, [pc, #204]	; (80170d4 <ip4_input+0x240>)
 8017008:	693b      	ldr	r3, [r7, #16]
 801700a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801700c:	4a31      	ldr	r2, [pc, #196]	; (80170d4 <ip4_input+0x240>)
 801700e:	683b      	ldr	r3, [r7, #0]
 8017010:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017012:	4a30      	ldr	r2, [pc, #192]	; (80170d4 <ip4_input+0x240>)
 8017014:	697b      	ldr	r3, [r7, #20]
 8017016:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	781b      	ldrb	r3, [r3, #0]
 801701c:	f003 030f 	and.w	r3, r3, #15
 8017020:	b2db      	uxtb	r3, r3
 8017022:	009b      	lsls	r3, r3, #2
 8017024:	b2db      	uxtb	r3, r3
 8017026:	b29a      	uxth	r2, r3
 8017028:	4b2a      	ldr	r3, [pc, #168]	; (80170d4 <ip4_input+0x240>)
 801702a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801702c:	89fb      	ldrh	r3, [r7, #14]
 801702e:	4619      	mov	r1, r3
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f7f7 fa19 	bl	800e468 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017036:	697b      	ldr	r3, [r7, #20]
 8017038:	7a5b      	ldrb	r3, [r3, #9]
 801703a:	2b11      	cmp	r3, #17
 801703c:	d006      	beq.n	801704c <ip4_input+0x1b8>
 801703e:	2b11      	cmp	r3, #17
 8017040:	dc13      	bgt.n	801706a <ip4_input+0x1d6>
 8017042:	2b01      	cmp	r3, #1
 8017044:	d00c      	beq.n	8017060 <ip4_input+0x1cc>
 8017046:	2b06      	cmp	r3, #6
 8017048:	d005      	beq.n	8017056 <ip4_input+0x1c2>
 801704a:	e00e      	b.n	801706a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801704c:	6839      	ldr	r1, [r7, #0]
 801704e:	6878      	ldr	r0, [r7, #4]
 8017050:	f7fe f970 	bl	8015334 <udp_input>
        break;
 8017054:	e026      	b.n	80170a4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017056:	6839      	ldr	r1, [r7, #0]
 8017058:	6878      	ldr	r0, [r7, #4]
 801705a:	f7f9 fd2d 	bl	8010ab8 <tcp_input>
        break;
 801705e:	e021      	b.n	80170a4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017060:	6839      	ldr	r1, [r7, #0]
 8017062:	6878      	ldr	r0, [r7, #4]
 8017064:	f7ff fcee 	bl	8016a44 <icmp_input>
        break;
 8017068:	e01c      	b.n	80170a4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801706a:	4b1a      	ldr	r3, [pc, #104]	; (80170d4 <ip4_input+0x240>)
 801706c:	695b      	ldr	r3, [r3, #20]
 801706e:	6939      	ldr	r1, [r7, #16]
 8017070:	4618      	mov	r0, r3
 8017072:	f000 f90b 	bl	801728c <ip4_addr_isbroadcast_u32>
 8017076:	4603      	mov	r3, r0
 8017078:	2b00      	cmp	r3, #0
 801707a:	d10f      	bne.n	801709c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801707c:	4b15      	ldr	r3, [pc, #84]	; (80170d4 <ip4_input+0x240>)
 801707e:	695b      	ldr	r3, [r3, #20]
 8017080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017084:	2be0      	cmp	r3, #224	; 0xe0
 8017086:	d009      	beq.n	801709c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017088:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801708c:	4619      	mov	r1, r3
 801708e:	6878      	ldr	r0, [r7, #4]
 8017090:	f7f7 fa5d 	bl	800e54e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8017094:	2102      	movs	r1, #2
 8017096:	6878      	ldr	r0, [r7, #4]
 8017098:	f7ff fdd8 	bl	8016c4c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f7f7 fa9b 	bl	800e5d8 <pbuf_free>
        break;
 80170a2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80170a4:	4b0b      	ldr	r3, [pc, #44]	; (80170d4 <ip4_input+0x240>)
 80170a6:	2200      	movs	r2, #0
 80170a8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80170aa:	4b0a      	ldr	r3, [pc, #40]	; (80170d4 <ip4_input+0x240>)
 80170ac:	2200      	movs	r2, #0
 80170ae:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80170b0:	4b08      	ldr	r3, [pc, #32]	; (80170d4 <ip4_input+0x240>)
 80170b2:	2200      	movs	r2, #0
 80170b4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80170b6:	4b07      	ldr	r3, [pc, #28]	; (80170d4 <ip4_input+0x240>)
 80170b8:	2200      	movs	r2, #0
 80170ba:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80170bc:	4b05      	ldr	r3, [pc, #20]	; (80170d4 <ip4_input+0x240>)
 80170be:	2200      	movs	r2, #0
 80170c0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80170c2:	4b04      	ldr	r3, [pc, #16]	; (80170d4 <ip4_input+0x240>)
 80170c4:	2200      	movs	r2, #0
 80170c6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80170c8:	2300      	movs	r3, #0
}
 80170ca:	4618      	mov	r0, r3
 80170cc:	3718      	adds	r7, #24
 80170ce:	46bd      	mov	sp, r7
 80170d0:	bd80      	pop	{r7, pc}
 80170d2:	bf00      	nop
 80170d4:	2000852c 	.word	0x2000852c
 80170d8:	2000bd78 	.word	0x2000bd78

080170dc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b08a      	sub	sp, #40	; 0x28
 80170e0:	af04      	add	r7, sp, #16
 80170e2:	60f8      	str	r0, [r7, #12]
 80170e4:	60b9      	str	r1, [r7, #8]
 80170e6:	607a      	str	r2, [r7, #4]
 80170e8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d009      	beq.n	8017108 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d003      	beq.n	8017102 <ip4_output_if+0x26>
 80170fa:	68bb      	ldr	r3, [r7, #8]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d102      	bne.n	8017108 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017104:	3304      	adds	r3, #4
 8017106:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017108:	78fa      	ldrb	r2, [r7, #3]
 801710a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801710c:	9302      	str	r3, [sp, #8]
 801710e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017112:	9301      	str	r3, [sp, #4]
 8017114:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017118:	9300      	str	r3, [sp, #0]
 801711a:	4613      	mov	r3, r2
 801711c:	687a      	ldr	r2, [r7, #4]
 801711e:	6979      	ldr	r1, [r7, #20]
 8017120:	68f8      	ldr	r0, [r7, #12]
 8017122:	f000 f805 	bl	8017130 <ip4_output_if_src>
 8017126:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017128:	4618      	mov	r0, r3
 801712a:	3718      	adds	r7, #24
 801712c:	46bd      	mov	sp, r7
 801712e:	bd80      	pop	{r7, pc}

08017130 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017130:	b580      	push	{r7, lr}
 8017132:	b088      	sub	sp, #32
 8017134:	af00      	add	r7, sp, #0
 8017136:	60f8      	str	r0, [r7, #12]
 8017138:	60b9      	str	r1, [r7, #8]
 801713a:	607a      	str	r2, [r7, #4]
 801713c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	7b9b      	ldrb	r3, [r3, #14]
 8017142:	2b01      	cmp	r3, #1
 8017144:	d006      	beq.n	8017154 <ip4_output_if_src+0x24>
 8017146:	4b4b      	ldr	r3, [pc, #300]	; (8017274 <ip4_output_if_src+0x144>)
 8017148:	f44f 7255 	mov.w	r2, #852	; 0x354
 801714c:	494a      	ldr	r1, [pc, #296]	; (8017278 <ip4_output_if_src+0x148>)
 801714e:	484b      	ldr	r0, [pc, #300]	; (801727c <ip4_output_if_src+0x14c>)
 8017150:	f001 fa9c 	bl	801868c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d060      	beq.n	801721c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801715a:	2314      	movs	r3, #20
 801715c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801715e:	2114      	movs	r1, #20
 8017160:	68f8      	ldr	r0, [r7, #12]
 8017162:	f7f7 f971 	bl	800e448 <pbuf_add_header>
 8017166:	4603      	mov	r3, r0
 8017168:	2b00      	cmp	r3, #0
 801716a:	d002      	beq.n	8017172 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801716c:	f06f 0301 	mvn.w	r3, #1
 8017170:	e07c      	b.n	801726c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	685b      	ldr	r3, [r3, #4]
 8017176:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	895b      	ldrh	r3, [r3, #10]
 801717c:	2b13      	cmp	r3, #19
 801717e:	d806      	bhi.n	801718e <ip4_output_if_src+0x5e>
 8017180:	4b3c      	ldr	r3, [pc, #240]	; (8017274 <ip4_output_if_src+0x144>)
 8017182:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017186:	493e      	ldr	r1, [pc, #248]	; (8017280 <ip4_output_if_src+0x150>)
 8017188:	483c      	ldr	r0, [pc, #240]	; (801727c <ip4_output_if_src+0x14c>)
 801718a:	f001 fa7f 	bl	801868c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801718e:	69fb      	ldr	r3, [r7, #28]
 8017190:	78fa      	ldrb	r2, [r7, #3]
 8017192:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017194:	69fb      	ldr	r3, [r7, #28]
 8017196:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801719a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	681a      	ldr	r2, [r3, #0]
 80171a0:	69fb      	ldr	r3, [r7, #28]
 80171a2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80171a4:	8b7b      	ldrh	r3, [r7, #26]
 80171a6:	089b      	lsrs	r3, r3, #2
 80171a8:	b29b      	uxth	r3, r3
 80171aa:	b2db      	uxtb	r3, r3
 80171ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171b0:	b2da      	uxtb	r2, r3
 80171b2:	69fb      	ldr	r3, [r7, #28]
 80171b4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80171b6:	69fb      	ldr	r3, [r7, #28]
 80171b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80171bc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	891b      	ldrh	r3, [r3, #8]
 80171c2:	4618      	mov	r0, r3
 80171c4:	f7f5 fb60 	bl	800c888 <lwip_htons>
 80171c8:	4603      	mov	r3, r0
 80171ca:	461a      	mov	r2, r3
 80171cc:	69fb      	ldr	r3, [r7, #28]
 80171ce:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80171d0:	69fb      	ldr	r3, [r7, #28]
 80171d2:	2200      	movs	r2, #0
 80171d4:	719a      	strb	r2, [r3, #6]
 80171d6:	2200      	movs	r2, #0
 80171d8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80171da:	4b2a      	ldr	r3, [pc, #168]	; (8017284 <ip4_output_if_src+0x154>)
 80171dc:	881b      	ldrh	r3, [r3, #0]
 80171de:	4618      	mov	r0, r3
 80171e0:	f7f5 fb52 	bl	800c888 <lwip_htons>
 80171e4:	4603      	mov	r3, r0
 80171e6:	461a      	mov	r2, r3
 80171e8:	69fb      	ldr	r3, [r7, #28]
 80171ea:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80171ec:	4b25      	ldr	r3, [pc, #148]	; (8017284 <ip4_output_if_src+0x154>)
 80171ee:	881b      	ldrh	r3, [r3, #0]
 80171f0:	3301      	adds	r3, #1
 80171f2:	b29a      	uxth	r2, r3
 80171f4:	4b23      	ldr	r3, [pc, #140]	; (8017284 <ip4_output_if_src+0x154>)
 80171f6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d104      	bne.n	8017208 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80171fe:	4b22      	ldr	r3, [pc, #136]	; (8017288 <ip4_output_if_src+0x158>)
 8017200:	681a      	ldr	r2, [r3, #0]
 8017202:	69fb      	ldr	r3, [r7, #28]
 8017204:	60da      	str	r2, [r3, #12]
 8017206:	e003      	b.n	8017210 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017208:	68bb      	ldr	r3, [r7, #8]
 801720a:	681a      	ldr	r2, [r3, #0]
 801720c:	69fb      	ldr	r3, [r7, #28]
 801720e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017210:	69fb      	ldr	r3, [r7, #28]
 8017212:	2200      	movs	r2, #0
 8017214:	729a      	strb	r2, [r3, #10]
 8017216:	2200      	movs	r2, #0
 8017218:	72da      	strb	r2, [r3, #11]
 801721a:	e00f      	b.n	801723c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	895b      	ldrh	r3, [r3, #10]
 8017220:	2b13      	cmp	r3, #19
 8017222:	d802      	bhi.n	801722a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017224:	f06f 0301 	mvn.w	r3, #1
 8017228:	e020      	b.n	801726c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801722a:	68fb      	ldr	r3, [r7, #12]
 801722c:	685b      	ldr	r3, [r3, #4]
 801722e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017230:	69fb      	ldr	r3, [r7, #28]
 8017232:	691b      	ldr	r3, [r3, #16]
 8017234:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017236:	f107 0314 	add.w	r3, r7, #20
 801723a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801723c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801723e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017240:	2b00      	cmp	r3, #0
 8017242:	d00c      	beq.n	801725e <ip4_output_if_src+0x12e>
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	891a      	ldrh	r2, [r3, #8]
 8017248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801724c:	429a      	cmp	r2, r3
 801724e:	d906      	bls.n	801725e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017250:	687a      	ldr	r2, [r7, #4]
 8017252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017254:	68f8      	ldr	r0, [r7, #12]
 8017256:	f000 fd4d 	bl	8017cf4 <ip4_frag>
 801725a:	4603      	mov	r3, r0
 801725c:	e006      	b.n	801726c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017260:	695b      	ldr	r3, [r3, #20]
 8017262:	687a      	ldr	r2, [r7, #4]
 8017264:	68f9      	ldr	r1, [r7, #12]
 8017266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017268:	4798      	blx	r3
 801726a:	4603      	mov	r3, r0
}
 801726c:	4618      	mov	r0, r3
 801726e:	3720      	adds	r7, #32
 8017270:	46bd      	mov	sp, r7
 8017272:	bd80      	pop	{r7, pc}
 8017274:	0801cc94 	.word	0x0801cc94
 8017278:	0801ccc8 	.word	0x0801ccc8
 801727c:	0801ccd4 	.word	0x0801ccd4
 8017280:	0801ccfc 	.word	0x0801ccfc
 8017284:	2000500e 	.word	0x2000500e
 8017288:	0801d19c 	.word	0x0801d19c

0801728c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801728c:	b480      	push	{r7}
 801728e:	b085      	sub	sp, #20
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172a0:	d002      	beq.n	80172a8 <ip4_addr_isbroadcast_u32+0x1c>
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d101      	bne.n	80172ac <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80172a8:	2301      	movs	r3, #1
 80172aa:	e02a      	b.n	8017302 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80172ac:	683b      	ldr	r3, [r7, #0]
 80172ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80172b2:	f003 0302 	and.w	r3, r3, #2
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d101      	bne.n	80172be <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80172ba:	2300      	movs	r3, #0
 80172bc:	e021      	b.n	8017302 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80172be:	683b      	ldr	r3, [r7, #0]
 80172c0:	3304      	adds	r3, #4
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	687a      	ldr	r2, [r7, #4]
 80172c6:	429a      	cmp	r2, r3
 80172c8:	d101      	bne.n	80172ce <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80172ca:	2300      	movs	r3, #0
 80172cc:	e019      	b.n	8017302 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80172ce:	68fa      	ldr	r2, [r7, #12]
 80172d0:	683b      	ldr	r3, [r7, #0]
 80172d2:	3304      	adds	r3, #4
 80172d4:	681b      	ldr	r3, [r3, #0]
 80172d6:	405a      	eors	r2, r3
 80172d8:	683b      	ldr	r3, [r7, #0]
 80172da:	3308      	adds	r3, #8
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	4013      	ands	r3, r2
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d10d      	bne.n	8017300 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	3308      	adds	r3, #8
 80172e8:	681b      	ldr	r3, [r3, #0]
 80172ea:	43da      	mvns	r2, r3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80172f0:	683b      	ldr	r3, [r7, #0]
 80172f2:	3308      	adds	r3, #8
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80172f8:	429a      	cmp	r2, r3
 80172fa:	d101      	bne.n	8017300 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80172fc:	2301      	movs	r3, #1
 80172fe:	e000      	b.n	8017302 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017300:	2300      	movs	r3, #0
  }
}
 8017302:	4618      	mov	r0, r3
 8017304:	3714      	adds	r7, #20
 8017306:	46bd      	mov	sp, r7
 8017308:	f85d 7b04 	ldr.w	r7, [sp], #4
 801730c:	4770      	bx	lr
	...

08017310 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b084      	sub	sp, #16
 8017314:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017316:	2300      	movs	r3, #0
 8017318:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801731a:	4b12      	ldr	r3, [pc, #72]	; (8017364 <ip_reass_tmr+0x54>)
 801731c:	681b      	ldr	r3, [r3, #0]
 801731e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017320:	e018      	b.n	8017354 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017322:	68fb      	ldr	r3, [r7, #12]
 8017324:	7fdb      	ldrb	r3, [r3, #31]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d00b      	beq.n	8017342 <ip_reass_tmr+0x32>
      r->timer--;
 801732a:	68fb      	ldr	r3, [r7, #12]
 801732c:	7fdb      	ldrb	r3, [r3, #31]
 801732e:	3b01      	subs	r3, #1
 8017330:	b2da      	uxtb	r2, r3
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	60fb      	str	r3, [r7, #12]
 8017340:	e008      	b.n	8017354 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017346:	68fb      	ldr	r3, [r7, #12]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801734c:	68b9      	ldr	r1, [r7, #8]
 801734e:	6878      	ldr	r0, [r7, #4]
 8017350:	f000 f80a 	bl	8017368 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d1e3      	bne.n	8017322 <ip_reass_tmr+0x12>
    }
  }
}
 801735a:	bf00      	nop
 801735c:	bf00      	nop
 801735e:	3710      	adds	r7, #16
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	20005010 	.word	0x20005010

08017368 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b088      	sub	sp, #32
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
 8017370:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017372:	2300      	movs	r3, #0
 8017374:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017376:	683a      	ldr	r2, [r7, #0]
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	429a      	cmp	r2, r3
 801737c:	d105      	bne.n	801738a <ip_reass_free_complete_datagram+0x22>
 801737e:	4b45      	ldr	r3, [pc, #276]	; (8017494 <ip_reass_free_complete_datagram+0x12c>)
 8017380:	22ab      	movs	r2, #171	; 0xab
 8017382:	4945      	ldr	r1, [pc, #276]	; (8017498 <ip_reass_free_complete_datagram+0x130>)
 8017384:	4845      	ldr	r0, [pc, #276]	; (801749c <ip_reass_free_complete_datagram+0x134>)
 8017386:	f001 f981 	bl	801868c <iprintf>
  if (prev != NULL) {
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d00a      	beq.n	80173a6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	687a      	ldr	r2, [r7, #4]
 8017396:	429a      	cmp	r2, r3
 8017398:	d005      	beq.n	80173a6 <ip_reass_free_complete_datagram+0x3e>
 801739a:	4b3e      	ldr	r3, [pc, #248]	; (8017494 <ip_reass_free_complete_datagram+0x12c>)
 801739c:	22ad      	movs	r2, #173	; 0xad
 801739e:	4940      	ldr	r1, [pc, #256]	; (80174a0 <ip_reass_free_complete_datagram+0x138>)
 80173a0:	483e      	ldr	r0, [pc, #248]	; (801749c <ip_reass_free_complete_datagram+0x134>)
 80173a2:	f001 f973 	bl	801868c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	685b      	ldr	r3, [r3, #4]
 80173aa:	685b      	ldr	r3, [r3, #4]
 80173ac:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80173ae:	697b      	ldr	r3, [r7, #20]
 80173b0:	889b      	ldrh	r3, [r3, #4]
 80173b2:	b29b      	uxth	r3, r3
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d12a      	bne.n	801740e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	685b      	ldr	r3, [r3, #4]
 80173bc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80173be:	697b      	ldr	r3, [r7, #20]
 80173c0:	681a      	ldr	r2, [r3, #0]
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80173c6:	69bb      	ldr	r3, [r7, #24]
 80173c8:	6858      	ldr	r0, [r3, #4]
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	3308      	adds	r3, #8
 80173ce:	2214      	movs	r2, #20
 80173d0:	4619      	mov	r1, r3
 80173d2:	f001 f89b 	bl	801850c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80173d6:	2101      	movs	r1, #1
 80173d8:	69b8      	ldr	r0, [r7, #24]
 80173da:	f7ff fc47 	bl	8016c6c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80173de:	69b8      	ldr	r0, [r7, #24]
 80173e0:	f7f7 f988 	bl	800e6f4 <pbuf_clen>
 80173e4:	4603      	mov	r3, r0
 80173e6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80173e8:	8bfa      	ldrh	r2, [r7, #30]
 80173ea:	8a7b      	ldrh	r3, [r7, #18]
 80173ec:	4413      	add	r3, r2
 80173ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80173f2:	db05      	blt.n	8017400 <ip_reass_free_complete_datagram+0x98>
 80173f4:	4b27      	ldr	r3, [pc, #156]	; (8017494 <ip_reass_free_complete_datagram+0x12c>)
 80173f6:	22bc      	movs	r2, #188	; 0xbc
 80173f8:	492a      	ldr	r1, [pc, #168]	; (80174a4 <ip_reass_free_complete_datagram+0x13c>)
 80173fa:	4828      	ldr	r0, [pc, #160]	; (801749c <ip_reass_free_complete_datagram+0x134>)
 80173fc:	f001 f946 	bl	801868c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017400:	8bfa      	ldrh	r2, [r7, #30]
 8017402:	8a7b      	ldrh	r3, [r7, #18]
 8017404:	4413      	add	r3, r2
 8017406:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017408:	69b8      	ldr	r0, [r7, #24]
 801740a:	f7f7 f8e5 	bl	800e5d8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	685b      	ldr	r3, [r3, #4]
 8017412:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017414:	e01f      	b.n	8017456 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017416:	69bb      	ldr	r3, [r7, #24]
 8017418:	685b      	ldr	r3, [r3, #4]
 801741a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801741c:	69bb      	ldr	r3, [r7, #24]
 801741e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017420:	697b      	ldr	r3, [r7, #20]
 8017422:	681b      	ldr	r3, [r3, #0]
 8017424:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017426:	68f8      	ldr	r0, [r7, #12]
 8017428:	f7f7 f964 	bl	800e6f4 <pbuf_clen>
 801742c:	4603      	mov	r3, r0
 801742e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017430:	8bfa      	ldrh	r2, [r7, #30]
 8017432:	8a7b      	ldrh	r3, [r7, #18]
 8017434:	4413      	add	r3, r2
 8017436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801743a:	db05      	blt.n	8017448 <ip_reass_free_complete_datagram+0xe0>
 801743c:	4b15      	ldr	r3, [pc, #84]	; (8017494 <ip_reass_free_complete_datagram+0x12c>)
 801743e:	22cc      	movs	r2, #204	; 0xcc
 8017440:	4918      	ldr	r1, [pc, #96]	; (80174a4 <ip_reass_free_complete_datagram+0x13c>)
 8017442:	4816      	ldr	r0, [pc, #88]	; (801749c <ip_reass_free_complete_datagram+0x134>)
 8017444:	f001 f922 	bl	801868c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017448:	8bfa      	ldrh	r2, [r7, #30]
 801744a:	8a7b      	ldrh	r3, [r7, #18]
 801744c:	4413      	add	r3, r2
 801744e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017450:	68f8      	ldr	r0, [r7, #12]
 8017452:	f7f7 f8c1 	bl	800e5d8 <pbuf_free>
  while (p != NULL) {
 8017456:	69bb      	ldr	r3, [r7, #24]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d1dc      	bne.n	8017416 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801745c:	6839      	ldr	r1, [r7, #0]
 801745e:	6878      	ldr	r0, [r7, #4]
 8017460:	f000 f8c2 	bl	80175e8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017464:	4b10      	ldr	r3, [pc, #64]	; (80174a8 <ip_reass_free_complete_datagram+0x140>)
 8017466:	881b      	ldrh	r3, [r3, #0]
 8017468:	8bfa      	ldrh	r2, [r7, #30]
 801746a:	429a      	cmp	r2, r3
 801746c:	d905      	bls.n	801747a <ip_reass_free_complete_datagram+0x112>
 801746e:	4b09      	ldr	r3, [pc, #36]	; (8017494 <ip_reass_free_complete_datagram+0x12c>)
 8017470:	22d2      	movs	r2, #210	; 0xd2
 8017472:	490e      	ldr	r1, [pc, #56]	; (80174ac <ip_reass_free_complete_datagram+0x144>)
 8017474:	4809      	ldr	r0, [pc, #36]	; (801749c <ip_reass_free_complete_datagram+0x134>)
 8017476:	f001 f909 	bl	801868c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801747a:	4b0b      	ldr	r3, [pc, #44]	; (80174a8 <ip_reass_free_complete_datagram+0x140>)
 801747c:	881a      	ldrh	r2, [r3, #0]
 801747e:	8bfb      	ldrh	r3, [r7, #30]
 8017480:	1ad3      	subs	r3, r2, r3
 8017482:	b29a      	uxth	r2, r3
 8017484:	4b08      	ldr	r3, [pc, #32]	; (80174a8 <ip_reass_free_complete_datagram+0x140>)
 8017486:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017488:	8bfb      	ldrh	r3, [r7, #30]
}
 801748a:	4618      	mov	r0, r3
 801748c:	3720      	adds	r7, #32
 801748e:	46bd      	mov	sp, r7
 8017490:	bd80      	pop	{r7, pc}
 8017492:	bf00      	nop
 8017494:	0801cd2c 	.word	0x0801cd2c
 8017498:	0801cd68 	.word	0x0801cd68
 801749c:	0801cd74 	.word	0x0801cd74
 80174a0:	0801cd9c 	.word	0x0801cd9c
 80174a4:	0801cdb0 	.word	0x0801cdb0
 80174a8:	20005014 	.word	0x20005014
 80174ac:	0801cdd0 	.word	0x0801cdd0

080174b0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80174b0:	b580      	push	{r7, lr}
 80174b2:	b08a      	sub	sp, #40	; 0x28
 80174b4:	af00      	add	r7, sp, #0
 80174b6:	6078      	str	r0, [r7, #4]
 80174b8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80174ba:	2300      	movs	r3, #0
 80174bc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80174be:	2300      	movs	r3, #0
 80174c0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80174c2:	2300      	movs	r3, #0
 80174c4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80174c6:	2300      	movs	r3, #0
 80174c8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80174ca:	2300      	movs	r3, #0
 80174cc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80174ce:	4b28      	ldr	r3, [pc, #160]	; (8017570 <ip_reass_remove_oldest_datagram+0xc0>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80174d4:	e030      	b.n	8017538 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80174d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174d8:	695a      	ldr	r2, [r3, #20]
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	68db      	ldr	r3, [r3, #12]
 80174de:	429a      	cmp	r2, r3
 80174e0:	d10c      	bne.n	80174fc <ip_reass_remove_oldest_datagram+0x4c>
 80174e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174e4:	699a      	ldr	r2, [r3, #24]
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	691b      	ldr	r3, [r3, #16]
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d106      	bne.n	80174fc <ip_reass_remove_oldest_datagram+0x4c>
 80174ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f0:	899a      	ldrh	r2, [r3, #12]
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	889b      	ldrh	r3, [r3, #4]
 80174f6:	b29b      	uxth	r3, r3
 80174f8:	429a      	cmp	r2, r3
 80174fa:	d014      	beq.n	8017526 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80174fc:	693b      	ldr	r3, [r7, #16]
 80174fe:	3301      	adds	r3, #1
 8017500:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017502:	6a3b      	ldr	r3, [r7, #32]
 8017504:	2b00      	cmp	r3, #0
 8017506:	d104      	bne.n	8017512 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801750a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801750c:	69fb      	ldr	r3, [r7, #28]
 801750e:	61bb      	str	r3, [r7, #24]
 8017510:	e009      	b.n	8017526 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017514:	7fda      	ldrb	r2, [r3, #31]
 8017516:	6a3b      	ldr	r3, [r7, #32]
 8017518:	7fdb      	ldrb	r3, [r3, #31]
 801751a:	429a      	cmp	r2, r3
 801751c:	d803      	bhi.n	8017526 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017520:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017522:	69fb      	ldr	r3, [r7, #28]
 8017524:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d001      	beq.n	8017532 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017530:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017534:	681b      	ldr	r3, [r3, #0]
 8017536:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801753a:	2b00      	cmp	r3, #0
 801753c:	d1cb      	bne.n	80174d6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801753e:	6a3b      	ldr	r3, [r7, #32]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d008      	beq.n	8017556 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017544:	69b9      	ldr	r1, [r7, #24]
 8017546:	6a38      	ldr	r0, [r7, #32]
 8017548:	f7ff ff0e 	bl	8017368 <ip_reass_free_complete_datagram>
 801754c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801754e:	697a      	ldr	r2, [r7, #20]
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	4413      	add	r3, r2
 8017554:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017556:	697a      	ldr	r2, [r7, #20]
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	429a      	cmp	r2, r3
 801755c:	da02      	bge.n	8017564 <ip_reass_remove_oldest_datagram+0xb4>
 801755e:	693b      	ldr	r3, [r7, #16]
 8017560:	2b01      	cmp	r3, #1
 8017562:	dcac      	bgt.n	80174be <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017564:	697b      	ldr	r3, [r7, #20]
}
 8017566:	4618      	mov	r0, r3
 8017568:	3728      	adds	r7, #40	; 0x28
 801756a:	46bd      	mov	sp, r7
 801756c:	bd80      	pop	{r7, pc}
 801756e:	bf00      	nop
 8017570:	20005010 	.word	0x20005010

08017574 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017574:	b580      	push	{r7, lr}
 8017576:	b084      	sub	sp, #16
 8017578:	af00      	add	r7, sp, #0
 801757a:	6078      	str	r0, [r7, #4]
 801757c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801757e:	2004      	movs	r0, #4
 8017580:	f7f6 f902 	bl	800d788 <memp_malloc>
 8017584:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	2b00      	cmp	r3, #0
 801758a:	d110      	bne.n	80175ae <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801758c:	6839      	ldr	r1, [r7, #0]
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f7ff ff8e 	bl	80174b0 <ip_reass_remove_oldest_datagram>
 8017594:	4602      	mov	r2, r0
 8017596:	683b      	ldr	r3, [r7, #0]
 8017598:	4293      	cmp	r3, r2
 801759a:	dc03      	bgt.n	80175a4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801759c:	2004      	movs	r0, #4
 801759e:	f7f6 f8f3 	bl	800d788 <memp_malloc>
 80175a2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80175a4:	68fb      	ldr	r3, [r7, #12]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d101      	bne.n	80175ae <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80175aa:	2300      	movs	r3, #0
 80175ac:	e016      	b.n	80175dc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80175ae:	2220      	movs	r2, #32
 80175b0:	2100      	movs	r1, #0
 80175b2:	68f8      	ldr	r0, [r7, #12]
 80175b4:	f000 ffb8 	bl	8018528 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	220f      	movs	r2, #15
 80175bc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80175be:	4b09      	ldr	r3, [pc, #36]	; (80175e4 <ip_reass_enqueue_new_datagram+0x70>)
 80175c0:	681a      	ldr	r2, [r3, #0]
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80175c6:	4a07      	ldr	r2, [pc, #28]	; (80175e4 <ip_reass_enqueue_new_datagram+0x70>)
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80175cc:	68fb      	ldr	r3, [r7, #12]
 80175ce:	3308      	adds	r3, #8
 80175d0:	2214      	movs	r2, #20
 80175d2:	6879      	ldr	r1, [r7, #4]
 80175d4:	4618      	mov	r0, r3
 80175d6:	f000 ff99 	bl	801850c <memcpy>
  return ipr;
 80175da:	68fb      	ldr	r3, [r7, #12]
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3710      	adds	r7, #16
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}
 80175e4:	20005010 	.word	0x20005010

080175e8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	b082      	sub	sp, #8
 80175ec:	af00      	add	r7, sp, #0
 80175ee:	6078      	str	r0, [r7, #4]
 80175f0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80175f2:	4b10      	ldr	r3, [pc, #64]	; (8017634 <ip_reass_dequeue_datagram+0x4c>)
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	687a      	ldr	r2, [r7, #4]
 80175f8:	429a      	cmp	r2, r3
 80175fa:	d104      	bne.n	8017606 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	4a0c      	ldr	r2, [pc, #48]	; (8017634 <ip_reass_dequeue_datagram+0x4c>)
 8017602:	6013      	str	r3, [r2, #0]
 8017604:	e00d      	b.n	8017622 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017606:	683b      	ldr	r3, [r7, #0]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d106      	bne.n	801761a <ip_reass_dequeue_datagram+0x32>
 801760c:	4b0a      	ldr	r3, [pc, #40]	; (8017638 <ip_reass_dequeue_datagram+0x50>)
 801760e:	f240 1245 	movw	r2, #325	; 0x145
 8017612:	490a      	ldr	r1, [pc, #40]	; (801763c <ip_reass_dequeue_datagram+0x54>)
 8017614:	480a      	ldr	r0, [pc, #40]	; (8017640 <ip_reass_dequeue_datagram+0x58>)
 8017616:	f001 f839 	bl	801868c <iprintf>
    prev->next = ipr->next;
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681a      	ldr	r2, [r3, #0]
 801761e:	683b      	ldr	r3, [r7, #0]
 8017620:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017622:	6879      	ldr	r1, [r7, #4]
 8017624:	2004      	movs	r0, #4
 8017626:	f7f6 f901 	bl	800d82c <memp_free>
}
 801762a:	bf00      	nop
 801762c:	3708      	adds	r7, #8
 801762e:	46bd      	mov	sp, r7
 8017630:	bd80      	pop	{r7, pc}
 8017632:	bf00      	nop
 8017634:	20005010 	.word	0x20005010
 8017638:	0801cd2c 	.word	0x0801cd2c
 801763c:	0801cdf4 	.word	0x0801cdf4
 8017640:	0801cd74 	.word	0x0801cd74

08017644 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017644:	b580      	push	{r7, lr}
 8017646:	b08c      	sub	sp, #48	; 0x30
 8017648:	af00      	add	r7, sp, #0
 801764a:	60f8      	str	r0, [r7, #12]
 801764c:	60b9      	str	r1, [r7, #8]
 801764e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017650:	2300      	movs	r3, #0
 8017652:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017654:	2301      	movs	r3, #1
 8017656:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017658:	68bb      	ldr	r3, [r7, #8]
 801765a:	685b      	ldr	r3, [r3, #4]
 801765c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801765e:	69fb      	ldr	r3, [r7, #28]
 8017660:	885b      	ldrh	r3, [r3, #2]
 8017662:	b29b      	uxth	r3, r3
 8017664:	4618      	mov	r0, r3
 8017666:	f7f5 f90f 	bl	800c888 <lwip_htons>
 801766a:	4603      	mov	r3, r0
 801766c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801766e:	69fb      	ldr	r3, [r7, #28]
 8017670:	781b      	ldrb	r3, [r3, #0]
 8017672:	f003 030f 	and.w	r3, r3, #15
 8017676:	b2db      	uxtb	r3, r3
 8017678:	009b      	lsls	r3, r3, #2
 801767a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801767c:	7e7b      	ldrb	r3, [r7, #25]
 801767e:	b29b      	uxth	r3, r3
 8017680:	8b7a      	ldrh	r2, [r7, #26]
 8017682:	429a      	cmp	r2, r3
 8017684:	d202      	bcs.n	801768c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017686:	f04f 33ff 	mov.w	r3, #4294967295
 801768a:	e135      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801768c:	7e7b      	ldrb	r3, [r7, #25]
 801768e:	b29b      	uxth	r3, r3
 8017690:	8b7a      	ldrh	r2, [r7, #26]
 8017692:	1ad3      	subs	r3, r2, r3
 8017694:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017696:	69fb      	ldr	r3, [r7, #28]
 8017698:	88db      	ldrh	r3, [r3, #6]
 801769a:	b29b      	uxth	r3, r3
 801769c:	4618      	mov	r0, r3
 801769e:	f7f5 f8f3 	bl	800c888 <lwip_htons>
 80176a2:	4603      	mov	r3, r0
 80176a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80176a8:	b29b      	uxth	r3, r3
 80176aa:	00db      	lsls	r3, r3, #3
 80176ac:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80176ae:	68bb      	ldr	r3, [r7, #8]
 80176b0:	685b      	ldr	r3, [r3, #4]
 80176b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80176b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176b6:	2200      	movs	r2, #0
 80176b8:	701a      	strb	r2, [r3, #0]
 80176ba:	2200      	movs	r2, #0
 80176bc:	705a      	strb	r2, [r3, #1]
 80176be:	2200      	movs	r2, #0
 80176c0:	709a      	strb	r2, [r3, #2]
 80176c2:	2200      	movs	r2, #0
 80176c4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80176c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176c8:	8afa      	ldrh	r2, [r7, #22]
 80176ca:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80176cc:	8afa      	ldrh	r2, [r7, #22]
 80176ce:	8b7b      	ldrh	r3, [r7, #26]
 80176d0:	4413      	add	r3, r2
 80176d2:	b29a      	uxth	r2, r3
 80176d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176d6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80176d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176da:	88db      	ldrh	r3, [r3, #6]
 80176dc:	b29b      	uxth	r3, r3
 80176de:	8afa      	ldrh	r2, [r7, #22]
 80176e0:	429a      	cmp	r2, r3
 80176e2:	d902      	bls.n	80176ea <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80176e4:	f04f 33ff 	mov.w	r3, #4294967295
 80176e8:	e106      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	685b      	ldr	r3, [r3, #4]
 80176ee:	627b      	str	r3, [r7, #36]	; 0x24
 80176f0:	e068      	b.n	80177c4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80176f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80176f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176fa:	889b      	ldrh	r3, [r3, #4]
 80176fc:	b29a      	uxth	r2, r3
 80176fe:	693b      	ldr	r3, [r7, #16]
 8017700:	889b      	ldrh	r3, [r3, #4]
 8017702:	b29b      	uxth	r3, r3
 8017704:	429a      	cmp	r2, r3
 8017706:	d235      	bcs.n	8017774 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8017708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801770a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801770c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801770e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017710:	2b00      	cmp	r3, #0
 8017712:	d020      	beq.n	8017756 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8017714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017716:	889b      	ldrh	r3, [r3, #4]
 8017718:	b29a      	uxth	r2, r3
 801771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801771c:	88db      	ldrh	r3, [r3, #6]
 801771e:	b29b      	uxth	r3, r3
 8017720:	429a      	cmp	r2, r3
 8017722:	d307      	bcc.n	8017734 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8017724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017726:	88db      	ldrh	r3, [r3, #6]
 8017728:	b29a      	uxth	r2, r3
 801772a:	693b      	ldr	r3, [r7, #16]
 801772c:	889b      	ldrh	r3, [r3, #4]
 801772e:	b29b      	uxth	r3, r3
 8017730:	429a      	cmp	r2, r3
 8017732:	d902      	bls.n	801773a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017734:	f04f 33ff 	mov.w	r3, #4294967295
 8017738:	e0de      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801773a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801773c:	68ba      	ldr	r2, [r7, #8]
 801773e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8017740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017742:	88db      	ldrh	r3, [r3, #6]
 8017744:	b29a      	uxth	r2, r3
 8017746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017748:	889b      	ldrh	r3, [r3, #4]
 801774a:	b29b      	uxth	r3, r3
 801774c:	429a      	cmp	r2, r3
 801774e:	d03d      	beq.n	80177cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017750:	2300      	movs	r3, #0
 8017752:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8017754:	e03a      	b.n	80177cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8017756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017758:	88db      	ldrh	r3, [r3, #6]
 801775a:	b29a      	uxth	r2, r3
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	889b      	ldrh	r3, [r3, #4]
 8017760:	b29b      	uxth	r3, r3
 8017762:	429a      	cmp	r2, r3
 8017764:	d902      	bls.n	801776c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017766:	f04f 33ff 	mov.w	r3, #4294967295
 801776a:	e0c5      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	68ba      	ldr	r2, [r7, #8]
 8017770:	605a      	str	r2, [r3, #4]
      break;
 8017772:	e02b      	b.n	80177cc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017776:	889b      	ldrh	r3, [r3, #4]
 8017778:	b29a      	uxth	r2, r3
 801777a:	693b      	ldr	r3, [r7, #16]
 801777c:	889b      	ldrh	r3, [r3, #4]
 801777e:	b29b      	uxth	r3, r3
 8017780:	429a      	cmp	r2, r3
 8017782:	d102      	bne.n	801778a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017784:	f04f 33ff 	mov.w	r3, #4294967295
 8017788:	e0b6      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801778a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801778c:	889b      	ldrh	r3, [r3, #4]
 801778e:	b29a      	uxth	r2, r3
 8017790:	693b      	ldr	r3, [r7, #16]
 8017792:	88db      	ldrh	r3, [r3, #6]
 8017794:	b29b      	uxth	r3, r3
 8017796:	429a      	cmp	r2, r3
 8017798:	d202      	bcs.n	80177a0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801779a:	f04f 33ff 	mov.w	r3, #4294967295
 801779e:	e0ab      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80177a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a2:	2b00      	cmp	r3, #0
 80177a4:	d009      	beq.n	80177ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80177a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a8:	88db      	ldrh	r3, [r3, #6]
 80177aa:	b29a      	uxth	r2, r3
 80177ac:	693b      	ldr	r3, [r7, #16]
 80177ae:	889b      	ldrh	r3, [r3, #4]
 80177b0:	b29b      	uxth	r3, r3
 80177b2:	429a      	cmp	r2, r3
 80177b4:	d001      	beq.n	80177ba <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80177b6:	2300      	movs	r3, #0
 80177b8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80177ba:	693b      	ldr	r3, [r7, #16]
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80177c0:	693b      	ldr	r3, [r7, #16]
 80177c2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80177c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d193      	bne.n	80176f2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80177ca:	e000      	b.n	80177ce <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80177cc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80177ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d12d      	bne.n	8017830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80177d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d01c      	beq.n	8017814 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80177da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177dc:	88db      	ldrh	r3, [r3, #6]
 80177de:	b29a      	uxth	r2, r3
 80177e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e2:	889b      	ldrh	r3, [r3, #4]
 80177e4:	b29b      	uxth	r3, r3
 80177e6:	429a      	cmp	r2, r3
 80177e8:	d906      	bls.n	80177f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80177ea:	4b45      	ldr	r3, [pc, #276]	; (8017900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80177ec:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80177f0:	4944      	ldr	r1, [pc, #272]	; (8017904 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80177f2:	4845      	ldr	r0, [pc, #276]	; (8017908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80177f4:	f000 ff4a 	bl	801868c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80177f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177fa:	68ba      	ldr	r2, [r7, #8]
 80177fc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80177fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017800:	88db      	ldrh	r3, [r3, #6]
 8017802:	b29a      	uxth	r2, r3
 8017804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017806:	889b      	ldrh	r3, [r3, #4]
 8017808:	b29b      	uxth	r3, r3
 801780a:	429a      	cmp	r2, r3
 801780c:	d010      	beq.n	8017830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801780e:	2300      	movs	r3, #0
 8017810:	623b      	str	r3, [r7, #32]
 8017812:	e00d      	b.n	8017830 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8017814:	68fb      	ldr	r3, [r7, #12]
 8017816:	685b      	ldr	r3, [r3, #4]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d006      	beq.n	801782a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801781c:	4b38      	ldr	r3, [pc, #224]	; (8017900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801781e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8017822:	493a      	ldr	r1, [pc, #232]	; (801790c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017824:	4838      	ldr	r0, [pc, #224]	; (8017908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017826:	f000 ff31 	bl	801868c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	68ba      	ldr	r2, [r7, #8]
 801782e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d105      	bne.n	8017842 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	7f9b      	ldrb	r3, [r3, #30]
 801783a:	f003 0301 	and.w	r3, r3, #1
 801783e:	2b00      	cmp	r3, #0
 8017840:	d059      	beq.n	80178f6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8017842:	6a3b      	ldr	r3, [r7, #32]
 8017844:	2b00      	cmp	r3, #0
 8017846:	d04f      	beq.n	80178e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	685b      	ldr	r3, [r3, #4]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d006      	beq.n	801785e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	685b      	ldr	r3, [r3, #4]
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	889b      	ldrh	r3, [r3, #4]
 8017858:	b29b      	uxth	r3, r3
 801785a:	2b00      	cmp	r3, #0
 801785c:	d002      	beq.n	8017864 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801785e:	2300      	movs	r3, #0
 8017860:	623b      	str	r3, [r7, #32]
 8017862:	e041      	b.n	80178e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017866:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801786e:	e012      	b.n	8017896 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8017870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017872:	685b      	ldr	r3, [r3, #4]
 8017874:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017878:	88db      	ldrh	r3, [r3, #6]
 801787a:	b29a      	uxth	r2, r3
 801787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801787e:	889b      	ldrh	r3, [r3, #4]
 8017880:	b29b      	uxth	r3, r3
 8017882:	429a      	cmp	r2, r3
 8017884:	d002      	beq.n	801788c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017886:	2300      	movs	r3, #0
 8017888:	623b      	str	r3, [r7, #32]
            break;
 801788a:	e007      	b.n	801789c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801788c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801788e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8017890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017898:	2b00      	cmp	r3, #0
 801789a:	d1e9      	bne.n	8017870 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801789c:	6a3b      	ldr	r3, [r7, #32]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d022      	beq.n	80178e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	685b      	ldr	r3, [r3, #4]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d106      	bne.n	80178b8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80178aa:	4b15      	ldr	r3, [pc, #84]	; (8017900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80178ac:	f240 12df 	movw	r2, #479	; 0x1df
 80178b0:	4917      	ldr	r1, [pc, #92]	; (8017910 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80178b2:	4815      	ldr	r0, [pc, #84]	; (8017908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80178b4:	f000 feea 	bl	801868c <iprintf>
          LWIP_ASSERT("sanity check",
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	685b      	ldr	r3, [r3, #4]
 80178bc:	685b      	ldr	r3, [r3, #4]
 80178be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80178c0:	429a      	cmp	r2, r3
 80178c2:	d106      	bne.n	80178d2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80178c4:	4b0e      	ldr	r3, [pc, #56]	; (8017900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80178c6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80178ca:	4911      	ldr	r1, [pc, #68]	; (8017910 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80178cc:	480e      	ldr	r0, [pc, #56]	; (8017908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80178ce:	f000 fedd 	bl	801868c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80178d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d006      	beq.n	80178e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80178da:	4b09      	ldr	r3, [pc, #36]	; (8017900 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80178dc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80178e0:	490c      	ldr	r1, [pc, #48]	; (8017914 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80178e2:	4809      	ldr	r0, [pc, #36]	; (8017908 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80178e4:	f000 fed2 	bl	801868c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80178e8:	6a3b      	ldr	r3, [r7, #32]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	bf14      	ite	ne
 80178ee:	2301      	movne	r3, #1
 80178f0:	2300      	moveq	r3, #0
 80178f2:	b2db      	uxtb	r3, r3
 80178f4:	e000      	b.n	80178f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80178f6:	2300      	movs	r3, #0
}
 80178f8:	4618      	mov	r0, r3
 80178fa:	3730      	adds	r7, #48	; 0x30
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}
 8017900:	0801cd2c 	.word	0x0801cd2c
 8017904:	0801ce10 	.word	0x0801ce10
 8017908:	0801cd74 	.word	0x0801cd74
 801790c:	0801ce30 	.word	0x0801ce30
 8017910:	0801ce68 	.word	0x0801ce68
 8017914:	0801ce78 	.word	0x0801ce78

08017918 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017918:	b580      	push	{r7, lr}
 801791a:	b08e      	sub	sp, #56	; 0x38
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	685b      	ldr	r3, [r3, #4]
 8017924:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017928:	781b      	ldrb	r3, [r3, #0]
 801792a:	f003 030f 	and.w	r3, r3, #15
 801792e:	b2db      	uxtb	r3, r3
 8017930:	009b      	lsls	r3, r3, #2
 8017932:	b2db      	uxtb	r3, r3
 8017934:	2b14      	cmp	r3, #20
 8017936:	f040 8167 	bne.w	8017c08 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801793c:	88db      	ldrh	r3, [r3, #6]
 801793e:	b29b      	uxth	r3, r3
 8017940:	4618      	mov	r0, r3
 8017942:	f7f4 ffa1 	bl	800c888 <lwip_htons>
 8017946:	4603      	mov	r3, r0
 8017948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801794c:	b29b      	uxth	r3, r3
 801794e:	00db      	lsls	r3, r3, #3
 8017950:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017954:	885b      	ldrh	r3, [r3, #2]
 8017956:	b29b      	uxth	r3, r3
 8017958:	4618      	mov	r0, r3
 801795a:	f7f4 ff95 	bl	800c888 <lwip_htons>
 801795e:	4603      	mov	r3, r0
 8017960:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8017962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017964:	781b      	ldrb	r3, [r3, #0]
 8017966:	f003 030f 	and.w	r3, r3, #15
 801796a:	b2db      	uxtb	r3, r3
 801796c:	009b      	lsls	r3, r3, #2
 801796e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8017972:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017976:	b29b      	uxth	r3, r3
 8017978:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801797a:	429a      	cmp	r2, r3
 801797c:	f0c0 8146 	bcc.w	8017c0c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8017980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017984:	b29b      	uxth	r3, r3
 8017986:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017988:	1ad3      	subs	r3, r2, r3
 801798a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f7f6 feb1 	bl	800e6f4 <pbuf_clen>
 8017992:	4603      	mov	r3, r0
 8017994:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017996:	4b9f      	ldr	r3, [pc, #636]	; (8017c14 <ip4_reass+0x2fc>)
 8017998:	881b      	ldrh	r3, [r3, #0]
 801799a:	461a      	mov	r2, r3
 801799c:	8c3b      	ldrh	r3, [r7, #32]
 801799e:	4413      	add	r3, r2
 80179a0:	2b0a      	cmp	r3, #10
 80179a2:	dd10      	ble.n	80179c6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80179a4:	8c3b      	ldrh	r3, [r7, #32]
 80179a6:	4619      	mov	r1, r3
 80179a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80179aa:	f7ff fd81 	bl	80174b0 <ip_reass_remove_oldest_datagram>
 80179ae:	4603      	mov	r3, r0
 80179b0:	2b00      	cmp	r3, #0
 80179b2:	f000 812d 	beq.w	8017c10 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80179b6:	4b97      	ldr	r3, [pc, #604]	; (8017c14 <ip4_reass+0x2fc>)
 80179b8:	881b      	ldrh	r3, [r3, #0]
 80179ba:	461a      	mov	r2, r3
 80179bc:	8c3b      	ldrh	r3, [r7, #32]
 80179be:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80179c0:	2b0a      	cmp	r3, #10
 80179c2:	f300 8125 	bgt.w	8017c10 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80179c6:	4b94      	ldr	r3, [pc, #592]	; (8017c18 <ip4_reass+0x300>)
 80179c8:	681b      	ldr	r3, [r3, #0]
 80179ca:	633b      	str	r3, [r7, #48]	; 0x30
 80179cc:	e015      	b.n	80179fa <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80179ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179d0:	695a      	ldr	r2, [r3, #20]
 80179d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179d4:	68db      	ldr	r3, [r3, #12]
 80179d6:	429a      	cmp	r2, r3
 80179d8:	d10c      	bne.n	80179f4 <ip4_reass+0xdc>
 80179da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179dc:	699a      	ldr	r2, [r3, #24]
 80179de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179e0:	691b      	ldr	r3, [r3, #16]
 80179e2:	429a      	cmp	r2, r3
 80179e4:	d106      	bne.n	80179f4 <ip4_reass+0xdc>
 80179e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179e8:	899a      	ldrh	r2, [r3, #12]
 80179ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ec:	889b      	ldrh	r3, [r3, #4]
 80179ee:	b29b      	uxth	r3, r3
 80179f0:	429a      	cmp	r2, r3
 80179f2:	d006      	beq.n	8017a02 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80179f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	633b      	str	r3, [r7, #48]	; 0x30
 80179fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d1e6      	bne.n	80179ce <ip4_reass+0xb6>
 8017a00:	e000      	b.n	8017a04 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8017a02:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d109      	bne.n	8017a1e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017a0a:	8c3b      	ldrh	r3, [r7, #32]
 8017a0c:	4619      	mov	r1, r3
 8017a0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017a10:	f7ff fdb0 	bl	8017574 <ip_reass_enqueue_new_datagram>
 8017a14:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d11c      	bne.n	8017a56 <ip4_reass+0x13e>
      goto nullreturn;
 8017a1c:	e109      	b.n	8017c32 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a20:	88db      	ldrh	r3, [r3, #6]
 8017a22:	b29b      	uxth	r3, r3
 8017a24:	4618      	mov	r0, r3
 8017a26:	f7f4 ff2f 	bl	800c888 <lwip_htons>
 8017a2a:	4603      	mov	r3, r0
 8017a2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d110      	bne.n	8017a56 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a36:	89db      	ldrh	r3, [r3, #14]
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f7f4 ff25 	bl	800c888 <lwip_htons>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d006      	beq.n	8017a56 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a4a:	3308      	adds	r3, #8
 8017a4c:	2214      	movs	r2, #20
 8017a4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a50:	4618      	mov	r0, r3
 8017a52:	f000 fd5b 	bl	801850c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8017a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a58:	88db      	ldrh	r3, [r3, #6]
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	f003 0320 	and.w	r3, r3, #32
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	bf0c      	ite	eq
 8017a64:	2301      	moveq	r3, #1
 8017a66:	2300      	movne	r3, #0
 8017a68:	b2db      	uxtb	r3, r3
 8017a6a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017a6c:	69fb      	ldr	r3, [r7, #28]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d00e      	beq.n	8017a90 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8017a72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017a74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017a76:	4413      	add	r3, r2
 8017a78:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017a7a:	8b7a      	ldrh	r2, [r7, #26]
 8017a7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017a7e:	429a      	cmp	r2, r3
 8017a80:	f0c0 80a0 	bcc.w	8017bc4 <ip4_reass+0x2ac>
 8017a84:	8b7b      	ldrh	r3, [r7, #26]
 8017a86:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017a8a:	4293      	cmp	r3, r2
 8017a8c:	f200 809a 	bhi.w	8017bc4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017a90:	69fa      	ldr	r2, [r7, #28]
 8017a92:	6879      	ldr	r1, [r7, #4]
 8017a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a96:	f7ff fdd5 	bl	8017644 <ip_reass_chain_frag_into_datagram_and_validate>
 8017a9a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017a9c:	697b      	ldr	r3, [r7, #20]
 8017a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017aa2:	f000 8091 	beq.w	8017bc8 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017aa6:	4b5b      	ldr	r3, [pc, #364]	; (8017c14 <ip4_reass+0x2fc>)
 8017aa8:	881a      	ldrh	r2, [r3, #0]
 8017aaa:	8c3b      	ldrh	r3, [r7, #32]
 8017aac:	4413      	add	r3, r2
 8017aae:	b29a      	uxth	r2, r3
 8017ab0:	4b58      	ldr	r3, [pc, #352]	; (8017c14 <ip4_reass+0x2fc>)
 8017ab2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017ab4:	69fb      	ldr	r3, [r7, #28]
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	d00d      	beq.n	8017ad6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017aba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017abe:	4413      	add	r3, r2
 8017ac0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ac4:	8a7a      	ldrh	r2, [r7, #18]
 8017ac6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017aca:	7f9b      	ldrb	r3, [r3, #30]
 8017acc:	f043 0301 	orr.w	r3, r3, #1
 8017ad0:	b2da      	uxtb	r2, r3
 8017ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ad4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	d171      	bne.n	8017bc0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ade:	8b9b      	ldrh	r3, [r3, #28]
 8017ae0:	3314      	adds	r3, #20
 8017ae2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ae6:	685b      	ldr	r3, [r3, #4]
 8017ae8:	685b      	ldr	r3, [r3, #4]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8017aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af0:	685b      	ldr	r3, [r3, #4]
 8017af2:	685b      	ldr	r3, [r3, #4]
 8017af4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017af8:	3308      	adds	r3, #8
 8017afa:	2214      	movs	r2, #20
 8017afc:	4619      	mov	r1, r3
 8017afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017b00:	f000 fd04 	bl	801850c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017b04:	8a3b      	ldrh	r3, [r7, #16]
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7f4 febe 	bl	800c888 <lwip_htons>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	461a      	mov	r2, r3
 8017b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b12:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b16:	2200      	movs	r2, #0
 8017b18:	719a      	strb	r2, [r3, #6]
 8017b1a:	2200      	movs	r2, #0
 8017b1c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8017b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b20:	2200      	movs	r2, #0
 8017b22:	729a      	strb	r2, [r3, #10]
 8017b24:	2200      	movs	r2, #0
 8017b26:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b2a:	685b      	ldr	r3, [r3, #4]
 8017b2c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8017b2e:	e00d      	b.n	8017b4c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8017b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b32:	685b      	ldr	r3, [r3, #4]
 8017b34:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017b36:	2114      	movs	r1, #20
 8017b38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017b3a:	f7f6 fc95 	bl	800e468 <pbuf_remove_header>
      pbuf_cat(p, r);
 8017b3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017b40:	6878      	ldr	r0, [r7, #4]
 8017b42:	f7f6 fe17 	bl	800e774 <pbuf_cat>
      r = iprh->next_pbuf;
 8017b46:	68fb      	ldr	r3, [r7, #12]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d1ee      	bne.n	8017b30 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017b52:	4b31      	ldr	r3, [pc, #196]	; (8017c18 <ip4_reass+0x300>)
 8017b54:	681b      	ldr	r3, [r3, #0]
 8017b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	d102      	bne.n	8017b62 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b60:	e010      	b.n	8017b84 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017b62:	4b2d      	ldr	r3, [pc, #180]	; (8017c18 <ip4_reass+0x300>)
 8017b64:	681b      	ldr	r3, [r3, #0]
 8017b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b68:	e007      	b.n	8017b7a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017b70:	429a      	cmp	r2, r3
 8017b72:	d006      	beq.n	8017b82 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d1f4      	bne.n	8017b6a <ip4_reass+0x252>
 8017b80:	e000      	b.n	8017b84 <ip4_reass+0x26c>
          break;
 8017b82:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017b86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017b88:	f7ff fd2e 	bl	80175e8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017b8c:	6878      	ldr	r0, [r7, #4]
 8017b8e:	f7f6 fdb1 	bl	800e6f4 <pbuf_clen>
 8017b92:	4603      	mov	r3, r0
 8017b94:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017b96:	4b1f      	ldr	r3, [pc, #124]	; (8017c14 <ip4_reass+0x2fc>)
 8017b98:	881b      	ldrh	r3, [r3, #0]
 8017b9a:	8c3a      	ldrh	r2, [r7, #32]
 8017b9c:	429a      	cmp	r2, r3
 8017b9e:	d906      	bls.n	8017bae <ip4_reass+0x296>
 8017ba0:	4b1e      	ldr	r3, [pc, #120]	; (8017c1c <ip4_reass+0x304>)
 8017ba2:	f240 229b 	movw	r2, #667	; 0x29b
 8017ba6:	491e      	ldr	r1, [pc, #120]	; (8017c20 <ip4_reass+0x308>)
 8017ba8:	481e      	ldr	r0, [pc, #120]	; (8017c24 <ip4_reass+0x30c>)
 8017baa:	f000 fd6f 	bl	801868c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017bae:	4b19      	ldr	r3, [pc, #100]	; (8017c14 <ip4_reass+0x2fc>)
 8017bb0:	881a      	ldrh	r2, [r3, #0]
 8017bb2:	8c3b      	ldrh	r3, [r7, #32]
 8017bb4:	1ad3      	subs	r3, r2, r3
 8017bb6:	b29a      	uxth	r2, r3
 8017bb8:	4b16      	ldr	r3, [pc, #88]	; (8017c14 <ip4_reass+0x2fc>)
 8017bba:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	e03c      	b.n	8017c3a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	e03a      	b.n	8017c3a <ip4_reass+0x322>
      goto nullreturn_ipr;
 8017bc4:	bf00      	nop
 8017bc6:	e000      	b.n	8017bca <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8017bc8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d106      	bne.n	8017bde <ip4_reass+0x2c6>
 8017bd0:	4b12      	ldr	r3, [pc, #72]	; (8017c1c <ip4_reass+0x304>)
 8017bd2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017bd6:	4914      	ldr	r1, [pc, #80]	; (8017c28 <ip4_reass+0x310>)
 8017bd8:	4812      	ldr	r0, [pc, #72]	; (8017c24 <ip4_reass+0x30c>)
 8017bda:	f000 fd57 	bl	801868c <iprintf>
  if (ipr->p == NULL) {
 8017bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017be0:	685b      	ldr	r3, [r3, #4]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d124      	bne.n	8017c30 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017be6:	4b0c      	ldr	r3, [pc, #48]	; (8017c18 <ip4_reass+0x300>)
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bec:	429a      	cmp	r2, r3
 8017bee:	d006      	beq.n	8017bfe <ip4_reass+0x2e6>
 8017bf0:	4b0a      	ldr	r3, [pc, #40]	; (8017c1c <ip4_reass+0x304>)
 8017bf2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017bf6:	490d      	ldr	r1, [pc, #52]	; (8017c2c <ip4_reass+0x314>)
 8017bf8:	480a      	ldr	r0, [pc, #40]	; (8017c24 <ip4_reass+0x30c>)
 8017bfa:	f000 fd47 	bl	801868c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017bfe:	2100      	movs	r1, #0
 8017c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017c02:	f7ff fcf1 	bl	80175e8 <ip_reass_dequeue_datagram>
 8017c06:	e014      	b.n	8017c32 <ip4_reass+0x31a>
    goto nullreturn;
 8017c08:	bf00      	nop
 8017c0a:	e012      	b.n	8017c32 <ip4_reass+0x31a>
    goto nullreturn;
 8017c0c:	bf00      	nop
 8017c0e:	e010      	b.n	8017c32 <ip4_reass+0x31a>
      goto nullreturn;
 8017c10:	bf00      	nop
 8017c12:	e00e      	b.n	8017c32 <ip4_reass+0x31a>
 8017c14:	20005014 	.word	0x20005014
 8017c18:	20005010 	.word	0x20005010
 8017c1c:	0801cd2c 	.word	0x0801cd2c
 8017c20:	0801ce9c 	.word	0x0801ce9c
 8017c24:	0801cd74 	.word	0x0801cd74
 8017c28:	0801ceb8 	.word	0x0801ceb8
 8017c2c:	0801cec4 	.word	0x0801cec4
  }

nullreturn:
 8017c30:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017c32:	6878      	ldr	r0, [r7, #4]
 8017c34:	f7f6 fcd0 	bl	800e5d8 <pbuf_free>
  return NULL;
 8017c38:	2300      	movs	r3, #0
}
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	3738      	adds	r7, #56	; 0x38
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	bf00      	nop

08017c44 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017c48:	2005      	movs	r0, #5
 8017c4a:	f7f5 fd9d 	bl	800d788 <memp_malloc>
 8017c4e:	4603      	mov	r3, r0
}
 8017c50:	4618      	mov	r0, r3
 8017c52:	bd80      	pop	{r7, pc}

08017c54 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b082      	sub	sp, #8
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d106      	bne.n	8017c70 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017c62:	4b07      	ldr	r3, [pc, #28]	; (8017c80 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017c64:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017c68:	4906      	ldr	r1, [pc, #24]	; (8017c84 <ip_frag_free_pbuf_custom_ref+0x30>)
 8017c6a:	4807      	ldr	r0, [pc, #28]	; (8017c88 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017c6c:	f000 fd0e 	bl	801868c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017c70:	6879      	ldr	r1, [r7, #4]
 8017c72:	2005      	movs	r0, #5
 8017c74:	f7f5 fdda 	bl	800d82c <memp_free>
}
 8017c78:	bf00      	nop
 8017c7a:	3708      	adds	r7, #8
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}
 8017c80:	0801cd2c 	.word	0x0801cd2c
 8017c84:	0801cee4 	.word	0x0801cee4
 8017c88:	0801cd74 	.word	0x0801cd74

08017c8c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b084      	sub	sp, #16
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017c98:	68fb      	ldr	r3, [r7, #12]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d106      	bne.n	8017cac <ipfrag_free_pbuf_custom+0x20>
 8017c9e:	4b11      	ldr	r3, [pc, #68]	; (8017ce4 <ipfrag_free_pbuf_custom+0x58>)
 8017ca0:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017ca4:	4910      	ldr	r1, [pc, #64]	; (8017ce8 <ipfrag_free_pbuf_custom+0x5c>)
 8017ca6:	4811      	ldr	r0, [pc, #68]	; (8017cec <ipfrag_free_pbuf_custom+0x60>)
 8017ca8:	f000 fcf0 	bl	801868c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017cac:	68fa      	ldr	r2, [r7, #12]
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	429a      	cmp	r2, r3
 8017cb2:	d006      	beq.n	8017cc2 <ipfrag_free_pbuf_custom+0x36>
 8017cb4:	4b0b      	ldr	r3, [pc, #44]	; (8017ce4 <ipfrag_free_pbuf_custom+0x58>)
 8017cb6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017cba:	490d      	ldr	r1, [pc, #52]	; (8017cf0 <ipfrag_free_pbuf_custom+0x64>)
 8017cbc:	480b      	ldr	r0, [pc, #44]	; (8017cec <ipfrag_free_pbuf_custom+0x60>)
 8017cbe:	f000 fce5 	bl	801868c <iprintf>
  if (pcr->original != NULL) {
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	695b      	ldr	r3, [r3, #20]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d004      	beq.n	8017cd4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	695b      	ldr	r3, [r3, #20]
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7f6 fc82 	bl	800e5d8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017cd4:	68f8      	ldr	r0, [r7, #12]
 8017cd6:	f7ff ffbd 	bl	8017c54 <ip_frag_free_pbuf_custom_ref>
}
 8017cda:	bf00      	nop
 8017cdc:	3710      	adds	r7, #16
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}
 8017ce2:	bf00      	nop
 8017ce4:	0801cd2c 	.word	0x0801cd2c
 8017ce8:	0801cef0 	.word	0x0801cef0
 8017cec:	0801cd74 	.word	0x0801cd74
 8017cf0:	0801cefc 	.word	0x0801cefc

08017cf4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017cf4:	b580      	push	{r7, lr}
 8017cf6:	b094      	sub	sp, #80	; 0x50
 8017cf8:	af02      	add	r7, sp, #8
 8017cfa:	60f8      	str	r0, [r7, #12]
 8017cfc:	60b9      	str	r1, [r7, #8]
 8017cfe:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017d00:	2300      	movs	r3, #0
 8017d02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017d06:	68bb      	ldr	r3, [r7, #8]
 8017d08:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017d0a:	3b14      	subs	r3, #20
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	da00      	bge.n	8017d12 <ip4_frag+0x1e>
 8017d10:	3307      	adds	r3, #7
 8017d12:	10db      	asrs	r3, r3, #3
 8017d14:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017d16:	2314      	movs	r3, #20
 8017d18:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	685b      	ldr	r3, [r3, #4]
 8017d1e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d22:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d26:	781b      	ldrb	r3, [r3, #0]
 8017d28:	f003 030f 	and.w	r3, r3, #15
 8017d2c:	b2db      	uxtb	r3, r3
 8017d2e:	009b      	lsls	r3, r3, #2
 8017d30:	b2db      	uxtb	r3, r3
 8017d32:	2b14      	cmp	r3, #20
 8017d34:	d002      	beq.n	8017d3c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017d36:	f06f 0305 	mvn.w	r3, #5
 8017d3a:	e110      	b.n	8017f5e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	895b      	ldrh	r3, [r3, #10]
 8017d40:	2b13      	cmp	r3, #19
 8017d42:	d809      	bhi.n	8017d58 <ip4_frag+0x64>
 8017d44:	4b88      	ldr	r3, [pc, #544]	; (8017f68 <ip4_frag+0x274>)
 8017d46:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017d4a:	4988      	ldr	r1, [pc, #544]	; (8017f6c <ip4_frag+0x278>)
 8017d4c:	4888      	ldr	r0, [pc, #544]	; (8017f70 <ip4_frag+0x27c>)
 8017d4e:	f000 fc9d 	bl	801868c <iprintf>
 8017d52:	f06f 0305 	mvn.w	r3, #5
 8017d56:	e102      	b.n	8017f5e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d5a:	88db      	ldrh	r3, [r3, #6]
 8017d5c:	b29b      	uxth	r3, r3
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f7f4 fd92 	bl	800c888 <lwip_htons>
 8017d64:	4603      	mov	r3, r0
 8017d66:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017d68:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d6a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d6e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017d72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017d78:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	891b      	ldrh	r3, [r3, #8]
 8017d7e:	3b14      	subs	r3, #20
 8017d80:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017d84:	e0e1      	b.n	8017f4a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017d86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d88:	00db      	lsls	r3, r3, #3
 8017d8a:	b29b      	uxth	r3, r3
 8017d8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017d90:	4293      	cmp	r3, r2
 8017d92:	bf28      	it	cs
 8017d94:	4613      	movcs	r3, r2
 8017d96:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017d98:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017d9c:	2114      	movs	r1, #20
 8017d9e:	200e      	movs	r0, #14
 8017da0:	f7f6 f904 	bl	800dfac <pbuf_alloc>
 8017da4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	f000 80d5 	beq.w	8017f58 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017db0:	895b      	ldrh	r3, [r3, #10]
 8017db2:	2b13      	cmp	r3, #19
 8017db4:	d806      	bhi.n	8017dc4 <ip4_frag+0xd0>
 8017db6:	4b6c      	ldr	r3, [pc, #432]	; (8017f68 <ip4_frag+0x274>)
 8017db8:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017dbc:	496d      	ldr	r1, [pc, #436]	; (8017f74 <ip4_frag+0x280>)
 8017dbe:	486c      	ldr	r0, [pc, #432]	; (8017f70 <ip4_frag+0x27c>)
 8017dc0:	f000 fc64 	bl	801868c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dc6:	685b      	ldr	r3, [r3, #4]
 8017dc8:	2214      	movs	r2, #20
 8017dca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017dcc:	4618      	mov	r0, r3
 8017dce:	f000 fb9d 	bl	801850c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017dd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017dda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017dde:	e064      	b.n	8017eaa <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	895a      	ldrh	r2, [r3, #10]
 8017de4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017de6:	1ad3      	subs	r3, r2, r3
 8017de8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	895b      	ldrh	r3, [r3, #10]
 8017dee:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017df0:	429a      	cmp	r2, r3
 8017df2:	d906      	bls.n	8017e02 <ip4_frag+0x10e>
 8017df4:	4b5c      	ldr	r3, [pc, #368]	; (8017f68 <ip4_frag+0x274>)
 8017df6:	f240 322d 	movw	r2, #813	; 0x32d
 8017dfa:	495f      	ldr	r1, [pc, #380]	; (8017f78 <ip4_frag+0x284>)
 8017dfc:	485c      	ldr	r0, [pc, #368]	; (8017f70 <ip4_frag+0x27c>)
 8017dfe:	f000 fc45 	bl	801868c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017e02:	8bfa      	ldrh	r2, [r7, #30]
 8017e04:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017e08:	4293      	cmp	r3, r2
 8017e0a:	bf28      	it	cs
 8017e0c:	4613      	movcs	r3, r2
 8017e0e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017e12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	d105      	bne.n	8017e26 <ip4_frag+0x132>
        poff = 0;
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017e1e:	68fb      	ldr	r3, [r7, #12]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	60fb      	str	r3, [r7, #12]
        continue;
 8017e24:	e041      	b.n	8017eaa <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017e26:	f7ff ff0d 	bl	8017c44 <ip_frag_alloc_pbuf_custom_ref>
 8017e2a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017e2c:	69bb      	ldr	r3, [r7, #24]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d103      	bne.n	8017e3a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017e32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e34:	f7f6 fbd0 	bl	800e5d8 <pbuf_free>
        goto memerr;
 8017e38:	e08f      	b.n	8017f5a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017e3a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017e40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017e42:	4413      	add	r3, r2
 8017e44:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017e48:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017e4c:	9201      	str	r2, [sp, #4]
 8017e4e:	9300      	str	r3, [sp, #0]
 8017e50:	4603      	mov	r3, r0
 8017e52:	2241      	movs	r2, #65	; 0x41
 8017e54:	2000      	movs	r0, #0
 8017e56:	f7f6 f9d3 	bl	800e200 <pbuf_alloced_custom>
 8017e5a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017e5c:	697b      	ldr	r3, [r7, #20]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d106      	bne.n	8017e70 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017e62:	69b8      	ldr	r0, [r7, #24]
 8017e64:	f7ff fef6 	bl	8017c54 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e6a:	f7f6 fbb5 	bl	800e5d8 <pbuf_free>
        goto memerr;
 8017e6e:	e074      	b.n	8017f5a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017e70:	68f8      	ldr	r0, [r7, #12]
 8017e72:	f7f6 fc57 	bl	800e724 <pbuf_ref>
      pcr->original = p;
 8017e76:	69bb      	ldr	r3, [r7, #24]
 8017e78:	68fa      	ldr	r2, [r7, #12]
 8017e7a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017e7c:	69bb      	ldr	r3, [r7, #24]
 8017e7e:	4a3f      	ldr	r2, [pc, #252]	; (8017f7c <ip4_frag+0x288>)
 8017e80:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017e82:	6979      	ldr	r1, [r7, #20]
 8017e84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017e86:	f7f6 fc75 	bl	800e774 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017e8a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017e8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017e92:	1ad3      	subs	r3, r2, r3
 8017e94:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017e98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d004      	beq.n	8017eaa <ip4_frag+0x1b6>
        poff = 0;
 8017ea0:	2300      	movs	r3, #0
 8017ea2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017eaa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d196      	bne.n	8017de0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017eb2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017eb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017eb8:	4413      	add	r3, r2
 8017eba:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017ebc:	68bb      	ldr	r3, [r7, #8]
 8017ebe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017ec0:	f1a3 0213 	sub.w	r2, r3, #19
 8017ec4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ec8:	429a      	cmp	r2, r3
 8017eca:	bfcc      	ite	gt
 8017ecc:	2301      	movgt	r3, #1
 8017ece:	2300      	movle	r3, #0
 8017ed0:	b2db      	uxtb	r3, r3
 8017ed2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017ed4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017ed8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017edc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017ede:	6a3b      	ldr	r3, [r7, #32]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d002      	beq.n	8017eea <ip4_frag+0x1f6>
 8017ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d003      	beq.n	8017ef2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017eea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017eec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017ef0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017ef2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017ef4:	4618      	mov	r0, r3
 8017ef6:	f7f4 fcc7 	bl	800c888 <lwip_htons>
 8017efa:	4603      	mov	r3, r0
 8017efc:	461a      	mov	r2, r3
 8017efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f00:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017f02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017f04:	3314      	adds	r3, #20
 8017f06:	b29b      	uxth	r3, r3
 8017f08:	4618      	mov	r0, r3
 8017f0a:	f7f4 fcbd 	bl	800c888 <lwip_htons>
 8017f0e:	4603      	mov	r3, r0
 8017f10:	461a      	mov	r2, r3
 8017f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f14:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f18:	2200      	movs	r2, #0
 8017f1a:	729a      	strb	r2, [r3, #10]
 8017f1c:	2200      	movs	r2, #0
 8017f1e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017f20:	68bb      	ldr	r3, [r7, #8]
 8017f22:	695b      	ldr	r3, [r3, #20]
 8017f24:	687a      	ldr	r2, [r7, #4]
 8017f26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017f28:	68b8      	ldr	r0, [r7, #8]
 8017f2a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017f2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f2e:	f7f6 fb53 	bl	800e5d8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017f32:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017f36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017f38:	1ad3      	subs	r3, r2, r3
 8017f3a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017f3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017f42:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017f44:	4413      	add	r3, r2
 8017f46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017f4a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	f47f af19 	bne.w	8017d86 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017f54:	2300      	movs	r3, #0
 8017f56:	e002      	b.n	8017f5e <ip4_frag+0x26a>
      goto memerr;
 8017f58:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017f5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f5e:	4618      	mov	r0, r3
 8017f60:	3748      	adds	r7, #72	; 0x48
 8017f62:	46bd      	mov	sp, r7
 8017f64:	bd80      	pop	{r7, pc}
 8017f66:	bf00      	nop
 8017f68:	0801cd2c 	.word	0x0801cd2c
 8017f6c:	0801cf08 	.word	0x0801cf08
 8017f70:	0801cd74 	.word	0x0801cd74
 8017f74:	0801cf24 	.word	0x0801cf24
 8017f78:	0801cf44 	.word	0x0801cf44
 8017f7c:	08017c8d 	.word	0x08017c8d

08017f80 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017f80:	b580      	push	{r7, lr}
 8017f82:	b086      	sub	sp, #24
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
 8017f88:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017f8a:	230e      	movs	r3, #14
 8017f8c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	895b      	ldrh	r3, [r3, #10]
 8017f92:	2b0e      	cmp	r3, #14
 8017f94:	d96e      	bls.n	8018074 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	7bdb      	ldrb	r3, [r3, #15]
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	d106      	bne.n	8017fac <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017f9e:	683b      	ldr	r3, [r7, #0]
 8017fa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017fa4:	3301      	adds	r3, #1
 8017fa6:	b2da      	uxtb	r2, r3
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	685b      	ldr	r3, [r3, #4]
 8017fb0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017fb2:	693b      	ldr	r3, [r7, #16]
 8017fb4:	7b1a      	ldrb	r2, [r3, #12]
 8017fb6:	7b5b      	ldrb	r3, [r3, #13]
 8017fb8:	021b      	lsls	r3, r3, #8
 8017fba:	4313      	orrs	r3, r2
 8017fbc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017fbe:	693b      	ldr	r3, [r7, #16]
 8017fc0:	781b      	ldrb	r3, [r3, #0]
 8017fc2:	f003 0301 	and.w	r3, r3, #1
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d023      	beq.n	8018012 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017fca:	693b      	ldr	r3, [r7, #16]
 8017fcc:	781b      	ldrb	r3, [r3, #0]
 8017fce:	2b01      	cmp	r3, #1
 8017fd0:	d10f      	bne.n	8017ff2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017fd2:	693b      	ldr	r3, [r7, #16]
 8017fd4:	785b      	ldrb	r3, [r3, #1]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d11b      	bne.n	8018012 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017fda:	693b      	ldr	r3, [r7, #16]
 8017fdc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017fde:	2b5e      	cmp	r3, #94	; 0x5e
 8017fe0:	d117      	bne.n	8018012 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017fe2:	687b      	ldr	r3, [r7, #4]
 8017fe4:	7b5b      	ldrb	r3, [r3, #13]
 8017fe6:	f043 0310 	orr.w	r3, r3, #16
 8017fea:	b2da      	uxtb	r2, r3
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	735a      	strb	r2, [r3, #13]
 8017ff0:	e00f      	b.n	8018012 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017ff2:	693b      	ldr	r3, [r7, #16]
 8017ff4:	2206      	movs	r2, #6
 8017ff6:	4928      	ldr	r1, [pc, #160]	; (8018098 <ethernet_input+0x118>)
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f000 fa79 	bl	80184f0 <memcmp>
 8017ffe:	4603      	mov	r3, r0
 8018000:	2b00      	cmp	r3, #0
 8018002:	d106      	bne.n	8018012 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	7b5b      	ldrb	r3, [r3, #13]
 8018008:	f043 0308 	orr.w	r3, r3, #8
 801800c:	b2da      	uxtb	r2, r3
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018012:	89fb      	ldrh	r3, [r7, #14]
 8018014:	2b08      	cmp	r3, #8
 8018016:	d003      	beq.n	8018020 <ethernet_input+0xa0>
 8018018:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801801c:	d014      	beq.n	8018048 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801801e:	e032      	b.n	8018086 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018020:	683b      	ldr	r3, [r7, #0]
 8018022:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018026:	f003 0308 	and.w	r3, r3, #8
 801802a:	2b00      	cmp	r3, #0
 801802c:	d024      	beq.n	8018078 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801802e:	8afb      	ldrh	r3, [r7, #22]
 8018030:	4619      	mov	r1, r3
 8018032:	6878      	ldr	r0, [r7, #4]
 8018034:	f7f6 fa18 	bl	800e468 <pbuf_remove_header>
 8018038:	4603      	mov	r3, r0
 801803a:	2b00      	cmp	r3, #0
 801803c:	d11e      	bne.n	801807c <ethernet_input+0xfc>
        ip4_input(p, netif);
 801803e:	6839      	ldr	r1, [r7, #0]
 8018040:	6878      	ldr	r0, [r7, #4]
 8018042:	f7fe ff27 	bl	8016e94 <ip4_input>
      break;
 8018046:	e013      	b.n	8018070 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018048:	683b      	ldr	r3, [r7, #0]
 801804a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801804e:	f003 0308 	and.w	r3, r3, #8
 8018052:	2b00      	cmp	r3, #0
 8018054:	d014      	beq.n	8018080 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018056:	8afb      	ldrh	r3, [r7, #22]
 8018058:	4619      	mov	r1, r3
 801805a:	6878      	ldr	r0, [r7, #4]
 801805c:	f7f6 fa04 	bl	800e468 <pbuf_remove_header>
 8018060:	4603      	mov	r3, r0
 8018062:	2b00      	cmp	r3, #0
 8018064:	d10e      	bne.n	8018084 <ethernet_input+0x104>
        etharp_input(p, netif);
 8018066:	6839      	ldr	r1, [r7, #0]
 8018068:	6878      	ldr	r0, [r7, #4]
 801806a:	f7fe f8c7 	bl	80161fc <etharp_input>
      break;
 801806e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018070:	2300      	movs	r3, #0
 8018072:	e00c      	b.n	801808e <ethernet_input+0x10e>
    goto free_and_return;
 8018074:	bf00      	nop
 8018076:	e006      	b.n	8018086 <ethernet_input+0x106>
        goto free_and_return;
 8018078:	bf00      	nop
 801807a:	e004      	b.n	8018086 <ethernet_input+0x106>
        goto free_and_return;
 801807c:	bf00      	nop
 801807e:	e002      	b.n	8018086 <ethernet_input+0x106>
        goto free_and_return;
 8018080:	bf00      	nop
 8018082:	e000      	b.n	8018086 <ethernet_input+0x106>
        goto free_and_return;
 8018084:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018086:	6878      	ldr	r0, [r7, #4]
 8018088:	f7f6 faa6 	bl	800e5d8 <pbuf_free>
  return ERR_OK;
 801808c:	2300      	movs	r3, #0
}
 801808e:	4618      	mov	r0, r3
 8018090:	3718      	adds	r7, #24
 8018092:	46bd      	mov	sp, r7
 8018094:	bd80      	pop	{r7, pc}
 8018096:	bf00      	nop
 8018098:	0801d1a0 	.word	0x0801d1a0

0801809c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801809c:	b580      	push	{r7, lr}
 801809e:	b086      	sub	sp, #24
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	60f8      	str	r0, [r7, #12]
 80180a4:	60b9      	str	r1, [r7, #8]
 80180a6:	607a      	str	r2, [r7, #4]
 80180a8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80180aa:	8c3b      	ldrh	r3, [r7, #32]
 80180ac:	4618      	mov	r0, r3
 80180ae:	f7f4 fbeb 	bl	800c888 <lwip_htons>
 80180b2:	4603      	mov	r3, r0
 80180b4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80180b6:	210e      	movs	r1, #14
 80180b8:	68b8      	ldr	r0, [r7, #8]
 80180ba:	f7f6 f9c5 	bl	800e448 <pbuf_add_header>
 80180be:	4603      	mov	r3, r0
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d125      	bne.n	8018110 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80180c4:	68bb      	ldr	r3, [r7, #8]
 80180c6:	685b      	ldr	r3, [r3, #4]
 80180c8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80180ca:	693b      	ldr	r3, [r7, #16]
 80180cc:	8afa      	ldrh	r2, [r7, #22]
 80180ce:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80180d0:	693b      	ldr	r3, [r7, #16]
 80180d2:	2206      	movs	r2, #6
 80180d4:	6839      	ldr	r1, [r7, #0]
 80180d6:	4618      	mov	r0, r3
 80180d8:	f000 fa18 	bl	801850c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80180dc:	693b      	ldr	r3, [r7, #16]
 80180de:	3306      	adds	r3, #6
 80180e0:	2206      	movs	r2, #6
 80180e2:	6879      	ldr	r1, [r7, #4]
 80180e4:	4618      	mov	r0, r3
 80180e6:	f000 fa11 	bl	801850c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80180f0:	2b06      	cmp	r3, #6
 80180f2:	d006      	beq.n	8018102 <ethernet_output+0x66>
 80180f4:	4b0a      	ldr	r3, [pc, #40]	; (8018120 <ethernet_output+0x84>)
 80180f6:	f44f 7299 	mov.w	r2, #306	; 0x132
 80180fa:	490a      	ldr	r1, [pc, #40]	; (8018124 <ethernet_output+0x88>)
 80180fc:	480a      	ldr	r0, [pc, #40]	; (8018128 <ethernet_output+0x8c>)
 80180fe:	f000 fac5 	bl	801868c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	699b      	ldr	r3, [r3, #24]
 8018106:	68b9      	ldr	r1, [r7, #8]
 8018108:	68f8      	ldr	r0, [r7, #12]
 801810a:	4798      	blx	r3
 801810c:	4603      	mov	r3, r0
 801810e:	e002      	b.n	8018116 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018110:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018112:	f06f 0301 	mvn.w	r3, #1
}
 8018116:	4618      	mov	r0, r3
 8018118:	3718      	adds	r7, #24
 801811a:	46bd      	mov	sp, r7
 801811c:	bd80      	pop	{r7, pc}
 801811e:	bf00      	nop
 8018120:	0801cf54 	.word	0x0801cf54
 8018124:	0801cf8c 	.word	0x0801cf8c
 8018128:	0801cfc0 	.word	0x0801cfc0

0801812c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8018136:	683b      	ldr	r3, [r7, #0]
 8018138:	2200      	movs	r2, #0
 801813a:	2104      	movs	r1, #4
 801813c:	4618      	mov	r0, r3
 801813e:	f7ed f9f1 	bl	8005524 <osMessageQueueNew>
 8018142:	4602      	mov	r2, r0
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d102      	bne.n	8018156 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8018150:	f04f 33ff 	mov.w	r3, #4294967295
 8018154:	e000      	b.n	8018158 <sys_mbox_new+0x2c>

  return ERR_OK;
 8018156:	2300      	movs	r3, #0
}
 8018158:	4618      	mov	r0, r3
 801815a:	3708      	adds	r7, #8
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}

08018160 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b082      	sub	sp, #8
 8018164:	af00      	add	r7, sp, #0
 8018166:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	4618      	mov	r0, r3
 801816e:	f7ed fb0b 	bl	8005788 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	4618      	mov	r0, r3
 8018178:	f7ed fb26 	bl	80057c8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801817c:	bf00      	nop
 801817e:	3708      	adds	r7, #8
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}

08018184 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018184:	b580      	push	{r7, lr}
 8018186:	b084      	sub	sp, #16
 8018188:	af00      	add	r7, sp, #0
 801818a:	6078      	str	r0, [r7, #4]
 801818c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801818e:	687b      	ldr	r3, [r7, #4]
 8018190:	6818      	ldr	r0, [r3, #0]
 8018192:	4639      	mov	r1, r7
 8018194:	2300      	movs	r3, #0
 8018196:	2200      	movs	r2, #0
 8018198:	f7ed fa38 	bl	800560c <osMessageQueuePut>
 801819c:	4603      	mov	r3, r0
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d102      	bne.n	80181a8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80181a2:	2300      	movs	r3, #0
 80181a4:	73fb      	strb	r3, [r7, #15]
 80181a6:	e001      	b.n	80181ac <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80181a8:	23ff      	movs	r3, #255	; 0xff
 80181aa:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80181ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80181b0:	4618      	mov	r0, r3
 80181b2:	3710      	adds	r7, #16
 80181b4:	46bd      	mov	sp, r7
 80181b6:	bd80      	pop	{r7, pc}

080181b8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b086      	sub	sp, #24
 80181bc:	af00      	add	r7, sp, #0
 80181be:	60f8      	str	r0, [r7, #12]
 80181c0:	60b9      	str	r1, [r7, #8]
 80181c2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 80181c4:	f7ec fe6e 	bl	8004ea4 <osKernelGetTickCount>
 80181c8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d013      	beq.n	80181f8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	6818      	ldr	r0, [r3, #0]
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	2200      	movs	r2, #0
 80181d8:	68b9      	ldr	r1, [r7, #8]
 80181da:	f7ed fa77 	bl	80056cc <osMessageQueueGet>
 80181de:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 80181e0:	693b      	ldr	r3, [r7, #16]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d105      	bne.n	80181f2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 80181e6:	f7ec fe5d 	bl	8004ea4 <osKernelGetTickCount>
 80181ea:	4602      	mov	r2, r0
 80181ec:	697b      	ldr	r3, [r7, #20]
 80181ee:	1ad3      	subs	r3, r2, r3
 80181f0:	e00f      	b.n	8018212 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80181f2:	f04f 33ff 	mov.w	r3, #4294967295
 80181f6:	e00c      	b.n	8018212 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	6818      	ldr	r0, [r3, #0]
 80181fc:	f04f 33ff 	mov.w	r3, #4294967295
 8018200:	2200      	movs	r2, #0
 8018202:	68b9      	ldr	r1, [r7, #8]
 8018204:	f7ed fa62 	bl	80056cc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8018208:	f7ec fe4c 	bl	8004ea4 <osKernelGetTickCount>
 801820c:	4602      	mov	r2, r0
 801820e:	697b      	ldr	r3, [r7, #20]
 8018210:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018212:	4618      	mov	r0, r3
 8018214:	3718      	adds	r7, #24
 8018216:	46bd      	mov	sp, r7
 8018218:	bd80      	pop	{r7, pc}

0801821a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801821a:	b580      	push	{r7, lr}
 801821c:	b082      	sub	sp, #8
 801821e:	af00      	add	r7, sp, #0
 8018220:	6078      	str	r0, [r7, #4]
 8018222:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	6818      	ldr	r0, [r3, #0]
 8018228:	2300      	movs	r3, #0
 801822a:	2200      	movs	r2, #0
 801822c:	6839      	ldr	r1, [r7, #0]
 801822e:	f7ed fa4d 	bl	80056cc <osMessageQueueGet>
 8018232:	4603      	mov	r3, r0
 8018234:	2b00      	cmp	r3, #0
 8018236:	d101      	bne.n	801823c <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 8018238:	2300      	movs	r3, #0
 801823a:	e001      	b.n	8018240 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801823c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8018240:	4618      	mov	r0, r3
 8018242:	3708      	adds	r7, #8
 8018244:	46bd      	mov	sp, r7
 8018246:	bd80      	pop	{r7, pc}

08018248 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018248:	b480      	push	{r7}
 801824a:	b083      	sub	sp, #12
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	681b      	ldr	r3, [r3, #0]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d101      	bne.n	801825c <sys_mbox_valid+0x14>
    return 0;
 8018258:	2300      	movs	r3, #0
 801825a:	e000      	b.n	801825e <sys_mbox_valid+0x16>
  else
    return 1;
 801825c:	2301      	movs	r3, #1
}
 801825e:	4618      	mov	r0, r3
 8018260:	370c      	adds	r7, #12
 8018262:	46bd      	mov	sp, r7
 8018264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018268:	4770      	bx	lr

0801826a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801826a:	b480      	push	{r7}
 801826c:	b083      	sub	sp, #12
 801826e:	af00      	add	r7, sp, #0
 8018270:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	2200      	movs	r2, #0
 8018276:	601a      	str	r2, [r3, #0]
}
 8018278:	bf00      	nop
 801827a:	370c      	adds	r7, #12
 801827c:	46bd      	mov	sp, r7
 801827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018282:	4770      	bx	lr

08018284 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018284:	b580      	push	{r7, lr}
 8018286:	b082      	sub	sp, #8
 8018288:	af00      	add	r7, sp, #0
 801828a:	6078      	str	r0, [r7, #4]
 801828c:	460b      	mov	r3, r1
 801828e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8018290:	78fb      	ldrb	r3, [r7, #3]
 8018292:	2200      	movs	r2, #0
 8018294:	4619      	mov	r1, r3
 8018296:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801829a:	f7ed f800 	bl	800529e <osSemaphoreNew>
 801829e:	4602      	mov	r2, r0
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d102      	bne.n	80182b2 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80182ac:	f04f 33ff 	mov.w	r3, #4294967295
 80182b0:	e009      	b.n	80182c6 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 80182b2:	78fb      	ldrb	r3, [r7, #3]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d105      	bne.n	80182c4 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	2100      	movs	r1, #0
 80182be:	4618      	mov	r0, r3
 80182c0:	f7ed f876 	bl	80053b0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 80182c4:	2300      	movs	r3, #0
}
 80182c6:	4618      	mov	r0, r3
 80182c8:	3708      	adds	r7, #8
 80182ca:	46bd      	mov	sp, r7
 80182cc:	bd80      	pop	{r7, pc}

080182ce <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 80182ce:	b580      	push	{r7, lr}
 80182d0:	b084      	sub	sp, #16
 80182d2:	af00      	add	r7, sp, #0
 80182d4:	6078      	str	r0, [r7, #4]
 80182d6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 80182d8:	f7ec fde4 	bl	8004ea4 <osKernelGetTickCount>
 80182dc:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 80182de:	683b      	ldr	r3, [r7, #0]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d011      	beq.n	8018308 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	6839      	ldr	r1, [r7, #0]
 80182ea:	4618      	mov	r0, r3
 80182ec:	f7ed f860 	bl	80053b0 <osSemaphoreAcquire>
 80182f0:	4603      	mov	r3, r0
 80182f2:	2b00      	cmp	r3, #0
 80182f4:	d105      	bne.n	8018302 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 80182f6:	f7ec fdd5 	bl	8004ea4 <osKernelGetTickCount>
 80182fa:	4602      	mov	r2, r0
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	1ad3      	subs	r3, r2, r3
 8018300:	e012      	b.n	8018328 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018302:	f04f 33ff 	mov.w	r3, #4294967295
 8018306:	e00f      	b.n	8018328 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8018308:	bf00      	nop
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	f04f 31ff 	mov.w	r1, #4294967295
 8018312:	4618      	mov	r0, r3
 8018314:	f7ed f84c 	bl	80053b0 <osSemaphoreAcquire>
 8018318:	4603      	mov	r3, r0
 801831a:	2b00      	cmp	r3, #0
 801831c:	d1f5      	bne.n	801830a <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801831e:	f7ec fdc1 	bl	8004ea4 <osKernelGetTickCount>
 8018322:	4602      	mov	r2, r0
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8018328:	4618      	mov	r0, r3
 801832a:	3710      	adds	r7, #16
 801832c:	46bd      	mov	sp, r7
 801832e:	bd80      	pop	{r7, pc}

08018330 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018330:	b580      	push	{r7, lr}
 8018332:	b082      	sub	sp, #8
 8018334:	af00      	add	r7, sp, #0
 8018336:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	4618      	mov	r0, r3
 801833e:	f7ed f889 	bl	8005454 <osSemaphoreRelease>
}
 8018342:	bf00      	nop
 8018344:	3708      	adds	r7, #8
 8018346:	46bd      	mov	sp, r7
 8018348:	bd80      	pop	{r7, pc}

0801834a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801834a:	b580      	push	{r7, lr}
 801834c:	b082      	sub	sp, #8
 801834e:	af00      	add	r7, sp, #0
 8018350:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	4618      	mov	r0, r3
 8018358:	f7ed f8c0 	bl	80054dc <osSemaphoreDelete>
}
 801835c:	bf00      	nop
 801835e:	3708      	adds	r7, #8
 8018360:	46bd      	mov	sp, r7
 8018362:	bd80      	pop	{r7, pc}

08018364 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018364:	b480      	push	{r7}
 8018366:	b083      	sub	sp, #12
 8018368:	af00      	add	r7, sp, #0
 801836a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d101      	bne.n	8018378 <sys_sem_valid+0x14>
    return 0;
 8018374:	2300      	movs	r3, #0
 8018376:	e000      	b.n	801837a <sys_sem_valid+0x16>
  else
    return 1;
 8018378:	2301      	movs	r3, #1
}
 801837a:	4618      	mov	r0, r3
 801837c:	370c      	adds	r7, #12
 801837e:	46bd      	mov	sp, r7
 8018380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018384:	4770      	bx	lr

08018386 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018386:	b480      	push	{r7}
 8018388:	b083      	sub	sp, #12
 801838a:	af00      	add	r7, sp, #0
 801838c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801838e:	687b      	ldr	r3, [r7, #4]
 8018390:	2200      	movs	r2, #0
 8018392:	601a      	str	r2, [r3, #0]
}
 8018394:	bf00      	nop
 8018396:	370c      	adds	r7, #12
 8018398:	46bd      	mov	sp, r7
 801839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801839e:	4770      	bx	lr

080183a0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80183a4:	2000      	movs	r0, #0
 80183a6:	f7ec fe6c 	bl	8005082 <osMutexNew>
 80183aa:	4603      	mov	r3, r0
 80183ac:	4a01      	ldr	r2, [pc, #4]	; (80183b4 <sys_init+0x14>)
 80183ae:	6013      	str	r3, [r2, #0]
#endif
}
 80183b0:	bf00      	nop
 80183b2:	bd80      	pop	{r7, pc}
 80183b4:	2000bda8 	.word	0x2000bda8

080183b8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80183b8:	b580      	push	{r7, lr}
 80183ba:	b082      	sub	sp, #8
 80183bc:	af00      	add	r7, sp, #0
 80183be:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80183c0:	2000      	movs	r0, #0
 80183c2:	f7ec fe5e 	bl	8005082 <osMutexNew>
 80183c6:	4602      	mov	r2, r0
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	681b      	ldr	r3, [r3, #0]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d102      	bne.n	80183da <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80183d4:	f04f 33ff 	mov.w	r3, #4294967295
 80183d8:	e000      	b.n	80183dc <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80183da:	2300      	movs	r3, #0
}
 80183dc:	4618      	mov	r0, r3
 80183de:	3708      	adds	r7, #8
 80183e0:	46bd      	mov	sp, r7
 80183e2:	bd80      	pop	{r7, pc}

080183e4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b082      	sub	sp, #8
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	f04f 31ff 	mov.w	r1, #4294967295
 80183f4:	4618      	mov	r0, r3
 80183f6:	f7ec feca 	bl	800518e <osMutexAcquire>
#endif
}
 80183fa:	bf00      	nop
 80183fc:	3708      	adds	r7, #8
 80183fe:	46bd      	mov	sp, r7
 8018400:	bd80      	pop	{r7, pc}

08018402 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018402:	b580      	push	{r7, lr}
 8018404:	b082      	sub	sp, #8
 8018406:	af00      	add	r7, sp, #0
 8018408:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	4618      	mov	r0, r3
 8018410:	f7ec ff08 	bl	8005224 <osMutexRelease>
}
 8018414:	bf00      	nop
 8018416:	3708      	adds	r7, #8
 8018418:	46bd      	mov	sp, r7
 801841a:	bd80      	pop	{r7, pc}

0801841c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b08e      	sub	sp, #56	; 0x38
 8018420:	af00      	add	r7, sp, #0
 8018422:	60f8      	str	r0, [r7, #12]
 8018424:	60b9      	str	r1, [r7, #8]
 8018426:	607a      	str	r2, [r7, #4]
 8018428:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801842a:	f107 0314 	add.w	r3, r7, #20
 801842e:	2224      	movs	r2, #36	; 0x24
 8018430:	2100      	movs	r1, #0
 8018432:	4618      	mov	r0, r3
 8018434:	f000 f878 	bl	8018528 <memset>
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	617b      	str	r3, [r7, #20]
 801843c:	683b      	ldr	r3, [r7, #0]
 801843e:	62bb      	str	r3, [r7, #40]	; 0x28
 8018440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018442:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8018444:	f107 0314 	add.w	r3, r7, #20
 8018448:	461a      	mov	r2, r3
 801844a:	6879      	ldr	r1, [r7, #4]
 801844c:	68b8      	ldr	r0, [r7, #8]
 801844e:	f7ec fd3e 	bl	8004ece <osThreadNew>
 8018452:	4603      	mov	r3, r0
#endif
}
 8018454:	4618      	mov	r0, r3
 8018456:	3738      	adds	r7, #56	; 0x38
 8018458:	46bd      	mov	sp, r7
 801845a:	bd80      	pop	{r7, pc}

0801845c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801845c:	b580      	push	{r7, lr}
 801845e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8018460:	4b04      	ldr	r3, [pc, #16]	; (8018474 <sys_arch_protect+0x18>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	f04f 31ff 	mov.w	r1, #4294967295
 8018468:	4618      	mov	r0, r3
 801846a:	f7ec fe90 	bl	800518e <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801846e:	2301      	movs	r3, #1
}
 8018470:	4618      	mov	r0, r3
 8018472:	bd80      	pop	{r7, pc}
 8018474:	2000bda8 	.word	0x2000bda8

08018478 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b082      	sub	sp, #8
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018480:	4b04      	ldr	r3, [pc, #16]	; (8018494 <sys_arch_unprotect+0x1c>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	4618      	mov	r0, r3
 8018486:	f7ec fecd 	bl	8005224 <osMutexRelease>
}
 801848a:	bf00      	nop
 801848c:	3708      	adds	r7, #8
 801848e:	46bd      	mov	sp, r7
 8018490:	bd80      	pop	{r7, pc}
 8018492:	bf00      	nop
 8018494:	2000bda8 	.word	0x2000bda8

08018498 <__libc_init_array>:
 8018498:	b570      	push	{r4, r5, r6, lr}
 801849a:	4d0d      	ldr	r5, [pc, #52]	; (80184d0 <__libc_init_array+0x38>)
 801849c:	4c0d      	ldr	r4, [pc, #52]	; (80184d4 <__libc_init_array+0x3c>)
 801849e:	1b64      	subs	r4, r4, r5
 80184a0:	10a4      	asrs	r4, r4, #2
 80184a2:	2600      	movs	r6, #0
 80184a4:	42a6      	cmp	r6, r4
 80184a6:	d109      	bne.n	80184bc <__libc_init_array+0x24>
 80184a8:	4d0b      	ldr	r5, [pc, #44]	; (80184d8 <__libc_init_array+0x40>)
 80184aa:	4c0c      	ldr	r4, [pc, #48]	; (80184dc <__libc_init_array+0x44>)
 80184ac:	f001 f856 	bl	801955c <_init>
 80184b0:	1b64      	subs	r4, r4, r5
 80184b2:	10a4      	asrs	r4, r4, #2
 80184b4:	2600      	movs	r6, #0
 80184b6:	42a6      	cmp	r6, r4
 80184b8:	d105      	bne.n	80184c6 <__libc_init_array+0x2e>
 80184ba:	bd70      	pop	{r4, r5, r6, pc}
 80184bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80184c0:	4798      	blx	r3
 80184c2:	3601      	adds	r6, #1
 80184c4:	e7ee      	b.n	80184a4 <__libc_init_array+0xc>
 80184c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80184ca:	4798      	blx	r3
 80184cc:	3601      	adds	r6, #1
 80184ce:	e7f2      	b.n	80184b6 <__libc_init_array+0x1e>
 80184d0:	0801d304 	.word	0x0801d304
 80184d4:	0801d304 	.word	0x0801d304
 80184d8:	0801d304 	.word	0x0801d304
 80184dc:	0801d308 	.word	0x0801d308

080184e0 <malloc>:
 80184e0:	4b02      	ldr	r3, [pc, #8]	; (80184ec <malloc+0xc>)
 80184e2:	4601      	mov	r1, r0
 80184e4:	6818      	ldr	r0, [r3, #0]
 80184e6:	f000 b877 	b.w	80185d8 <_malloc_r>
 80184ea:	bf00      	nop
 80184ec:	2000001c 	.word	0x2000001c

080184f0 <memcmp>:
 80184f0:	b530      	push	{r4, r5, lr}
 80184f2:	3901      	subs	r1, #1
 80184f4:	2400      	movs	r4, #0
 80184f6:	42a2      	cmp	r2, r4
 80184f8:	d101      	bne.n	80184fe <memcmp+0xe>
 80184fa:	2000      	movs	r0, #0
 80184fc:	e005      	b.n	801850a <memcmp+0x1a>
 80184fe:	5d03      	ldrb	r3, [r0, r4]
 8018500:	3401      	adds	r4, #1
 8018502:	5d0d      	ldrb	r5, [r1, r4]
 8018504:	42ab      	cmp	r3, r5
 8018506:	d0f6      	beq.n	80184f6 <memcmp+0x6>
 8018508:	1b58      	subs	r0, r3, r5
 801850a:	bd30      	pop	{r4, r5, pc}

0801850c <memcpy>:
 801850c:	440a      	add	r2, r1
 801850e:	4291      	cmp	r1, r2
 8018510:	f100 33ff 	add.w	r3, r0, #4294967295
 8018514:	d100      	bne.n	8018518 <memcpy+0xc>
 8018516:	4770      	bx	lr
 8018518:	b510      	push	{r4, lr}
 801851a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801851e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018522:	4291      	cmp	r1, r2
 8018524:	d1f9      	bne.n	801851a <memcpy+0xe>
 8018526:	bd10      	pop	{r4, pc}

08018528 <memset>:
 8018528:	4402      	add	r2, r0
 801852a:	4603      	mov	r3, r0
 801852c:	4293      	cmp	r3, r2
 801852e:	d100      	bne.n	8018532 <memset+0xa>
 8018530:	4770      	bx	lr
 8018532:	f803 1b01 	strb.w	r1, [r3], #1
 8018536:	e7f9      	b.n	801852c <memset+0x4>

08018538 <_free_r>:
 8018538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801853a:	2900      	cmp	r1, #0
 801853c:	d048      	beq.n	80185d0 <_free_r+0x98>
 801853e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018542:	9001      	str	r0, [sp, #4]
 8018544:	2b00      	cmp	r3, #0
 8018546:	f1a1 0404 	sub.w	r4, r1, #4
 801854a:	bfb8      	it	lt
 801854c:	18e4      	addlt	r4, r4, r3
 801854e:	f000 fa2d 	bl	80189ac <__malloc_lock>
 8018552:	4a20      	ldr	r2, [pc, #128]	; (80185d4 <_free_r+0x9c>)
 8018554:	9801      	ldr	r0, [sp, #4]
 8018556:	6813      	ldr	r3, [r2, #0]
 8018558:	4615      	mov	r5, r2
 801855a:	b933      	cbnz	r3, 801856a <_free_r+0x32>
 801855c:	6063      	str	r3, [r4, #4]
 801855e:	6014      	str	r4, [r2, #0]
 8018560:	b003      	add	sp, #12
 8018562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018566:	f000 ba27 	b.w	80189b8 <__malloc_unlock>
 801856a:	42a3      	cmp	r3, r4
 801856c:	d90b      	bls.n	8018586 <_free_r+0x4e>
 801856e:	6821      	ldr	r1, [r4, #0]
 8018570:	1862      	adds	r2, r4, r1
 8018572:	4293      	cmp	r3, r2
 8018574:	bf04      	itt	eq
 8018576:	681a      	ldreq	r2, [r3, #0]
 8018578:	685b      	ldreq	r3, [r3, #4]
 801857a:	6063      	str	r3, [r4, #4]
 801857c:	bf04      	itt	eq
 801857e:	1852      	addeq	r2, r2, r1
 8018580:	6022      	streq	r2, [r4, #0]
 8018582:	602c      	str	r4, [r5, #0]
 8018584:	e7ec      	b.n	8018560 <_free_r+0x28>
 8018586:	461a      	mov	r2, r3
 8018588:	685b      	ldr	r3, [r3, #4]
 801858a:	b10b      	cbz	r3, 8018590 <_free_r+0x58>
 801858c:	42a3      	cmp	r3, r4
 801858e:	d9fa      	bls.n	8018586 <_free_r+0x4e>
 8018590:	6811      	ldr	r1, [r2, #0]
 8018592:	1855      	adds	r5, r2, r1
 8018594:	42a5      	cmp	r5, r4
 8018596:	d10b      	bne.n	80185b0 <_free_r+0x78>
 8018598:	6824      	ldr	r4, [r4, #0]
 801859a:	4421      	add	r1, r4
 801859c:	1854      	adds	r4, r2, r1
 801859e:	42a3      	cmp	r3, r4
 80185a0:	6011      	str	r1, [r2, #0]
 80185a2:	d1dd      	bne.n	8018560 <_free_r+0x28>
 80185a4:	681c      	ldr	r4, [r3, #0]
 80185a6:	685b      	ldr	r3, [r3, #4]
 80185a8:	6053      	str	r3, [r2, #4]
 80185aa:	4421      	add	r1, r4
 80185ac:	6011      	str	r1, [r2, #0]
 80185ae:	e7d7      	b.n	8018560 <_free_r+0x28>
 80185b0:	d902      	bls.n	80185b8 <_free_r+0x80>
 80185b2:	230c      	movs	r3, #12
 80185b4:	6003      	str	r3, [r0, #0]
 80185b6:	e7d3      	b.n	8018560 <_free_r+0x28>
 80185b8:	6825      	ldr	r5, [r4, #0]
 80185ba:	1961      	adds	r1, r4, r5
 80185bc:	428b      	cmp	r3, r1
 80185be:	bf04      	itt	eq
 80185c0:	6819      	ldreq	r1, [r3, #0]
 80185c2:	685b      	ldreq	r3, [r3, #4]
 80185c4:	6063      	str	r3, [r4, #4]
 80185c6:	bf04      	itt	eq
 80185c8:	1949      	addeq	r1, r1, r5
 80185ca:	6021      	streq	r1, [r4, #0]
 80185cc:	6054      	str	r4, [r2, #4]
 80185ce:	e7c7      	b.n	8018560 <_free_r+0x28>
 80185d0:	b003      	add	sp, #12
 80185d2:	bd30      	pop	{r4, r5, pc}
 80185d4:	20005018 	.word	0x20005018

080185d8 <_malloc_r>:
 80185d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185da:	1ccd      	adds	r5, r1, #3
 80185dc:	f025 0503 	bic.w	r5, r5, #3
 80185e0:	3508      	adds	r5, #8
 80185e2:	2d0c      	cmp	r5, #12
 80185e4:	bf38      	it	cc
 80185e6:	250c      	movcc	r5, #12
 80185e8:	2d00      	cmp	r5, #0
 80185ea:	4606      	mov	r6, r0
 80185ec:	db01      	blt.n	80185f2 <_malloc_r+0x1a>
 80185ee:	42a9      	cmp	r1, r5
 80185f0:	d903      	bls.n	80185fa <_malloc_r+0x22>
 80185f2:	230c      	movs	r3, #12
 80185f4:	6033      	str	r3, [r6, #0]
 80185f6:	2000      	movs	r0, #0
 80185f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80185fa:	f000 f9d7 	bl	80189ac <__malloc_lock>
 80185fe:	4921      	ldr	r1, [pc, #132]	; (8018684 <_malloc_r+0xac>)
 8018600:	680a      	ldr	r2, [r1, #0]
 8018602:	4614      	mov	r4, r2
 8018604:	b99c      	cbnz	r4, 801862e <_malloc_r+0x56>
 8018606:	4f20      	ldr	r7, [pc, #128]	; (8018688 <_malloc_r+0xb0>)
 8018608:	683b      	ldr	r3, [r7, #0]
 801860a:	b923      	cbnz	r3, 8018616 <_malloc_r+0x3e>
 801860c:	4621      	mov	r1, r4
 801860e:	4630      	mov	r0, r6
 8018610:	f000 f894 	bl	801873c <_sbrk_r>
 8018614:	6038      	str	r0, [r7, #0]
 8018616:	4629      	mov	r1, r5
 8018618:	4630      	mov	r0, r6
 801861a:	f000 f88f 	bl	801873c <_sbrk_r>
 801861e:	1c43      	adds	r3, r0, #1
 8018620:	d123      	bne.n	801866a <_malloc_r+0x92>
 8018622:	230c      	movs	r3, #12
 8018624:	6033      	str	r3, [r6, #0]
 8018626:	4630      	mov	r0, r6
 8018628:	f000 f9c6 	bl	80189b8 <__malloc_unlock>
 801862c:	e7e3      	b.n	80185f6 <_malloc_r+0x1e>
 801862e:	6823      	ldr	r3, [r4, #0]
 8018630:	1b5b      	subs	r3, r3, r5
 8018632:	d417      	bmi.n	8018664 <_malloc_r+0x8c>
 8018634:	2b0b      	cmp	r3, #11
 8018636:	d903      	bls.n	8018640 <_malloc_r+0x68>
 8018638:	6023      	str	r3, [r4, #0]
 801863a:	441c      	add	r4, r3
 801863c:	6025      	str	r5, [r4, #0]
 801863e:	e004      	b.n	801864a <_malloc_r+0x72>
 8018640:	6863      	ldr	r3, [r4, #4]
 8018642:	42a2      	cmp	r2, r4
 8018644:	bf0c      	ite	eq
 8018646:	600b      	streq	r3, [r1, #0]
 8018648:	6053      	strne	r3, [r2, #4]
 801864a:	4630      	mov	r0, r6
 801864c:	f000 f9b4 	bl	80189b8 <__malloc_unlock>
 8018650:	f104 000b 	add.w	r0, r4, #11
 8018654:	1d23      	adds	r3, r4, #4
 8018656:	f020 0007 	bic.w	r0, r0, #7
 801865a:	1ac2      	subs	r2, r0, r3
 801865c:	d0cc      	beq.n	80185f8 <_malloc_r+0x20>
 801865e:	1a1b      	subs	r3, r3, r0
 8018660:	50a3      	str	r3, [r4, r2]
 8018662:	e7c9      	b.n	80185f8 <_malloc_r+0x20>
 8018664:	4622      	mov	r2, r4
 8018666:	6864      	ldr	r4, [r4, #4]
 8018668:	e7cc      	b.n	8018604 <_malloc_r+0x2c>
 801866a:	1cc4      	adds	r4, r0, #3
 801866c:	f024 0403 	bic.w	r4, r4, #3
 8018670:	42a0      	cmp	r0, r4
 8018672:	d0e3      	beq.n	801863c <_malloc_r+0x64>
 8018674:	1a21      	subs	r1, r4, r0
 8018676:	4630      	mov	r0, r6
 8018678:	f000 f860 	bl	801873c <_sbrk_r>
 801867c:	3001      	adds	r0, #1
 801867e:	d1dd      	bne.n	801863c <_malloc_r+0x64>
 8018680:	e7cf      	b.n	8018622 <_malloc_r+0x4a>
 8018682:	bf00      	nop
 8018684:	20005018 	.word	0x20005018
 8018688:	2000501c 	.word	0x2000501c

0801868c <iprintf>:
 801868c:	b40f      	push	{r0, r1, r2, r3}
 801868e:	4b0a      	ldr	r3, [pc, #40]	; (80186b8 <iprintf+0x2c>)
 8018690:	b513      	push	{r0, r1, r4, lr}
 8018692:	681c      	ldr	r4, [r3, #0]
 8018694:	b124      	cbz	r4, 80186a0 <iprintf+0x14>
 8018696:	69a3      	ldr	r3, [r4, #24]
 8018698:	b913      	cbnz	r3, 80186a0 <iprintf+0x14>
 801869a:	4620      	mov	r0, r4
 801869c:	f000 f8d4 	bl	8018848 <__sinit>
 80186a0:	ab05      	add	r3, sp, #20
 80186a2:	9a04      	ldr	r2, [sp, #16]
 80186a4:	68a1      	ldr	r1, [r4, #8]
 80186a6:	9301      	str	r3, [sp, #4]
 80186a8:	4620      	mov	r0, r4
 80186aa:	f000 f9b5 	bl	8018a18 <_vfiprintf_r>
 80186ae:	b002      	add	sp, #8
 80186b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80186b4:	b004      	add	sp, #16
 80186b6:	4770      	bx	lr
 80186b8:	2000001c 	.word	0x2000001c

080186bc <rand>:
 80186bc:	4b17      	ldr	r3, [pc, #92]	; (801871c <rand+0x60>)
 80186be:	b510      	push	{r4, lr}
 80186c0:	681c      	ldr	r4, [r3, #0]
 80186c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80186c4:	b9b3      	cbnz	r3, 80186f4 <rand+0x38>
 80186c6:	2018      	movs	r0, #24
 80186c8:	f7ff ff0a 	bl	80184e0 <malloc>
 80186cc:	63a0      	str	r0, [r4, #56]	; 0x38
 80186ce:	b928      	cbnz	r0, 80186dc <rand+0x20>
 80186d0:	4602      	mov	r2, r0
 80186d2:	4b13      	ldr	r3, [pc, #76]	; (8018720 <rand+0x64>)
 80186d4:	4813      	ldr	r0, [pc, #76]	; (8018724 <rand+0x68>)
 80186d6:	214e      	movs	r1, #78	; 0x4e
 80186d8:	f000 f840 	bl	801875c <__assert_func>
 80186dc:	4a12      	ldr	r2, [pc, #72]	; (8018728 <rand+0x6c>)
 80186de:	4b13      	ldr	r3, [pc, #76]	; (801872c <rand+0x70>)
 80186e0:	e9c0 2300 	strd	r2, r3, [r0]
 80186e4:	4b12      	ldr	r3, [pc, #72]	; (8018730 <rand+0x74>)
 80186e6:	6083      	str	r3, [r0, #8]
 80186e8:	230b      	movs	r3, #11
 80186ea:	8183      	strh	r3, [r0, #12]
 80186ec:	2201      	movs	r2, #1
 80186ee:	2300      	movs	r3, #0
 80186f0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80186f4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80186f6:	480f      	ldr	r0, [pc, #60]	; (8018734 <rand+0x78>)
 80186f8:	690a      	ldr	r2, [r1, #16]
 80186fa:	694b      	ldr	r3, [r1, #20]
 80186fc:	4c0e      	ldr	r4, [pc, #56]	; (8018738 <rand+0x7c>)
 80186fe:	4350      	muls	r0, r2
 8018700:	fb04 0003 	mla	r0, r4, r3, r0
 8018704:	fba2 3404 	umull	r3, r4, r2, r4
 8018708:	1c5a      	adds	r2, r3, #1
 801870a:	4404      	add	r4, r0
 801870c:	f144 0000 	adc.w	r0, r4, #0
 8018710:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018714:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018718:	bd10      	pop	{r4, pc}
 801871a:	bf00      	nop
 801871c:	2000001c 	.word	0x2000001c
 8018720:	0801d1b4 	.word	0x0801d1b4
 8018724:	0801d1cb 	.word	0x0801d1cb
 8018728:	abcd330e 	.word	0xabcd330e
 801872c:	e66d1234 	.word	0xe66d1234
 8018730:	0005deec 	.word	0x0005deec
 8018734:	5851f42d 	.word	0x5851f42d
 8018738:	4c957f2d 	.word	0x4c957f2d

0801873c <_sbrk_r>:
 801873c:	b538      	push	{r3, r4, r5, lr}
 801873e:	4d06      	ldr	r5, [pc, #24]	; (8018758 <_sbrk_r+0x1c>)
 8018740:	2300      	movs	r3, #0
 8018742:	4604      	mov	r4, r0
 8018744:	4608      	mov	r0, r1
 8018746:	602b      	str	r3, [r5, #0]
 8018748:	f7e8 fc1e 	bl	8000f88 <_sbrk>
 801874c:	1c43      	adds	r3, r0, #1
 801874e:	d102      	bne.n	8018756 <_sbrk_r+0x1a>
 8018750:	682b      	ldr	r3, [r5, #0]
 8018752:	b103      	cbz	r3, 8018756 <_sbrk_r+0x1a>
 8018754:	6023      	str	r3, [r4, #0]
 8018756:	bd38      	pop	{r3, r4, r5, pc}
 8018758:	2000bda4 	.word	0x2000bda4

0801875c <__assert_func>:
 801875c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801875e:	4614      	mov	r4, r2
 8018760:	461a      	mov	r2, r3
 8018762:	4b09      	ldr	r3, [pc, #36]	; (8018788 <__assert_func+0x2c>)
 8018764:	681b      	ldr	r3, [r3, #0]
 8018766:	4605      	mov	r5, r0
 8018768:	68d8      	ldr	r0, [r3, #12]
 801876a:	b14c      	cbz	r4, 8018780 <__assert_func+0x24>
 801876c:	4b07      	ldr	r3, [pc, #28]	; (801878c <__assert_func+0x30>)
 801876e:	9100      	str	r1, [sp, #0]
 8018770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018774:	4906      	ldr	r1, [pc, #24]	; (8018790 <__assert_func+0x34>)
 8018776:	462b      	mov	r3, r5
 8018778:	f000 f8e4 	bl	8018944 <fiprintf>
 801877c:	f000 fd26 	bl	80191cc <abort>
 8018780:	4b04      	ldr	r3, [pc, #16]	; (8018794 <__assert_func+0x38>)
 8018782:	461c      	mov	r4, r3
 8018784:	e7f3      	b.n	801876e <__assert_func+0x12>
 8018786:	bf00      	nop
 8018788:	2000001c 	.word	0x2000001c
 801878c:	0801d22a 	.word	0x0801d22a
 8018790:	0801d237 	.word	0x0801d237
 8018794:	0801d265 	.word	0x0801d265

08018798 <std>:
 8018798:	2300      	movs	r3, #0
 801879a:	b510      	push	{r4, lr}
 801879c:	4604      	mov	r4, r0
 801879e:	e9c0 3300 	strd	r3, r3, [r0]
 80187a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80187a6:	6083      	str	r3, [r0, #8]
 80187a8:	8181      	strh	r1, [r0, #12]
 80187aa:	6643      	str	r3, [r0, #100]	; 0x64
 80187ac:	81c2      	strh	r2, [r0, #14]
 80187ae:	6183      	str	r3, [r0, #24]
 80187b0:	4619      	mov	r1, r3
 80187b2:	2208      	movs	r2, #8
 80187b4:	305c      	adds	r0, #92	; 0x5c
 80187b6:	f7ff feb7 	bl	8018528 <memset>
 80187ba:	4b05      	ldr	r3, [pc, #20]	; (80187d0 <std+0x38>)
 80187bc:	6263      	str	r3, [r4, #36]	; 0x24
 80187be:	4b05      	ldr	r3, [pc, #20]	; (80187d4 <std+0x3c>)
 80187c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80187c2:	4b05      	ldr	r3, [pc, #20]	; (80187d8 <std+0x40>)
 80187c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80187c6:	4b05      	ldr	r3, [pc, #20]	; (80187dc <std+0x44>)
 80187c8:	6224      	str	r4, [r4, #32]
 80187ca:	6323      	str	r3, [r4, #48]	; 0x30
 80187cc:	bd10      	pop	{r4, pc}
 80187ce:	bf00      	nop
 80187d0:	08018fa1 	.word	0x08018fa1
 80187d4:	08018fc3 	.word	0x08018fc3
 80187d8:	08018ffb 	.word	0x08018ffb
 80187dc:	0801901f 	.word	0x0801901f

080187e0 <_cleanup_r>:
 80187e0:	4901      	ldr	r1, [pc, #4]	; (80187e8 <_cleanup_r+0x8>)
 80187e2:	f000 b8c1 	b.w	8018968 <_fwalk_reent>
 80187e6:	bf00      	nop
 80187e8:	08019309 	.word	0x08019309

080187ec <__sfmoreglue>:
 80187ec:	b570      	push	{r4, r5, r6, lr}
 80187ee:	1e4a      	subs	r2, r1, #1
 80187f0:	2568      	movs	r5, #104	; 0x68
 80187f2:	4355      	muls	r5, r2
 80187f4:	460e      	mov	r6, r1
 80187f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80187fa:	f7ff feed 	bl	80185d8 <_malloc_r>
 80187fe:	4604      	mov	r4, r0
 8018800:	b140      	cbz	r0, 8018814 <__sfmoreglue+0x28>
 8018802:	2100      	movs	r1, #0
 8018804:	e9c0 1600 	strd	r1, r6, [r0]
 8018808:	300c      	adds	r0, #12
 801880a:	60a0      	str	r0, [r4, #8]
 801880c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018810:	f7ff fe8a 	bl	8018528 <memset>
 8018814:	4620      	mov	r0, r4
 8018816:	bd70      	pop	{r4, r5, r6, pc}

08018818 <__sfp_lock_acquire>:
 8018818:	4801      	ldr	r0, [pc, #4]	; (8018820 <__sfp_lock_acquire+0x8>)
 801881a:	f000 b8c5 	b.w	80189a8 <__retarget_lock_acquire_recursive>
 801881e:	bf00      	nop
 8018820:	2000bdb4 	.word	0x2000bdb4

08018824 <__sfp_lock_release>:
 8018824:	4801      	ldr	r0, [pc, #4]	; (801882c <__sfp_lock_release+0x8>)
 8018826:	f000 b8c0 	b.w	80189aa <__retarget_lock_release_recursive>
 801882a:	bf00      	nop
 801882c:	2000bdb4 	.word	0x2000bdb4

08018830 <__sinit_lock_acquire>:
 8018830:	4801      	ldr	r0, [pc, #4]	; (8018838 <__sinit_lock_acquire+0x8>)
 8018832:	f000 b8b9 	b.w	80189a8 <__retarget_lock_acquire_recursive>
 8018836:	bf00      	nop
 8018838:	2000bdaf 	.word	0x2000bdaf

0801883c <__sinit_lock_release>:
 801883c:	4801      	ldr	r0, [pc, #4]	; (8018844 <__sinit_lock_release+0x8>)
 801883e:	f000 b8b4 	b.w	80189aa <__retarget_lock_release_recursive>
 8018842:	bf00      	nop
 8018844:	2000bdaf 	.word	0x2000bdaf

08018848 <__sinit>:
 8018848:	b510      	push	{r4, lr}
 801884a:	4604      	mov	r4, r0
 801884c:	f7ff fff0 	bl	8018830 <__sinit_lock_acquire>
 8018850:	69a3      	ldr	r3, [r4, #24]
 8018852:	b11b      	cbz	r3, 801885c <__sinit+0x14>
 8018854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018858:	f7ff bff0 	b.w	801883c <__sinit_lock_release>
 801885c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018860:	6523      	str	r3, [r4, #80]	; 0x50
 8018862:	4b13      	ldr	r3, [pc, #76]	; (80188b0 <__sinit+0x68>)
 8018864:	4a13      	ldr	r2, [pc, #76]	; (80188b4 <__sinit+0x6c>)
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	62a2      	str	r2, [r4, #40]	; 0x28
 801886a:	42a3      	cmp	r3, r4
 801886c:	bf04      	itt	eq
 801886e:	2301      	moveq	r3, #1
 8018870:	61a3      	streq	r3, [r4, #24]
 8018872:	4620      	mov	r0, r4
 8018874:	f000 f820 	bl	80188b8 <__sfp>
 8018878:	6060      	str	r0, [r4, #4]
 801887a:	4620      	mov	r0, r4
 801887c:	f000 f81c 	bl	80188b8 <__sfp>
 8018880:	60a0      	str	r0, [r4, #8]
 8018882:	4620      	mov	r0, r4
 8018884:	f000 f818 	bl	80188b8 <__sfp>
 8018888:	2200      	movs	r2, #0
 801888a:	60e0      	str	r0, [r4, #12]
 801888c:	2104      	movs	r1, #4
 801888e:	6860      	ldr	r0, [r4, #4]
 8018890:	f7ff ff82 	bl	8018798 <std>
 8018894:	68a0      	ldr	r0, [r4, #8]
 8018896:	2201      	movs	r2, #1
 8018898:	2109      	movs	r1, #9
 801889a:	f7ff ff7d 	bl	8018798 <std>
 801889e:	68e0      	ldr	r0, [r4, #12]
 80188a0:	2202      	movs	r2, #2
 80188a2:	2112      	movs	r1, #18
 80188a4:	f7ff ff78 	bl	8018798 <std>
 80188a8:	2301      	movs	r3, #1
 80188aa:	61a3      	str	r3, [r4, #24]
 80188ac:	e7d2      	b.n	8018854 <__sinit+0xc>
 80188ae:	bf00      	nop
 80188b0:	0801d1b0 	.word	0x0801d1b0
 80188b4:	080187e1 	.word	0x080187e1

080188b8 <__sfp>:
 80188b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188ba:	4607      	mov	r7, r0
 80188bc:	f7ff ffac 	bl	8018818 <__sfp_lock_acquire>
 80188c0:	4b1e      	ldr	r3, [pc, #120]	; (801893c <__sfp+0x84>)
 80188c2:	681e      	ldr	r6, [r3, #0]
 80188c4:	69b3      	ldr	r3, [r6, #24]
 80188c6:	b913      	cbnz	r3, 80188ce <__sfp+0x16>
 80188c8:	4630      	mov	r0, r6
 80188ca:	f7ff ffbd 	bl	8018848 <__sinit>
 80188ce:	3648      	adds	r6, #72	; 0x48
 80188d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80188d4:	3b01      	subs	r3, #1
 80188d6:	d503      	bpl.n	80188e0 <__sfp+0x28>
 80188d8:	6833      	ldr	r3, [r6, #0]
 80188da:	b30b      	cbz	r3, 8018920 <__sfp+0x68>
 80188dc:	6836      	ldr	r6, [r6, #0]
 80188de:	e7f7      	b.n	80188d0 <__sfp+0x18>
 80188e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80188e4:	b9d5      	cbnz	r5, 801891c <__sfp+0x64>
 80188e6:	4b16      	ldr	r3, [pc, #88]	; (8018940 <__sfp+0x88>)
 80188e8:	60e3      	str	r3, [r4, #12]
 80188ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80188ee:	6665      	str	r5, [r4, #100]	; 0x64
 80188f0:	f000 f859 	bl	80189a6 <__retarget_lock_init_recursive>
 80188f4:	f7ff ff96 	bl	8018824 <__sfp_lock_release>
 80188f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80188fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018900:	6025      	str	r5, [r4, #0]
 8018902:	61a5      	str	r5, [r4, #24]
 8018904:	2208      	movs	r2, #8
 8018906:	4629      	mov	r1, r5
 8018908:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801890c:	f7ff fe0c 	bl	8018528 <memset>
 8018910:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018914:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018918:	4620      	mov	r0, r4
 801891a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801891c:	3468      	adds	r4, #104	; 0x68
 801891e:	e7d9      	b.n	80188d4 <__sfp+0x1c>
 8018920:	2104      	movs	r1, #4
 8018922:	4638      	mov	r0, r7
 8018924:	f7ff ff62 	bl	80187ec <__sfmoreglue>
 8018928:	4604      	mov	r4, r0
 801892a:	6030      	str	r0, [r6, #0]
 801892c:	2800      	cmp	r0, #0
 801892e:	d1d5      	bne.n	80188dc <__sfp+0x24>
 8018930:	f7ff ff78 	bl	8018824 <__sfp_lock_release>
 8018934:	230c      	movs	r3, #12
 8018936:	603b      	str	r3, [r7, #0]
 8018938:	e7ee      	b.n	8018918 <__sfp+0x60>
 801893a:	bf00      	nop
 801893c:	0801d1b0 	.word	0x0801d1b0
 8018940:	ffff0001 	.word	0xffff0001

08018944 <fiprintf>:
 8018944:	b40e      	push	{r1, r2, r3}
 8018946:	b503      	push	{r0, r1, lr}
 8018948:	4601      	mov	r1, r0
 801894a:	ab03      	add	r3, sp, #12
 801894c:	4805      	ldr	r0, [pc, #20]	; (8018964 <fiprintf+0x20>)
 801894e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018952:	6800      	ldr	r0, [r0, #0]
 8018954:	9301      	str	r3, [sp, #4]
 8018956:	f000 f85f 	bl	8018a18 <_vfiprintf_r>
 801895a:	b002      	add	sp, #8
 801895c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018960:	b003      	add	sp, #12
 8018962:	4770      	bx	lr
 8018964:	2000001c 	.word	0x2000001c

08018968 <_fwalk_reent>:
 8018968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801896c:	4606      	mov	r6, r0
 801896e:	4688      	mov	r8, r1
 8018970:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018974:	2700      	movs	r7, #0
 8018976:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801897a:	f1b9 0901 	subs.w	r9, r9, #1
 801897e:	d505      	bpl.n	801898c <_fwalk_reent+0x24>
 8018980:	6824      	ldr	r4, [r4, #0]
 8018982:	2c00      	cmp	r4, #0
 8018984:	d1f7      	bne.n	8018976 <_fwalk_reent+0xe>
 8018986:	4638      	mov	r0, r7
 8018988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801898c:	89ab      	ldrh	r3, [r5, #12]
 801898e:	2b01      	cmp	r3, #1
 8018990:	d907      	bls.n	80189a2 <_fwalk_reent+0x3a>
 8018992:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018996:	3301      	adds	r3, #1
 8018998:	d003      	beq.n	80189a2 <_fwalk_reent+0x3a>
 801899a:	4629      	mov	r1, r5
 801899c:	4630      	mov	r0, r6
 801899e:	47c0      	blx	r8
 80189a0:	4307      	orrs	r7, r0
 80189a2:	3568      	adds	r5, #104	; 0x68
 80189a4:	e7e9      	b.n	801897a <_fwalk_reent+0x12>

080189a6 <__retarget_lock_init_recursive>:
 80189a6:	4770      	bx	lr

080189a8 <__retarget_lock_acquire_recursive>:
 80189a8:	4770      	bx	lr

080189aa <__retarget_lock_release_recursive>:
 80189aa:	4770      	bx	lr

080189ac <__malloc_lock>:
 80189ac:	4801      	ldr	r0, [pc, #4]	; (80189b4 <__malloc_lock+0x8>)
 80189ae:	f7ff bffb 	b.w	80189a8 <__retarget_lock_acquire_recursive>
 80189b2:	bf00      	nop
 80189b4:	2000bdb0 	.word	0x2000bdb0

080189b8 <__malloc_unlock>:
 80189b8:	4801      	ldr	r0, [pc, #4]	; (80189c0 <__malloc_unlock+0x8>)
 80189ba:	f7ff bff6 	b.w	80189aa <__retarget_lock_release_recursive>
 80189be:	bf00      	nop
 80189c0:	2000bdb0 	.word	0x2000bdb0

080189c4 <__sfputc_r>:
 80189c4:	6893      	ldr	r3, [r2, #8]
 80189c6:	3b01      	subs	r3, #1
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	b410      	push	{r4}
 80189cc:	6093      	str	r3, [r2, #8]
 80189ce:	da08      	bge.n	80189e2 <__sfputc_r+0x1e>
 80189d0:	6994      	ldr	r4, [r2, #24]
 80189d2:	42a3      	cmp	r3, r4
 80189d4:	db01      	blt.n	80189da <__sfputc_r+0x16>
 80189d6:	290a      	cmp	r1, #10
 80189d8:	d103      	bne.n	80189e2 <__sfputc_r+0x1e>
 80189da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189de:	f000 bb23 	b.w	8019028 <__swbuf_r>
 80189e2:	6813      	ldr	r3, [r2, #0]
 80189e4:	1c58      	adds	r0, r3, #1
 80189e6:	6010      	str	r0, [r2, #0]
 80189e8:	7019      	strb	r1, [r3, #0]
 80189ea:	4608      	mov	r0, r1
 80189ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80189f0:	4770      	bx	lr

080189f2 <__sfputs_r>:
 80189f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189f4:	4606      	mov	r6, r0
 80189f6:	460f      	mov	r7, r1
 80189f8:	4614      	mov	r4, r2
 80189fa:	18d5      	adds	r5, r2, r3
 80189fc:	42ac      	cmp	r4, r5
 80189fe:	d101      	bne.n	8018a04 <__sfputs_r+0x12>
 8018a00:	2000      	movs	r0, #0
 8018a02:	e007      	b.n	8018a14 <__sfputs_r+0x22>
 8018a04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018a08:	463a      	mov	r2, r7
 8018a0a:	4630      	mov	r0, r6
 8018a0c:	f7ff ffda 	bl	80189c4 <__sfputc_r>
 8018a10:	1c43      	adds	r3, r0, #1
 8018a12:	d1f3      	bne.n	80189fc <__sfputs_r+0xa>
 8018a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018a18 <_vfiprintf_r>:
 8018a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a1c:	460d      	mov	r5, r1
 8018a1e:	b09d      	sub	sp, #116	; 0x74
 8018a20:	4614      	mov	r4, r2
 8018a22:	4698      	mov	r8, r3
 8018a24:	4606      	mov	r6, r0
 8018a26:	b118      	cbz	r0, 8018a30 <_vfiprintf_r+0x18>
 8018a28:	6983      	ldr	r3, [r0, #24]
 8018a2a:	b90b      	cbnz	r3, 8018a30 <_vfiprintf_r+0x18>
 8018a2c:	f7ff ff0c 	bl	8018848 <__sinit>
 8018a30:	4b89      	ldr	r3, [pc, #548]	; (8018c58 <_vfiprintf_r+0x240>)
 8018a32:	429d      	cmp	r5, r3
 8018a34:	d11b      	bne.n	8018a6e <_vfiprintf_r+0x56>
 8018a36:	6875      	ldr	r5, [r6, #4]
 8018a38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018a3a:	07d9      	lsls	r1, r3, #31
 8018a3c:	d405      	bmi.n	8018a4a <_vfiprintf_r+0x32>
 8018a3e:	89ab      	ldrh	r3, [r5, #12]
 8018a40:	059a      	lsls	r2, r3, #22
 8018a42:	d402      	bmi.n	8018a4a <_vfiprintf_r+0x32>
 8018a44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018a46:	f7ff ffaf 	bl	80189a8 <__retarget_lock_acquire_recursive>
 8018a4a:	89ab      	ldrh	r3, [r5, #12]
 8018a4c:	071b      	lsls	r3, r3, #28
 8018a4e:	d501      	bpl.n	8018a54 <_vfiprintf_r+0x3c>
 8018a50:	692b      	ldr	r3, [r5, #16]
 8018a52:	b9eb      	cbnz	r3, 8018a90 <_vfiprintf_r+0x78>
 8018a54:	4629      	mov	r1, r5
 8018a56:	4630      	mov	r0, r6
 8018a58:	f000 fb4a 	bl	80190f0 <__swsetup_r>
 8018a5c:	b1c0      	cbz	r0, 8018a90 <_vfiprintf_r+0x78>
 8018a5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018a60:	07dc      	lsls	r4, r3, #31
 8018a62:	d50e      	bpl.n	8018a82 <_vfiprintf_r+0x6a>
 8018a64:	f04f 30ff 	mov.w	r0, #4294967295
 8018a68:	b01d      	add	sp, #116	; 0x74
 8018a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a6e:	4b7b      	ldr	r3, [pc, #492]	; (8018c5c <_vfiprintf_r+0x244>)
 8018a70:	429d      	cmp	r5, r3
 8018a72:	d101      	bne.n	8018a78 <_vfiprintf_r+0x60>
 8018a74:	68b5      	ldr	r5, [r6, #8]
 8018a76:	e7df      	b.n	8018a38 <_vfiprintf_r+0x20>
 8018a78:	4b79      	ldr	r3, [pc, #484]	; (8018c60 <_vfiprintf_r+0x248>)
 8018a7a:	429d      	cmp	r5, r3
 8018a7c:	bf08      	it	eq
 8018a7e:	68f5      	ldreq	r5, [r6, #12]
 8018a80:	e7da      	b.n	8018a38 <_vfiprintf_r+0x20>
 8018a82:	89ab      	ldrh	r3, [r5, #12]
 8018a84:	0598      	lsls	r0, r3, #22
 8018a86:	d4ed      	bmi.n	8018a64 <_vfiprintf_r+0x4c>
 8018a88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018a8a:	f7ff ff8e 	bl	80189aa <__retarget_lock_release_recursive>
 8018a8e:	e7e9      	b.n	8018a64 <_vfiprintf_r+0x4c>
 8018a90:	2300      	movs	r3, #0
 8018a92:	9309      	str	r3, [sp, #36]	; 0x24
 8018a94:	2320      	movs	r3, #32
 8018a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018a9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8018a9e:	2330      	movs	r3, #48	; 0x30
 8018aa0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018c64 <_vfiprintf_r+0x24c>
 8018aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018aa8:	f04f 0901 	mov.w	r9, #1
 8018aac:	4623      	mov	r3, r4
 8018aae:	469a      	mov	sl, r3
 8018ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ab4:	b10a      	cbz	r2, 8018aba <_vfiprintf_r+0xa2>
 8018ab6:	2a25      	cmp	r2, #37	; 0x25
 8018ab8:	d1f9      	bne.n	8018aae <_vfiprintf_r+0x96>
 8018aba:	ebba 0b04 	subs.w	fp, sl, r4
 8018abe:	d00b      	beq.n	8018ad8 <_vfiprintf_r+0xc0>
 8018ac0:	465b      	mov	r3, fp
 8018ac2:	4622      	mov	r2, r4
 8018ac4:	4629      	mov	r1, r5
 8018ac6:	4630      	mov	r0, r6
 8018ac8:	f7ff ff93 	bl	80189f2 <__sfputs_r>
 8018acc:	3001      	adds	r0, #1
 8018ace:	f000 80aa 	beq.w	8018c26 <_vfiprintf_r+0x20e>
 8018ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ad4:	445a      	add	r2, fp
 8018ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8018ad8:	f89a 3000 	ldrb.w	r3, [sl]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	f000 80a2 	beq.w	8018c26 <_vfiprintf_r+0x20e>
 8018ae2:	2300      	movs	r3, #0
 8018ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8018ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018aec:	f10a 0a01 	add.w	sl, sl, #1
 8018af0:	9304      	str	r3, [sp, #16]
 8018af2:	9307      	str	r3, [sp, #28]
 8018af4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018af8:	931a      	str	r3, [sp, #104]	; 0x68
 8018afa:	4654      	mov	r4, sl
 8018afc:	2205      	movs	r2, #5
 8018afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b02:	4858      	ldr	r0, [pc, #352]	; (8018c64 <_vfiprintf_r+0x24c>)
 8018b04:	f7e7 fb7c 	bl	8000200 <memchr>
 8018b08:	9a04      	ldr	r2, [sp, #16]
 8018b0a:	b9d8      	cbnz	r0, 8018b44 <_vfiprintf_r+0x12c>
 8018b0c:	06d1      	lsls	r1, r2, #27
 8018b0e:	bf44      	itt	mi
 8018b10:	2320      	movmi	r3, #32
 8018b12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b16:	0713      	lsls	r3, r2, #28
 8018b18:	bf44      	itt	mi
 8018b1a:	232b      	movmi	r3, #43	; 0x2b
 8018b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b20:	f89a 3000 	ldrb.w	r3, [sl]
 8018b24:	2b2a      	cmp	r3, #42	; 0x2a
 8018b26:	d015      	beq.n	8018b54 <_vfiprintf_r+0x13c>
 8018b28:	9a07      	ldr	r2, [sp, #28]
 8018b2a:	4654      	mov	r4, sl
 8018b2c:	2000      	movs	r0, #0
 8018b2e:	f04f 0c0a 	mov.w	ip, #10
 8018b32:	4621      	mov	r1, r4
 8018b34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b38:	3b30      	subs	r3, #48	; 0x30
 8018b3a:	2b09      	cmp	r3, #9
 8018b3c:	d94e      	bls.n	8018bdc <_vfiprintf_r+0x1c4>
 8018b3e:	b1b0      	cbz	r0, 8018b6e <_vfiprintf_r+0x156>
 8018b40:	9207      	str	r2, [sp, #28]
 8018b42:	e014      	b.n	8018b6e <_vfiprintf_r+0x156>
 8018b44:	eba0 0308 	sub.w	r3, r0, r8
 8018b48:	fa09 f303 	lsl.w	r3, r9, r3
 8018b4c:	4313      	orrs	r3, r2
 8018b4e:	9304      	str	r3, [sp, #16]
 8018b50:	46a2      	mov	sl, r4
 8018b52:	e7d2      	b.n	8018afa <_vfiprintf_r+0xe2>
 8018b54:	9b03      	ldr	r3, [sp, #12]
 8018b56:	1d19      	adds	r1, r3, #4
 8018b58:	681b      	ldr	r3, [r3, #0]
 8018b5a:	9103      	str	r1, [sp, #12]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	bfbb      	ittet	lt
 8018b60:	425b      	neglt	r3, r3
 8018b62:	f042 0202 	orrlt.w	r2, r2, #2
 8018b66:	9307      	strge	r3, [sp, #28]
 8018b68:	9307      	strlt	r3, [sp, #28]
 8018b6a:	bfb8      	it	lt
 8018b6c:	9204      	strlt	r2, [sp, #16]
 8018b6e:	7823      	ldrb	r3, [r4, #0]
 8018b70:	2b2e      	cmp	r3, #46	; 0x2e
 8018b72:	d10c      	bne.n	8018b8e <_vfiprintf_r+0x176>
 8018b74:	7863      	ldrb	r3, [r4, #1]
 8018b76:	2b2a      	cmp	r3, #42	; 0x2a
 8018b78:	d135      	bne.n	8018be6 <_vfiprintf_r+0x1ce>
 8018b7a:	9b03      	ldr	r3, [sp, #12]
 8018b7c:	1d1a      	adds	r2, r3, #4
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	9203      	str	r2, [sp, #12]
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	bfb8      	it	lt
 8018b86:	f04f 33ff 	movlt.w	r3, #4294967295
 8018b8a:	3402      	adds	r4, #2
 8018b8c:	9305      	str	r3, [sp, #20]
 8018b8e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018c74 <_vfiprintf_r+0x25c>
 8018b92:	7821      	ldrb	r1, [r4, #0]
 8018b94:	2203      	movs	r2, #3
 8018b96:	4650      	mov	r0, sl
 8018b98:	f7e7 fb32 	bl	8000200 <memchr>
 8018b9c:	b140      	cbz	r0, 8018bb0 <_vfiprintf_r+0x198>
 8018b9e:	2340      	movs	r3, #64	; 0x40
 8018ba0:	eba0 000a 	sub.w	r0, r0, sl
 8018ba4:	fa03 f000 	lsl.w	r0, r3, r0
 8018ba8:	9b04      	ldr	r3, [sp, #16]
 8018baa:	4303      	orrs	r3, r0
 8018bac:	3401      	adds	r4, #1
 8018bae:	9304      	str	r3, [sp, #16]
 8018bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bb4:	482c      	ldr	r0, [pc, #176]	; (8018c68 <_vfiprintf_r+0x250>)
 8018bb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018bba:	2206      	movs	r2, #6
 8018bbc:	f7e7 fb20 	bl	8000200 <memchr>
 8018bc0:	2800      	cmp	r0, #0
 8018bc2:	d03f      	beq.n	8018c44 <_vfiprintf_r+0x22c>
 8018bc4:	4b29      	ldr	r3, [pc, #164]	; (8018c6c <_vfiprintf_r+0x254>)
 8018bc6:	bb1b      	cbnz	r3, 8018c10 <_vfiprintf_r+0x1f8>
 8018bc8:	9b03      	ldr	r3, [sp, #12]
 8018bca:	3307      	adds	r3, #7
 8018bcc:	f023 0307 	bic.w	r3, r3, #7
 8018bd0:	3308      	adds	r3, #8
 8018bd2:	9303      	str	r3, [sp, #12]
 8018bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bd6:	443b      	add	r3, r7
 8018bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8018bda:	e767      	b.n	8018aac <_vfiprintf_r+0x94>
 8018bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8018be0:	460c      	mov	r4, r1
 8018be2:	2001      	movs	r0, #1
 8018be4:	e7a5      	b.n	8018b32 <_vfiprintf_r+0x11a>
 8018be6:	2300      	movs	r3, #0
 8018be8:	3401      	adds	r4, #1
 8018bea:	9305      	str	r3, [sp, #20]
 8018bec:	4619      	mov	r1, r3
 8018bee:	f04f 0c0a 	mov.w	ip, #10
 8018bf2:	4620      	mov	r0, r4
 8018bf4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018bf8:	3a30      	subs	r2, #48	; 0x30
 8018bfa:	2a09      	cmp	r2, #9
 8018bfc:	d903      	bls.n	8018c06 <_vfiprintf_r+0x1ee>
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d0c5      	beq.n	8018b8e <_vfiprintf_r+0x176>
 8018c02:	9105      	str	r1, [sp, #20]
 8018c04:	e7c3      	b.n	8018b8e <_vfiprintf_r+0x176>
 8018c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c0a:	4604      	mov	r4, r0
 8018c0c:	2301      	movs	r3, #1
 8018c0e:	e7f0      	b.n	8018bf2 <_vfiprintf_r+0x1da>
 8018c10:	ab03      	add	r3, sp, #12
 8018c12:	9300      	str	r3, [sp, #0]
 8018c14:	462a      	mov	r2, r5
 8018c16:	4b16      	ldr	r3, [pc, #88]	; (8018c70 <_vfiprintf_r+0x258>)
 8018c18:	a904      	add	r1, sp, #16
 8018c1a:	4630      	mov	r0, r6
 8018c1c:	f3af 8000 	nop.w
 8018c20:	4607      	mov	r7, r0
 8018c22:	1c78      	adds	r0, r7, #1
 8018c24:	d1d6      	bne.n	8018bd4 <_vfiprintf_r+0x1bc>
 8018c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018c28:	07d9      	lsls	r1, r3, #31
 8018c2a:	d405      	bmi.n	8018c38 <_vfiprintf_r+0x220>
 8018c2c:	89ab      	ldrh	r3, [r5, #12]
 8018c2e:	059a      	lsls	r2, r3, #22
 8018c30:	d402      	bmi.n	8018c38 <_vfiprintf_r+0x220>
 8018c32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018c34:	f7ff feb9 	bl	80189aa <__retarget_lock_release_recursive>
 8018c38:	89ab      	ldrh	r3, [r5, #12]
 8018c3a:	065b      	lsls	r3, r3, #25
 8018c3c:	f53f af12 	bmi.w	8018a64 <_vfiprintf_r+0x4c>
 8018c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c42:	e711      	b.n	8018a68 <_vfiprintf_r+0x50>
 8018c44:	ab03      	add	r3, sp, #12
 8018c46:	9300      	str	r3, [sp, #0]
 8018c48:	462a      	mov	r2, r5
 8018c4a:	4b09      	ldr	r3, [pc, #36]	; (8018c70 <_vfiprintf_r+0x258>)
 8018c4c:	a904      	add	r1, sp, #16
 8018c4e:	4630      	mov	r0, r6
 8018c50:	f000 f880 	bl	8018d54 <_printf_i>
 8018c54:	e7e4      	b.n	8018c20 <_vfiprintf_r+0x208>
 8018c56:	bf00      	nop
 8018c58:	0801d288 	.word	0x0801d288
 8018c5c:	0801d2a8 	.word	0x0801d2a8
 8018c60:	0801d268 	.word	0x0801d268
 8018c64:	0801d2c8 	.word	0x0801d2c8
 8018c68:	0801d2d2 	.word	0x0801d2d2
 8018c6c:	00000000 	.word	0x00000000
 8018c70:	080189f3 	.word	0x080189f3
 8018c74:	0801d2ce 	.word	0x0801d2ce

08018c78 <_printf_common>:
 8018c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018c7c:	4616      	mov	r6, r2
 8018c7e:	4699      	mov	r9, r3
 8018c80:	688a      	ldr	r2, [r1, #8]
 8018c82:	690b      	ldr	r3, [r1, #16]
 8018c84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018c88:	4293      	cmp	r3, r2
 8018c8a:	bfb8      	it	lt
 8018c8c:	4613      	movlt	r3, r2
 8018c8e:	6033      	str	r3, [r6, #0]
 8018c90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018c94:	4607      	mov	r7, r0
 8018c96:	460c      	mov	r4, r1
 8018c98:	b10a      	cbz	r2, 8018c9e <_printf_common+0x26>
 8018c9a:	3301      	adds	r3, #1
 8018c9c:	6033      	str	r3, [r6, #0]
 8018c9e:	6823      	ldr	r3, [r4, #0]
 8018ca0:	0699      	lsls	r1, r3, #26
 8018ca2:	bf42      	ittt	mi
 8018ca4:	6833      	ldrmi	r3, [r6, #0]
 8018ca6:	3302      	addmi	r3, #2
 8018ca8:	6033      	strmi	r3, [r6, #0]
 8018caa:	6825      	ldr	r5, [r4, #0]
 8018cac:	f015 0506 	ands.w	r5, r5, #6
 8018cb0:	d106      	bne.n	8018cc0 <_printf_common+0x48>
 8018cb2:	f104 0a19 	add.w	sl, r4, #25
 8018cb6:	68e3      	ldr	r3, [r4, #12]
 8018cb8:	6832      	ldr	r2, [r6, #0]
 8018cba:	1a9b      	subs	r3, r3, r2
 8018cbc:	42ab      	cmp	r3, r5
 8018cbe:	dc26      	bgt.n	8018d0e <_printf_common+0x96>
 8018cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018cc4:	1e13      	subs	r3, r2, #0
 8018cc6:	6822      	ldr	r2, [r4, #0]
 8018cc8:	bf18      	it	ne
 8018cca:	2301      	movne	r3, #1
 8018ccc:	0692      	lsls	r2, r2, #26
 8018cce:	d42b      	bmi.n	8018d28 <_printf_common+0xb0>
 8018cd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018cd4:	4649      	mov	r1, r9
 8018cd6:	4638      	mov	r0, r7
 8018cd8:	47c0      	blx	r8
 8018cda:	3001      	adds	r0, #1
 8018cdc:	d01e      	beq.n	8018d1c <_printf_common+0xa4>
 8018cde:	6823      	ldr	r3, [r4, #0]
 8018ce0:	68e5      	ldr	r5, [r4, #12]
 8018ce2:	6832      	ldr	r2, [r6, #0]
 8018ce4:	f003 0306 	and.w	r3, r3, #6
 8018ce8:	2b04      	cmp	r3, #4
 8018cea:	bf08      	it	eq
 8018cec:	1aad      	subeq	r5, r5, r2
 8018cee:	68a3      	ldr	r3, [r4, #8]
 8018cf0:	6922      	ldr	r2, [r4, #16]
 8018cf2:	bf0c      	ite	eq
 8018cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018cf8:	2500      	movne	r5, #0
 8018cfa:	4293      	cmp	r3, r2
 8018cfc:	bfc4      	itt	gt
 8018cfe:	1a9b      	subgt	r3, r3, r2
 8018d00:	18ed      	addgt	r5, r5, r3
 8018d02:	2600      	movs	r6, #0
 8018d04:	341a      	adds	r4, #26
 8018d06:	42b5      	cmp	r5, r6
 8018d08:	d11a      	bne.n	8018d40 <_printf_common+0xc8>
 8018d0a:	2000      	movs	r0, #0
 8018d0c:	e008      	b.n	8018d20 <_printf_common+0xa8>
 8018d0e:	2301      	movs	r3, #1
 8018d10:	4652      	mov	r2, sl
 8018d12:	4649      	mov	r1, r9
 8018d14:	4638      	mov	r0, r7
 8018d16:	47c0      	blx	r8
 8018d18:	3001      	adds	r0, #1
 8018d1a:	d103      	bne.n	8018d24 <_printf_common+0xac>
 8018d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8018d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d24:	3501      	adds	r5, #1
 8018d26:	e7c6      	b.n	8018cb6 <_printf_common+0x3e>
 8018d28:	18e1      	adds	r1, r4, r3
 8018d2a:	1c5a      	adds	r2, r3, #1
 8018d2c:	2030      	movs	r0, #48	; 0x30
 8018d2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018d32:	4422      	add	r2, r4
 8018d34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018d38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018d3c:	3302      	adds	r3, #2
 8018d3e:	e7c7      	b.n	8018cd0 <_printf_common+0x58>
 8018d40:	2301      	movs	r3, #1
 8018d42:	4622      	mov	r2, r4
 8018d44:	4649      	mov	r1, r9
 8018d46:	4638      	mov	r0, r7
 8018d48:	47c0      	blx	r8
 8018d4a:	3001      	adds	r0, #1
 8018d4c:	d0e6      	beq.n	8018d1c <_printf_common+0xa4>
 8018d4e:	3601      	adds	r6, #1
 8018d50:	e7d9      	b.n	8018d06 <_printf_common+0x8e>
	...

08018d54 <_printf_i>:
 8018d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018d58:	460c      	mov	r4, r1
 8018d5a:	4691      	mov	r9, r2
 8018d5c:	7e27      	ldrb	r7, [r4, #24]
 8018d5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018d60:	2f78      	cmp	r7, #120	; 0x78
 8018d62:	4680      	mov	r8, r0
 8018d64:	469a      	mov	sl, r3
 8018d66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018d6a:	d807      	bhi.n	8018d7c <_printf_i+0x28>
 8018d6c:	2f62      	cmp	r7, #98	; 0x62
 8018d6e:	d80a      	bhi.n	8018d86 <_printf_i+0x32>
 8018d70:	2f00      	cmp	r7, #0
 8018d72:	f000 80d8 	beq.w	8018f26 <_printf_i+0x1d2>
 8018d76:	2f58      	cmp	r7, #88	; 0x58
 8018d78:	f000 80a3 	beq.w	8018ec2 <_printf_i+0x16e>
 8018d7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018d80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018d84:	e03a      	b.n	8018dfc <_printf_i+0xa8>
 8018d86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018d8a:	2b15      	cmp	r3, #21
 8018d8c:	d8f6      	bhi.n	8018d7c <_printf_i+0x28>
 8018d8e:	a001      	add	r0, pc, #4	; (adr r0, 8018d94 <_printf_i+0x40>)
 8018d90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018d94:	08018ded 	.word	0x08018ded
 8018d98:	08018e01 	.word	0x08018e01
 8018d9c:	08018d7d 	.word	0x08018d7d
 8018da0:	08018d7d 	.word	0x08018d7d
 8018da4:	08018d7d 	.word	0x08018d7d
 8018da8:	08018d7d 	.word	0x08018d7d
 8018dac:	08018e01 	.word	0x08018e01
 8018db0:	08018d7d 	.word	0x08018d7d
 8018db4:	08018d7d 	.word	0x08018d7d
 8018db8:	08018d7d 	.word	0x08018d7d
 8018dbc:	08018d7d 	.word	0x08018d7d
 8018dc0:	08018f0d 	.word	0x08018f0d
 8018dc4:	08018e31 	.word	0x08018e31
 8018dc8:	08018eef 	.word	0x08018eef
 8018dcc:	08018d7d 	.word	0x08018d7d
 8018dd0:	08018d7d 	.word	0x08018d7d
 8018dd4:	08018f2f 	.word	0x08018f2f
 8018dd8:	08018d7d 	.word	0x08018d7d
 8018ddc:	08018e31 	.word	0x08018e31
 8018de0:	08018d7d 	.word	0x08018d7d
 8018de4:	08018d7d 	.word	0x08018d7d
 8018de8:	08018ef7 	.word	0x08018ef7
 8018dec:	680b      	ldr	r3, [r1, #0]
 8018dee:	1d1a      	adds	r2, r3, #4
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	600a      	str	r2, [r1, #0]
 8018df4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018df8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018dfc:	2301      	movs	r3, #1
 8018dfe:	e0a3      	b.n	8018f48 <_printf_i+0x1f4>
 8018e00:	6825      	ldr	r5, [r4, #0]
 8018e02:	6808      	ldr	r0, [r1, #0]
 8018e04:	062e      	lsls	r6, r5, #24
 8018e06:	f100 0304 	add.w	r3, r0, #4
 8018e0a:	d50a      	bpl.n	8018e22 <_printf_i+0xce>
 8018e0c:	6805      	ldr	r5, [r0, #0]
 8018e0e:	600b      	str	r3, [r1, #0]
 8018e10:	2d00      	cmp	r5, #0
 8018e12:	da03      	bge.n	8018e1c <_printf_i+0xc8>
 8018e14:	232d      	movs	r3, #45	; 0x2d
 8018e16:	426d      	negs	r5, r5
 8018e18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018e1c:	485e      	ldr	r0, [pc, #376]	; (8018f98 <_printf_i+0x244>)
 8018e1e:	230a      	movs	r3, #10
 8018e20:	e019      	b.n	8018e56 <_printf_i+0x102>
 8018e22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018e26:	6805      	ldr	r5, [r0, #0]
 8018e28:	600b      	str	r3, [r1, #0]
 8018e2a:	bf18      	it	ne
 8018e2c:	b22d      	sxthne	r5, r5
 8018e2e:	e7ef      	b.n	8018e10 <_printf_i+0xbc>
 8018e30:	680b      	ldr	r3, [r1, #0]
 8018e32:	6825      	ldr	r5, [r4, #0]
 8018e34:	1d18      	adds	r0, r3, #4
 8018e36:	6008      	str	r0, [r1, #0]
 8018e38:	0628      	lsls	r0, r5, #24
 8018e3a:	d501      	bpl.n	8018e40 <_printf_i+0xec>
 8018e3c:	681d      	ldr	r5, [r3, #0]
 8018e3e:	e002      	b.n	8018e46 <_printf_i+0xf2>
 8018e40:	0669      	lsls	r1, r5, #25
 8018e42:	d5fb      	bpl.n	8018e3c <_printf_i+0xe8>
 8018e44:	881d      	ldrh	r5, [r3, #0]
 8018e46:	4854      	ldr	r0, [pc, #336]	; (8018f98 <_printf_i+0x244>)
 8018e48:	2f6f      	cmp	r7, #111	; 0x6f
 8018e4a:	bf0c      	ite	eq
 8018e4c:	2308      	moveq	r3, #8
 8018e4e:	230a      	movne	r3, #10
 8018e50:	2100      	movs	r1, #0
 8018e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018e56:	6866      	ldr	r6, [r4, #4]
 8018e58:	60a6      	str	r6, [r4, #8]
 8018e5a:	2e00      	cmp	r6, #0
 8018e5c:	bfa2      	ittt	ge
 8018e5e:	6821      	ldrge	r1, [r4, #0]
 8018e60:	f021 0104 	bicge.w	r1, r1, #4
 8018e64:	6021      	strge	r1, [r4, #0]
 8018e66:	b90d      	cbnz	r5, 8018e6c <_printf_i+0x118>
 8018e68:	2e00      	cmp	r6, #0
 8018e6a:	d04d      	beq.n	8018f08 <_printf_i+0x1b4>
 8018e6c:	4616      	mov	r6, r2
 8018e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8018e72:	fb03 5711 	mls	r7, r3, r1, r5
 8018e76:	5dc7      	ldrb	r7, [r0, r7]
 8018e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018e7c:	462f      	mov	r7, r5
 8018e7e:	42bb      	cmp	r3, r7
 8018e80:	460d      	mov	r5, r1
 8018e82:	d9f4      	bls.n	8018e6e <_printf_i+0x11a>
 8018e84:	2b08      	cmp	r3, #8
 8018e86:	d10b      	bne.n	8018ea0 <_printf_i+0x14c>
 8018e88:	6823      	ldr	r3, [r4, #0]
 8018e8a:	07df      	lsls	r7, r3, #31
 8018e8c:	d508      	bpl.n	8018ea0 <_printf_i+0x14c>
 8018e8e:	6923      	ldr	r3, [r4, #16]
 8018e90:	6861      	ldr	r1, [r4, #4]
 8018e92:	4299      	cmp	r1, r3
 8018e94:	bfde      	ittt	le
 8018e96:	2330      	movle	r3, #48	; 0x30
 8018e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018e9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018ea0:	1b92      	subs	r2, r2, r6
 8018ea2:	6122      	str	r2, [r4, #16]
 8018ea4:	f8cd a000 	str.w	sl, [sp]
 8018ea8:	464b      	mov	r3, r9
 8018eaa:	aa03      	add	r2, sp, #12
 8018eac:	4621      	mov	r1, r4
 8018eae:	4640      	mov	r0, r8
 8018eb0:	f7ff fee2 	bl	8018c78 <_printf_common>
 8018eb4:	3001      	adds	r0, #1
 8018eb6:	d14c      	bne.n	8018f52 <_printf_i+0x1fe>
 8018eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8018ebc:	b004      	add	sp, #16
 8018ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ec2:	4835      	ldr	r0, [pc, #212]	; (8018f98 <_printf_i+0x244>)
 8018ec4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018ec8:	6823      	ldr	r3, [r4, #0]
 8018eca:	680e      	ldr	r6, [r1, #0]
 8018ecc:	061f      	lsls	r7, r3, #24
 8018ece:	f856 5b04 	ldr.w	r5, [r6], #4
 8018ed2:	600e      	str	r6, [r1, #0]
 8018ed4:	d514      	bpl.n	8018f00 <_printf_i+0x1ac>
 8018ed6:	07d9      	lsls	r1, r3, #31
 8018ed8:	bf44      	itt	mi
 8018eda:	f043 0320 	orrmi.w	r3, r3, #32
 8018ede:	6023      	strmi	r3, [r4, #0]
 8018ee0:	b91d      	cbnz	r5, 8018eea <_printf_i+0x196>
 8018ee2:	6823      	ldr	r3, [r4, #0]
 8018ee4:	f023 0320 	bic.w	r3, r3, #32
 8018ee8:	6023      	str	r3, [r4, #0]
 8018eea:	2310      	movs	r3, #16
 8018eec:	e7b0      	b.n	8018e50 <_printf_i+0xfc>
 8018eee:	6823      	ldr	r3, [r4, #0]
 8018ef0:	f043 0320 	orr.w	r3, r3, #32
 8018ef4:	6023      	str	r3, [r4, #0]
 8018ef6:	2378      	movs	r3, #120	; 0x78
 8018ef8:	4828      	ldr	r0, [pc, #160]	; (8018f9c <_printf_i+0x248>)
 8018efa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018efe:	e7e3      	b.n	8018ec8 <_printf_i+0x174>
 8018f00:	065e      	lsls	r6, r3, #25
 8018f02:	bf48      	it	mi
 8018f04:	b2ad      	uxthmi	r5, r5
 8018f06:	e7e6      	b.n	8018ed6 <_printf_i+0x182>
 8018f08:	4616      	mov	r6, r2
 8018f0a:	e7bb      	b.n	8018e84 <_printf_i+0x130>
 8018f0c:	680b      	ldr	r3, [r1, #0]
 8018f0e:	6826      	ldr	r6, [r4, #0]
 8018f10:	6960      	ldr	r0, [r4, #20]
 8018f12:	1d1d      	adds	r5, r3, #4
 8018f14:	600d      	str	r5, [r1, #0]
 8018f16:	0635      	lsls	r5, r6, #24
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	d501      	bpl.n	8018f20 <_printf_i+0x1cc>
 8018f1c:	6018      	str	r0, [r3, #0]
 8018f1e:	e002      	b.n	8018f26 <_printf_i+0x1d2>
 8018f20:	0671      	lsls	r1, r6, #25
 8018f22:	d5fb      	bpl.n	8018f1c <_printf_i+0x1c8>
 8018f24:	8018      	strh	r0, [r3, #0]
 8018f26:	2300      	movs	r3, #0
 8018f28:	6123      	str	r3, [r4, #16]
 8018f2a:	4616      	mov	r6, r2
 8018f2c:	e7ba      	b.n	8018ea4 <_printf_i+0x150>
 8018f2e:	680b      	ldr	r3, [r1, #0]
 8018f30:	1d1a      	adds	r2, r3, #4
 8018f32:	600a      	str	r2, [r1, #0]
 8018f34:	681e      	ldr	r6, [r3, #0]
 8018f36:	6862      	ldr	r2, [r4, #4]
 8018f38:	2100      	movs	r1, #0
 8018f3a:	4630      	mov	r0, r6
 8018f3c:	f7e7 f960 	bl	8000200 <memchr>
 8018f40:	b108      	cbz	r0, 8018f46 <_printf_i+0x1f2>
 8018f42:	1b80      	subs	r0, r0, r6
 8018f44:	6060      	str	r0, [r4, #4]
 8018f46:	6863      	ldr	r3, [r4, #4]
 8018f48:	6123      	str	r3, [r4, #16]
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018f50:	e7a8      	b.n	8018ea4 <_printf_i+0x150>
 8018f52:	6923      	ldr	r3, [r4, #16]
 8018f54:	4632      	mov	r2, r6
 8018f56:	4649      	mov	r1, r9
 8018f58:	4640      	mov	r0, r8
 8018f5a:	47d0      	blx	sl
 8018f5c:	3001      	adds	r0, #1
 8018f5e:	d0ab      	beq.n	8018eb8 <_printf_i+0x164>
 8018f60:	6823      	ldr	r3, [r4, #0]
 8018f62:	079b      	lsls	r3, r3, #30
 8018f64:	d413      	bmi.n	8018f8e <_printf_i+0x23a>
 8018f66:	68e0      	ldr	r0, [r4, #12]
 8018f68:	9b03      	ldr	r3, [sp, #12]
 8018f6a:	4298      	cmp	r0, r3
 8018f6c:	bfb8      	it	lt
 8018f6e:	4618      	movlt	r0, r3
 8018f70:	e7a4      	b.n	8018ebc <_printf_i+0x168>
 8018f72:	2301      	movs	r3, #1
 8018f74:	4632      	mov	r2, r6
 8018f76:	4649      	mov	r1, r9
 8018f78:	4640      	mov	r0, r8
 8018f7a:	47d0      	blx	sl
 8018f7c:	3001      	adds	r0, #1
 8018f7e:	d09b      	beq.n	8018eb8 <_printf_i+0x164>
 8018f80:	3501      	adds	r5, #1
 8018f82:	68e3      	ldr	r3, [r4, #12]
 8018f84:	9903      	ldr	r1, [sp, #12]
 8018f86:	1a5b      	subs	r3, r3, r1
 8018f88:	42ab      	cmp	r3, r5
 8018f8a:	dcf2      	bgt.n	8018f72 <_printf_i+0x21e>
 8018f8c:	e7eb      	b.n	8018f66 <_printf_i+0x212>
 8018f8e:	2500      	movs	r5, #0
 8018f90:	f104 0619 	add.w	r6, r4, #25
 8018f94:	e7f5      	b.n	8018f82 <_printf_i+0x22e>
 8018f96:	bf00      	nop
 8018f98:	0801d2d9 	.word	0x0801d2d9
 8018f9c:	0801d2ea 	.word	0x0801d2ea

08018fa0 <__sread>:
 8018fa0:	b510      	push	{r4, lr}
 8018fa2:	460c      	mov	r4, r1
 8018fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fa8:	f000 fa60 	bl	801946c <_read_r>
 8018fac:	2800      	cmp	r0, #0
 8018fae:	bfab      	itete	ge
 8018fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8018fb4:	181b      	addge	r3, r3, r0
 8018fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018fba:	bfac      	ite	ge
 8018fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8018fbe:	81a3      	strhlt	r3, [r4, #12]
 8018fc0:	bd10      	pop	{r4, pc}

08018fc2 <__swrite>:
 8018fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fc6:	461f      	mov	r7, r3
 8018fc8:	898b      	ldrh	r3, [r1, #12]
 8018fca:	05db      	lsls	r3, r3, #23
 8018fcc:	4605      	mov	r5, r0
 8018fce:	460c      	mov	r4, r1
 8018fd0:	4616      	mov	r6, r2
 8018fd2:	d505      	bpl.n	8018fe0 <__swrite+0x1e>
 8018fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fd8:	2302      	movs	r3, #2
 8018fda:	2200      	movs	r2, #0
 8018fdc:	f000 f9d0 	bl	8019380 <_lseek_r>
 8018fe0:	89a3      	ldrh	r3, [r4, #12]
 8018fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018fea:	81a3      	strh	r3, [r4, #12]
 8018fec:	4632      	mov	r2, r6
 8018fee:	463b      	mov	r3, r7
 8018ff0:	4628      	mov	r0, r5
 8018ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018ff6:	f000 b869 	b.w	80190cc <_write_r>

08018ffa <__sseek>:
 8018ffa:	b510      	push	{r4, lr}
 8018ffc:	460c      	mov	r4, r1
 8018ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019002:	f000 f9bd 	bl	8019380 <_lseek_r>
 8019006:	1c43      	adds	r3, r0, #1
 8019008:	89a3      	ldrh	r3, [r4, #12]
 801900a:	bf15      	itete	ne
 801900c:	6560      	strne	r0, [r4, #84]	; 0x54
 801900e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019016:	81a3      	strheq	r3, [r4, #12]
 8019018:	bf18      	it	ne
 801901a:	81a3      	strhne	r3, [r4, #12]
 801901c:	bd10      	pop	{r4, pc}

0801901e <__sclose>:
 801901e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019022:	f000 b8db 	b.w	80191dc <_close_r>
	...

08019028 <__swbuf_r>:
 8019028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801902a:	460e      	mov	r6, r1
 801902c:	4614      	mov	r4, r2
 801902e:	4605      	mov	r5, r0
 8019030:	b118      	cbz	r0, 801903a <__swbuf_r+0x12>
 8019032:	6983      	ldr	r3, [r0, #24]
 8019034:	b90b      	cbnz	r3, 801903a <__swbuf_r+0x12>
 8019036:	f7ff fc07 	bl	8018848 <__sinit>
 801903a:	4b21      	ldr	r3, [pc, #132]	; (80190c0 <__swbuf_r+0x98>)
 801903c:	429c      	cmp	r4, r3
 801903e:	d12b      	bne.n	8019098 <__swbuf_r+0x70>
 8019040:	686c      	ldr	r4, [r5, #4]
 8019042:	69a3      	ldr	r3, [r4, #24]
 8019044:	60a3      	str	r3, [r4, #8]
 8019046:	89a3      	ldrh	r3, [r4, #12]
 8019048:	071a      	lsls	r2, r3, #28
 801904a:	d52f      	bpl.n	80190ac <__swbuf_r+0x84>
 801904c:	6923      	ldr	r3, [r4, #16]
 801904e:	b36b      	cbz	r3, 80190ac <__swbuf_r+0x84>
 8019050:	6923      	ldr	r3, [r4, #16]
 8019052:	6820      	ldr	r0, [r4, #0]
 8019054:	1ac0      	subs	r0, r0, r3
 8019056:	6963      	ldr	r3, [r4, #20]
 8019058:	b2f6      	uxtb	r6, r6
 801905a:	4283      	cmp	r3, r0
 801905c:	4637      	mov	r7, r6
 801905e:	dc04      	bgt.n	801906a <__swbuf_r+0x42>
 8019060:	4621      	mov	r1, r4
 8019062:	4628      	mov	r0, r5
 8019064:	f000 f950 	bl	8019308 <_fflush_r>
 8019068:	bb30      	cbnz	r0, 80190b8 <__swbuf_r+0x90>
 801906a:	68a3      	ldr	r3, [r4, #8]
 801906c:	3b01      	subs	r3, #1
 801906e:	60a3      	str	r3, [r4, #8]
 8019070:	6823      	ldr	r3, [r4, #0]
 8019072:	1c5a      	adds	r2, r3, #1
 8019074:	6022      	str	r2, [r4, #0]
 8019076:	701e      	strb	r6, [r3, #0]
 8019078:	6963      	ldr	r3, [r4, #20]
 801907a:	3001      	adds	r0, #1
 801907c:	4283      	cmp	r3, r0
 801907e:	d004      	beq.n	801908a <__swbuf_r+0x62>
 8019080:	89a3      	ldrh	r3, [r4, #12]
 8019082:	07db      	lsls	r3, r3, #31
 8019084:	d506      	bpl.n	8019094 <__swbuf_r+0x6c>
 8019086:	2e0a      	cmp	r6, #10
 8019088:	d104      	bne.n	8019094 <__swbuf_r+0x6c>
 801908a:	4621      	mov	r1, r4
 801908c:	4628      	mov	r0, r5
 801908e:	f000 f93b 	bl	8019308 <_fflush_r>
 8019092:	b988      	cbnz	r0, 80190b8 <__swbuf_r+0x90>
 8019094:	4638      	mov	r0, r7
 8019096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019098:	4b0a      	ldr	r3, [pc, #40]	; (80190c4 <__swbuf_r+0x9c>)
 801909a:	429c      	cmp	r4, r3
 801909c:	d101      	bne.n	80190a2 <__swbuf_r+0x7a>
 801909e:	68ac      	ldr	r4, [r5, #8]
 80190a0:	e7cf      	b.n	8019042 <__swbuf_r+0x1a>
 80190a2:	4b09      	ldr	r3, [pc, #36]	; (80190c8 <__swbuf_r+0xa0>)
 80190a4:	429c      	cmp	r4, r3
 80190a6:	bf08      	it	eq
 80190a8:	68ec      	ldreq	r4, [r5, #12]
 80190aa:	e7ca      	b.n	8019042 <__swbuf_r+0x1a>
 80190ac:	4621      	mov	r1, r4
 80190ae:	4628      	mov	r0, r5
 80190b0:	f000 f81e 	bl	80190f0 <__swsetup_r>
 80190b4:	2800      	cmp	r0, #0
 80190b6:	d0cb      	beq.n	8019050 <__swbuf_r+0x28>
 80190b8:	f04f 37ff 	mov.w	r7, #4294967295
 80190bc:	e7ea      	b.n	8019094 <__swbuf_r+0x6c>
 80190be:	bf00      	nop
 80190c0:	0801d288 	.word	0x0801d288
 80190c4:	0801d2a8 	.word	0x0801d2a8
 80190c8:	0801d268 	.word	0x0801d268

080190cc <_write_r>:
 80190cc:	b538      	push	{r3, r4, r5, lr}
 80190ce:	4d07      	ldr	r5, [pc, #28]	; (80190ec <_write_r+0x20>)
 80190d0:	4604      	mov	r4, r0
 80190d2:	4608      	mov	r0, r1
 80190d4:	4611      	mov	r1, r2
 80190d6:	2200      	movs	r2, #0
 80190d8:	602a      	str	r2, [r5, #0]
 80190da:	461a      	mov	r2, r3
 80190dc:	f7e7 ff03 	bl	8000ee6 <_write>
 80190e0:	1c43      	adds	r3, r0, #1
 80190e2:	d102      	bne.n	80190ea <_write_r+0x1e>
 80190e4:	682b      	ldr	r3, [r5, #0]
 80190e6:	b103      	cbz	r3, 80190ea <_write_r+0x1e>
 80190e8:	6023      	str	r3, [r4, #0]
 80190ea:	bd38      	pop	{r3, r4, r5, pc}
 80190ec:	2000bda4 	.word	0x2000bda4

080190f0 <__swsetup_r>:
 80190f0:	4b32      	ldr	r3, [pc, #200]	; (80191bc <__swsetup_r+0xcc>)
 80190f2:	b570      	push	{r4, r5, r6, lr}
 80190f4:	681d      	ldr	r5, [r3, #0]
 80190f6:	4606      	mov	r6, r0
 80190f8:	460c      	mov	r4, r1
 80190fa:	b125      	cbz	r5, 8019106 <__swsetup_r+0x16>
 80190fc:	69ab      	ldr	r3, [r5, #24]
 80190fe:	b913      	cbnz	r3, 8019106 <__swsetup_r+0x16>
 8019100:	4628      	mov	r0, r5
 8019102:	f7ff fba1 	bl	8018848 <__sinit>
 8019106:	4b2e      	ldr	r3, [pc, #184]	; (80191c0 <__swsetup_r+0xd0>)
 8019108:	429c      	cmp	r4, r3
 801910a:	d10f      	bne.n	801912c <__swsetup_r+0x3c>
 801910c:	686c      	ldr	r4, [r5, #4]
 801910e:	89a3      	ldrh	r3, [r4, #12]
 8019110:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019114:	0719      	lsls	r1, r3, #28
 8019116:	d42c      	bmi.n	8019172 <__swsetup_r+0x82>
 8019118:	06dd      	lsls	r5, r3, #27
 801911a:	d411      	bmi.n	8019140 <__swsetup_r+0x50>
 801911c:	2309      	movs	r3, #9
 801911e:	6033      	str	r3, [r6, #0]
 8019120:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019124:	81a3      	strh	r3, [r4, #12]
 8019126:	f04f 30ff 	mov.w	r0, #4294967295
 801912a:	e03e      	b.n	80191aa <__swsetup_r+0xba>
 801912c:	4b25      	ldr	r3, [pc, #148]	; (80191c4 <__swsetup_r+0xd4>)
 801912e:	429c      	cmp	r4, r3
 8019130:	d101      	bne.n	8019136 <__swsetup_r+0x46>
 8019132:	68ac      	ldr	r4, [r5, #8]
 8019134:	e7eb      	b.n	801910e <__swsetup_r+0x1e>
 8019136:	4b24      	ldr	r3, [pc, #144]	; (80191c8 <__swsetup_r+0xd8>)
 8019138:	429c      	cmp	r4, r3
 801913a:	bf08      	it	eq
 801913c:	68ec      	ldreq	r4, [r5, #12]
 801913e:	e7e6      	b.n	801910e <__swsetup_r+0x1e>
 8019140:	0758      	lsls	r0, r3, #29
 8019142:	d512      	bpl.n	801916a <__swsetup_r+0x7a>
 8019144:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019146:	b141      	cbz	r1, 801915a <__swsetup_r+0x6a>
 8019148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801914c:	4299      	cmp	r1, r3
 801914e:	d002      	beq.n	8019156 <__swsetup_r+0x66>
 8019150:	4630      	mov	r0, r6
 8019152:	f7ff f9f1 	bl	8018538 <_free_r>
 8019156:	2300      	movs	r3, #0
 8019158:	6363      	str	r3, [r4, #52]	; 0x34
 801915a:	89a3      	ldrh	r3, [r4, #12]
 801915c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019160:	81a3      	strh	r3, [r4, #12]
 8019162:	2300      	movs	r3, #0
 8019164:	6063      	str	r3, [r4, #4]
 8019166:	6923      	ldr	r3, [r4, #16]
 8019168:	6023      	str	r3, [r4, #0]
 801916a:	89a3      	ldrh	r3, [r4, #12]
 801916c:	f043 0308 	orr.w	r3, r3, #8
 8019170:	81a3      	strh	r3, [r4, #12]
 8019172:	6923      	ldr	r3, [r4, #16]
 8019174:	b94b      	cbnz	r3, 801918a <__swsetup_r+0x9a>
 8019176:	89a3      	ldrh	r3, [r4, #12]
 8019178:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801917c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019180:	d003      	beq.n	801918a <__swsetup_r+0x9a>
 8019182:	4621      	mov	r1, r4
 8019184:	4630      	mov	r0, r6
 8019186:	f000 f931 	bl	80193ec <__smakebuf_r>
 801918a:	89a0      	ldrh	r0, [r4, #12]
 801918c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019190:	f010 0301 	ands.w	r3, r0, #1
 8019194:	d00a      	beq.n	80191ac <__swsetup_r+0xbc>
 8019196:	2300      	movs	r3, #0
 8019198:	60a3      	str	r3, [r4, #8]
 801919a:	6963      	ldr	r3, [r4, #20]
 801919c:	425b      	negs	r3, r3
 801919e:	61a3      	str	r3, [r4, #24]
 80191a0:	6923      	ldr	r3, [r4, #16]
 80191a2:	b943      	cbnz	r3, 80191b6 <__swsetup_r+0xc6>
 80191a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80191a8:	d1ba      	bne.n	8019120 <__swsetup_r+0x30>
 80191aa:	bd70      	pop	{r4, r5, r6, pc}
 80191ac:	0781      	lsls	r1, r0, #30
 80191ae:	bf58      	it	pl
 80191b0:	6963      	ldrpl	r3, [r4, #20]
 80191b2:	60a3      	str	r3, [r4, #8]
 80191b4:	e7f4      	b.n	80191a0 <__swsetup_r+0xb0>
 80191b6:	2000      	movs	r0, #0
 80191b8:	e7f7      	b.n	80191aa <__swsetup_r+0xba>
 80191ba:	bf00      	nop
 80191bc:	2000001c 	.word	0x2000001c
 80191c0:	0801d288 	.word	0x0801d288
 80191c4:	0801d2a8 	.word	0x0801d2a8
 80191c8:	0801d268 	.word	0x0801d268

080191cc <abort>:
 80191cc:	b508      	push	{r3, lr}
 80191ce:	2006      	movs	r0, #6
 80191d0:	f000 f986 	bl	80194e0 <raise>
 80191d4:	2001      	movs	r0, #1
 80191d6:	f7e7 fe5f 	bl	8000e98 <_exit>
	...

080191dc <_close_r>:
 80191dc:	b538      	push	{r3, r4, r5, lr}
 80191de:	4d06      	ldr	r5, [pc, #24]	; (80191f8 <_close_r+0x1c>)
 80191e0:	2300      	movs	r3, #0
 80191e2:	4604      	mov	r4, r0
 80191e4:	4608      	mov	r0, r1
 80191e6:	602b      	str	r3, [r5, #0]
 80191e8:	f7e7 fe99 	bl	8000f1e <_close>
 80191ec:	1c43      	adds	r3, r0, #1
 80191ee:	d102      	bne.n	80191f6 <_close_r+0x1a>
 80191f0:	682b      	ldr	r3, [r5, #0]
 80191f2:	b103      	cbz	r3, 80191f6 <_close_r+0x1a>
 80191f4:	6023      	str	r3, [r4, #0]
 80191f6:	bd38      	pop	{r3, r4, r5, pc}
 80191f8:	2000bda4 	.word	0x2000bda4

080191fc <__sflush_r>:
 80191fc:	898a      	ldrh	r2, [r1, #12]
 80191fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019202:	4605      	mov	r5, r0
 8019204:	0710      	lsls	r0, r2, #28
 8019206:	460c      	mov	r4, r1
 8019208:	d458      	bmi.n	80192bc <__sflush_r+0xc0>
 801920a:	684b      	ldr	r3, [r1, #4]
 801920c:	2b00      	cmp	r3, #0
 801920e:	dc05      	bgt.n	801921c <__sflush_r+0x20>
 8019210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019212:	2b00      	cmp	r3, #0
 8019214:	dc02      	bgt.n	801921c <__sflush_r+0x20>
 8019216:	2000      	movs	r0, #0
 8019218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801921c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801921e:	2e00      	cmp	r6, #0
 8019220:	d0f9      	beq.n	8019216 <__sflush_r+0x1a>
 8019222:	2300      	movs	r3, #0
 8019224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019228:	682f      	ldr	r7, [r5, #0]
 801922a:	602b      	str	r3, [r5, #0]
 801922c:	d032      	beq.n	8019294 <__sflush_r+0x98>
 801922e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019230:	89a3      	ldrh	r3, [r4, #12]
 8019232:	075a      	lsls	r2, r3, #29
 8019234:	d505      	bpl.n	8019242 <__sflush_r+0x46>
 8019236:	6863      	ldr	r3, [r4, #4]
 8019238:	1ac0      	subs	r0, r0, r3
 801923a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801923c:	b10b      	cbz	r3, 8019242 <__sflush_r+0x46>
 801923e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019240:	1ac0      	subs	r0, r0, r3
 8019242:	2300      	movs	r3, #0
 8019244:	4602      	mov	r2, r0
 8019246:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019248:	6a21      	ldr	r1, [r4, #32]
 801924a:	4628      	mov	r0, r5
 801924c:	47b0      	blx	r6
 801924e:	1c43      	adds	r3, r0, #1
 8019250:	89a3      	ldrh	r3, [r4, #12]
 8019252:	d106      	bne.n	8019262 <__sflush_r+0x66>
 8019254:	6829      	ldr	r1, [r5, #0]
 8019256:	291d      	cmp	r1, #29
 8019258:	d82c      	bhi.n	80192b4 <__sflush_r+0xb8>
 801925a:	4a2a      	ldr	r2, [pc, #168]	; (8019304 <__sflush_r+0x108>)
 801925c:	40ca      	lsrs	r2, r1
 801925e:	07d6      	lsls	r6, r2, #31
 8019260:	d528      	bpl.n	80192b4 <__sflush_r+0xb8>
 8019262:	2200      	movs	r2, #0
 8019264:	6062      	str	r2, [r4, #4]
 8019266:	04d9      	lsls	r1, r3, #19
 8019268:	6922      	ldr	r2, [r4, #16]
 801926a:	6022      	str	r2, [r4, #0]
 801926c:	d504      	bpl.n	8019278 <__sflush_r+0x7c>
 801926e:	1c42      	adds	r2, r0, #1
 8019270:	d101      	bne.n	8019276 <__sflush_r+0x7a>
 8019272:	682b      	ldr	r3, [r5, #0]
 8019274:	b903      	cbnz	r3, 8019278 <__sflush_r+0x7c>
 8019276:	6560      	str	r0, [r4, #84]	; 0x54
 8019278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801927a:	602f      	str	r7, [r5, #0]
 801927c:	2900      	cmp	r1, #0
 801927e:	d0ca      	beq.n	8019216 <__sflush_r+0x1a>
 8019280:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019284:	4299      	cmp	r1, r3
 8019286:	d002      	beq.n	801928e <__sflush_r+0x92>
 8019288:	4628      	mov	r0, r5
 801928a:	f7ff f955 	bl	8018538 <_free_r>
 801928e:	2000      	movs	r0, #0
 8019290:	6360      	str	r0, [r4, #52]	; 0x34
 8019292:	e7c1      	b.n	8019218 <__sflush_r+0x1c>
 8019294:	6a21      	ldr	r1, [r4, #32]
 8019296:	2301      	movs	r3, #1
 8019298:	4628      	mov	r0, r5
 801929a:	47b0      	blx	r6
 801929c:	1c41      	adds	r1, r0, #1
 801929e:	d1c7      	bne.n	8019230 <__sflush_r+0x34>
 80192a0:	682b      	ldr	r3, [r5, #0]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d0c4      	beq.n	8019230 <__sflush_r+0x34>
 80192a6:	2b1d      	cmp	r3, #29
 80192a8:	d001      	beq.n	80192ae <__sflush_r+0xb2>
 80192aa:	2b16      	cmp	r3, #22
 80192ac:	d101      	bne.n	80192b2 <__sflush_r+0xb6>
 80192ae:	602f      	str	r7, [r5, #0]
 80192b0:	e7b1      	b.n	8019216 <__sflush_r+0x1a>
 80192b2:	89a3      	ldrh	r3, [r4, #12]
 80192b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192b8:	81a3      	strh	r3, [r4, #12]
 80192ba:	e7ad      	b.n	8019218 <__sflush_r+0x1c>
 80192bc:	690f      	ldr	r7, [r1, #16]
 80192be:	2f00      	cmp	r7, #0
 80192c0:	d0a9      	beq.n	8019216 <__sflush_r+0x1a>
 80192c2:	0793      	lsls	r3, r2, #30
 80192c4:	680e      	ldr	r6, [r1, #0]
 80192c6:	bf08      	it	eq
 80192c8:	694b      	ldreq	r3, [r1, #20]
 80192ca:	600f      	str	r7, [r1, #0]
 80192cc:	bf18      	it	ne
 80192ce:	2300      	movne	r3, #0
 80192d0:	eba6 0807 	sub.w	r8, r6, r7
 80192d4:	608b      	str	r3, [r1, #8]
 80192d6:	f1b8 0f00 	cmp.w	r8, #0
 80192da:	dd9c      	ble.n	8019216 <__sflush_r+0x1a>
 80192dc:	6a21      	ldr	r1, [r4, #32]
 80192de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80192e0:	4643      	mov	r3, r8
 80192e2:	463a      	mov	r2, r7
 80192e4:	4628      	mov	r0, r5
 80192e6:	47b0      	blx	r6
 80192e8:	2800      	cmp	r0, #0
 80192ea:	dc06      	bgt.n	80192fa <__sflush_r+0xfe>
 80192ec:	89a3      	ldrh	r3, [r4, #12]
 80192ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192f2:	81a3      	strh	r3, [r4, #12]
 80192f4:	f04f 30ff 	mov.w	r0, #4294967295
 80192f8:	e78e      	b.n	8019218 <__sflush_r+0x1c>
 80192fa:	4407      	add	r7, r0
 80192fc:	eba8 0800 	sub.w	r8, r8, r0
 8019300:	e7e9      	b.n	80192d6 <__sflush_r+0xda>
 8019302:	bf00      	nop
 8019304:	20400001 	.word	0x20400001

08019308 <_fflush_r>:
 8019308:	b538      	push	{r3, r4, r5, lr}
 801930a:	690b      	ldr	r3, [r1, #16]
 801930c:	4605      	mov	r5, r0
 801930e:	460c      	mov	r4, r1
 8019310:	b913      	cbnz	r3, 8019318 <_fflush_r+0x10>
 8019312:	2500      	movs	r5, #0
 8019314:	4628      	mov	r0, r5
 8019316:	bd38      	pop	{r3, r4, r5, pc}
 8019318:	b118      	cbz	r0, 8019322 <_fflush_r+0x1a>
 801931a:	6983      	ldr	r3, [r0, #24]
 801931c:	b90b      	cbnz	r3, 8019322 <_fflush_r+0x1a>
 801931e:	f7ff fa93 	bl	8018848 <__sinit>
 8019322:	4b14      	ldr	r3, [pc, #80]	; (8019374 <_fflush_r+0x6c>)
 8019324:	429c      	cmp	r4, r3
 8019326:	d11b      	bne.n	8019360 <_fflush_r+0x58>
 8019328:	686c      	ldr	r4, [r5, #4]
 801932a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d0ef      	beq.n	8019312 <_fflush_r+0xa>
 8019332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019334:	07d0      	lsls	r0, r2, #31
 8019336:	d404      	bmi.n	8019342 <_fflush_r+0x3a>
 8019338:	0599      	lsls	r1, r3, #22
 801933a:	d402      	bmi.n	8019342 <_fflush_r+0x3a>
 801933c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801933e:	f7ff fb33 	bl	80189a8 <__retarget_lock_acquire_recursive>
 8019342:	4628      	mov	r0, r5
 8019344:	4621      	mov	r1, r4
 8019346:	f7ff ff59 	bl	80191fc <__sflush_r>
 801934a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801934c:	07da      	lsls	r2, r3, #31
 801934e:	4605      	mov	r5, r0
 8019350:	d4e0      	bmi.n	8019314 <_fflush_r+0xc>
 8019352:	89a3      	ldrh	r3, [r4, #12]
 8019354:	059b      	lsls	r3, r3, #22
 8019356:	d4dd      	bmi.n	8019314 <_fflush_r+0xc>
 8019358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801935a:	f7ff fb26 	bl	80189aa <__retarget_lock_release_recursive>
 801935e:	e7d9      	b.n	8019314 <_fflush_r+0xc>
 8019360:	4b05      	ldr	r3, [pc, #20]	; (8019378 <_fflush_r+0x70>)
 8019362:	429c      	cmp	r4, r3
 8019364:	d101      	bne.n	801936a <_fflush_r+0x62>
 8019366:	68ac      	ldr	r4, [r5, #8]
 8019368:	e7df      	b.n	801932a <_fflush_r+0x22>
 801936a:	4b04      	ldr	r3, [pc, #16]	; (801937c <_fflush_r+0x74>)
 801936c:	429c      	cmp	r4, r3
 801936e:	bf08      	it	eq
 8019370:	68ec      	ldreq	r4, [r5, #12]
 8019372:	e7da      	b.n	801932a <_fflush_r+0x22>
 8019374:	0801d288 	.word	0x0801d288
 8019378:	0801d2a8 	.word	0x0801d2a8
 801937c:	0801d268 	.word	0x0801d268

08019380 <_lseek_r>:
 8019380:	b538      	push	{r3, r4, r5, lr}
 8019382:	4d07      	ldr	r5, [pc, #28]	; (80193a0 <_lseek_r+0x20>)
 8019384:	4604      	mov	r4, r0
 8019386:	4608      	mov	r0, r1
 8019388:	4611      	mov	r1, r2
 801938a:	2200      	movs	r2, #0
 801938c:	602a      	str	r2, [r5, #0]
 801938e:	461a      	mov	r2, r3
 8019390:	f7e7 fdec 	bl	8000f6c <_lseek>
 8019394:	1c43      	adds	r3, r0, #1
 8019396:	d102      	bne.n	801939e <_lseek_r+0x1e>
 8019398:	682b      	ldr	r3, [r5, #0]
 801939a:	b103      	cbz	r3, 801939e <_lseek_r+0x1e>
 801939c:	6023      	str	r3, [r4, #0]
 801939e:	bd38      	pop	{r3, r4, r5, pc}
 80193a0:	2000bda4 	.word	0x2000bda4

080193a4 <__swhatbuf_r>:
 80193a4:	b570      	push	{r4, r5, r6, lr}
 80193a6:	460e      	mov	r6, r1
 80193a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80193ac:	2900      	cmp	r1, #0
 80193ae:	b096      	sub	sp, #88	; 0x58
 80193b0:	4614      	mov	r4, r2
 80193b2:	461d      	mov	r5, r3
 80193b4:	da07      	bge.n	80193c6 <__swhatbuf_r+0x22>
 80193b6:	2300      	movs	r3, #0
 80193b8:	602b      	str	r3, [r5, #0]
 80193ba:	89b3      	ldrh	r3, [r6, #12]
 80193bc:	061a      	lsls	r2, r3, #24
 80193be:	d410      	bmi.n	80193e2 <__swhatbuf_r+0x3e>
 80193c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80193c4:	e00e      	b.n	80193e4 <__swhatbuf_r+0x40>
 80193c6:	466a      	mov	r2, sp
 80193c8:	f000 f8a6 	bl	8019518 <_fstat_r>
 80193cc:	2800      	cmp	r0, #0
 80193ce:	dbf2      	blt.n	80193b6 <__swhatbuf_r+0x12>
 80193d0:	9a01      	ldr	r2, [sp, #4]
 80193d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80193d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80193da:	425a      	negs	r2, r3
 80193dc:	415a      	adcs	r2, r3
 80193de:	602a      	str	r2, [r5, #0]
 80193e0:	e7ee      	b.n	80193c0 <__swhatbuf_r+0x1c>
 80193e2:	2340      	movs	r3, #64	; 0x40
 80193e4:	2000      	movs	r0, #0
 80193e6:	6023      	str	r3, [r4, #0]
 80193e8:	b016      	add	sp, #88	; 0x58
 80193ea:	bd70      	pop	{r4, r5, r6, pc}

080193ec <__smakebuf_r>:
 80193ec:	898b      	ldrh	r3, [r1, #12]
 80193ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80193f0:	079d      	lsls	r5, r3, #30
 80193f2:	4606      	mov	r6, r0
 80193f4:	460c      	mov	r4, r1
 80193f6:	d507      	bpl.n	8019408 <__smakebuf_r+0x1c>
 80193f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80193fc:	6023      	str	r3, [r4, #0]
 80193fe:	6123      	str	r3, [r4, #16]
 8019400:	2301      	movs	r3, #1
 8019402:	6163      	str	r3, [r4, #20]
 8019404:	b002      	add	sp, #8
 8019406:	bd70      	pop	{r4, r5, r6, pc}
 8019408:	ab01      	add	r3, sp, #4
 801940a:	466a      	mov	r2, sp
 801940c:	f7ff ffca 	bl	80193a4 <__swhatbuf_r>
 8019410:	9900      	ldr	r1, [sp, #0]
 8019412:	4605      	mov	r5, r0
 8019414:	4630      	mov	r0, r6
 8019416:	f7ff f8df 	bl	80185d8 <_malloc_r>
 801941a:	b948      	cbnz	r0, 8019430 <__smakebuf_r+0x44>
 801941c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019420:	059a      	lsls	r2, r3, #22
 8019422:	d4ef      	bmi.n	8019404 <__smakebuf_r+0x18>
 8019424:	f023 0303 	bic.w	r3, r3, #3
 8019428:	f043 0302 	orr.w	r3, r3, #2
 801942c:	81a3      	strh	r3, [r4, #12]
 801942e:	e7e3      	b.n	80193f8 <__smakebuf_r+0xc>
 8019430:	4b0d      	ldr	r3, [pc, #52]	; (8019468 <__smakebuf_r+0x7c>)
 8019432:	62b3      	str	r3, [r6, #40]	; 0x28
 8019434:	89a3      	ldrh	r3, [r4, #12]
 8019436:	6020      	str	r0, [r4, #0]
 8019438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801943c:	81a3      	strh	r3, [r4, #12]
 801943e:	9b00      	ldr	r3, [sp, #0]
 8019440:	6163      	str	r3, [r4, #20]
 8019442:	9b01      	ldr	r3, [sp, #4]
 8019444:	6120      	str	r0, [r4, #16]
 8019446:	b15b      	cbz	r3, 8019460 <__smakebuf_r+0x74>
 8019448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801944c:	4630      	mov	r0, r6
 801944e:	f000 f875 	bl	801953c <_isatty_r>
 8019452:	b128      	cbz	r0, 8019460 <__smakebuf_r+0x74>
 8019454:	89a3      	ldrh	r3, [r4, #12]
 8019456:	f023 0303 	bic.w	r3, r3, #3
 801945a:	f043 0301 	orr.w	r3, r3, #1
 801945e:	81a3      	strh	r3, [r4, #12]
 8019460:	89a0      	ldrh	r0, [r4, #12]
 8019462:	4305      	orrs	r5, r0
 8019464:	81a5      	strh	r5, [r4, #12]
 8019466:	e7cd      	b.n	8019404 <__smakebuf_r+0x18>
 8019468:	080187e1 	.word	0x080187e1

0801946c <_read_r>:
 801946c:	b538      	push	{r3, r4, r5, lr}
 801946e:	4d07      	ldr	r5, [pc, #28]	; (801948c <_read_r+0x20>)
 8019470:	4604      	mov	r4, r0
 8019472:	4608      	mov	r0, r1
 8019474:	4611      	mov	r1, r2
 8019476:	2200      	movs	r2, #0
 8019478:	602a      	str	r2, [r5, #0]
 801947a:	461a      	mov	r2, r3
 801947c:	f7e7 fd16 	bl	8000eac <_read>
 8019480:	1c43      	adds	r3, r0, #1
 8019482:	d102      	bne.n	801948a <_read_r+0x1e>
 8019484:	682b      	ldr	r3, [r5, #0]
 8019486:	b103      	cbz	r3, 801948a <_read_r+0x1e>
 8019488:	6023      	str	r3, [r4, #0]
 801948a:	bd38      	pop	{r3, r4, r5, pc}
 801948c:	2000bda4 	.word	0x2000bda4

08019490 <_raise_r>:
 8019490:	291f      	cmp	r1, #31
 8019492:	b538      	push	{r3, r4, r5, lr}
 8019494:	4604      	mov	r4, r0
 8019496:	460d      	mov	r5, r1
 8019498:	d904      	bls.n	80194a4 <_raise_r+0x14>
 801949a:	2316      	movs	r3, #22
 801949c:	6003      	str	r3, [r0, #0]
 801949e:	f04f 30ff 	mov.w	r0, #4294967295
 80194a2:	bd38      	pop	{r3, r4, r5, pc}
 80194a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80194a6:	b112      	cbz	r2, 80194ae <_raise_r+0x1e>
 80194a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80194ac:	b94b      	cbnz	r3, 80194c2 <_raise_r+0x32>
 80194ae:	4620      	mov	r0, r4
 80194b0:	f000 f830 	bl	8019514 <_getpid_r>
 80194b4:	462a      	mov	r2, r5
 80194b6:	4601      	mov	r1, r0
 80194b8:	4620      	mov	r0, r4
 80194ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80194be:	f000 b817 	b.w	80194f0 <_kill_r>
 80194c2:	2b01      	cmp	r3, #1
 80194c4:	d00a      	beq.n	80194dc <_raise_r+0x4c>
 80194c6:	1c59      	adds	r1, r3, #1
 80194c8:	d103      	bne.n	80194d2 <_raise_r+0x42>
 80194ca:	2316      	movs	r3, #22
 80194cc:	6003      	str	r3, [r0, #0]
 80194ce:	2001      	movs	r0, #1
 80194d0:	e7e7      	b.n	80194a2 <_raise_r+0x12>
 80194d2:	2400      	movs	r4, #0
 80194d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80194d8:	4628      	mov	r0, r5
 80194da:	4798      	blx	r3
 80194dc:	2000      	movs	r0, #0
 80194de:	e7e0      	b.n	80194a2 <_raise_r+0x12>

080194e0 <raise>:
 80194e0:	4b02      	ldr	r3, [pc, #8]	; (80194ec <raise+0xc>)
 80194e2:	4601      	mov	r1, r0
 80194e4:	6818      	ldr	r0, [r3, #0]
 80194e6:	f7ff bfd3 	b.w	8019490 <_raise_r>
 80194ea:	bf00      	nop
 80194ec:	2000001c 	.word	0x2000001c

080194f0 <_kill_r>:
 80194f0:	b538      	push	{r3, r4, r5, lr}
 80194f2:	4d07      	ldr	r5, [pc, #28]	; (8019510 <_kill_r+0x20>)
 80194f4:	2300      	movs	r3, #0
 80194f6:	4604      	mov	r4, r0
 80194f8:	4608      	mov	r0, r1
 80194fa:	4611      	mov	r1, r2
 80194fc:	602b      	str	r3, [r5, #0]
 80194fe:	f7e7 fcb9 	bl	8000e74 <_kill>
 8019502:	1c43      	adds	r3, r0, #1
 8019504:	d102      	bne.n	801950c <_kill_r+0x1c>
 8019506:	682b      	ldr	r3, [r5, #0]
 8019508:	b103      	cbz	r3, 801950c <_kill_r+0x1c>
 801950a:	6023      	str	r3, [r4, #0]
 801950c:	bd38      	pop	{r3, r4, r5, pc}
 801950e:	bf00      	nop
 8019510:	2000bda4 	.word	0x2000bda4

08019514 <_getpid_r>:
 8019514:	f7e7 bca6 	b.w	8000e64 <_getpid>

08019518 <_fstat_r>:
 8019518:	b538      	push	{r3, r4, r5, lr}
 801951a:	4d07      	ldr	r5, [pc, #28]	; (8019538 <_fstat_r+0x20>)
 801951c:	2300      	movs	r3, #0
 801951e:	4604      	mov	r4, r0
 8019520:	4608      	mov	r0, r1
 8019522:	4611      	mov	r1, r2
 8019524:	602b      	str	r3, [r5, #0]
 8019526:	f7e7 fd06 	bl	8000f36 <_fstat>
 801952a:	1c43      	adds	r3, r0, #1
 801952c:	d102      	bne.n	8019534 <_fstat_r+0x1c>
 801952e:	682b      	ldr	r3, [r5, #0]
 8019530:	b103      	cbz	r3, 8019534 <_fstat_r+0x1c>
 8019532:	6023      	str	r3, [r4, #0]
 8019534:	bd38      	pop	{r3, r4, r5, pc}
 8019536:	bf00      	nop
 8019538:	2000bda4 	.word	0x2000bda4

0801953c <_isatty_r>:
 801953c:	b538      	push	{r3, r4, r5, lr}
 801953e:	4d06      	ldr	r5, [pc, #24]	; (8019558 <_isatty_r+0x1c>)
 8019540:	2300      	movs	r3, #0
 8019542:	4604      	mov	r4, r0
 8019544:	4608      	mov	r0, r1
 8019546:	602b      	str	r3, [r5, #0]
 8019548:	f7e7 fd05 	bl	8000f56 <_isatty>
 801954c:	1c43      	adds	r3, r0, #1
 801954e:	d102      	bne.n	8019556 <_isatty_r+0x1a>
 8019550:	682b      	ldr	r3, [r5, #0]
 8019552:	b103      	cbz	r3, 8019556 <_isatty_r+0x1a>
 8019554:	6023      	str	r3, [r4, #0]
 8019556:	bd38      	pop	{r3, r4, r5, pc}
 8019558:	2000bda4 	.word	0x2000bda4

0801955c <_init>:
 801955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801955e:	bf00      	nop
 8019560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019562:	bc08      	pop	{r3}
 8019564:	469e      	mov	lr, r3
 8019566:	4770      	bx	lr

08019568 <_fini>:
 8019568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801956a:	bf00      	nop
 801956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801956e:	bc08      	pop	{r3}
 8019570:	469e      	mov	lr, r3
 8019572:	4770      	bx	lr
